
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ec  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08008ac4  08008ac4  00018ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aec  08008aec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008aec  08008aec  00018aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008af4  08008af4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af4  08008af4  00018af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  2000000c  08008b08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08008b08  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001931a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fb9  00000000  00000000  00039356  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b0  00000000  00000000  0003c310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001418  00000000  00000000  0003d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b68  00000000  00000000  0003ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001359e  00000000  00000000  00060840  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de148  00000000  00000000  00073dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151f26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b94  00000000  00000000  00151fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008aac 	.word	0x08008aac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008aac 	.word	0x08008aac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b092      	sub	sp, #72	; 0x48
 800051c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800051e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	223c      	movs	r2, #60	; 0x3c
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f008 fab3 	bl	8008a9c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000536:	4b40      	ldr	r3, [pc, #256]	; (8000638 <MX_ADC1_Init+0x120>)
 8000538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800053c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800053e:	4b3e      	ldr	r3, [pc, #248]	; (8000638 <MX_ADC1_Init+0x120>)
 8000540:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000544:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000546:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <MX_ADC1_Init+0x120>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054c:	4b3a      	ldr	r3, [pc, #232]	; (8000638 <MX_ADC1_Init+0x120>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000552:	4b39      	ldr	r3, [pc, #228]	; (8000638 <MX_ADC1_Init+0x120>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000558:	4b37      	ldr	r3, [pc, #220]	; (8000638 <MX_ADC1_Init+0x120>)
 800055a:	2201      	movs	r2, #1
 800055c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b36      	ldr	r3, [pc, #216]	; (8000638 <MX_ADC1_Init+0x120>)
 8000560:	2204      	movs	r2, #4
 8000562:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000564:	4b34      	ldr	r3, [pc, #208]	; (8000638 <MX_ADC1_Init+0x120>)
 8000566:	2200      	movs	r2, #0
 8000568:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056a:	4b33      	ldr	r3, [pc, #204]	; (8000638 <MX_ADC1_Init+0x120>)
 800056c:	2200      	movs	r2, #0
 800056e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000570:	4b31      	ldr	r3, [pc, #196]	; (8000638 <MX_ADC1_Init+0x120>)
 8000572:	2201      	movs	r2, #1
 8000574:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b30      	ldr	r3, [pc, #192]	; (8000638 <MX_ADC1_Init+0x120>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057e:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <MX_ADC1_Init+0x120>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000586:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <MX_ADC1_Init+0x120>)
 8000588:	2200      	movs	r2, #0
 800058a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800058c:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <MX_ADC1_Init+0x120>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4828      	ldr	r0, [pc, #160]	; (8000638 <MX_ADC1_Init+0x120>)
 8000596:	f001 fa33 	bl	8001a00 <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005a0:	f000 fbf1 	bl	8000d86 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ac:	4619      	mov	r1, r3
 80005ae:	4822      	ldr	r0, [pc, #136]	; (8000638 <MX_ADC1_Init+0x120>)
 80005b0:	f002 fe28 	bl	8003204 <HAL_ADCEx_MultiModeConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005ba:	f000 fbe4 	bl	8000d86 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x124>)
 80005c0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80005ca:	237f      	movs	r3, #127	; 0x7f
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80005ce:	2304      	movs	r3, #4
 80005d0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80005ec:	2384      	movs	r3, #132	; 0x84
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	480e      	ldr	r0, [pc, #56]	; (8000638 <MX_ADC1_Init+0x120>)
 8000600:	f002 f9a8 	bl	8002954 <HAL_ADCEx_InjectedConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800060a:	f000 fbbc 	bl	8000d86 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_ADC1_Init+0x128>)
 8000610:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000612:	f240 130f 	movw	r3, #271	; 0x10f
 8000616:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000618:	2303      	movs	r3, #3
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_ADC1_Init+0x120>)
 8000622:	f002 f997 	bl	8002954 <HAL_ADCEx_InjectedConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800062c:	f000 fbab 	bl	8000d86 <Error_Handler>
  }

}
 8000630:	bf00      	nop
 8000632:	3748      	adds	r7, #72	; 0x48
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000098 	.word	0x20000098
 800063c:	0c900008 	.word	0x0c900008
 8000640:	32601000 	.word	0x32601000

08000644 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b090      	sub	sp, #64	; 0x40
 8000648:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	223c      	movs	r2, #60	; 0x3c
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f008 fa23 	bl	8008a9c <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000656:	4b31      	ldr	r3, [pc, #196]	; (800071c <MX_ADC2_Init+0xd8>)
 8000658:	4a31      	ldr	r2, [pc, #196]	; (8000720 <MX_ADC2_Init+0xdc>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <MX_ADC2_Init+0xd8>)
 800065e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000662:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b2d      	ldr	r3, [pc, #180]	; (800071c <MX_ADC2_Init+0xd8>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_ADC2_Init+0xd8>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <MX_ADC2_Init+0xd8>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <MX_ADC2_Init+0xd8>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <MX_ADC2_Init+0xd8>)
 800067e:	2204      	movs	r2, #4
 8000680:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_ADC2_Init+0xd8>)
 8000684:	2200      	movs	r2, #0
 8000686:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <MX_ADC2_Init+0xd8>)
 800068a:	2200      	movs	r2, #0
 800068c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_ADC2_Init+0xd8>)
 8000690:	2201      	movs	r2, #1
 8000692:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_ADC2_Init+0xd8>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_ADC2_Init+0xd8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_ADC2_Init+0xd8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_ADC2_Init+0xd8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006b2:	481a      	ldr	r0, [pc, #104]	; (800071c <MX_ADC2_Init+0xd8>)
 80006b4:	f001 f9a4 	bl	8001a00 <HAL_ADC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80006be:	f000 fb62 	bl	8000d86 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_ADC2_Init+0xe0>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006c6:	2309      	movs	r3, #9
 80006c8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006ce:	237f      	movs	r3, #127	; 0x7f
 80006d0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80006d2:	2304      	movs	r3, #4
 80006d4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80006f0:	2384      	movs	r3, #132	; 0x84
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_ADC2_Init+0xd8>)
 8000704:	f002 f926 	bl	8002954 <HAL_ADCEx_InjectedConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800070e:	f000 fb3a 	bl	8000d86 <Error_Handler>
  }

}
 8000712:	bf00      	nop
 8000714:	3740      	adds	r7, #64	; 0x40
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000002c 	.word	0x2000002c
 8000720:	50000100 	.word	0x50000100
 8000724:	0c900008 	.word	0x0c900008

08000728 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000748:	d14e      	bne.n	80007e8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800074a:	4b47      	ldr	r3, [pc, #284]	; (8000868 <HAL_ADC_MspInit+0x140>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	4a45      	ldr	r2, [pc, #276]	; (8000868 <HAL_ADC_MspInit+0x140>)
 8000752:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000754:	4b44      	ldr	r3, [pc, #272]	; (8000868 <HAL_ADC_MspInit+0x140>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10b      	bne.n	8000774 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800075c:	4b43      	ldr	r3, [pc, #268]	; (800086c <HAL_ADC_MspInit+0x144>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000760:	4a42      	ldr	r2, [pc, #264]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000762:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000768:	4b40      	ldr	r3, [pc, #256]	; (800086c <HAL_ADC_MspInit+0x144>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b3d      	ldr	r3, [pc, #244]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000778:	4a3c      	ldr	r2, [pc, #240]	; (800086c <HAL_ADC_MspInit+0x144>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000780:	4b3a      	ldr	r3, [pc, #232]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b37      	ldr	r3, [pc, #220]	; (800086c <HAL_ADC_MspInit+0x144>)
 800078e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000790:	4a36      	ldr	r2, [pc, #216]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <HAL_ADC_MspInit+0x144>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80007a4:	2305      	movs	r3, #5
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f002 ff39 	bl	8003630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007be:	2302      	movs	r3, #2
 80007c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c2:	2303      	movs	r3, #3
 80007c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <HAL_ADC_MspInit+0x148>)
 80007d2:	f002 ff2d 	bl	8003630 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2012      	movs	r0, #18
 80007dc:	f002 fe8d 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007e0:	2012      	movs	r0, #18
 80007e2:	f002 fea4 	bl	800352e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007e6:	e03a      	b.n	800085e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <HAL_ADC_MspInit+0x14c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d135      	bne.n	800085e <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <HAL_ADC_MspInit+0x140>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <HAL_ADC_MspInit+0x140>)
 80007fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <HAL_ADC_MspInit+0x140>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10b      	bne.n	800081c <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	4a18      	ldr	r2, [pc, #96]	; (800086c <HAL_ADC_MspInit+0x144>)
 800080a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800080e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_ADC_MspInit+0x144>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_ADC_MspInit+0x144>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f002 fef1 	bl	8003630 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2012      	movs	r0, #18
 8000854:	f002 fe51 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000858:	2012      	movs	r0, #18
 800085a:	f002 fe68 	bl	800352e <HAL_NVIC_EnableIRQ>
}
 800085e:	bf00      	nop
 8000860:	3730      	adds	r7, #48	; 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000028 	.word	0x20000028
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400
 8000874:	50000100 	.word	0x50000100

08000878 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_GPIO_Init+0xcc>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <MX_GPIO_Init+0xcc>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_GPIO_Init+0xcc>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_GPIO_Init+0xcc>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a26      	ldr	r2, [pc, #152]	; (8000944 <MX_GPIO_Init+0xcc>)
 80008ac:	f043 0320 	orr.w	r3, r3, #32
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_GPIO_Init+0xcc>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0320 	and.w	r3, r3, #32
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_GPIO_Init+0xcc>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a20      	ldr	r2, [pc, #128]	; (8000944 <MX_GPIO_Init+0xcc>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_GPIO_Init+0xcc>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_GPIO_Init+0xcc>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <MX_GPIO_Init+0xcc>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_GPIO_Init+0xcc>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 80008ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000900:	2301      	movs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f002 fe8f 	bl	8003630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_GPIO_Init+0xd0>)
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4809      	ldr	r0, [pc, #36]	; (800094c <MX_GPIO_Init+0xd4>)
 8000928:	f002 fe82 	bl	8003630 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	210f      	movs	r1, #15
 8000930:	2028      	movs	r0, #40	; 0x28
 8000932:	f002 fde2 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000936:	2028      	movs	r0, #40	; 0x28
 8000938:	f002 fdf9 	bl	800352e <HAL_NVIC_EnableIRQ>

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	10110000 	.word	0x10110000
 800094c:	48000800 	.word	0x48000800

08000950 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 8000954:	217f      	movs	r1, #127	; 0x7f
 8000956:	4859      	ldr	r0, [pc, #356]	; (8000abc <start_up+0x16c>)
 8000958:	f001 fe5a 	bl	8002610 <HAL_ADCEx_Calibration_Start>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d008      	beq.n	8000974 <start_up+0x24>
 8000962:	217f      	movs	r1, #127	; 0x7f
 8000964:	4856      	ldr	r0, [pc, #344]	; (8000ac0 <start_up+0x170>)
 8000966:	f001 fe53 	bl	8002610 <HAL_ADCEx_Calibration_Start>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <start_up+0x24>
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <start_up+0x26>
 8000974:	2300      	movs	r3, #0
 8000976:	2b00      	cmp	r3, #0
 8000978:	f040 809e 	bne.w	8000ab8 <start_up+0x168>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)))
 800097c:	4a51      	ldr	r2, [pc, #324]	; (8000ac4 <start_up+0x174>)
 800097e:	4952      	ldr	r1, [pc, #328]	; (8000ac8 <start_up+0x178>)
 8000980:	4852      	ldr	r0, [pc, #328]	; (8000acc <start_up+0x17c>)
 8000982:	f003 f8f0 	bl	8003b66 <HAL_OPAMPEx_SelfCalibrateAll>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	f040 8095 	bne.w	8000ab8 <start_up+0x168>
		{


			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 800098e:	4b50      	ldr	r3, [pc, #320]	; (8000ad0 <start_up+0x180>)
 8000990:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 8000996:	4b4e      	ldr	r3, [pc, #312]	; (8000ad0 <start_up+0x180>)
 8000998:	f240 128f 	movw	r2, #399	; 0x18f
 800099c:	629a      	str	r2, [r3, #40]	; 0x28

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800099e:	2100      	movs	r1, #0
 80009a0:	484c      	ldr	r0, [pc, #304]	; (8000ad4 <start_up+0x184>)
 80009a2:	f004 fc55 	bl	8005250 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80009a6:	2100      	movs	r1, #0
 80009a8:	484a      	ldr	r0, [pc, #296]	; (8000ad4 <start_up+0x184>)
 80009aa:	f005 fd23 	bl	80063f4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009ae:	2104      	movs	r1, #4
 80009b0:	4848      	ldr	r0, [pc, #288]	; (8000ad4 <start_up+0x184>)
 80009b2:	f004 fc4d 	bl	8005250 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80009b6:	2104      	movs	r1, #4
 80009b8:	4846      	ldr	r0, [pc, #280]	; (8000ad4 <start_up+0x184>)
 80009ba:	f005 fd1b 	bl	80063f4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009be:	2108      	movs	r1, #8
 80009c0:	4844      	ldr	r0, [pc, #272]	; (8000ad4 <start_up+0x184>)
 80009c2:	f004 fc45 	bl	8005250 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80009c6:	2108      	movs	r1, #8
 80009c8:	4842      	ldr	r0, [pc, #264]	; (8000ad4 <start_up+0x184>)
 80009ca:	f005 fd13 	bl	80063f4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80009ce:	210c      	movs	r1, #12
 80009d0:	4840      	ldr	r0, [pc, #256]	; (8000ad4 <start_up+0x184>)
 80009d2:	f004 fc3d 	bl	8005250 <HAL_TIM_PWM_Start>

			TIM1->CCR1=(TIM1->ARR/15);
 80009d6:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <start_up+0x180>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	4a3d      	ldr	r2, [pc, #244]	; (8000ad0 <start_up+0x180>)
 80009dc:	493e      	ldr	r1, [pc, #248]	; (8000ad8 <start_up+0x188>)
 80009de:	fba1 1303 	umull	r1, r3, r1, r3
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=0;
 80009e6:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <start_up+0x180>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 80009ec:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <start_up+0x180>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4=TIM1_CCR4;
 80009f2:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <start_up+0x180>)
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	4a36      	ldr	r2, [pc, #216]	; (8000ad0 <start_up+0x180>)
 80009f8:	3b0a      	subs	r3, #10
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40

			HAL_Delay(500);
 80009fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a00:	f000 fec4 	bl	800178c <HAL_Delay>

			//////// konfiguracja Timer 4 - encoder ///////////////////
			TIM4->ARR= TIM4_ARR;
 8000a04:	4b35      	ldr	r3, [pc, #212]	; (8000adc <start_up+0x18c>)
 8000a06:	f240 1267 	movw	r2, #359	; 0x167
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC= TIM4_PSC;
 8000a0c:	4b33      	ldr	r3, [pc, #204]	; (8000adc <start_up+0x18c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a12:	2100      	movs	r1, #0
 8000a14:	4832      	ldr	r0, [pc, #200]	; (8000ae0 <start_up+0x190>)
 8000a16:	f004 fe29 	bl	800566c <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4830      	ldr	r0, [pc, #192]	; (8000ae0 <start_up+0x190>)
 8000a1e:	f004 fe25 	bl	800566c <HAL_TIM_Encoder_Start>

			HAL_Delay(100);
 8000a22:	2064      	movs	r0, #100	; 0x64
 8000a24:	f000 feb2 	bl	800178c <HAL_Delay>

			TIM1->CCR1=0;
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <start_up+0x180>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <start_up+0x180>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <start_up+0x180>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	63da      	str	r2, [r3, #60]	; 0x3c

			HAL_Delay(200);
 8000a3a:	20c8      	movs	r0, #200	; 0xc8
 8000a3c:	f000 fea6 	bl	800178c <HAL_Delay>



			//////// start ADC 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 8000a40:	4822      	ldr	r0, [pc, #136]	; (8000acc <start_up+0x17c>)
 8000a42:	f003 f85f 	bl	8003b04 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 8000a46:	4820      	ldr	r0, [pc, #128]	; (8000ac8 <start_up+0x178>)
 8000a48:	f003 f85c 	bl	8003b04 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp3);
 8000a4c:	481d      	ldr	r0, [pc, #116]	; (8000ac4 <start_up+0x174>)
 8000a4e:	f003 f859 	bl	8003b04 <HAL_OPAMP_Start>

			//////// start ADC 1 2 ///////////////////////////////////
			HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000a52:	481a      	ldr	r0, [pc, #104]	; (8000abc <start_up+0x16c>)
 8000a54:	f001 fe3e 	bl	80026d4 <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000a58:	4819      	ldr	r0, [pc, #100]	; (8000ac0 <start_up+0x170>)
 8000a5a:	f001 fe3b 	bl	80026d4 <HAL_ADCEx_InjectedStart_IT>
		//	HAL_OPAMP_Start(&hopamp3);



			////////  UASRT 2 /////////////////////////////////////////
			HAL_UART_Receive_IT(&huart2, &recive, 1);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4920      	ldr	r1, [pc, #128]	; (8000ae4 <start_up+0x194>)
 8000a62:	4821      	ldr	r0, [pc, #132]	; (8000ae8 <start_up+0x198>)
 8000a64:	f005 ff3c 	bl	80068e0 <HAL_UART_Receive_IT>


			/////////// inicjalizacja pid_d ////////////////
			set_d=0;
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <start_up+0x19c>)
 8000a6a:	f04f 0200 	mov.w	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
			pid_d.Kp=1;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <start_up+0x1a0>)
 8000a72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a76:	619a      	str	r2, [r3, #24]
			pid_d.Ki=0;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <start_up+0x1a0>)
 8000a7a:	f04f 0200 	mov.w	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
			pid_d.Kd=0;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <start_up+0x1a0>)
 8000a82:	f04f 0200 	mov.w	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_d, 1);
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4819      	ldr	r0, [pc, #100]	; (8000af0 <start_up+0x1a0>)
 8000a8c:	f007 ffac 	bl	80089e8 <arm_pid_init_f32>

			/////////// inicjalizacja pid_q ////////////////
			set_q=1;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <start_up+0x1a4>)
 8000a92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a96:	601a      	str	r2, [r3, #0]
			pid_q.Kp=1;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <start_up+0x1a8>)
 8000a9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a9e:	619a      	str	r2, [r3, #24]
			pid_q.Ki=0;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <start_up+0x1a8>)
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
			pid_q.Kd=0;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <start_up+0x1a8>)
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_q, 1);
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <start_up+0x1a8>)
 8000ab4:	f007 ff98 	bl	80089e8 <arm_pid_init_f32>
		}


	   }

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000098 	.word	0x20000098
 8000ac0:	2000002c 	.word	0x2000002c
 8000ac4:	2000027c 	.word	0x2000027c
 8000ac8:	20000240 	.word	0x20000240
 8000acc:	200002b8 	.word	0x200002b8
 8000ad0:	40012c00 	.word	0x40012c00
 8000ad4:	20000340 	.word	0x20000340
 8000ad8:	88888889 	.word	0x88888889
 8000adc:	40000800 	.word	0x40000800
 8000ae0:	200002f4 	.word	0x200002f4
 8000ae4:	200001e0 	.word	0x200001e0
 8000ae8:	2000038c 	.word	0x2000038c
 8000aec:	20000134 	.word	0x20000134
 8000af0:	20000138 	.word	0x20000138
 8000af4:	20000220 	.word	0x20000220
 8000af8:	200001b4 	.word	0x200001b4

08000afc <HAL_ADCEx_InjectedConvCpltCallback>:

}


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]


	index_event_adc++;
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <HAL_ADCEx_InjectedConvCpltCallback+0x9c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <HAL_ADCEx_InjectedConvCpltCallback+0x9c>)
 8000b0c:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000b0e:	2109      	movs	r1, #9
 8000b10:	4822      	ldr	r0, [pc, #136]	; (8000b9c <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8000b12:	f001 fec5 	bl	80028a0 <HAL_ADCEx_InjectedGetValue>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 8000b1c:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8000b1e:	bf00      	nop
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8000b28:	6812      	ldr	r2, [r2, #0]
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1f5      	bne.n	8000b20 <HAL_ADCEx_InjectedConvCpltCallback+0x24>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8000b34:	f240 110f 	movw	r1, #271	; 0x10f
 8000b38:	4818      	ldr	r0, [pc, #96]	; (8000b9c <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8000b3a:	f001 feb1 	bl	80028a0 <HAL_ADCEx_InjectedGetValue>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_ADCEx_InjectedConvCpltCallback+0xa8>)
 8000b44:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8000b46:	bf00      	nop
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f5      	bne.n	8000b48 <HAL_ADCEx_InjectedConvCpltCallback+0x4c>
	adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8000b5c:	2109      	movs	r1, #9
 8000b5e:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <HAL_ADCEx_InjectedConvCpltCallback+0xac>)
 8000b60:	f001 fe9e 	bl	80028a0 <HAL_ADCEx_InjectedGetValue>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_ADCEx_InjectedConvCpltCallback+0xb0>)
 8000b6a:	601a      	str	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8000b6c:	bf00      	nop
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_ADCEx_InjectedConvCpltCallback+0xac>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <HAL_ADCEx_InjectedConvCpltCallback+0xac>)
 8000b76:	6812      	ldr	r2, [r2, #0]
 8000b78:	f003 0320 	and.w	r3, r3, #32
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1f5      	bne.n	8000b6e <HAL_ADCEx_InjectedConvCpltCallback+0x72>
	    	Ic=0;
	}

**/

	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8000b84:	f001 fda6 	bl	80026d4 <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <HAL_ADCEx_InjectedConvCpltCallback+0xac>)
 8000b8a:	f001 fda3 	bl	80026d4 <HAL_ADCEx_InjectedStart_IT>

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000210 	.word	0x20000210
 8000b9c:	20000098 	.word	0x20000098
 8000ba0:	200001a8 	.word	0x200001a8
 8000ba4:	2000021c 	.word	0x2000021c
 8000ba8:	2000002c 	.word	0x2000002c
 8000bac:	20000130 	.word	0x20000130

08000bb0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bc0:	d14c      	bne.n	8000c5c <HAL_GPIO_EXTI_Callback+0xac>
	{
		if(start==0)
 8000bc2:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11f      	bne.n	8000c0c <HAL_GPIO_EXTI_Callback+0x5c>
		{
			start=1;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4824      	ldr	r0, [pc, #144]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000bd6:	f004 fb3b 	bl	8005250 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4822      	ldr	r0, [pc, #136]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000bde:	f005 fc09 	bl	80063f4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000be2:	2104      	movs	r1, #4
 8000be4:	4820      	ldr	r0, [pc, #128]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000be6:	f004 fb33 	bl	8005250 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000bea:	2104      	movs	r1, #4
 8000bec:	481e      	ldr	r0, [pc, #120]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000bee:	f005 fc01 	bl	80063f4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	481c      	ldr	r0, [pc, #112]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000bf6:	f004 fb2b 	bl	8005250 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	481a      	ldr	r0, [pc, #104]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000bfe:	f005 fbf9 	bl	80063f4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000c02:	210c      	movs	r1, #12
 8000c04:	4818      	ldr	r0, [pc, #96]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c06:	f004 fb23 	bl	8005250 <HAL_TIM_PWM_Start>
			TIM1->CCR1=0;
			TIM1->CCR2=0;
			TIM1->CCR3=0;
		}
	}
}
 8000c0a:	e027      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0xac>
			start=0;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000c12:	2100      	movs	r1, #0
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c16:	f004 fbed 	bl	80053f4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4812      	ldr	r0, [pc, #72]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c1e:	f005 fc69 	bl	80064f4 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000c22:	2104      	movs	r1, #4
 8000c24:	4810      	ldr	r0, [pc, #64]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c26:	f004 fbe5 	bl	80053f4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c2e:	f005 fc61 	bl	80064f4 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000c32:	2108      	movs	r1, #8
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c36:	f004 fbdd 	bl	80053f4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	480a      	ldr	r0, [pc, #40]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c3e:	f005 fc59 	bl	80064f4 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000c42:	210c      	movs	r1, #12
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c46:	f004 fbd5 	bl	80053f4 <HAL_TIM_PWM_Stop>
			TIM1->CCR1=0;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000228 	.word	0x20000228
 8000c68:	20000340 	.word	0x20000340
 8000c6c:	40012c00 	.word	0x40012c00

08000c70 <HAL_UART_RxCpltCallback>:
	}

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
	{
		//HAL_UART_Receive_IT(&huart2, &recive, 1);

	}
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f000 fd0f 	bl	80016aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f815 	bl	8000cba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f7ff fdf2 	bl	8000878 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c94:	f000 fa16 	bl	80010c4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000c98:	f000 faf4 	bl	8001284 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000c9c:	f000 fc44 	bl	8001528 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ca0:	f7ff fc3a 	bl	8000518 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ca4:	f7ff fcce 	bl	8000644 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8000ca8:	f000 f874 	bl	8000d94 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000cac:	f000 f8a0 	bl	8000df0 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000cb0:	f000 f8cc 	bl	8000e4c <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


    start_up();
 8000cb4:	f7ff fe4c 	bl	8000950 <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <main+0x34>

08000cba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b0a4      	sub	sp, #144	; 0x90
 8000cbe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cc4:	2238      	movs	r2, #56	; 0x38
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f007 fee7 	bl	8008a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2244      	movs	r2, #68	; 0x44
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f007 fed9 	bl	8008a9c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f003 fa30 	bl	8004150 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000d06:	2350      	movs	r3, #80	; 0x50
 8000d08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fab8 	bl	8004298 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000d2e:	f000 f82a 	bl	8000d86 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2303      	movs	r3, #3
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d4a:	2107      	movs	r1, #7
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 fdbb 	bl	80048c8 <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d58:	f000 f815 	bl	8000d86 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000d5c:	f248 0302 	movw	r3, #32770	; 0x8002
 8000d60:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 ffc6 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d7a:	f000 f804 	bl	8000d86 <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3790      	adds	r7, #144	; 0x90
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <MX_OPAMP1_Init+0x58>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000da6:	2240      	movs	r2, #64	; 0x40
 8000da8:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000dbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000dc6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_OPAMP1_Init+0x54>)
 8000dd4:	f002 fdc6 	bl	8003964 <HAL_OPAMP_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8000dde:	f7ff ffd2 	bl	8000d86 <Error_Handler>
  }

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200002b8 	.word	0x200002b8
 8000dec:	40010300 	.word	0x40010300

08000df0 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <MX_OPAMP2_Init+0x58>)
 8000df8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000e02:	2240      	movs	r2, #64	; 0x40
 8000e04:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000e22:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_OPAMP2_Init+0x54>)
 8000e30:	f002 fd98 	bl	8003964 <HAL_OPAMP_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8000e3a:	f7ff ffa4 	bl	8000d86 <Error_Handler>
  }

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000240 	.word	0x20000240
 8000e48:	40010304 	.word	0x40010304

08000e4c <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <MX_OPAMP3_Init+0x58>)
 8000e54:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e5e:	2240      	movs	r2, #64	; 0x40
 8000e60:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e7e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_OPAMP3_Init+0x54>)
 8000e8c:	f002 fd6a 	bl	8003964 <HAL_OPAMP_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8000e96:	f7ff ff76 	bl	8000d86 <Error_Handler>
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000027c 	.word	0x2000027c
 8000ea4:	40010308 	.word	0x40010308

08000ea8 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2e      	ldr	r2, [pc, #184]	; (8000f80 <HAL_OPAMP_MspInit+0xd8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d119      	bne.n	8000efe <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <HAL_OPAMP_MspInit+0xdc>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <HAL_OPAMP_MspInit+0xdc>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <HAL_OPAMP_MspInit+0xdc>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ee2:	230e      	movs	r3, #14
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f002 fb9a 	bl	8003630 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8000efc:	e03b      	b.n	8000f76 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <HAL_OPAMP_MspInit+0xe0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d119      	bne.n	8000f3c <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_OPAMP_MspInit+0xdc>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_OPAMP_MspInit+0xdc>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_OPAMP_MspInit+0xdc>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f20:	23e0      	movs	r3, #224	; 0xe0
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f24:	2303      	movs	r3, #3
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f002 fb7b 	bl	8003630 <HAL_GPIO_Init>
}
 8000f3a:	e01c      	b.n	8000f76 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <HAL_OPAMP_MspInit+0xe4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d117      	bne.n	8000f76 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_OPAMP_MspInit+0xdc>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_OPAMP_MspInit+0xdc>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_OPAMP_MspInit+0xdc>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <HAL_OPAMP_MspInit+0xe8>)
 8000f72:	f002 fb5d 	bl	8003630 <HAL_GPIO_Init>
}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40010300 	.word	0x40010300
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010304 	.word	0x40010304
 8000f8c:	40010308 	.word	0x40010308
 8000f90:	48000400 	.word	0x48000400

08000f94 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa2:	6093      	str	r3, [r2, #8]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40007000 	.word	0x40007000

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000fea:	f7ff ffd3 	bl	8000f94 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 fb7e 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <ADC1_2_IRQHandler+0x14>)
 800105e:	f000 fe57 	bl	8001d10 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <ADC1_2_IRQHandler+0x18>)
 8001064:	f000 fe54 	bl	8001d10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000098 	.word	0x20000098
 8001070:	2000002c 	.word	0x2000002c

08001074 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <USART2_IRQHandler+0x10>)
 800107a:	f005 fd09 	bl	8006a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000038c 	.word	0x2000038c

08001088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800108c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001090:	f002 fc50 	bl	8003934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <SystemInit+0x28>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <SystemInit+0x28>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SystemInit+0x28>)
 80010ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b2:	609a      	str	r2, [r3, #8]
#endif
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b09c      	sub	sp, #112	; 0x70
 80010c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2234      	movs	r2, #52	; 0x34
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f007 fccc 	bl	8008a9c <memset>

  htim1.Instance = TIM1;
 8001104:	4b5d      	ldr	r3, [pc, #372]	; (800127c <MX_TIM1_Init+0x1b8>)
 8001106:	4a5e      	ldr	r2, [pc, #376]	; (8001280 <MX_TIM1_Init+0x1bc>)
 8001108:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800110a:	4b5c      	ldr	r3, [pc, #368]	; (800127c <MX_TIM1_Init+0x1b8>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001110:	4b5a      	ldr	r3, [pc, #360]	; (800127c <MX_TIM1_Init+0x1b8>)
 8001112:	2220      	movs	r2, #32
 8001114:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001116:	4b59      	ldr	r3, [pc, #356]	; (800127c <MX_TIM1_Init+0x1b8>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b57      	ldr	r3, [pc, #348]	; (800127c <MX_TIM1_Init+0x1b8>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001122:	4b56      	ldr	r3, [pc, #344]	; (800127c <MX_TIM1_Init+0x1b8>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b54      	ldr	r3, [pc, #336]	; (800127c <MX_TIM1_Init+0x1b8>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800112e:	4853      	ldr	r0, [pc, #332]	; (800127c <MX_TIM1_Init+0x1b8>)
 8001130:	f003 ffd6 	bl	80050e0 <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800113a:	f7ff fe24 	bl	8000d86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001144:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001148:	4619      	mov	r1, r3
 800114a:	484c      	ldr	r0, [pc, #304]	; (800127c <MX_TIM1_Init+0x1b8>)
 800114c:	f004 fc2c 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001156:	f7ff fe16 	bl	8000d86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800115a:	4848      	ldr	r0, [pc, #288]	; (800127c <MX_TIM1_Init+0x1b8>)
 800115c:	f004 f817 	bl	800518e <HAL_TIM_PWM_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001166:	f7ff fe0e 	bl	8000d86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800116a:	2370      	movs	r3, #112	; 0x70
 800116c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001176:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800117a:	4619      	mov	r1, r3
 800117c:	483f      	ldr	r0, [pc, #252]	; (800127c <MX_TIM1_Init+0x1b8>)
 800117e:	f005 fa17 	bl	80065b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001188:	f7ff fdfd 	bl	8000d86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118c:	2360      	movs	r3, #96	; 0x60
 800118e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001198:	2300      	movs	r3, #0
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	4832      	ldr	r0, [pc, #200]	; (800127c <MX_TIM1_Init+0x1b8>)
 80011b2:	f004 fae9 	bl	8005788 <HAL_TIM_PWM_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80011bc:	f7ff fde3 	bl	8000d86 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011c8:	2204      	movs	r2, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	482b      	ldr	r0, [pc, #172]	; (800127c <MX_TIM1_Init+0x1b8>)
 80011ce:	f004 fadb 	bl	8005788 <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80011d8:	f7ff fdd5 	bl	8000d86 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011e4:	2208      	movs	r2, #8
 80011e6:	4619      	mov	r1, r3
 80011e8:	4824      	ldr	r0, [pc, #144]	; (800127c <MX_TIM1_Init+0x1b8>)
 80011ea:	f004 facd 	bl	8005788 <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80011f4:	f7ff fdc7 	bl	8000d86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011f8:	2370      	movs	r3, #112	; 0x70
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001200:	2300      	movs	r3, #0
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001208:	220c      	movs	r2, #12
 800120a:	4619      	mov	r1, r3
 800120c:	481b      	ldr	r0, [pc, #108]	; (800127c <MX_TIM1_Init+0x1b8>)
 800120e:	f004 fabb 	bl	8005788 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001218:	f7ff fdb5 	bl	8000d86 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800121c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001220:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001226:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 800122c:	2344      	movs	r3, #68	; 0x44
 800122e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 800124c:	2303      	movs	r3, #3
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_TIM1_Init+0x1b8>)
 800125e:	f005 fa29 	bl	80066b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8001268:	f7ff fd8d 	bl	8000d86 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM1_Init+0x1b8>)
 800126e:	f000 f8d3 	bl	8001418 <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3770      	adds	r7, #112	; 0x70
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000340 	.word	0x20000340
 8001280:	40012c00 	.word	0x40012c00

08001284 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2224      	movs	r2, #36	; 0x24
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f007 fc02 	bl	8008a9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012a4:	4a20      	ldr	r2, [pc, #128]	; (8001328 <MX_TIM4_Init+0xa4>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_TIM4_Init+0xa8>)
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ce:	2301      	movs	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012de:	2301      	movs	r3, #1
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_TIM4_Init+0xa0>)
 80012f2:	f004 f915 	bl	8005520 <HAL_TIM_Encoder_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80012fc:	f7ff fd43 	bl	8000d86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_TIM4_Init+0xa0>)
 800130e:	f005 f94f 	bl	80065b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001318:	f7ff fd35 	bl	8000d86 <Error_Handler>
  }

}
 800131c:	bf00      	nop
 800131e:	3730      	adds	r7, #48	; 0x30
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200002f4 	.word	0x200002f4
 8001328:	40000800 	.word	0x40000800
 800132c:	00010006 	.word	0x00010006

08001330 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_TIM_Base_MspInit+0x38>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10b      	bne.n	800135a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 8001348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800134c:	6613      	str	r3, [r2, #96]	; 0x60
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_TIM_Base_MspInit+0x3c>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40012c00 	.word	0x40012c00
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1f      	ldr	r2, [pc, #124]	; (800140c <HAL_TIM_Encoder_MspInit+0x9c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d138      	bne.n	8001404 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <HAL_TIM_Encoder_MspInit+0xa0>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_TIM_Encoder_MspInit+0xa0>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <HAL_TIM_Encoder_MspInit+0xa0>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_TIM_Encoder_MspInit+0xa0>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 80013c2:	23c0      	movs	r3, #192	; 0xc0
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013d2:	2302      	movs	r3, #2
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <HAL_TIM_Encoder_MspInit+0xa4>)
 80013de:	f002 f927 	bl	8003630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 80013e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013f4:	2302      	movs	r3, #2
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001400:	f002 f916 	bl	8003630 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40000800 	.word	0x40000800
 8001410:	40021000 	.word	0x40021000
 8001414:	48000400 	.word	0x48000400

08001418 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a38      	ldr	r2, [pc, #224]	; (8001518 <HAL_TIM_MspPostInit+0x100>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d169      	bne.n	800150e <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <HAL_TIM_MspPostInit+0x104>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a37      	ldr	r2, [pc, #220]	; (800151c <HAL_TIM_MspPostInit+0x104>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <HAL_TIM_MspPostInit+0x104>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <HAL_TIM_MspPostInit+0x104>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <HAL_TIM_MspPostInit+0x104>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_TIM_MspPostInit+0x104>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <HAL_TIM_MspPostInit+0x104>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a2b      	ldr	r2, [pc, #172]	; (800151c <HAL_TIM_MspPostInit+0x104>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_TIM_MspPostInit+0x104>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800148c:	2302      	movs	r3, #2
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4820      	ldr	r0, [pc, #128]	; (8001520 <HAL_TIM_MspPostInit+0x108>)
 80014a0:	f002 f8c6 	bl	8003630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b2:	2302      	movs	r3, #2
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80014b6:	2304      	movs	r3, #4
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4818      	ldr	r0, [pc, #96]	; (8001524 <HAL_TIM_MspPostInit+0x10c>)
 80014c2:	f002 f8b5 	bl	8003630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80014c6:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d4:	2302      	movs	r3, #2
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014d8:	2306      	movs	r3, #6
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f002 f8a3 	bl	8003630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80014fc:	230b      	movs	r3, #11
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f002 f891 	bl	8003630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40012c00 	.word	0x40012c00
 800151c:	40021000 	.word	0x40021000
 8001520:	48000800 	.word	0x48000800
 8001524:	48000400 	.word	0x48000400

08001528 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800152e:	4a23      	ldr	r2, [pc, #140]	; (80015bc <MX_USART2_UART_Init+0x94>)
 8001530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001570:	4811      	ldr	r0, [pc, #68]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001572:	f005 f964 	bl	800683e <HAL_UART_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800157c:	f7ff fc03 	bl	8000d86 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001584:	f007 f94b 	bl	800881e <HAL_UARTEx_SetTxFifoThreshold>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800158e:	f7ff fbfa 	bl	8000d86 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001592:	2100      	movs	r1, #0
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001596:	f007 f980 	bl	800889a <HAL_UARTEx_SetRxFifoThreshold>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015a0:	f7ff fbf1 	bl	8000d86 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 80015a6:	f007 f901 	bl	80087ac <HAL_UARTEx_DisableFifoMode>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015b0:	f7ff fbe9 	bl	8000d86 <Error_Handler>
  }

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000038c 	.word	0x2000038c
 80015bc:	40004400 	.word	0x40004400

080015c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_UART_MspInit+0x8c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12f      	bne.n	8001642 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_UART_MspInit+0x90>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <HAL_UART_MspInit+0x90>)
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	6593      	str	r3, [r2, #88]	; 0x58
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_UART_MspInit+0x90>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_UART_MspInit+0x90>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_UART_MspInit+0x90>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_UART_MspInit+0x90>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001612:	2318      	movs	r3, #24
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001622:	2307      	movs	r3, #7
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_UART_MspInit+0x94>)
 800162e:	f001 ffff 	bl	8003630 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2108      	movs	r1, #8
 8001636:	2026      	movs	r0, #38	; 0x26
 8001638:	f001 ff5f 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800163c:	2026      	movs	r0, #38	; 0x26
 800163e:	f001 ff76 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40004400 	.word	0x40004400
 8001650:	40021000 	.word	0x40021000
 8001654:	48000400 	.word	0x48000400

08001658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800165a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopForever+0x6>)
  ldr r1, =_edata
 800165e:	490e      	ldr	r1, [pc, #56]	; (8001698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <LoopForever+0xe>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001674:	4c0b      	ldr	r4, [pc, #44]	; (80016a4 <LoopForever+0x16>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001682:	f7ff fd09 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f007 f9e5 	bl	8008a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800168a:	f7ff fafb 	bl	8000c84 <main>

0800168e <LoopForever>:

LoopForever:
    b LoopForever
 800168e:	e7fe      	b.n	800168e <LoopForever>
  ldr   r0, =_estack
 8001690:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800169c:	08008afc 	.word	0x08008afc
  ldr r2, =_sbss
 80016a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016a4:	2000041c 	.word	0x2000041c

080016a8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <COMP1_2_3_IRQHandler>

080016aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f001 ff15 	bl	80034e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ba:	2000      	movs	r0, #0
 80016bc:	f000 f80e 	bl	80016dc <HAL_InitTick>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	e001      	b.n	80016d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016cc:	f7ff fc72 	bl	8000fb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016d0:	79fb      	ldrb	r3, [r7, #7]

}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_InitTick+0x68>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d022      	beq.n	8001736 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_InitTick+0x6c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_InitTick+0x68>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f001 ff20 	bl	800354a <HAL_SYSTICK_Config>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10f      	bne.n	8001730 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	d809      	bhi.n	800172a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001716:	2200      	movs	r2, #0
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	f04f 30ff 	mov.w	r0, #4294967295
 800171e:	f001 feec 	bl	80034fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_InitTick+0x70>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e007      	b.n	800173a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e004      	b.n	800173a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	e001      	b.n	800173a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000008 	.word	0x20000008
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_IncTick+0x1c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_IncTick+0x20>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4413      	add	r3, r2
 800175e:	4a03      	ldr	r2, [pc, #12]	; (800176c <HAL_IncTick+0x1c>)
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000418 	.word	0x20000418
 8001770:	20000008 	.word	0x20000008

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000418 	.word	0x20000418

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d004      	beq.n	80017b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_Delay+0x40>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4413      	add	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b0:	bf00      	nop
 80017b2:	f7ff ffdf 	bl	8001774 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d8f7      	bhi.n	80017b2 <HAL_Delay+0x26>
  {
  }
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008

080017d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	609a      	str	r2, [r3, #8]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800188a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6093      	str	r3, [r2, #8]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018b2:	d101      	bne.n	80018b8 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001902:	d101      	bne.n	8001908 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001926:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800194e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001952:	f043 0202 	orr.w	r2, r3, #2
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <LL_ADC_IsEnabled+0x18>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <LL_ADC_IsEnabled+0x1a>
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b02      	cmp	r3, #2
 800199e:	d101      	bne.n	80019a4 <LL_ADC_IsDisableOngoing+0x18>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_ADC_IsDisableOngoing+0x1a>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d101      	bne.n	80019ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d101      	bne.n	80019f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e16b      	b.n	8001cf2 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7fe fe7d 	bl	8000728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff2c 	bl	800189e <LL_ADC_IsDeepPowerDownEnabled>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff12 	bl	800187a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff47 	bl	80018ee <LL_ADC_IsInternalRegulatorEnabled>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d113      	bne.n	8001a8e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff2b 	bl	80018c6 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a70:	4ba2      	ldr	r3, [pc, #648]	; (8001cfc <HAL_ADC_Init+0x2fc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	099b      	lsrs	r3, r3, #6
 8001a76:	4aa2      	ldr	r2, [pc, #648]	; (8001d00 <HAL_ADC_Init+0x300>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f9      	bne.n	8001a82 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff2b 	bl	80018ee <LL_ADC_IsInternalRegulatorEnabled>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10d      	bne.n	8001aba <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	f043 0210 	orr.w	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff77 	bl	80019b2 <LL_ADC_REG_IsConversionOngoing>
 8001ac4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 8106 	bne.w	8001ce0 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 8102 	bne.w	8001ce0 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ae4:	f043 0202 	orr.w	r2, r3, #2
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff38 	bl	8001966 <LL_ADC_IsEnabled>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001afc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001b00:	f7ff ff31 	bl	8001966 <LL_ADC_IsEnabled>
 8001b04:	4604      	mov	r4, r0
 8001b06:	487f      	ldr	r0, [pc, #508]	; (8001d04 <HAL_ADC_Init+0x304>)
 8001b08:	f7ff ff2d 	bl	8001966 <LL_ADC_IsEnabled>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	487b      	ldr	r0, [pc, #492]	; (8001d08 <HAL_ADC_Init+0x308>)
 8001b1c:	f7ff fe58 	bl	80017d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7f5b      	ldrb	r3, [r3, #29]
 8001b24:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b2a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b30:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b36:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b3e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d106      	bne.n	8001b5c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	3b01      	subs	r3, #1
 8001b54:	045b      	lsls	r3, r3, #17
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d009      	beq.n	8001b78 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_ADC_Init+0x30c>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	69b9      	ldr	r1, [r7, #24]
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff03 	bl	80019b2 <LL_ADC_REG_IsConversionOngoing>
 8001bac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff10 	bl	80019d8 <LL_ADC_INJ_IsConversionOngoing>
 8001bb8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d16d      	bne.n	8001c9c <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d16a      	bne.n	8001c9c <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001be2:	f023 0302 	bic.w	r3, r3, #2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d017      	beq.n	8001c28 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6911      	ldr	r1, [r2, #16]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001c26:	e013      	b.n	8001c50 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d118      	bne.n	8001c8c <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c70:	4311      	orrs	r1, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	611a      	str	r2, [r3, #16]
 8001c8a:	e007      	b.n	8001c9c <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10c      	bne.n	8001cbe <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f023 010f 	bic.w	r1, r3, #15
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
 8001cbc:	e007      	b.n	8001cce <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 020f 	bic.w	r2, r2, #15
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	f023 0303 	bic.w	r3, r3, #3
 8001cd6:	f043 0201 	orr.w	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cde:	e007      	b.n	8001cf0 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	f043 0210 	orr.w	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd90      	pop	{r4, r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	053e2d63 	.word	0x053e2d63
 8001d04:	50000100 	.word	0x50000100
 8001d08:	50000300 	.word	0x50000300
 8001d0c:	fff04007 	.word	0xfff04007

08001d10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d2c:	4883      	ldr	r0, [pc, #524]	; (8001f3c <HAL_ADC_IRQHandler+0x22c>)
 8001d2e:	f7ff fd88 	bl	8001842 <LL_ADC_GetMultimode>
 8001d32:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d017      	beq.n	8001d6e <HAL_ADC_IRQHandler+0x5e>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fded 	bl	8002940 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <HAL_ADC_IRQHandler+0x72>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10a      	bne.n	8001d98 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8085 	beq.w	8001e98 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d07f      	beq.n	8001e98 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fd1e 	bl	80017f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d064      	beq.n	8001e8a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a5e      	ldr	r2, [pc, #376]	; (8001f40 <HAL_ADC_IRQHandler+0x230>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d002      	beq.n	8001dd0 <HAL_ADC_IRQHandler+0xc0>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	e001      	b.n	8001dd4 <HAL_ADC_IRQHandler+0xc4>
 8001dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d008      	beq.n	8001dee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d002      	beq.n	8001dee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	d104      	bne.n	8001df8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	623b      	str	r3, [r7, #32]
 8001df6:	e00d      	b.n	8001e14 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <HAL_ADC_IRQHandler+0x230>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d002      	beq.n	8001e08 <HAL_ADC_IRQHandler+0xf8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e001      	b.n	8001e0c <HAL_ADC_IRQHandler+0xfc>
 8001e08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d135      	bne.n	8001e8a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d12e      	bne.n	8001e8a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fdbe 	bl	80019b2 <LL_ADC_REG_IsConversionOngoing>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d11a      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 020c 	bic.w	r2, r2, #12
 8001e4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d112      	bne.n	8001e8a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e70:	e00b      	b.n	8001e8a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f95a 	bl	8002144 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	220c      	movs	r2, #12
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d004      	beq.n	8001eac <HAL_ADC_IRQHandler+0x19c>
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 809e 	beq.w	8001ff4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8098 	beq.w	8001ff4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fc9b 	bl	800181c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ee6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fc82 	bl	80017f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ef2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <HAL_ADC_IRQHandler+0x230>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d002      	beq.n	8001f04 <HAL_ADC_IRQHandler+0x1f4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	e001      	b.n	8001f08 <HAL_ADC_IRQHandler+0x1f8>
 8001f04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d008      	beq.n	8001f22 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d002      	beq.n	8001f22 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2b07      	cmp	r3, #7
 8001f20:	d104      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	623b      	str	r3, [r7, #32]
 8001f2a:	e011      	b.n	8001f50 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <HAL_ADC_IRQHandler+0x230>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d006      	beq.n	8001f44 <HAL_ADC_IRQHandler+0x234>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	e005      	b.n	8001f48 <HAL_ADC_IRQHandler+0x238>
 8001f3c:	50000300 	.word	0x50000300
 8001f40:	50000100 	.word	0x50000100
 8001f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f48:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10c      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d142      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d03f      	beq.n	8001fe6 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d13a      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	2b40      	cmp	r3, #64	; 0x40
 8001f7c:	d133      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d12e      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fd23 	bl	80019d8 <LL_ADC_INJ_IsConversionOngoing>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d11a      	bne.n	8001fce <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fa6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d112      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fcc:	e00b      	b.n	8001fe6 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fd88 	bl	8000afc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2260      	movs	r2, #96	; 0x60
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d011      	beq.n	8002022 <HAL_ADC_IRQHandler+0x312>
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00c      	beq.n	8002022 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f89f 	bl	8002158 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_ADC_IRQHandler+0x342>
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00d      	beq.n	8002052 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fc68 	bl	8002918 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002058:	2b00      	cmp	r3, #0
 800205a:	d012      	beq.n	8002082 <HAL_ADC_IRQHandler+0x372>
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00d      	beq.n	8002082 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fc5a 	bl	800292c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d036      	beq.n	80020fa <HAL_ADC_IRQHandler+0x3ea>
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d031      	beq.n	80020fa <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800209e:	2301      	movs	r3, #1
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	e014      	b.n	80020ce <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020aa:	4825      	ldr	r0, [pc, #148]	; (8002140 <HAL_ADC_IRQHandler+0x430>)
 80020ac:	f7ff fbd7 	bl	800185e <LL_ADC_GetMultiDMATransfer>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80020b6:	2301      	movs	r3, #1
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	e008      	b.n	80020ce <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80020ca:	2301      	movs	r3, #1
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10e      	bne.n	80020f2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e4:	f043 0202 	orr.w	r2, r3, #2
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f83d 	bl	800216c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2210      	movs	r2, #16
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d018      	beq.n	8002136 <HAL_ADC_IRQHandler+0x426>
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	2b00      	cmp	r3, #0
 800210c:	d013      	beq.n	8002136 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	f043 0208 	orr.w	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800212e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fbe7 	bl	8002904 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	50000300 	.word	0x50000300

08002144 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fbea 	bl	8001966 <LL_ADC_IsEnabled>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d146      	bne.n	8002226 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <ADC_Enable+0xb0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e032      	b.n	8002228 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fba5 	bl	8001916 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021cc:	f7ff fad2 	bl	8001774 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d2:	e021      	b.n	8002218 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fbc4 	bl	8001966 <LL_ADC_IsEnabled>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d104      	bne.n	80021ee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fb94 	bl	8001916 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ee:	f7ff fac1 	bl	8001774 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d90d      	bls.n	8002218 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f043 0210 	orr.w	r2, r3, #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e007      	b.n	8002228 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	d1d6      	bne.n	80021d4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	8000003f 	.word	0x8000003f

08002234 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fba3 	bl	800198c <LL_ADC_IsDisableOngoing>
 8002246:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fb8a 	bl	8001966 <LL_ADC_IsEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d040      	beq.n	80022da <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d13d      	bne.n	80022da <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 030d 	and.w	r3, r3, #13
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10c      	bne.n	8002286 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fb64 	bl	800193e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2203      	movs	r2, #3
 800227c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800227e:	f7ff fa79 	bl	8001774 <HAL_GetTick>
 8002282:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002284:	e022      	b.n	80022cc <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	f043 0210 	orr.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e01c      	b.n	80022dc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022a2:	f7ff fa67 	bl	8001774 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d90d      	bls.n	80022cc <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e007      	b.n	80022dc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e3      	bne.n	80022a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <LL_ADC_SetCommonPathInternalCh>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	609a      	str	r2, [r3, #8]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_ADC_GetCommonPathInternalCh>:
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <LL_ADC_SetOffset>:
{
 8002328:	b490      	push	{r4, r7}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3360      	adds	r3, #96	; 0x60
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002344:	6822      	ldr	r2, [r4, #0]
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <LL_ADC_SetOffset+0x40>)
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	4313      	orrs	r3, r2
 8002356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800235a:	6023      	str	r3, [r4, #0]
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bc90      	pop	{r4, r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	03fff000 	.word	0x03fff000

0800236c <LL_ADC_GetOffsetChannel>:
{
 800236c:	b490      	push	{r4, r7}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3360      	adds	r3, #96	; 0x60
 800237a:	461a      	mov	r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bc90      	pop	{r4, r7}
 8002392:	4770      	bx	lr

08002394 <LL_ADC_SetOffsetState>:
{
 8002394:	b490      	push	{r4, r7}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3360      	adds	r3, #96	; 0x60
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	6023      	str	r3, [r4, #0]
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc90      	pop	{r4, r7}
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_SetOffsetSign>:
{
 80023c4:	b490      	push	{r4, r7}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3360      	adds	r3, #96	; 0x60
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	6023      	str	r3, [r4, #0]
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc90      	pop	{r4, r7}
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_SetOffsetSaturation>:
{
 80023f4:	b490      	push	{r4, r7}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3360      	adds	r3, #96	; 0x60
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4313      	orrs	r3, r2
 8002418:	6023      	str	r3, [r4, #0]
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bc90      	pop	{r4, r7}
 8002422:	4770      	bx	lr

08002424 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	615a      	str	r2, [r3, #20]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_ADC_INJ_GetTrigAuto>:
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_SetChannelSamplingTime>:
{
 8002466:	b490      	push	{r4, r7}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3314      	adds	r3, #20
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	0e5b      	lsrs	r3, r3, #25
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	4413      	add	r3, r2
 8002484:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	0d1b      	lsrs	r3, r3, #20
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2107      	movs	r1, #7
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	401a      	ands	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	0d1b      	lsrs	r3, r3, #20
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	4313      	orrs	r3, r2
 80024aa:	6023      	str	r3, [r4, #0]
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc90      	pop	{r4, r7}
 80024b4:	4770      	bx	lr
	...

080024b8 <LL_ADC_SetChannelSingleDiff>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0318 	and.w	r3, r3, #24
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80024dc:	40d9      	lsrs	r1, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	400b      	ands	r3, r1
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	431a      	orrs	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	0007ffff 	.word	0x0007ffff

08002500 <LL_ADC_GetMultimode>:
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 031f 	and.w	r3, r3, #31
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_IsEnabled>:
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <LL_ADC_IsEnabled+0x18>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <LL_ADC_IsEnabled+0x1a>
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_ADC_StartCalibration>:
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800255e:	4313      	orrs	r3, r2
 8002560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_IsCalibrationOnGoing>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002588:	d101      	bne.n	800258e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_REG_IsConversionOngoing>:
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d101      	bne.n	80025b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_INJ_StartConversion>:
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025d6:	f043 0208 	orr.w	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	609a      	str	r2, [r3, #8]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_ADC_INJ_IsConversionOngoing>:
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d101      	bne.n	8002602 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_ADCEx_Calibration_Start+0x1c>
 8002628:	2302      	movs	r3, #2
 800262a:	e04d      	b.n	80026c8 <HAL_ADCEx_Calibration_Start+0xb8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff fdfd 	bl	8002234 <ADC_Disable>
 800263a:	4603      	mov	r3, r0
 800263c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d136      	bne.n	80026b2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	f043 0202 	orr.w	r2, r3, #2
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff6f 	bl	8002542 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002664:	e014      	b.n	8002690 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3301      	adds	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d90d      	bls.n	8002690 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	f023 0312 	bic.w	r3, r3, #18
 800267c:	f043 0210 	orr.w	r2, r3, #16
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e01b      	b.n	80026c8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff6d 	bl	8002574 <LL_ADC_IsCalibrationOnGoing>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e2      	bne.n	8002666 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	f023 0303 	bic.w	r3, r3, #3
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80026b0:	e005      	b.n	80026be <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	0004de01 	.word	0x0004de01

080026d4 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026dc:	486e      	ldr	r0, [pc, #440]	; (8002898 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80026de:	f7ff ff0f 	bl	8002500 <LL_ADC_GetMultimode>
 80026e2:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff7e 	bl	80025ea <LL_ADC_INJ_IsConversionOngoing>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0ca      	b.n	800288e <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002702:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	f043 0220 	orr.w	r2, r3, #32
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0b2      	b.n	800288e <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_ADCEx_InjectedStart_IT+0x62>
 8002732:	2302      	movs	r3, #2
 8002734:	e0ab      	b.n	800288e <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fd1e 	bl	8002180 <ADC_Enable>
 8002744:	4603      	mov	r3, r0
 8002746:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 809a 	bne.w	8002884 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002760:	f023 0208 	bic.w	r2, r3, #8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	661a      	str	r2, [r3, #96]	; 0x60
 8002768:	e002      	b.n	8002770 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a44      	ldr	r2, [pc, #272]	; (800289c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d002      	beq.n	8002794 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	e001      	b.n	8002798 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8002794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	4293      	cmp	r3, r2
 800279e:	d002      	beq.n	80027a6 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2260      	movs	r2, #96	; 0x60
 80027b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027de:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d110      	bne.n	800280a <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0220 	bic.w	r2, r2, #32
 80027f6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002806:	605a      	str	r2, [r3, #4]
          break;
 8002808:	e010      	b.n	800282c <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002818:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0220 	orr.w	r2, r2, #32
 8002828:	605a      	str	r2, [r3, #4]
          break;
 800282a:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1a      	ldr	r2, [pc, #104]	; (800289c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d002      	beq.n	800283c <HAL_ADCEx_InjectedStart_IT+0x168>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e001      	b.n	8002840 <HAL_ADCEx_InjectedStart_IT+0x16c>
 800283c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	4293      	cmp	r3, r2
 8002846:	d008      	beq.n	800285a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b06      	cmp	r3, #6
 8002852:	d002      	beq.n	800285a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b07      	cmp	r3, #7
 8002858:	d10d      	bne.n	8002876 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fdf3 	bl	800244a <LL_ADC_INJ_GetTrigAuto>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d110      	bne.n	800288c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fea7 	bl	80025c2 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002874:	e00a      	b.n	800288c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	65da      	str	r2, [r3, #92]	; 0x5c
 8002882:	e003      	b.n	800288c <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	50000300 	.word	0x50000300
 800289c:	50000100 	.word	0x50000100

080028a0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f240 2215 	movw	r2, #533	; 0x215
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00e      	beq.n	80028d2 <HAL_ADCEx_InjectedGetValue+0x32>
 80028b4:	f240 321b 	movw	r2, #795	; 0x31b
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_ADCEx_InjectedGetValue+0x26>
 80028bc:	f240 120f 	movw	r2, #271	; 0x10f
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00c      	beq.n	80028de <HAL_ADCEx_InjectedGetValue+0x3e>
 80028c4:	e011      	b.n	80028ea <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ce:	60fb      	str	r3, [r7, #12]
      break;
 80028d0:	e011      	b.n	80028f6 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	60fb      	str	r3, [r7, #12]
      break;
 80028dc:	e00b      	b.n	80028f6 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e6:	60fb      	str	r3, [r7, #12]
      break;
 80028e8:	e005      	b.n	80028f6 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f2:	60fb      	str	r3, [r7, #12]
      break;
 80028f4:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b0a8      	sub	sp, #160	; 0xa0
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002974:	2b01      	cmp	r3, #1
 8002976:	d102      	bne.n	800297e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002978:	2302      	movs	r3, #2
 800297a:	f000 bc39 	b.w	80031f0 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002992:	2b01      	cmp	r3, #1
 8002994:	d130      	bne.n	80029f8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b09      	cmp	r3, #9
 800299c:	d179      	bne.n	8002a92 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d010      	beq.n	80029c8 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	025b      	lsls	r3, r3, #9
 80029ae:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80029ba:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029c6:	e007      	b.n	80029d8 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	025b      	lsls	r3, r3, #9
 80029d0:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80029d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029de:	4ba3      	ldr	r3, [pc, #652]	; (8002c6c <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80029ea:	430b      	orrs	r3, r1
 80029ec:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80029f4:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80029f6:	e04c      	b.n	8002a92 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11d      	bne.n	8002a3c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002a24:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a30:	e004      	b.n	8002a3c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a60:	1e5a      	subs	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a82:	4b7a      	ldr	r3, [pc, #488]	; (8002c6c <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fda7 	bl	80025ea <LL_ADC_INJ_IsConversionOngoing>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d124      	bne.n	8002aec <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d112      	bne.n	8002ad2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002abc:	055a      	lsls	r2, r3, #21
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ac4:	051b      	lsls	r3, r3, #20
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	e00c      	b.n	8002aec <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ae2:	055a      	lsls	r2, r3, #21
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fd53 	bl	800259c <LL_ADC_REG_IsConversionOngoing>
 8002af6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fd73 	bl	80025ea <LL_ADC_INJ_IsConversionOngoing>
 8002b04:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f040 81d4 	bne.w	8002eba <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 81cf 	bne.w	8002eba <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d116      	bne.n	8002b5a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d108      	bne.n	8002b48 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b44:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b46:	e01f      	b.n	8002b88 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b56:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b58:	e016      	b.n	8002b88 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d109      	bne.n	8002b78 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002b76:	e007      	b.n	8002b88 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b86:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d110      	bne.n	8002bb4 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0202 	orr.w	r2, r2, #2
 8002bb0:	611a      	str	r2, [r3, #16]
 8002bb2:	e007      	b.n	8002bc4 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0202 	bic.w	r2, r2, #2
 8002bc2:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bcc:	d10f      	bne.n	8002bee <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7ff fc44 	bl	8002466 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fc1c 	bl	8002424 <LL_ADC_SetSamplingTimeCommonConfig>
 8002bec:	e00e      	b.n	8002c0c <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f7ff fc33 	bl	8002466 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fc0c 	bl	8002424 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	08db      	lsrs	r3, r3, #3
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d025      	beq.n	8002c7a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6919      	ldr	r1, [r3, #16]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c3e:	f7ff fb73 	bl	8002328 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6919      	ldr	r1, [r3, #16]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f7ff fbb8 	bl	80023c4 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c68:	e003      	b.n	8002c72 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8002c6a:	bf00      	nop
 8002c6c:	04104000 	.word	0x04104000
 8002c70:	2300      	movs	r3, #0
 8002c72:	461a      	mov	r2, r3
 8002c74:	f7ff fbbe 	bl	80023f4 <LL_ADC_SetOffsetSaturation>
 8002c78:	e11f      	b.n	8002eba <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fb73 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fb68 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	e014      	b.n	8002cd0 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fb5d 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	0e9b      	lsrs	r3, r3, #26
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	e00a      	b.n	8002cfe <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d106      	bne.n	8002d10 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fb42 	bl	8002394 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fb28 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fb1d 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	f003 021f 	and.w	r2, r3, #31
 8002d3a:	e010      	b.n	8002d5e <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fb12 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_ADCEx_InjectedConfigChannel+0x422>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	e00a      	b.n	8002d8c <HAL_ADCEx_InjectedConfigChannel+0x438>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8002d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d106      	bne.n	8002d9e <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fafb 	bl	8002394 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2102      	movs	r1, #2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fae1 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <HAL_ADCEx_InjectedConfigChannel+0x476>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2102      	movs	r1, #2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fad6 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	0e9b      	lsrs	r3, r3, #26
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	e010      	b.n	8002dec <HAL_ADCEx_InjectedConfigChannel+0x498>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2102      	movs	r1, #2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff facb 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	e00a      	b.n	8002e1a <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d106      	bne.n	8002e2c <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2200      	movs	r2, #0
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fab4 	bl	8002394 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2103      	movs	r1, #3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fa9a 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <HAL_ADCEx_InjectedConfigChannel+0x504>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2103      	movs	r1, #3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fa8f 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	f003 021f 	and.w	r2, r3, #31
 8002e56:	e010      	b.n	8002e7a <HAL_ADCEx_InjectedConfigChannel+0x526>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fa84 	bl	800236c <LL_ADC_GetOffsetChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8002e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	e00a      	b.n	8002ea8 <HAL_ADCEx_InjectedConfigChannel+0x554>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2103      	movs	r1, #3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fa6d 	bl	8002394 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fb2c 	bl	800251c <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 810c 	bne.w	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f7ff faed 	bl	80024b8 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4aab      	ldr	r2, [pc, #684]	; (8003190 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	f040 80fd 	bne.w	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0e9b      	lsrs	r3, r3, #26
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2b09      	cmp	r3, #9
 8002f08:	bf94      	ite	ls
 8002f0a:	2301      	movls	r3, #1
 8002f0c:	2300      	movhi	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	e012      	b.n	8002f38 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2b09      	cmp	r3, #9
 8002f30:	bf94      	ite	ls
 8002f32:	2301      	movls	r3, #1
 8002f34:	2300      	movhi	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d064      	beq.n	8003006 <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	069b      	lsls	r3, r3, #26
 8002f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f56:	e00e      	b.n	8002f76 <HAL_ADCEx_InjectedConfigChannel+0x622>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	069b      	lsls	r3, r3, #26
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_ADCEx_InjectedConfigChannel+0x642>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	e010      	b.n	8002fb8 <HAL_ADCEx_InjectedConfigChannel+0x664>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	ea42 0103 	orr.w	r1, r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_ADCEx_InjectedConfigChannel+0x68a>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	051b      	lsls	r3, r3, #20
 8002fdc:	e011      	b.n	8003002 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f003 021f 	and.w	r2, r3, #31
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	430b      	orrs	r3, r1
 8003004:	e069      	b.n	80030da <HAL_ADCEx_InjectedConfigChannel+0x786>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	3301      	adds	r3, #1
 800301a:	069b      	lsls	r3, r3, #26
 800301c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003020:	e00e      	b.n	8003040 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	623b      	str	r3, [r7, #32]
  return result;
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	069b      	lsls	r3, r3, #26
 800303c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	e010      	b.n	8003082 <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	61bb      	str	r3, [r7, #24]
  return result;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	ea42 0103 	orr.w	r1, r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10d      	bne.n	80030ae <HAL_ADCEx_InjectedConfigChannel+0x75a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0e9b      	lsrs	r3, r3, #26
 8003098:	3301      	adds	r3, #1
 800309a:	f003 021f 	and.w	r2, r3, #31
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	3b1e      	subs	r3, #30
 80030a6:	051b      	lsls	r3, r3, #20
 80030a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ac:	e014      	b.n	80030d8 <HAL_ADCEx_InjectedConfigChannel+0x784>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	613b      	str	r3, [r7, #16]
  return result;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f003 021f 	and.w	r2, r3, #31
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	3b1e      	subs	r3, #30
 80030d2:	051b      	lsls	r3, r3, #20
 80030d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030d8:	430b      	orrs	r3, r1
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	6892      	ldr	r2, [r2, #8]
 80030de:	4619      	mov	r1, r3
 80030e0:	f7ff f9c1 	bl	8002466 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d079      	beq.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030f0:	4829      	ldr	r0, [pc, #164]	; (8003198 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80030f2:	f7ff f90a 	bl	800230a <LL_ADC_GetCommonPathInternalCh>
 80030f6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d126      	bne.n	800315c <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800310e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d120      	bne.n	800315c <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003122:	d15f      	bne.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800312c:	4619      	mov	r1, r3
 800312e:	481a      	ldr	r0, [pc, #104]	; (8003198 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003130:	f7ff f8d8 	bl	80022e4 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	099a      	lsrs	r2, r3, #6
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 800314c:	e002      	b.n	8003154 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3b01      	subs	r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f9      	bne.n	800314e <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800315a:	e043      	b.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a12      	ldr	r2, [pc, #72]	; (80031ac <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d126      	bne.n	80031b4 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003166:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800316a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d120      	bne.n	80031b4 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d033      	beq.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003184:	4619      	mov	r1, r3
 8003186:	4804      	ldr	r0, [pc, #16]	; (8003198 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003188:	f7ff f8ac 	bl	80022e4 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800318c:	e02a      	b.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x890>
 800318e:	bf00      	nop
 8003190:	407f0000 	.word	0x407f0000
 8003194:	80080000 	.word	0x80080000
 8003198:	50000300 	.word	0x50000300
 800319c:	c3210000 	.word	0xc3210000
 80031a0:	90c00010 	.word	0x90c00010
 80031a4:	20000000 	.word	0x20000000
 80031a8:	053e2d63 	.word	0x053e2d63
 80031ac:	c7520000 	.word	0xc7520000
 80031b0:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d112      	bne.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a0b      	ldr	r2, [pc, #44]	; (80031fc <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031dc:	4619      	mov	r1, r3
 80031de:	4808      	ldr	r0, [pc, #32]	; (8003200 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 80031e0:	f7ff f880 	bl	80022e4 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	37a0      	adds	r7, #160	; 0xa0
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	cb840000 	.word	0xcb840000
 80031fc:	50000100 	.word	0x50000100
 8003200:	50000300 	.word	0x50000300

08003204 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003204:	b590      	push	{r4, r7, lr}
 8003206:	b0a1      	sub	sp, #132	; 0x84
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800321e:	2302      	movs	r3, #2
 8003220:	e087      	b.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003232:	d102      	bne.n	800323a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003234:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	e001      	b.n	800323e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e06a      	b.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f99c 	bl	800259c <LL_ADC_REG_IsConversionOngoing>
 8003264:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f996 	bl	800259c <LL_ADC_REG_IsConversionOngoing>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d14c      	bne.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003278:	2b00      	cmp	r3, #0
 800327a:	d149      	bne.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800327c:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800327e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d028      	beq.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800329a:	035b      	lsls	r3, r3, #13
 800329c:	430b      	orrs	r3, r1
 800329e:	431a      	orrs	r2, r3
 80032a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032a8:	f7ff f938 	bl	800251c <LL_ADC_IsEnabled>
 80032ac:	4604      	mov	r4, r0
 80032ae:	4823      	ldr	r0, [pc, #140]	; (800333c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80032b0:	f7ff f934 	bl	800251c <LL_ADC_IsEnabled>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4323      	orrs	r3, r4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d133      	bne.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032c4:	f023 030f 	bic.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	6811      	ldr	r1, [r2, #0]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	6892      	ldr	r2, [r2, #8]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	431a      	orrs	r2, r3
 80032d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d8:	e024      	b.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032ea:	f7ff f917 	bl	800251c <LL_ADC_IsEnabled>
 80032ee:	4604      	mov	r4, r0
 80032f0:	4812      	ldr	r0, [pc, #72]	; (800333c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80032f2:	f7ff f913 	bl	800251c <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4323      	orrs	r3, r4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d112      	bne.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003306:	f023 030f 	bic.w	r3, r3, #15
 800330a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800330c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800330e:	e009      	b.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003322:	e000      	b.n	8003326 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003324:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800332e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003332:	4618      	mov	r0, r3
 8003334:	3784      	adds	r7, #132	; 0x84
 8003336:	46bd      	mov	sp, r7
 8003338:	bd90      	pop	{r4, r7, pc}
 800333a:	bf00      	nop
 800333c:	50000100 	.word	0x50000100
 8003340:	50000300 	.word	0x50000300

08003344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800336c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003376:	4a04      	ldr	r2, [pc, #16]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	60d3      	str	r3, [r2, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 0307 	and.w	r3, r3, #7
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <__NVIC_EnableIRQ+0x38>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	; (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b0:	d301      	bcc.n	80034b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00f      	b.n	80034d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <SysTick_Config+0x40>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034be:	210f      	movs	r1, #15
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f7ff ff8e 	bl	80033e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <SysTick_Config+0x40>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <SysTick_Config+0x40>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff29 	bl	8003344 <__NVIC_SetPriorityGrouping>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003508:	f7ff ff40 	bl	800338c <__NVIC_GetPriorityGrouping>
 800350c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f7ff ff90 	bl	8003438 <NVIC_EncodePriority>
 8003518:	4602      	mov	r2, r0
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff5f 	bl	80033e4 <__NVIC_SetPriority>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff33 	bl	80033a8 <__NVIC_EnableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffa4 	bl	80034a0 <SysTick_Config>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d00d      	beq.n	8003596 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2204      	movs	r2, #4
 800357e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	e047      	b.n	8003626 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 020e 	bic.w	r2, r2, #14
 80035a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f003 021f 	and.w	r2, r3, #31
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003604:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
    }
  }
  return status;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800363e:	e15a      	b.n	80038f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	2101      	movs	r1, #1
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	4013      	ands	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 814c 	beq.w	80038f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d00b      	beq.n	8003678 <HAL_GPIO_Init+0x48>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d007      	beq.n	8003678 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800366c:	2b11      	cmp	r3, #17
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b12      	cmp	r3, #18
 8003676:	d130      	bne.n	80036da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ae:	2201      	movs	r2, #1
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0201 	and.w	r2, r3, #1
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	2203      	movs	r2, #3
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4013      	ands	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0xea>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b12      	cmp	r3, #18
 8003718:	d123      	bne.n	8003762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	08da      	lsrs	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3208      	adds	r2, #8
 8003722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	220f      	movs	r2, #15
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	08da      	lsrs	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3208      	adds	r2, #8
 800375c:	6939      	ldr	r1, [r7, #16]
 800375e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0203 	and.w	r2, r3, #3
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80a6 	beq.w	80038f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a4:	4b5b      	ldr	r3, [pc, #364]	; (8003914 <HAL_GPIO_Init+0x2e4>)
 80037a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a8:	4a5a      	ldr	r2, [pc, #360]	; (8003914 <HAL_GPIO_Init+0x2e4>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6613      	str	r3, [r2, #96]	; 0x60
 80037b0:	4b58      	ldr	r3, [pc, #352]	; (8003914 <HAL_GPIO_Init+0x2e4>)
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037bc:	4a56      	ldr	r2, [pc, #344]	; (8003918 <HAL_GPIO_Init+0x2e8>)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	089b      	lsrs	r3, r3, #2
 80037c2:	3302      	adds	r3, #2
 80037c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	220f      	movs	r2, #15
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037e6:	d01f      	beq.n	8003828 <HAL_GPIO_Init+0x1f8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a4c      	ldr	r2, [pc, #304]	; (800391c <HAL_GPIO_Init+0x2ec>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d019      	beq.n	8003824 <HAL_GPIO_Init+0x1f4>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a4b      	ldr	r2, [pc, #300]	; (8003920 <HAL_GPIO_Init+0x2f0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <HAL_GPIO_Init+0x1f0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a4a      	ldr	r2, [pc, #296]	; (8003924 <HAL_GPIO_Init+0x2f4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00d      	beq.n	800381c <HAL_GPIO_Init+0x1ec>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a49      	ldr	r2, [pc, #292]	; (8003928 <HAL_GPIO_Init+0x2f8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d007      	beq.n	8003818 <HAL_GPIO_Init+0x1e8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a48      	ldr	r2, [pc, #288]	; (800392c <HAL_GPIO_Init+0x2fc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_GPIO_Init+0x1e4>
 8003810:	2305      	movs	r3, #5
 8003812:	e00a      	b.n	800382a <HAL_GPIO_Init+0x1fa>
 8003814:	2306      	movs	r3, #6
 8003816:	e008      	b.n	800382a <HAL_GPIO_Init+0x1fa>
 8003818:	2304      	movs	r3, #4
 800381a:	e006      	b.n	800382a <HAL_GPIO_Init+0x1fa>
 800381c:	2303      	movs	r3, #3
 800381e:	e004      	b.n	800382a <HAL_GPIO_Init+0x1fa>
 8003820:	2302      	movs	r3, #2
 8003822:	e002      	b.n	800382a <HAL_GPIO_Init+0x1fa>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_GPIO_Init+0x1fa>
 8003828:	2300      	movs	r3, #0
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	f002 0203 	and.w	r2, r2, #3
 8003830:	0092      	lsls	r2, r2, #2
 8003832:	4093      	lsls	r3, r2
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800383a:	4937      	ldr	r1, [pc, #220]	; (8003918 <HAL_GPIO_Init+0x2e8>)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	3302      	adds	r3, #2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_GPIO_Init+0x300>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	43db      	mvns	r3, r3
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800386c:	4a30      	ldr	r2, [pc, #192]	; (8003930 <HAL_GPIO_Init+0x300>)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003872:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <HAL_GPIO_Init+0x300>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	43db      	mvns	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003896:	4a26      	ldr	r2, [pc, #152]	; (8003930 <HAL_GPIO_Init+0x300>)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_GPIO_Init+0x300>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038c0:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <HAL_GPIO_Init+0x300>)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038c6:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_GPIO_Init+0x300>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <HAL_GPIO_Init+0x300>)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3301      	adds	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f ae9d 	bne.w	8003640 <HAL_GPIO_Init+0x10>
  }
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	40010000 	.word	0x40010000
 800391c:	48000400 	.word	0x48000400
 8003920:	48000800 	.word	0x48000800
 8003924:	48000c00 	.word	0x48000c00
 8003928:	48001000 	.word	0x48001000
 800392c:	48001400 	.word	0x48001400
 8003930:	40010400 	.word	0x40010400

08003934 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d006      	beq.n	8003958 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800394a:	4a05      	ldr	r2, [pc, #20]	; (8003960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd f92c 	bl	8000bb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40010400 	.word	0x40010400

08003964 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e0bb      	b.n	8003af2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b05      	cmp	r3, #5
 8003984:	d101      	bne.n	800398a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0b3      	b.n	8003af2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d101      	bne.n	800399a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0ab      	b.n	8003af2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399a:	4b58      	ldr	r3, [pc, #352]	; (8003afc <HAL_OPAMP_Init+0x198>)
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	4a57      	ldr	r2, [pc, #348]	; (8003afc <HAL_OPAMP_Init+0x198>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6613      	str	r3, [r2, #96]	; 0x60
 80039a6:	4b55      	ldr	r3, [pc, #340]	; (8003afc <HAL_OPAMP_Init+0x198>)
 80039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fa6e 	bl	8000ea8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d003      	beq.n	80039dc <HAL_OPAMP_Init+0x78>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d133      	bne.n	8003a44 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 0110 	bic.w	r1, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <HAL_OPAMP_Init+0x19c>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6851      	ldr	r1, [r2, #4]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6892      	ldr	r2, [r2, #8]
 8003a04:	4311      	orrs	r1, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6912      	ldr	r2, [r2, #16]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	7d09      	ldrb	r1, [r1, #20]
 8003a10:	2901      	cmp	r1, #1
 8003a12:	d102      	bne.n	8003a1a <HAL_OPAMP_Init+0xb6>
 8003a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a18:	e000      	b.n	8003a1c <HAL_OPAMP_Init+0xb8>
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4311      	orrs	r1, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a22:	4311      	orrs	r1, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a28:	4311      	orrs	r1, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a2e:	04d2      	lsls	r2, r2, #19
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a36:	0612      	lsls	r2, r2, #24
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e035      	b.n	8003ab0 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 0110 	bic.w	r1, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <HAL_OPAMP_Init+0x19c>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6851      	ldr	r1, [r2, #4]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6892      	ldr	r2, [r2, #8]
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68d2      	ldr	r2, [r2, #12]
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6912      	ldr	r2, [r2, #16]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	7d09      	ldrb	r1, [r1, #20]
 8003a7e:	2901      	cmp	r1, #1
 8003a80:	d102      	bne.n	8003a88 <HAL_OPAMP_Init+0x124>
 8003a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a86:	e000      	b.n	8003a8a <HAL_OPAMP_Init+0x126>
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a9c:	04d2      	lsls	r2, r2, #19
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aa4:	0612      	lsls	r2, r2, #24
 8003aa6:	4311      	orrs	r1, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	db10      	blt.n	8003adc <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	e0003e11 	.word	0xe0003e11

08003b04 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
 8003b1a:	e01d      	b.n	8003b58 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d102      	bne.n	8003b2e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
 8003b2c:	e014      	b.n	8003b58 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10c      	bne.n	8003b54 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003b52:	e001      	b.n	8003b58 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b08c      	sub	sp, #48	; 0x30
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e2df      	b.n	8004148 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d001      	beq.n	8003b98 <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e2d7      	b.n	8004148 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d001      	beq.n	8003ba8 <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e2cf      	b.n	8004148 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d001      	beq.n	8003bb8 <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e2c7      	b.n	8004148 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0202 	orr.w	r2, r2, #2
 8003bc6:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0202 	orr.w	r2, r2, #2
 8003bd6:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0202 	orr.w	r2, r2, #2
 8003be6:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0210 	orr.w	r2, r2, #16
 8003bf6:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0210 	orr.w	r2, r2, #16
 8003c06:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0210 	orr.w	r2, r2, #16
 8003c16:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c26:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c36:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c46:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003c56:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003c66:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003c76:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 8003ca8:	2310      	movs	r3, #16
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 8003cac:	2310      	movs	r3, #16
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8003cb8:	e056      	b.n	8003d68 <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	061a      	lsls	r2, r3, #24
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	061a      	lsls	r2, r3, #24
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	061a      	lsls	r2, r3, #24
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f7fd fd45 	bl	800178c <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8003d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4413      	add	r3, r2
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d18:	e003      	b.n	8003d22 <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 8003d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8003d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	4413      	add	r3, r2
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
 8003d38:	e003      	b.n	8003d42 <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4413      	add	r3, r2
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	e003      	b.n	8003d62 <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1a5      	bne.n	8003cba <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	061a      	lsls	r2, r3, #24
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	061a      	lsls	r2, r3, #24
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	061a      	lsls	r2, r3, #24
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8003db0:	2002      	movs	r0, #2
 8003db2:	f7fd fceb 	bl	800178c <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00d      	beq.n	8003de0 <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	061a      	lsls	r2, r3, #24
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	3301      	adds	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	061a      	lsls	r2, r3, #24
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	061a      	lsls	r2, r3, #24
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e46:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e5a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e6e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 8003e70:	2310      	movs	r3, #16
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 8003e74:	2310      	movs	r3, #16
 8003e76:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 8003e78:	2310      	movs	r3, #16
 8003e7a:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8003e80:	e056      	b.n	8003f30 <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	04da      	lsls	r2, r3, #19
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	04da      	lsls	r2, r3, #19
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	04da      	lsls	r2, r3, #19
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8003ec4:	2002      	movs	r0, #2
 8003ec6:	f7fd fc61 	bl	800178c <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d004      	beq.n	8003ee2 <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 8003ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4413      	add	r3, r2
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee0:	e003      	b.n	8003eea <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 8003ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	4413      	add	r3, r2
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	e003      	b.n	8003f0a <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 8003f02:	6a3a      	ldr	r2, [r7, #32]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	e003      	b.n	8003f2a <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1a5      	bne.n	8003e82 <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	04da      	lsls	r2, r3, #19
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	04da      	lsls	r2, r3, #19
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	04da      	lsls	r2, r3, #19
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8003f78:	2002      	movs	r0, #2
 8003f7a:	f7fd fc07 	bl	800178c <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	3301      	adds	r3, #1
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	04da      	lsls	r2, r3, #19
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	04da      	lsls	r2, r3, #19
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	04da      	lsls	r2, r3, #19
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800400a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800401a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0202 	bic.w	r2, r2, #2
 800406a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0202 	bic.w	r2, r2, #2
 800407a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0202 	bic.w	r2, r2, #2
 800408a:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004090:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6a3a      	ldr	r2, [r7, #32]
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2210      	movs	r2, #16
 80040b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2210      	movs	r2, #16
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2210      	movs	r2, #16
 80040c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	061a      	lsls	r2, r3, #24
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	061a      	lsls	r2, r3, #24
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	061a      	lsls	r2, r3, #24
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	04da      	lsls	r2, r3, #19
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	04da      	lsls	r2, r3, #19
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	04da      	lsls	r2, r3, #19
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3730      	adds	r7, #48	; 0x30
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d141      	bne.n	80041e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800415e:	4b4b      	ldr	r3, [pc, #300]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	d131      	bne.n	80041d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800416c:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004172:	4a46      	ldr	r2, [pc, #280]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800417c:	4b43      	ldr	r3, [pc, #268]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004184:	4a41      	ldr	r2, [pc, #260]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800418c:	4b40      	ldr	r3, [pc, #256]	; (8004290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2232      	movs	r2, #50	; 0x32
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	4a3f      	ldr	r2, [pc, #252]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	0c9b      	lsrs	r3, r3, #18
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a2:	e002      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041aa:	4b38      	ldr	r3, [pc, #224]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b6:	d102      	bne.n	80041be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f2      	bne.n	80041a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041be:	4b33      	ldr	r3, [pc, #204]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ca:	d158      	bne.n	800427e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e057      	b.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d0:	4b2e      	ldr	r3, [pc, #184]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d6:	4a2d      	ldr	r2, [pc, #180]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041e0:	e04d      	b.n	800427e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e8:	d141      	bne.n	800426e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f6:	d131      	bne.n	800425c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fe:	4a23      	ldr	r2, [pc, #140]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004208:	4b20      	ldr	r3, [pc, #128]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004210:	4a1e      	ldr	r2, [pc, #120]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004216:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004218:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2232      	movs	r2, #50	; 0x32
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	0c9b      	lsrs	r3, r3, #18
 800422a:	3301      	adds	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800422e:	e002      	b.n	8004236 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3b01      	subs	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004242:	d102      	bne.n	800424a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f2      	bne.n	8004230 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	d112      	bne.n	800427e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e011      	b.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800426c:	e007      	b.n	800427e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800427c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	40007000 	.word	0x40007000
 8004290:	20000000 	.word	0x20000000
 8004294:	431bde83 	.word	0x431bde83

08004298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e308      	b.n	80048bc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d075      	beq.n	80043a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b6:	4ba3      	ldr	r3, [pc, #652]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c0:	4ba0      	ldr	r3, [pc, #640]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	d102      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3e>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_OscConfig+0x44>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d10b      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	4b99      	ldr	r3, [pc, #612]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d05b      	beq.n	80043a0 <HAL_RCC_OscConfig+0x108>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d157      	bne.n	80043a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e2e3      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d106      	bne.n	800430c <HAL_RCC_OscConfig+0x74>
 80042fe:	4b91      	ldr	r3, [pc, #580]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a90      	ldr	r2, [pc, #576]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e01d      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x98>
 8004316:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a8a      	ldr	r2, [pc, #552]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a87      	ldr	r2, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e00b      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 8004330:	4b84      	ldr	r3, [pc, #528]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a83      	ldr	r2, [pc, #524]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a80      	ldr	r2, [pc, #512]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fd fa10 	bl	8001774 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fd fa0c 	bl	8001774 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e2a8      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436a:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0xc0>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd f9fc 	bl	8001774 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004380:	f7fd f9f8 	bl	8001774 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e294      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004392:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0xe8>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d075      	beq.n	800449a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b8:	4b62      	ldr	r3, [pc, #392]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d102      	bne.n	80043ce <HAL_RCC_OscConfig+0x136>
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d002      	beq.n	80043d4 <HAL_RCC_OscConfig+0x13c>
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d11f      	bne.n	8004414 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d4:	4b5b      	ldr	r3, [pc, #364]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_OscConfig+0x154>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e267      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b55      	ldr	r3, [pc, #340]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	4952      	ldr	r1, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004400:	4b51      	ldr	r3, [pc, #324]	; (8004548 <HAL_RCC_OscConfig+0x2b0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7fd f969 	bl	80016dc <HAL_InitTick>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d043      	beq.n	8004498 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e253      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d023      	beq.n	8004464 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800441c:	4b49      	ldr	r3, [pc, #292]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a48      	ldr	r2, [pc, #288]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd f9a4 	bl	8001774 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004430:	f7fd f9a0 	bl	8001774 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e23c      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004442:	4b40      	ldr	r3, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444e:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	4939      	ldr	r1, [pc, #228]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
 8004462:	e01a      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004464:	4b37      	ldr	r3, [pc, #220]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a36      	ldr	r2, [pc, #216]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800446a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800446e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd f980 	bl	8001774 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004478:	f7fd f97c 	bl	8001774 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e218      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800448a:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x1e0>
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03c      	beq.n	8004520 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fd f959 	bl	8001774 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c6:	f7fd f955 	bl	8001774 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1f1      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ef      	beq.n	80044c6 <HAL_RCC_OscConfig+0x22e>
 80044e6:	e01b      	b.n	8004520 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e8:	4b16      	ldr	r3, [pc, #88]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fd f93c 	bl	8001774 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004500:	f7fd f938 	bl	8001774 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1d4      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1ef      	bne.n	8004500 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80ab 	beq.w	8004684 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_RCC_OscConfig+0x2b4>
 800453e:	2301      	movs	r3, #1
 8004540:	e005      	b.n	800454e <HAL_RCC_OscConfig+0x2b6>
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	20000004 	.word	0x20000004
 800454c:	2300      	movs	r3, #0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00d      	beq.n	800456e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004552:	4baf      	ldr	r3, [pc, #700]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	4aae      	ldr	r2, [pc, #696]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6593      	str	r3, [r2, #88]	; 0x58
 800455e:	4bac      	ldr	r3, [pc, #688]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800456a:	2301      	movs	r3, #1
 800456c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456e:	4ba9      	ldr	r3, [pc, #676]	; (8004814 <HAL_RCC_OscConfig+0x57c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d118      	bne.n	80045ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800457a:	4ba6      	ldr	r3, [pc, #664]	; (8004814 <HAL_RCC_OscConfig+0x57c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4aa5      	ldr	r2, [pc, #660]	; (8004814 <HAL_RCC_OscConfig+0x57c>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004586:	f7fd f8f5 	bl	8001774 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458e:	f7fd f8f1 	bl	8001774 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e18d      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a0:	4b9c      	ldr	r3, [pc, #624]	; (8004814 <HAL_RCC_OscConfig+0x57c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d108      	bne.n	80045c6 <HAL_RCC_OscConfig+0x32e>
 80045b4:	4b96      	ldr	r3, [pc, #600]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	4a95      	ldr	r2, [pc, #596]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c4:	e024      	b.n	8004610 <HAL_RCC_OscConfig+0x378>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d110      	bne.n	80045f0 <HAL_RCC_OscConfig+0x358>
 80045ce:	4b90      	ldr	r3, [pc, #576]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d4:	4a8e      	ldr	r2, [pc, #568]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045de:	4b8c      	ldr	r3, [pc, #560]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e4:	4a8a      	ldr	r2, [pc, #552]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ee:	e00f      	b.n	8004610 <HAL_RCC_OscConfig+0x378>
 80045f0:	4b87      	ldr	r3, [pc, #540]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	4a86      	ldr	r2, [pc, #536]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004600:	4b83      	ldr	r3, [pc, #524]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	4a82      	ldr	r2, [pc, #520]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d016      	beq.n	8004646 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fd f8ac 	bl	8001774 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f7fd f8a8 	bl	8001774 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e142      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004636:	4b76      	ldr	r3, [pc, #472]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ed      	beq.n	8004620 <HAL_RCC_OscConfig+0x388>
 8004644:	e015      	b.n	8004672 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004646:	f7fd f895 	bl	8001774 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fd f891 	bl	8001774 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e12b      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004664:	4b6a      	ldr	r3, [pc, #424]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1ed      	bne.n	800464e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004672:	7ffb      	ldrb	r3, [r7, #31]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d105      	bne.n	8004684 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004678:	4b65      	ldr	r3, [pc, #404]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	4a64      	ldr	r2, [pc, #400]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800467e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004682:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d03c      	beq.n	800470a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01c      	beq.n	80046d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004698:	4b5d      	ldr	r3, [pc, #372]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800469a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800469e:	4a5c      	ldr	r2, [pc, #368]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fd f864 	bl	8001774 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b0:	f7fd f860 	bl	8001774 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0fc      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046c2:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ef      	beq.n	80046b0 <HAL_RCC_OscConfig+0x418>
 80046d0:	e01b      	b.n	800470a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046d2:	4b4f      	ldr	r3, [pc, #316]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d8:	4a4d      	ldr	r2, [pc, #308]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e2:	f7fd f847 	bl	8001774 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ea:	f7fd f843 	bl	8001774 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e0df      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046fc:	4b44      	ldr	r3, [pc, #272]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80046fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ef      	bne.n	80046ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80d3 	beq.w	80048ba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004714:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b0c      	cmp	r3, #12
 800471e:	f000 808d 	beq.w	800483c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d15a      	bne.n	80047e0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b39      	ldr	r3, [pc, #228]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a38      	ldr	r2, [pc, #224]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fd f81d 	bl	8001774 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473e:	f7fd f819 	bl	8001774 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0b5      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004750:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f0      	bne.n	800473e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800475c:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_OscConfig+0x580>)
 8004762:	4013      	ands	r3, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6a11      	ldr	r1, [r2, #32]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476c:	3a01      	subs	r2, #1
 800476e:	0112      	lsls	r2, r2, #4
 8004770:	4311      	orrs	r1, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004776:	0212      	lsls	r2, r2, #8
 8004778:	4311      	orrs	r1, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800477e:	0852      	lsrs	r2, r2, #1
 8004780:	3a01      	subs	r2, #1
 8004782:	0552      	lsls	r2, r2, #21
 8004784:	4311      	orrs	r1, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800478a:	0852      	lsrs	r2, r2, #1
 800478c:	3a01      	subs	r2, #1
 800478e:	0652      	lsls	r2, r2, #25
 8004790:	4311      	orrs	r1, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004796:	06d2      	lsls	r2, r2, #27
 8004798:	430a      	orrs	r2, r1
 800479a:	491d      	ldr	r1, [pc, #116]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 800479c:	4313      	orrs	r3, r2
 800479e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a0:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047ac:	4b18      	ldr	r3, [pc, #96]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fc ffdc 	bl	8001774 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fc ffd8 	bl	8001774 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e074      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d2:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x528>
 80047de:	e06c      	b.n	80048ba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0a      	ldr	r2, [pc, #40]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a07      	ldr	r2, [pc, #28]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4a04      	ldr	r2, [pc, #16]	; (8004810 <HAL_RCC_OscConfig+0x578>)
 80047fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004806:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fc ffb4 	bl	8001774 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480e:	e00e      	b.n	800482e <HAL_RCC_OscConfig+0x596>
 8004810:	40021000 	.word	0x40021000
 8004814:	40007000 	.word	0x40007000
 8004818:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fc ffaa 	bl	8001774 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e046      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482e:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <HAL_RCC_OscConfig+0x62c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x584>
 800483a:	e03e      	b.n	80048ba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e039      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCC_OscConfig+0x62c>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0203 	and.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	429a      	cmp	r2, r3
 800485a:	d12c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	3b01      	subs	r3, #1
 8004868:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d123      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d11b      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d113      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d109      	bne.n	80048b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021000 	.word	0x40021000

080048c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e11e      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e0:	4b91      	ldr	r3, [pc, #580]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d910      	bls.n	8004910 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b8e      	ldr	r3, [pc, #568]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 020f 	bic.w	r2, r3, #15
 80048f6:	498c      	ldr	r1, [pc, #560]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b8a      	ldr	r3, [pc, #552]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e106      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d073      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d129      	bne.n	8004978 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004924:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0f4      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004934:	f000 f99e 	bl	8004c74 <RCC_GetSysClockFreqFromPLLSource>
 8004938:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4a7c      	ldr	r2, [pc, #496]	; (8004b30 <HAL_RCC_ClockConfig+0x268>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d93f      	bls.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004942:	4b7a      	ldr	r3, [pc, #488]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004956:	2b00      	cmp	r3, #0
 8004958:	d033      	beq.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800495e:	2b00      	cmp	r3, #0
 8004960:	d12f      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004962:	4b72      	ldr	r3, [pc, #456]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800496a:	4a70      	ldr	r2, [pc, #448]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 800496c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004970:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e024      	b.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d107      	bne.n	8004990 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0c6      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004990:	4b66      	ldr	r3, [pc, #408]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0be      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049a0:	f000 f8ce 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4a61      	ldr	r2, [pc, #388]	; (8004b30 <HAL_RCC_ClockConfig+0x268>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d909      	bls.n	80049c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049ae:	4b5f      	ldr	r3, [pc, #380]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b6:	4a5d      	ldr	r2, [pc, #372]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049c2:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4957      	ldr	r1, [pc, #348]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d4:	f7fc fece 	bl	8001774 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fc feca 	bl	8001774 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e095      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	4b4e      	ldr	r3, [pc, #312]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 020c 	and.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d1eb      	bne.n	80049dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d023      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a42      	ldr	r2, [pc, #264]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a34:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a3c:	4a3b      	ldr	r2, [pc, #236]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a44:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4936      	ldr	r1, [pc, #216]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a5e:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4a32      	ldr	r2, [pc, #200]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d21d      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a78:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 020f 	bic.w	r2, r3, #15
 8004a80:	4929      	ldr	r1, [pc, #164]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a88:	f7fc fe74 	bl	8001774 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fc fe70 	bl	8001774 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e03b      	b.n	8004b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_RCC_ClockConfig+0x260>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1ed      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4917      	ldr	r1, [pc, #92]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	490f      	ldr	r1, [pc, #60]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004af2:	f000 f825 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004af6:	4601      	mov	r1, r0
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <HAL_RCC_ClockConfig+0x264>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	4a0c      	ldr	r2, [pc, #48]	; (8004b34 <HAL_RCC_ClockConfig+0x26c>)
 8004b04:	5cd3      	ldrb	r3, [r2, r3]
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b0e:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <HAL_RCC_ClockConfig+0x270>)
 8004b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_RCC_ClockConfig+0x274>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fc fde0 	bl	80016dc <HAL_InitTick>
 8004b1c:	4603      	mov	r3, r0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40022000 	.word	0x40022000
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	04c4b400 	.word	0x04c4b400
 8004b34:	08008ad4 	.word	0x08008ad4
 8004b38:	20000000 	.word	0x20000000
 8004b3c:	20000004 	.word	0x20000004

08004b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b46:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d102      	bne.n	8004b58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b52:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e047      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 030c 	and.w	r3, r3, #12
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d102      	bne.n	8004b6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b64:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	e03e      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d136      	bne.n	8004be4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b76:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d10c      	bne.n	8004bae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b94:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b9e:	68d2      	ldr	r2, [r2, #12]
 8004ba0:	0a12      	lsrs	r2, r2, #8
 8004ba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	617b      	str	r3, [r7, #20]
      break;
 8004bac:	e00c      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	4a10      	ldr	r2, [pc, #64]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb8:	68d2      	ldr	r2, [r2, #12]
 8004bba:	0a12      	lsrs	r2, r2, #8
 8004bbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bc0:	fb02 f303 	mul.w	r3, r2, r3
 8004bc4:	617b      	str	r3, [r7, #20]
      break;
 8004bc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0e5b      	lsrs	r3, r3, #25
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e001      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004be8:	693b      	ldr	r3, [r7, #16]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000000 	.word	0x20000000

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4601      	mov	r1, r0
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c32:	5cd3      	ldrb	r3, [r2, r3]
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	08008ae4 	.word	0x08008ae4

08004c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c4c:	f7ff ffda 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c50:	4601      	mov	r1, r0
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	0adb      	lsrs	r3, r3, #11
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	08008ae4 	.word	0x08008ae4

08004c74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c7a:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d10c      	bne.n	8004cb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c98:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ca2:	68d2      	ldr	r2, [r2, #12]
 8004ca4:	0a12      	lsrs	r2, r2, #8
 8004ca6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	617b      	str	r3, [r7, #20]
    break;
 8004cb0:	e00c      	b.n	8004ccc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cb2:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cbc:	68d2      	ldr	r2, [r2, #12]
 8004cbe:	0a12      	lsrs	r2, r2, #8
 8004cc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
    break;
 8004cca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	0e5b      	lsrs	r3, r3, #25
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ce6:	687b      	ldr	r3, [r7, #4]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	007a1200 	.word	0x007a1200
 8004cfc:	00f42400 	.word	0x00f42400

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d08:	2300      	movs	r3, #0
 8004d0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8098 	beq.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d22:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10d      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4b40      	ldr	r3, [pc, #256]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	4a3f      	ldr	r2, [pc, #252]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6593      	str	r3, [r2, #88]	; 0x58
 8004d3a:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d46:	2301      	movs	r3, #1
 8004d48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d4a:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a39      	ldr	r2, [pc, #228]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d56:	f7fc fd0d 	bl	8001774 <HAL_GetTick>
 8004d5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d5c:	e009      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5e:	f7fc fd09 	bl	8001774 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d902      	bls.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	74fb      	strb	r3, [r7, #19]
        break;
 8004d70:	e005      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d72:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ef      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d159      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d84:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01e      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d019      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da0:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004daa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fc fcc9 	bl	8001774 <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de4:	e00b      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fc fcc5 	bl	8001774 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d902      	bls.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	74fb      	strb	r3, [r7, #19]
            break;
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ec      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e12:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	4903      	ldr	r1, [pc, #12]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e28:	e008      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	74bb      	strb	r3, [r7, #18]
 8004e2e:	e005      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e3c:	7c7b      	ldrb	r3, [r7, #17]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d105      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4ba6      	ldr	r3, [pc, #664]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	4aa5      	ldr	r2, [pc, #660]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e5a:	4ba0      	ldr	r3, [pc, #640]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f023 0203 	bic.w	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	499c      	ldr	r1, [pc, #624]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e7c:	4b97      	ldr	r3, [pc, #604]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f023 020c 	bic.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4994      	ldr	r1, [pc, #592]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e9e:	4b8f      	ldr	r3, [pc, #572]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	498b      	ldr	r1, [pc, #556]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ec0:	4b86      	ldr	r3, [pc, #536]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	4983      	ldr	r1, [pc, #524]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ee2:	4b7e      	ldr	r3, [pc, #504]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	497a      	ldr	r1, [pc, #488]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f04:	4b75      	ldr	r3, [pc, #468]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	4972      	ldr	r1, [pc, #456]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f26:	4b6d      	ldr	r3, [pc, #436]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	4969      	ldr	r1, [pc, #420]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f48:	4b64      	ldr	r3, [pc, #400]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	4961      	ldr	r1, [pc, #388]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f6a:	4b5c      	ldr	r3, [pc, #368]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	4958      	ldr	r1, [pc, #352]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f8c:	4b53      	ldr	r3, [pc, #332]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	4950      	ldr	r1, [pc, #320]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b4b      	ldr	r3, [pc, #300]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a4a      	ldr	r2, [pc, #296]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fc4:	4b45      	ldr	r3, [pc, #276]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	4942      	ldr	r1, [pc, #264]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe4:	4b3d      	ldr	r3, [pc, #244]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a3c      	ldr	r2, [pc, #240]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ffc:	4b37      	ldr	r3, [pc, #220]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	4934      	ldr	r1, [pc, #208]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501c:	4b2f      	ldr	r3, [pc, #188]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a2e      	ldr	r2, [pc, #184]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005026:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005042:	4926      	ldr	r1, [pc, #152]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005054:	4b21      	ldr	r3, [pc, #132]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a20      	ldr	r2, [pc, #128]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	4918      	ldr	r1, [pc, #96]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800508a:	d105      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800508c:	4b13      	ldr	r3, [pc, #76]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4a12      	ldr	r2, [pc, #72]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005096:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050a4:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	490a      	ldr	r1, [pc, #40]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050c2:	d105      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a04      	ldr	r2, [pc, #16]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80050d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000

080050e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e049      	b.n	8005186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fc f912 	bl	8001330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fd20 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e049      	b.n	8005234 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f841 	bl	800523c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 fcc9 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <HAL_TIM_PWM_Start+0x24>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e03c      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d109      	bne.n	800528e <HAL_TIM_PWM_Start+0x3e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e02f      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d109      	bne.n	80052a8 <HAL_TIM_PWM_Start+0x58>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e022      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d109      	bne.n	80052c2 <HAL_TIM_PWM_Start+0x72>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	bf14      	ite	ne
 80052ba:	2301      	movne	r3, #1
 80052bc:	2300      	moveq	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	e015      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d109      	bne.n	80052dc <HAL_TIM_PWM_Start+0x8c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e008      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e06e      	b.n	80053d4 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_PWM_Start+0xb6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005304:	e023      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d104      	bne.n	8005316 <HAL_TIM_PWM_Start+0xc6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005314:	e01b      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d104      	bne.n	8005326 <HAL_TIM_PWM_Start+0xd6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	e013      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d104      	bne.n	8005336 <HAL_TIM_PWM_Start+0xe6>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005334:	e00b      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b10      	cmp	r3, #16
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Start+0xf6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005344:	e003      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2201      	movs	r2, #1
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f001 f826 	bl	80063a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1e      	ldr	r2, [pc, #120]	; (80053dc <HAL_TIM_PWM_Start+0x18c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_TIM_PWM_Start+0x13e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1d      	ldr	r2, [pc, #116]	; (80053e0 <HAL_TIM_PWM_Start+0x190>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_TIM_PWM_Start+0x13e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <HAL_TIM_PWM_Start+0x194>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_TIM_PWM_Start+0x13e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <HAL_TIM_PWM_Start+0x198>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_TIM_PWM_Start+0x13e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a18      	ldr	r2, [pc, #96]	; (80053ec <HAL_TIM_PWM_Start+0x19c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_Start+0x142>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_TIM_PWM_Start+0x144>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <HAL_TIM_PWM_Start+0x1a0>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d00b      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x182>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c0:	d007      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40013400 	.word	0x40013400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800
 80053f0:	00010007 	.word	0x00010007

080053f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 ffce 	bl	80063a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a3e      	ldr	r2, [pc, #248]	; (800550c <HAL_TIM_PWM_Stop+0x118>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <HAL_TIM_PWM_Stop+0x4a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a3d      	ldr	r2, [pc, #244]	; (8005510 <HAL_TIM_PWM_Stop+0x11c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00e      	beq.n	800543e <HAL_TIM_PWM_Stop+0x4a>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <HAL_TIM_PWM_Stop+0x120>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_TIM_PWM_Stop+0x4a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a3a      	ldr	r2, [pc, #232]	; (8005518 <HAL_TIM_PWM_Stop+0x124>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_TIM_PWM_Stop+0x4a>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a38      	ldr	r2, [pc, #224]	; (800551c <HAL_TIM_PWM_Stop+0x128>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d101      	bne.n	8005442 <HAL_TIM_PWM_Stop+0x4e>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <HAL_TIM_PWM_Stop+0x50>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d017      	beq.n	8005478 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10f      	bne.n	8005478 <HAL_TIM_PWM_Stop+0x84>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	f244 4344 	movw	r3, #17476	; 0x4444
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d107      	bne.n	8005478 <HAL_TIM_PWM_Stop+0x84>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005476:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10f      	bne.n	80054a8 <HAL_TIM_PWM_Stop+0xb4>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6a1a      	ldr	r2, [r3, #32]
 800548e:	f244 4344 	movw	r3, #17476	; 0x4444
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d107      	bne.n	80054a8 <HAL_TIM_PWM_Stop+0xb4>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <HAL_TIM_PWM_Stop+0xc4>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b6:	e023      	b.n	8005500 <HAL_TIM_PWM_Stop+0x10c>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d104      	bne.n	80054c8 <HAL_TIM_PWM_Stop+0xd4>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c6:	e01b      	b.n	8005500 <HAL_TIM_PWM_Stop+0x10c>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d104      	bne.n	80054d8 <HAL_TIM_PWM_Stop+0xe4>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d6:	e013      	b.n	8005500 <HAL_TIM_PWM_Stop+0x10c>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b0c      	cmp	r3, #12
 80054dc:	d104      	bne.n	80054e8 <HAL_TIM_PWM_Stop+0xf4>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054e6:	e00b      	b.n	8005500 <HAL_TIM_PWM_Stop+0x10c>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d104      	bne.n	80054f8 <HAL_TIM_PWM_Stop+0x104>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f6:	e003      	b.n	8005500 <HAL_TIM_PWM_Stop+0x10c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40013400 	.word	0x40013400
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800

08005520 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e097      	b.n	8005664 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fb ff11 	bl	8001370 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005564:	f023 0307 	bic.w	r3, r3, #7
 8005568:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f000 faf5 	bl	8005b64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	4313      	orrs	r3, r2
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055c0:	f023 030c 	bic.w	r3, r3, #12
 80055c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	4313      	orrs	r3, r2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	011a      	lsls	r2, r3, #4
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	031b      	lsls	r3, r3, #12
 80055f0:	4313      	orrs	r3, r2
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005606:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	4313      	orrs	r3, r2
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005684:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800568c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005694:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d110      	bne.n	80056be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d102      	bne.n	80056a8 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056a2:	7b7b      	ldrb	r3, [r7, #13]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d001      	beq.n	80056ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e068      	b.n	800577e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056bc:	e031      	b.n	8005722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d110      	bne.n	80056e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056c4:	7bbb      	ldrb	r3, [r7, #14]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d102      	bne.n	80056d0 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ca:	7b3b      	ldrb	r3, [r7, #12]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d001      	beq.n	80056d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e054      	b.n	800577e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e4:	e01d      	b.n	8005722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d108      	bne.n	80056fe <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ec:	7bbb      	ldrb	r3, [r7, #14]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d105      	bne.n	80056fe <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f2:	7b7b      	ldrb	r3, [r7, #13]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d102      	bne.n	80056fe <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056f8:	7b3b      	ldrb	r3, [r7, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d001      	beq.n	8005702 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e03d      	b.n	800577e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_TIM_Encoder_Start+0xc2>
 8005728:	2b04      	cmp	r3, #4
 800572a:	d008      	beq.n	800573e <HAL_TIM_Encoder_Start+0xd2>
 800572c:	e00f      	b.n	800574e <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2201      	movs	r2, #1
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fe36 	bl	80063a8 <TIM_CCxChannelCmd>
      break;
 800573c:	e016      	b.n	800576c <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	2104      	movs	r1, #4
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fe2e 	bl	80063a8 <TIM_CCxChannelCmd>
      break;
 800574c:	e00e      	b.n	800576c <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2201      	movs	r2, #1
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fe26 	bl	80063a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	2104      	movs	r1, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fe1f 	bl	80063a8 <TIM_CCxChannelCmd>
      break;
 800576a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800579e:	2302      	movs	r3, #2
 80057a0:	e0fd      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x216>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b14      	cmp	r3, #20
 80057ae:	f200 80f0 	bhi.w	8005992 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	0800580d 	.word	0x0800580d
 80057bc:	08005993 	.word	0x08005993
 80057c0:	08005993 	.word	0x08005993
 80057c4:	08005993 	.word	0x08005993
 80057c8:	0800584d 	.word	0x0800584d
 80057cc:	08005993 	.word	0x08005993
 80057d0:	08005993 	.word	0x08005993
 80057d4:	08005993 	.word	0x08005993
 80057d8:	0800588f 	.word	0x0800588f
 80057dc:	08005993 	.word	0x08005993
 80057e0:	08005993 	.word	0x08005993
 80057e4:	08005993 	.word	0x08005993
 80057e8:	080058cf 	.word	0x080058cf
 80057ec:	08005993 	.word	0x08005993
 80057f0:	08005993 	.word	0x08005993
 80057f4:	08005993 	.word	0x08005993
 80057f8:	08005911 	.word	0x08005911
 80057fc:	08005993 	.word	0x08005993
 8005800:	08005993 	.word	0x08005993
 8005804:	08005993 	.word	0x08005993
 8005808:	08005951 	.word	0x08005951
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fa36 	bl	8005c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0208 	orr.w	r2, r2, #8
 8005826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	619a      	str	r2, [r3, #24]
      break;
 800584a:	e0a3      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 faa6 	bl	8005da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	619a      	str	r2, [r3, #24]
      break;
 800588c:	e082      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fb0f 	bl	8005eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0208 	orr.w	r2, r2, #8
 80058a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0204 	bic.w	r2, r2, #4
 80058b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69d9      	ldr	r1, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	61da      	str	r2, [r3, #28]
      break;
 80058cc:	e062      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fb77 	bl	8005fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69d9      	ldr	r1, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	021a      	lsls	r2, r3, #8
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	61da      	str	r2, [r3, #28]
      break;
 800590e:	e041      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fbe0 	bl	80060dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0208 	orr.w	r2, r2, #8
 800592a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0204 	bic.w	r2, r2, #4
 800593a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800594e:	e021      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fc24 	bl	80061a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800596a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	021a      	lsls	r2, r3, #8
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005990:	e000      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005992:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop

080059a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_ConfigClockSource+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e0c3      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x1a0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80059de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b70      	cmp	r3, #112	; 0x70
 80059fa:	d038      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0xc6>
 80059fc:	2b70      	cmp	r3, #112	; 0x70
 80059fe:	d815      	bhi.n	8005a2c <HAL_TIM_ConfigClockSource+0x84>
 8005a00:	2b30      	cmp	r3, #48	; 0x30
 8005a02:	f000 808e 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
 8005a06:	2b30      	cmp	r3, #48	; 0x30
 8005a08:	d809      	bhi.n	8005a1e <HAL_TIM_ConfigClockSource+0x76>
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	f000 8089 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	f000 8086 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 8083 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005a1c:	e08b      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005a1e:	2b50      	cmp	r3, #80	; 0x50
 8005a20:	d04f      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x11a>
 8005a22:	2b60      	cmp	r3, #96	; 0x60
 8005a24:	d05d      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0x13a>
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d06b      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8005a2a:	e084      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005a2c:	4a48      	ldr	r2, [pc, #288]	; (8005b50 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d077      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
 8005a32:	4a47      	ldr	r2, [pc, #284]	; (8005b50 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d809      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0xa4>
 8005a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3c:	d02e      	beq.n	8005a9c <HAL_TIM_ConfigClockSource+0xf4>
 8005a3e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a42:	d06e      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a48:	d074      	beq.n	8005b34 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8005a4a:	e074      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005a4c:	4a41      	ldr	r2, [pc, #260]	; (8005b54 <HAL_TIM_ConfigClockSource+0x1ac>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d067      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
 8005a52:	4a40      	ldr	r2, [pc, #256]	; (8005b54 <HAL_TIM_ConfigClockSource+0x1ac>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d803      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0xb8>
 8005a58:	4a3f      	ldr	r2, [pc, #252]	; (8005b58 <HAL_TIM_ConfigClockSource+0x1b0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d061      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005a5e:	e06a      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005a60:	4a3e      	ldr	r2, [pc, #248]	; (8005b5c <HAL_TIM_ConfigClockSource+0x1b4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d05d      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
 8005a66:	4a3e      	ldr	r2, [pc, #248]	; (8005b60 <HAL_TIM_ConfigClockSource+0x1b8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d05a      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005a6c:	e063      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6899      	ldr	r1, [r3, #8]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f000 fc73 	bl	8006368 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	609a      	str	r2, [r3, #8]
      break;
 8005a9a:	e04c      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	6899      	ldr	r1, [r3, #8]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f000 fc5c 	bl	8006368 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005abe:	609a      	str	r2, [r3, #8]
      break;
 8005ac0:	e039      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6859      	ldr	r1, [r3, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f000 fbce 	bl	8006270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2150      	movs	r1, #80	; 0x50
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fc27 	bl	800632e <TIM_ITRx_SetConfig>
      break;
 8005ae0:	e029      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f000 fbed 	bl	80062ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2160      	movs	r1, #96	; 0x60
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fc17 	bl	800632e <TIM_ITRx_SetConfig>
      break;
 8005b00:	e019      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f000 fbae 	bl	8006270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2140      	movs	r1, #64	; 0x40
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fc07 	bl	800632e <TIM_ITRx_SetConfig>
      break;
 8005b20:	e009      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f000 fbfe 	bl	800632e <TIM_ITRx_SetConfig>
      break;
 8005b32:	e000      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8005b34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	00100020 	.word	0x00100020
 8005b54:	00100040 	.word	0x00100040
 8005b58:	00100030 	.word	0x00100030
 8005b5c:	00100060 	.word	0x00100060
 8005b60:	00100070 	.word	0x00100070

08005b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3c      	ldr	r2, [pc, #240]	; (8005c68 <TIM_Base_SetConfig+0x104>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00f      	beq.n	8005b9c <TIM_Base_SetConfig+0x38>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b82:	d00b      	beq.n	8005b9c <TIM_Base_SetConfig+0x38>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a39      	ldr	r2, [pc, #228]	; (8005c6c <TIM_Base_SetConfig+0x108>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <TIM_Base_SetConfig+0x38>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a38      	ldr	r2, [pc, #224]	; (8005c70 <TIM_Base_SetConfig+0x10c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_Base_SetConfig+0x38>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a37      	ldr	r2, [pc, #220]	; (8005c74 <TIM_Base_SetConfig+0x110>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d108      	bne.n	8005bae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2d      	ldr	r2, [pc, #180]	; (8005c68 <TIM_Base_SetConfig+0x104>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01b      	beq.n	8005bee <TIM_Base_SetConfig+0x8a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbc:	d017      	beq.n	8005bee <TIM_Base_SetConfig+0x8a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2a      	ldr	r2, [pc, #168]	; (8005c6c <TIM_Base_SetConfig+0x108>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <TIM_Base_SetConfig+0x8a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a29      	ldr	r2, [pc, #164]	; (8005c70 <TIM_Base_SetConfig+0x10c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00f      	beq.n	8005bee <TIM_Base_SetConfig+0x8a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a28      	ldr	r2, [pc, #160]	; (8005c74 <TIM_Base_SetConfig+0x110>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <TIM_Base_SetConfig+0x8a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a27      	ldr	r2, [pc, #156]	; (8005c78 <TIM_Base_SetConfig+0x114>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_Base_SetConfig+0x8a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a26      	ldr	r2, [pc, #152]	; (8005c7c <TIM_Base_SetConfig+0x118>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_Base_SetConfig+0x8a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <TIM_Base_SetConfig+0x11c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a10      	ldr	r2, [pc, #64]	; (8005c68 <TIM_Base_SetConfig+0x104>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00f      	beq.n	8005c4c <TIM_Base_SetConfig+0xe8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a11      	ldr	r2, [pc, #68]	; (8005c74 <TIM_Base_SetConfig+0x110>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <TIM_Base_SetConfig+0xe8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a10      	ldr	r2, [pc, #64]	; (8005c78 <TIM_Base_SetConfig+0x114>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d007      	beq.n	8005c4c <TIM_Base_SetConfig+0xe8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a0f      	ldr	r2, [pc, #60]	; (8005c7c <TIM_Base_SetConfig+0x118>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_Base_SetConfig+0xe8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a0e      	ldr	r2, [pc, #56]	; (8005c80 <TIM_Base_SetConfig+0x11c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d103      	bne.n	8005c54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	615a      	str	r2, [r3, #20]
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800
 8005c74:	40013400 	.word	0x40013400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400
 8005c80:	40014800 	.word	0x40014800

08005c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f023 0201 	bic.w	r2, r3, #1
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 0302 	bic.w	r3, r3, #2
 8005cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a2c      	ldr	r2, [pc, #176]	; (8005d90 <TIM_OC1_SetConfig+0x10c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00f      	beq.n	8005d04 <TIM_OC1_SetConfig+0x80>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a2b      	ldr	r2, [pc, #172]	; (8005d94 <TIM_OC1_SetConfig+0x110>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <TIM_OC1_SetConfig+0x80>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a2a      	ldr	r2, [pc, #168]	; (8005d98 <TIM_OC1_SetConfig+0x114>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d007      	beq.n	8005d04 <TIM_OC1_SetConfig+0x80>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a29      	ldr	r2, [pc, #164]	; (8005d9c <TIM_OC1_SetConfig+0x118>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_OC1_SetConfig+0x80>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a28      	ldr	r2, [pc, #160]	; (8005da0 <TIM_OC1_SetConfig+0x11c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d10c      	bne.n	8005d1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f023 0308 	bic.w	r3, r3, #8
 8005d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f023 0304 	bic.w	r3, r3, #4
 8005d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <TIM_OC1_SetConfig+0x10c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00f      	beq.n	8005d46 <TIM_OC1_SetConfig+0xc2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <TIM_OC1_SetConfig+0x110>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00b      	beq.n	8005d46 <TIM_OC1_SetConfig+0xc2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <TIM_OC1_SetConfig+0x114>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <TIM_OC1_SetConfig+0xc2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a18      	ldr	r2, [pc, #96]	; (8005d9c <TIM_OC1_SetConfig+0x118>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_OC1_SetConfig+0xc2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a17      	ldr	r2, [pc, #92]	; (8005da0 <TIM_OC1_SetConfig+0x11c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d111      	bne.n	8005d6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40013400 	.word	0x40013400
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40014400 	.word	0x40014400
 8005da0:	40014800 	.word	0x40014800

08005da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0210 	bic.w	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 0320 	bic.w	r3, r3, #32
 8005df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a28      	ldr	r2, [pc, #160]	; (8005ea4 <TIM_OC2_SetConfig+0x100>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d003      	beq.n	8005e10 <TIM_OC2_SetConfig+0x6c>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a27      	ldr	r2, [pc, #156]	; (8005ea8 <TIM_OC2_SetConfig+0x104>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10d      	bne.n	8005e2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <TIM_OC2_SetConfig+0x100>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00f      	beq.n	8005e54 <TIM_OC2_SetConfig+0xb0>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <TIM_OC2_SetConfig+0x104>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00b      	beq.n	8005e54 <TIM_OC2_SetConfig+0xb0>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <TIM_OC2_SetConfig+0x108>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d007      	beq.n	8005e54 <TIM_OC2_SetConfig+0xb0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a1a      	ldr	r2, [pc, #104]	; (8005eb0 <TIM_OC2_SetConfig+0x10c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_OC2_SetConfig+0xb0>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a19      	ldr	r2, [pc, #100]	; (8005eb4 <TIM_OC2_SetConfig+0x110>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d113      	bne.n	8005e7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40013400 	.word	0x40013400
 8005eac:	40014000 	.word	0x40014000
 8005eb0:	40014400 	.word	0x40014400
 8005eb4:	40014800 	.word	0x40014800

08005eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a27      	ldr	r2, [pc, #156]	; (8005fb4 <TIM_OC3_SetConfig+0xfc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_OC3_SetConfig+0x6a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a26      	ldr	r2, [pc, #152]	; (8005fb8 <TIM_OC3_SetConfig+0x100>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10d      	bne.n	8005f3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1c      	ldr	r2, [pc, #112]	; (8005fb4 <TIM_OC3_SetConfig+0xfc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00f      	beq.n	8005f66 <TIM_OC3_SetConfig+0xae>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a1b      	ldr	r2, [pc, #108]	; (8005fb8 <TIM_OC3_SetConfig+0x100>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00b      	beq.n	8005f66 <TIM_OC3_SetConfig+0xae>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a1a      	ldr	r2, [pc, #104]	; (8005fbc <TIM_OC3_SetConfig+0x104>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <TIM_OC3_SetConfig+0xae>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a19      	ldr	r2, [pc, #100]	; (8005fc0 <TIM_OC3_SetConfig+0x108>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC3_SetConfig+0xae>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <TIM_OC3_SetConfig+0x10c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d113      	bne.n	8005f8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	621a      	str	r2, [r3, #32]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	40012c00 	.word	0x40012c00
 8005fb8:	40013400 	.word	0x40013400
 8005fbc:	40014000 	.word	0x40014000
 8005fc0:	40014400 	.word	0x40014400
 8005fc4:	40014800 	.word	0x40014800

08005fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4313      	orrs	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	031b      	lsls	r3, r3, #12
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a28      	ldr	r2, [pc, #160]	; (80060c8 <TIM_OC4_SetConfig+0x100>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_OC4_SetConfig+0x6c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a27      	ldr	r2, [pc, #156]	; (80060cc <TIM_OC4_SetConfig+0x104>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d10d      	bne.n	8006050 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800603a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	031b      	lsls	r3, r3, #12
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800604e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <TIM_OC4_SetConfig+0x100>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00f      	beq.n	8006078 <TIM_OC4_SetConfig+0xb0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a1c      	ldr	r2, [pc, #112]	; (80060cc <TIM_OC4_SetConfig+0x104>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00b      	beq.n	8006078 <TIM_OC4_SetConfig+0xb0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a1b      	ldr	r2, [pc, #108]	; (80060d0 <TIM_OC4_SetConfig+0x108>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d007      	beq.n	8006078 <TIM_OC4_SetConfig+0xb0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <TIM_OC4_SetConfig+0x10c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC4_SetConfig+0xb0>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <TIM_OC4_SetConfig+0x110>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d113      	bne.n	80060a0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800607e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006086:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	019b      	lsls	r3, r3, #6
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	019b      	lsls	r3, r3, #6
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40013400 	.word	0x40013400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800

080060dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a17      	ldr	r2, [pc, #92]	; (8006190 <TIM_OC5_SetConfig+0xb4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00f      	beq.n	8006156 <TIM_OC5_SetConfig+0x7a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a16      	ldr	r2, [pc, #88]	; (8006194 <TIM_OC5_SetConfig+0xb8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00b      	beq.n	8006156 <TIM_OC5_SetConfig+0x7a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a15      	ldr	r2, [pc, #84]	; (8006198 <TIM_OC5_SetConfig+0xbc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d007      	beq.n	8006156 <TIM_OC5_SetConfig+0x7a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a14      	ldr	r2, [pc, #80]	; (800619c <TIM_OC5_SetConfig+0xc0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_OC5_SetConfig+0x7a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <TIM_OC5_SetConfig+0xc4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d109      	bne.n	800616a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40013400 	.word	0x40013400
 8006198:	40014000 	.word	0x40014000
 800619c:	40014400 	.word	0x40014400
 80061a0:	40014800 	.word	0x40014800

080061a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	051b      	lsls	r3, r3, #20
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a18      	ldr	r2, [pc, #96]	; (800625c <TIM_OC6_SetConfig+0xb8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00f      	beq.n	8006220 <TIM_OC6_SetConfig+0x7c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a17      	ldr	r2, [pc, #92]	; (8006260 <TIM_OC6_SetConfig+0xbc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00b      	beq.n	8006220 <TIM_OC6_SetConfig+0x7c>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a16      	ldr	r2, [pc, #88]	; (8006264 <TIM_OC6_SetConfig+0xc0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d007      	beq.n	8006220 <TIM_OC6_SetConfig+0x7c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a15      	ldr	r2, [pc, #84]	; (8006268 <TIM_OC6_SetConfig+0xc4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_OC6_SetConfig+0x7c>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a14      	ldr	r2, [pc, #80]	; (800626c <TIM_OC6_SetConfig+0xc8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d109      	bne.n	8006234 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40012c00 	.word	0x40012c00
 8006260:	40013400 	.word	0x40013400
 8006264:	40014000 	.word	0x40014000
 8006268:	40014400 	.word	0x40014400
 800626c:	40014800 	.word	0x40014800

08006270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f023 0201 	bic.w	r2, r3, #1
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800629a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f023 030a 	bic.w	r3, r3, #10
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b087      	sub	sp, #28
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	f023 0210 	bic.w	r2, r3, #16
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	031b      	lsls	r3, r3, #12
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800630a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	f043 0307 	orr.w	r3, r3, #7
 8006354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	609a      	str	r2, [r3, #8]
}
 800635c:	bf00      	nop
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	021a      	lsls	r2, r3, #8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	431a      	orrs	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4313      	orrs	r3, r2
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	609a      	str	r2, [r3, #8]
}
 800639c:	bf00      	nop
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	2201      	movs	r2, #1
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1a      	ldr	r2, [r3, #32]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	43db      	mvns	r3, r3
 80063ca:	401a      	ands	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	fa01 f303 	lsl.w	r3, r1, r3
 80063e0:	431a      	orrs	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d109      	bne.n	8006418 <HAL_TIMEx_PWMN_Start+0x24>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	bf14      	ite	ne
 8006410:	2301      	movne	r3, #1
 8006412:	2300      	moveq	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	e022      	b.n	800645e <HAL_TIMEx_PWMN_Start+0x6a>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b04      	cmp	r3, #4
 800641c:	d109      	bne.n	8006432 <HAL_TIMEx_PWMN_Start+0x3e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	bf14      	ite	ne
 800642a:	2301      	movne	r3, #1
 800642c:	2300      	moveq	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	e015      	b.n	800645e <HAL_TIMEx_PWMN_Start+0x6a>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d109      	bne.n	800644c <HAL_TIMEx_PWMN_Start+0x58>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	bf14      	ite	ne
 8006444:	2301      	movne	r3, #1
 8006446:	2300      	moveq	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	e008      	b.n	800645e <HAL_TIMEx_PWMN_Start+0x6a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	bf14      	ite	ne
 8006458:	2301      	movne	r3, #1
 800645a:	2300      	moveq	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e040      	b.n	80064e8 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <HAL_TIMEx_PWMN_Start+0x82>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006474:	e013      	b.n	800649e <HAL_TIMEx_PWMN_Start+0xaa>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d104      	bne.n	8006486 <HAL_TIMEx_PWMN_Start+0x92>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006484:	e00b      	b.n	800649e <HAL_TIMEx_PWMN_Start+0xaa>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d104      	bne.n	8006496 <HAL_TIMEx_PWMN_Start+0xa2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006494:	e003      	b.n	800649e <HAL_TIMEx_PWMN_Start+0xaa>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2204      	movs	r2, #4
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 f9a4 	bl	80067f4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <HAL_TIMEx_PWMN_Start+0xfc>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b06      	cmp	r3, #6
 80064cc:	d00b      	beq.n	80064e6 <HAL_TIMEx_PWMN_Start+0xf2>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d4:	d007      	beq.n	80064e6 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0201 	orr.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	00010007 	.word	0x00010007

080064f4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2200      	movs	r2, #0
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f974 	bl	80067f4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	f241 1311 	movw	r3, #4369	; 0x1111
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10f      	bne.n	800653c <HAL_TIMEx_PWMN_Stop+0x48>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6a1a      	ldr	r2, [r3, #32]
 8006522:	f244 4344 	movw	r3, #17476	; 0x4444
 8006526:	4013      	ands	r3, r2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d107      	bne.n	800653c <HAL_TIMEx_PWMN_Stop+0x48>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800653a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6a1a      	ldr	r2, [r3, #32]
 8006542:	f241 1311 	movw	r3, #4369	; 0x1111
 8006546:	4013      	ands	r3, r2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10f      	bne.n	800656c <HAL_TIMEx_PWMN_Stop+0x78>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6a1a      	ldr	r2, [r3, #32]
 8006552:	f244 4344 	movw	r3, #17476	; 0x4444
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d107      	bne.n	800656c <HAL_TIMEx_PWMN_Stop+0x78>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0201 	bic.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <HAL_TIMEx_PWMN_Stop+0x88>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800657a:	e013      	b.n	80065a4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b04      	cmp	r3, #4
 8006580:	d104      	bne.n	800658c <HAL_TIMEx_PWMN_Stop+0x98>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800658a:	e00b      	b.n	80065a4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b08      	cmp	r3, #8
 8006590:	d104      	bne.n	800659c <HAL_TIMEx_PWMN_Stop+0xa8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800659a:	e003      	b.n	80065a4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e065      	b.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a2c      	ldr	r2, [pc, #176]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a2b      	ldr	r2, [pc, #172]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d108      	bne.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006602:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d018      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663e:	d013      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00e      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a17      	ldr	r2, [pc, #92]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d009      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a12      	ldr	r2, [pc, #72]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d10c      	bne.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800666e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	4313      	orrs	r3, r2
 8006678:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40013400 	.word	0x40013400
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40014000 	.word	0x40014000

080066b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e087      	b.n	80067e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d004      	beq.n	800675e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d106      	bne.n	800676c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1e      	ldr	r2, [pc, #120]	; (80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1d      	ldr	r2, [pc, #116]	; (80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d126      	bne.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	051b      	lsls	r3, r3, #20
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a0e      	ldr	r2, [pc, #56]	; (80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a0d      	ldr	r2, [pc, #52]	; (80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d106      	bne.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40013400 	.word	0x40013400

080067f4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2204      	movs	r2, #4
 8006808:	fa02 f303 	lsl.w	r3, r2, r3
 800680c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1a      	ldr	r2, [r3, #32]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	43db      	mvns	r3, r3
 8006816:	401a      	ands	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	fa01 f303 	lsl.w	r3, r1, r3
 800682c:	431a      	orrs	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e042      	b.n	80068d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fa feac 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2224      	movs	r2, #36	; 0x24
 800686c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0201 	bic.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fa81 	bl	8006d88 <UART_SetConfig>
 8006886:	4603      	mov	r3, r0
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e022      	b.n	80068d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fc2f 	bl	80080fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0201 	orr.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 fcb6 	bl	8008240 <UART_CheckIdleState>
 80068d4:	4603      	mov	r3, r0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	f040 80bc 	bne.w	8006a72 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_UART_Receive_IT+0x26>
 8006900:	88fb      	ldrh	r3, [r7, #6]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e0b4      	b.n	8006a74 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_UART_Receive_IT+0x38>
 8006914:	2302      	movs	r3, #2
 8006916:	e0ad      	b.n	8006a74 <HAL_UART_Receive_IT+0x194>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	88fa      	ldrh	r2, [r7, #6]
 8006932:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006944:	d10e      	bne.n	8006964 <HAL_UART_Receive_IT+0x84>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <HAL_UART_Receive_IT+0x7a>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006954:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006958:	e02d      	b.n	80069b6 <HAL_UART_Receive_IT+0xd6>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	22ff      	movs	r2, #255	; 0xff
 800695e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006962:	e028      	b.n	80069b6 <HAL_UART_Receive_IT+0xd6>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10d      	bne.n	8006988 <HAL_UART_Receive_IT+0xa8>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <HAL_UART_Receive_IT+0x9e>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	22ff      	movs	r2, #255	; 0xff
 8006978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800697c:	e01b      	b.n	80069b6 <HAL_UART_Receive_IT+0xd6>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	227f      	movs	r2, #127	; 0x7f
 8006982:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006986:	e016      	b.n	80069b6 <HAL_UART_Receive_IT+0xd6>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006990:	d10d      	bne.n	80069ae <HAL_UART_Receive_IT+0xce>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <HAL_UART_Receive_IT+0xc4>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	227f      	movs	r2, #127	; 0x7f
 800699e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069a2:	e008      	b.n	80069b6 <HAL_UART_Receive_IT+0xd6>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	223f      	movs	r2, #63	; 0x3f
 80069a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069ac:	e003      	b.n	80069b6 <HAL_UART_Receive_IT+0xd6>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2222      	movs	r2, #34	; 0x22
 80069c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0201 	orr.w	r2, r2, #1
 80069d4:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069de:	d12a      	bne.n	8006a36 <HAL_UART_Receive_IT+0x156>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069e6:	88fa      	ldrh	r2, [r7, #6]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d324      	bcc.n	8006a36 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f4:	d107      	bne.n	8006a06 <HAL_UART_Receive_IT+0x126>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a1f      	ldr	r2, [pc, #124]	; (8006a80 <HAL_UART_Receive_IT+0x1a0>)
 8006a02:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a04:	e002      	b.n	8006a0c <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <HAL_UART_Receive_IT+0x1a4>)
 8006a0a:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a22:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a32:	609a      	str	r2, [r3, #8]
 8006a34:	e01b      	b.n	8006a6e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3e:	d107      	bne.n	8006a50 <HAL_UART_Receive_IT+0x170>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d103      	bne.n	8006a50 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4a0f      	ldr	r2, [pc, #60]	; (8006a88 <HAL_UART_Receive_IT+0x1a8>)
 8006a4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a4e:	e002      	b.n	8006a56 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4a0e      	ldr	r2, [pc, #56]	; (8006a8c <HAL_UART_Receive_IT+0x1ac>)
 8006a54:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006a6c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e000      	b.n	8006a74 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8006a72:	2302      	movs	r3, #2
  }
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	08008669 	.word	0x08008669
 8006a84:	08008561 	.word	0x08008561
 8006a88:	080084b5 	.word	0x080084b5
 8006a8c:	0800840b 	.word	0x0800840b

08006a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d118      	bne.n	8006af0 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d013      	beq.n	8006af0 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 812e 	beq.w	8006d42 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
      }
      return;
 8006aee:	e128      	b.n	8006d42 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 80d1 	beq.w	8006c9a <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4b96      	ldr	r3, [pc, #600]	; (8006d54 <HAL_UART_IRQHandler+0x2c4>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d105      	bne.n	8006b0e <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80c6 	beq.w	8006c9a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d010      	beq.n	8006b3a <HAL_UART_IRQHandler+0xaa>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2201      	movs	r2, #1
 8006b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f043 0201 	orr.w	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d010      	beq.n	8006b66 <HAL_UART_IRQHandler+0xd6>
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2202      	movs	r2, #2
 8006b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5c:	f043 0204 	orr.w	r2, r3, #4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d010      	beq.n	8006b92 <HAL_UART_IRQHandler+0x102>
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b88:	f043 0202 	orr.w	r2, r3, #2
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	f003 0308 	and.w	r3, r3, #8
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d015      	beq.n	8006bc8 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d104      	bne.n	8006bb0 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <HAL_UART_IRQHandler+0x2c4>)
 8006baa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bbe:	f043 0208 	orr.w	r2, r3, #8
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 80b9 	beq.w	8006d46 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d011      	beq.n	8006c02 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d004      	beq.n	8006c22 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d031      	beq.n	8006c86 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fb9e 	bl	8008364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c32:	2b40      	cmp	r3, #64	; 0x40
 8006c34:	d123      	bne.n	8006c7e <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d013      	beq.n	8006c76 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c52:	4a41      	ldr	r2, [pc, #260]	; (8006d58 <HAL_UART_IRQHandler+0x2c8>)
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fc fc81 	bl	8003562 <HAL_DMA_Abort_IT>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d017      	beq.n	8006c96 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006c70:	4610      	mov	r0, r2
 8006c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	e00f      	b.n	8006c96 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f87a 	bl	8006d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7c:	e00b      	b.n	8006c96 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f876 	bl	8006d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c84:	e007      	b.n	8006c96 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f872 	bl	8006d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006c94:	e057      	b.n	8006d46 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c96:	bf00      	nop
    return;
 8006c98:	e055      	b.n	8006d46 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00d      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x230>
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 fd59 	bl	8008770 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cbe:	e045      	b.n	8006d4c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d012      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d031      	beq.n	8006d4a <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
    }
    return;
 8006cee:	e02c      	b.n	8006d4a <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <HAL_UART_IRQHandler+0x27c>
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 fb66 	bl	80083d6 <UART_EndTransmit_IT>
    return;
 8006d0a:	e01f      	b.n	8006d4c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d008      	beq.n	8006d28 <HAL_UART_IRQHandler+0x298>
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fd39 	bl	8008798 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d26:	e011      	b.n	8006d4c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00c      	beq.n	8006d4c <HAL_UART_IRQHandler+0x2bc>
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da09      	bge.n	8006d4c <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fd23 	bl	8008784 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d3e:	bf00      	nop
 8006d40:	e004      	b.n	8006d4c <HAL_UART_IRQHandler+0x2bc>
      return;
 8006d42:	bf00      	nop
 8006d44:	e002      	b.n	8006d4c <HAL_UART_IRQHandler+0x2bc>
    return;
 8006d46:	bf00      	nop
 8006d48:	e000      	b.n	8006d4c <HAL_UART_IRQHandler+0x2bc>
    return;
 8006d4a:	bf00      	nop
  }
}
 8006d4c:	3720      	adds	r7, #32
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	10000001 	.word	0x10000001
 8006d58:	080083ab 	.word	0x080083ab

08006d5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	0000      	movs	r0, r0
	...

08006d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006d8c:	b08a      	sub	sp, #40	; 0x28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4ba4      	ldr	r3, [pc, #656]	; (8007058 <UART_SetConfig+0x2d0>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a99      	ldr	r2, [pc, #612]	; (800705c <UART_SetConfig+0x2d4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e00:	4313      	orrs	r3, r2
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	f023 010f 	bic.w	r1, r3, #15
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a8a      	ldr	r2, [pc, #552]	; (8007060 <UART_SetConfig+0x2d8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d126      	bne.n	8006e8a <UART_SetConfig+0x102>
 8006e3c:	4b89      	ldr	r3, [pc, #548]	; (8007064 <UART_SetConfig+0x2dc>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d81a      	bhi.n	8006e80 <UART_SetConfig+0xf8>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <UART_SetConfig+0xc8>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e66:	e0d6      	b.n	8007016 <UART_SetConfig+0x28e>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e6e:	e0d2      	b.n	8007016 <UART_SetConfig+0x28e>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e76:	e0ce      	b.n	8007016 <UART_SetConfig+0x28e>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7e:	e0ca      	b.n	8007016 <UART_SetConfig+0x28e>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e86:	bf00      	nop
 8006e88:	e0c5      	b.n	8007016 <UART_SetConfig+0x28e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a76      	ldr	r2, [pc, #472]	; (8007068 <UART_SetConfig+0x2e0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d138      	bne.n	8006f06 <UART_SetConfig+0x17e>
 8006e94:	4b73      	ldr	r3, [pc, #460]	; (8007064 <UART_SetConfig+0x2dc>)
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9a:	f003 030c 	and.w	r3, r3, #12
 8006e9e:	2b0c      	cmp	r3, #12
 8006ea0:	d82c      	bhi.n	8006efc <UART_SetConfig+0x174>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x120>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	08006efd 	.word	0x08006efd
 8006eb0:	08006efd 	.word	0x08006efd
 8006eb4:	08006efd 	.word	0x08006efd
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006efd 	.word	0x08006efd
 8006ec0:	08006efd 	.word	0x08006efd
 8006ec4:	08006efd 	.word	0x08006efd
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006efd 	.word	0x08006efd
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ee2:	e098      	b.n	8007016 <UART_SetConfig+0x28e>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eea:	e094      	b.n	8007016 <UART_SetConfig+0x28e>
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef2:	e090      	b.n	8007016 <UART_SetConfig+0x28e>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efa:	e08c      	b.n	8007016 <UART_SetConfig+0x28e>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f02:	bf00      	nop
 8006f04:	e087      	b.n	8007016 <UART_SetConfig+0x28e>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a58      	ldr	r2, [pc, #352]	; (800706c <UART_SetConfig+0x2e4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d125      	bne.n	8006f5c <UART_SetConfig+0x1d4>
 8006f10:	4b54      	ldr	r3, [pc, #336]	; (8007064 <UART_SetConfig+0x2dc>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f1a:	2b10      	cmp	r3, #16
 8006f1c:	d011      	beq.n	8006f42 <UART_SetConfig+0x1ba>
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	d802      	bhi.n	8006f28 <UART_SetConfig+0x1a0>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <UART_SetConfig+0x1aa>
 8006f26:	e014      	b.n	8006f52 <UART_SetConfig+0x1ca>
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d006      	beq.n	8006f3a <UART_SetConfig+0x1b2>
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d00c      	beq.n	8006f4a <UART_SetConfig+0x1c2>
 8006f30:	e00f      	b.n	8006f52 <UART_SetConfig+0x1ca>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f38:	e06d      	b.n	8007016 <UART_SetConfig+0x28e>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f40:	e069      	b.n	8007016 <UART_SetConfig+0x28e>
 8006f42:	2304      	movs	r3, #4
 8006f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f48:	e065      	b.n	8007016 <UART_SetConfig+0x28e>
 8006f4a:	2308      	movs	r3, #8
 8006f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f50:	e061      	b.n	8007016 <UART_SetConfig+0x28e>
 8006f52:	2310      	movs	r3, #16
 8006f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f58:	bf00      	nop
 8006f5a:	e05c      	b.n	8007016 <UART_SetConfig+0x28e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a43      	ldr	r2, [pc, #268]	; (8007070 <UART_SetConfig+0x2e8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d125      	bne.n	8006fb2 <UART_SetConfig+0x22a>
 8006f66:	4b3f      	ldr	r3, [pc, #252]	; (8007064 <UART_SetConfig+0x2dc>)
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f70:	2b40      	cmp	r3, #64	; 0x40
 8006f72:	d011      	beq.n	8006f98 <UART_SetConfig+0x210>
 8006f74:	2b40      	cmp	r3, #64	; 0x40
 8006f76:	d802      	bhi.n	8006f7e <UART_SetConfig+0x1f6>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <UART_SetConfig+0x200>
 8006f7c:	e014      	b.n	8006fa8 <UART_SetConfig+0x220>
 8006f7e:	2b80      	cmp	r3, #128	; 0x80
 8006f80:	d006      	beq.n	8006f90 <UART_SetConfig+0x208>
 8006f82:	2bc0      	cmp	r3, #192	; 0xc0
 8006f84:	d00c      	beq.n	8006fa0 <UART_SetConfig+0x218>
 8006f86:	e00f      	b.n	8006fa8 <UART_SetConfig+0x220>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f8e:	e042      	b.n	8007016 <UART_SetConfig+0x28e>
 8006f90:	2302      	movs	r3, #2
 8006f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f96:	e03e      	b.n	8007016 <UART_SetConfig+0x28e>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f9e:	e03a      	b.n	8007016 <UART_SetConfig+0x28e>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa6:	e036      	b.n	8007016 <UART_SetConfig+0x28e>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fae:	bf00      	nop
 8006fb0:	e031      	b.n	8007016 <UART_SetConfig+0x28e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a29      	ldr	r2, [pc, #164]	; (800705c <UART_SetConfig+0x2d4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d129      	bne.n	8007010 <UART_SetConfig+0x288>
 8006fbc:	4b29      	ldr	r3, [pc, #164]	; (8007064 <UART_SetConfig+0x2dc>)
 8006fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fca:	d014      	beq.n	8006ff6 <UART_SetConfig+0x26e>
 8006fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd0:	d802      	bhi.n	8006fd8 <UART_SetConfig+0x250>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <UART_SetConfig+0x25e>
 8006fd6:	e016      	b.n	8007006 <UART_SetConfig+0x27e>
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fdc:	d007      	beq.n	8006fee <UART_SetConfig+0x266>
 8006fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fe2:	d00c      	beq.n	8006ffe <UART_SetConfig+0x276>
 8006fe4:	e00f      	b.n	8007006 <UART_SetConfig+0x27e>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fec:	e013      	b.n	8007016 <UART_SetConfig+0x28e>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff4:	e00f      	b.n	8007016 <UART_SetConfig+0x28e>
 8006ff6:	2304      	movs	r3, #4
 8006ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffc:	e00b      	b.n	8007016 <UART_SetConfig+0x28e>
 8006ffe:	2308      	movs	r3, #8
 8007000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007004:	e007      	b.n	8007016 <UART_SetConfig+0x28e>
 8007006:	2310      	movs	r3, #16
 8007008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800700c:	bf00      	nop
 800700e:	e002      	b.n	8007016 <UART_SetConfig+0x28e>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a10      	ldr	r2, [pc, #64]	; (800705c <UART_SetConfig+0x2d4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	f040 842e 	bne.w	800787e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007026:	2b08      	cmp	r3, #8
 8007028:	f200 8169 	bhi.w	80072fe <UART_SetConfig+0x576>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <UART_SetConfig+0x2ac>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007075 	.word	0x08007075
 8007038:	080072ff 	.word	0x080072ff
 800703c:	08007117 	.word	0x08007117
 8007040:	080072ff 	.word	0x080072ff
 8007044:	080071af 	.word	0x080071af
 8007048:	080072ff 	.word	0x080072ff
 800704c:	080072ff 	.word	0x080072ff
 8007050:	080072ff 	.word	0x080072ff
 8007054:	08007251 	.word	0x08007251
 8007058:	cfff69f3 	.word	0xcfff69f3
 800705c:	40008000 	.word	0x40008000
 8007060:	40013800 	.word	0x40013800
 8007064:	40021000 	.word	0x40021000
 8007068:	40004400 	.word	0x40004400
 800706c:	40004800 	.word	0x40004800
 8007070:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007074:	f7fd fdd2 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8007078:	4602      	mov	r2, r0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d044      	beq.n	800710c <UART_SetConfig+0x384>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	2b01      	cmp	r3, #1
 8007088:	d03e      	beq.n	8007108 <UART_SetConfig+0x380>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	2b02      	cmp	r3, #2
 8007090:	d038      	beq.n	8007104 <UART_SetConfig+0x37c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	2b03      	cmp	r3, #3
 8007098:	d032      	beq.n	8007100 <UART_SetConfig+0x378>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d02c      	beq.n	80070fc <UART_SetConfig+0x374>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	2b05      	cmp	r3, #5
 80070a8:	d026      	beq.n	80070f8 <UART_SetConfig+0x370>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2b06      	cmp	r3, #6
 80070b0:	d020      	beq.n	80070f4 <UART_SetConfig+0x36c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	2b07      	cmp	r3, #7
 80070b8:	d01a      	beq.n	80070f0 <UART_SetConfig+0x368>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d014      	beq.n	80070ec <UART_SetConfig+0x364>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d00e      	beq.n	80070e8 <UART_SetConfig+0x360>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	2b0a      	cmp	r3, #10
 80070d0:	d008      	beq.n	80070e4 <UART_SetConfig+0x35c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	2b0b      	cmp	r3, #11
 80070d8:	d102      	bne.n	80070e0 <UART_SetConfig+0x358>
 80070da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070de:	e016      	b.n	800710e <UART_SetConfig+0x386>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e014      	b.n	800710e <UART_SetConfig+0x386>
 80070e4:	2380      	movs	r3, #128	; 0x80
 80070e6:	e012      	b.n	800710e <UART_SetConfig+0x386>
 80070e8:	2340      	movs	r3, #64	; 0x40
 80070ea:	e010      	b.n	800710e <UART_SetConfig+0x386>
 80070ec:	2320      	movs	r3, #32
 80070ee:	e00e      	b.n	800710e <UART_SetConfig+0x386>
 80070f0:	2310      	movs	r3, #16
 80070f2:	e00c      	b.n	800710e <UART_SetConfig+0x386>
 80070f4:	230c      	movs	r3, #12
 80070f6:	e00a      	b.n	800710e <UART_SetConfig+0x386>
 80070f8:	230a      	movs	r3, #10
 80070fa:	e008      	b.n	800710e <UART_SetConfig+0x386>
 80070fc:	2308      	movs	r3, #8
 80070fe:	e006      	b.n	800710e <UART_SetConfig+0x386>
 8007100:	2306      	movs	r3, #6
 8007102:	e004      	b.n	800710e <UART_SetConfig+0x386>
 8007104:	2304      	movs	r3, #4
 8007106:	e002      	b.n	800710e <UART_SetConfig+0x386>
 8007108:	2302      	movs	r3, #2
 800710a:	e000      	b.n	800710e <UART_SetConfig+0x386>
 800710c:	2301      	movs	r3, #1
 800710e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007112:	617b      	str	r3, [r7, #20]
        break;
 8007114:	e0f6      	b.n	8007304 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	2b00      	cmp	r3, #0
 800711c:	d044      	beq.n	80071a8 <UART_SetConfig+0x420>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b01      	cmp	r3, #1
 8007124:	d03e      	beq.n	80071a4 <UART_SetConfig+0x41c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b02      	cmp	r3, #2
 800712c:	d038      	beq.n	80071a0 <UART_SetConfig+0x418>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	2b03      	cmp	r3, #3
 8007134:	d032      	beq.n	800719c <UART_SetConfig+0x414>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	2b04      	cmp	r3, #4
 800713c:	d02c      	beq.n	8007198 <UART_SetConfig+0x410>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	2b05      	cmp	r3, #5
 8007144:	d026      	beq.n	8007194 <UART_SetConfig+0x40c>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	2b06      	cmp	r3, #6
 800714c:	d020      	beq.n	8007190 <UART_SetConfig+0x408>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	2b07      	cmp	r3, #7
 8007154:	d01a      	beq.n	800718c <UART_SetConfig+0x404>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	2b08      	cmp	r3, #8
 800715c:	d014      	beq.n	8007188 <UART_SetConfig+0x400>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2b09      	cmp	r3, #9
 8007164:	d00e      	beq.n	8007184 <UART_SetConfig+0x3fc>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	2b0a      	cmp	r3, #10
 800716c:	d008      	beq.n	8007180 <UART_SetConfig+0x3f8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	2b0b      	cmp	r3, #11
 8007174:	d102      	bne.n	800717c <UART_SetConfig+0x3f4>
 8007176:	f24f 4324 	movw	r3, #62500	; 0xf424
 800717a:	e016      	b.n	80071aa <UART_SetConfig+0x422>
 800717c:	4ba1      	ldr	r3, [pc, #644]	; (8007404 <UART_SetConfig+0x67c>)
 800717e:	e014      	b.n	80071aa <UART_SetConfig+0x422>
 8007180:	4ba1      	ldr	r3, [pc, #644]	; (8007408 <UART_SetConfig+0x680>)
 8007182:	e012      	b.n	80071aa <UART_SetConfig+0x422>
 8007184:	4ba1      	ldr	r3, [pc, #644]	; (800740c <UART_SetConfig+0x684>)
 8007186:	e010      	b.n	80071aa <UART_SetConfig+0x422>
 8007188:	4ba1      	ldr	r3, [pc, #644]	; (8007410 <UART_SetConfig+0x688>)
 800718a:	e00e      	b.n	80071aa <UART_SetConfig+0x422>
 800718c:	4ba1      	ldr	r3, [pc, #644]	; (8007414 <UART_SetConfig+0x68c>)
 800718e:	e00c      	b.n	80071aa <UART_SetConfig+0x422>
 8007190:	4ba1      	ldr	r3, [pc, #644]	; (8007418 <UART_SetConfig+0x690>)
 8007192:	e00a      	b.n	80071aa <UART_SetConfig+0x422>
 8007194:	4ba1      	ldr	r3, [pc, #644]	; (800741c <UART_SetConfig+0x694>)
 8007196:	e008      	b.n	80071aa <UART_SetConfig+0x422>
 8007198:	4ba1      	ldr	r3, [pc, #644]	; (8007420 <UART_SetConfig+0x698>)
 800719a:	e006      	b.n	80071aa <UART_SetConfig+0x422>
 800719c:	4ba1      	ldr	r3, [pc, #644]	; (8007424 <UART_SetConfig+0x69c>)
 800719e:	e004      	b.n	80071aa <UART_SetConfig+0x422>
 80071a0:	4ba1      	ldr	r3, [pc, #644]	; (8007428 <UART_SetConfig+0x6a0>)
 80071a2:	e002      	b.n	80071aa <UART_SetConfig+0x422>
 80071a4:	4ba1      	ldr	r3, [pc, #644]	; (800742c <UART_SetConfig+0x6a4>)
 80071a6:	e000      	b.n	80071aa <UART_SetConfig+0x422>
 80071a8:	4b96      	ldr	r3, [pc, #600]	; (8007404 <UART_SetConfig+0x67c>)
 80071aa:	617b      	str	r3, [r7, #20]
        break;
 80071ac:	e0aa      	b.n	8007304 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071ae:	f7fd fcc7 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 80071b2:	4602      	mov	r2, r0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d044      	beq.n	8007246 <UART_SetConfig+0x4be>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d03e      	beq.n	8007242 <UART_SetConfig+0x4ba>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d038      	beq.n	800723e <UART_SetConfig+0x4b6>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d032      	beq.n	800723a <UART_SetConfig+0x4b2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d02c      	beq.n	8007236 <UART_SetConfig+0x4ae>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	2b05      	cmp	r3, #5
 80071e2:	d026      	beq.n	8007232 <UART_SetConfig+0x4aa>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	2b06      	cmp	r3, #6
 80071ea:	d020      	beq.n	800722e <UART_SetConfig+0x4a6>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	2b07      	cmp	r3, #7
 80071f2:	d01a      	beq.n	800722a <UART_SetConfig+0x4a2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d014      	beq.n	8007226 <UART_SetConfig+0x49e>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	2b09      	cmp	r3, #9
 8007202:	d00e      	beq.n	8007222 <UART_SetConfig+0x49a>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	2b0a      	cmp	r3, #10
 800720a:	d008      	beq.n	800721e <UART_SetConfig+0x496>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	2b0b      	cmp	r3, #11
 8007212:	d102      	bne.n	800721a <UART_SetConfig+0x492>
 8007214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007218:	e016      	b.n	8007248 <UART_SetConfig+0x4c0>
 800721a:	2301      	movs	r3, #1
 800721c:	e014      	b.n	8007248 <UART_SetConfig+0x4c0>
 800721e:	2380      	movs	r3, #128	; 0x80
 8007220:	e012      	b.n	8007248 <UART_SetConfig+0x4c0>
 8007222:	2340      	movs	r3, #64	; 0x40
 8007224:	e010      	b.n	8007248 <UART_SetConfig+0x4c0>
 8007226:	2320      	movs	r3, #32
 8007228:	e00e      	b.n	8007248 <UART_SetConfig+0x4c0>
 800722a:	2310      	movs	r3, #16
 800722c:	e00c      	b.n	8007248 <UART_SetConfig+0x4c0>
 800722e:	230c      	movs	r3, #12
 8007230:	e00a      	b.n	8007248 <UART_SetConfig+0x4c0>
 8007232:	230a      	movs	r3, #10
 8007234:	e008      	b.n	8007248 <UART_SetConfig+0x4c0>
 8007236:	2308      	movs	r3, #8
 8007238:	e006      	b.n	8007248 <UART_SetConfig+0x4c0>
 800723a:	2306      	movs	r3, #6
 800723c:	e004      	b.n	8007248 <UART_SetConfig+0x4c0>
 800723e:	2304      	movs	r3, #4
 8007240:	e002      	b.n	8007248 <UART_SetConfig+0x4c0>
 8007242:	2302      	movs	r3, #2
 8007244:	e000      	b.n	8007248 <UART_SetConfig+0x4c0>
 8007246:	2301      	movs	r3, #1
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	617b      	str	r3, [r7, #20]
        break;
 800724e:	e059      	b.n	8007304 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	d04e      	beq.n	80072f6 <UART_SetConfig+0x56e>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	2b01      	cmp	r3, #1
 800725e:	d047      	beq.n	80072f0 <UART_SetConfig+0x568>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2b02      	cmp	r3, #2
 8007266:	d040      	beq.n	80072ea <UART_SetConfig+0x562>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	2b03      	cmp	r3, #3
 800726e:	d039      	beq.n	80072e4 <UART_SetConfig+0x55c>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b04      	cmp	r3, #4
 8007276:	d032      	beq.n	80072de <UART_SetConfig+0x556>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	2b05      	cmp	r3, #5
 800727e:	d02b      	beq.n	80072d8 <UART_SetConfig+0x550>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b06      	cmp	r3, #6
 8007286:	d024      	beq.n	80072d2 <UART_SetConfig+0x54a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	2b07      	cmp	r3, #7
 800728e:	d01d      	beq.n	80072cc <UART_SetConfig+0x544>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	2b08      	cmp	r3, #8
 8007296:	d016      	beq.n	80072c6 <UART_SetConfig+0x53e>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	2b09      	cmp	r3, #9
 800729e:	d00f      	beq.n	80072c0 <UART_SetConfig+0x538>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	2b0a      	cmp	r3, #10
 80072a6:	d008      	beq.n	80072ba <UART_SetConfig+0x532>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b0b      	cmp	r3, #11
 80072ae:	d101      	bne.n	80072b4 <UART_SetConfig+0x52c>
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	e022      	b.n	80072fa <UART_SetConfig+0x572>
 80072b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072b8:	e01f      	b.n	80072fa <UART_SetConfig+0x572>
 80072ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072be:	e01c      	b.n	80072fa <UART_SetConfig+0x572>
 80072c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072c4:	e019      	b.n	80072fa <UART_SetConfig+0x572>
 80072c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ca:	e016      	b.n	80072fa <UART_SetConfig+0x572>
 80072cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072d0:	e013      	b.n	80072fa <UART_SetConfig+0x572>
 80072d2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80072d6:	e010      	b.n	80072fa <UART_SetConfig+0x572>
 80072d8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80072dc:	e00d      	b.n	80072fa <UART_SetConfig+0x572>
 80072de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072e2:	e00a      	b.n	80072fa <UART_SetConfig+0x572>
 80072e4:	f241 5355 	movw	r3, #5461	; 0x1555
 80072e8:	e007      	b.n	80072fa <UART_SetConfig+0x572>
 80072ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072ee:	e004      	b.n	80072fa <UART_SetConfig+0x572>
 80072f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072f4:	e001      	b.n	80072fa <UART_SetConfig+0x572>
 80072f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072fa:	617b      	str	r3, [r7, #20]
        break;
 80072fc:	e002      	b.n	8007304 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	76fb      	strb	r3, [r7, #27]
        break;
 8007302:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 86cd 	beq.w	80080a6 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	429a      	cmp	r2, r3
 800731a:	d305      	bcc.n	8007328 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	429a      	cmp	r2, r3
 8007326:	d903      	bls.n	8007330 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	76fb      	strb	r3, [r7, #27]
 800732c:	f000 bebb 	b.w	80080a6 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8007330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007334:	2b08      	cmp	r3, #8
 8007336:	f200 828d 	bhi.w	8007854 <UART_SetConfig+0xacc>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <UART_SetConfig+0x5b8>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007365 	.word	0x08007365
 8007344:	08007855 	.word	0x08007855
 8007348:	080074cf 	.word	0x080074cf
 800734c:	08007855 	.word	0x08007855
 8007350:	080075c5 	.word	0x080075c5
 8007354:	08007855 	.word	0x08007855
 8007358:	08007855 	.word	0x08007855
 800735c:	08007855 	.word	0x08007855
 8007360:	08007703 	.word	0x08007703
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007364:	f7fd fc5a 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8007368:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	4618      	mov	r0, r3
 800736e:	f04f 0100 	mov.w	r1, #0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	2b00      	cmp	r3, #0
 8007378:	d07d      	beq.n	8007476 <UART_SetConfig+0x6ee>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	2b01      	cmp	r3, #1
 8007380:	d074      	beq.n	800746c <UART_SetConfig+0x6e4>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b02      	cmp	r3, #2
 8007388:	d06b      	beq.n	8007462 <UART_SetConfig+0x6da>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b03      	cmp	r3, #3
 8007390:	d062      	beq.n	8007458 <UART_SetConfig+0x6d0>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b04      	cmp	r3, #4
 8007398:	d059      	beq.n	800744e <UART_SetConfig+0x6c6>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b05      	cmp	r3, #5
 80073a0:	d050      	beq.n	8007444 <UART_SetConfig+0x6bc>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b06      	cmp	r3, #6
 80073a8:	d047      	beq.n	800743a <UART_SetConfig+0x6b2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b07      	cmp	r3, #7
 80073b0:	d03e      	beq.n	8007430 <UART_SetConfig+0x6a8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d01f      	beq.n	80073fa <UART_SetConfig+0x672>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b09      	cmp	r3, #9
 80073c0:	d016      	beq.n	80073f0 <UART_SetConfig+0x668>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	2b0a      	cmp	r3, #10
 80073c8:	d00d      	beq.n	80073e6 <UART_SetConfig+0x65e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2b0b      	cmp	r3, #11
 80073d0:	d104      	bne.n	80073dc <UART_SetConfig+0x654>
 80073d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073d6:	f04f 0400 	mov.w	r4, #0
 80073da:	e050      	b.n	800747e <UART_SetConfig+0x6f6>
 80073dc:	f04f 0301 	mov.w	r3, #1
 80073e0:	f04f 0400 	mov.w	r4, #0
 80073e4:	e04b      	b.n	800747e <UART_SetConfig+0x6f6>
 80073e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073ea:	f04f 0400 	mov.w	r4, #0
 80073ee:	e046      	b.n	800747e <UART_SetConfig+0x6f6>
 80073f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80073f4:	f04f 0400 	mov.w	r4, #0
 80073f8:	e041      	b.n	800747e <UART_SetConfig+0x6f6>
 80073fa:	f04f 0320 	mov.w	r3, #32
 80073fe:	f04f 0400 	mov.w	r4, #0
 8007402:	e03c      	b.n	800747e <UART_SetConfig+0x6f6>
 8007404:	00f42400 	.word	0x00f42400
 8007408:	0001e848 	.word	0x0001e848
 800740c:	0003d090 	.word	0x0003d090
 8007410:	0007a120 	.word	0x0007a120
 8007414:	000f4240 	.word	0x000f4240
 8007418:	00145855 	.word	0x00145855
 800741c:	00186a00 	.word	0x00186a00
 8007420:	001e8480 	.word	0x001e8480
 8007424:	0028b0aa 	.word	0x0028b0aa
 8007428:	003d0900 	.word	0x003d0900
 800742c:	007a1200 	.word	0x007a1200
 8007430:	f04f 0310 	mov.w	r3, #16
 8007434:	f04f 0400 	mov.w	r4, #0
 8007438:	e021      	b.n	800747e <UART_SetConfig+0x6f6>
 800743a:	f04f 030c 	mov.w	r3, #12
 800743e:	f04f 0400 	mov.w	r4, #0
 8007442:	e01c      	b.n	800747e <UART_SetConfig+0x6f6>
 8007444:	f04f 030a 	mov.w	r3, #10
 8007448:	f04f 0400 	mov.w	r4, #0
 800744c:	e017      	b.n	800747e <UART_SetConfig+0x6f6>
 800744e:	f04f 0308 	mov.w	r3, #8
 8007452:	f04f 0400 	mov.w	r4, #0
 8007456:	e012      	b.n	800747e <UART_SetConfig+0x6f6>
 8007458:	f04f 0306 	mov.w	r3, #6
 800745c:	f04f 0400 	mov.w	r4, #0
 8007460:	e00d      	b.n	800747e <UART_SetConfig+0x6f6>
 8007462:	f04f 0304 	mov.w	r3, #4
 8007466:	f04f 0400 	mov.w	r4, #0
 800746a:	e008      	b.n	800747e <UART_SetConfig+0x6f6>
 800746c:	f04f 0302 	mov.w	r3, #2
 8007470:	f04f 0400 	mov.w	r4, #0
 8007474:	e003      	b.n	800747e <UART_SetConfig+0x6f6>
 8007476:	f04f 0301 	mov.w	r3, #1
 800747a:	f04f 0400 	mov.w	r4, #0
 800747e:	461a      	mov	r2, r3
 8007480:	4623      	mov	r3, r4
 8007482:	f7f8 fec9 	bl	8000218 <__aeabi_uldivmod>
 8007486:	4603      	mov	r3, r0
 8007488:	460c      	mov	r4, r1
 800748a:	4619      	mov	r1, r3
 800748c:	4622      	mov	r2, r4
 800748e:	f04f 0300 	mov.w	r3, #0
 8007492:	f04f 0400 	mov.w	r4, #0
 8007496:	0214      	lsls	r4, r2, #8
 8007498:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800749c:	020b      	lsls	r3, r1, #8
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6852      	ldr	r2, [r2, #4]
 80074a2:	0852      	lsrs	r2, r2, #1
 80074a4:	4611      	mov	r1, r2
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	eb13 0b01 	adds.w	fp, r3, r1
 80074ae:	eb44 0c02 	adc.w	ip, r4, r2
 80074b2:	4658      	mov	r0, fp
 80074b4:	4661      	mov	r1, ip
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f04f 0400 	mov.w	r4, #0
 80074be:	461a      	mov	r2, r3
 80074c0:	4623      	mov	r3, r4
 80074c2:	f7f8 fea9 	bl	8000218 <__aeabi_uldivmod>
 80074c6:	4603      	mov	r3, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	61fb      	str	r3, [r7, #28]
            break;
 80074cc:	e1c5      	b.n	800785a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d05b      	beq.n	800758e <UART_SetConfig+0x806>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d053      	beq.n	8007586 <UART_SetConfig+0x7fe>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d04b      	beq.n	800757e <UART_SetConfig+0x7f6>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d043      	beq.n	8007576 <UART_SetConfig+0x7ee>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d03b      	beq.n	800756e <UART_SetConfig+0x7e6>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	d033      	beq.n	8007566 <UART_SetConfig+0x7de>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	2b06      	cmp	r3, #6
 8007504:	d02b      	beq.n	800755e <UART_SetConfig+0x7d6>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	2b07      	cmp	r3, #7
 800750c:	d023      	beq.n	8007556 <UART_SetConfig+0x7ce>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b08      	cmp	r3, #8
 8007514:	d01b      	beq.n	800754e <UART_SetConfig+0x7c6>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	2b09      	cmp	r3, #9
 800751c:	d013      	beq.n	8007546 <UART_SetConfig+0x7be>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b0a      	cmp	r3, #10
 8007524:	d00b      	beq.n	800753e <UART_SetConfig+0x7b6>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	2b0b      	cmp	r3, #11
 800752c:	d103      	bne.n	8007536 <UART_SetConfig+0x7ae>
 800752e:	4bae      	ldr	r3, [pc, #696]	; (80077e8 <UART_SetConfig+0xa60>)
 8007530:	f04f 0400 	mov.w	r4, #0
 8007534:	e02e      	b.n	8007594 <UART_SetConfig+0x80c>
 8007536:	4bad      	ldr	r3, [pc, #692]	; (80077ec <UART_SetConfig+0xa64>)
 8007538:	f04f 0400 	mov.w	r4, #0
 800753c:	e02a      	b.n	8007594 <UART_SetConfig+0x80c>
 800753e:	4bac      	ldr	r3, [pc, #688]	; (80077f0 <UART_SetConfig+0xa68>)
 8007540:	f04f 0400 	mov.w	r4, #0
 8007544:	e026      	b.n	8007594 <UART_SetConfig+0x80c>
 8007546:	4bab      	ldr	r3, [pc, #684]	; (80077f4 <UART_SetConfig+0xa6c>)
 8007548:	f04f 0400 	mov.w	r4, #0
 800754c:	e022      	b.n	8007594 <UART_SetConfig+0x80c>
 800754e:	4baa      	ldr	r3, [pc, #680]	; (80077f8 <UART_SetConfig+0xa70>)
 8007550:	f04f 0400 	mov.w	r4, #0
 8007554:	e01e      	b.n	8007594 <UART_SetConfig+0x80c>
 8007556:	4ba9      	ldr	r3, [pc, #676]	; (80077fc <UART_SetConfig+0xa74>)
 8007558:	f04f 0400 	mov.w	r4, #0
 800755c:	e01a      	b.n	8007594 <UART_SetConfig+0x80c>
 800755e:	a49e      	add	r4, pc, #632	; (adr r4, 80077d8 <UART_SetConfig+0xa50>)
 8007560:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007564:	e016      	b.n	8007594 <UART_SetConfig+0x80c>
 8007566:	4ba6      	ldr	r3, [pc, #664]	; (8007800 <UART_SetConfig+0xa78>)
 8007568:	f04f 0400 	mov.w	r4, #0
 800756c:	e012      	b.n	8007594 <UART_SetConfig+0x80c>
 800756e:	4ba5      	ldr	r3, [pc, #660]	; (8007804 <UART_SetConfig+0xa7c>)
 8007570:	f04f 0400 	mov.w	r4, #0
 8007574:	e00e      	b.n	8007594 <UART_SetConfig+0x80c>
 8007576:	a49a      	add	r4, pc, #616	; (adr r4, 80077e0 <UART_SetConfig+0xa58>)
 8007578:	e9d4 3400 	ldrd	r3, r4, [r4]
 800757c:	e00a      	b.n	8007594 <UART_SetConfig+0x80c>
 800757e:	4ba2      	ldr	r3, [pc, #648]	; (8007808 <UART_SetConfig+0xa80>)
 8007580:	f04f 0400 	mov.w	r4, #0
 8007584:	e006      	b.n	8007594 <UART_SetConfig+0x80c>
 8007586:	4ba1      	ldr	r3, [pc, #644]	; (800780c <UART_SetConfig+0xa84>)
 8007588:	f04f 0400 	mov.w	r4, #0
 800758c:	e002      	b.n	8007594 <UART_SetConfig+0x80c>
 800758e:	4b97      	ldr	r3, [pc, #604]	; (80077ec <UART_SetConfig+0xa64>)
 8007590:	f04f 0400 	mov.w	r4, #0
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6852      	ldr	r2, [r2, #4]
 8007598:	0852      	lsrs	r2, r2, #1
 800759a:	4611      	mov	r1, r2
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	eb13 0b01 	adds.w	fp, r3, r1
 80075a4:	eb44 0c02 	adc.w	ip, r4, r2
 80075a8:	4658      	mov	r0, fp
 80075aa:	4661      	mov	r1, ip
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f04f 0400 	mov.w	r4, #0
 80075b4:	461a      	mov	r2, r3
 80075b6:	4623      	mov	r3, r4
 80075b8:	f7f8 fe2e 	bl	8000218 <__aeabi_uldivmod>
 80075bc:	4603      	mov	r3, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	61fb      	str	r3, [r7, #28]
            break;
 80075c2:	e14a      	b.n	800785a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80075c4:	f7fd fabc 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 80075c8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f04f 0100 	mov.w	r1, #0
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d067      	beq.n	80076aa <UART_SetConfig+0x922>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d05e      	beq.n	80076a0 <UART_SetConfig+0x918>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d055      	beq.n	8007696 <UART_SetConfig+0x90e>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d04c      	beq.n	800768c <UART_SetConfig+0x904>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d043      	beq.n	8007682 <UART_SetConfig+0x8fa>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b05      	cmp	r3, #5
 8007600:	d03a      	beq.n	8007678 <UART_SetConfig+0x8f0>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	2b06      	cmp	r3, #6
 8007608:	d031      	beq.n	800766e <UART_SetConfig+0x8e6>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	2b07      	cmp	r3, #7
 8007610:	d028      	beq.n	8007664 <UART_SetConfig+0x8dc>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	2b08      	cmp	r3, #8
 8007618:	d01f      	beq.n	800765a <UART_SetConfig+0x8d2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2b09      	cmp	r3, #9
 8007620:	d016      	beq.n	8007650 <UART_SetConfig+0x8c8>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b0a      	cmp	r3, #10
 8007628:	d00d      	beq.n	8007646 <UART_SetConfig+0x8be>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b0b      	cmp	r3, #11
 8007630:	d104      	bne.n	800763c <UART_SetConfig+0x8b4>
 8007632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007636:	f04f 0400 	mov.w	r4, #0
 800763a:	e03a      	b.n	80076b2 <UART_SetConfig+0x92a>
 800763c:	f04f 0301 	mov.w	r3, #1
 8007640:	f04f 0400 	mov.w	r4, #0
 8007644:	e035      	b.n	80076b2 <UART_SetConfig+0x92a>
 8007646:	f04f 0380 	mov.w	r3, #128	; 0x80
 800764a:	f04f 0400 	mov.w	r4, #0
 800764e:	e030      	b.n	80076b2 <UART_SetConfig+0x92a>
 8007650:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007654:	f04f 0400 	mov.w	r4, #0
 8007658:	e02b      	b.n	80076b2 <UART_SetConfig+0x92a>
 800765a:	f04f 0320 	mov.w	r3, #32
 800765e:	f04f 0400 	mov.w	r4, #0
 8007662:	e026      	b.n	80076b2 <UART_SetConfig+0x92a>
 8007664:	f04f 0310 	mov.w	r3, #16
 8007668:	f04f 0400 	mov.w	r4, #0
 800766c:	e021      	b.n	80076b2 <UART_SetConfig+0x92a>
 800766e:	f04f 030c 	mov.w	r3, #12
 8007672:	f04f 0400 	mov.w	r4, #0
 8007676:	e01c      	b.n	80076b2 <UART_SetConfig+0x92a>
 8007678:	f04f 030a 	mov.w	r3, #10
 800767c:	f04f 0400 	mov.w	r4, #0
 8007680:	e017      	b.n	80076b2 <UART_SetConfig+0x92a>
 8007682:	f04f 0308 	mov.w	r3, #8
 8007686:	f04f 0400 	mov.w	r4, #0
 800768a:	e012      	b.n	80076b2 <UART_SetConfig+0x92a>
 800768c:	f04f 0306 	mov.w	r3, #6
 8007690:	f04f 0400 	mov.w	r4, #0
 8007694:	e00d      	b.n	80076b2 <UART_SetConfig+0x92a>
 8007696:	f04f 0304 	mov.w	r3, #4
 800769a:	f04f 0400 	mov.w	r4, #0
 800769e:	e008      	b.n	80076b2 <UART_SetConfig+0x92a>
 80076a0:	f04f 0302 	mov.w	r3, #2
 80076a4:	f04f 0400 	mov.w	r4, #0
 80076a8:	e003      	b.n	80076b2 <UART_SetConfig+0x92a>
 80076aa:	f04f 0301 	mov.w	r3, #1
 80076ae:	f04f 0400 	mov.w	r4, #0
 80076b2:	461a      	mov	r2, r3
 80076b4:	4623      	mov	r3, r4
 80076b6:	f7f8 fdaf 	bl	8000218 <__aeabi_uldivmod>
 80076ba:	4603      	mov	r3, r0
 80076bc:	460c      	mov	r4, r1
 80076be:	4619      	mov	r1, r3
 80076c0:	4622      	mov	r2, r4
 80076c2:	f04f 0300 	mov.w	r3, #0
 80076c6:	f04f 0400 	mov.w	r4, #0
 80076ca:	0214      	lsls	r4, r2, #8
 80076cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80076d0:	020b      	lsls	r3, r1, #8
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6852      	ldr	r2, [r2, #4]
 80076d6:	0852      	lsrs	r2, r2, #1
 80076d8:	4611      	mov	r1, r2
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	eb13 0b01 	adds.w	fp, r3, r1
 80076e2:	eb44 0c02 	adc.w	ip, r4, r2
 80076e6:	4658      	mov	r0, fp
 80076e8:	4661      	mov	r1, ip
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f04f 0400 	mov.w	r4, #0
 80076f2:	461a      	mov	r2, r3
 80076f4:	4623      	mov	r3, r4
 80076f6:	f7f8 fd8f 	bl	8000218 <__aeabi_uldivmod>
 80076fa:	4603      	mov	r3, r0
 80076fc:	460c      	mov	r4, r1
 80076fe:	61fb      	str	r3, [r7, #28]
            break;
 8007700:	e0ab      	b.n	800785a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 8088 	beq.w	800781c <UART_SetConfig+0xa94>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b01      	cmp	r3, #1
 8007712:	d05b      	beq.n	80077cc <UART_SetConfig+0xa44>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b02      	cmp	r3, #2
 800771a:	d052      	beq.n	80077c2 <UART_SetConfig+0xa3a>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b03      	cmp	r3, #3
 8007722:	d04a      	beq.n	80077ba <UART_SetConfig+0xa32>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b04      	cmp	r3, #4
 800772a:	d041      	beq.n	80077b0 <UART_SetConfig+0xa28>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b05      	cmp	r3, #5
 8007732:	d039      	beq.n	80077a8 <UART_SetConfig+0xa20>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b06      	cmp	r3, #6
 800773a:	d031      	beq.n	80077a0 <UART_SetConfig+0xa18>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b07      	cmp	r3, #7
 8007742:	d028      	beq.n	8007796 <UART_SetConfig+0xa0e>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b08      	cmp	r3, #8
 800774a:	d01f      	beq.n	800778c <UART_SetConfig+0xa04>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b09      	cmp	r3, #9
 8007752:	d016      	beq.n	8007782 <UART_SetConfig+0x9fa>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b0a      	cmp	r3, #10
 800775a:	d00d      	beq.n	8007778 <UART_SetConfig+0x9f0>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2b0b      	cmp	r3, #11
 8007762:	d104      	bne.n	800776e <UART_SetConfig+0x9e6>
 8007764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007768:	f04f 0400 	mov.w	r4, #0
 800776c:	e05a      	b.n	8007824 <UART_SetConfig+0xa9c>
 800776e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007772:	f04f 0400 	mov.w	r4, #0
 8007776:	e055      	b.n	8007824 <UART_SetConfig+0xa9c>
 8007778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800777c:	f04f 0400 	mov.w	r4, #0
 8007780:	e050      	b.n	8007824 <UART_SetConfig+0xa9c>
 8007782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007786:	f04f 0400 	mov.w	r4, #0
 800778a:	e04b      	b.n	8007824 <UART_SetConfig+0xa9c>
 800778c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007790:	f04f 0400 	mov.w	r4, #0
 8007794:	e046      	b.n	8007824 <UART_SetConfig+0xa9c>
 8007796:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800779a:	f04f 0400 	mov.w	r4, #0
 800779e:	e041      	b.n	8007824 <UART_SetConfig+0xa9c>
 80077a0:	4b1b      	ldr	r3, [pc, #108]	; (8007810 <UART_SetConfig+0xa88>)
 80077a2:	f04f 0400 	mov.w	r4, #0
 80077a6:	e03d      	b.n	8007824 <UART_SetConfig+0xa9c>
 80077a8:	4b1a      	ldr	r3, [pc, #104]	; (8007814 <UART_SetConfig+0xa8c>)
 80077aa:	f04f 0400 	mov.w	r4, #0
 80077ae:	e039      	b.n	8007824 <UART_SetConfig+0xa9c>
 80077b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80077b4:	f04f 0400 	mov.w	r4, #0
 80077b8:	e034      	b.n	8007824 <UART_SetConfig+0xa9c>
 80077ba:	4b17      	ldr	r3, [pc, #92]	; (8007818 <UART_SetConfig+0xa90>)
 80077bc:	f04f 0400 	mov.w	r4, #0
 80077c0:	e030      	b.n	8007824 <UART_SetConfig+0xa9c>
 80077c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	e02b      	b.n	8007824 <UART_SetConfig+0xa9c>
 80077cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80077d0:	f04f 0400 	mov.w	r4, #0
 80077d4:	e026      	b.n	8007824 <UART_SetConfig+0xa9c>
 80077d6:	bf00      	nop
 80077d8:	14585500 	.word	0x14585500
 80077dc:	00000000 	.word	0x00000000
 80077e0:	28b0aa00 	.word	0x28b0aa00
 80077e4:	00000000 	.word	0x00000000
 80077e8:	00f42400 	.word	0x00f42400
 80077ec:	f4240000 	.word	0xf4240000
 80077f0:	01e84800 	.word	0x01e84800
 80077f4:	03d09000 	.word	0x03d09000
 80077f8:	07a12000 	.word	0x07a12000
 80077fc:	0f424000 	.word	0x0f424000
 8007800:	186a0000 	.word	0x186a0000
 8007804:	1e848000 	.word	0x1e848000
 8007808:	3d090000 	.word	0x3d090000
 800780c:	7a120000 	.word	0x7a120000
 8007810:	000aaa00 	.word	0x000aaa00
 8007814:	000ccc00 	.word	0x000ccc00
 8007818:	00155500 	.word	0x00155500
 800781c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007820:	f04f 0400 	mov.w	r4, #0
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6852      	ldr	r2, [r2, #4]
 8007828:	0852      	lsrs	r2, r2, #1
 800782a:	4611      	mov	r1, r2
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	eb13 0b01 	adds.w	fp, r3, r1
 8007834:	eb44 0c02 	adc.w	ip, r4, r2
 8007838:	4658      	mov	r0, fp
 800783a:	4661      	mov	r1, ip
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f04f 0400 	mov.w	r4, #0
 8007844:	461a      	mov	r2, r3
 8007846:	4623      	mov	r3, r4
 8007848:	f7f8 fce6 	bl	8000218 <__aeabi_uldivmod>
 800784c:	4603      	mov	r3, r0
 800784e:	460c      	mov	r4, r1
 8007850:	61fb      	str	r3, [r7, #28]
            break;
 8007852:	e002      	b.n	800785a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	76fb      	strb	r3, [r7, #27]
            break;
 8007858:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007860:	d309      	bcc.n	8007876 <UART_SetConfig+0xaee>
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007868:	d205      	bcs.n	8007876 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	60da      	str	r2, [r3, #12]
 8007872:	f000 bc18 	b.w	80080a6 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	76fb      	strb	r3, [r7, #27]
 800787a:	f000 bc14 	b.w	80080a6 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007886:	f040 8204 	bne.w	8007c92 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800788a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800788e:	2b08      	cmp	r3, #8
 8007890:	f200 81df 	bhi.w	8007c52 <UART_SetConfig+0xeca>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <UART_SetConfig+0xb14>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078c1 	.word	0x080078c1
 80078a0:	08007979 	.word	0x08007979
 80078a4:	08007a31 	.word	0x08007a31
 80078a8:	08007c53 	.word	0x08007c53
 80078ac:	08007ad9 	.word	0x08007ad9
 80078b0:	08007c53 	.word	0x08007c53
 80078b4:	08007c53 	.word	0x08007c53
 80078b8:	08007c53 	.word	0x08007c53
 80078bc:	08007b91 	.word	0x08007b91
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c0:	f7fd f9ac 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80078c4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d044      	beq.n	8007958 <UART_SetConfig+0xbd0>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d03e      	beq.n	8007954 <UART_SetConfig+0xbcc>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d038      	beq.n	8007950 <UART_SetConfig+0xbc8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d032      	beq.n	800794c <UART_SetConfig+0xbc4>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d02c      	beq.n	8007948 <UART_SetConfig+0xbc0>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	2b05      	cmp	r3, #5
 80078f4:	d026      	beq.n	8007944 <UART_SetConfig+0xbbc>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d020      	beq.n	8007940 <UART_SetConfig+0xbb8>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	2b07      	cmp	r3, #7
 8007904:	d01a      	beq.n	800793c <UART_SetConfig+0xbb4>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	2b08      	cmp	r3, #8
 800790c:	d014      	beq.n	8007938 <UART_SetConfig+0xbb0>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	2b09      	cmp	r3, #9
 8007914:	d00e      	beq.n	8007934 <UART_SetConfig+0xbac>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	2b0a      	cmp	r3, #10
 800791c:	d008      	beq.n	8007930 <UART_SetConfig+0xba8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	2b0b      	cmp	r3, #11
 8007924:	d102      	bne.n	800792c <UART_SetConfig+0xba4>
 8007926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800792a:	e016      	b.n	800795a <UART_SetConfig+0xbd2>
 800792c:	2301      	movs	r3, #1
 800792e:	e014      	b.n	800795a <UART_SetConfig+0xbd2>
 8007930:	2380      	movs	r3, #128	; 0x80
 8007932:	e012      	b.n	800795a <UART_SetConfig+0xbd2>
 8007934:	2340      	movs	r3, #64	; 0x40
 8007936:	e010      	b.n	800795a <UART_SetConfig+0xbd2>
 8007938:	2320      	movs	r3, #32
 800793a:	e00e      	b.n	800795a <UART_SetConfig+0xbd2>
 800793c:	2310      	movs	r3, #16
 800793e:	e00c      	b.n	800795a <UART_SetConfig+0xbd2>
 8007940:	230c      	movs	r3, #12
 8007942:	e00a      	b.n	800795a <UART_SetConfig+0xbd2>
 8007944:	230a      	movs	r3, #10
 8007946:	e008      	b.n	800795a <UART_SetConfig+0xbd2>
 8007948:	2308      	movs	r3, #8
 800794a:	e006      	b.n	800795a <UART_SetConfig+0xbd2>
 800794c:	2306      	movs	r3, #6
 800794e:	e004      	b.n	800795a <UART_SetConfig+0xbd2>
 8007950:	2304      	movs	r3, #4
 8007952:	e002      	b.n	800795a <UART_SetConfig+0xbd2>
 8007954:	2302      	movs	r3, #2
 8007956:	e000      	b.n	800795a <UART_SetConfig+0xbd2>
 8007958:	2301      	movs	r3, #1
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007960:	005a      	lsls	r2, r3, #1
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	085b      	lsrs	r3, r3, #1
 8007968:	441a      	add	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007972:	b29b      	uxth	r3, r3
 8007974:	61fb      	str	r3, [r7, #28]
        break;
 8007976:	e16f      	b.n	8007c58 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007978:	f7fd f966 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 800797c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	2b00      	cmp	r3, #0
 8007984:	d044      	beq.n	8007a10 <UART_SetConfig+0xc88>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	2b01      	cmp	r3, #1
 800798c:	d03e      	beq.n	8007a0c <UART_SetConfig+0xc84>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	2b02      	cmp	r3, #2
 8007994:	d038      	beq.n	8007a08 <UART_SetConfig+0xc80>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	2b03      	cmp	r3, #3
 800799c:	d032      	beq.n	8007a04 <UART_SetConfig+0xc7c>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d02c      	beq.n	8007a00 <UART_SetConfig+0xc78>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	d026      	beq.n	80079fc <UART_SetConfig+0xc74>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	2b06      	cmp	r3, #6
 80079b4:	d020      	beq.n	80079f8 <UART_SetConfig+0xc70>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	2b07      	cmp	r3, #7
 80079bc:	d01a      	beq.n	80079f4 <UART_SetConfig+0xc6c>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d014      	beq.n	80079f0 <UART_SetConfig+0xc68>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b09      	cmp	r3, #9
 80079cc:	d00e      	beq.n	80079ec <UART_SetConfig+0xc64>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b0a      	cmp	r3, #10
 80079d4:	d008      	beq.n	80079e8 <UART_SetConfig+0xc60>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	2b0b      	cmp	r3, #11
 80079dc:	d102      	bne.n	80079e4 <UART_SetConfig+0xc5c>
 80079de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079e2:	e016      	b.n	8007a12 <UART_SetConfig+0xc8a>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e014      	b.n	8007a12 <UART_SetConfig+0xc8a>
 80079e8:	2380      	movs	r3, #128	; 0x80
 80079ea:	e012      	b.n	8007a12 <UART_SetConfig+0xc8a>
 80079ec:	2340      	movs	r3, #64	; 0x40
 80079ee:	e010      	b.n	8007a12 <UART_SetConfig+0xc8a>
 80079f0:	2320      	movs	r3, #32
 80079f2:	e00e      	b.n	8007a12 <UART_SetConfig+0xc8a>
 80079f4:	2310      	movs	r3, #16
 80079f6:	e00c      	b.n	8007a12 <UART_SetConfig+0xc8a>
 80079f8:	230c      	movs	r3, #12
 80079fa:	e00a      	b.n	8007a12 <UART_SetConfig+0xc8a>
 80079fc:	230a      	movs	r3, #10
 80079fe:	e008      	b.n	8007a12 <UART_SetConfig+0xc8a>
 8007a00:	2308      	movs	r3, #8
 8007a02:	e006      	b.n	8007a12 <UART_SetConfig+0xc8a>
 8007a04:	2306      	movs	r3, #6
 8007a06:	e004      	b.n	8007a12 <UART_SetConfig+0xc8a>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	e002      	b.n	8007a12 <UART_SetConfig+0xc8a>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e000      	b.n	8007a12 <UART_SetConfig+0xc8a>
 8007a10:	2301      	movs	r3, #1
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a18:	005a      	lsls	r2, r3, #1
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	085b      	lsrs	r3, r3, #1
 8007a20:	441a      	add	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	61fb      	str	r3, [r7, #28]
        break;
 8007a2e:	e113      	b.n	8007c58 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d043      	beq.n	8007ac0 <UART_SetConfig+0xd38>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d03d      	beq.n	8007abc <UART_SetConfig+0xd34>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d037      	beq.n	8007ab8 <UART_SetConfig+0xd30>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d031      	beq.n	8007ab4 <UART_SetConfig+0xd2c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d02b      	beq.n	8007ab0 <UART_SetConfig+0xd28>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d025      	beq.n	8007aac <UART_SetConfig+0xd24>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	2b06      	cmp	r3, #6
 8007a66:	d01f      	beq.n	8007aa8 <UART_SetConfig+0xd20>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b07      	cmp	r3, #7
 8007a6e:	d019      	beq.n	8007aa4 <UART_SetConfig+0xd1c>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d013      	beq.n	8007aa0 <UART_SetConfig+0xd18>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	2b09      	cmp	r3, #9
 8007a7e:	d00d      	beq.n	8007a9c <UART_SetConfig+0xd14>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	2b0a      	cmp	r3, #10
 8007a86:	d007      	beq.n	8007a98 <UART_SetConfig+0xd10>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	2b0b      	cmp	r3, #11
 8007a8e:	d101      	bne.n	8007a94 <UART_SetConfig+0xd0c>
 8007a90:	4b8d      	ldr	r3, [pc, #564]	; (8007cc8 <UART_SetConfig+0xf40>)
 8007a92:	e016      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007a94:	4b8d      	ldr	r3, [pc, #564]	; (8007ccc <UART_SetConfig+0xf44>)
 8007a96:	e014      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007a98:	4b8d      	ldr	r3, [pc, #564]	; (8007cd0 <UART_SetConfig+0xf48>)
 8007a9a:	e012      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007a9c:	4b8d      	ldr	r3, [pc, #564]	; (8007cd4 <UART_SetConfig+0xf4c>)
 8007a9e:	e010      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007aa0:	4b8d      	ldr	r3, [pc, #564]	; (8007cd8 <UART_SetConfig+0xf50>)
 8007aa2:	e00e      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007aa4:	4b8d      	ldr	r3, [pc, #564]	; (8007cdc <UART_SetConfig+0xf54>)
 8007aa6:	e00c      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007aa8:	4b8d      	ldr	r3, [pc, #564]	; (8007ce0 <UART_SetConfig+0xf58>)
 8007aaa:	e00a      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007aac:	4b8d      	ldr	r3, [pc, #564]	; (8007ce4 <UART_SetConfig+0xf5c>)
 8007aae:	e008      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007ab0:	4b8d      	ldr	r3, [pc, #564]	; (8007ce8 <UART_SetConfig+0xf60>)
 8007ab2:	e006      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007ab4:	4b8d      	ldr	r3, [pc, #564]	; (8007cec <UART_SetConfig+0xf64>)
 8007ab6:	e004      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007ab8:	4b8d      	ldr	r3, [pc, #564]	; (8007cf0 <UART_SetConfig+0xf68>)
 8007aba:	e002      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007abc:	4b8d      	ldr	r3, [pc, #564]	; (8007cf4 <UART_SetConfig+0xf6c>)
 8007abe:	e000      	b.n	8007ac2 <UART_SetConfig+0xd3a>
 8007ac0:	4b82      	ldr	r3, [pc, #520]	; (8007ccc <UART_SetConfig+0xf44>)
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6852      	ldr	r2, [r2, #4]
 8007ac6:	0852      	lsrs	r2, r2, #1
 8007ac8:	441a      	add	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	61fb      	str	r3, [r7, #28]
        break;
 8007ad6:	e0bf      	b.n	8007c58 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad8:	f7fd f832 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8007adc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d044      	beq.n	8007b70 <UART_SetConfig+0xde8>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d03e      	beq.n	8007b6c <UART_SetConfig+0xde4>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d038      	beq.n	8007b68 <UART_SetConfig+0xde0>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d032      	beq.n	8007b64 <UART_SetConfig+0xddc>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d02c      	beq.n	8007b60 <UART_SetConfig+0xdd8>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	d026      	beq.n	8007b5c <UART_SetConfig+0xdd4>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	2b06      	cmp	r3, #6
 8007b14:	d020      	beq.n	8007b58 <UART_SetConfig+0xdd0>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	2b07      	cmp	r3, #7
 8007b1c:	d01a      	beq.n	8007b54 <UART_SetConfig+0xdcc>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	2b08      	cmp	r3, #8
 8007b24:	d014      	beq.n	8007b50 <UART_SetConfig+0xdc8>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	2b09      	cmp	r3, #9
 8007b2c:	d00e      	beq.n	8007b4c <UART_SetConfig+0xdc4>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	2b0a      	cmp	r3, #10
 8007b34:	d008      	beq.n	8007b48 <UART_SetConfig+0xdc0>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	2b0b      	cmp	r3, #11
 8007b3c:	d102      	bne.n	8007b44 <UART_SetConfig+0xdbc>
 8007b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b42:	e016      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b44:	2301      	movs	r3, #1
 8007b46:	e014      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b48:	2380      	movs	r3, #128	; 0x80
 8007b4a:	e012      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b4c:	2340      	movs	r3, #64	; 0x40
 8007b4e:	e010      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b50:	2320      	movs	r3, #32
 8007b52:	e00e      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b54:	2310      	movs	r3, #16
 8007b56:	e00c      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	e00a      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b5c:	230a      	movs	r3, #10
 8007b5e:	e008      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b60:	2308      	movs	r3, #8
 8007b62:	e006      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b64:	2306      	movs	r3, #6
 8007b66:	e004      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b68:	2304      	movs	r3, #4
 8007b6a:	e002      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e000      	b.n	8007b72 <UART_SetConfig+0xdea>
 8007b70:	2301      	movs	r3, #1
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b78:	005a      	lsls	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	085b      	lsrs	r3, r3, #1
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	61fb      	str	r3, [r7, #28]
        break;
 8007b8e:	e063      	b.n	8007c58 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d04f      	beq.n	8007c38 <UART_SetConfig+0xeb0>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d048      	beq.n	8007c32 <UART_SetConfig+0xeaa>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d041      	beq.n	8007c2c <UART_SetConfig+0xea4>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d03a      	beq.n	8007c26 <UART_SetConfig+0xe9e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d033      	beq.n	8007c20 <UART_SetConfig+0xe98>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	2b05      	cmp	r3, #5
 8007bbe:	d02c      	beq.n	8007c1a <UART_SetConfig+0xe92>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	2b06      	cmp	r3, #6
 8007bc6:	d025      	beq.n	8007c14 <UART_SetConfig+0xe8c>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	2b07      	cmp	r3, #7
 8007bce:	d01e      	beq.n	8007c0e <UART_SetConfig+0xe86>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d017      	beq.n	8007c08 <UART_SetConfig+0xe80>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	2b09      	cmp	r3, #9
 8007bde:	d010      	beq.n	8007c02 <UART_SetConfig+0xe7a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	2b0a      	cmp	r3, #10
 8007be6:	d009      	beq.n	8007bfc <UART_SetConfig+0xe74>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	2b0b      	cmp	r3, #11
 8007bee:	d102      	bne.n	8007bf6 <UART_SetConfig+0xe6e>
 8007bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bf4:	e022      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007bfa:	e01f      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c00:	e01c      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c06:	e019      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c0c:	e016      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c12:	e013      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c14:	f241 5354 	movw	r3, #5460	; 0x1554
 8007c18:	e010      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c1a:	f641 1398 	movw	r3, #6552	; 0x1998
 8007c1e:	e00d      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c24:	e00a      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c26:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007c2a:	e007      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c30:	e004      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c36:	e001      	b.n	8007c3c <UART_SetConfig+0xeb4>
 8007c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6852      	ldr	r2, [r2, #4]
 8007c40:	0852      	lsrs	r2, r2, #1
 8007c42:	441a      	add	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	61fb      	str	r3, [r7, #28]
        break;
 8007c50:	e002      	b.n	8007c58 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	76fb      	strb	r3, [r7, #27]
        break;
 8007c56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	2b0f      	cmp	r3, #15
 8007c5c:	d916      	bls.n	8007c8c <UART_SetConfig+0xf04>
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c64:	d212      	bcs.n	8007c8c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	f023 030f 	bic.w	r3, r3, #15
 8007c6e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	085b      	lsrs	r3, r3, #1
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	89fb      	ldrh	r3, [r7, #14]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	89fa      	ldrh	r2, [r7, #14]
 8007c88:	60da      	str	r2, [r3, #12]
 8007c8a:	e20c      	b.n	80080a6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	76fb      	strb	r3, [r7, #27]
 8007c90:	e209      	b.n	80080a6 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8007c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	f200 81f4 	bhi.w	8008084 <UART_SetConfig+0x12fc>
 8007c9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <UART_SetConfig+0xf1c>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007cf9 	.word	0x08007cf9
 8007ca8:	08007daf 	.word	0x08007daf
 8007cac:	08007e65 	.word	0x08007e65
 8007cb0:	08008085 	.word	0x08008085
 8007cb4:	08007f0f 	.word	0x08007f0f
 8007cb8:	08008085 	.word	0x08008085
 8007cbc:	08008085 	.word	0x08008085
 8007cc0:	08008085 	.word	0x08008085
 8007cc4:	08007fc5 	.word	0x08007fc5
 8007cc8:	0001e848 	.word	0x0001e848
 8007ccc:	01e84800 	.word	0x01e84800
 8007cd0:	0003d090 	.word	0x0003d090
 8007cd4:	0007a120 	.word	0x0007a120
 8007cd8:	000f4240 	.word	0x000f4240
 8007cdc:	001e8480 	.word	0x001e8480
 8007ce0:	0028b0aa 	.word	0x0028b0aa
 8007ce4:	0030d400 	.word	0x0030d400
 8007ce8:	003d0900 	.word	0x003d0900
 8007cec:	00516154 	.word	0x00516154
 8007cf0:	007a1200 	.word	0x007a1200
 8007cf4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf8:	f7fc ff90 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8007cfc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d044      	beq.n	8007d90 <UART_SetConfig+0x1008>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d03e      	beq.n	8007d8c <UART_SetConfig+0x1004>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d038      	beq.n	8007d88 <UART_SetConfig+0x1000>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d032      	beq.n	8007d84 <UART_SetConfig+0xffc>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d02c      	beq.n	8007d80 <UART_SetConfig+0xff8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	2b05      	cmp	r3, #5
 8007d2c:	d026      	beq.n	8007d7c <UART_SetConfig+0xff4>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	2b06      	cmp	r3, #6
 8007d34:	d020      	beq.n	8007d78 <UART_SetConfig+0xff0>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	2b07      	cmp	r3, #7
 8007d3c:	d01a      	beq.n	8007d74 <UART_SetConfig+0xfec>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	2b08      	cmp	r3, #8
 8007d44:	d014      	beq.n	8007d70 <UART_SetConfig+0xfe8>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	2b09      	cmp	r3, #9
 8007d4c:	d00e      	beq.n	8007d6c <UART_SetConfig+0xfe4>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	2b0a      	cmp	r3, #10
 8007d54:	d008      	beq.n	8007d68 <UART_SetConfig+0xfe0>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	2b0b      	cmp	r3, #11
 8007d5c:	d102      	bne.n	8007d64 <UART_SetConfig+0xfdc>
 8007d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d62:	e016      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e014      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d68:	2380      	movs	r3, #128	; 0x80
 8007d6a:	e012      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d6c:	2340      	movs	r3, #64	; 0x40
 8007d6e:	e010      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d70:	2320      	movs	r3, #32
 8007d72:	e00e      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d74:	2310      	movs	r3, #16
 8007d76:	e00c      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d78:	230c      	movs	r3, #12
 8007d7a:	e00a      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d7c:	230a      	movs	r3, #10
 8007d7e:	e008      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d80:	2308      	movs	r3, #8
 8007d82:	e006      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d84:	2306      	movs	r3, #6
 8007d86:	e004      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	e002      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e000      	b.n	8007d92 <UART_SetConfig+0x100a>
 8007d90:	2301      	movs	r3, #1
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	085b      	lsrs	r3, r3, #1
 8007d9e:	441a      	add	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	61fb      	str	r3, [r7, #28]
        break;
 8007dac:	e16d      	b.n	800808a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dae:	f7fc ff4b 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8007db2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d044      	beq.n	8007e46 <UART_SetConfig+0x10be>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d03e      	beq.n	8007e42 <UART_SetConfig+0x10ba>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d038      	beq.n	8007e3e <UART_SetConfig+0x10b6>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d032      	beq.n	8007e3a <UART_SetConfig+0x10b2>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d02c      	beq.n	8007e36 <UART_SetConfig+0x10ae>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	2b05      	cmp	r3, #5
 8007de2:	d026      	beq.n	8007e32 <UART_SetConfig+0x10aa>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	2b06      	cmp	r3, #6
 8007dea:	d020      	beq.n	8007e2e <UART_SetConfig+0x10a6>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	2b07      	cmp	r3, #7
 8007df2:	d01a      	beq.n	8007e2a <UART_SetConfig+0x10a2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d014      	beq.n	8007e26 <UART_SetConfig+0x109e>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d00e      	beq.n	8007e22 <UART_SetConfig+0x109a>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	2b0a      	cmp	r3, #10
 8007e0a:	d008      	beq.n	8007e1e <UART_SetConfig+0x1096>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	2b0b      	cmp	r3, #11
 8007e12:	d102      	bne.n	8007e1a <UART_SetConfig+0x1092>
 8007e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e18:	e016      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e014      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e1e:	2380      	movs	r3, #128	; 0x80
 8007e20:	e012      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e22:	2340      	movs	r3, #64	; 0x40
 8007e24:	e010      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e26:	2320      	movs	r3, #32
 8007e28:	e00e      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e2a:	2310      	movs	r3, #16
 8007e2c:	e00c      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	e00a      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e32:	230a      	movs	r3, #10
 8007e34:	e008      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e36:	2308      	movs	r3, #8
 8007e38:	e006      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e3a:	2306      	movs	r3, #6
 8007e3c:	e004      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e3e:	2304      	movs	r3, #4
 8007e40:	e002      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e42:	2302      	movs	r3, #2
 8007e44:	e000      	b.n	8007e48 <UART_SetConfig+0x10c0>
 8007e46:	2301      	movs	r3, #1
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	441a      	add	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	61fb      	str	r3, [r7, #28]
        break;
 8007e62:	e112      	b.n	800808a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d044      	beq.n	8007ef6 <UART_SetConfig+0x116e>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d03e      	beq.n	8007ef2 <UART_SetConfig+0x116a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d038      	beq.n	8007eee <UART_SetConfig+0x1166>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d032      	beq.n	8007eea <UART_SetConfig+0x1162>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d02c      	beq.n	8007ee6 <UART_SetConfig+0x115e>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b05      	cmp	r3, #5
 8007e92:	d026      	beq.n	8007ee2 <UART_SetConfig+0x115a>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b06      	cmp	r3, #6
 8007e9a:	d020      	beq.n	8007ede <UART_SetConfig+0x1156>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	2b07      	cmp	r3, #7
 8007ea2:	d01a      	beq.n	8007eda <UART_SetConfig+0x1152>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d014      	beq.n	8007ed6 <UART_SetConfig+0x114e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	2b09      	cmp	r3, #9
 8007eb2:	d00e      	beq.n	8007ed2 <UART_SetConfig+0x114a>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	2b0a      	cmp	r3, #10
 8007eba:	d008      	beq.n	8007ece <UART_SetConfig+0x1146>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	2b0b      	cmp	r3, #11
 8007ec2:	d102      	bne.n	8007eca <UART_SetConfig+0x1142>
 8007ec4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007ec8:	e016      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007eca:	4b81      	ldr	r3, [pc, #516]	; (80080d0 <UART_SetConfig+0x1348>)
 8007ecc:	e014      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007ece:	4b81      	ldr	r3, [pc, #516]	; (80080d4 <UART_SetConfig+0x134c>)
 8007ed0:	e012      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007ed2:	4b81      	ldr	r3, [pc, #516]	; (80080d8 <UART_SetConfig+0x1350>)
 8007ed4:	e010      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007ed6:	4b81      	ldr	r3, [pc, #516]	; (80080dc <UART_SetConfig+0x1354>)
 8007ed8:	e00e      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007eda:	4b81      	ldr	r3, [pc, #516]	; (80080e0 <UART_SetConfig+0x1358>)
 8007edc:	e00c      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007ede:	4b81      	ldr	r3, [pc, #516]	; (80080e4 <UART_SetConfig+0x135c>)
 8007ee0:	e00a      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007ee2:	4b81      	ldr	r3, [pc, #516]	; (80080e8 <UART_SetConfig+0x1360>)
 8007ee4:	e008      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007ee6:	4b81      	ldr	r3, [pc, #516]	; (80080ec <UART_SetConfig+0x1364>)
 8007ee8:	e006      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007eea:	4b81      	ldr	r3, [pc, #516]	; (80080f0 <UART_SetConfig+0x1368>)
 8007eec:	e004      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007eee:	4b81      	ldr	r3, [pc, #516]	; (80080f4 <UART_SetConfig+0x136c>)
 8007ef0:	e002      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007ef2:	4b81      	ldr	r3, [pc, #516]	; (80080f8 <UART_SetConfig+0x1370>)
 8007ef4:	e000      	b.n	8007ef8 <UART_SetConfig+0x1170>
 8007ef6:	4b76      	ldr	r3, [pc, #472]	; (80080d0 <UART_SetConfig+0x1348>)
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6852      	ldr	r2, [r2, #4]
 8007efc:	0852      	lsrs	r2, r2, #1
 8007efe:	441a      	add	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	61fb      	str	r3, [r7, #28]
        break;
 8007f0c:	e0bd      	b.n	800808a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f0e:	f7fc fe17 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8007f12:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d044      	beq.n	8007fa6 <UART_SetConfig+0x121e>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d03e      	beq.n	8007fa2 <UART_SetConfig+0x121a>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d038      	beq.n	8007f9e <UART_SetConfig+0x1216>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d032      	beq.n	8007f9a <UART_SetConfig+0x1212>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d02c      	beq.n	8007f96 <UART_SetConfig+0x120e>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	2b05      	cmp	r3, #5
 8007f42:	d026      	beq.n	8007f92 <UART_SetConfig+0x120a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	2b06      	cmp	r3, #6
 8007f4a:	d020      	beq.n	8007f8e <UART_SetConfig+0x1206>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	2b07      	cmp	r3, #7
 8007f52:	d01a      	beq.n	8007f8a <UART_SetConfig+0x1202>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d014      	beq.n	8007f86 <UART_SetConfig+0x11fe>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	2b09      	cmp	r3, #9
 8007f62:	d00e      	beq.n	8007f82 <UART_SetConfig+0x11fa>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	2b0a      	cmp	r3, #10
 8007f6a:	d008      	beq.n	8007f7e <UART_SetConfig+0x11f6>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	2b0b      	cmp	r3, #11
 8007f72:	d102      	bne.n	8007f7a <UART_SetConfig+0x11f2>
 8007f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f78:	e016      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e014      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f7e:	2380      	movs	r3, #128	; 0x80
 8007f80:	e012      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f82:	2340      	movs	r3, #64	; 0x40
 8007f84:	e010      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f86:	2320      	movs	r3, #32
 8007f88:	e00e      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f8a:	2310      	movs	r3, #16
 8007f8c:	e00c      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	e00a      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f92:	230a      	movs	r3, #10
 8007f94:	e008      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f96:	2308      	movs	r3, #8
 8007f98:	e006      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f9a:	2306      	movs	r3, #6
 8007f9c:	e004      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007f9e:	2304      	movs	r3, #4
 8007fa0:	e002      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e000      	b.n	8007fa8 <UART_SetConfig+0x1220>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	085b      	lsrs	r3, r3, #1
 8007fb4:	441a      	add	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	61fb      	str	r3, [r7, #28]
        break;
 8007fc2:	e062      	b.n	800808a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d04e      	beq.n	800806a <UART_SetConfig+0x12e2>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d047      	beq.n	8008064 <UART_SetConfig+0x12dc>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d040      	beq.n	800805e <UART_SetConfig+0x12d6>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d039      	beq.n	8008058 <UART_SetConfig+0x12d0>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d032      	beq.n	8008052 <UART_SetConfig+0x12ca>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	2b05      	cmp	r3, #5
 8007ff2:	d02b      	beq.n	800804c <UART_SetConfig+0x12c4>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	2b06      	cmp	r3, #6
 8007ffa:	d024      	beq.n	8008046 <UART_SetConfig+0x12be>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b07      	cmp	r3, #7
 8008002:	d01d      	beq.n	8008040 <UART_SetConfig+0x12b8>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b08      	cmp	r3, #8
 800800a:	d016      	beq.n	800803a <UART_SetConfig+0x12b2>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b09      	cmp	r3, #9
 8008012:	d00f      	beq.n	8008034 <UART_SetConfig+0x12ac>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	2b0a      	cmp	r3, #10
 800801a:	d008      	beq.n	800802e <UART_SetConfig+0x12a6>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b0b      	cmp	r3, #11
 8008022:	d101      	bne.n	8008028 <UART_SetConfig+0x12a0>
 8008024:	2380      	movs	r3, #128	; 0x80
 8008026:	e022      	b.n	800806e <UART_SetConfig+0x12e6>
 8008028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800802c:	e01f      	b.n	800806e <UART_SetConfig+0x12e6>
 800802e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008032:	e01c      	b.n	800806e <UART_SetConfig+0x12e6>
 8008034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008038:	e019      	b.n	800806e <UART_SetConfig+0x12e6>
 800803a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800803e:	e016      	b.n	800806e <UART_SetConfig+0x12e6>
 8008040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008044:	e013      	b.n	800806e <UART_SetConfig+0x12e6>
 8008046:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800804a:	e010      	b.n	800806e <UART_SetConfig+0x12e6>
 800804c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008050:	e00d      	b.n	800806e <UART_SetConfig+0x12e6>
 8008052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008056:	e00a      	b.n	800806e <UART_SetConfig+0x12e6>
 8008058:	f241 5355 	movw	r3, #5461	; 0x1555
 800805c:	e007      	b.n	800806e <UART_SetConfig+0x12e6>
 800805e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008062:	e004      	b.n	800806e <UART_SetConfig+0x12e6>
 8008064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008068:	e001      	b.n	800806e <UART_SetConfig+0x12e6>
 800806a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	6852      	ldr	r2, [r2, #4]
 8008072:	0852      	lsrs	r2, r2, #1
 8008074:	441a      	add	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	fbb2 f3f3 	udiv	r3, r2, r3
 800807e:	b29b      	uxth	r3, r3
 8008080:	61fb      	str	r3, [r7, #28]
        break;
 8008082:	e002      	b.n	800808a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	76fb      	strb	r3, [r7, #27]
        break;
 8008088:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b0f      	cmp	r3, #15
 800808e:	d908      	bls.n	80080a2 <UART_SetConfig+0x131a>
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008096:	d204      	bcs.n	80080a2 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69fa      	ldr	r2, [r7, #28]
 800809e:	60da      	str	r2, [r3, #12]
 80080a0:	e001      	b.n	80080a6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80080c2:	7efb      	ldrb	r3, [r7, #27]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3728      	adds	r7, #40	; 0x28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80080ce:	bf00      	nop
 80080d0:	00f42400 	.word	0x00f42400
 80080d4:	0001e848 	.word	0x0001e848
 80080d8:	0003d090 	.word	0x0003d090
 80080dc:	0007a120 	.word	0x0007a120
 80080e0:	000f4240 	.word	0x000f4240
 80080e4:	00145855 	.word	0x00145855
 80080e8:	00186a00 	.word	0x00186a00
 80080ec:	001e8480 	.word	0x001e8480
 80080f0:	0028b0aa 	.word	0x0028b0aa
 80080f4:	003d0900 	.word	0x003d0900
 80080f8:	007a1200 	.word	0x007a1200

080080fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01a      	beq.n	8008212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081fa:	d10a      	bne.n	8008212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
  }
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af02      	add	r7, sp, #8
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008250:	f7f9 fa90 	bl	8001774 <HAL_GetTick>
 8008254:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	2b08      	cmp	r3, #8
 8008262:	d10e      	bne.n	8008282 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f82c 	bl	80082d0 <UART_WaitOnFlagUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e022      	b.n	80082c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b04      	cmp	r3, #4
 800828e:	d10e      	bne.n	80082ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f816 	bl	80082d0 <UART_WaitOnFlagUntilTimeout>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e00c      	b.n	80082c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	4613      	mov	r3, r2
 80082de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e0:	e02c      	b.n	800833c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d028      	beq.n	800833c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ea:	f7f9 fa43 	bl	8001774 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d302      	bcc.n	8008300 <UART_WaitOnFlagUntilTimeout+0x30>
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d11d      	bne.n	800833c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800830e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689a      	ldr	r2, [r3, #8]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f022 0201 	bic.w	r2, r2, #1
 800831e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e00f      	b.n	800835c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69da      	ldr	r2, [r3, #28]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	4013      	ands	r3, r2
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	429a      	cmp	r2, r3
 800834a:	bf0c      	ite	eq
 800834c:	2301      	moveq	r3, #1
 800834e:	2300      	movne	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	461a      	mov	r2, r3
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	429a      	cmp	r2, r3
 8008358:	d0c3      	beq.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800837a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	6812      	ldr	r2, [r2, #0]
 8008386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800838a:	f023 0301 	bic.w	r3, r3, #1
 800838e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2220      	movs	r2, #32
 8008394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7fe fcd1 	bl	8006d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fe fcad 	bl	8006d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008418:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008420:	2b22      	cmp	r3, #34	; 0x22
 8008422:	d13b      	bne.n	800849c <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800842c:	89bb      	ldrh	r3, [r7, #12]
 800842e:	b2d9      	uxtb	r1, r3
 8008430:	89fb      	ldrh	r3, [r7, #14]
 8008432:	b2da      	uxtb	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008438:	400a      	ands	r2, r1
 800843a:	b2d2      	uxtb	r2, r2
 800843c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d122      	bne.n	80084ac <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008474:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0201 	bic.w	r2, r2, #1
 8008484:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2220      	movs	r2, #32
 800848a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7f8 fbeb 	bl	8000c70 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800849a:	e007      	b.n	80084ac <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0208 	orr.w	r2, r2, #8
 80084aa:	619a      	str	r2, [r3, #24]
}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ca:	2b22      	cmp	r3, #34	; 0x22
 80084cc:	d13b      	bne.n	8008546 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084da:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80084dc:	89ba      	ldrh	r2, [r7, #12]
 80084de:	89fb      	ldrh	r3, [r7, #14]
 80084e0:	4013      	ands	r3, r2
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800850a:	b29b      	uxth	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d122      	bne.n	8008556 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800851e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0201 	bic.w	r2, r2, #1
 800852e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2220      	movs	r2, #32
 8008534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7f8 fb96 	bl	8000c70 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008544:	e007      	b.n	8008556 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	699a      	ldr	r2, [r3, #24]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0208 	orr.w	r2, r2, #8
 8008554:	619a      	str	r2, [r3, #24]
}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800856e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008576:	2b22      	cmp	r3, #34	; 0x22
 8008578:	d168      	bne.n	800864c <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008580:	81fb      	strh	r3, [r7, #14]
 8008582:	e03f      	b.n	8008604 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800858c:	893b      	ldrh	r3, [r7, #8]
 800858e:	b2d9      	uxtb	r1, r3
 8008590:	89bb      	ldrh	r3, [r7, #12]
 8008592:	b2da      	uxtb	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008598:	400a      	ands	r2, r1
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d11b      	bne.n	80085fe <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085d4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6812      	ldr	r2, [r2, #0]
 80085e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2220      	movs	r2, #32
 80085ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7f8 fb39 	bl	8000c70 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80085fe:	89fb      	ldrh	r3, [r7, #14]
 8008600:	3b01      	subs	r3, #1
 8008602:	81fb      	strh	r3, [r7, #14]
 8008604:	89fb      	ldrh	r3, [r7, #14]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1bc      	bne.n	8008584 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008610:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008612:	897b      	ldrh	r3, [r7, #10]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d021      	beq.n	800865c <UART_RxISR_8BIT_FIFOEN+0xfc>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800861e:	897a      	ldrh	r2, [r7, #10]
 8008620:	429a      	cmp	r2, r3
 8008622:	d21b      	bcs.n	800865c <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689a      	ldr	r2, [r3, #8]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008632:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a0b      	ldr	r2, [pc, #44]	; (8008664 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8008638:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f042 0220 	orr.w	r2, r2, #32
 8008648:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800864a:	e007      	b.n	800865c <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f042 0208 	orr.w	r2, r2, #8
 800865a:	619a      	str	r2, [r3, #24]
}
 800865c:	bf00      	nop
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	0800840b 	.word	0x0800840b

08008668 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008676:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800867e:	2b22      	cmp	r3, #34	; 0x22
 8008680:	d168      	bne.n	8008754 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008688:	82fb      	strh	r3, [r7, #22]
 800868a:	e03f      	b.n	800870c <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008698:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800869a:	8a3a      	ldrh	r2, [r7, #16]
 800869c:	8abb      	ldrh	r3, [r7, #20]
 800869e:	4013      	ands	r3, r2
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086aa:	1c9a      	adds	r2, r3, #2
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d11b      	bne.n	8008706 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086dc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ec:	f023 0301 	bic.w	r3, r3, #1
 80086f0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7f8 fab5 	bl	8000c70 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008706:	8afb      	ldrh	r3, [r7, #22]
 8008708:	3b01      	subs	r3, #1
 800870a:	82fb      	strh	r3, [r7, #22]
 800870c:	8afb      	ldrh	r3, [r7, #22]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1bc      	bne.n	800868c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008718:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800871a:	8a7b      	ldrh	r3, [r7, #18]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d021      	beq.n	8008764 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008726:	8a7a      	ldrh	r2, [r7, #18]
 8008728:	429a      	cmp	r2, r3
 800872a:	d21b      	bcs.n	8008764 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689a      	ldr	r2, [r3, #8]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800873a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a0b      	ldr	r2, [pc, #44]	; (800876c <UART_RxISR_16BIT_FIFOEN+0x104>)
 8008740:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f042 0220 	orr.w	r2, r2, #32
 8008750:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008752:	e007      	b.n	8008764 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0208 	orr.w	r2, r2, #8
 8008762:	619a      	str	r2, [r3, #24]
}
 8008764:	bf00      	nop
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	080084b5 	.word	0x080084b5

08008770 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80087be:	2302      	movs	r3, #2
 80087c0:	e027      	b.n	8008812 <HAL_UARTEx_DisableFifoMode+0x66>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2224      	movs	r2, #36	; 0x24
 80087ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0201 	bic.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008832:	2302      	movs	r3, #2
 8008834:	e02d      	b.n	8008892 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2224      	movs	r2, #36	; 0x24
 8008842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0201 	bic.w	r2, r2, #1
 800885c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f850 	bl	8008918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e02d      	b.n	800890e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2224      	movs	r2, #36	; 0x24
 80088be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0201 	bic.w	r2, r2, #1
 80088d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f812 	bl	8008918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008918:	b480      	push	{r7}
 800891a:	b089      	sub	sp, #36	; 0x24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008920:	4a2f      	ldr	r2, [pc, #188]	; (80089e0 <UARTEx_SetNbDataToProcess+0xc8>)
 8008922:	f107 0314 	add.w	r3, r7, #20
 8008926:	e892 0003 	ldmia.w	r2, {r0, r1}
 800892a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800892e:	4a2d      	ldr	r2, [pc, #180]	; (80089e4 <UARTEx_SetNbDataToProcess+0xcc>)
 8008930:	f107 030c 	add.w	r3, r7, #12
 8008934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008938:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008940:	2b00      	cmp	r3, #0
 8008942:	d108      	bne.n	8008956 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008954:	e03d      	b.n	80089d2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008956:	2308      	movs	r3, #8
 8008958:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800895a:	2308      	movs	r3, #8
 800895c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	0e5b      	lsrs	r3, r3, #25
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	0f5b      	lsrs	r3, r3, #29
 8008976:	b2db      	uxtb	r3, r3
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800897e:	7fbb      	ldrb	r3, [r7, #30]
 8008980:	7f3a      	ldrb	r2, [r7, #28]
 8008982:	f107 0120 	add.w	r1, r7, #32
 8008986:	440a      	add	r2, r1
 8008988:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800898c:	fb02 f303 	mul.w	r3, r2, r3
 8008990:	7f3a      	ldrb	r2, [r7, #28]
 8008992:	f107 0120 	add.w	r1, r7, #32
 8008996:	440a      	add	r2, r1
 8008998:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800899c:	fb93 f3f2 	sdiv	r3, r3, r2
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80089a8:	7ffb      	ldrb	r3, [r7, #31]
 80089aa:	7f7a      	ldrb	r2, [r7, #29]
 80089ac:	f107 0120 	add.w	r1, r7, #32
 80089b0:	440a      	add	r2, r1
 80089b2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80089b6:	fb02 f303 	mul.w	r3, r2, r3
 80089ba:	7f7a      	ldrb	r2, [r7, #29]
 80089bc:	f107 0120 	add.w	r1, r7, #32
 80089c0:	440a      	add	r2, r1
 80089c2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80089c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089d2:	bf00      	nop
 80089d4:	3724      	adds	r7, #36	; 0x24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	08008ac4 	.word	0x08008ac4
 80089e4:	08008acc 	.word	0x08008acc

080089e8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	ed93 7a06 	vldr	s14, [r3, #24]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80089fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	edd3 7a08 	vldr	s15, [r3, #32]
 8008a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	edd3 7a06 	vldr	s15, [r3, #24]
 8008a18:	eeb1 7a67 	vneg.f32	s14, s15
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008a22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1a      	ldr	r2, [r3, #32]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d006      	beq.n	8008a4c <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	330c      	adds	r3, #12
 8008a42:	220c      	movs	r2, #12
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 f828 	bl	8008a9c <memset>
  }

}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <__libc_init_array>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4e0d      	ldr	r6, [pc, #52]	; (8008a8c <__libc_init_array+0x38>)
 8008a58:	4c0d      	ldr	r4, [pc, #52]	; (8008a90 <__libc_init_array+0x3c>)
 8008a5a:	1ba4      	subs	r4, r4, r6
 8008a5c:	10a4      	asrs	r4, r4, #2
 8008a5e:	2500      	movs	r5, #0
 8008a60:	42a5      	cmp	r5, r4
 8008a62:	d109      	bne.n	8008a78 <__libc_init_array+0x24>
 8008a64:	4e0b      	ldr	r6, [pc, #44]	; (8008a94 <__libc_init_array+0x40>)
 8008a66:	4c0c      	ldr	r4, [pc, #48]	; (8008a98 <__libc_init_array+0x44>)
 8008a68:	f000 f820 	bl	8008aac <_init>
 8008a6c:	1ba4      	subs	r4, r4, r6
 8008a6e:	10a4      	asrs	r4, r4, #2
 8008a70:	2500      	movs	r5, #0
 8008a72:	42a5      	cmp	r5, r4
 8008a74:	d105      	bne.n	8008a82 <__libc_init_array+0x2e>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a7c:	4798      	blx	r3
 8008a7e:	3501      	adds	r5, #1
 8008a80:	e7ee      	b.n	8008a60 <__libc_init_array+0xc>
 8008a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a86:	4798      	blx	r3
 8008a88:	3501      	adds	r5, #1
 8008a8a:	e7f2      	b.n	8008a72 <__libc_init_array+0x1e>
 8008a8c:	08008af4 	.word	0x08008af4
 8008a90:	08008af4 	.word	0x08008af4
 8008a94:	08008af4 	.word	0x08008af4
 8008a98:	08008af8 	.word	0x08008af8

08008a9c <memset>:
 8008a9c:	4402      	add	r2, r0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d100      	bne.n	8008aa6 <memset+0xa>
 8008aa4:	4770      	bx	lr
 8008aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8008aaa:	e7f9      	b.n	8008aa0 <memset+0x4>

08008aac <_init>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr

08008ab8 <_fini>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	bf00      	nop
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr
