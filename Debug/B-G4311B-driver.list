
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b34  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  08009d0c  08009d0c  00019d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a560  0800a560  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a560  0800a560  0001a560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a568  0800a568  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a568  0800a568  0001a568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a56c  0800a56c  0001a56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000074  0800a5e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800a5e4  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7ea  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003255  00000000  00000000  0003b88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e0  00000000  00000000  0003eae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  000400c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021cc2  00000000  00000000  000414f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013913  00000000  00000000  000631ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dea25  00000000  00000000  00076acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001554f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f08  00000000  00000000  00155570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009cf4 	.word	0x08009cf4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	08009cf4 	.word	0x08009cf4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b092      	sub	sp, #72	; 0x48
 8000e68:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	223c      	movs	r2, #60	; 0x3c
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f008 fd4f 	bl	8009920 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e82:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e92:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb0:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4827      	ldr	r0, [pc, #156]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ee2:	f001 fe11 	bl	8002b08 <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f000 ff29 	bl	8001d42 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4821      	ldr	r0, [pc, #132]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000efc:	f003 fa06 	bl	800430c <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f06:	f000 ff1c 	bl	8001d42 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_ADC1_Init+0x120>)
 8000f0c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000f12:	2302      	movs	r3, #2
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000f38:	2384      	movs	r3, #132	; 0x84
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000f4c:	f002 fd86 	bl	8003a5c <HAL_ADCEx_InjectedConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f56:	f000 fef4 	bl	8001d42 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_ADC1_Init+0x124>)
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f5e:	f240 130f 	movw	r3, #271	; 0x10f
 8000f62:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000f6a:	f002 fd77 	bl	8003a5c <HAL_ADCEx_InjectedConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000f74:	f000 fee5 	bl	8001d42 <Error_Handler>
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3748      	adds	r7, #72	; 0x48
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000100 	.word	0x20000100
 8000f84:	0c900008 	.word	0x0c900008
 8000f88:	32601000 	.word	0x32601000

08000f8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	223c      	movs	r2, #60	; 0x3c
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f008 fcc1 	bl	8009920 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000f9e:	4b31      	ldr	r3, [pc, #196]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fa0:	4a31      	ldr	r2, [pc, #196]	; (8001068 <MX_ADC2_Init+0xdc>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fa6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000faa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000ffc:	f001 fd84 	bl	8002b08 <HAL_ADC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001006:	f000 fe9c 	bl	8001d42 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_ADC2_Init+0xe0>)
 800100c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800100e:	2309      	movs	r3, #9
 8001010:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001012:	2302      	movs	r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001016:	237f      	movs	r3, #127	; 0x7f
 8001018:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800101a:	2304      	movs	r3, #4
 800101c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001038:	2384      	movs	r3, #132	; 0x84
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_ADC2_Init+0xd8>)
 800104c:	f002 fd06 	bl	8003a5c <HAL_ADCEx_InjectedConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001056:	f000 fe74 	bl	8001d42 <Error_Handler>
  }

}
 800105a:	bf00      	nop
 800105c:	3740      	adds	r7, #64	; 0x40
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000094 	.word	0x20000094
 8001068:	50000100 	.word	0x50000100
 800106c:	0c900008 	.word	0x0c900008

08001070 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001090:	d14e      	bne.n	8001130 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a45      	ldr	r2, [pc, #276]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 800109a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800109c:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10b      	bne.n	80010bc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b0:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	4a3c      	ldr	r2, [pc, #240]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a36      	ldr	r2, [pc, #216]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80010ec:	2305      	movs	r3, #5
 80010ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f0:	2303      	movs	r3, #3
 80010f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f003 fb19 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4827      	ldr	r0, [pc, #156]	; (80011b8 <HAL_ADC_MspInit+0x148>)
 800111a:	f003 fb0d 	bl	8004738 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2101      	movs	r1, #1
 8001122:	2012      	movs	r0, #18
 8001124:	f003 fa6d 	bl	8004602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001128:	2012      	movs	r0, #18
 800112a:	f003 fa84 	bl	8004636 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800112e:	e03a      	b.n	80011a6 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <HAL_ADC_MspInit+0x14c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d135      	bne.n	80011a6 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 8001142:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10b      	bne.n	8001164 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 8001152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800117c:	2340      	movs	r3, #64	; 0x40
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f003 fad1 	bl	8004738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2101      	movs	r1, #1
 800119a:	2012      	movs	r0, #18
 800119c:	f003 fa31 	bl	8004602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011a0:	2012      	movs	r0, #18
 80011a2:	f003 fa48 	bl	8004636 <HAL_NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3730      	adds	r7, #48	; 0x30
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000090 	.word	0x20000090
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	50000100 	.word	0x50000100

080011c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a23      	ldr	r2, [pc, #140]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011f4:	f043 0320 	orr.w	r3, r3, #32
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_GPIO_Init+0xa8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <MX_GPIO_Init+0xa8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_GPIO_Init+0xa8>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_GPIO_Init+0xa8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <MX_GPIO_Init+0xa8>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_GPIO_Init+0xa8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_GPIO_Init+0xac>)
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <MX_GPIO_Init+0xb0>)
 800124c:	f003 fa74 	bl	8004738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	210f      	movs	r1, #15
 8001254:	2028      	movs	r0, #40	; 0x28
 8001256:	f003 f9d4 	bl	8004602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125a:	2028      	movs	r0, #40	; 0x28
 800125c:	f003 f9eb 	bl	8004636 <HAL_NVIC_EnableIRQ>

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	10110000 	.word	0x10110000
 8001270:	48000800 	.word	0x48000800

08001274 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 8001278:	217f      	movs	r1, #127	; 0x7f
 800127a:	4852      	ldr	r0, [pc, #328]	; (80013c4 <start_up+0x150>)
 800127c:	f002 fa4c 	bl	8003718 <HAL_ADCEx_Calibration_Start>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <start_up+0x24>
 8001286:	217f      	movs	r1, #127	; 0x7f
 8001288:	484f      	ldr	r0, [pc, #316]	; (80013c8 <start_up+0x154>)
 800128a:	f002 fa45 	bl	8003718 <HAL_ADCEx_Calibration_Start>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <start_up+0x24>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <start_up+0x26>
 8001298:	2300      	movs	r3, #0
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 8090 	bne.w	80013c0 <start_up+0x14c>
	   {
		//////// start ADC 1 2 ///////////////////////////////////
	    HAL_ADCEx_InjectedStart_IT(&hadc1);
 80012a0:	4848      	ldr	r0, [pc, #288]	; (80013c4 <start_up+0x150>)
 80012a2:	f002 fa9b 	bl	80037dc <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 80012a6:	4848      	ldr	r0, [pc, #288]	; (80013c8 <start_up+0x154>)
 80012a8:	f002 fa98 	bl	80037dc <HAL_ADCEx_InjectedStart_IT>

	    //////// konfiguracja Timer 1  //////////////////////////
	    TIM1->ARR= TIM1_ARR;
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <start_up+0x158>)
 80012ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
	    TIM1->PSC= TIM1_PSC;
 80012b4:	4b45      	ldr	r3, [pc, #276]	; (80013cc <start_up+0x158>)
 80012b6:	229f      	movs	r2, #159	; 0x9f
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28

	    HAL_TIM_Base_Start_IT(&htim1);
 80012ba:	4845      	ldr	r0, [pc, #276]	; (80013d0 <start_up+0x15c>)
 80012bc:	f004 fcc6 	bl	8005c4c <HAL_TIM_Base_Start_IT>

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012c0:	2100      	movs	r1, #0
 80012c2:	4843      	ldr	r0, [pc, #268]	; (80013d0 <start_up+0x15c>)
 80012c4:	f004 fd88 	bl	8005dd8 <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80012c8:	2100      	movs	r1, #0
 80012ca:	4841      	ldr	r0, [pc, #260]	; (80013d0 <start_up+0x15c>)
 80012cc:	f005 ff5c 	bl	8007188 <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012d0:	2104      	movs	r1, #4
 80012d2:	483f      	ldr	r0, [pc, #252]	; (80013d0 <start_up+0x15c>)
 80012d4:	f004 fd80 	bl	8005dd8 <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80012d8:	2104      	movs	r1, #4
 80012da:	483d      	ldr	r0, [pc, #244]	; (80013d0 <start_up+0x15c>)
 80012dc:	f005 ff54 	bl	8007188 <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012e0:	2108      	movs	r1, #8
 80012e2:	483b      	ldr	r0, [pc, #236]	; (80013d0 <start_up+0x15c>)
 80012e4:	f004 fd78 	bl	8005dd8 <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80012e8:	2108      	movs	r1, #8
 80012ea:	4839      	ldr	r0, [pc, #228]	; (80013d0 <start_up+0x15c>)
 80012ec:	f005 ff4c 	bl	8007188 <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80012f0:	210c      	movs	r1, #12
 80012f2:	4837      	ldr	r0, [pc, #220]	; (80013d0 <start_up+0x15c>)
 80012f4:	f004 fd70 	bl	8005dd8 <HAL_TIM_PWM_Start>

	    TIM1->CCR1=(TIM1->ARR/20);
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <start_up+0x158>)
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	4a33      	ldr	r2, [pc, #204]	; (80013cc <start_up+0x158>)
 80012fe:	4935      	ldr	r1, [pc, #212]	; (80013d4 <start_up+0x160>)
 8001300:	fba1 1303 	umull	r1, r3, r1, r3
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	6353      	str	r3, [r2, #52]	; 0x34
	    TIM1->CCR2=0;
 8001308:	4b30      	ldr	r3, [pc, #192]	; (80013cc <start_up+0x158>)
 800130a:	2200      	movs	r2, #0
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
	    TIM1->CCR3=0;
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <start_up+0x158>)
 8001310:	2200      	movs	r2, #0
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c
	    TIM1->CCR4=(TIM1->ARR-2);
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <start_up+0x158>)
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <start_up+0x158>)
 800131a:	3b02      	subs	r3, #2
 800131c:	6413      	str	r3, [r2, #64]	; 0x40

	    HAL_Delay(1000);
 800131e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001322:	f001 fab7 	bl	8002894 <HAL_Delay>

	    TIM1->CCR1=0;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <start_up+0x158>)
 8001328:	2200      	movs	r2, #0
 800132a:	635a      	str	r2, [r3, #52]	; 0x34
	    TIM1->CCR2=0;
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <start_up+0x158>)
 800132e:	2200      	movs	r2, #0
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
	    TIM1->CCR3=0;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <start_up+0x158>)
 8001334:	2200      	movs	r2, #0
 8001336:	63da      	str	r2, [r3, #60]	; 0x3c

	    //////// konfiguracja Timer 4 - encoder ///////////////////
	     TIM4->ARR= TIM4_ARR;
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <start_up+0x164>)
 800133a:	f240 1267 	movw	r2, #359	; 0x167
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
	     TIM4->PSC= TIM4_PSC;
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <start_up+0x164>)
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
	     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001346:	2100      	movs	r1, #0
 8001348:	4824      	ldr	r0, [pc, #144]	; (80013dc <start_up+0x168>)
 800134a:	f004 febd 	bl	80060c8 <HAL_TIM_Encoder_Start>
	     HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 800134e:	2104      	movs	r1, #4
 8001350:	4822      	ldr	r0, [pc, #136]	; (80013dc <start_up+0x168>)
 8001352:	f004 feb9 	bl	80060c8 <HAL_TIM_Encoder_Start>

		//////// konfiguracja Timer 4 - encoder ///////////////////
		  TIM2->ARR= TIM2_ARR;
 8001356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800135a:	f240 128f 	movw	r2, #399	; 0x18f
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM2->PSC= TIM2_PSC;
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	f240 128f 	movw	r2, #399	; 0x18f
 8001368:	629a      	str	r2, [r3, #40]	; 0x28


	     ////////  UASRT 2 /////////////////////////////////////////
	     HAL_UART_Receive_IT(&huart2, &recive, 1);
 800136a:	2201      	movs	r2, #1
 800136c:	491c      	ldr	r1, [pc, #112]	; (80013e0 <start_up+0x16c>)
 800136e:	481d      	ldr	r0, [pc, #116]	; (80013e4 <start_up+0x170>)
 8001370:	f006 f968 	bl	8007644 <HAL_UART_Receive_IT>


	     /////////// inicjalizacja pid_d ////////////////
	      set_d=0;
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <start_up+0x174>)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
	      pid_d.Kp=1;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <start_up+0x178>)
 800137e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001382:	619a      	str	r2, [r3, #24]
	      pid_d.Ki=100;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <start_up+0x178>)
 8001386:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <start_up+0x17c>)
 8001388:	61da      	str	r2, [r3, #28]
	      pid_d.Kd=0;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <start_up+0x178>)
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
	      arm_pid_init_f32(&pid_d, 1);
 8001392:	2101      	movs	r1, #1
 8001394:	4815      	ldr	r0, [pc, #84]	; (80013ec <start_up+0x178>)
 8001396:	f008 f9d7 	bl	8009748 <arm_pid_init_f32>

	     /////////// inicjalizacja pid_q ////////////////
	      set_q=1;
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <start_up+0x180>)
 800139c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013a0:	601a      	str	r2, [r3, #0]
	      pid_q.Kp=100;
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <start_up+0x184>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <start_up+0x17c>)
 80013a6:	619a      	str	r2, [r3, #24]
	      pid_q.Ki=1;
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <start_up+0x184>)
 80013aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013ae:	61da      	str	r2, [r3, #28]
	      pid_q.Kd=0;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <start_up+0x184>)
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
	      arm_pid_init_f32(&pid_q, 1);
 80013b8:	2101      	movs	r1, #1
 80013ba:	480f      	ldr	r0, [pc, #60]	; (80013f8 <start_up+0x184>)
 80013bc:	f008 f9c4 	bl	8009748 <arm_pid_init_f32>


	   }

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000100 	.word	0x20000100
 80013c8:	20000094 	.word	0x20000094
 80013cc:	40012c00 	.word	0x40012c00
 80013d0:	20000378 	.word	0x20000378
 80013d4:	cccccccd 	.word	0xcccccccd
 80013d8:	40000800 	.word	0x40000800
 80013dc:	2000032c 	.word	0x2000032c
 80013e0:	20000228 	.word	0x20000228
 80013e4:	20000410 	.word	0x20000410
 80013e8:	20000194 	.word	0x20000194
 80013ec:	20000198 	.word	0x20000198
 80013f0:	42c80000 	.word	0x42c80000
 80013f4:	20000260 	.word	0x20000260
 80013f8:	200001fc 	.word	0x200001fc
 80013fc:	00000000 	.word	0x00000000

08001400 <AlphaBeta_To_Angle_Vref>:

void AlphaBeta_To_Angle_Vref(float32_t Valpha,float32_t Vbeta,float32_t *angle_current_rad,float32_t *Vref)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	ed87 0a03 	vstr	s0, [r7, #12]
 800140a:	edc7 0a02 	vstr	s1, [r7, #8]
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	*angle_current_rad = atan2f(Vbeta,Valpha);
 8001412:	edd7 0a03 	vldr	s1, [r7, #12]
 8001416:	ed97 0a02 	vldr	s0, [r7, #8]
 800141a:	f008 fa89 	bl	8009930 <atan2f>
 800141e:	eef0 7a40 	vmov.f32	s15, s0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32( ((Valpha*Valpha)+(Vbeta*Vbeta)), Vref);
 8001428:	ed97 7a03 	vldr	s14, [r7, #12]
 800142c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001434:	edd7 6a02 	vldr	s13, [r7, #8]
 8001438:	edd7 7a02 	vldr	s15, [r7, #8]
 800143c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	edc7 7a05 	vstr	s15, [r7, #20]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	db09      	blt.n	800146e <AlphaBeta_To_Angle_Vref+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800145a:	ed97 0a05 	vldr	s0, [r7, #20]
 800145e:	f008 fa69 	bl	8009934 <sqrtf>
 8001462:	eef0 7a40 	vmov.f32	s15, s0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	edc3 7a00 	vstr	s15, [r3]
 800146c:	e003      	b.n	8001476 <AlphaBeta_To_Angle_Vref+0x76>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

	 if(*Vref>=sv_Vdc_limit)  // saturacja Vref
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f830 	bl	80004e0 <__aeabi_f2d>
 8001480:	a308      	add	r3, pc, #32	; (adr r3, 80014a4 <AlphaBeta_To_Angle_Vref+0xa4>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff fb09 	bl	8000a9c <__aeabi_dcmpge>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d100      	bne.n	8001492 <AlphaBeta_To_Angle_Vref+0x92>
	    	*Vref=sv_Vdc_limit;
}
 8001490:	e002      	b.n	8001498 <AlphaBeta_To_Angle_Vref+0x98>
	    	*Vref=sv_Vdc_limit;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	4a02      	ldr	r2, [pc, #8]	; (80014a0 <AlphaBeta_To_Angle_Vref+0xa0>)
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	415db3d0 	.word	0x415db3d0
 80014a4:	0f9096bc 	.word	0x0f9096bc
 80014a8:	402bb67a 	.word	0x402bb67a
 80014ac:	00000000 	.word	0x00000000

080014b0 <Angle_To_Sector>:


void Angle_To_Sector(float32_t angle_current_rad,uint8_t *sector)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ba:	6038      	str	r0, [r7, #0]

	if((angle_current_rad>0) && (angle_current_rad<=1.047197)) // pi/3
 80014bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	dd0e      	ble.n	80014e8 <Angle_To_Sector+0x38>
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff f808 	bl	80004e0 <__aeabi_f2d>
 80014d0:	a347      	add	r3, pc, #284	; (adr r3, 80015f0 <Angle_To_Sector+0x140>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff fad7 	bl	8000a88 <__aeabi_dcmple>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <Angle_To_Sector+0x38>
		*sector=1;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e07f      	b.n	80015e8 <Angle_To_Sector+0x138>
	else if((angle_current_rad>1.047197) && (angle_current_rad<=2.094395)) //2/3*pi
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7fe fff9 	bl	80004e0 <__aeabi_f2d>
 80014ee:	a340      	add	r3, pc, #256	; (adr r3, 80015f0 <Angle_To_Sector+0x140>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7ff fadc 	bl	8000ab0 <__aeabi_dcmpgt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00e      	beq.n	800151c <Angle_To_Sector+0x6c>
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7fe ffee 	bl	80004e0 <__aeabi_f2d>
 8001504:	a33c      	add	r3, pc, #240	; (adr r3, 80015f8 <Angle_To_Sector+0x148>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff fabd 	bl	8000a88 <__aeabi_dcmple>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <Angle_To_Sector+0x6c>
		*sector=2;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2202      	movs	r2, #2
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e065      	b.n	80015e8 <Angle_To_Sector+0x138>
	else if((angle_current_rad>2.094395) && (angle_current_rad<=3.141593))
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7fe ffdf 	bl	80004e0 <__aeabi_f2d>
 8001522:	a335      	add	r3, pc, #212	; (adr r3, 80015f8 <Angle_To_Sector+0x148>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff fac2 	bl	8000ab0 <__aeabi_dcmpgt>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00e      	beq.n	8001550 <Angle_To_Sector+0xa0>
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7fe ffd4 	bl	80004e0 <__aeabi_f2d>
 8001538:	a331      	add	r3, pc, #196	; (adr r3, 8001600 <Angle_To_Sector+0x150>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7ff faa3 	bl	8000a88 <__aeabi_dcmple>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <Angle_To_Sector+0xa0>
		*sector=3;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2203      	movs	r2, #3
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e04b      	b.n	80015e8 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-3.141593) && (angle_current_rad<=-2.094395))
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7fe ffc5 	bl	80004e0 <__aeabi_f2d>
 8001556:	a32c      	add	r3, pc, #176	; (adr r3, 8001608 <Angle_To_Sector+0x158>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff faa8 	bl	8000ab0 <__aeabi_dcmpgt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00e      	beq.n	8001584 <Angle_To_Sector+0xd4>
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7fe ffba 	bl	80004e0 <__aeabi_f2d>
 800156c:	a328      	add	r3, pc, #160	; (adr r3, 8001610 <Angle_To_Sector+0x160>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff fa89 	bl	8000a88 <__aeabi_dcmple>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <Angle_To_Sector+0xd4>
		*sector=4;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2204      	movs	r2, #4
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e031      	b.n	80015e8 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-2.094395) && (angle_current_rad<=-1.047197))
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7fe ffab 	bl	80004e0 <__aeabi_f2d>
 800158a:	a321      	add	r3, pc, #132	; (adr r3, 8001610 <Angle_To_Sector+0x160>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff fa8e 	bl	8000ab0 <__aeabi_dcmpgt>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00e      	beq.n	80015b8 <Angle_To_Sector+0x108>
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7fe ffa0 	bl	80004e0 <__aeabi_f2d>
 80015a0:	a31d      	add	r3, pc, #116	; (adr r3, 8001618 <Angle_To_Sector+0x168>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff fa6f 	bl	8000a88 <__aeabi_dcmple>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <Angle_To_Sector+0x108>
		*sector=5;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2205      	movs	r2, #5
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	e017      	b.n	80015e8 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7fe ff91 	bl	80004e0 <__aeabi_f2d>
 80015be:	a316      	add	r3, pc, #88	; (adr r3, 8001618 <Angle_To_Sector+0x168>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7ff fa74 	bl	8000ab0 <__aeabi_dcmpgt>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d100      	bne.n	80015d0 <Angle_To_Sector+0x120>
		*sector=6;
	else{}

}
 80015ce:	e00b      	b.n	80015e8 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 80015d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	d900      	bls.n	80015e0 <Angle_To_Sector+0x130>
}
 80015de:	e003      	b.n	80015e8 <Angle_To_Sector+0x138>
		*sector=6;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2206      	movs	r2, #6
 80015e4:	701a      	strb	r2, [r3, #0]
}
 80015e6:	e7ff      	b.n	80015e8 <Angle_To_Sector+0x138>
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	a437824d 	.word	0xa437824d
 80015f4:	3ff0c151 	.word	0x3ff0c151
 80015f8:	2a6f3f53 	.word	0x2a6f3f53
 80015fc:	4000c152 	.word	0x4000c152
 8001600:	82c2bd7f 	.word	0x82c2bd7f
 8001604:	400921fb 	.word	0x400921fb
 8001608:	82c2bd7f 	.word	0x82c2bd7f
 800160c:	c00921fb 	.word	0xc00921fb
 8001610:	2a6f3f53 	.word	0x2a6f3f53
 8001614:	c000c152 	.word	0xc000c152
 8001618:	a437824d 	.word	0xa437824d
 800161c:	bff0c151 	.word	0xbff0c151

08001620 <SVPWM>:


void SVPWM(uint8_t sector,float32_t angle_current_rad,float32_t Vref, float32_t T[], float32_t T_gate[], float32_t *S1,float32_t *S2,float32_t *S3)
{
 8001620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	ed87 0a04 	vstr	s0, [r7, #16]
 800162c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	4603      	mov	r3, r0
 8001638:	75fb      	strb	r3, [r7, #23]

	T[1]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((sector * 1.047197) - (angle_current_rad)); /// pi/3 = 1,0472
 800163a:	edd7 7a03 	vldr	s15, [r7, #12]
 800163e:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8001900 <SVPWM+0x2e0>
 8001642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001646:	ee17 0a90 	vmov	r0, s15
 800164a:	f7fe ff49 	bl	80004e0 <__aeabi_f2d>
 800164e:	a3a6      	add	r3, pc, #664	; (adr r3, 80018e8 <SVPWM+0x2c8>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7ff f8c6 	bl	80007e4 <__aeabi_ddiv>
 8001658:	4603      	mov	r3, r0
 800165a:	460c      	mov	r4, r1
 800165c:	4618      	mov	r0, r3
 800165e:	4621      	mov	r1, r4
 8001660:	a3a3      	add	r3, pc, #652	; (adr r3, 80018f0 <SVPWM+0x2d0>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ff93 	bl	8000590 <__aeabi_dmul>
 800166a:	4603      	mov	r3, r0
 800166c:	460c      	mov	r4, r1
 800166e:	4625      	mov	r5, r4
 8001670:	461c      	mov	r4, r3
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff21 	bl	80004bc <__aeabi_i2d>
 800167a:	a39f      	add	r3, pc, #636	; (adr r3, 80018f8 <SVPWM+0x2d8>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ff86 	bl	8000590 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4690      	mov	r8, r2
 800168a:	4699      	mov	r9, r3
 800168c:	6938      	ldr	r0, [r7, #16]
 800168e:	f7fe ff27 	bl	80004e0 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4640      	mov	r0, r8
 8001698:	4649      	mov	r1, r9
 800169a:	f7fe fdc1 	bl	8000220 <__aeabi_dsub>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa0d 	bl	8000ac4 <__aeabi_d2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	ee00 3a10 	vmov	s0, r3
 80016b0:	f008 f880 	bl	80097b4 <arm_sin_f32>
 80016b4:	ee10 3a10 	vmov	r3, s0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff11 	bl	80004e0 <__aeabi_f2d>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4620      	mov	r0, r4
 80016c4:	4629      	mov	r1, r5
 80016c6:	f7fe ff63 	bl	8000590 <__aeabi_dmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	460c      	mov	r4, r1
 80016ce:	4619      	mov	r1, r3
 80016d0:	4622      	mov	r2, r4
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1d1c      	adds	r4, r3, #4
 80016d6:	4608      	mov	r0, r1
 80016d8:	4611      	mov	r1, r2
 80016da:	f7ff f9f3 	bl	8000ac4 <__aeabi_d2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	6023      	str	r3, [r4, #0]
	T[2]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((-(sector-1) * 1.047197) +  angle_current_rad) ;
 80016e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e6:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001900 <SVPWM+0x2e0>
 80016ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ee:	ee17 0a90 	vmov	r0, s15
 80016f2:	f7fe fef5 	bl	80004e0 <__aeabi_f2d>
 80016f6:	a37c      	add	r3, pc, #496	; (adr r3, 80018e8 <SVPWM+0x2c8>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7ff f872 	bl	80007e4 <__aeabi_ddiv>
 8001700:	4603      	mov	r3, r0
 8001702:	460c      	mov	r4, r1
 8001704:	4618      	mov	r0, r3
 8001706:	4621      	mov	r1, r4
 8001708:	a379      	add	r3, pc, #484	; (adr r3, 80018f0 <SVPWM+0x2d0>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe ff3f 	bl	8000590 <__aeabi_dmul>
 8001712:	4603      	mov	r3, r0
 8001714:	460c      	mov	r4, r1
 8001716:	4625      	mov	r5, r4
 8001718:	461c      	mov	r4, r3
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	f1c3 0301 	rsb	r3, r3, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fecb 	bl	80004bc <__aeabi_i2d>
 8001726:	a374      	add	r3, pc, #464	; (adr r3, 80018f8 <SVPWM+0x2d8>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff30 	bl	8000590 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4690      	mov	r8, r2
 8001736:	4699      	mov	r9, r3
 8001738:	6938      	ldr	r0, [r7, #16]
 800173a:	f7fe fed1 	bl	80004e0 <__aeabi_f2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4640      	mov	r0, r8
 8001744:	4649      	mov	r1, r9
 8001746:	f7fe fd6d 	bl	8000224 <__adddf3>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff f9b7 	bl	8000ac4 <__aeabi_d2f>
 8001756:	4603      	mov	r3, r0
 8001758:	ee00 3a10 	vmov	s0, r3
 800175c:	f008 f82a 	bl	80097b4 <arm_sin_f32>
 8001760:	ee10 3a10 	vmov	r3, s0
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe febb 	bl	80004e0 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe ff0d 	bl	8000590 <__aeabi_dmul>
 8001776:	4603      	mov	r3, r0
 8001778:	460c      	mov	r4, r1
 800177a:	4619      	mov	r1, r3
 800177c:	4622      	mov	r2, r4
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f103 0408 	add.w	r4, r3, #8
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	f7ff f99c 	bl	8000ac4 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	6023      	str	r3, [r4, #0]
	T[0]=sv_Tz-T[1]-T[2];
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	3304      	adds	r3, #4
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001900 <SVPWM+0x2e0>
 800179c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3308      	adds	r3, #8
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	edc3 7a00 	vstr	s15, [r3]

	T_gate[0]= (T[0]/2);
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	edc3 7a00 	vstr	s15, [r3]
	T_gate[1]= T[1]+(T_gate[0]);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3304      	adds	r3, #4
 80017ca:	ed93 7a00 	vldr	s14, [r3]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3304      	adds	r3, #4
 80017d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	T_gate[2]= T[2]+(T_gate[0]);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	3308      	adds	r3, #8
 80017e4:	ed93 7a00 	vldr	s14, [r3]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3308      	adds	r3, #8
 80017f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f6:	edc3 7a00 	vstr	s15, [r3]
	T_gate[3]= T[1]+T[2]+(T_gate[0]);
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3304      	adds	r3, #4
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3308      	adds	r3, #8
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	330c      	adds	r3, #12
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	edc3 7a00 	vstr	s15, [r3]


	if(sector == 1)
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10c      	bne.n	8001840 <SVPWM+0x220>
	{
		*S1=T_gate[3];
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[2];
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001834:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	601a      	str	r2, [r3, #0]
		*S1=T_gate[3];
		*S2=T_gate[0];
		*S3=T_gate[1];
	}
	else{}
}
 800183e:	e04e      	b.n	80018de <SVPWM+0x2be>
	else if(sector == 2)
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d10c      	bne.n	8001860 <SVPWM+0x240>
		*S1=T_gate[1];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001854:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	e03e      	b.n	80018de <SVPWM+0x2be>
	else if(sector == 3)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d10c      	bne.n	8001880 <SVPWM+0x260>
		*S1=T_gate[0];
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001874:	601a      	str	r2, [r3, #0]
		*S3=T_gate[2];
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	e02e      	b.n	80018de <SVPWM+0x2be>
	else if(sector == 4)
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	2b04      	cmp	r3, #4
 8001884:	d10c      	bne.n	80018a0 <SVPWM+0x280>
		*S1=T_gate[0];
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[1];
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001894:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	e01e      	b.n	80018de <SVPWM+0x2be>
	else if(sector == 5)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d10c      	bne.n	80018c0 <SVPWM+0x2a0>
		*S1=T_gate[2];
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	e00e      	b.n	80018de <SVPWM+0x2be>
	else if(sector == 6)
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d10b      	bne.n	80018de <SVPWM+0x2be>
		*S1=T_gate[3];
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d4:	601a      	str	r2, [r3, #0]
		*S3=T_gate[1];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018e8:	0f9096bc 	.word	0x0f9096bc
 80018ec:	402bb67a 	.word	0x402bb67a
 80018f0:	9999999a 	.word	0x9999999a
 80018f4:	3fe99999 	.word	0x3fe99999
 80018f8:	a437824d 	.word	0xa437824d
 80018fc:	3ff0c151 	.word	0x3ff0c151
 8001900:	447a0000 	.word	0x447a0000

08001904 <HAL_ADCEx_InjectedConvCpltCallback>:


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]


	index_event_adc++;
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a21      	ldr	r2, [pc, #132]	; (8001998 <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 8001914:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001916:	2109      	movs	r1, #9
 8001918:	4820      	ldr	r0, [pc, #128]	; (800199c <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800191a:	f002 f845 	bl	80039a8 <HAL_ADCEx_InjectedGetValue>
 800191e:	4602      	mov	r2, r0
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_ADCEx_InjectedConvCpltCallback+0x9c>)
 8001922:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8001924:	bf00      	nop
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1b      	ldr	r2, [pc, #108]	; (800199c <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f5      	bne.n	8001926 <HAL_ADCEx_InjectedConvCpltCallback+0x22>
    adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800193a:	f240 110f 	movw	r1, #271	; 0x10f
 800193e:	4817      	ldr	r0, [pc, #92]	; (800199c <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 8001940:	f002 f832 	bl	80039a8 <HAL_ADCEx_InjectedGetValue>
 8001944:	4602      	mov	r2, r0
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_ADCEx_InjectedConvCpltCallback+0xa0>)
 8001948:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 800194a:	bf00      	nop
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f5      	bne.n	800194c <HAL_ADCEx_InjectedConvCpltCallback+0x48>
	adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001960:	2109      	movs	r1, #9
 8001962:	4811      	ldr	r0, [pc, #68]	; (80019a8 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 8001964:	f002 f820 	bl	80039a8 <HAL_ADCEx_InjectedGetValue>
 8001968:	4602      	mov	r2, r0
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_ADCEx_InjectedConvCpltCallback+0xa8>)
 800196c:	601a      	str	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 800196e:	bf00      	nop
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f5      	bne.n	8001970 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
	//adc_V =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
	//while((hadc2.Instance->ISR &= (0x1<<5))!=0){}

	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 8001986:	f001 ff29 	bl	80037dc <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <HAL_ADCEx_InjectedConvCpltCallback+0xa4>)
 800198c:	f001 ff26 	bl	80037dc <HAL_ADCEx_InjectedStart_IT>

}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000250 	.word	0x20000250
 800199c:	20000100 	.word	0x20000100
 80019a0:	200001f0 	.word	0x200001f0
 80019a4:	20000190 	.word	0x20000190
 80019a8:	20000094 	.word	0x20000094
 80019ac:	2000025c 	.word	0x2000025c

080019b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c0:	d120      	bne.n	8001a04 <HAL_GPIO_EXTI_Callback+0x54>
	{
		if(start==0)
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x5c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_GPIO_EXTI_Callback+0x30>
		{
			start=1;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x5c>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 80019d2:	480f      	ldr	r0, [pc, #60]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x60>)
 80019d4:	f004 f93a 	bl	8005c4c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim1);
 80019d8:	480e      	ldr	r0, [pc, #56]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x64>)
 80019da:	f004 f937 	bl	8005c4c <HAL_TIM_Base_Start_IT>
			TIM1->CCR1=0;
			TIM1->CCR2=0;
			TIM1->CCR3=0;
		}
	}
}
 80019de:	e011      	b.n	8001a04 <HAL_GPIO_EXTI_Callback+0x54>
			start=0;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x5c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 80019e6:	480a      	ldr	r0, [pc, #40]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x60>)
 80019e8:	f004 f966 	bl	8005cb8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 80019ec:	4809      	ldr	r0, [pc, #36]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x64>)
 80019ee:	f004 f963 	bl	8005cb8 <HAL_TIM_Base_Stop_IT>
			TIM1->CCR1=0;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x68>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x68>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x68>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000268 	.word	0x20000268
 8001a10:	200003c4 	.word	0x200003c4
 8001a14:	20000378 	.word	0x20000378
 8001a18:	40012c00 	.word	0x40012c00
 8001a1c:	00000000 	.word	0x00000000

08001a20 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a66      	ldr	r2, [pc, #408]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d16b      	bne.n	8001b0a <HAL_TIM_PeriodElapsedCallback+0xea>
	{
		if(TIM1->CNT >= ((TIM1->ARR)-10))
 8001a32:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a36:	4b64      	ldr	r3, [pc, #400]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	3b0a      	subs	r3, #10
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d364      	bcc.n	8001b0a <HAL_TIM_PeriodElapsedCallback+0xea>
		{
		arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 8001a40:	4b62      	ldr	r3, [pc, #392]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	617a      	str	r2, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a52:	60bb      	str	r3, [r7, #8]
    *pIalpha = Ia;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8001a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a5e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001bdc <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8001a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a6a:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001be0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8001a6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	edc3 7a00 	vstr	s15, [r3]
		AlphaBeta_To_Angle_Vref(Ialpha, Ibeta, &angle_current_rad, &Vref);
 8001a7c:	4b55      	ldr	r3, [pc, #340]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a84:	ed93 7a00 	vldr	s14, [r3]
 8001a88:	4956      	ldr	r1, [pc, #344]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001a8a:	4857      	ldr	r0, [pc, #348]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001a8c:	eef0 0a47 	vmov.f32	s1, s14
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	f7ff fcb4 	bl	8001400 <AlphaBeta_To_Angle_Vref>
		Angle_To_Sector(angle_current_rad, &sector);
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	4853      	ldr	r0, [pc, #332]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	f7ff fd04 	bl	80014b0 <Angle_To_Sector>
		SVPWM(sector, angle_current_rad , Vref, sv_T, sv_T_gate, &sv_S1, &sv_S2, &sv_S3);
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2d8      	uxtb	r0, r3
 8001aae:	4b4e      	ldr	r3, [pc, #312]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	4b4b      	ldr	r3, [pc, #300]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	4b4d      	ldr	r3, [pc, #308]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001ac4:	4a4d      	ldr	r2, [pc, #308]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001ac6:	494e      	ldr	r1, [pc, #312]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001ac8:	eef0 0a47 	vmov.f32	s1, s14
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	f7ff fda6 	bl	8001620 <SVPWM>
		TIM1->CCR1=sv_S1;
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae0:	ee17 2a90 	vmov	r2, s15
 8001ae4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=sv_S2;
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af2:	ee17 2a90 	vmov	r2, s15
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=sv_S3;
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b04:	ee17 2a90 	vmov	r2, s15
 8001b08:	63da      	str	r2, [r3, #60]	; 0x3c
		}


	}

	if(htim->Instance==TIM2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b12:	d14a      	bne.n	8001baa <HAL_TIM_PeriodElapsedCallback+0x18a>
	{
		t+=0.001;
 8001b14:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fce1 	bl	80004e0 <__aeabi_f2d>
 8001b1e:	a326      	add	r3, pc, #152	; (adr r3, 8001bb8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fb7e 	bl	8000224 <__adddf3>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	4621      	mov	r1, r4
 8001b30:	f7fe ffc8 	bl	8000ac4 <__aeabi_d2f>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b38:	601a      	str	r2, [r3, #0]
		Ia=Vdc* arm_sin_f32( 10* PI * t);
 8001b3a:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001c08 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4c:	f007 fe32 	bl	80097b4 <arm_sin_f32>
 8001b50:	eeb0 7a40 	vmov.f32	s14, s0
 8001b54:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8001b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
		Ib=Vdc* arm_sin_f32( ( 10 * PI *t) - 2.094395);  // 2/3*pi = 2.094395
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001c08 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b70:	ee17 0a90 	vmov	r0, s15
 8001b74:	f7fe fcb4 	bl	80004e0 <__aeabi_f2d>
 8001b78:	a311      	add	r3, pc, #68	; (adr r3, 8001bc0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fb4f 	bl	8000220 <__aeabi_dsub>
 8001b82:	4603      	mov	r3, r0
 8001b84:	460c      	mov	r4, r1
 8001b86:	4618      	mov	r0, r3
 8001b88:	4621      	mov	r1, r4
 8001b8a:	f7fe ff9b 	bl	8000ac4 <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	ee00 3a10 	vmov	s0, r3
 8001b94:	f007 fe0e 	bl	80097b4 <arm_sin_f32>
 8001b98:	eeb0 7a40 	vmov.f32	s14, s0
 8001b9c:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8001ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001ba6:	edc3 7a00 	vstr	s15, [r3]

	}



}
 8001baa:	bf00      	nop
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bbc:	3f50624d 	.word	0x3f50624d
 8001bc0:	2a6f3f53 	.word	0x2a6f3f53
 8001bc4:	4000c152 	.word	0x4000c152
 8001bc8:	40012c00 	.word	0x40012c00
 8001bcc:	20000178 	.word	0x20000178
 8001bd0:	200001ec 	.word	0x200001ec
 8001bd4:	20000234 	.word	0x20000234
 8001bd8:	2000022c 	.word	0x2000022c
 8001bdc:	3f13cd3a 	.word	0x3f13cd3a
 8001be0:	3f93cd3a 	.word	0x3f93cd3a
 8001be4:	20000224 	.word	0x20000224
 8001be8:	200001e8 	.word	0x200001e8
 8001bec:	200001f4 	.word	0x200001f4
 8001bf0:	2000018c 	.word	0x2000018c
 8001bf4:	200001c4 	.word	0x200001c4
 8001bf8:	200001dc 	.word	0x200001dc
 8001bfc:	2000017c 	.word	0x2000017c
 8001c00:	200001d0 	.word	0x200001d0
 8001c04:	2000016c 	.word	0x2000016c
 8001c08:	41fb53d2 	.word	0x41fb53d2

08001c0c <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000


		}
	}

}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
	{
		//HAL_UART_Receive_IT(&huart2, &recive, 1);

	}
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c40:	f000 fdb7 	bl	80027b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c44:	f000 f817 	bl	8001c76 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c48:	f7ff faba 	bl	80011c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001c4c:	f000 fa2c 	bl	80020a8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001c50:	f000 fb56 	bl	8002300 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001c54:	f000 fcec 	bl	8002630 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001c58:	f000 fb06 	bl	8002268 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001c5c:	f7ff f902 	bl	8000e64 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c60:	f7ff f994 	bl	8000f8c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8001c64:	f000 f874 	bl	8001d50 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001c68:	f000 f8a0 	bl	8001dac <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001c6c:	f000 f8cc 	bl	8001e08 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


    start_up();
 8001c70:	f7ff fb00 	bl	8001274 <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <main+0x38>

08001c76 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b0a4      	sub	sp, #144	; 0x90
 8001c7a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c80:	2238      	movs	r2, #56	; 0x38
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f007 fe4b 	bl	8009920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2244      	movs	r2, #68	; 0x44
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f007 fe3d 	bl	8009920 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f002 ffb0 	bl	8004c0c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cac:	2301      	movs	r3, #1
 8001cae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001cc2:	2350      	movs	r3, #80	; 0x50
 8001cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 f838 	bl	8004d54 <HAL_RCC_OscConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001cea:	f000 f82a 	bl	8001d42 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cee:	230f      	movs	r3, #15
 8001cf0:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d06:	2107      	movs	r1, #7
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fb3b 	bl	8005384 <HAL_RCC_ClockConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001d14:	f000 f815 	bl	8001d42 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001d18:	f248 0302 	movw	r3, #32770	; 0x8002
 8001d1c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fd46 	bl	80057bc <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d36:	f000 f804 	bl	8001d42 <Error_Handler>
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3790      	adds	r7, #144	; 0x90
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <MX_OPAMP1_Init+0x58>)
 8001d58:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d82:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_OPAMP1_Init+0x54>)
 8001d90:	f002 fe6c 	bl	8004a6c <HAL_OPAMP_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8001d9a:	f7ff ffd2 	bl	8001d42 <Error_Handler>
  }

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200002f0 	.word	0x200002f0
 8001da8:	40010300 	.word	0x40010300

08001dac <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001db2:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <MX_OPAMP2_Init+0x58>)
 8001db4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001dde:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_OPAMP2_Init+0x54>)
 8001dec:	f002 fe3e 	bl	8004a6c <HAL_OPAMP_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8001df6:	f7ff ffa4 	bl	8001d42 <Error_Handler>
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000278 	.word	0x20000278
 8001e04:	40010304 	.word	0x40010304

08001e08 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <MX_OPAMP3_Init+0x58>)
 8001e10:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e3a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_OPAMP3_Init+0x54>)
 8001e48:	f002 fe10 	bl	8004a6c <HAL_OPAMP_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8001e52:	f7ff ff76 	bl	8001d42 <Error_Handler>
  }

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200002b4 	.word	0x200002b4
 8001e60:	40010308 	.word	0x40010308

08001e64 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <HAL_OPAMP_MspInit+0xd8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d119      	bne.n	8001eba <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_OPAMP_MspInit+0xdc>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_OPAMP_MspInit+0xdc>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_OPAMP_MspInit+0xdc>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e9e:	230e      	movs	r3, #14
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb4:	f002 fc40 	bl	8004738 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001eb8:	e03b      	b.n	8001f32 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <HAL_OPAMP_MspInit+0xe0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d119      	bne.n	8001ef8 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_OPAMP_MspInit+0xdc>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_OPAMP_MspInit+0xdc>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_OPAMP_MspInit+0xdc>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001edc:	23e0      	movs	r3, #224	; 0xe0
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef2:	f002 fc21 	bl	8004738 <HAL_GPIO_Init>
}
 8001ef6:	e01c      	b.n	8001f32 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <HAL_OPAMP_MspInit+0xe4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d117      	bne.n	8001f32 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_OPAMP_MspInit+0xdc>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_OPAMP_MspInit+0xdc>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_OPAMP_MspInit+0xdc>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4807      	ldr	r0, [pc, #28]	; (8001f4c <HAL_OPAMP_MspInit+0xe8>)
 8001f2e:	f002 fc03 	bl	8004738 <HAL_GPIO_Init>
}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40010300 	.word	0x40010300
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010304 	.word	0x40010304
 8001f48:	40010308 	.word	0x40010308
 8001f4c:	48000400 	.word	0x48000400

08001f50 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5e:	6093      	str	r3, [r2, #8]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40007000 	.word	0x40007000

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6613      	str	r3, [r2, #96]	; 0x60
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001fa6:	f7ff ffd3 	bl	8001f50 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200c:	f000 fc24 	bl	8002858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <ADC1_2_IRQHandler+0x14>)
 800201a:	f000 fefd 	bl	8002e18 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800201e:	4803      	ldr	r0, [pc, #12]	; (800202c <ADC1_2_IRQHandler+0x18>)
 8002020:	f000 fefa 	bl	8002e18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000100 	.word	0x20000100
 800202c:	20000094 	.word	0x20000094

08002030 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002036:	f004 f8d4 	bl	80061e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000378 	.word	0x20000378

08002044 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <TIM2_IRQHandler+0x10>)
 800204a:	f004 f8ca 	bl	80061e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200003c4 	.word	0x200003c4

08002058 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <USART2_IRQHandler+0x10>)
 800205e:	f005 fbc9 	bl	80077f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000410 	.word	0x20000410

0800206c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002070:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002074:	f002 fce2 	bl	8004a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <SystemInit+0x28>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <SystemInit+0x28>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SystemInit+0x28>)
 8002092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002096:	609a      	str	r2, [r3, #8]
#endif
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b09c      	sub	sp, #112	; 0x70
 80020ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	2234      	movs	r2, #52	; 0x34
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f007 fc1c 	bl	8009920 <memset>

  htim1.Instance = TIM1;
 80020e8:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <MX_TIM1_Init+0x1b8>)
 80020ea:	4a5e      	ldr	r2, [pc, #376]	; (8002264 <MX_TIM1_Init+0x1bc>)
 80020ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020ee:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <MX_TIM1_Init+0x1b8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020f4:	4b5a      	ldr	r3, [pc, #360]	; (8002260 <MX_TIM1_Init+0x1b8>)
 80020f6:	2220      	movs	r2, #32
 80020f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80020fa:	4b59      	ldr	r3, [pc, #356]	; (8002260 <MX_TIM1_Init+0x1b8>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002100:	4b57      	ldr	r3, [pc, #348]	; (8002260 <MX_TIM1_Init+0x1b8>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002106:	4b56      	ldr	r3, [pc, #344]	; (8002260 <MX_TIM1_Init+0x1b8>)
 8002108:	2200      	movs	r2, #0
 800210a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210c:	4b54      	ldr	r3, [pc, #336]	; (8002260 <MX_TIM1_Init+0x1b8>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002112:	4853      	ldr	r0, [pc, #332]	; (8002260 <MX_TIM1_Init+0x1b8>)
 8002114:	f003 fd42 	bl	8005b9c <HAL_TIM_Base_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800211e:	f7ff fe10 	bl	8001d42 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002126:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002128:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800212c:	4619      	mov	r1, r3
 800212e:	484c      	ldr	r0, [pc, #304]	; (8002260 <MX_TIM1_Init+0x1b8>)
 8002130:	f004 fae6 	bl	8006700 <HAL_TIM_ConfigClockSource>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800213a:	f7ff fe02 	bl	8001d42 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800213e:	4848      	ldr	r0, [pc, #288]	; (8002260 <MX_TIM1_Init+0x1b8>)
 8002140:	f003 fde9 	bl	8005d16 <HAL_TIM_PWM_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800214a:	f7ff fdfa 	bl	8001d42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800214e:	2370      	movs	r3, #112	; 0x70
 8002150:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800215a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800215e:	4619      	mov	r1, r3
 8002160:	483f      	ldr	r0, [pc, #252]	; (8002260 <MX_TIM1_Init+0x1b8>)
 8002162:	f005 f891 	bl	8007288 <HAL_TIMEx_MasterConfigSynchronization>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800216c:	f7ff fde9 	bl	8001d42 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002170:	2360      	movs	r3, #96	; 0x60
 8002172:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002178:	2300      	movs	r3, #0
 800217a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800217c:	2300      	movs	r3, #0
 800217e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800218c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002190:	2200      	movs	r2, #0
 8002192:	4619      	mov	r1, r3
 8002194:	4832      	ldr	r0, [pc, #200]	; (8002260 <MX_TIM1_Init+0x1b8>)
 8002196:	f004 f9a3 	bl	80064e0 <HAL_TIM_PWM_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80021a0:	f7ff fdcf 	bl	8001d42 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021ac:	2204      	movs	r2, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	482b      	ldr	r0, [pc, #172]	; (8002260 <MX_TIM1_Init+0x1b8>)
 80021b2:	f004 f995 	bl	80064e0 <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80021bc:	f7ff fdc1 	bl	8001d42 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021c8:	2208      	movs	r2, #8
 80021ca:	4619      	mov	r1, r3
 80021cc:	4824      	ldr	r0, [pc, #144]	; (8002260 <MX_TIM1_Init+0x1b8>)
 80021ce:	f004 f987 	bl	80064e0 <HAL_TIM_PWM_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80021d8:	f7ff fdb3 	bl	8001d42 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80021dc:	2370      	movs	r3, #112	; 0x70
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021e4:	2300      	movs	r3, #0
 80021e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021ec:	220c      	movs	r2, #12
 80021ee:	4619      	mov	r1, r3
 80021f0:	481b      	ldr	r0, [pc, #108]	; (8002260 <MX_TIM1_Init+0x1b8>)
 80021f2:	f004 f975 	bl	80064e0 <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80021fc:	f7ff fda1 	bl	8001d42 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002204:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8002210:	2344      	movs	r3, #68	; 0x44
 8002212:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800221c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800222a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 8002230:	2303      	movs	r3, #3
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002234:	2300      	movs	r3, #0
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4807      	ldr	r0, [pc, #28]	; (8002260 <MX_TIM1_Init+0x1b8>)
 8002242:	f005 f8a3 	bl	800738c <HAL_TIMEx_ConfigBreakDeadTime>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 800224c:	f7ff fd79 	bl	8001d42 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <MX_TIM1_Init+0x1b8>)
 8002252:	f000 f965 	bl	8002520 <HAL_TIM_MspPostInit>

}
 8002256:	bf00      	nop
 8002258:	3770      	adds	r7, #112	; 0x70
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000378 	.word	0x20000378
 8002264:	40012c00 	.word	0x40012c00

08002268 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226e:	f107 0310 	add.w	r3, r7, #16
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_TIM2_Init+0x94>)
 8002288:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800228c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <MX_TIM2_Init+0x94>)
 8002290:	2200      	movs	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <MX_TIM2_Init+0x94>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <MX_TIM2_Init+0x94>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MX_TIM2_Init+0x94>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <MX_TIM2_Init+0x94>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022ac:	4813      	ldr	r0, [pc, #76]	; (80022fc <MX_TIM2_Init+0x94>)
 80022ae:	f003 fc75 	bl	8005b9c <HAL_TIM_Base_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022b8:	f7ff fd43 	bl	8001d42 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	4619      	mov	r1, r3
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <MX_TIM2_Init+0x94>)
 80022ca:	f004 fa19 	bl	8006700 <HAL_TIM_ConfigClockSource>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022d4:	f7ff fd35 	bl	8001d42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_TIM2_Init+0x94>)
 80022e6:	f004 ffcf 	bl	8007288 <HAL_TIMEx_MasterConfigSynchronization>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022f0:	f7ff fd27 	bl	8001d42 <Error_Handler>
  }

}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200003c4 	.word	0x200003c4

08002300 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2224      	movs	r2, #36	; 0x24
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f007 fb06 	bl	8009920 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	463b      	mov	r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <MX_TIM4_Init+0xa0>)
 8002320:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <MX_TIM4_Init+0xa4>)
 8002322:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <MX_TIM4_Init+0xa0>)
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <MX_TIM4_Init+0xa0>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <MX_TIM4_Init+0xa0>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <MX_TIM4_Init+0xa0>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <MX_TIM4_Init+0xa0>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <MX_TIM4_Init+0xa8>)
 8002344:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800234a:	2301      	movs	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800235a:	2301      	movs	r3, #1
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	4619      	mov	r1, r3
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <MX_TIM4_Init+0xa0>)
 800236e:	f003 fe05 	bl	8005f7c <HAL_TIM_Encoder_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002378:	f7ff fce3 	bl	8001d42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <MX_TIM4_Init+0xa0>)
 800238a:	f004 ff7d 	bl	8007288 <HAL_TIMEx_MasterConfigSynchronization>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002394:	f7ff fcd5 	bl	8001d42 <Error_Handler>
  }

}
 8002398:	bf00      	nop
 800239a:	3730      	adds	r7, #48	; 0x30
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000032c 	.word	0x2000032c
 80023a4:	40000800 	.word	0x40000800
 80023a8:	00010006 	.word	0x00010006

080023ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a29      	ldr	r2, [pc, #164]	; (8002470 <HAL_TIM_Base_MspInit+0xc4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d114      	bne.n	80023f8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ce:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_TIM_Base_MspInit+0xc8>)
 80023d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <HAL_TIM_Base_MspInit+0xc8>)
 80023d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023d8:	6613      	str	r3, [r2, #96]	; 0x60
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_TIM_Base_MspInit+0xc8>)
 80023dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	2019      	movs	r0, #25
 80023ec:	f002 f909 	bl	8004602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023f0:	2019      	movs	r0, #25
 80023f2:	f002 f920 	bl	8004636 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023f6:	e036      	b.n	8002466 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d131      	bne.n	8002466 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <HAL_TIM_Base_MspInit+0xc8>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_TIM_Base_MspInit+0xc8>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6593      	str	r3, [r2, #88]	; 0x58
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_TIM_Base_MspInit+0xc8>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_TIM_Base_MspInit+0xc8>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a15      	ldr	r2, [pc, #84]	; (8002474 <HAL_TIM_Base_MspInit+0xc8>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_TIM_Base_MspInit+0xc8>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8002432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800243c:	2302      	movs	r3, #2
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002444:	2301      	movs	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002452:	f002 f971 	bl	8004738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2103      	movs	r1, #3
 800245a:	201c      	movs	r0, #28
 800245c:	f002 f8d1 	bl	8004602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002460:	201c      	movs	r0, #28
 8002462:	f002 f8e8 	bl	8004636 <HAL_NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	; 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d138      	bne.n	800250c <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <HAL_TIM_Encoder_MspInit+0xa0>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <HAL_TIM_Encoder_MspInit+0xa0>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_TIM_Encoder_MspInit+0xa0>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_TIM_Encoder_MspInit+0xa0>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_TIM_Encoder_MspInit+0xa0>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_TIM_Encoder_MspInit+0xa0>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 80024ca:	23c0      	movs	r3, #192	; 0xc0
 80024cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024d2:	2302      	movs	r3, #2
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d6:	2302      	movs	r3, #2
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024da:	2302      	movs	r3, #2
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <HAL_TIM_Encoder_MspInit+0xa4>)
 80024e6:	f002 f927 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 80024ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f8:	2302      	movs	r3, #2
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024fc:	2302      	movs	r3, #2
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <HAL_TIM_Encoder_MspInit+0xa4>)
 8002508:	f002 f916 	bl	8004738 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800250c:	bf00      	nop
 800250e:	3728      	adds	r7, #40	; 0x28
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40000800 	.word	0x40000800
 8002518:	40021000 	.word	0x40021000
 800251c:	48000400 	.word	0x48000400

08002520 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a38      	ldr	r2, [pc, #224]	; (8002620 <HAL_TIM_MspPostInit+0x100>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d169      	bne.n	8002616 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <HAL_TIM_MspPostInit+0x104>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	4a37      	ldr	r2, [pc, #220]	; (8002624 <HAL_TIM_MspPostInit+0x104>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800254e:	4b35      	ldr	r3, [pc, #212]	; (8002624 <HAL_TIM_MspPostInit+0x104>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255a:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_TIM_MspPostInit+0x104>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	4a31      	ldr	r2, [pc, #196]	; (8002624 <HAL_TIM_MspPostInit+0x104>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002566:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_TIM_MspPostInit+0x104>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_TIM_MspPostInit+0x104>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	4a2b      	ldr	r2, [pc, #172]	; (8002624 <HAL_TIM_MspPostInit+0x104>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_TIM_MspPostInit+0x104>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800258a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002594:	2302      	movs	r3, #2
 8002596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800259c:	2304      	movs	r3, #4
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4619      	mov	r1, r3
 80025a6:	4820      	ldr	r0, [pc, #128]	; (8002628 <HAL_TIM_MspPostInit+0x108>)
 80025a8:	f002 f8c6 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ba:	2302      	movs	r3, #2
 80025bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80025be:	2304      	movs	r3, #4
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	4818      	ldr	r0, [pc, #96]	; (800262c <HAL_TIM_MspPostInit+0x10c>)
 80025ca:	f002 f8b5 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80025ce:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80025d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025d8:	2302      	movs	r3, #2
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025dc:	2302      	movs	r3, #2
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80025e0:	2306      	movs	r3, #6
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4619      	mov	r1, r3
 80025ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ee:	f002 f8a3 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002604:	230b      	movs	r3, #11
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002612:	f002 f891 	bl	8004738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40021000 	.word	0x40021000
 8002628:	48000800 	.word	0x48000800
 800262c:	48000400 	.word	0x48000400

08002630 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002636:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <MX_USART2_UART_Init+0x94>)
 8002638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800263c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002642:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002656:	220c      	movs	r2, #12
 8002658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265a:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 8002674:	2200      	movs	r2, #0
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002678:	4811      	ldr	r0, [pc, #68]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800267a:	f004 ff92 	bl	80075a2 <HAL_UART_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002684:	f7ff fb5d 	bl	8001d42 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002688:	2100      	movs	r1, #0
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800268c:	f006 ff77 	bl	800957e <HAL_UARTEx_SetTxFifoThreshold>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002696:	f7ff fb54 	bl	8001d42 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800269a:	2100      	movs	r1, #0
 800269c:	4808      	ldr	r0, [pc, #32]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 800269e:	f006 ffac 	bl	80095fa <HAL_UARTEx_SetRxFifoThreshold>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80026a8:	f7ff fb4b 	bl	8001d42 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <MX_USART2_UART_Init+0x90>)
 80026ae:	f006 ff2d 	bl	800950c <HAL_UARTEx_DisableFifoMode>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80026b8:	f7ff fb43 	bl	8001d42 <Error_Handler>
  }

}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000410 	.word	0x20000410
 80026c4:	40004400 	.word	0x40004400

080026c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_UART_MspInit+0x8c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d12f      	bne.n	800274a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_UART_MspInit+0x90>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_UART_MspInit+0x90>)
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	6593      	str	r3, [r2, #88]	; 0x58
 80026f6:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_UART_MspInit+0x90>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_UART_MspInit+0x90>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4a14      	ldr	r2, [pc, #80]	; (8002758 <HAL_UART_MspInit+0x90>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_UART_MspInit+0x90>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800271a:	2318      	movs	r3, #24
 800271c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800272a:	2307      	movs	r3, #7
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	4619      	mov	r1, r3
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <HAL_UART_MspInit+0x94>)
 8002736:	f001 ffff 	bl	8004738 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2108      	movs	r1, #8
 800273e:	2026      	movs	r0, #38	; 0x26
 8002740:	f001 ff5f 	bl	8004602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002744:	2026      	movs	r0, #38	; 0x26
 8002746:	f001 ff76 	bl	8004636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800274a:	bf00      	nop
 800274c:	3728      	adds	r7, #40	; 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40004400 	.word	0x40004400
 8002758:	40021000 	.word	0x40021000
 800275c:	48000400 	.word	0x48000400

08002760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002760:	480d      	ldr	r0, [pc, #52]	; (8002798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002762:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002764:	480d      	ldr	r0, [pc, #52]	; (800279c <LoopForever+0x6>)
  ldr r1, =_edata
 8002766:	490e      	ldr	r1, [pc, #56]	; (80027a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002768:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <LoopForever+0xe>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800277c:	4c0b      	ldr	r4, [pc, #44]	; (80027ac <LoopForever+0x16>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800278a:	f7ff fc77 	bl	800207c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800278e:	f007 f8a3 	bl	80098d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002792:	f7ff fa53 	bl	8001c3c <main>

08002796 <LoopForever>:

LoopForever:
    b LoopForever
 8002796:	e7fe      	b.n	8002796 <LoopForever>
  ldr   r0, =_estack
 8002798:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800279c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027a4:	0800a570 	.word	0x0800a570
  ldr r2, =_sbss
 80027a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80027ac:	200004a0 	.word	0x200004a0

080027b0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <COMP1_2_3_IRQHandler>

080027b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027bc:	2003      	movs	r0, #3
 80027be:	f001 ff15 	bl	80045ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027c2:	2000      	movs	r0, #0
 80027c4:	f000 f80e 	bl	80027e4 <HAL_InitTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	71fb      	strb	r3, [r7, #7]
 80027d2:	e001      	b.n	80027d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027d4:	f7ff fbcc 	bl	8001f70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027d8:	79fb      	ldrb	r3, [r7, #7]

}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_InitTick+0x68>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d022      	beq.n	800283e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_InitTick+0x6c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_InitTick+0x68>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002804:	fbb1 f3f3 	udiv	r3, r1, r3
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	4618      	mov	r0, r3
 800280e:	f001 ff20 	bl	8004652 <HAL_SYSTICK_Config>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10f      	bne.n	8002838 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b0f      	cmp	r3, #15
 800281c:	d809      	bhi.n	8002832 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800281e:	2200      	movs	r2, #0
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	f04f 30ff 	mov.w	r0, #4294967295
 8002826:	f001 feec 	bl	8004602 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_InitTick+0x70>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	e007      	b.n	8002842 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e004      	b.n	8002842 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e001      	b.n	8002842 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000008 	.word	0x20000008
 8002850:	20000000 	.word	0x20000000
 8002854:	20000004 	.word	0x20000004

08002858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_IncTick+0x1c>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_IncTick+0x20>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4413      	add	r3, r2
 8002866:	4a03      	ldr	r2, [pc, #12]	; (8002874 <HAL_IncTick+0x1c>)
 8002868:	6013      	str	r3, [r2, #0]
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	2000049c 	.word	0x2000049c
 8002878:	20000008 	.word	0x20000008

0800287c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return uwTick;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_GetTick+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000049c 	.word	0x2000049c

08002894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff ffee 	bl	800287c <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d004      	beq.n	80028b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_Delay+0x40>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4413      	add	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028b8:	bf00      	nop
 80028ba:	f7ff ffdf 	bl	800287c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d8f7      	bhi.n	80028ba <HAL_Delay+0x26>
  {
  }
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000008 	.word	0x20000008

080028d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	609a      	str	r2, [r3, #8]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002930:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 031f 	and.w	r3, r3, #31
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002992:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6093      	str	r3, [r2, #8]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ba:	d101      	bne.n	80029c0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a0a:	d101      	bne.n	8002a10 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <LL_ADC_IsEnabled+0x18>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <LL_ADC_IsEnabled+0x1a>
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d101      	bne.n	8002aac <LL_ADC_IsDisableOngoing+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_ADC_IsDisableOngoing+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d101      	bne.n	8002ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d101      	bne.n	8002af8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e16b      	b.n	8002dfa <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7fe fa9d 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff2c 	bl	80029a6 <LL_ADC_IsDeepPowerDownEnabled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff12 	bl	8002982 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff47 	bl	80029f6 <LL_ADC_IsInternalRegulatorEnabled>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d113      	bne.n	8002b96 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff2b 	bl	80029ce <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b78:	4ba2      	ldr	r3, [pc, #648]	; (8002e04 <HAL_ADC_Init+0x2fc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	4aa2      	ldr	r2, [pc, #648]	; (8002e08 <HAL_ADC_Init+0x300>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	099b      	lsrs	r3, r3, #6
 8002b86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f9      	bne.n	8002b8a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff2b 	bl	80029f6 <LL_ADC_IsInternalRegulatorEnabled>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10d      	bne.n	8002bc2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff77 	bl	8002aba <LL_ADC_REG_IsConversionOngoing>
 8002bcc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 8106 	bne.w	8002de8 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 8102 	bne.w	8002de8 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bec:	f043 0202 	orr.w	r2, r3, #2
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff38 	bl	8002a6e <LL_ADC_IsEnabled>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d111      	bne.n	8002c28 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c08:	f7ff ff31 	bl	8002a6e <LL_ADC_IsEnabled>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	487f      	ldr	r0, [pc, #508]	; (8002e0c <HAL_ADC_Init+0x304>)
 8002c10:	f7ff ff2d 	bl	8002a6e <LL_ADC_IsEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4323      	orrs	r3, r4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4619      	mov	r1, r3
 8002c22:	487b      	ldr	r0, [pc, #492]	; (8002e10 <HAL_ADC_Init+0x308>)
 8002c24:	f7ff fe58 	bl	80028d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7f5b      	ldrb	r3, [r3, #29]
 8002c2c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c32:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c38:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c3e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c46:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d106      	bne.n	8002c64 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	045b      	lsls	r3, r3, #17
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <HAL_ADC_Init+0x30c>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff03 	bl	8002aba <LL_ADC_REG_IsConversionOngoing>
 8002cb4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff10 	bl	8002ae0 <LL_ADC_INJ_IsConversionOngoing>
 8002cc0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d16d      	bne.n	8002da4 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d16a      	bne.n	8002da4 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cd2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cda:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cea:	f023 0302 	bic.w	r3, r3, #2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	69b9      	ldr	r1, [r7, #24]
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d017      	beq.n	8002d30 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6911      	ldr	r1, [r2, #16]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002d2e:	e013      	b.n	8002d58 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d118      	bne.n	8002d94 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d78:	4311      	orrs	r1, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d84:	430a      	orrs	r2, r1
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	e007      	b.n	8002da4 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d10c      	bne.n	8002dc6 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f023 010f 	bic.w	r1, r3, #15
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	1e5a      	subs	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc4:	e007      	b.n	8002dd6 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 020f 	bic.w	r2, r2, #15
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002de6:	e007      	b.n	8002df8 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	f043 0210 	orr.w	r2, r3, #16
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000000 	.word	0x20000000
 8002e08:	053e2d63 	.word	0x053e2d63
 8002e0c:	50000100 	.word	0x50000100
 8002e10:	50000300 	.word	0x50000300
 8002e14:	fff04007 	.word	0xfff04007

08002e18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e34:	4883      	ldr	r0, [pc, #524]	; (8003044 <HAL_ADC_IRQHandler+0x22c>)
 8002e36:	f7ff fd88 	bl	800294a <LL_ADC_GetMultimode>
 8002e3a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d017      	beq.n	8002e76 <HAL_ADC_IRQHandler+0x5e>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d012      	beq.n	8002e76 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fded 	bl	8003a48 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2202      	movs	r2, #2
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADC_IRQHandler+0x72>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8085 	beq.w	8002fa0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d07f      	beq.n	8002fa0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fd1e 	bl	80028fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d064      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a5e      	ldr	r2, [pc, #376]	; (8003048 <HAL_ADC_IRQHandler+0x230>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d002      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0xc0>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e001      	b.n	8002edc <HAL_ADC_IRQHandler+0xc4>
 8002ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d008      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d002      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2b09      	cmp	r3, #9
 8002ef4:	d104      	bne.n	8002f00 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	623b      	str	r3, [r7, #32]
 8002efe:	e00d      	b.n	8002f1c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a50      	ldr	r2, [pc, #320]	; (8003048 <HAL_ADC_IRQHandler+0x230>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d002      	beq.n	8002f10 <HAL_ADC_IRQHandler+0xf8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	e001      	b.n	8002f14 <HAL_ADC_IRQHandler+0xfc>
 8002f10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f14:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d135      	bne.n	8002f92 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d12e      	bne.n	8002f92 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fdbe 	bl	8002aba <LL_ADC_REG_IsConversionOngoing>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11a      	bne.n	8002f7a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 020c 	bic.w	r2, r2, #12
 8002f52:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d112      	bne.n	8002f92 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f78:	e00b      	b.n	8002f92 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	f043 0210 	orr.w	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f95a 	bl	800324c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	220c      	movs	r2, #12
 8002f9e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x19c>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 809e 	beq.w	80030fc <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8098 	beq.w	80030fc <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fc9b 	bl	8002924 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002fee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fc82 	bl	80028fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ffa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a11      	ldr	r2, [pc, #68]	; (8003048 <HAL_ADC_IRQHandler+0x230>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d002      	beq.n	800300c <HAL_ADC_IRQHandler+0x1f4>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e001      	b.n	8003010 <HAL_ADC_IRQHandler+0x1f8>
 800300c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	4293      	cmp	r3, r2
 8003016:	d008      	beq.n	800302a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b06      	cmp	r3, #6
 8003022:	d002      	beq.n	800302a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b07      	cmp	r3, #7
 8003028:	d104      	bne.n	8003034 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	e011      	b.n	8003058 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a03      	ldr	r2, [pc, #12]	; (8003048 <HAL_ADC_IRQHandler+0x230>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d006      	beq.n	800304c <HAL_ADC_IRQHandler+0x234>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	e005      	b.n	8003050 <HAL_ADC_IRQHandler+0x238>
 8003044:	50000300 	.word	0x50000300
 8003048:	50000100 	.word	0x50000100
 800304c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003050:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003064:	2b00      	cmp	r3, #0
 8003066:	d142      	bne.n	80030ee <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d03f      	beq.n	80030ee <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003074:	2b00      	cmp	r3, #0
 8003076:	d13a      	bne.n	80030ee <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d133      	bne.n	80030ee <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d12e      	bne.n	80030ee <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fd23 	bl	8002ae0 <LL_ADC_INJ_IsConversionOngoing>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d11a      	bne.n	80030d6 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d112      	bne.n	80030ee <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80030d4:	e00b      	b.n	80030ee <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030da:	f043 0210 	orr.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fc08 	bl	8001904 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2260      	movs	r2, #96	; 0x60
 80030fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d011      	beq.n	800312a <HAL_ADC_IRQHandler+0x312>
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f89f 	bl	8003260 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d012      	beq.n	800315a <HAL_ADC_IRQHandler+0x342>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003142:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fc68 	bl	8003a20 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003160:	2b00      	cmp	r3, #0
 8003162:	d012      	beq.n	800318a <HAL_ADC_IRQHandler+0x372>
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fc5a 	bl	8003a34 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003188:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d036      	beq.n	8003202 <HAL_ADC_IRQHandler+0x3ea>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d031      	beq.n	8003202 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80031a6:	2301      	movs	r3, #1
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
 80031aa:	e014      	b.n	80031d6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031b2:	4825      	ldr	r0, [pc, #148]	; (8003248 <HAL_ADC_IRQHandler+0x430>)
 80031b4:	f7ff fbd7 	bl	8002966 <LL_ADC_GetMultiDMATransfer>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80031be:	2301      	movs	r3, #1
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	e008      	b.n	80031d6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80031d2:	2301      	movs	r3, #1
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10e      	bne.n	80031fa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ec:	f043 0202 	orr.w	r2, r3, #2
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f83d 	bl	8003274 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2210      	movs	r2, #16
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d018      	beq.n	800323e <HAL_ADC_IRQHandler+0x426>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003212:	2b00      	cmp	r3, #0
 8003214:	d013      	beq.n	800323e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003226:	f043 0208 	orr.w	r2, r3, #8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003236:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fbe7 	bl	8003a0c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800323e:	bf00      	nop
 8003240:	3728      	adds	r7, #40	; 0x28
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	50000300 	.word	0x50000300

0800324c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fbea 	bl	8002a6e <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d146      	bne.n	800332e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	4b24      	ldr	r3, [pc, #144]	; (8003338 <ADC_Enable+0xb0>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	f043 0210 	orr.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e032      	b.n	8003330 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fba5 	bl	8002a1e <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032d4:	f7ff fad2 	bl	800287c <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032da:	e021      	b.n	8003320 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fbc4 	bl	8002a6e <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fb94 	bl	8002a1e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032f6:	f7ff fac1 	bl	800287c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d90d      	bls.n	8003320 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	f043 0210 	orr.w	r2, r3, #16
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e007      	b.n	8003330 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d1d6      	bne.n	80032dc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	8000003f 	.word	0x8000003f

0800333c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fba3 	bl	8002a94 <LL_ADC_IsDisableOngoing>
 800334e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fb8a 	bl	8002a6e <LL_ADC_IsEnabled>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d040      	beq.n	80033e2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d13d      	bne.n	80033e2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030d 	and.w	r3, r3, #13
 8003370:	2b01      	cmp	r3, #1
 8003372:	d10c      	bne.n	800338e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fb64 	bl	8002a46 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2203      	movs	r2, #3
 8003384:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003386:	f7ff fa79 	bl	800287c <HAL_GetTick>
 800338a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800338c:	e022      	b.n	80033d4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e01c      	b.n	80033e4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033aa:	f7ff fa67 	bl	800287c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d90d      	bls.n	80033d4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	f043 0210 	orr.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e007      	b.n	80033e4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e3      	bne.n	80033aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <LL_ADC_SetCommonPathInternalCh>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_ADC_GetCommonPathInternalCh>:
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <LL_ADC_SetOffset>:
{
 8003430:	b490      	push	{r4, r7}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3360      	adds	r3, #96	; 0x60
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <LL_ADC_SetOffset+0x40>)
 8003450:	4013      	ands	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003462:	6023      	str	r3, [r4, #0]
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bc90      	pop	{r4, r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	03fff000 	.word	0x03fff000

08003474 <LL_ADC_GetOffsetChannel>:
{
 8003474:	b490      	push	{r4, r7}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3360      	adds	r3, #96	; 0x60
 8003482:	461a      	mov	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bc90      	pop	{r4, r7}
 800349a:	4770      	bx	lr

0800349c <LL_ADC_SetOffsetState>:
{
 800349c:	b490      	push	{r4, r7}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3360      	adds	r3, #96	; 0x60
 80034ac:	461a      	mov	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4313      	orrs	r3, r2
 80034c0:	6023      	str	r3, [r4, #0]
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc90      	pop	{r4, r7}
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_SetOffsetSign>:
{
 80034cc:	b490      	push	{r4, r7}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3360      	adds	r3, #96	; 0x60
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	6023      	str	r3, [r4, #0]
}
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc90      	pop	{r4, r7}
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_SetOffsetSaturation>:
{
 80034fc:	b490      	push	{r4, r7}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3360      	adds	r3, #96	; 0x60
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4313      	orrs	r3, r2
 8003520:	6023      	str	r3, [r4, #0]
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bc90      	pop	{r4, r7}
 800352a:	4770      	bx	lr

0800352c <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	615a      	str	r2, [r3, #20]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_ADC_INJ_GetTrigAuto>:
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_ADC_SetChannelSamplingTime>:
{
 800356e:	b490      	push	{r4, r7}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3314      	adds	r3, #20
 800357e:	461a      	mov	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	0e5b      	lsrs	r3, r3, #25
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	4413      	add	r3, r2
 800358c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800358e:	6822      	ldr	r2, [r4, #0]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	0d1b      	lsrs	r3, r3, #20
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2107      	movs	r1, #7
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	401a      	ands	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	0d1b      	lsrs	r3, r3, #20
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	6023      	str	r3, [r4, #0]
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc90      	pop	{r4, r7}
 80035bc:	4770      	bx	lr
	...

080035c0 <LL_ADC_SetChannelSingleDiff>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	43db      	mvns	r3, r3
 80035da:	401a      	ands	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0318 	and.w	r3, r3, #24
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <LL_ADC_SetChannelSingleDiff+0x44>)
 80035e4:	40d9      	lsrs	r1, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	400b      	ands	r3, r1
 80035ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	0007ffff 	.word	0x0007ffff

08003608 <LL_ADC_GetMultimode>:
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 031f 	and.w	r3, r3, #31
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <LL_ADC_IsEnabled>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <LL_ADC_IsEnabled+0x18>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <LL_ADC_IsEnabled+0x1a>
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_ADC_StartCalibration>:
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800365c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003666:	4313      	orrs	r3, r2
 8003668:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_ADC_IsCalibrationOnGoing>:
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800368c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003690:	d101      	bne.n	8003696 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_ADC_REG_IsConversionOngoing>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d101      	bne.n	80036bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_ADC_INJ_StartConversion>:
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036de:	f043 0208 	orr.w	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <LL_ADC_INJ_IsConversionOngoing>:
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b08      	cmp	r3, #8
 8003704:	d101      	bne.n	800370a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_ADCEx_Calibration_Start+0x1c>
 8003730:	2302      	movs	r3, #2
 8003732:	e04d      	b.n	80037d0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff fdfd 	bl	800333c <ADC_Disable>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d136      	bne.n	80037ba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003754:	f023 0302 	bic.w	r3, r3, #2
 8003758:	f043 0202 	orr.w	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6839      	ldr	r1, [r7, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff6f 	bl	800364a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800376c:	e014      	b.n	8003798 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3301      	adds	r3, #1
 8003772:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d90d      	bls.n	8003798 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	f023 0312 	bic.w	r3, r3, #18
 8003784:	f043 0210 	orr.w	r2, r3, #16
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e01b      	b.n	80037d0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff6d 	bl	800367c <LL_ADC_IsCalibrationOnGoing>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e2      	bne.n	800376e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f023 0303 	bic.w	r3, r3, #3
 80037b0:	f043 0201 	orr.w	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80037b8:	e005      	b.n	80037c6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	f043 0210 	orr.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	0004de01 	.word	0x0004de01

080037dc <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037e4:	486e      	ldr	r0, [pc, #440]	; (80039a0 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80037e6:	f7ff ff0f 	bl	8003608 <LL_ADC_GetMultimode>
 80037ea:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff7e 	bl	80036f2 <LL_ADC_INJ_IsConversionOngoing>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
 80037fe:	e0ca      	b.n	8003996 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800380a:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0b2      	b.n	8003996 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_ADCEx_InjectedStart_IT+0x62>
 800383a:	2302      	movs	r3, #2
 800383c:	e0ab      	b.n	8003996 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fd1e 	bl	8003288 <ADC_Enable>
 800384c:	4603      	mov	r3, r0
 800384e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 809a 	bne.w	800398c <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003868:	f023 0208 	bic.w	r2, r3, #8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	661a      	str	r2, [r3, #96]	; 0x60
 8003870:	e002      	b.n	8003878 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a44      	ldr	r2, [pc, #272]	; (80039a4 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d002      	beq.n	800389c <HAL_ADCEx_InjectedStart_IT+0xc0>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	e001      	b.n	80038a0 <HAL_ADCEx_InjectedStart_IT+0xc4>
 800389c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d002      	beq.n	80038ae <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2260      	movs	r2, #96	; 0x60
 80038c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e6:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d110      	bne.n	8003912 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0220 	bic.w	r2, r2, #32
 80038fe:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800390e:	605a      	str	r2, [r3, #4]
          break;
 8003910:	e010      	b.n	8003934 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003920:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0220 	orr.w	r2, r2, #32
 8003930:	605a      	str	r2, [r3, #4]
          break;
 8003932:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d002      	beq.n	8003944 <HAL_ADCEx_InjectedStart_IT+0x168>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	e001      	b.n	8003948 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8003944:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	4293      	cmp	r3, r2
 800394e:	d008      	beq.n	8003962 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d002      	beq.n	8003962 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b07      	cmp	r3, #7
 8003960:	d10d      	bne.n	800397e <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fdf3 	bl	8003552 <LL_ADC_INJ_GetTrigAuto>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d110      	bne.n	8003994 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fea7 	bl	80036ca <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800397c:	e00a      	b.n	8003994 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	65da      	str	r2, [r3, #92]	; 0x5c
 800398a:	e003      	b.n	8003994 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	50000300 	.word	0x50000300
 80039a4:	50000100 	.word	0x50000100

080039a8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f240 2215 	movw	r2, #533	; 0x215
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00e      	beq.n	80039da <HAL_ADCEx_InjectedGetValue+0x32>
 80039bc:	f240 321b 	movw	r2, #795	; 0x31b
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_ADCEx_InjectedGetValue+0x26>
 80039c4:	f240 120f 	movw	r2, #271	; 0x10f
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00c      	beq.n	80039e6 <HAL_ADCEx_InjectedGetValue+0x3e>
 80039cc:	e011      	b.n	80039f2 <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d6:	60fb      	str	r3, [r7, #12]
      break;
 80039d8:	e011      	b.n	80039fe <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	60fb      	str	r3, [r7, #12]
      break;
 80039e4:	e00b      	b.n	80039fe <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ee:	60fb      	str	r3, [r7, #12]
      break;
 80039f0:	e005      	b.n	80039fe <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fa:	60fb      	str	r3, [r7, #12]
      break;
 80039fc:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 80039fe:	68fb      	ldr	r3, [r7, #12]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0a8      	sub	sp, #160	; 0xa0
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d102      	bne.n	8003a86 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003a80:	2302      	movs	r3, #2
 8003a82:	f000 bc39 	b.w	80042f8 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d130      	bne.n	8003b00 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b09      	cmp	r3, #9
 8003aa4:	d179      	bne.n	8003b9a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	0e9b      	lsrs	r3, r3, #26
 8003ab4:	025b      	lsls	r3, r3, #9
 8003ab6:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003ac2:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ace:	e007      	b.n	8003ae0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0e9b      	lsrs	r3, r3, #26
 8003ad6:	025b      	lsls	r3, r3, #9
 8003ad8:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ae6:	4ba3      	ldr	r3, [pc, #652]	; (8003d74 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003af2:	430b      	orrs	r3, r1
 8003af4:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003afc:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003afe:	e04c      	b.n	8003b9a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d11d      	bne.n	8003b44 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003b2c:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b38:	e004      	b.n	8003b44 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0e9b      	lsrs	r3, r3, #26
 8003b4a:	f003 021f 	and.w	r2, r3, #31
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b68:	1e5a      	subs	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b8a:	4b7a      	ldr	r3, [pc, #488]	; (8003d74 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	430b      	orrs	r3, r1
 8003b98:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fda7 	bl	80036f2 <LL_ADC_INJ_IsConversionOngoing>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d124      	bne.n	8003bf4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d112      	bne.n	8003bda <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003bc4:	055a      	lsls	r2, r3, #21
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bcc:	051b      	lsls	r3, r3, #20
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	60da      	str	r2, [r3, #12]
 8003bd8:	e00c      	b.n	8003bf4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003bea:	055a      	lsls	r2, r3, #21
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fd53 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 8003bfe:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fd73 	bl	80036f2 <LL_ADC_INJ_IsConversionOngoing>
 8003c0c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f040 81d4 	bne.w	8003fc2 <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f040 81cf 	bne.w	8003fc2 <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d116      	bne.n	8003c62 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003c4c:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c4e:	e01f      	b.n	8003c90 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003c5e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c60:	e016      	b.n	8003c90 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d109      	bne.n	8003c80 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003c7e:	e007      	b.n	8003c90 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003c8e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d110      	bne.n	8003cbc <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	430b      	orrs	r3, r1
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0202 	orr.w	r2, r2, #2
 8003cb8:	611a      	str	r2, [r3, #16]
 8003cba:	e007      	b.n	8003ccc <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0202 	bic.w	r2, r2, #2
 8003cca:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cd4:	d10f      	bne.n	8003cf6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7ff fc44 	bl	800356e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fc1c 	bl	800352c <LL_ADC_SetSamplingTimeCommonConfig>
 8003cf4:	e00e      	b.n	8003d14 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f7ff fc33 	bl	800356e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fc0c 	bl	800352c <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	08db      	lsrs	r3, r3, #3
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d025      	beq.n	8003d82 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6919      	ldr	r1, [r3, #16]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d46:	f7ff fb73 	bl	8003430 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6919      	ldr	r1, [r3, #16]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f7ff fbb8 	bl	80034cc <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d70:	e003      	b.n	8003d7a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003d72:	bf00      	nop
 8003d74:	04104000 	.word	0x04104000
 8003d78:	2300      	movs	r3, #0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f7ff fbbe 	bl	80034fc <LL_ADC_SetOffsetSaturation>
 8003d80:	e11f      	b.n	8003fc2 <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2100      	movs	r1, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fb73 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fb68 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003da4:	4603      	mov	r3, r0
 8003da6:	0e9b      	lsrs	r3, r3, #26
 8003da8:	f003 021f 	and.w	r2, r3, #31
 8003dac:	e014      	b.n	8003dd8 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fb5d 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	0e9b      	lsrs	r3, r3, #26
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	e00a      	b.n	8003e06 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003df8:	fa93 f3a3 	rbit	r3, r3
 8003dfc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d106      	bne.n	8003e18 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fb42 	bl	800349c <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fb28 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fb1d 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	f003 021f 	and.w	r2, r3, #31
 8003e42:	e010      	b.n	8003e66 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fb12 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003e50:	4603      	mov	r3, r0
 8003e52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <HAL_ADCEx_InjectedConfigChannel+0x422>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	0e9b      	lsrs	r3, r3, #26
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	e00a      	b.n	8003e94 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8003e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d106      	bne.n	8003ea6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fafb 	bl	800349c <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2102      	movs	r1, #2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fae1 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_ADCEx_InjectedConfigChannel+0x476>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fad6 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	0e9b      	lsrs	r3, r3, #26
 8003ecc:	f003 021f 	and.w	r2, r3, #31
 8003ed0:	e010      	b.n	8003ef4 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff facb 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ee4:	fa93 f3a3 	rbit	r3, r3
 8003ee8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0e9b      	lsrs	r3, r3, #26
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	e00a      	b.n	8003f22 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f14:	fa93 f3a3 	rbit	r3, r3
 8003f18:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d106      	bne.n	8003f34 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fab4 	bl	800349c <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2103      	movs	r1, #3
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fa9a 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <HAL_ADCEx_InjectedConfigChannel+0x504>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2103      	movs	r1, #3
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fa8f 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003f56:	4603      	mov	r3, r0
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	f003 021f 	and.w	r2, r3, #31
 8003f5e:	e010      	b.n	8003f82 <HAL_ADCEx_InjectedConfigChannel+0x526>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2103      	movs	r1, #3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fa84 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8003f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_ADCEx_InjectedConfigChannel+0x53e>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0e9b      	lsrs	r3, r3, #26
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	e00a      	b.n	8003fb0 <HAL_ADCEx_InjectedConfigChannel+0x554>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d106      	bne.n	8003fc2 <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2103      	movs	r1, #3
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fa6d 	bl	800349c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fb2c 	bl	8003624 <LL_ADC_IsEnabled>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 810c 	bne.w	80041ec <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f7ff faed 	bl	80035c0 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4aab      	ldr	r2, [pc, #684]	; (8004298 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	f040 80fd 	bne.w	80041ec <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	0e9b      	lsrs	r3, r3, #26
 8004008:	3301      	adds	r3, #1
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2b09      	cmp	r3, #9
 8004010:	bf94      	ite	ls
 8004012:	2301      	movls	r3, #1
 8004014:	2300      	movhi	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	e012      	b.n	8004040 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004022:	fa93 f3a3 	rbit	r3, r3
 8004026:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	3301      	adds	r3, #1
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2b09      	cmp	r3, #9
 8004038:	bf94      	ite	ls
 800403a:	2301      	movls	r3, #1
 800403c:	2300      	movhi	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d064      	beq.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404c:	2b00      	cmp	r3, #0
 800404e:	d107      	bne.n	8004060 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	0e9b      	lsrs	r3, r3, #26
 8004056:	3301      	adds	r3, #1
 8004058:	069b      	lsls	r3, r3, #26
 800405a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800405e:	e00e      	b.n	800407e <HAL_ADCEx_InjectedConfigChannel+0x622>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	fab3 f383 	clz	r3, r3
 8004074:	b2db      	uxtb	r3, r3
 8004076:	3301      	adds	r3, #1
 8004078:	069b      	lsls	r3, r3, #26
 800407a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_ADCEx_InjectedConfigChannel+0x642>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	0e9b      	lsrs	r3, r3, #26
 8004090:	3301      	adds	r3, #1
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2101      	movs	r1, #1
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	e010      	b.n	80040c0 <HAL_ADCEx_InjectedConfigChannel+0x664>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2101      	movs	r1, #1
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	ea42 0103 	orr.w	r1, r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	0e9b      	lsrs	r3, r3, #26
 80040d6:	3301      	adds	r3, #1
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	051b      	lsls	r3, r3, #20
 80040e4:	e011      	b.n	800410a <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	3301      	adds	r3, #1
 80040fe:	f003 021f 	and.w	r2, r3, #31
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	051b      	lsls	r3, r3, #20
 800410a:	430b      	orrs	r3, r1
 800410c:	e069      	b.n	80041e2 <HAL_ADCEx_InjectedConfigChannel+0x786>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	0e9b      	lsrs	r3, r3, #26
 8004120:	3301      	adds	r3, #1
 8004122:	069b      	lsls	r3, r3, #26
 8004124:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004128:	e00e      	b.n	8004148 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	623b      	str	r3, [r7, #32]
  return result;
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3301      	adds	r3, #1
 8004142:	069b      	lsls	r3, r3, #26
 8004144:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0e9b      	lsrs	r3, r3, #26
 800415a:	3301      	adds	r3, #1
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	e010      	b.n	800418a <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	61bb      	str	r3, [r7, #24]
  return result;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2101      	movs	r1, #1
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	ea42 0103 	orr.w	r1, r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10d      	bne.n	80041b6 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	0e9b      	lsrs	r3, r3, #26
 80041a0:	3301      	adds	r3, #1
 80041a2:	f003 021f 	and.w	r2, r3, #31
 80041a6:	4613      	mov	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	3b1e      	subs	r3, #30
 80041ae:	051b      	lsls	r3, r3, #20
 80041b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041b4:	e014      	b.n	80041e0 <HAL_ADCEx_InjectedConfigChannel+0x784>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	613b      	str	r3, [r7, #16]
  return result;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f003 021f 	and.w	r2, r3, #31
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	3b1e      	subs	r3, #30
 80041da:	051b      	lsls	r3, r3, #20
 80041dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041e0:	430b      	orrs	r3, r1
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	6892      	ldr	r2, [r2, #8]
 80041e6:	4619      	mov	r1, r3
 80041e8:	f7ff f9c1 	bl	800356e <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b2a      	ldr	r3, [pc, #168]	; (800429c <HAL_ADCEx_InjectedConfigChannel+0x840>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d079      	beq.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041f8:	4829      	ldr	r0, [pc, #164]	; (80042a0 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80041fa:	f7ff f90a 	bl	8003412 <LL_ADC_GetCommonPathInternalCh>
 80041fe:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a27      	ldr	r2, [pc, #156]	; (80042a4 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a25      	ldr	r2, [pc, #148]	; (80042a8 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d126      	bne.n	8004264 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800421a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d120      	bne.n	8004264 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800422a:	d15f      	bne.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800422c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004230:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004234:	4619      	mov	r1, r3
 8004236:	481a      	ldr	r0, [pc, #104]	; (80042a0 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8004238:	f7ff f8d8 	bl	80033ec <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_ADCEx_InjectedConfigChannel+0x850>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	099b      	lsrs	r3, r3, #6
 8004242:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	099a      	lsrs	r2, r3, #6
 800424a:	4613      	mov	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8004254:	e002      	b.n	800425c <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3b01      	subs	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f9      	bne.n	8004256 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004262:	e043      	b.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d126      	bne.n	80042bc <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800426e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d120      	bne.n	80042bc <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d033      	beq.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428c:	4619      	mov	r1, r3
 800428e:	4804      	ldr	r0, [pc, #16]	; (80042a0 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8004290:	f7ff f8ac 	bl	80033ec <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004294:	e02a      	b.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x890>
 8004296:	bf00      	nop
 8004298:	407f0000 	.word	0x407f0000
 800429c:	80080000 	.word	0x80080000
 80042a0:	50000300 	.word	0x50000300
 80042a4:	c3210000 	.word	0xc3210000
 80042a8:	90c00010 	.word	0x90c00010
 80042ac:	20000000 	.word	0x20000000
 80042b0:	053e2d63 	.word	0x053e2d63
 80042b4:	c7520000 	.word	0xc7520000
 80042b8:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d112      	bne.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10c      	bne.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042e4:	4619      	mov	r1, r3
 80042e6:	4808      	ldr	r0, [pc, #32]	; (8004308 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 80042e8:	f7ff f880 	bl	80033ec <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80042f4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	37a0      	adds	r7, #160	; 0xa0
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	cb840000 	.word	0xcb840000
 8004304:	50000100 	.word	0x50000100
 8004308:	50000300 	.word	0x50000300

0800430c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b0a1      	sub	sp, #132	; 0x84
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004326:	2302      	movs	r3, #2
 8004328:	e087      	b.n	800443a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800433a:	d102      	bne.n	8004342 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800433c:	4b41      	ldr	r3, [pc, #260]	; (8004444 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	e001      	b.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e06a      	b.n	800443a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff f99c 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 800436c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff f996 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d14c      	bne.n	8004418 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800437e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004380:	2b00      	cmp	r3, #0
 8004382:	d149      	bne.n	8004418 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004384:	4b30      	ldr	r3, [pc, #192]	; (8004448 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004386:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d028      	beq.n	80043e2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043a2:	035b      	lsls	r3, r3, #13
 80043a4:	430b      	orrs	r3, r1
 80043a6:	431a      	orrs	r2, r3
 80043a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80043b0:	f7ff f938 	bl	8003624 <LL_ADC_IsEnabled>
 80043b4:	4604      	mov	r4, r0
 80043b6:	4823      	ldr	r0, [pc, #140]	; (8004444 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80043b8:	f7ff f934 	bl	8003624 <LL_ADC_IsEnabled>
 80043bc:	4603      	mov	r3, r0
 80043be:	4323      	orrs	r3, r4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d133      	bne.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043cc:	f023 030f 	bic.w	r3, r3, #15
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	6811      	ldr	r1, [r2, #0]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	6892      	ldr	r2, [r2, #8]
 80043d8:	430a      	orrs	r2, r1
 80043da:	431a      	orrs	r2, r3
 80043dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043e0:	e024      	b.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80043f2:	f7ff f917 	bl	8003624 <LL_ADC_IsEnabled>
 80043f6:	4604      	mov	r4, r0
 80043f8:	4812      	ldr	r0, [pc, #72]	; (8004444 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80043fa:	f7ff f913 	bl	8003624 <LL_ADC_IsEnabled>
 80043fe:	4603      	mov	r3, r0
 8004400:	4323      	orrs	r3, r4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d112      	bne.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800440e:	f023 030f 	bic.w	r3, r3, #15
 8004412:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004414:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004416:	e009      	b.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800442a:	e000      	b.n	800442e <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800442c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004436:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800443a:	4618      	mov	r0, r3
 800443c:	3784      	adds	r7, #132	; 0x84
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}
 8004442:	bf00      	nop
 8004444:	50000100 	.word	0x50000100
 8004448:	50000300 	.word	0x50000300

0800444c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <__NVIC_SetPriorityGrouping+0x44>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004468:	4013      	ands	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800447e:	4a04      	ldr	r2, [pc, #16]	; (8004490 <__NVIC_SetPriorityGrouping+0x44>)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	60d3      	str	r3, [r2, #12]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000ed00 	.word	0xe000ed00

08004494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <__NVIC_GetPriorityGrouping+0x18>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	f003 0307 	and.w	r3, r3, #7
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	db0b      	blt.n	80044da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	f003 021f 	and.w	r2, r3, #31
 80044c8:	4907      	ldr	r1, [pc, #28]	; (80044e8 <__NVIC_EnableIRQ+0x38>)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2001      	movs	r0, #1
 80044d2:	fa00 f202 	lsl.w	r2, r0, r2
 80044d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000e100 	.word	0xe000e100

080044ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	db0a      	blt.n	8004516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	490c      	ldr	r1, [pc, #48]	; (8004538 <__NVIC_SetPriority+0x4c>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	0112      	lsls	r2, r2, #4
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	440b      	add	r3, r1
 8004510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004514:	e00a      	b.n	800452c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4908      	ldr	r1, [pc, #32]	; (800453c <__NVIC_SetPriority+0x50>)
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	3b04      	subs	r3, #4
 8004524:	0112      	lsls	r2, r2, #4
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	440b      	add	r3, r1
 800452a:	761a      	strb	r2, [r3, #24]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000e100 	.word	0xe000e100
 800453c:	e000ed00 	.word	0xe000ed00

08004540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004540:	b480      	push	{r7}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f1c3 0307 	rsb	r3, r3, #7
 800455a:	2b04      	cmp	r3, #4
 800455c:	bf28      	it	cs
 800455e:	2304      	movcs	r3, #4
 8004560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3304      	adds	r3, #4
 8004566:	2b06      	cmp	r3, #6
 8004568:	d902      	bls.n	8004570 <NVIC_EncodePriority+0x30>
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3b03      	subs	r3, #3
 800456e:	e000      	b.n	8004572 <NVIC_EncodePriority+0x32>
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43da      	mvns	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	401a      	ands	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004588:	f04f 31ff 	mov.w	r1, #4294967295
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	43d9      	mvns	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	4313      	orrs	r3, r2
         );
}
 800459a:	4618      	mov	r0, r3
 800459c:	3724      	adds	r7, #36	; 0x24
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b8:	d301      	bcc.n	80045be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ba:	2301      	movs	r3, #1
 80045bc:	e00f      	b.n	80045de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <SysTick_Config+0x40>)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045c6:	210f      	movs	r1, #15
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	f7ff ff8e 	bl	80044ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <SysTick_Config+0x40>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045d6:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <SysTick_Config+0x40>)
 80045d8:	2207      	movs	r2, #7
 80045da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	e000e010 	.word	0xe000e010

080045ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff ff29 	bl	800444c <__NVIC_SetPriorityGrouping>
}
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	4603      	mov	r3, r0
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004610:	f7ff ff40 	bl	8004494 <__NVIC_GetPriorityGrouping>
 8004614:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f7ff ff90 	bl	8004540 <NVIC_EncodePriority>
 8004620:	4602      	mov	r2, r0
 8004622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff5f 	bl	80044ec <__NVIC_SetPriority>
}
 800462e:	bf00      	nop
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	4603      	mov	r3, r0
 800463e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff33 	bl	80044b0 <__NVIC_EnableIRQ>
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff ffa4 	bl	80045a8 <SysTick_Config>
 8004660:	4603      	mov	r3, r0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d00d      	beq.n	800469e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2204      	movs	r2, #4
 8004686:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	e047      	b.n	800472e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 020e 	bic.w	r2, r2, #14
 80046ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f003 021f 	and.w	r2, r3, #31
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2101      	movs	r1, #1
 80046dc:	fa01 f202 	lsl.w	r2, r1, r2
 80046e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00c      	beq.n	800470e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004702:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800470c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
    }
  }
  return status;
 800472e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004746:	e15a      	b.n	80049fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	2101      	movs	r1, #1
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	4013      	ands	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 814c 	beq.w	80049f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d00b      	beq.n	8004780 <HAL_GPIO_Init+0x48>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d007      	beq.n	8004780 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004774:	2b11      	cmp	r3, #17
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b12      	cmp	r3, #18
 800477e:	d130      	bne.n	80047e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4013      	ands	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047b6:	2201      	movs	r2, #1
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 0201 	and.w	r2, r3, #1
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	2203      	movs	r2, #3
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	43db      	mvns	r3, r3
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4013      	ands	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_Init+0xea>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b12      	cmp	r3, #18
 8004820:	d123      	bne.n	800486a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	08da      	lsrs	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3208      	adds	r2, #8
 800482a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	220f      	movs	r2, #15
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	08da      	lsrs	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3208      	adds	r2, #8
 8004864:	6939      	ldr	r1, [r7, #16]
 8004866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	2203      	movs	r2, #3
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4013      	ands	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 0203 	and.w	r2, r3, #3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80a6 	beq.w	80049f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ac:	4b5b      	ldr	r3, [pc, #364]	; (8004a1c <HAL_GPIO_Init+0x2e4>)
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	4a5a      	ldr	r2, [pc, #360]	; (8004a1c <HAL_GPIO_Init+0x2e4>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6613      	str	r3, [r2, #96]	; 0x60
 80048b8:	4b58      	ldr	r3, [pc, #352]	; (8004a1c <HAL_GPIO_Init+0x2e4>)
 80048ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048c4:	4a56      	ldr	r2, [pc, #344]	; (8004a20 <HAL_GPIO_Init+0x2e8>)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	3302      	adds	r3, #2
 80048cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	220f      	movs	r2, #15
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4013      	ands	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048ee:	d01f      	beq.n	8004930 <HAL_GPIO_Init+0x1f8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a4c      	ldr	r2, [pc, #304]	; (8004a24 <HAL_GPIO_Init+0x2ec>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d019      	beq.n	800492c <HAL_GPIO_Init+0x1f4>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a4b      	ldr	r2, [pc, #300]	; (8004a28 <HAL_GPIO_Init+0x2f0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_GPIO_Init+0x1f0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a4a      	ldr	r2, [pc, #296]	; (8004a2c <HAL_GPIO_Init+0x2f4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00d      	beq.n	8004924 <HAL_GPIO_Init+0x1ec>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a49      	ldr	r2, [pc, #292]	; (8004a30 <HAL_GPIO_Init+0x2f8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <HAL_GPIO_Init+0x1e8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a48      	ldr	r2, [pc, #288]	; (8004a34 <HAL_GPIO_Init+0x2fc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_GPIO_Init+0x1e4>
 8004918:	2305      	movs	r3, #5
 800491a:	e00a      	b.n	8004932 <HAL_GPIO_Init+0x1fa>
 800491c:	2306      	movs	r3, #6
 800491e:	e008      	b.n	8004932 <HAL_GPIO_Init+0x1fa>
 8004920:	2304      	movs	r3, #4
 8004922:	e006      	b.n	8004932 <HAL_GPIO_Init+0x1fa>
 8004924:	2303      	movs	r3, #3
 8004926:	e004      	b.n	8004932 <HAL_GPIO_Init+0x1fa>
 8004928:	2302      	movs	r3, #2
 800492a:	e002      	b.n	8004932 <HAL_GPIO_Init+0x1fa>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_GPIO_Init+0x1fa>
 8004930:	2300      	movs	r3, #0
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	f002 0203 	and.w	r2, r2, #3
 8004938:	0092      	lsls	r2, r2, #2
 800493a:	4093      	lsls	r3, r2
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004942:	4937      	ldr	r1, [pc, #220]	; (8004a20 <HAL_GPIO_Init+0x2e8>)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	089b      	lsrs	r3, r3, #2
 8004948:	3302      	adds	r3, #2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004950:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <HAL_GPIO_Init+0x300>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	43db      	mvns	r3, r3
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004974:	4a30      	ldr	r2, [pc, #192]	; (8004a38 <HAL_GPIO_Init+0x300>)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800497a:	4b2f      	ldr	r3, [pc, #188]	; (8004a38 <HAL_GPIO_Init+0x300>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	43db      	mvns	r3, r3
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800499e:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <HAL_GPIO_Init+0x300>)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049a4:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <HAL_GPIO_Init+0x300>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_GPIO_Init+0x300>)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049ce:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_GPIO_Init+0x300>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	43db      	mvns	r3, r3
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4013      	ands	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049f2:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <HAL_GPIO_Init+0x300>)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	3301      	adds	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f47f ae9d 	bne.w	8004748 <HAL_GPIO_Init+0x10>
  }
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40010000 	.word	0x40010000
 8004a24:	48000400 	.word	0x48000400
 8004a28:	48000800 	.word	0x48000800
 8004a2c:	48000c00 	.word	0x48000c00
 8004a30:	48001000 	.word	0x48001000
 8004a34:	48001400 	.word	0x48001400
 8004a38:	40010400 	.word	0x40010400

08004a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d006      	beq.n	8004a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a52:	4a05      	ldr	r2, [pc, #20]	; (8004a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fc ffa8 	bl	80019b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40010400 	.word	0x40010400

08004a6c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0bb      	b.n	8004bfa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d101      	bne.n	8004a92 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e0b3      	b.n	8004bfa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d101      	bne.n	8004aa2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0ab      	b.n	8004bfa <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aa2:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <HAL_OPAMP_Init+0x198>)
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa6:	4a57      	ldr	r2, [pc, #348]	; (8004c04 <HAL_OPAMP_Init+0x198>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	6613      	str	r3, [r2, #96]	; 0x60
 8004aae:	4b55      	ldr	r3, [pc, #340]	; (8004c04 <HAL_OPAMP_Init+0x198>)
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fd f9c8 	bl	8001e64 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d003      	beq.n	8004ae4 <HAL_OPAMP_Init+0x78>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b60      	cmp	r3, #96	; 0x60
 8004ae2:	d133      	bne.n	8004b4c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 0110 	bic.w	r1, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b41      	ldr	r3, [pc, #260]	; (8004c08 <HAL_OPAMP_Init+0x19c>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6851      	ldr	r1, [r2, #4]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6892      	ldr	r2, [r2, #8]
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6912      	ldr	r2, [r2, #16]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	7d09      	ldrb	r1, [r1, #20]
 8004b18:	2901      	cmp	r1, #1
 8004b1a:	d102      	bne.n	8004b22 <HAL_OPAMP_Init+0xb6>
 8004b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b20:	e000      	b.n	8004b24 <HAL_OPAMP_Init+0xb8>
 8004b22:	2100      	movs	r1, #0
 8004b24:	4311      	orrs	r1, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b2a:	4311      	orrs	r1, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b30:	4311      	orrs	r1, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b36:	04d2      	lsls	r2, r2, #19
 8004b38:	4311      	orrs	r1, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b3e:	0612      	lsls	r2, r2, #24
 8004b40:	4311      	orrs	r1, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e035      	b.n	8004bb8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 0110 	bic.w	r1, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	4b27      	ldr	r3, [pc, #156]	; (8004c08 <HAL_OPAMP_Init+0x19c>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6851      	ldr	r1, [r2, #4]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6892      	ldr	r2, [r2, #8]
 8004b74:	4311      	orrs	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68d2      	ldr	r2, [r2, #12]
 8004b7a:	4311      	orrs	r1, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6912      	ldr	r2, [r2, #16]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	7d09      	ldrb	r1, [r1, #20]
 8004b86:	2901      	cmp	r1, #1
 8004b88:	d102      	bne.n	8004b90 <HAL_OPAMP_Init+0x124>
 8004b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b8e:	e000      	b.n	8004b92 <HAL_OPAMP_Init+0x126>
 8004b90:	2100      	movs	r1, #0
 8004b92:	4311      	orrs	r1, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b98:	4311      	orrs	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b9e:	4311      	orrs	r1, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ba4:	04d2      	lsls	r2, r2, #19
 8004ba6:	4311      	orrs	r1, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bac:	0612      	lsls	r2, r2, #24
 8004bae:	4311      	orrs	r1, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	db10      	blt.n	8004be4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	e0003e11 	.word	0xe0003e11

08004c0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d141      	bne.n	8004c9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c1a:	4b4b      	ldr	r3, [pc, #300]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c26:	d131      	bne.n	8004c8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c28:	4b47      	ldr	r3, [pc, #284]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2e:	4a46      	ldr	r2, [pc, #280]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c38:	4b43      	ldr	r3, [pc, #268]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c40:	4a41      	ldr	r2, [pc, #260]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c48:	4b40      	ldr	r3, [pc, #256]	; (8004d4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2232      	movs	r2, #50	; 0x32
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	4a3f      	ldr	r2, [pc, #252]	; (8004d50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	0c9b      	lsrs	r3, r3, #18
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c5e:	e002      	b.n	8004c66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c66:	4b38      	ldr	r3, [pc, #224]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c72:	d102      	bne.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f2      	bne.n	8004c60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c7a:	4b33      	ldr	r3, [pc, #204]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c86:	d158      	bne.n	8004d3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e057      	b.n	8004d3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c8c:	4b2e      	ldr	r3, [pc, #184]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c92:	4a2d      	ldr	r2, [pc, #180]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c9c:	e04d      	b.n	8004d3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca4:	d141      	bne.n	8004d2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ca6:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb2:	d131      	bne.n	8004d18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cba:	4a23      	ldr	r2, [pc, #140]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cc4:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ccc:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2232      	movs	r2, #50	; 0x32
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	4a1c      	ldr	r2, [pc, #112]	; (8004d50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	0c9b      	lsrs	r3, r3, #18
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cea:	e002      	b.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfe:	d102      	bne.n	8004d06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f2      	bne.n	8004cec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d06:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d12:	d112      	bne.n	8004d3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e011      	b.n	8004d3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d1e:	4a0a      	ldr	r2, [pc, #40]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d28:	e007      	b.n	8004d3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d32:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40007000 	.word	0x40007000
 8004d4c:	20000000 	.word	0x20000000
 8004d50:	431bde83 	.word	0x431bde83

08004d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e308      	b.n	8005378 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d075      	beq.n	8004e5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d72:	4ba3      	ldr	r3, [pc, #652]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d7c:	4ba0      	ldr	r3, [pc, #640]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	d102      	bne.n	8004d92 <HAL_RCC_OscConfig+0x3e>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d002      	beq.n	8004d98 <HAL_RCC_OscConfig+0x44>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d10b      	bne.n	8004db0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d98:	4b99      	ldr	r3, [pc, #612]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d05b      	beq.n	8004e5c <HAL_RCC_OscConfig+0x108>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d157      	bne.n	8004e5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e2e3      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d106      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x74>
 8004dba:	4b91      	ldr	r3, [pc, #580]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a90      	ldr	r2, [pc, #576]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e01d      	b.n	8004e04 <HAL_RCC_OscConfig+0xb0>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0x98>
 8004dd2:	4b8b      	ldr	r3, [pc, #556]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a8a      	ldr	r2, [pc, #552]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	4b88      	ldr	r3, [pc, #544]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a87      	ldr	r2, [pc, #540]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e00b      	b.n	8004e04 <HAL_RCC_OscConfig+0xb0>
 8004dec:	4b84      	ldr	r3, [pc, #528]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a83      	ldr	r2, [pc, #524]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	4b81      	ldr	r3, [pc, #516]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a80      	ldr	r2, [pc, #512]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d013      	beq.n	8004e34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fd fd36 	bl	800287c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7fd fd32 	bl	800287c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e2a8      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e26:	4b76      	ldr	r3, [pc, #472]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0xc0>
 8004e32:	e014      	b.n	8004e5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fd fd22 	bl	800287c <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e3c:	f7fd fd1e 	bl	800287c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	; 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e294      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e4e:	4b6c      	ldr	r3, [pc, #432]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0xe8>
 8004e5a:	e000      	b.n	8004e5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d075      	beq.n	8004f56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6a:	4b65      	ldr	r3, [pc, #404]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e74:	4b62      	ldr	r3, [pc, #392]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b0c      	cmp	r3, #12
 8004e82:	d102      	bne.n	8004e8a <HAL_RCC_OscConfig+0x136>
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d002      	beq.n	8004e90 <HAL_RCC_OscConfig+0x13c>
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d11f      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e90:	4b5b      	ldr	r3, [pc, #364]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x154>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e267      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea8:	4b55      	ldr	r3, [pc, #340]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	4952      	ldr	r1, [pc, #328]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ebc:	4b51      	ldr	r3, [pc, #324]	; (8005004 <HAL_RCC_OscConfig+0x2b0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fd fc8f 	bl	80027e4 <HAL_InitTick>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d043      	beq.n	8004f54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e253      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d023      	beq.n	8004f20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed8:	4b49      	ldr	r3, [pc, #292]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a48      	ldr	r2, [pc, #288]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fd fcca 	bl	800287c <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eec:	f7fd fcc6 	bl	800287c <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e23c      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004efe:	4b40      	ldr	r3, [pc, #256]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0a:	4b3d      	ldr	r3, [pc, #244]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	061b      	lsls	r3, r3, #24
 8004f18:	4939      	ldr	r1, [pc, #228]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
 8004f1e:	e01a      	b.n	8004f56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f20:	4b37      	ldr	r3, [pc, #220]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a36      	ldr	r2, [pc, #216]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fd fca6 	bl	800287c <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f34:	f7fd fca2 	bl	800287c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e218      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f46:	4b2e      	ldr	r3, [pc, #184]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x1e0>
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d03c      	beq.n	8004fdc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01c      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f6a:	4b25      	ldr	r3, [pc, #148]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f70:	4a23      	ldr	r2, [pc, #140]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7a:	f7fd fc7f 	bl	800287c <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f82:	f7fd fc7b 	bl	800287c <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e1f1      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f94:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0ef      	beq.n	8004f82 <HAL_RCC_OscConfig+0x22e>
 8004fa2:	e01b      	b.n	8004fdc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fd fc62 	bl	800287c <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fbc:	f7fd fc5e 	bl	800287c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e1d4      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fce:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ef      	bne.n	8004fbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80ab 	beq.w	8005140 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fea:	2300      	movs	r3, #0
 8004fec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fee:	4b04      	ldr	r3, [pc, #16]	; (8005000 <HAL_RCC_OscConfig+0x2ac>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_RCC_OscConfig+0x2b4>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e005      	b.n	800500a <HAL_RCC_OscConfig+0x2b6>
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000
 8005004:	20000004 	.word	0x20000004
 8005008:	2300      	movs	r3, #0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00d      	beq.n	800502a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	4baf      	ldr	r3, [pc, #700]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005012:	4aae      	ldr	r2, [pc, #696]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005018:	6593      	str	r3, [r2, #88]	; 0x58
 800501a:	4bac      	ldr	r3, [pc, #688]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005026:	2301      	movs	r3, #1
 8005028:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800502a:	4ba9      	ldr	r3, [pc, #676]	; (80052d0 <HAL_RCC_OscConfig+0x57c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d118      	bne.n	8005068 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005036:	4ba6      	ldr	r3, [pc, #664]	; (80052d0 <HAL_RCC_OscConfig+0x57c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4aa5      	ldr	r2, [pc, #660]	; (80052d0 <HAL_RCC_OscConfig+0x57c>)
 800503c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005042:	f7fd fc1b 	bl	800287c <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504a:	f7fd fc17 	bl	800287c <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e18d      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505c:	4b9c      	ldr	r3, [pc, #624]	; (80052d0 <HAL_RCC_OscConfig+0x57c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d108      	bne.n	8005082 <HAL_RCC_OscConfig+0x32e>
 8005070:	4b96      	ldr	r3, [pc, #600]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	4a95      	ldr	r2, [pc, #596]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005080:	e024      	b.n	80050cc <HAL_RCC_OscConfig+0x378>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b05      	cmp	r3, #5
 8005088:	d110      	bne.n	80050ac <HAL_RCC_OscConfig+0x358>
 800508a:	4b90      	ldr	r3, [pc, #576]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005090:	4a8e      	ldr	r2, [pc, #568]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005092:	f043 0304 	orr.w	r3, r3, #4
 8005096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800509a:	4b8c      	ldr	r3, [pc, #560]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	4a8a      	ldr	r2, [pc, #552]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050aa:	e00f      	b.n	80050cc <HAL_RCC_OscConfig+0x378>
 80050ac:	4b87      	ldr	r3, [pc, #540]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b2:	4a86      	ldr	r2, [pc, #536]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050bc:	4b83      	ldr	r3, [pc, #524]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	4a82      	ldr	r2, [pc, #520]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d016      	beq.n	8005102 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7fd fbd2 	bl	800287c <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050dc:	f7fd fbce 	bl	800287c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e142      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f2:	4b76      	ldr	r3, [pc, #472]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ed      	beq.n	80050dc <HAL_RCC_OscConfig+0x388>
 8005100:	e015      	b.n	800512e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fd fbbb 	bl	800287c <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f7fd fbb7 	bl	800287c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f241 3288 	movw	r2, #5000	; 0x1388
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e12b      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005120:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ed      	bne.n	800510a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800512e:	7ffb      	ldrb	r3, [r7, #31]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005134:	4b65      	ldr	r3, [pc, #404]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	4a64      	ldr	r2, [pc, #400]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800513a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800513e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d03c      	beq.n	80051c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01c      	beq.n	800518e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005154:	4b5d      	ldr	r3, [pc, #372]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800515a:	4a5c      	ldr	r2, [pc, #368]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005164:	f7fd fb8a 	bl	800287c <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800516c:	f7fd fb86 	bl	800287c <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e0fc      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800517e:	4b53      	ldr	r3, [pc, #332]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ef      	beq.n	800516c <HAL_RCC_OscConfig+0x418>
 800518c:	e01b      	b.n	80051c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800518e:	4b4f      	ldr	r3, [pc, #316]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005194:	4a4d      	ldr	r2, [pc, #308]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519e:	f7fd fb6d 	bl	800287c <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051a6:	f7fd fb69 	bl	800287c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e0df      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051b8:	4b44      	ldr	r3, [pc, #272]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80051ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1ef      	bne.n	80051a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80d3 	beq.w	8005376 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051d0:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 030c 	and.w	r3, r3, #12
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	f000 808d 	beq.w	80052f8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d15a      	bne.n	800529c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e6:	4b39      	ldr	r3, [pc, #228]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a38      	ldr	r2, [pc, #224]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80051ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f2:	f7fd fb43 	bl	800287c <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fa:	f7fd fb3f 	bl	800287c <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e0b5      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800520c:	4b2f      	ldr	r3, [pc, #188]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f0      	bne.n	80051fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005218:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_RCC_OscConfig+0x580>)
 800521e:	4013      	ands	r3, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6a11      	ldr	r1, [r2, #32]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005228:	3a01      	subs	r2, #1
 800522a:	0112      	lsls	r2, r2, #4
 800522c:	4311      	orrs	r1, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005232:	0212      	lsls	r2, r2, #8
 8005234:	4311      	orrs	r1, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800523a:	0852      	lsrs	r2, r2, #1
 800523c:	3a01      	subs	r2, #1
 800523e:	0552      	lsls	r2, r2, #21
 8005240:	4311      	orrs	r1, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005246:	0852      	lsrs	r2, r2, #1
 8005248:	3a01      	subs	r2, #1
 800524a:	0652      	lsls	r2, r2, #25
 800524c:	4311      	orrs	r1, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005252:	06d2      	lsls	r2, r2, #27
 8005254:	430a      	orrs	r2, r1
 8005256:	491d      	ldr	r1, [pc, #116]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005258:	4313      	orrs	r3, r2
 800525a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005266:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005268:	4b18      	ldr	r3, [pc, #96]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a17      	ldr	r2, [pc, #92]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800526e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005272:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fd fb02 	bl	800287c <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527c:	f7fd fafe 	bl	800287c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e074      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x528>
 800529a:	e06c      	b.n	8005376 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80052a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80052a8:	4b08      	ldr	r3, [pc, #32]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a07      	ldr	r2, [pc, #28]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a04      	ldr	r2, [pc, #16]	; (80052cc <HAL_RCC_OscConfig+0x578>)
 80052ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80052be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fd fada 	bl	800287c <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ca:	e00e      	b.n	80052ea <HAL_RCC_OscConfig+0x596>
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40007000 	.word	0x40007000
 80052d4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d8:	f7fd fad0 	bl	800287c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e046      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <HAL_RCC_OscConfig+0x62c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0x584>
 80052f6:	e03e      	b.n	8005376 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e039      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005304:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <HAL_RCC_OscConfig+0x62c>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f003 0203 	and.w	r2, r3, #3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	429a      	cmp	r2, r3
 8005316:	d12c      	bne.n	8005372 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	3b01      	subs	r3, #1
 8005324:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005326:	429a      	cmp	r2, r3
 8005328:	d123      	bne.n	8005372 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d11b      	bne.n	8005372 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d113      	bne.n	8005372 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	3b01      	subs	r3, #1
 8005358:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d109      	bne.n	8005372 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005368:	085b      	lsrs	r3, r3, #1
 800536a:	3b01      	subs	r3, #1
 800536c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800536e:	429a      	cmp	r2, r3
 8005370:	d001      	beq.n	8005376 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000

08005384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e11e      	b.n	80055da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800539c:	4b91      	ldr	r3, [pc, #580]	; (80055e4 <HAL_RCC_ClockConfig+0x260>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d910      	bls.n	80053cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053aa:	4b8e      	ldr	r3, [pc, #568]	; (80055e4 <HAL_RCC_ClockConfig+0x260>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f023 020f 	bic.w	r2, r3, #15
 80053b2:	498c      	ldr	r1, [pc, #560]	; (80055e4 <HAL_RCC_ClockConfig+0x260>)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ba:	4b8a      	ldr	r3, [pc, #552]	; (80055e4 <HAL_RCC_ClockConfig+0x260>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e106      	b.n	80055da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d073      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d129      	bne.n	8005434 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053e0:	4b81      	ldr	r3, [pc, #516]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0f4      	b.n	80055da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053f0:	f000 f99e 	bl	8005730 <RCC_GetSysClockFreqFromPLLSource>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4a7c      	ldr	r2, [pc, #496]	; (80055ec <HAL_RCC_ClockConfig+0x268>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d93f      	bls.n	800547e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053fe:	4b7a      	ldr	r3, [pc, #488]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005412:	2b00      	cmp	r3, #0
 8005414:	d033      	beq.n	800547e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800541a:	2b00      	cmp	r3, #0
 800541c:	d12f      	bne.n	800547e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800541e:	4b72      	ldr	r3, [pc, #456]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005426:	4a70      	ldr	r2, [pc, #448]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	e024      	b.n	800547e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d107      	bne.n	800544c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800543c:	4b6a      	ldr	r3, [pc, #424]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0c6      	b.n	80055da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800544c:	4b66      	ldr	r3, [pc, #408]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0be      	b.n	80055da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800545c:	f000 f8ce 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 8005460:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4a61      	ldr	r2, [pc, #388]	; (80055ec <HAL_RCC_ClockConfig+0x268>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d909      	bls.n	800547e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800546a:	4b5f      	ldr	r3, [pc, #380]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005472:	4a5d      	ldr	r2, [pc, #372]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 8005474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005478:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800547e:	4b5a      	ldr	r3, [pc, #360]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f023 0203 	bic.w	r2, r3, #3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4957      	ldr	r1, [pc, #348]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 800548c:	4313      	orrs	r3, r2
 800548e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005490:	f7fd f9f4 	bl	800287c <HAL_GetTick>
 8005494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005496:	e00a      	b.n	80054ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005498:	f7fd f9f0 	bl	800287c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e095      	b.n	80055da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ae:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 020c 	and.w	r2, r3, #12
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	429a      	cmp	r2, r3
 80054be:	d1eb      	bne.n	8005498 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d023      	beq.n	8005514 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d8:	4b43      	ldr	r3, [pc, #268]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4a42      	ldr	r2, [pc, #264]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 80054de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054f0:	4b3d      	ldr	r3, [pc, #244]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054f8:	4a3b      	ldr	r2, [pc, #236]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 80054fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005500:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4936      	ldr	r1, [pc, #216]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 800550e:	4313      	orrs	r3, r2
 8005510:	608b      	str	r3, [r1, #8]
 8005512:	e008      	b.n	8005526 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b80      	cmp	r3, #128	; 0x80
 8005518:	d105      	bne.n	8005526 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800551a:	4b33      	ldr	r3, [pc, #204]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	4a32      	ldr	r2, [pc, #200]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 8005520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005524:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <HAL_RCC_ClockConfig+0x260>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d21d      	bcs.n	8005570 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005534:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <HAL_RCC_ClockConfig+0x260>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 020f 	bic.w	r2, r3, #15
 800553c:	4929      	ldr	r1, [pc, #164]	; (80055e4 <HAL_RCC_ClockConfig+0x260>)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005544:	f7fd f99a 	bl	800287c <HAL_GetTick>
 8005548:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554c:	f7fd f996 	bl	800287c <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	; 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e03b      	b.n	80055da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <HAL_RCC_ClockConfig+0x260>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d1ed      	bne.n	800554c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800557c:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4917      	ldr	r1, [pc, #92]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800559a:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	490f      	ldr	r1, [pc, #60]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055ae:	f000 f825 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80055b2:	4601      	mov	r1, r0
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <HAL_RCC_ClockConfig+0x264>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <HAL_RCC_ClockConfig+0x26c>)
 80055c0:	5cd3      	ldrb	r3, [r2, r3]
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	fa21 f303 	lsr.w	r3, r1, r3
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <HAL_RCC_ClockConfig+0x270>)
 80055cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <HAL_RCC_ClockConfig+0x274>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fd f906 	bl	80027e4 <HAL_InitTick>
 80055d8:	4603      	mov	r3, r0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40022000 	.word	0x40022000
 80055e8:	40021000 	.word	0x40021000
 80055ec:	04c4b400 	.word	0x04c4b400
 80055f0:	08009d1c 	.word	0x08009d1c
 80055f4:	20000000 	.word	0x20000000
 80055f8:	20000004 	.word	0x20000004

080055fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005602:	4b2c      	ldr	r3, [pc, #176]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	2b04      	cmp	r3, #4
 800560c:	d102      	bne.n	8005614 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800560e:	4b2a      	ldr	r3, [pc, #168]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	e047      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005614:	4b27      	ldr	r3, [pc, #156]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b08      	cmp	r3, #8
 800561e:	d102      	bne.n	8005626 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005620:	4b26      	ldr	r3, [pc, #152]	; (80056bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	e03e      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005626:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b0c      	cmp	r3, #12
 8005630:	d136      	bne.n	80056a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005632:	4b20      	ldr	r3, [pc, #128]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800563c:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	3301      	adds	r3, #1
 8005648:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d10c      	bne.n	800566a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005650:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800565a:	68d2      	ldr	r2, [r2, #12]
 800565c:	0a12      	lsrs	r2, r2, #8
 800565e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	617b      	str	r3, [r7, #20]
      break;
 8005668:	e00c      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	4a10      	ldr	r2, [pc, #64]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005674:	68d2      	ldr	r2, [r2, #12]
 8005676:	0a12      	lsrs	r2, r2, #8
 8005678:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800567c:	fb02 f303 	mul.w	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]
      break;
 8005682:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005684:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	0e5b      	lsrs	r3, r3, #25
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	3301      	adds	r3, #1
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	fbb2 f3f3 	udiv	r3, r2, r3
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e001      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056a4:	693b      	ldr	r3, [r7, #16]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40021000 	.word	0x40021000
 80056b8:	00f42400 	.word	0x00f42400
 80056bc:	007a1200 	.word	0x007a1200

080056c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c4:	4b03      	ldr	r3, [pc, #12]	; (80056d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056c6:	681b      	ldr	r3, [r3, #0]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000000 	.word	0x20000000

080056d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056dc:	f7ff fff0 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 80056e0:	4601      	mov	r1, r0
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	4a04      	ldr	r2, [pc, #16]	; (8005700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056ee:	5cd3      	ldrb	r3, [r2, r3]
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40021000 	.word	0x40021000
 8005700:	08009d2c 	.word	0x08009d2c

08005704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005708:	f7ff ffda 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 800570c:	4601      	mov	r1, r0
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	0adb      	lsrs	r3, r3, #11
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	4a04      	ldr	r2, [pc, #16]	; (800572c <HAL_RCC_GetPCLK2Freq+0x28>)
 800571a:	5cd3      	ldrb	r3, [r2, r3]
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	08009d2c 	.word	0x08009d2c

08005730 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005736:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	3301      	adds	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d10c      	bne.n	800576e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005754:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	fbb2 f3f3 	udiv	r3, r2, r3
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800575e:	68d2      	ldr	r2, [r2, #12]
 8005760:	0a12      	lsrs	r2, r2, #8
 8005762:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	617b      	str	r3, [r7, #20]
    break;
 800576c:	e00c      	b.n	8005788 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800576e:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	4a0e      	ldr	r2, [pc, #56]	; (80057b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005778:	68d2      	ldr	r2, [r2, #12]
 800577a:	0a12      	lsrs	r2, r2, #8
 800577c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	617b      	str	r3, [r7, #20]
    break;
 8005786:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005788:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	0e5b      	lsrs	r3, r3, #25
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	3301      	adds	r3, #1
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057a2:	687b      	ldr	r3, [r7, #4]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40021000 	.word	0x40021000
 80057b4:	007a1200 	.word	0x007a1200
 80057b8:	00f42400 	.word	0x00f42400

080057bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057c4:	2300      	movs	r3, #0
 80057c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057c8:	2300      	movs	r3, #0
 80057ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8098 	beq.w	800590a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057da:	2300      	movs	r3, #0
 80057dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057de:	4b43      	ldr	r3, [pc, #268]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10d      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ea:	4b40      	ldr	r3, [pc, #256]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	4a3f      	ldr	r2, [pc, #252]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f4:	6593      	str	r3, [r2, #88]	; 0x58
 80057f6:	4b3d      	ldr	r3, [pc, #244]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005802:	2301      	movs	r3, #1
 8005804:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005806:	4b3a      	ldr	r3, [pc, #232]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a39      	ldr	r2, [pc, #228]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005812:	f7fd f833 	bl	800287c <HAL_GetTick>
 8005816:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005818:	e009      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581a:	f7fd f82f 	bl	800287c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d902      	bls.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	74fb      	strb	r3, [r7, #19]
        break;
 800582c:	e005      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800582e:	4b30      	ldr	r3, [pc, #192]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0ef      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d159      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005840:	4b2a      	ldr	r3, [pc, #168]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01e      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	429a      	cmp	r2, r3
 800585a:	d019      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005866:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	4a1f      	ldr	r2, [pc, #124]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005878:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005888:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d016      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589a:	f7fc ffef 	bl	800287c <HAL_GetTick>
 800589e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a0:	e00b      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a2:	f7fc ffeb 	bl	800287c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d902      	bls.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	74fb      	strb	r3, [r7, #19]
            break;
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ec      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	4903      	ldr	r1, [pc, #12]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058e4:	e008      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058e6:	7cfb      	ldrb	r3, [r7, #19]
 80058e8:	74bb      	strb	r3, [r7, #18]
 80058ea:	e005      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	7cfb      	ldrb	r3, [r7, #19]
 80058f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058f8:	7c7b      	ldrb	r3, [r7, #17]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d105      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058fe:	4ba6      	ldr	r3, [pc, #664]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005902:	4aa5      	ldr	r2, [pc, #660]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005908:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005916:	4ba0      	ldr	r3, [pc, #640]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591c:	f023 0203 	bic.w	r2, r3, #3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	499c      	ldr	r1, [pc, #624]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005938:	4b97      	ldr	r3, [pc, #604]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f023 020c 	bic.w	r2, r3, #12
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	4994      	ldr	r1, [pc, #592]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800595a:	4b8f      	ldr	r3, [pc, #572]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	498b      	ldr	r1, [pc, #556]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800597c:	4b86      	ldr	r3, [pc, #536]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	4983      	ldr	r1, [pc, #524]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800599e:	4b7e      	ldr	r3, [pc, #504]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	497a      	ldr	r1, [pc, #488]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059c0:	4b75      	ldr	r3, [pc, #468]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	4972      	ldr	r1, [pc, #456]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059e2:	4b6d      	ldr	r3, [pc, #436]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	4969      	ldr	r1, [pc, #420]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a04:	4b64      	ldr	r3, [pc, #400]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4961      	ldr	r1, [pc, #388]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a26:	4b5c      	ldr	r3, [pc, #368]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	4958      	ldr	r1, [pc, #352]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d015      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a48:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	4950      	ldr	r1, [pc, #320]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a66:	d105      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a68:	4b4b      	ldr	r3, [pc, #300]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4a4a      	ldr	r2, [pc, #296]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d015      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a80:	4b45      	ldr	r3, [pc, #276]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	4942      	ldr	r1, [pc, #264]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a9e:	d105      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa0:	4b3d      	ldr	r3, [pc, #244]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4a3c      	ldr	r2, [pc, #240]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aaa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d015      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ab8:	4b37      	ldr	r3, [pc, #220]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	4934      	ldr	r1, [pc, #208]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ad6:	d105      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ad8:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4a2e      	ldr	r2, [pc, #184]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ae2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d015      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005af0:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	4926      	ldr	r1, [pc, #152]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b0e:	d105      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b10:	4b21      	ldr	r3, [pc, #132]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4a20      	ldr	r2, [pc, #128]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d015      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b28:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	4918      	ldr	r1, [pc, #96]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b46:	d105      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b48:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4a12      	ldr	r2, [pc, #72]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d015      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	490a      	ldr	r1, [pc, #40]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b7e:	d105      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a04      	ldr	r2, [pc, #16]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	40021000 	.word	0x40021000

08005b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e049      	b.n	8005c42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fc fbf2 	bl	80023ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f000 fe8c 	bl	80068f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d001      	beq.n	8005c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e021      	b.n	8005ca8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <HAL_TIM_Base_Start_IT+0x68>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b06      	cmp	r3, #6
 8005c8c:	d00b      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x5a>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c94:	d007      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0201 	orr.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	00010007 	.word	0x00010007

08005cb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10f      	bne.n	8005d00 <HAL_TIM_Base_Stop_IT+0x48>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	f244 4344 	movw	r3, #17476	; 0x4444
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d107      	bne.n	8005d00 <HAL_TIM_Base_Stop_IT+0x48>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e049      	b.n	8005dbc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f841 	bl	8005dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f000 fdcf 	bl	80068f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <HAL_TIM_PWM_Start+0x24>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	bf14      	ite	ne
 8005df4:	2301      	movne	r3, #1
 8005df6:	2300      	moveq	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	e03c      	b.n	8005e76 <HAL_TIM_PWM_Start+0x9e>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d109      	bne.n	8005e16 <HAL_TIM_PWM_Start+0x3e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	bf14      	ite	ne
 8005e0e:	2301      	movne	r3, #1
 8005e10:	2300      	moveq	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	e02f      	b.n	8005e76 <HAL_TIM_PWM_Start+0x9e>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d109      	bne.n	8005e30 <HAL_TIM_PWM_Start+0x58>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	bf14      	ite	ne
 8005e28:	2301      	movne	r3, #1
 8005e2a:	2300      	moveq	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	e022      	b.n	8005e76 <HAL_TIM_PWM_Start+0x9e>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	d109      	bne.n	8005e4a <HAL_TIM_PWM_Start+0x72>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	bf14      	ite	ne
 8005e42:	2301      	movne	r3, #1
 8005e44:	2300      	moveq	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	e015      	b.n	8005e76 <HAL_TIM_PWM_Start+0x9e>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d109      	bne.n	8005e64 <HAL_TIM_PWM_Start+0x8c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	e008      	b.n	8005e76 <HAL_TIM_PWM_Start+0x9e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	bf14      	ite	ne
 8005e70:	2301      	movne	r3, #1
 8005e72:	2300      	moveq	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e06e      	b.n	8005f5c <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_PWM_Start+0xb6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e8c:	e023      	b.n	8005ed6 <HAL_TIM_PWM_Start+0xfe>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d104      	bne.n	8005e9e <HAL_TIM_PWM_Start+0xc6>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e9c:	e01b      	b.n	8005ed6 <HAL_TIM_PWM_Start+0xfe>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d104      	bne.n	8005eae <HAL_TIM_PWM_Start+0xd6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eac:	e013      	b.n	8005ed6 <HAL_TIM_PWM_Start+0xfe>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_PWM_Start+0xe6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ebc:	e00b      	b.n	8005ed6 <HAL_TIM_PWM_Start+0xfe>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d104      	bne.n	8005ece <HAL_TIM_PWM_Start+0xf6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ecc:	e003      	b.n	8005ed6 <HAL_TIM_PWM_Start+0xfe>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2201      	movs	r2, #1
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 f92c 	bl	800713c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <HAL_TIM_PWM_Start+0x18c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x13e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <HAL_TIM_PWM_Start+0x190>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00e      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x13e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <HAL_TIM_PWM_Start+0x194>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x13e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1a      	ldr	r2, [pc, #104]	; (8005f70 <HAL_TIM_PWM_Start+0x198>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x13e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <HAL_TIM_PWM_Start+0x19c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d101      	bne.n	8005f1a <HAL_TIM_PWM_Start+0x142>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <HAL_TIM_PWM_Start+0x144>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <HAL_TIM_PWM_Start+0x1a0>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b06      	cmp	r3, #6
 8005f40:	d00b      	beq.n	8005f5a <HAL_TIM_PWM_Start+0x182>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f48:	d007      	beq.n	8005f5a <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0201 	orr.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40013400 	.word	0x40013400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800
 8005f78:	00010007 	.word	0x00010007

08005f7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e097      	b.n	80060c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fc fa67 	bl	8002478 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005fc0:	f023 0307 	bic.w	r3, r3, #7
 8005fc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	f000 fc91 	bl	80068f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	4313      	orrs	r3, r2
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800601c:	f023 030c 	bic.w	r3, r3, #12
 8006020:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800602c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	4313      	orrs	r3, r2
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	031b      	lsls	r3, r3, #12
 800604c:	4313      	orrs	r3, r2
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006062:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	4313      	orrs	r3, r2
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d110      	bne.n	800611a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d102      	bne.n	8006104 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060fe:	7b7b      	ldrb	r3, [r7, #13]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d001      	beq.n	8006108 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e068      	b.n	80061da <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006118:	e031      	b.n	800617e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b04      	cmp	r3, #4
 800611e:	d110      	bne.n	8006142 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d102      	bne.n	800612c <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006126:	7b3b      	ldrb	r3, [r7, #12]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d001      	beq.n	8006130 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e054      	b.n	80061da <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006140:	e01d      	b.n	800617e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d108      	bne.n	800615a <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d105      	bne.n	800615a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800614e:	7b7b      	ldrb	r3, [r7, #13]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d102      	bne.n	800615a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006154:	7b3b      	ldrb	r3, [r7, #12]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d001      	beq.n	800615e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e03d      	b.n	80061da <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_TIM_Encoder_Start+0xc2>
 8006184:	2b04      	cmp	r3, #4
 8006186:	d008      	beq.n	800619a <HAL_TIM_Encoder_Start+0xd2>
 8006188:	e00f      	b.n	80061aa <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2201      	movs	r2, #1
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f000 ffd2 	bl	800713c <TIM_CCxChannelCmd>
      break;
 8006198:	e016      	b.n	80061c8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2201      	movs	r2, #1
 80061a0:	2104      	movs	r1, #4
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 ffca 	bl	800713c <TIM_CCxChannelCmd>
      break;
 80061a8:	e00e      	b.n	80061c8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2201      	movs	r2, #1
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 ffc2 	bl	800713c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2201      	movs	r2, #1
 80061be:	2104      	movs	r1, #4
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 ffbb 	bl	800713c <TIM_CCxChannelCmd>
      break;
 80061c6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d122      	bne.n	800623e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d11b      	bne.n	800623e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f06f 0202 	mvn.w	r2, #2
 800620e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7fb fcf1 	bl	8001c0c <HAL_TIM_IC_CaptureCallback>
 800622a:	e005      	b.n	8006238 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fb45 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fb4c 	bl	80068d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b04      	cmp	r3, #4
 800624a:	d122      	bne.n	8006292 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b04      	cmp	r3, #4
 8006258:	d11b      	bne.n	8006292 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f06f 0204 	mvn.w	r2, #4
 8006262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fb fcc7 	bl	8001c0c <HAL_TIM_IC_CaptureCallback>
 800627e:	e005      	b.n	800628c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fb1b 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fb22 	bl	80068d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d122      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d11b      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f06f 0208 	mvn.w	r2, #8
 80062b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2204      	movs	r2, #4
 80062bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f003 0303 	and.w	r3, r3, #3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7fb fc9d 	bl	8001c0c <HAL_TIM_IC_CaptureCallback>
 80062d2:	e005      	b.n	80062e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 faf1 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 faf8 	bl	80068d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d122      	bne.n	800633a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d11b      	bne.n	800633a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f06f 0210 	mvn.w	r2, #16
 800630a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2208      	movs	r2, #8
 8006310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fb fc73 	bl	8001c0c <HAL_TIM_IC_CaptureCallback>
 8006326:	e005      	b.n	8006334 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fac7 	bl	80068bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 face 	bl	80068d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10e      	bne.n	8006366 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b01      	cmp	r3, #1
 8006354:	d107      	bne.n	8006366 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f06f 0201 	mvn.w	r2, #1
 800635e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7fb fb5d 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006370:	2b80      	cmp	r3, #128	; 0x80
 8006372:	d10e      	bne.n	8006392 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637e:	2b80      	cmp	r3, #128	; 0x80
 8006380:	d107      	bne.n	8006392 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800638a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 f8a7 	bl	80074e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a0:	d10e      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	d107      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 f89a 	bl	80074f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b40      	cmp	r3, #64	; 0x40
 80063cc:	d10e      	bne.n	80063ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d107      	bne.n	80063ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa7c 	bl	80068e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d10e      	bne.n	8006418 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b20      	cmp	r3, #32
 8006406:	d107      	bne.n	8006418 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0220 	mvn.w	r2, #32
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 f85a 	bl	80074cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006426:	d10f      	bne.n	8006448 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006436:	d107      	bne.n	8006448 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 f860 	bl	8007508 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006456:	d10f      	bne.n	8006478 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006466:	d107      	bne.n	8006478 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 f852 	bl	800751c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006486:	d10f      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006496:	d107      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80064a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 f844 	bl	8007530 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064b6:	d10f      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064c6:	d107      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80064d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 f836 	bl	8007544 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e0fd      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b14      	cmp	r3, #20
 8006506:	f200 80f0 	bhi.w	80066ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800650a:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006565 	.word	0x08006565
 8006514:	080066eb 	.word	0x080066eb
 8006518:	080066eb 	.word	0x080066eb
 800651c:	080066eb 	.word	0x080066eb
 8006520:	080065a5 	.word	0x080065a5
 8006524:	080066eb 	.word	0x080066eb
 8006528:	080066eb 	.word	0x080066eb
 800652c:	080066eb 	.word	0x080066eb
 8006530:	080065e7 	.word	0x080065e7
 8006534:	080066eb 	.word	0x080066eb
 8006538:	080066eb 	.word	0x080066eb
 800653c:	080066eb 	.word	0x080066eb
 8006540:	08006627 	.word	0x08006627
 8006544:	080066eb 	.word	0x080066eb
 8006548:	080066eb 	.word	0x080066eb
 800654c:	080066eb 	.word	0x080066eb
 8006550:	08006669 	.word	0x08006669
 8006554:	080066eb 	.word	0x080066eb
 8006558:	080066eb 	.word	0x080066eb
 800655c:	080066eb 	.word	0x080066eb
 8006560:	080066a9 	.word	0x080066a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fa54 	bl	8006a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0208 	orr.w	r2, r2, #8
 800657e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0204 	bic.w	r2, r2, #4
 800658e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6999      	ldr	r1, [r3, #24]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	619a      	str	r2, [r3, #24]
      break;
 80065a2:	e0a3      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fac4 	bl	8006b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6999      	ldr	r1, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	021a      	lsls	r2, r3, #8
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	619a      	str	r2, [r3, #24]
      break;
 80065e4:	e082      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fb2d 	bl	8006c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0208 	orr.w	r2, r2, #8
 8006600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0204 	bic.w	r2, r2, #4
 8006610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69d9      	ldr	r1, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	61da      	str	r2, [r3, #28]
      break;
 8006624:	e062      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fb95 	bl	8006d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69d9      	ldr	r1, [r3, #28]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	021a      	lsls	r2, r3, #8
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	61da      	str	r2, [r3, #28]
      break;
 8006666:	e041      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fbfe 	bl	8006e70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0208 	orr.w	r2, r2, #8
 8006682:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0204 	bic.w	r2, r2, #4
 8006692:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80066a6:	e021      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fc42 	bl	8006f38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	021a      	lsls	r2, r3, #8
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80066e8:	e000      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80066ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop

08006700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_TIM_ConfigClockSource+0x18>
 8006714:	2302      	movs	r3, #2
 8006716:	e0c3      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1a0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800673a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006742:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b70      	cmp	r3, #112	; 0x70
 8006752:	d038      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0xc6>
 8006754:	2b70      	cmp	r3, #112	; 0x70
 8006756:	d815      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x84>
 8006758:	2b30      	cmp	r3, #48	; 0x30
 800675a:	f000 808e 	beq.w	800687a <HAL_TIM_ConfigClockSource+0x17a>
 800675e:	2b30      	cmp	r3, #48	; 0x30
 8006760:	d809      	bhi.n	8006776 <HAL_TIM_ConfigClockSource+0x76>
 8006762:	2b10      	cmp	r3, #16
 8006764:	f000 8089 	beq.w	800687a <HAL_TIM_ConfigClockSource+0x17a>
 8006768:	2b20      	cmp	r3, #32
 800676a:	f000 8086 	beq.w	800687a <HAL_TIM_ConfigClockSource+0x17a>
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 8083 	beq.w	800687a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006774:	e08b      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006776:	2b50      	cmp	r3, #80	; 0x50
 8006778:	d04f      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x11a>
 800677a:	2b60      	cmp	r3, #96	; 0x60
 800677c:	d05d      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x13a>
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d06b      	beq.n	800685a <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8006782:	e084      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006784:	4a48      	ldr	r2, [pc, #288]	; (80068a8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d077      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x17a>
 800678a:	4a47      	ldr	r2, [pc, #284]	; (80068a8 <HAL_TIM_ConfigClockSource+0x1a8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d809      	bhi.n	80067a4 <HAL_TIM_ConfigClockSource+0xa4>
 8006790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006794:	d02e      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0xf4>
 8006796:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800679a:	d06e      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x17a>
 800679c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a0:	d074      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80067a2:	e074      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80067a4:	4a41      	ldr	r2, [pc, #260]	; (80068ac <HAL_TIM_ConfigClockSource+0x1ac>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d067      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x17a>
 80067aa:	4a40      	ldr	r2, [pc, #256]	; (80068ac <HAL_TIM_ConfigClockSource+0x1ac>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d803      	bhi.n	80067b8 <HAL_TIM_ConfigClockSource+0xb8>
 80067b0:	4a3f      	ldr	r2, [pc, #252]	; (80068b0 <HAL_TIM_ConfigClockSource+0x1b0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d061      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80067b6:	e06a      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80067b8:	4a3e      	ldr	r2, [pc, #248]	; (80068b4 <HAL_TIM_ConfigClockSource+0x1b4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d05d      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x17a>
 80067be:	4a3e      	ldr	r2, [pc, #248]	; (80068b8 <HAL_TIM_ConfigClockSource+0x1b8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d05a      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80067c4:	e063      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6899      	ldr	r1, [r3, #8]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f000 fc91 	bl	80070fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	609a      	str	r2, [r3, #8]
      break;
 80067f2:	e04c      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	6899      	ldr	r1, [r3, #8]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f000 fc7a 	bl	80070fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006816:	609a      	str	r2, [r3, #8]
      break;
 8006818:	e039      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	6859      	ldr	r1, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	461a      	mov	r2, r3
 8006828:	f000 fbec 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2150      	movs	r1, #80	; 0x50
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fc45 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006838:	e029      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6859      	ldr	r1, [r3, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	461a      	mov	r2, r3
 8006848:	f000 fc0b 	bl	8007062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2160      	movs	r1, #96	; 0x60
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fc35 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006858:	e019      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6859      	ldr	r1, [r3, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	461a      	mov	r2, r3
 8006868:	f000 fbcc 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2140      	movs	r1, #64	; 0x40
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fc25 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006878:	e009      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f000 fc1c 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 800688a:	e000      	b.n	800688e <HAL_TIM_ConfigClockSource+0x18e>
      break;
 800688c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	00100020 	.word	0x00100020
 80068ac:	00100040 	.word	0x00100040
 80068b0:	00100030 	.word	0x00100030
 80068b4:	00100060 	.word	0x00100060
 80068b8:	00100070 	.word	0x00100070

080068bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a3c      	ldr	r2, [pc, #240]	; (80069fc <TIM_Base_SetConfig+0x104>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00f      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d00b      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a39      	ldr	r2, [pc, #228]	; (8006a00 <TIM_Base_SetConfig+0x108>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d007      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a38      	ldr	r2, [pc, #224]	; (8006a04 <TIM_Base_SetConfig+0x10c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a37      	ldr	r2, [pc, #220]	; (8006a08 <TIM_Base_SetConfig+0x110>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d108      	bne.n	8006942 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a2d      	ldr	r2, [pc, #180]	; (80069fc <TIM_Base_SetConfig+0x104>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01b      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006950:	d017      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a2a      	ldr	r2, [pc, #168]	; (8006a00 <TIM_Base_SetConfig+0x108>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a29      	ldr	r2, [pc, #164]	; (8006a04 <TIM_Base_SetConfig+0x10c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a28      	ldr	r2, [pc, #160]	; (8006a08 <TIM_Base_SetConfig+0x110>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a27      	ldr	r2, [pc, #156]	; (8006a0c <TIM_Base_SetConfig+0x114>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a26      	ldr	r2, [pc, #152]	; (8006a10 <TIM_Base_SetConfig+0x118>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a25      	ldr	r2, [pc, #148]	; (8006a14 <TIM_Base_SetConfig+0x11c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d108      	bne.n	8006994 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a10      	ldr	r2, [pc, #64]	; (80069fc <TIM_Base_SetConfig+0x104>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00f      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a11      	ldr	r2, [pc, #68]	; (8006a08 <TIM_Base_SetConfig+0x110>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a10      	ldr	r2, [pc, #64]	; (8006a0c <TIM_Base_SetConfig+0x114>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d007      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a0f      	ldr	r2, [pc, #60]	; (8006a10 <TIM_Base_SetConfig+0x118>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a0e      	ldr	r2, [pc, #56]	; (8006a14 <TIM_Base_SetConfig+0x11c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d103      	bne.n	80069e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	615a      	str	r2, [r3, #20]
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40012c00 	.word	0x40012c00
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40013400 	.word	0x40013400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400
 8006a14:	40014800 	.word	0x40014800

08006a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f023 0201 	bic.w	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0303 	bic.w	r3, r3, #3
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f023 0302 	bic.w	r3, r3, #2
 8006a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a2c      	ldr	r2, [pc, #176]	; (8006b24 <TIM_OC1_SetConfig+0x10c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00f      	beq.n	8006a98 <TIM_OC1_SetConfig+0x80>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a2b      	ldr	r2, [pc, #172]	; (8006b28 <TIM_OC1_SetConfig+0x110>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00b      	beq.n	8006a98 <TIM_OC1_SetConfig+0x80>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a2a      	ldr	r2, [pc, #168]	; (8006b2c <TIM_OC1_SetConfig+0x114>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d007      	beq.n	8006a98 <TIM_OC1_SetConfig+0x80>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a29      	ldr	r2, [pc, #164]	; (8006b30 <TIM_OC1_SetConfig+0x118>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_OC1_SetConfig+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a28      	ldr	r2, [pc, #160]	; (8006b34 <TIM_OC1_SetConfig+0x11c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d10c      	bne.n	8006ab2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f023 0308 	bic.w	r3, r3, #8
 8006a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f023 0304 	bic.w	r3, r3, #4
 8006ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <TIM_OC1_SetConfig+0x10c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00f      	beq.n	8006ada <TIM_OC1_SetConfig+0xc2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a1a      	ldr	r2, [pc, #104]	; (8006b28 <TIM_OC1_SetConfig+0x110>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00b      	beq.n	8006ada <TIM_OC1_SetConfig+0xc2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a19      	ldr	r2, [pc, #100]	; (8006b2c <TIM_OC1_SetConfig+0x114>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d007      	beq.n	8006ada <TIM_OC1_SetConfig+0xc2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <TIM_OC1_SetConfig+0x118>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d003      	beq.n	8006ada <TIM_OC1_SetConfig+0xc2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a17      	ldr	r2, [pc, #92]	; (8006b34 <TIM_OC1_SetConfig+0x11c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d111      	bne.n	8006afe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	621a      	str	r2, [r3, #32]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40013400 	.word	0x40013400
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40014400 	.word	0x40014400
 8006b34:	40014800 	.word	0x40014800

08006b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f023 0210 	bic.w	r2, r3, #16
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f023 0320 	bic.w	r3, r3, #32
 8006b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a28      	ldr	r2, [pc, #160]	; (8006c38 <TIM_OC2_SetConfig+0x100>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_OC2_SetConfig+0x6c>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a27      	ldr	r2, [pc, #156]	; (8006c3c <TIM_OC2_SetConfig+0x104>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d10d      	bne.n	8006bc0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a1d      	ldr	r2, [pc, #116]	; (8006c38 <TIM_OC2_SetConfig+0x100>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00f      	beq.n	8006be8 <TIM_OC2_SetConfig+0xb0>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a1c      	ldr	r2, [pc, #112]	; (8006c3c <TIM_OC2_SetConfig+0x104>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00b      	beq.n	8006be8 <TIM_OC2_SetConfig+0xb0>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <TIM_OC2_SetConfig+0x108>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <TIM_OC2_SetConfig+0xb0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a1a      	ldr	r2, [pc, #104]	; (8006c44 <TIM_OC2_SetConfig+0x10c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_OC2_SetConfig+0xb0>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a19      	ldr	r2, [pc, #100]	; (8006c48 <TIM_OC2_SetConfig+0x110>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d113      	bne.n	8006c10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a27      	ldr	r2, [pc, #156]	; (8006d48 <TIM_OC3_SetConfig+0xfc>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_OC3_SetConfig+0x6a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a26      	ldr	r2, [pc, #152]	; (8006d4c <TIM_OC3_SetConfig+0x100>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d10d      	bne.n	8006cd2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a1c      	ldr	r2, [pc, #112]	; (8006d48 <TIM_OC3_SetConfig+0xfc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00f      	beq.n	8006cfa <TIM_OC3_SetConfig+0xae>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <TIM_OC3_SetConfig+0x100>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00b      	beq.n	8006cfa <TIM_OC3_SetConfig+0xae>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a1a      	ldr	r2, [pc, #104]	; (8006d50 <TIM_OC3_SetConfig+0x104>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d007      	beq.n	8006cfa <TIM_OC3_SetConfig+0xae>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a19      	ldr	r2, [pc, #100]	; (8006d54 <TIM_OC3_SetConfig+0x108>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d003      	beq.n	8006cfa <TIM_OC3_SetConfig+0xae>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a18      	ldr	r2, [pc, #96]	; (8006d58 <TIM_OC3_SetConfig+0x10c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d113      	bne.n	8006d22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	621a      	str	r2, [r3, #32]
}
 8006d3c:	bf00      	nop
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40013400 	.word	0x40013400
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40014400 	.word	0x40014400
 8006d58:	40014800 	.word	0x40014800

08006d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	031b      	lsls	r3, r3, #12
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a28      	ldr	r2, [pc, #160]	; (8006e5c <TIM_OC4_SetConfig+0x100>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC4_SetConfig+0x6c>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a27      	ldr	r2, [pc, #156]	; (8006e60 <TIM_OC4_SetConfig+0x104>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d10d      	bne.n	8006de4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a1d      	ldr	r2, [pc, #116]	; (8006e5c <TIM_OC4_SetConfig+0x100>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00f      	beq.n	8006e0c <TIM_OC4_SetConfig+0xb0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a1c      	ldr	r2, [pc, #112]	; (8006e60 <TIM_OC4_SetConfig+0x104>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00b      	beq.n	8006e0c <TIM_OC4_SetConfig+0xb0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <TIM_OC4_SetConfig+0x108>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d007      	beq.n	8006e0c <TIM_OC4_SetConfig+0xb0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a1a      	ldr	r2, [pc, #104]	; (8006e68 <TIM_OC4_SetConfig+0x10c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_OC4_SetConfig+0xb0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <TIM_OC4_SetConfig+0x110>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d113      	bne.n	8006e34 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	019b      	lsls	r3, r3, #6
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	019b      	lsls	r3, r3, #6
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40012c00 	.word	0x40012c00
 8006e60:	40013400 	.word	0x40013400
 8006e64:	40014000 	.word	0x40014000
 8006e68:	40014400 	.word	0x40014400
 8006e6c:	40014800 	.word	0x40014800

08006e70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006eb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a17      	ldr	r2, [pc, #92]	; (8006f24 <TIM_OC5_SetConfig+0xb4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <TIM_OC5_SetConfig+0x7a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a16      	ldr	r2, [pc, #88]	; (8006f28 <TIM_OC5_SetConfig+0xb8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <TIM_OC5_SetConfig+0x7a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a15      	ldr	r2, [pc, #84]	; (8006f2c <TIM_OC5_SetConfig+0xbc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <TIM_OC5_SetConfig+0x7a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a14      	ldr	r2, [pc, #80]	; (8006f30 <TIM_OC5_SetConfig+0xc0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_OC5_SetConfig+0x7a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a13      	ldr	r2, [pc, #76]	; (8006f34 <TIM_OC5_SetConfig+0xc4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d109      	bne.n	8006efe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	621a      	str	r2, [r3, #32]
}
 8006f18:	bf00      	nop
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40013400 	.word	0x40013400
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40014400 	.word	0x40014400
 8006f34:	40014800 	.word	0x40014800

08006f38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	051b      	lsls	r3, r3, #20
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a18      	ldr	r2, [pc, #96]	; (8006ff0 <TIM_OC6_SetConfig+0xb8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00f      	beq.n	8006fb4 <TIM_OC6_SetConfig+0x7c>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a17      	ldr	r2, [pc, #92]	; (8006ff4 <TIM_OC6_SetConfig+0xbc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00b      	beq.n	8006fb4 <TIM_OC6_SetConfig+0x7c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <TIM_OC6_SetConfig+0xc0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d007      	beq.n	8006fb4 <TIM_OC6_SetConfig+0x7c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <TIM_OC6_SetConfig+0xc4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d003      	beq.n	8006fb4 <TIM_OC6_SetConfig+0x7c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a14      	ldr	r2, [pc, #80]	; (8007000 <TIM_OC6_SetConfig+0xc8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d109      	bne.n	8006fc8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	029b      	lsls	r3, r3, #10
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	621a      	str	r2, [r3, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40013400 	.word	0x40013400
 8006ff8:	40014000 	.word	0x40014000
 8006ffc:	40014400 	.word	0x40014400
 8007000:	40014800 	.word	0x40014800

08007004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 0201 	bic.w	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f023 030a 	bic.w	r3, r3, #10
 8007040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007062:	b480      	push	{r7}
 8007064:	b087      	sub	sp, #28
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f023 0210 	bic.w	r2, r3, #16
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800708c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800709e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f043 0307 	orr.w	r3, r3, #7
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	609a      	str	r2, [r3, #8]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	431a      	orrs	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4313      	orrs	r3, r2
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	609a      	str	r2, [r3, #8]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2201      	movs	r2, #1
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a1a      	ldr	r2, [r3, #32]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	43db      	mvns	r3, r3
 800715e:	401a      	ands	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a1a      	ldr	r2, [r3, #32]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	431a      	orrs	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d109      	bne.n	80071ac <HAL_TIMEx_PWMN_Start+0x24>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	bf14      	ite	ne
 80071a4:	2301      	movne	r3, #1
 80071a6:	2300      	moveq	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	e022      	b.n	80071f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d109      	bne.n	80071c6 <HAL_TIMEx_PWMN_Start+0x3e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	bf14      	ite	ne
 80071be:	2301      	movne	r3, #1
 80071c0:	2300      	moveq	r3, #0
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	e015      	b.n	80071f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d109      	bne.n	80071e0 <HAL_TIMEx_PWMN_Start+0x58>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	e008      	b.n	80071f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	bf14      	ite	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	2300      	moveq	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e040      	b.n	800727c <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d104      	bne.n	800720a <HAL_TIMEx_PWMN_Start+0x82>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007208:	e013      	b.n	8007232 <HAL_TIMEx_PWMN_Start+0xaa>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d104      	bne.n	800721a <HAL_TIMEx_PWMN_Start+0x92>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007218:	e00b      	b.n	8007232 <HAL_TIMEx_PWMN_Start+0xaa>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d104      	bne.n	800722a <HAL_TIMEx_PWMN_Start+0xa2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007228:	e003      	b.n	8007232 <HAL_TIMEx_PWMN_Start+0xaa>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2204      	movs	r2, #4
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f98c 	bl	8007558 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800724e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <HAL_TIMEx_PWMN_Start+0xfc>)
 8007258:	4013      	ands	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b06      	cmp	r3, #6
 8007260:	d00b      	beq.n	800727a <HAL_TIMEx_PWMN_Start+0xf2>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007268:	d007      	beq.n	800727a <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	00010007 	.word	0x00010007

08007288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800729c:	2302      	movs	r3, #2
 800729e:	e065      	b.n	800736c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a2c      	ldr	r2, [pc, #176]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d004      	beq.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a2b      	ldr	r2, [pc, #172]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d108      	bne.n	80072e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a1b      	ldr	r2, [pc, #108]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d018      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007316:	d013      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a18      	ldr	r2, [pc, #96]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d00e      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a17      	ldr	r2, [pc, #92]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d009      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a12      	ldr	r2, [pc, #72]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d004      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a13      	ldr	r2, [pc, #76]	; (8007388 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d10c      	bne.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007346:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	4313      	orrs	r3, r2
 8007350:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40013400 	.word	0x40013400
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40014000 	.word	0x40014000

0800738c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e087      	b.n	80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	041b      	lsls	r3, r3, #16
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a27      	ldr	r2, [pc, #156]	; (80074c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d004      	beq.n	8007436 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a25      	ldr	r2, [pc, #148]	; (80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d106      	bne.n	8007444 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d126      	bne.n	80074a6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	051b      	lsls	r3, r3, #20
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a0e      	ldr	r2, [pc, #56]	; (80074c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d004      	beq.n	8007498 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d106      	bne.n	80074a6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40013400 	.word	0x40013400

080074cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f003 031f 	and.w	r3, r3, #31
 800756a:	2204      	movs	r2, #4
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1a      	ldr	r2, [r3, #32]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	43db      	mvns	r3, r3
 800757a:	401a      	ands	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a1a      	ldr	r2, [r3, #32]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	fa01 f303 	lsl.w	r3, r1, r3
 8007590:	431a      	orrs	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e042      	b.n	800763a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d106      	bne.n	80075cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fb f87e 	bl	80026c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2224      	movs	r2, #36	; 0x24
 80075d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0201 	bic.w	r2, r2, #1
 80075e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fa7f 	bl	8007ae8 <UART_SetConfig>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e022      	b.n	800763a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 fc2d 	bl	8008e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007610:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007620:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0201 	orr.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fcb4 	bl	8008fa0 <UART_CheckIdleState>
 8007638:	4603      	mov	r3, r0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007658:	2b20      	cmp	r3, #32
 800765a:	f040 80bc 	bne.w	80077d6 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <HAL_UART_Receive_IT+0x26>
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e0b4      	b.n	80077d8 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_UART_Receive_IT+0x38>
 8007678:	2302      	movs	r3, #2
 800767a:	e0ad      	b.n	80077d8 <HAL_UART_Receive_IT+0x194>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	88fa      	ldrh	r2, [r7, #6]
 800768e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a8:	d10e      	bne.n	80076c8 <HAL_UART_Receive_IT+0x84>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d105      	bne.n	80076be <HAL_UART_Receive_IT+0x7a>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076bc:	e02d      	b.n	800771a <HAL_UART_Receive_IT+0xd6>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	22ff      	movs	r2, #255	; 0xff
 80076c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076c6:	e028      	b.n	800771a <HAL_UART_Receive_IT+0xd6>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10d      	bne.n	80076ec <HAL_UART_Receive_IT+0xa8>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d104      	bne.n	80076e2 <HAL_UART_Receive_IT+0x9e>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	22ff      	movs	r2, #255	; 0xff
 80076dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076e0:	e01b      	b.n	800771a <HAL_UART_Receive_IT+0xd6>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	227f      	movs	r2, #127	; 0x7f
 80076e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076ea:	e016      	b.n	800771a <HAL_UART_Receive_IT+0xd6>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076f4:	d10d      	bne.n	8007712 <HAL_UART_Receive_IT+0xce>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <HAL_UART_Receive_IT+0xc4>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	227f      	movs	r2, #127	; 0x7f
 8007702:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007706:	e008      	b.n	800771a <HAL_UART_Receive_IT+0xd6>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	223f      	movs	r2, #63	; 0x3f
 800770c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007710:	e003      	b.n	800771a <HAL_UART_Receive_IT+0xd6>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2222      	movs	r2, #34	; 0x22
 8007726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0201 	orr.w	r2, r2, #1
 8007738:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007742:	d12a      	bne.n	800779a <HAL_UART_Receive_IT+0x156>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800774a:	88fa      	ldrh	r2, [r7, #6]
 800774c:	429a      	cmp	r2, r3
 800774e:	d324      	bcc.n	800779a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007758:	d107      	bne.n	800776a <HAL_UART_Receive_IT+0x126>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <HAL_UART_Receive_IT+0x1a0>)
 8007766:	66da      	str	r2, [r3, #108]	; 0x6c
 8007768:	e002      	b.n	8007770 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <HAL_UART_Receive_IT+0x1a4>)
 800776e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007786:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007796:	609a      	str	r2, [r3, #8]
 8007798:	e01b      	b.n	80077d2 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a2:	d107      	bne.n	80077b4 <HAL_UART_Receive_IT+0x170>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4a0f      	ldr	r2, [pc, #60]	; (80077ec <HAL_UART_Receive_IT+0x1a8>)
 80077b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80077b2:	e002      	b.n	80077ba <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4a0e      	ldr	r2, [pc, #56]	; (80077f0 <HAL_UART_Receive_IT+0x1ac>)
 80077b8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80077d0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	e000      	b.n	80077d8 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	080093c9 	.word	0x080093c9
 80077e8:	080092c1 	.word	0x080092c1
 80077ec:	08009215 	.word	0x08009215
 80077f0:	0800916b 	.word	0x0800916b

080077f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d118      	bne.n	8007854 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d013      	beq.n	8007854 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d104      	bne.n	8007840 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 812e 	beq.w	8007aa6 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	4798      	blx	r3
      }
      return;
 8007852:	e128      	b.n	8007aa6 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 80d1 	beq.w	80079fe <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	4b96      	ldr	r3, [pc, #600]	; (8007ab8 <HAL_UART_IRQHandler+0x2c4>)
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d105      	bne.n	8007872 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 80c6 	beq.w	80079fe <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d010      	beq.n	800789e <HAL_UART_IRQHandler+0xaa>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2201      	movs	r2, #1
 800788c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007894:	f043 0201 	orr.w	r2, r3, #1
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d010      	beq.n	80078ca <HAL_UART_IRQHandler+0xd6>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2202      	movs	r2, #2
 80078b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c0:	f043 0204 	orr.w	r2, r3, #4
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d010      	beq.n	80078f6 <HAL_UART_IRQHandler+0x102>
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2204      	movs	r2, #4
 80078e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ec:	f043 0202 	orr.w	r2, r3, #2
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d015      	beq.n	800792c <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4b6a      	ldr	r3, [pc, #424]	; (8007ab8 <HAL_UART_IRQHandler+0x2c4>)
 800790e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2208      	movs	r2, #8
 800791a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007922:	f043 0208 	orr.w	r2, r3, #8
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80b9 	beq.w	8007aaa <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b00      	cmp	r3, #0
 8007940:	d011      	beq.n	8007966 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	f003 0320 	and.w	r3, r3, #32
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d004      	beq.n	8007986 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007982:	2b00      	cmp	r3, #0
 8007984:	d031      	beq.n	80079ea <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 fb9c 	bl	80090c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007996:	2b40      	cmp	r3, #64	; 0x40
 8007998:	d123      	bne.n	80079e2 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d013      	beq.n	80079da <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079b6:	4a41      	ldr	r2, [pc, #260]	; (8007abc <HAL_UART_IRQHandler+0x2c8>)
 80079b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fc fe53 	bl	800466a <HAL_DMA_Abort_IT>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d017      	beq.n	80079fa <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80079d4:	4610      	mov	r0, r2
 80079d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d8:	e00f      	b.n	80079fa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f87a 	bl	8007ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	e00b      	b.n	80079fa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f876 	bl	8007ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e8:	e007      	b.n	80079fa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f872 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80079f8:	e057      	b.n	8007aaa <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079fa:	bf00      	nop
    return;
 80079fc:	e055      	b.n	8007aaa <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00d      	beq.n	8007a24 <HAL_UART_IRQHandler+0x230>
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d008      	beq.n	8007a24 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fd57 	bl	80094d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a22:	e045      	b.n	8007ab0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d012      	beq.n	8007a54 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d104      	bne.n	8007a42 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d008      	beq.n	8007a54 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d031      	beq.n	8007aae <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
    }
    return;
 8007a52:	e02c      	b.n	8007aae <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <HAL_UART_IRQHandler+0x27c>
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fb64 	bl	8009136 <UART_EndTransmit_IT>
    return;
 8007a6e:	e01f      	b.n	8007ab0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d008      	beq.n	8007a8c <HAL_UART_IRQHandler+0x298>
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 fd37 	bl	80094f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a8a:	e011      	b.n	8007ab0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00c      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x2bc>
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	da09      	bge.n	8007ab0 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fd21 	bl	80094e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aa2:	bf00      	nop
 8007aa4:	e004      	b.n	8007ab0 <HAL_UART_IRQHandler+0x2bc>
      return;
 8007aa6:	bf00      	nop
 8007aa8:	e002      	b.n	8007ab0 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007aaa:	bf00      	nop
 8007aac:	e000      	b.n	8007ab0 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007aae:	bf00      	nop
  }
}
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	10000001 	.word	0x10000001
 8007abc:	0800910b 	.word	0x0800910b

08007ac0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007aec:	b08a      	sub	sp, #40	; 0x28
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4ba4      	ldr	r3, [pc, #656]	; (8007db8 <UART_SetConfig+0x2d0>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a99      	ldr	r2, [pc, #612]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d004      	beq.n	8007b64 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b60:	4313      	orrs	r3, r2
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6812      	ldr	r2, [r2, #0]
 8007b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	f023 010f 	bic.w	r1, r3, #15
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a8a      	ldr	r2, [pc, #552]	; (8007dc0 <UART_SetConfig+0x2d8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d126      	bne.n	8007bea <UART_SetConfig+0x102>
 8007b9c:	4b89      	ldr	r3, [pc, #548]	; (8007dc4 <UART_SetConfig+0x2dc>)
 8007b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d81a      	bhi.n	8007be0 <UART_SetConfig+0xf8>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <UART_SetConfig+0xc8>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bd1 	.word	0x08007bd1
 8007bb8:	08007bc9 	.word	0x08007bc9
 8007bbc:	08007bd9 	.word	0x08007bd9
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bc6:	e0d6      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bce:	e0d2      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007bd0:	2304      	movs	r3, #4
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd6:	e0ce      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007bd8:	2308      	movs	r3, #8
 8007bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bde:	e0ca      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007be0:	2310      	movs	r3, #16
 8007be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007be6:	bf00      	nop
 8007be8:	e0c5      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a76      	ldr	r2, [pc, #472]	; (8007dc8 <UART_SetConfig+0x2e0>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d138      	bne.n	8007c66 <UART_SetConfig+0x17e>
 8007bf4:	4b73      	ldr	r3, [pc, #460]	; (8007dc4 <UART_SetConfig+0x2dc>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfa:	f003 030c 	and.w	r3, r3, #12
 8007bfe:	2b0c      	cmp	r3, #12
 8007c00:	d82c      	bhi.n	8007c5c <UART_SetConfig+0x174>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <UART_SetConfig+0x120>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c3d 	.word	0x08007c3d
 8007c0c:	08007c5d 	.word	0x08007c5d
 8007c10:	08007c5d 	.word	0x08007c5d
 8007c14:	08007c5d 	.word	0x08007c5d
 8007c18:	08007c4d 	.word	0x08007c4d
 8007c1c:	08007c5d 	.word	0x08007c5d
 8007c20:	08007c5d 	.word	0x08007c5d
 8007c24:	08007c5d 	.word	0x08007c5d
 8007c28:	08007c45 	.word	0x08007c45
 8007c2c:	08007c5d 	.word	0x08007c5d
 8007c30:	08007c5d 	.word	0x08007c5d
 8007c34:	08007c5d 	.word	0x08007c5d
 8007c38:	08007c55 	.word	0x08007c55
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c42:	e098      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007c44:	2302      	movs	r3, #2
 8007c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c4a:	e094      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c52:	e090      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5a:	e08c      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c62:	bf00      	nop
 8007c64:	e087      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a58      	ldr	r2, [pc, #352]	; (8007dcc <UART_SetConfig+0x2e4>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d125      	bne.n	8007cbc <UART_SetConfig+0x1d4>
 8007c70:	4b54      	ldr	r3, [pc, #336]	; (8007dc4 <UART_SetConfig+0x2dc>)
 8007c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c7a:	2b10      	cmp	r3, #16
 8007c7c:	d011      	beq.n	8007ca2 <UART_SetConfig+0x1ba>
 8007c7e:	2b10      	cmp	r3, #16
 8007c80:	d802      	bhi.n	8007c88 <UART_SetConfig+0x1a0>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d005      	beq.n	8007c92 <UART_SetConfig+0x1aa>
 8007c86:	e014      	b.n	8007cb2 <UART_SetConfig+0x1ca>
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d006      	beq.n	8007c9a <UART_SetConfig+0x1b2>
 8007c8c:	2b30      	cmp	r3, #48	; 0x30
 8007c8e:	d00c      	beq.n	8007caa <UART_SetConfig+0x1c2>
 8007c90:	e00f      	b.n	8007cb2 <UART_SetConfig+0x1ca>
 8007c92:	2300      	movs	r3, #0
 8007c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c98:	e06d      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca0:	e069      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007ca2:	2304      	movs	r3, #4
 8007ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca8:	e065      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007caa:	2308      	movs	r3, #8
 8007cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb0:	e061      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007cb2:	2310      	movs	r3, #16
 8007cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb8:	bf00      	nop
 8007cba:	e05c      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a43      	ldr	r2, [pc, #268]	; (8007dd0 <UART_SetConfig+0x2e8>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d125      	bne.n	8007d12 <UART_SetConfig+0x22a>
 8007cc6:	4b3f      	ldr	r3, [pc, #252]	; (8007dc4 <UART_SetConfig+0x2dc>)
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ccc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cd0:	2b40      	cmp	r3, #64	; 0x40
 8007cd2:	d011      	beq.n	8007cf8 <UART_SetConfig+0x210>
 8007cd4:	2b40      	cmp	r3, #64	; 0x40
 8007cd6:	d802      	bhi.n	8007cde <UART_SetConfig+0x1f6>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <UART_SetConfig+0x200>
 8007cdc:	e014      	b.n	8007d08 <UART_SetConfig+0x220>
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d006      	beq.n	8007cf0 <UART_SetConfig+0x208>
 8007ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ce4:	d00c      	beq.n	8007d00 <UART_SetConfig+0x218>
 8007ce6:	e00f      	b.n	8007d08 <UART_SetConfig+0x220>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cee:	e042      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf6:	e03e      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007cf8:	2304      	movs	r3, #4
 8007cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cfe:	e03a      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007d00:	2308      	movs	r3, #8
 8007d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d06:	e036      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007d08:	2310      	movs	r3, #16
 8007d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0e:	bf00      	nop
 8007d10:	e031      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a29      	ldr	r2, [pc, #164]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d129      	bne.n	8007d70 <UART_SetConfig+0x288>
 8007d1c:	4b29      	ldr	r3, [pc, #164]	; (8007dc4 <UART_SetConfig+0x2dc>)
 8007d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d2a:	d014      	beq.n	8007d56 <UART_SetConfig+0x26e>
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d30:	d802      	bhi.n	8007d38 <UART_SetConfig+0x250>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d007      	beq.n	8007d46 <UART_SetConfig+0x25e>
 8007d36:	e016      	b.n	8007d66 <UART_SetConfig+0x27e>
 8007d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d3c:	d007      	beq.n	8007d4e <UART_SetConfig+0x266>
 8007d3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d42:	d00c      	beq.n	8007d5e <UART_SetConfig+0x276>
 8007d44:	e00f      	b.n	8007d66 <UART_SetConfig+0x27e>
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d4c:	e013      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d54:	e00f      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007d56:	2304      	movs	r3, #4
 8007d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d5c:	e00b      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007d5e:	2308      	movs	r3, #8
 8007d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d64:	e007      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007d66:	2310      	movs	r3, #16
 8007d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d6c:	bf00      	nop
 8007d6e:	e002      	b.n	8007d76 <UART_SetConfig+0x28e>
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a10      	ldr	r2, [pc, #64]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	f040 842e 	bne.w	80085de <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	f200 8169 	bhi.w	800805e <UART_SetConfig+0x576>
 8007d8c:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <UART_SetConfig+0x2ac>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007dd5 	.word	0x08007dd5
 8007d98:	0800805f 	.word	0x0800805f
 8007d9c:	08007e77 	.word	0x08007e77
 8007da0:	0800805f 	.word	0x0800805f
 8007da4:	08007f0f 	.word	0x08007f0f
 8007da8:	0800805f 	.word	0x0800805f
 8007dac:	0800805f 	.word	0x0800805f
 8007db0:	0800805f 	.word	0x0800805f
 8007db4:	08007fb1 	.word	0x08007fb1
 8007db8:	cfff69f3 	.word	0xcfff69f3
 8007dbc:	40008000 	.word	0x40008000
 8007dc0:	40013800 	.word	0x40013800
 8007dc4:	40021000 	.word	0x40021000
 8007dc8:	40004400 	.word	0x40004400
 8007dcc:	40004800 	.word	0x40004800
 8007dd0:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007dd4:	f7fd fc80 	bl	80056d8 <HAL_RCC_GetPCLK1Freq>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d044      	beq.n	8007e6c <UART_SetConfig+0x384>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d03e      	beq.n	8007e68 <UART_SetConfig+0x380>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d038      	beq.n	8007e64 <UART_SetConfig+0x37c>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d032      	beq.n	8007e60 <UART_SetConfig+0x378>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d02c      	beq.n	8007e5c <UART_SetConfig+0x374>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2b05      	cmp	r3, #5
 8007e08:	d026      	beq.n	8007e58 <UART_SetConfig+0x370>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	2b06      	cmp	r3, #6
 8007e10:	d020      	beq.n	8007e54 <UART_SetConfig+0x36c>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	2b07      	cmp	r3, #7
 8007e18:	d01a      	beq.n	8007e50 <UART_SetConfig+0x368>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	2b08      	cmp	r3, #8
 8007e20:	d014      	beq.n	8007e4c <UART_SetConfig+0x364>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	2b09      	cmp	r3, #9
 8007e28:	d00e      	beq.n	8007e48 <UART_SetConfig+0x360>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	2b0a      	cmp	r3, #10
 8007e30:	d008      	beq.n	8007e44 <UART_SetConfig+0x35c>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	2b0b      	cmp	r3, #11
 8007e38:	d102      	bne.n	8007e40 <UART_SetConfig+0x358>
 8007e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e3e:	e016      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e014      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e44:	2380      	movs	r3, #128	; 0x80
 8007e46:	e012      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e48:	2340      	movs	r3, #64	; 0x40
 8007e4a:	e010      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e4c:	2320      	movs	r3, #32
 8007e4e:	e00e      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e50:	2310      	movs	r3, #16
 8007e52:	e00c      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e54:	230c      	movs	r3, #12
 8007e56:	e00a      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e58:	230a      	movs	r3, #10
 8007e5a:	e008      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	e006      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e60:	2306      	movs	r3, #6
 8007e62:	e004      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e64:	2304      	movs	r3, #4
 8007e66:	e002      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e000      	b.n	8007e6e <UART_SetConfig+0x386>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e72:	617b      	str	r3, [r7, #20]
        break;
 8007e74:	e0f6      	b.n	8008064 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d044      	beq.n	8007f08 <UART_SetConfig+0x420>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d03e      	beq.n	8007f04 <UART_SetConfig+0x41c>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d038      	beq.n	8007f00 <UART_SetConfig+0x418>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d032      	beq.n	8007efc <UART_SetConfig+0x414>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d02c      	beq.n	8007ef8 <UART_SetConfig+0x410>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d026      	beq.n	8007ef4 <UART_SetConfig+0x40c>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b06      	cmp	r3, #6
 8007eac:	d020      	beq.n	8007ef0 <UART_SetConfig+0x408>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b07      	cmp	r3, #7
 8007eb4:	d01a      	beq.n	8007eec <UART_SetConfig+0x404>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d014      	beq.n	8007ee8 <UART_SetConfig+0x400>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2b09      	cmp	r3, #9
 8007ec4:	d00e      	beq.n	8007ee4 <UART_SetConfig+0x3fc>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	2b0a      	cmp	r3, #10
 8007ecc:	d008      	beq.n	8007ee0 <UART_SetConfig+0x3f8>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	2b0b      	cmp	r3, #11
 8007ed4:	d102      	bne.n	8007edc <UART_SetConfig+0x3f4>
 8007ed6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007eda:	e016      	b.n	8007f0a <UART_SetConfig+0x422>
 8007edc:	4ba1      	ldr	r3, [pc, #644]	; (8008164 <UART_SetConfig+0x67c>)
 8007ede:	e014      	b.n	8007f0a <UART_SetConfig+0x422>
 8007ee0:	4ba1      	ldr	r3, [pc, #644]	; (8008168 <UART_SetConfig+0x680>)
 8007ee2:	e012      	b.n	8007f0a <UART_SetConfig+0x422>
 8007ee4:	4ba1      	ldr	r3, [pc, #644]	; (800816c <UART_SetConfig+0x684>)
 8007ee6:	e010      	b.n	8007f0a <UART_SetConfig+0x422>
 8007ee8:	4ba1      	ldr	r3, [pc, #644]	; (8008170 <UART_SetConfig+0x688>)
 8007eea:	e00e      	b.n	8007f0a <UART_SetConfig+0x422>
 8007eec:	4ba1      	ldr	r3, [pc, #644]	; (8008174 <UART_SetConfig+0x68c>)
 8007eee:	e00c      	b.n	8007f0a <UART_SetConfig+0x422>
 8007ef0:	4ba1      	ldr	r3, [pc, #644]	; (8008178 <UART_SetConfig+0x690>)
 8007ef2:	e00a      	b.n	8007f0a <UART_SetConfig+0x422>
 8007ef4:	4ba1      	ldr	r3, [pc, #644]	; (800817c <UART_SetConfig+0x694>)
 8007ef6:	e008      	b.n	8007f0a <UART_SetConfig+0x422>
 8007ef8:	4ba1      	ldr	r3, [pc, #644]	; (8008180 <UART_SetConfig+0x698>)
 8007efa:	e006      	b.n	8007f0a <UART_SetConfig+0x422>
 8007efc:	4ba1      	ldr	r3, [pc, #644]	; (8008184 <UART_SetConfig+0x69c>)
 8007efe:	e004      	b.n	8007f0a <UART_SetConfig+0x422>
 8007f00:	4ba1      	ldr	r3, [pc, #644]	; (8008188 <UART_SetConfig+0x6a0>)
 8007f02:	e002      	b.n	8007f0a <UART_SetConfig+0x422>
 8007f04:	4ba1      	ldr	r3, [pc, #644]	; (800818c <UART_SetConfig+0x6a4>)
 8007f06:	e000      	b.n	8007f0a <UART_SetConfig+0x422>
 8007f08:	4b96      	ldr	r3, [pc, #600]	; (8008164 <UART_SetConfig+0x67c>)
 8007f0a:	617b      	str	r3, [r7, #20]
        break;
 8007f0c:	e0aa      	b.n	8008064 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007f0e:	f7fd fb75 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 8007f12:	4602      	mov	r2, r0
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d044      	beq.n	8007fa6 <UART_SetConfig+0x4be>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d03e      	beq.n	8007fa2 <UART_SetConfig+0x4ba>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d038      	beq.n	8007f9e <UART_SetConfig+0x4b6>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d032      	beq.n	8007f9a <UART_SetConfig+0x4b2>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d02c      	beq.n	8007f96 <UART_SetConfig+0x4ae>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	2b05      	cmp	r3, #5
 8007f42:	d026      	beq.n	8007f92 <UART_SetConfig+0x4aa>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	2b06      	cmp	r3, #6
 8007f4a:	d020      	beq.n	8007f8e <UART_SetConfig+0x4a6>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	2b07      	cmp	r3, #7
 8007f52:	d01a      	beq.n	8007f8a <UART_SetConfig+0x4a2>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d014      	beq.n	8007f86 <UART_SetConfig+0x49e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	2b09      	cmp	r3, #9
 8007f62:	d00e      	beq.n	8007f82 <UART_SetConfig+0x49a>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	2b0a      	cmp	r3, #10
 8007f6a:	d008      	beq.n	8007f7e <UART_SetConfig+0x496>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	2b0b      	cmp	r3, #11
 8007f72:	d102      	bne.n	8007f7a <UART_SetConfig+0x492>
 8007f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f78:	e016      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e014      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f7e:	2380      	movs	r3, #128	; 0x80
 8007f80:	e012      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f82:	2340      	movs	r3, #64	; 0x40
 8007f84:	e010      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f86:	2320      	movs	r3, #32
 8007f88:	e00e      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f8a:	2310      	movs	r3, #16
 8007f8c:	e00c      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	e00a      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f92:	230a      	movs	r3, #10
 8007f94:	e008      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f96:	2308      	movs	r3, #8
 8007f98:	e006      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f9a:	2306      	movs	r3, #6
 8007f9c:	e004      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f9e:	2304      	movs	r3, #4
 8007fa0:	e002      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e000      	b.n	8007fa8 <UART_SetConfig+0x4c0>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	617b      	str	r3, [r7, #20]
        break;
 8007fae:	e059      	b.n	8008064 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d04e      	beq.n	8008056 <UART_SetConfig+0x56e>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d047      	beq.n	8008050 <UART_SetConfig+0x568>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d040      	beq.n	800804a <UART_SetConfig+0x562>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d039      	beq.n	8008044 <UART_SetConfig+0x55c>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d032      	beq.n	800803e <UART_SetConfig+0x556>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d02b      	beq.n	8008038 <UART_SetConfig+0x550>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	2b06      	cmp	r3, #6
 8007fe6:	d024      	beq.n	8008032 <UART_SetConfig+0x54a>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	2b07      	cmp	r3, #7
 8007fee:	d01d      	beq.n	800802c <UART_SetConfig+0x544>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	d016      	beq.n	8008026 <UART_SetConfig+0x53e>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	2b09      	cmp	r3, #9
 8007ffe:	d00f      	beq.n	8008020 <UART_SetConfig+0x538>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	2b0a      	cmp	r3, #10
 8008006:	d008      	beq.n	800801a <UART_SetConfig+0x532>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	2b0b      	cmp	r3, #11
 800800e:	d101      	bne.n	8008014 <UART_SetConfig+0x52c>
 8008010:	2380      	movs	r3, #128	; 0x80
 8008012:	e022      	b.n	800805a <UART_SetConfig+0x572>
 8008014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008018:	e01f      	b.n	800805a <UART_SetConfig+0x572>
 800801a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800801e:	e01c      	b.n	800805a <UART_SetConfig+0x572>
 8008020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008024:	e019      	b.n	800805a <UART_SetConfig+0x572>
 8008026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802a:	e016      	b.n	800805a <UART_SetConfig+0x572>
 800802c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008030:	e013      	b.n	800805a <UART_SetConfig+0x572>
 8008032:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008036:	e010      	b.n	800805a <UART_SetConfig+0x572>
 8008038:	f640 43cc 	movw	r3, #3276	; 0xccc
 800803c:	e00d      	b.n	800805a <UART_SetConfig+0x572>
 800803e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008042:	e00a      	b.n	800805a <UART_SetConfig+0x572>
 8008044:	f241 5355 	movw	r3, #5461	; 0x1555
 8008048:	e007      	b.n	800805a <UART_SetConfig+0x572>
 800804a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800804e:	e004      	b.n	800805a <UART_SetConfig+0x572>
 8008050:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008054:	e001      	b.n	800805a <UART_SetConfig+0x572>
 8008056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800805a:	617b      	str	r3, [r7, #20]
        break;
 800805c:	e002      	b.n	8008064 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	76fb      	strb	r3, [r7, #27]
        break;
 8008062:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 86cd 	beq.w	8008e06 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	4613      	mov	r3, r2
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	4413      	add	r3, r2
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	429a      	cmp	r2, r3
 800807a:	d305      	bcc.n	8008088 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	429a      	cmp	r2, r3
 8008086:	d903      	bls.n	8008090 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	76fb      	strb	r3, [r7, #27]
 800808c:	f000 bebb 	b.w	8008e06 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8008090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008094:	2b08      	cmp	r3, #8
 8008096:	f200 828d 	bhi.w	80085b4 <UART_SetConfig+0xacc>
 800809a:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <UART_SetConfig+0x5b8>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080085b5 	.word	0x080085b5
 80080a8:	0800822f 	.word	0x0800822f
 80080ac:	080085b5 	.word	0x080085b5
 80080b0:	08008325 	.word	0x08008325
 80080b4:	080085b5 	.word	0x080085b5
 80080b8:	080085b5 	.word	0x080085b5
 80080bc:	080085b5 	.word	0x080085b5
 80080c0:	08008463 	.word	0x08008463
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80080c4:	f7fd fb08 	bl	80056d8 <HAL_RCC_GetPCLK1Freq>
 80080c8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f04f 0100 	mov.w	r1, #0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d07d      	beq.n	80081d6 <UART_SetConfig+0x6ee>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d074      	beq.n	80081cc <UART_SetConfig+0x6e4>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d06b      	beq.n	80081c2 <UART_SetConfig+0x6da>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d062      	beq.n	80081b8 <UART_SetConfig+0x6d0>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d059      	beq.n	80081ae <UART_SetConfig+0x6c6>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b05      	cmp	r3, #5
 8008100:	d050      	beq.n	80081a4 <UART_SetConfig+0x6bc>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b06      	cmp	r3, #6
 8008108:	d047      	beq.n	800819a <UART_SetConfig+0x6b2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b07      	cmp	r3, #7
 8008110:	d03e      	beq.n	8008190 <UART_SetConfig+0x6a8>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b08      	cmp	r3, #8
 8008118:	d01f      	beq.n	800815a <UART_SetConfig+0x672>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	2b09      	cmp	r3, #9
 8008120:	d016      	beq.n	8008150 <UART_SetConfig+0x668>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	2b0a      	cmp	r3, #10
 8008128:	d00d      	beq.n	8008146 <UART_SetConfig+0x65e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	2b0b      	cmp	r3, #11
 8008130:	d104      	bne.n	800813c <UART_SetConfig+0x654>
 8008132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008136:	f04f 0400 	mov.w	r4, #0
 800813a:	e050      	b.n	80081de <UART_SetConfig+0x6f6>
 800813c:	f04f 0301 	mov.w	r3, #1
 8008140:	f04f 0400 	mov.w	r4, #0
 8008144:	e04b      	b.n	80081de <UART_SetConfig+0x6f6>
 8008146:	f04f 0380 	mov.w	r3, #128	; 0x80
 800814a:	f04f 0400 	mov.w	r4, #0
 800814e:	e046      	b.n	80081de <UART_SetConfig+0x6f6>
 8008150:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008154:	f04f 0400 	mov.w	r4, #0
 8008158:	e041      	b.n	80081de <UART_SetConfig+0x6f6>
 800815a:	f04f 0320 	mov.w	r3, #32
 800815e:	f04f 0400 	mov.w	r4, #0
 8008162:	e03c      	b.n	80081de <UART_SetConfig+0x6f6>
 8008164:	00f42400 	.word	0x00f42400
 8008168:	0001e848 	.word	0x0001e848
 800816c:	0003d090 	.word	0x0003d090
 8008170:	0007a120 	.word	0x0007a120
 8008174:	000f4240 	.word	0x000f4240
 8008178:	00145855 	.word	0x00145855
 800817c:	00186a00 	.word	0x00186a00
 8008180:	001e8480 	.word	0x001e8480
 8008184:	0028b0aa 	.word	0x0028b0aa
 8008188:	003d0900 	.word	0x003d0900
 800818c:	007a1200 	.word	0x007a1200
 8008190:	f04f 0310 	mov.w	r3, #16
 8008194:	f04f 0400 	mov.w	r4, #0
 8008198:	e021      	b.n	80081de <UART_SetConfig+0x6f6>
 800819a:	f04f 030c 	mov.w	r3, #12
 800819e:	f04f 0400 	mov.w	r4, #0
 80081a2:	e01c      	b.n	80081de <UART_SetConfig+0x6f6>
 80081a4:	f04f 030a 	mov.w	r3, #10
 80081a8:	f04f 0400 	mov.w	r4, #0
 80081ac:	e017      	b.n	80081de <UART_SetConfig+0x6f6>
 80081ae:	f04f 0308 	mov.w	r3, #8
 80081b2:	f04f 0400 	mov.w	r4, #0
 80081b6:	e012      	b.n	80081de <UART_SetConfig+0x6f6>
 80081b8:	f04f 0306 	mov.w	r3, #6
 80081bc:	f04f 0400 	mov.w	r4, #0
 80081c0:	e00d      	b.n	80081de <UART_SetConfig+0x6f6>
 80081c2:	f04f 0304 	mov.w	r3, #4
 80081c6:	f04f 0400 	mov.w	r4, #0
 80081ca:	e008      	b.n	80081de <UART_SetConfig+0x6f6>
 80081cc:	f04f 0302 	mov.w	r3, #2
 80081d0:	f04f 0400 	mov.w	r4, #0
 80081d4:	e003      	b.n	80081de <UART_SetConfig+0x6f6>
 80081d6:	f04f 0301 	mov.w	r3, #1
 80081da:	f04f 0400 	mov.w	r4, #0
 80081de:	461a      	mov	r2, r3
 80081e0:	4623      	mov	r3, r4
 80081e2:	f7f8 fcbf 	bl	8000b64 <__aeabi_uldivmod>
 80081e6:	4603      	mov	r3, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	4619      	mov	r1, r3
 80081ec:	4622      	mov	r2, r4
 80081ee:	f04f 0300 	mov.w	r3, #0
 80081f2:	f04f 0400 	mov.w	r4, #0
 80081f6:	0214      	lsls	r4, r2, #8
 80081f8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80081fc:	020b      	lsls	r3, r1, #8
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	6852      	ldr	r2, [r2, #4]
 8008202:	0852      	lsrs	r2, r2, #1
 8008204:	4611      	mov	r1, r2
 8008206:	f04f 0200 	mov.w	r2, #0
 800820a:	eb13 0b01 	adds.w	fp, r3, r1
 800820e:	eb44 0c02 	adc.w	ip, r4, r2
 8008212:	4658      	mov	r0, fp
 8008214:	4661      	mov	r1, ip
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f04f 0400 	mov.w	r4, #0
 800821e:	461a      	mov	r2, r3
 8008220:	4623      	mov	r3, r4
 8008222:	f7f8 fc9f 	bl	8000b64 <__aeabi_uldivmod>
 8008226:	4603      	mov	r3, r0
 8008228:	460c      	mov	r4, r1
 800822a:	61fb      	str	r3, [r7, #28]
            break;
 800822c:	e1c5      	b.n	80085ba <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	2b00      	cmp	r3, #0
 8008234:	d05b      	beq.n	80082ee <UART_SetConfig+0x806>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b01      	cmp	r3, #1
 800823c:	d053      	beq.n	80082e6 <UART_SetConfig+0x7fe>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	2b02      	cmp	r3, #2
 8008244:	d04b      	beq.n	80082de <UART_SetConfig+0x7f6>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	2b03      	cmp	r3, #3
 800824c:	d043      	beq.n	80082d6 <UART_SetConfig+0x7ee>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b04      	cmp	r3, #4
 8008254:	d03b      	beq.n	80082ce <UART_SetConfig+0x7e6>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b05      	cmp	r3, #5
 800825c:	d033      	beq.n	80082c6 <UART_SetConfig+0x7de>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b06      	cmp	r3, #6
 8008264:	d02b      	beq.n	80082be <UART_SetConfig+0x7d6>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b07      	cmp	r3, #7
 800826c:	d023      	beq.n	80082b6 <UART_SetConfig+0x7ce>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b08      	cmp	r3, #8
 8008274:	d01b      	beq.n	80082ae <UART_SetConfig+0x7c6>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b09      	cmp	r3, #9
 800827c:	d013      	beq.n	80082a6 <UART_SetConfig+0x7be>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b0a      	cmp	r3, #10
 8008284:	d00b      	beq.n	800829e <UART_SetConfig+0x7b6>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	2b0b      	cmp	r3, #11
 800828c:	d103      	bne.n	8008296 <UART_SetConfig+0x7ae>
 800828e:	4bae      	ldr	r3, [pc, #696]	; (8008548 <UART_SetConfig+0xa60>)
 8008290:	f04f 0400 	mov.w	r4, #0
 8008294:	e02e      	b.n	80082f4 <UART_SetConfig+0x80c>
 8008296:	4bad      	ldr	r3, [pc, #692]	; (800854c <UART_SetConfig+0xa64>)
 8008298:	f04f 0400 	mov.w	r4, #0
 800829c:	e02a      	b.n	80082f4 <UART_SetConfig+0x80c>
 800829e:	4bac      	ldr	r3, [pc, #688]	; (8008550 <UART_SetConfig+0xa68>)
 80082a0:	f04f 0400 	mov.w	r4, #0
 80082a4:	e026      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082a6:	4bab      	ldr	r3, [pc, #684]	; (8008554 <UART_SetConfig+0xa6c>)
 80082a8:	f04f 0400 	mov.w	r4, #0
 80082ac:	e022      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082ae:	4baa      	ldr	r3, [pc, #680]	; (8008558 <UART_SetConfig+0xa70>)
 80082b0:	f04f 0400 	mov.w	r4, #0
 80082b4:	e01e      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082b6:	4ba9      	ldr	r3, [pc, #676]	; (800855c <UART_SetConfig+0xa74>)
 80082b8:	f04f 0400 	mov.w	r4, #0
 80082bc:	e01a      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082be:	a49e      	add	r4, pc, #632	; (adr r4, 8008538 <UART_SetConfig+0xa50>)
 80082c0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80082c4:	e016      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082c6:	4ba6      	ldr	r3, [pc, #664]	; (8008560 <UART_SetConfig+0xa78>)
 80082c8:	f04f 0400 	mov.w	r4, #0
 80082cc:	e012      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082ce:	4ba5      	ldr	r3, [pc, #660]	; (8008564 <UART_SetConfig+0xa7c>)
 80082d0:	f04f 0400 	mov.w	r4, #0
 80082d4:	e00e      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082d6:	a49a      	add	r4, pc, #616	; (adr r4, 8008540 <UART_SetConfig+0xa58>)
 80082d8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80082dc:	e00a      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082de:	4ba2      	ldr	r3, [pc, #648]	; (8008568 <UART_SetConfig+0xa80>)
 80082e0:	f04f 0400 	mov.w	r4, #0
 80082e4:	e006      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082e6:	4ba1      	ldr	r3, [pc, #644]	; (800856c <UART_SetConfig+0xa84>)
 80082e8:	f04f 0400 	mov.w	r4, #0
 80082ec:	e002      	b.n	80082f4 <UART_SetConfig+0x80c>
 80082ee:	4b97      	ldr	r3, [pc, #604]	; (800854c <UART_SetConfig+0xa64>)
 80082f0:	f04f 0400 	mov.w	r4, #0
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6852      	ldr	r2, [r2, #4]
 80082f8:	0852      	lsrs	r2, r2, #1
 80082fa:	4611      	mov	r1, r2
 80082fc:	f04f 0200 	mov.w	r2, #0
 8008300:	eb13 0b01 	adds.w	fp, r3, r1
 8008304:	eb44 0c02 	adc.w	ip, r4, r2
 8008308:	4658      	mov	r0, fp
 800830a:	4661      	mov	r1, ip
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f04f 0400 	mov.w	r4, #0
 8008314:	461a      	mov	r2, r3
 8008316:	4623      	mov	r3, r4
 8008318:	f7f8 fc24 	bl	8000b64 <__aeabi_uldivmod>
 800831c:	4603      	mov	r3, r0
 800831e:	460c      	mov	r4, r1
 8008320:	61fb      	str	r3, [r7, #28]
            break;
 8008322:	e14a      	b.n	80085ba <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8008324:	f7fd f96a 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 8008328:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	4618      	mov	r0, r3
 800832e:	f04f 0100 	mov.w	r1, #0
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	d067      	beq.n	800840a <UART_SetConfig+0x922>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b01      	cmp	r3, #1
 8008340:	d05e      	beq.n	8008400 <UART_SetConfig+0x918>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b02      	cmp	r3, #2
 8008348:	d055      	beq.n	80083f6 <UART_SetConfig+0x90e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2b03      	cmp	r3, #3
 8008350:	d04c      	beq.n	80083ec <UART_SetConfig+0x904>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	2b04      	cmp	r3, #4
 8008358:	d043      	beq.n	80083e2 <UART_SetConfig+0x8fa>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	2b05      	cmp	r3, #5
 8008360:	d03a      	beq.n	80083d8 <UART_SetConfig+0x8f0>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	2b06      	cmp	r3, #6
 8008368:	d031      	beq.n	80083ce <UART_SetConfig+0x8e6>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	2b07      	cmp	r3, #7
 8008370:	d028      	beq.n	80083c4 <UART_SetConfig+0x8dc>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	2b08      	cmp	r3, #8
 8008378:	d01f      	beq.n	80083ba <UART_SetConfig+0x8d2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	2b09      	cmp	r3, #9
 8008380:	d016      	beq.n	80083b0 <UART_SetConfig+0x8c8>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	2b0a      	cmp	r3, #10
 8008388:	d00d      	beq.n	80083a6 <UART_SetConfig+0x8be>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	2b0b      	cmp	r3, #11
 8008390:	d104      	bne.n	800839c <UART_SetConfig+0x8b4>
 8008392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008396:	f04f 0400 	mov.w	r4, #0
 800839a:	e03a      	b.n	8008412 <UART_SetConfig+0x92a>
 800839c:	f04f 0301 	mov.w	r3, #1
 80083a0:	f04f 0400 	mov.w	r4, #0
 80083a4:	e035      	b.n	8008412 <UART_SetConfig+0x92a>
 80083a6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80083aa:	f04f 0400 	mov.w	r4, #0
 80083ae:	e030      	b.n	8008412 <UART_SetConfig+0x92a>
 80083b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80083b4:	f04f 0400 	mov.w	r4, #0
 80083b8:	e02b      	b.n	8008412 <UART_SetConfig+0x92a>
 80083ba:	f04f 0320 	mov.w	r3, #32
 80083be:	f04f 0400 	mov.w	r4, #0
 80083c2:	e026      	b.n	8008412 <UART_SetConfig+0x92a>
 80083c4:	f04f 0310 	mov.w	r3, #16
 80083c8:	f04f 0400 	mov.w	r4, #0
 80083cc:	e021      	b.n	8008412 <UART_SetConfig+0x92a>
 80083ce:	f04f 030c 	mov.w	r3, #12
 80083d2:	f04f 0400 	mov.w	r4, #0
 80083d6:	e01c      	b.n	8008412 <UART_SetConfig+0x92a>
 80083d8:	f04f 030a 	mov.w	r3, #10
 80083dc:	f04f 0400 	mov.w	r4, #0
 80083e0:	e017      	b.n	8008412 <UART_SetConfig+0x92a>
 80083e2:	f04f 0308 	mov.w	r3, #8
 80083e6:	f04f 0400 	mov.w	r4, #0
 80083ea:	e012      	b.n	8008412 <UART_SetConfig+0x92a>
 80083ec:	f04f 0306 	mov.w	r3, #6
 80083f0:	f04f 0400 	mov.w	r4, #0
 80083f4:	e00d      	b.n	8008412 <UART_SetConfig+0x92a>
 80083f6:	f04f 0304 	mov.w	r3, #4
 80083fa:	f04f 0400 	mov.w	r4, #0
 80083fe:	e008      	b.n	8008412 <UART_SetConfig+0x92a>
 8008400:	f04f 0302 	mov.w	r3, #2
 8008404:	f04f 0400 	mov.w	r4, #0
 8008408:	e003      	b.n	8008412 <UART_SetConfig+0x92a>
 800840a:	f04f 0301 	mov.w	r3, #1
 800840e:	f04f 0400 	mov.w	r4, #0
 8008412:	461a      	mov	r2, r3
 8008414:	4623      	mov	r3, r4
 8008416:	f7f8 fba5 	bl	8000b64 <__aeabi_uldivmod>
 800841a:	4603      	mov	r3, r0
 800841c:	460c      	mov	r4, r1
 800841e:	4619      	mov	r1, r3
 8008420:	4622      	mov	r2, r4
 8008422:	f04f 0300 	mov.w	r3, #0
 8008426:	f04f 0400 	mov.w	r4, #0
 800842a:	0214      	lsls	r4, r2, #8
 800842c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008430:	020b      	lsls	r3, r1, #8
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6852      	ldr	r2, [r2, #4]
 8008436:	0852      	lsrs	r2, r2, #1
 8008438:	4611      	mov	r1, r2
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	eb13 0b01 	adds.w	fp, r3, r1
 8008442:	eb44 0c02 	adc.w	ip, r4, r2
 8008446:	4658      	mov	r0, fp
 8008448:	4661      	mov	r1, ip
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f04f 0400 	mov.w	r4, #0
 8008452:	461a      	mov	r2, r3
 8008454:	4623      	mov	r3, r4
 8008456:	f7f8 fb85 	bl	8000b64 <__aeabi_uldivmod>
 800845a:	4603      	mov	r3, r0
 800845c:	460c      	mov	r4, r1
 800845e:	61fb      	str	r3, [r7, #28]
            break;
 8008460:	e0ab      	b.n	80085ba <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 8088 	beq.w	800857c <UART_SetConfig+0xa94>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	2b01      	cmp	r3, #1
 8008472:	d05b      	beq.n	800852c <UART_SetConfig+0xa44>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	2b02      	cmp	r3, #2
 800847a:	d052      	beq.n	8008522 <UART_SetConfig+0xa3a>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	2b03      	cmp	r3, #3
 8008482:	d04a      	beq.n	800851a <UART_SetConfig+0xa32>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	2b04      	cmp	r3, #4
 800848a:	d041      	beq.n	8008510 <UART_SetConfig+0xa28>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	2b05      	cmp	r3, #5
 8008492:	d039      	beq.n	8008508 <UART_SetConfig+0xa20>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	2b06      	cmp	r3, #6
 800849a:	d031      	beq.n	8008500 <UART_SetConfig+0xa18>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2b07      	cmp	r3, #7
 80084a2:	d028      	beq.n	80084f6 <UART_SetConfig+0xa0e>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d01f      	beq.n	80084ec <UART_SetConfig+0xa04>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	2b09      	cmp	r3, #9
 80084b2:	d016      	beq.n	80084e2 <UART_SetConfig+0x9fa>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b0a      	cmp	r3, #10
 80084ba:	d00d      	beq.n	80084d8 <UART_SetConfig+0x9f0>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	2b0b      	cmp	r3, #11
 80084c2:	d104      	bne.n	80084ce <UART_SetConfig+0x9e6>
 80084c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084c8:	f04f 0400 	mov.w	r4, #0
 80084cc:	e05a      	b.n	8008584 <UART_SetConfig+0xa9c>
 80084ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80084d2:	f04f 0400 	mov.w	r4, #0
 80084d6:	e055      	b.n	8008584 <UART_SetConfig+0xa9c>
 80084d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80084dc:	f04f 0400 	mov.w	r4, #0
 80084e0:	e050      	b.n	8008584 <UART_SetConfig+0xa9c>
 80084e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084e6:	f04f 0400 	mov.w	r4, #0
 80084ea:	e04b      	b.n	8008584 <UART_SetConfig+0xa9c>
 80084ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80084f0:	f04f 0400 	mov.w	r4, #0
 80084f4:	e046      	b.n	8008584 <UART_SetConfig+0xa9c>
 80084f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084fa:	f04f 0400 	mov.w	r4, #0
 80084fe:	e041      	b.n	8008584 <UART_SetConfig+0xa9c>
 8008500:	4b1b      	ldr	r3, [pc, #108]	; (8008570 <UART_SetConfig+0xa88>)
 8008502:	f04f 0400 	mov.w	r4, #0
 8008506:	e03d      	b.n	8008584 <UART_SetConfig+0xa9c>
 8008508:	4b1a      	ldr	r3, [pc, #104]	; (8008574 <UART_SetConfig+0xa8c>)
 800850a:	f04f 0400 	mov.w	r4, #0
 800850e:	e039      	b.n	8008584 <UART_SetConfig+0xa9c>
 8008510:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008514:	f04f 0400 	mov.w	r4, #0
 8008518:	e034      	b.n	8008584 <UART_SetConfig+0xa9c>
 800851a:	4b17      	ldr	r3, [pc, #92]	; (8008578 <UART_SetConfig+0xa90>)
 800851c:	f04f 0400 	mov.w	r4, #0
 8008520:	e030      	b.n	8008584 <UART_SetConfig+0xa9c>
 8008522:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008526:	f04f 0400 	mov.w	r4, #0
 800852a:	e02b      	b.n	8008584 <UART_SetConfig+0xa9c>
 800852c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008530:	f04f 0400 	mov.w	r4, #0
 8008534:	e026      	b.n	8008584 <UART_SetConfig+0xa9c>
 8008536:	bf00      	nop
 8008538:	14585500 	.word	0x14585500
 800853c:	00000000 	.word	0x00000000
 8008540:	28b0aa00 	.word	0x28b0aa00
 8008544:	00000000 	.word	0x00000000
 8008548:	00f42400 	.word	0x00f42400
 800854c:	f4240000 	.word	0xf4240000
 8008550:	01e84800 	.word	0x01e84800
 8008554:	03d09000 	.word	0x03d09000
 8008558:	07a12000 	.word	0x07a12000
 800855c:	0f424000 	.word	0x0f424000
 8008560:	186a0000 	.word	0x186a0000
 8008564:	1e848000 	.word	0x1e848000
 8008568:	3d090000 	.word	0x3d090000
 800856c:	7a120000 	.word	0x7a120000
 8008570:	000aaa00 	.word	0x000aaa00
 8008574:	000ccc00 	.word	0x000ccc00
 8008578:	00155500 	.word	0x00155500
 800857c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008580:	f04f 0400 	mov.w	r4, #0
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6852      	ldr	r2, [r2, #4]
 8008588:	0852      	lsrs	r2, r2, #1
 800858a:	4611      	mov	r1, r2
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	eb13 0b01 	adds.w	fp, r3, r1
 8008594:	eb44 0c02 	adc.w	ip, r4, r2
 8008598:	4658      	mov	r0, fp
 800859a:	4661      	mov	r1, ip
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f04f 0400 	mov.w	r4, #0
 80085a4:	461a      	mov	r2, r3
 80085a6:	4623      	mov	r3, r4
 80085a8:	f7f8 fadc 	bl	8000b64 <__aeabi_uldivmod>
 80085ac:	4603      	mov	r3, r0
 80085ae:	460c      	mov	r4, r1
 80085b0:	61fb      	str	r3, [r7, #28]
            break;
 80085b2:	e002      	b.n	80085ba <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	76fb      	strb	r3, [r7, #27]
            break;
 80085b8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085c0:	d309      	bcc.n	80085d6 <UART_SetConfig+0xaee>
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c8:	d205      	bcs.n	80085d6 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	60da      	str	r2, [r3, #12]
 80085d2:	f000 bc18 	b.w	8008e06 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	76fb      	strb	r3, [r7, #27]
 80085da:	f000 bc14 	b.w	8008e06 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e6:	f040 8204 	bne.w	80089f2 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 80085ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	f200 81df 	bhi.w	80089b2 <UART_SetConfig+0xeca>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0xb14>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008621 	.word	0x08008621
 8008600:	080086d9 	.word	0x080086d9
 8008604:	08008791 	.word	0x08008791
 8008608:	080089b3 	.word	0x080089b3
 800860c:	08008839 	.word	0x08008839
 8008610:	080089b3 	.word	0x080089b3
 8008614:	080089b3 	.word	0x080089b3
 8008618:	080089b3 	.word	0x080089b3
 800861c:	080088f1 	.word	0x080088f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008620:	f7fd f85a 	bl	80056d8 <HAL_RCC_GetPCLK1Freq>
 8008624:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	d044      	beq.n	80086b8 <UART_SetConfig+0xbd0>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	2b01      	cmp	r3, #1
 8008634:	d03e      	beq.n	80086b4 <UART_SetConfig+0xbcc>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	2b02      	cmp	r3, #2
 800863c:	d038      	beq.n	80086b0 <UART_SetConfig+0xbc8>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	2b03      	cmp	r3, #3
 8008644:	d032      	beq.n	80086ac <UART_SetConfig+0xbc4>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	2b04      	cmp	r3, #4
 800864c:	d02c      	beq.n	80086a8 <UART_SetConfig+0xbc0>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	2b05      	cmp	r3, #5
 8008654:	d026      	beq.n	80086a4 <UART_SetConfig+0xbbc>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	2b06      	cmp	r3, #6
 800865c:	d020      	beq.n	80086a0 <UART_SetConfig+0xbb8>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b07      	cmp	r3, #7
 8008664:	d01a      	beq.n	800869c <UART_SetConfig+0xbb4>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	2b08      	cmp	r3, #8
 800866c:	d014      	beq.n	8008698 <UART_SetConfig+0xbb0>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b09      	cmp	r3, #9
 8008674:	d00e      	beq.n	8008694 <UART_SetConfig+0xbac>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	2b0a      	cmp	r3, #10
 800867c:	d008      	beq.n	8008690 <UART_SetConfig+0xba8>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	2b0b      	cmp	r3, #11
 8008684:	d102      	bne.n	800868c <UART_SetConfig+0xba4>
 8008686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800868a:	e016      	b.n	80086ba <UART_SetConfig+0xbd2>
 800868c:	2301      	movs	r3, #1
 800868e:	e014      	b.n	80086ba <UART_SetConfig+0xbd2>
 8008690:	2380      	movs	r3, #128	; 0x80
 8008692:	e012      	b.n	80086ba <UART_SetConfig+0xbd2>
 8008694:	2340      	movs	r3, #64	; 0x40
 8008696:	e010      	b.n	80086ba <UART_SetConfig+0xbd2>
 8008698:	2320      	movs	r3, #32
 800869a:	e00e      	b.n	80086ba <UART_SetConfig+0xbd2>
 800869c:	2310      	movs	r3, #16
 800869e:	e00c      	b.n	80086ba <UART_SetConfig+0xbd2>
 80086a0:	230c      	movs	r3, #12
 80086a2:	e00a      	b.n	80086ba <UART_SetConfig+0xbd2>
 80086a4:	230a      	movs	r3, #10
 80086a6:	e008      	b.n	80086ba <UART_SetConfig+0xbd2>
 80086a8:	2308      	movs	r3, #8
 80086aa:	e006      	b.n	80086ba <UART_SetConfig+0xbd2>
 80086ac:	2306      	movs	r3, #6
 80086ae:	e004      	b.n	80086ba <UART_SetConfig+0xbd2>
 80086b0:	2304      	movs	r3, #4
 80086b2:	e002      	b.n	80086ba <UART_SetConfig+0xbd2>
 80086b4:	2302      	movs	r3, #2
 80086b6:	e000      	b.n	80086ba <UART_SetConfig+0xbd2>
 80086b8:	2301      	movs	r3, #1
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c0:	005a      	lsls	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	441a      	add	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	61fb      	str	r3, [r7, #28]
        break;
 80086d6:	e16f      	b.n	80089b8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086d8:	f7fd f814 	bl	8005704 <HAL_RCC_GetPCLK2Freq>
 80086dc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d044      	beq.n	8008770 <UART_SetConfig+0xc88>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d03e      	beq.n	800876c <UART_SetConfig+0xc84>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d038      	beq.n	8008768 <UART_SetConfig+0xc80>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d032      	beq.n	8008764 <UART_SetConfig+0xc7c>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	2b04      	cmp	r3, #4
 8008704:	d02c      	beq.n	8008760 <UART_SetConfig+0xc78>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	2b05      	cmp	r3, #5
 800870c:	d026      	beq.n	800875c <UART_SetConfig+0xc74>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	2b06      	cmp	r3, #6
 8008714:	d020      	beq.n	8008758 <UART_SetConfig+0xc70>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	2b07      	cmp	r3, #7
 800871c:	d01a      	beq.n	8008754 <UART_SetConfig+0xc6c>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	2b08      	cmp	r3, #8
 8008724:	d014      	beq.n	8008750 <UART_SetConfig+0xc68>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872a:	2b09      	cmp	r3, #9
 800872c:	d00e      	beq.n	800874c <UART_SetConfig+0xc64>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	2b0a      	cmp	r3, #10
 8008734:	d008      	beq.n	8008748 <UART_SetConfig+0xc60>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	2b0b      	cmp	r3, #11
 800873c:	d102      	bne.n	8008744 <UART_SetConfig+0xc5c>
 800873e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008742:	e016      	b.n	8008772 <UART_SetConfig+0xc8a>
 8008744:	2301      	movs	r3, #1
 8008746:	e014      	b.n	8008772 <UART_SetConfig+0xc8a>
 8008748:	2380      	movs	r3, #128	; 0x80
 800874a:	e012      	b.n	8008772 <UART_SetConfig+0xc8a>
 800874c:	2340      	movs	r3, #64	; 0x40
 800874e:	e010      	b.n	8008772 <UART_SetConfig+0xc8a>
 8008750:	2320      	movs	r3, #32
 8008752:	e00e      	b.n	8008772 <UART_SetConfig+0xc8a>
 8008754:	2310      	movs	r3, #16
 8008756:	e00c      	b.n	8008772 <UART_SetConfig+0xc8a>
 8008758:	230c      	movs	r3, #12
 800875a:	e00a      	b.n	8008772 <UART_SetConfig+0xc8a>
 800875c:	230a      	movs	r3, #10
 800875e:	e008      	b.n	8008772 <UART_SetConfig+0xc8a>
 8008760:	2308      	movs	r3, #8
 8008762:	e006      	b.n	8008772 <UART_SetConfig+0xc8a>
 8008764:	2306      	movs	r3, #6
 8008766:	e004      	b.n	8008772 <UART_SetConfig+0xc8a>
 8008768:	2304      	movs	r3, #4
 800876a:	e002      	b.n	8008772 <UART_SetConfig+0xc8a>
 800876c:	2302      	movs	r3, #2
 800876e:	e000      	b.n	8008772 <UART_SetConfig+0xc8a>
 8008770:	2301      	movs	r3, #1
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	fbb2 f3f3 	udiv	r3, r2, r3
 8008778:	005a      	lsls	r2, r3, #1
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	441a      	add	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	fbb2 f3f3 	udiv	r3, r2, r3
 800878a:	b29b      	uxth	r3, r3
 800878c:	61fb      	str	r3, [r7, #28]
        break;
 800878e:	e113      	b.n	80089b8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	d043      	beq.n	8008820 <UART_SetConfig+0xd38>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b01      	cmp	r3, #1
 800879e:	d03d      	beq.n	800881c <UART_SetConfig+0xd34>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d037      	beq.n	8008818 <UART_SetConfig+0xd30>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d031      	beq.n	8008814 <UART_SetConfig+0xd2c>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	d02b      	beq.n	8008810 <UART_SetConfig+0xd28>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2b05      	cmp	r3, #5
 80087be:	d025      	beq.n	800880c <UART_SetConfig+0xd24>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2b06      	cmp	r3, #6
 80087c6:	d01f      	beq.n	8008808 <UART_SetConfig+0xd20>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	2b07      	cmp	r3, #7
 80087ce:	d019      	beq.n	8008804 <UART_SetConfig+0xd1c>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d013      	beq.n	8008800 <UART_SetConfig+0xd18>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	2b09      	cmp	r3, #9
 80087de:	d00d      	beq.n	80087fc <UART_SetConfig+0xd14>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	2b0a      	cmp	r3, #10
 80087e6:	d007      	beq.n	80087f8 <UART_SetConfig+0xd10>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	2b0b      	cmp	r3, #11
 80087ee:	d101      	bne.n	80087f4 <UART_SetConfig+0xd0c>
 80087f0:	4b8d      	ldr	r3, [pc, #564]	; (8008a28 <UART_SetConfig+0xf40>)
 80087f2:	e016      	b.n	8008822 <UART_SetConfig+0xd3a>
 80087f4:	4b8d      	ldr	r3, [pc, #564]	; (8008a2c <UART_SetConfig+0xf44>)
 80087f6:	e014      	b.n	8008822 <UART_SetConfig+0xd3a>
 80087f8:	4b8d      	ldr	r3, [pc, #564]	; (8008a30 <UART_SetConfig+0xf48>)
 80087fa:	e012      	b.n	8008822 <UART_SetConfig+0xd3a>
 80087fc:	4b8d      	ldr	r3, [pc, #564]	; (8008a34 <UART_SetConfig+0xf4c>)
 80087fe:	e010      	b.n	8008822 <UART_SetConfig+0xd3a>
 8008800:	4b8d      	ldr	r3, [pc, #564]	; (8008a38 <UART_SetConfig+0xf50>)
 8008802:	e00e      	b.n	8008822 <UART_SetConfig+0xd3a>
 8008804:	4b8d      	ldr	r3, [pc, #564]	; (8008a3c <UART_SetConfig+0xf54>)
 8008806:	e00c      	b.n	8008822 <UART_SetConfig+0xd3a>
 8008808:	4b8d      	ldr	r3, [pc, #564]	; (8008a40 <UART_SetConfig+0xf58>)
 800880a:	e00a      	b.n	8008822 <UART_SetConfig+0xd3a>
 800880c:	4b8d      	ldr	r3, [pc, #564]	; (8008a44 <UART_SetConfig+0xf5c>)
 800880e:	e008      	b.n	8008822 <UART_SetConfig+0xd3a>
 8008810:	4b8d      	ldr	r3, [pc, #564]	; (8008a48 <UART_SetConfig+0xf60>)
 8008812:	e006      	b.n	8008822 <UART_SetConfig+0xd3a>
 8008814:	4b8d      	ldr	r3, [pc, #564]	; (8008a4c <UART_SetConfig+0xf64>)
 8008816:	e004      	b.n	8008822 <UART_SetConfig+0xd3a>
 8008818:	4b8d      	ldr	r3, [pc, #564]	; (8008a50 <UART_SetConfig+0xf68>)
 800881a:	e002      	b.n	8008822 <UART_SetConfig+0xd3a>
 800881c:	4b8d      	ldr	r3, [pc, #564]	; (8008a54 <UART_SetConfig+0xf6c>)
 800881e:	e000      	b.n	8008822 <UART_SetConfig+0xd3a>
 8008820:	4b82      	ldr	r3, [pc, #520]	; (8008a2c <UART_SetConfig+0xf44>)
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6852      	ldr	r2, [r2, #4]
 8008826:	0852      	lsrs	r2, r2, #1
 8008828:	441a      	add	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008832:	b29b      	uxth	r3, r3
 8008834:	61fb      	str	r3, [r7, #28]
        break;
 8008836:	e0bf      	b.n	80089b8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008838:	f7fc fee0 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 800883c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	d044      	beq.n	80088d0 <UART_SetConfig+0xde8>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	2b01      	cmp	r3, #1
 800884c:	d03e      	beq.n	80088cc <UART_SetConfig+0xde4>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	2b02      	cmp	r3, #2
 8008854:	d038      	beq.n	80088c8 <UART_SetConfig+0xde0>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	2b03      	cmp	r3, #3
 800885c:	d032      	beq.n	80088c4 <UART_SetConfig+0xddc>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	2b04      	cmp	r3, #4
 8008864:	d02c      	beq.n	80088c0 <UART_SetConfig+0xdd8>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	2b05      	cmp	r3, #5
 800886c:	d026      	beq.n	80088bc <UART_SetConfig+0xdd4>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	2b06      	cmp	r3, #6
 8008874:	d020      	beq.n	80088b8 <UART_SetConfig+0xdd0>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	2b07      	cmp	r3, #7
 800887c:	d01a      	beq.n	80088b4 <UART_SetConfig+0xdcc>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	2b08      	cmp	r3, #8
 8008884:	d014      	beq.n	80088b0 <UART_SetConfig+0xdc8>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	2b09      	cmp	r3, #9
 800888c:	d00e      	beq.n	80088ac <UART_SetConfig+0xdc4>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	2b0a      	cmp	r3, #10
 8008894:	d008      	beq.n	80088a8 <UART_SetConfig+0xdc0>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	2b0b      	cmp	r3, #11
 800889c:	d102      	bne.n	80088a4 <UART_SetConfig+0xdbc>
 800889e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a2:	e016      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088a4:	2301      	movs	r3, #1
 80088a6:	e014      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088a8:	2380      	movs	r3, #128	; 0x80
 80088aa:	e012      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088ac:	2340      	movs	r3, #64	; 0x40
 80088ae:	e010      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088b0:	2320      	movs	r3, #32
 80088b2:	e00e      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088b4:	2310      	movs	r3, #16
 80088b6:	e00c      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088b8:	230c      	movs	r3, #12
 80088ba:	e00a      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088bc:	230a      	movs	r3, #10
 80088be:	e008      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088c0:	2308      	movs	r3, #8
 80088c2:	e006      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088c4:	2306      	movs	r3, #6
 80088c6:	e004      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088c8:	2304      	movs	r3, #4
 80088ca:	e002      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088cc:	2302      	movs	r3, #2
 80088ce:	e000      	b.n	80088d2 <UART_SetConfig+0xdea>
 80088d0:	2301      	movs	r3, #1
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d8:	005a      	lsls	r2, r3, #1
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	085b      	lsrs	r3, r3, #1
 80088e0:	441a      	add	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	61fb      	str	r3, [r7, #28]
        break;
 80088ee:	e063      	b.n	80089b8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d04f      	beq.n	8008998 <UART_SetConfig+0xeb0>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d048      	beq.n	8008992 <UART_SetConfig+0xeaa>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b02      	cmp	r3, #2
 8008906:	d041      	beq.n	800898c <UART_SetConfig+0xea4>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b03      	cmp	r3, #3
 800890e:	d03a      	beq.n	8008986 <UART_SetConfig+0xe9e>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b04      	cmp	r3, #4
 8008916:	d033      	beq.n	8008980 <UART_SetConfig+0xe98>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	2b05      	cmp	r3, #5
 800891e:	d02c      	beq.n	800897a <UART_SetConfig+0xe92>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	2b06      	cmp	r3, #6
 8008926:	d025      	beq.n	8008974 <UART_SetConfig+0xe8c>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b07      	cmp	r3, #7
 800892e:	d01e      	beq.n	800896e <UART_SetConfig+0xe86>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b08      	cmp	r3, #8
 8008936:	d017      	beq.n	8008968 <UART_SetConfig+0xe80>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	2b09      	cmp	r3, #9
 800893e:	d010      	beq.n	8008962 <UART_SetConfig+0xe7a>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	2b0a      	cmp	r3, #10
 8008946:	d009      	beq.n	800895c <UART_SetConfig+0xe74>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2b0b      	cmp	r3, #11
 800894e:	d102      	bne.n	8008956 <UART_SetConfig+0xe6e>
 8008950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008954:	e022      	b.n	800899c <UART_SetConfig+0xeb4>
 8008956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800895a:	e01f      	b.n	800899c <UART_SetConfig+0xeb4>
 800895c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008960:	e01c      	b.n	800899c <UART_SetConfig+0xeb4>
 8008962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008966:	e019      	b.n	800899c <UART_SetConfig+0xeb4>
 8008968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800896c:	e016      	b.n	800899c <UART_SetConfig+0xeb4>
 800896e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008972:	e013      	b.n	800899c <UART_SetConfig+0xeb4>
 8008974:	f241 5354 	movw	r3, #5460	; 0x1554
 8008978:	e010      	b.n	800899c <UART_SetConfig+0xeb4>
 800897a:	f641 1398 	movw	r3, #6552	; 0x1998
 800897e:	e00d      	b.n	800899c <UART_SetConfig+0xeb4>
 8008980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008984:	e00a      	b.n	800899c <UART_SetConfig+0xeb4>
 8008986:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800898a:	e007      	b.n	800899c <UART_SetConfig+0xeb4>
 800898c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008990:	e004      	b.n	800899c <UART_SetConfig+0xeb4>
 8008992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008996:	e001      	b.n	800899c <UART_SetConfig+0xeb4>
 8008998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6852      	ldr	r2, [r2, #4]
 80089a0:	0852      	lsrs	r2, r2, #1
 80089a2:	441a      	add	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	61fb      	str	r3, [r7, #28]
        break;
 80089b0:	e002      	b.n	80089b8 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	76fb      	strb	r3, [r7, #27]
        break;
 80089b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	2b0f      	cmp	r3, #15
 80089bc:	d916      	bls.n	80089ec <UART_SetConfig+0xf04>
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c4:	d212      	bcs.n	80089ec <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f023 030f 	bic.w	r3, r3, #15
 80089ce:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	085b      	lsrs	r3, r3, #1
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	b29a      	uxth	r2, r3
 80089dc:	89fb      	ldrh	r3, [r7, #14]
 80089de:	4313      	orrs	r3, r2
 80089e0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	89fa      	ldrh	r2, [r7, #14]
 80089e8:	60da      	str	r2, [r3, #12]
 80089ea:	e20c      	b.n	8008e06 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	76fb      	strb	r3, [r7, #27]
 80089f0:	e209      	b.n	8008e06 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 80089f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089f6:	2b08      	cmp	r3, #8
 80089f8:	f200 81f4 	bhi.w	8008de4 <UART_SetConfig+0x12fc>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0xf1c>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a59 	.word	0x08008a59
 8008a08:	08008b0f 	.word	0x08008b0f
 8008a0c:	08008bc5 	.word	0x08008bc5
 8008a10:	08008de5 	.word	0x08008de5
 8008a14:	08008c6f 	.word	0x08008c6f
 8008a18:	08008de5 	.word	0x08008de5
 8008a1c:	08008de5 	.word	0x08008de5
 8008a20:	08008de5 	.word	0x08008de5
 8008a24:	08008d25 	.word	0x08008d25
 8008a28:	0001e848 	.word	0x0001e848
 8008a2c:	01e84800 	.word	0x01e84800
 8008a30:	0003d090 	.word	0x0003d090
 8008a34:	0007a120 	.word	0x0007a120
 8008a38:	000f4240 	.word	0x000f4240
 8008a3c:	001e8480 	.word	0x001e8480
 8008a40:	0028b0aa 	.word	0x0028b0aa
 8008a44:	0030d400 	.word	0x0030d400
 8008a48:	003d0900 	.word	0x003d0900
 8008a4c:	00516154 	.word	0x00516154
 8008a50:	007a1200 	.word	0x007a1200
 8008a54:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a58:	f7fc fe3e 	bl	80056d8 <HAL_RCC_GetPCLK1Freq>
 8008a5c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d044      	beq.n	8008af0 <UART_SetConfig+0x1008>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d03e      	beq.n	8008aec <UART_SetConfig+0x1004>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d038      	beq.n	8008ae8 <UART_SetConfig+0x1000>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d032      	beq.n	8008ae4 <UART_SetConfig+0xffc>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d02c      	beq.n	8008ae0 <UART_SetConfig+0xff8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	2b05      	cmp	r3, #5
 8008a8c:	d026      	beq.n	8008adc <UART_SetConfig+0xff4>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	2b06      	cmp	r3, #6
 8008a94:	d020      	beq.n	8008ad8 <UART_SetConfig+0xff0>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	2b07      	cmp	r3, #7
 8008a9c:	d01a      	beq.n	8008ad4 <UART_SetConfig+0xfec>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa2:	2b08      	cmp	r3, #8
 8008aa4:	d014      	beq.n	8008ad0 <UART_SetConfig+0xfe8>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	2b09      	cmp	r3, #9
 8008aac:	d00e      	beq.n	8008acc <UART_SetConfig+0xfe4>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	2b0a      	cmp	r3, #10
 8008ab4:	d008      	beq.n	8008ac8 <UART_SetConfig+0xfe0>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	2b0b      	cmp	r3, #11
 8008abc:	d102      	bne.n	8008ac4 <UART_SetConfig+0xfdc>
 8008abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ac2:	e016      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e014      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008ac8:	2380      	movs	r3, #128	; 0x80
 8008aca:	e012      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008acc:	2340      	movs	r3, #64	; 0x40
 8008ace:	e010      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	e00e      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	e00c      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008ad8:	230c      	movs	r3, #12
 8008ada:	e00a      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008adc:	230a      	movs	r3, #10
 8008ade:	e008      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008ae0:	2308      	movs	r3, #8
 8008ae2:	e006      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008ae4:	2306      	movs	r3, #6
 8008ae6:	e004      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008ae8:	2304      	movs	r3, #4
 8008aea:	e002      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e000      	b.n	8008af2 <UART_SetConfig+0x100a>
 8008af0:	2301      	movs	r3, #1
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	085b      	lsrs	r3, r3, #1
 8008afe:	441a      	add	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	61fb      	str	r3, [r7, #28]
        break;
 8008b0c:	e16d      	b.n	8008dea <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b0e:	f7fc fdf9 	bl	8005704 <HAL_RCC_GetPCLK2Freq>
 8008b12:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d044      	beq.n	8008ba6 <UART_SetConfig+0x10be>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d03e      	beq.n	8008ba2 <UART_SetConfig+0x10ba>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d038      	beq.n	8008b9e <UART_SetConfig+0x10b6>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d032      	beq.n	8008b9a <UART_SetConfig+0x10b2>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	2b04      	cmp	r3, #4
 8008b3a:	d02c      	beq.n	8008b96 <UART_SetConfig+0x10ae>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b05      	cmp	r3, #5
 8008b42:	d026      	beq.n	8008b92 <UART_SetConfig+0x10aa>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2b06      	cmp	r3, #6
 8008b4a:	d020      	beq.n	8008b8e <UART_SetConfig+0x10a6>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b07      	cmp	r3, #7
 8008b52:	d01a      	beq.n	8008b8a <UART_SetConfig+0x10a2>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2b08      	cmp	r3, #8
 8008b5a:	d014      	beq.n	8008b86 <UART_SetConfig+0x109e>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b09      	cmp	r3, #9
 8008b62:	d00e      	beq.n	8008b82 <UART_SetConfig+0x109a>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b0a      	cmp	r3, #10
 8008b6a:	d008      	beq.n	8008b7e <UART_SetConfig+0x1096>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b0b      	cmp	r3, #11
 8008b72:	d102      	bne.n	8008b7a <UART_SetConfig+0x1092>
 8008b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b78:	e016      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e014      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b7e:	2380      	movs	r3, #128	; 0x80
 8008b80:	e012      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b82:	2340      	movs	r3, #64	; 0x40
 8008b84:	e010      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b86:	2320      	movs	r3, #32
 8008b88:	e00e      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b8a:	2310      	movs	r3, #16
 8008b8c:	e00c      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	e00a      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b92:	230a      	movs	r3, #10
 8008b94:	e008      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b96:	2308      	movs	r3, #8
 8008b98:	e006      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b9a:	2306      	movs	r3, #6
 8008b9c:	e004      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	e002      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	e000      	b.n	8008ba8 <UART_SetConfig+0x10c0>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	085b      	lsrs	r3, r3, #1
 8008bb4:	441a      	add	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	61fb      	str	r3, [r7, #28]
        break;
 8008bc2:	e112      	b.n	8008dea <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d044      	beq.n	8008c56 <UART_SetConfig+0x116e>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d03e      	beq.n	8008c52 <UART_SetConfig+0x116a>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d038      	beq.n	8008c4e <UART_SetConfig+0x1166>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d032      	beq.n	8008c4a <UART_SetConfig+0x1162>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d02c      	beq.n	8008c46 <UART_SetConfig+0x115e>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	2b05      	cmp	r3, #5
 8008bf2:	d026      	beq.n	8008c42 <UART_SetConfig+0x115a>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	2b06      	cmp	r3, #6
 8008bfa:	d020      	beq.n	8008c3e <UART_SetConfig+0x1156>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	2b07      	cmp	r3, #7
 8008c02:	d01a      	beq.n	8008c3a <UART_SetConfig+0x1152>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d014      	beq.n	8008c36 <UART_SetConfig+0x114e>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b09      	cmp	r3, #9
 8008c12:	d00e      	beq.n	8008c32 <UART_SetConfig+0x114a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b0a      	cmp	r3, #10
 8008c1a:	d008      	beq.n	8008c2e <UART_SetConfig+0x1146>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	2b0b      	cmp	r3, #11
 8008c22:	d102      	bne.n	8008c2a <UART_SetConfig+0x1142>
 8008c24:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008c28:	e016      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c2a:	4b81      	ldr	r3, [pc, #516]	; (8008e30 <UART_SetConfig+0x1348>)
 8008c2c:	e014      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c2e:	4b81      	ldr	r3, [pc, #516]	; (8008e34 <UART_SetConfig+0x134c>)
 8008c30:	e012      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c32:	4b81      	ldr	r3, [pc, #516]	; (8008e38 <UART_SetConfig+0x1350>)
 8008c34:	e010      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c36:	4b81      	ldr	r3, [pc, #516]	; (8008e3c <UART_SetConfig+0x1354>)
 8008c38:	e00e      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c3a:	4b81      	ldr	r3, [pc, #516]	; (8008e40 <UART_SetConfig+0x1358>)
 8008c3c:	e00c      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c3e:	4b81      	ldr	r3, [pc, #516]	; (8008e44 <UART_SetConfig+0x135c>)
 8008c40:	e00a      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c42:	4b81      	ldr	r3, [pc, #516]	; (8008e48 <UART_SetConfig+0x1360>)
 8008c44:	e008      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c46:	4b81      	ldr	r3, [pc, #516]	; (8008e4c <UART_SetConfig+0x1364>)
 8008c48:	e006      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c4a:	4b81      	ldr	r3, [pc, #516]	; (8008e50 <UART_SetConfig+0x1368>)
 8008c4c:	e004      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c4e:	4b81      	ldr	r3, [pc, #516]	; (8008e54 <UART_SetConfig+0x136c>)
 8008c50:	e002      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c52:	4b81      	ldr	r3, [pc, #516]	; (8008e58 <UART_SetConfig+0x1370>)
 8008c54:	e000      	b.n	8008c58 <UART_SetConfig+0x1170>
 8008c56:	4b76      	ldr	r3, [pc, #472]	; (8008e30 <UART_SetConfig+0x1348>)
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	6852      	ldr	r2, [r2, #4]
 8008c5c:	0852      	lsrs	r2, r2, #1
 8008c5e:	441a      	add	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	61fb      	str	r3, [r7, #28]
        break;
 8008c6c:	e0bd      	b.n	8008dea <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c6e:	f7fc fcc5 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 8008c72:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d044      	beq.n	8008d06 <UART_SetConfig+0x121e>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d03e      	beq.n	8008d02 <UART_SetConfig+0x121a>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d038      	beq.n	8008cfe <UART_SetConfig+0x1216>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d032      	beq.n	8008cfa <UART_SetConfig+0x1212>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d02c      	beq.n	8008cf6 <UART_SetConfig+0x120e>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	2b05      	cmp	r3, #5
 8008ca2:	d026      	beq.n	8008cf2 <UART_SetConfig+0x120a>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	2b06      	cmp	r3, #6
 8008caa:	d020      	beq.n	8008cee <UART_SetConfig+0x1206>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	2b07      	cmp	r3, #7
 8008cb2:	d01a      	beq.n	8008cea <UART_SetConfig+0x1202>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	d014      	beq.n	8008ce6 <UART_SetConfig+0x11fe>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	2b09      	cmp	r3, #9
 8008cc2:	d00e      	beq.n	8008ce2 <UART_SetConfig+0x11fa>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	2b0a      	cmp	r3, #10
 8008cca:	d008      	beq.n	8008cde <UART_SetConfig+0x11f6>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2b0b      	cmp	r3, #11
 8008cd2:	d102      	bne.n	8008cda <UART_SetConfig+0x11f2>
 8008cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cd8:	e016      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e014      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008cde:	2380      	movs	r3, #128	; 0x80
 8008ce0:	e012      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008ce2:	2340      	movs	r3, #64	; 0x40
 8008ce4:	e010      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008ce6:	2320      	movs	r3, #32
 8008ce8:	e00e      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008cea:	2310      	movs	r3, #16
 8008cec:	e00c      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008cee:	230c      	movs	r3, #12
 8008cf0:	e00a      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008cf2:	230a      	movs	r3, #10
 8008cf4:	e008      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008cf6:	2308      	movs	r3, #8
 8008cf8:	e006      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008cfa:	2306      	movs	r3, #6
 8008cfc:	e004      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008cfe:	2304      	movs	r3, #4
 8008d00:	e002      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008d02:	2302      	movs	r3, #2
 8008d04:	e000      	b.n	8008d08 <UART_SetConfig+0x1220>
 8008d06:	2301      	movs	r3, #1
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	441a      	add	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	61fb      	str	r3, [r7, #28]
        break;
 8008d22:	e062      	b.n	8008dea <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d04e      	beq.n	8008dca <UART_SetConfig+0x12e2>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d047      	beq.n	8008dc4 <UART_SetConfig+0x12dc>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d040      	beq.n	8008dbe <UART_SetConfig+0x12d6>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d039      	beq.n	8008db8 <UART_SetConfig+0x12d0>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d032      	beq.n	8008db2 <UART_SetConfig+0x12ca>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	2b05      	cmp	r3, #5
 8008d52:	d02b      	beq.n	8008dac <UART_SetConfig+0x12c4>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	2b06      	cmp	r3, #6
 8008d5a:	d024      	beq.n	8008da6 <UART_SetConfig+0x12be>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	2b07      	cmp	r3, #7
 8008d62:	d01d      	beq.n	8008da0 <UART_SetConfig+0x12b8>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d016      	beq.n	8008d9a <UART_SetConfig+0x12b2>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	2b09      	cmp	r3, #9
 8008d72:	d00f      	beq.n	8008d94 <UART_SetConfig+0x12ac>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	2b0a      	cmp	r3, #10
 8008d7a:	d008      	beq.n	8008d8e <UART_SetConfig+0x12a6>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	2b0b      	cmp	r3, #11
 8008d82:	d101      	bne.n	8008d88 <UART_SetConfig+0x12a0>
 8008d84:	2380      	movs	r3, #128	; 0x80
 8008d86:	e022      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d8c:	e01f      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d92:	e01c      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d98:	e019      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d9e:	e016      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008da4:	e013      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008da6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008daa:	e010      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008dac:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008db0:	e00d      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db6:	e00a      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008db8:	f241 5355 	movw	r3, #5461	; 0x1555
 8008dbc:	e007      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008dc2:	e004      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008dc8:	e001      	b.n	8008dce <UART_SetConfig+0x12e6>
 8008dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6852      	ldr	r2, [r2, #4]
 8008dd2:	0852      	lsrs	r2, r2, #1
 8008dd4:	441a      	add	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	61fb      	str	r3, [r7, #28]
        break;
 8008de2:	e002      	b.n	8008dea <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	76fb      	strb	r3, [r7, #27]
        break;
 8008de8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	2b0f      	cmp	r3, #15
 8008dee:	d908      	bls.n	8008e02 <UART_SetConfig+0x131a>
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008df6:	d204      	bcs.n	8008e02 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	60da      	str	r2, [r3, #12]
 8008e00:	e001      	b.n	8008e06 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008e22:	7efb      	ldrb	r3, [r7, #27]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3728      	adds	r7, #40	; 0x28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008e2e:	bf00      	nop
 8008e30:	00f42400 	.word	0x00f42400
 8008e34:	0001e848 	.word	0x0001e848
 8008e38:	0003d090 	.word	0x0003d090
 8008e3c:	0007a120 	.word	0x0007a120
 8008e40:	000f4240 	.word	0x000f4240
 8008e44:	00145855 	.word	0x00145855
 8008e48:	00186a00 	.word	0x00186a00
 8008e4c:	001e8480 	.word	0x001e8480
 8008e50:	0028b0aa 	.word	0x0028b0aa
 8008e54:	003d0900 	.word	0x003d0900
 8008e58:	007a1200 	.word	0x007a1200

08008e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00a      	beq.n	8008eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00a      	beq.n	8008f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01a      	beq.n	8008f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f5a:	d10a      	bne.n	8008f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	605a      	str	r2, [r3, #4]
  }
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af02      	add	r7, sp, #8
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008fb0:	f7f9 fc64 	bl	800287c <HAL_GetTick>
 8008fb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d10e      	bne.n	8008fe2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f82c 	bl	8009030 <UART_WaitOnFlagUntilTimeout>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e022      	b.n	8009028 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d10e      	bne.n	800900e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f816 	bl	8009030 <UART_WaitOnFlagUntilTimeout>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e00c      	b.n	8009028 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2220      	movs	r2, #32
 8009012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2220      	movs	r2, #32
 800901a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	603b      	str	r3, [r7, #0]
 800903c:	4613      	mov	r3, r2
 800903e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009040:	e02c      	b.n	800909c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009048:	d028      	beq.n	800909c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800904a:	f7f9 fc17 	bl	800287c <HAL_GetTick>
 800904e:	4602      	mov	r2, r0
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	429a      	cmp	r2, r3
 8009058:	d302      	bcc.n	8009060 <UART_WaitOnFlagUntilTimeout+0x30>
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d11d      	bne.n	800909c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800906e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0201 	bic.w	r2, r2, #1
 800907e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2220      	movs	r2, #32
 8009084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2220      	movs	r2, #32
 800908c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e00f      	b.n	80090bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	69da      	ldr	r2, [r3, #28]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	4013      	ands	r3, r2
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	bf0c      	ite	eq
 80090ac:	2301      	moveq	r3, #1
 80090ae:	2300      	movne	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	461a      	mov	r2, r3
 80090b4:	79fb      	ldrb	r3, [r7, #7]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d0c3      	beq.n	8009042 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	6812      	ldr	r2, [r2, #0]
 80090e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090ea:	f023 0301 	bic.w	r3, r3, #1
 80090ee:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009116:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7fe fcd3 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800914c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2220      	movs	r2, #32
 8009152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7fe fcaf 	bl	8007ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009162:	bf00      	nop
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009178:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009180:	2b22      	cmp	r3, #34	; 0x22
 8009182:	d13b      	bne.n	80091fc <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800918c:	89bb      	ldrh	r3, [r7, #12]
 800918e:	b2d9      	uxtb	r1, r3
 8009190:	89fb      	ldrh	r3, [r7, #14]
 8009192:	b2da      	uxtb	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009198:	400a      	ands	r2, r1
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	3b01      	subs	r3, #1
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d122      	bne.n	800920c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80091d4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	689a      	ldr	r2, [r3, #8]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f022 0201 	bic.w	r2, r2, #1
 80091e4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2220      	movs	r2, #32
 80091ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7f8 fd17 	bl	8001c28 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091fa:	e007      	b.n	800920c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0208 	orr.w	r2, r2, #8
 800920a:	619a      	str	r2, [r3, #24]
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009222:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800922a:	2b22      	cmp	r3, #34	; 0x22
 800922c:	d13b      	bne.n	80092a6 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800923a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800923c:	89ba      	ldrh	r2, [r7, #12]
 800923e:	89fb      	ldrh	r3, [r7, #14]
 8009240:	4013      	ands	r3, r2
 8009242:	b29a      	uxth	r2, r3
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800924c:	1c9a      	adds	r2, r3, #2
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009258:	b29b      	uxth	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d122      	bne.n	80092b6 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800927e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0201 	bic.w	r2, r2, #1
 800928e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7f8 fcc2 	bl	8001c28 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092a4:	e007      	b.n	80092b6 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	699a      	ldr	r2, [r3, #24]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f042 0208 	orr.w	r2, r2, #8
 80092b4:	619a      	str	r2, [r3, #24]
}
 80092b6:	bf00      	nop
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092ce:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d6:	2b22      	cmp	r3, #34	; 0x22
 80092d8:	d168      	bne.n	80093ac <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092e0:	81fb      	strh	r3, [r7, #14]
 80092e2:	e03f      	b.n	8009364 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092ec:	893b      	ldrh	r3, [r7, #8]
 80092ee:	b2d9      	uxtb	r1, r3
 80092f0:	89bb      	ldrh	r3, [r7, #12]
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f8:	400a      	ands	r2, r1
 80092fa:	b2d2      	uxtb	r2, r2
 80092fc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b01      	subs	r3, #1
 8009312:	b29a      	uxth	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d11b      	bne.n	800935e <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009334:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	6812      	ldr	r2, [r2, #0]
 8009340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009344:	f023 0301 	bic.w	r3, r3, #1
 8009348:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2220      	movs	r2, #32
 800934e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7f8 fc65 	bl	8001c28 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800935e:	89fb      	ldrh	r3, [r7, #14]
 8009360:	3b01      	subs	r3, #1
 8009362:	81fb      	strh	r3, [r7, #14]
 8009364:	89fb      	ldrh	r3, [r7, #14]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1bc      	bne.n	80092e4 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009370:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009372:	897b      	ldrh	r3, [r7, #10]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d021      	beq.n	80093bc <UART_RxISR_8BIT_FIFOEN+0xfc>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800937e:	897a      	ldrh	r2, [r7, #10]
 8009380:	429a      	cmp	r2, r3
 8009382:	d21b      	bcs.n	80093bc <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009392:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a0b      	ldr	r2, [pc, #44]	; (80093c4 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8009398:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0220 	orr.w	r2, r2, #32
 80093a8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093aa:	e007      	b.n	80093bc <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0208 	orr.w	r2, r2, #8
 80093ba:	619a      	str	r2, [r3, #24]
}
 80093bc:	bf00      	nop
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	0800916b 	.word	0x0800916b

080093c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093d6:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093de:	2b22      	cmp	r3, #34	; 0x22
 80093e0:	d168      	bne.n	80094b4 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093e8:	82fb      	strh	r3, [r7, #22]
 80093ea:	e03f      	b.n	800946c <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f8:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80093fa:	8a3a      	ldrh	r2, [r7, #16]
 80093fc:	8abb      	ldrh	r3, [r7, #20]
 80093fe:	4013      	ands	r3, r2
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940a:	1c9a      	adds	r2, r3, #2
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009416:	b29b      	uxth	r3, r3
 8009418:	3b01      	subs	r3, #1
 800941a:	b29a      	uxth	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d11b      	bne.n	8009466 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800943c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6812      	ldr	r2, [r2, #0]
 8009448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2220      	movs	r2, #32
 8009456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7f8 fbe1 	bl	8001c28 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009466:	8afb      	ldrh	r3, [r7, #22]
 8009468:	3b01      	subs	r3, #1
 800946a:	82fb      	strh	r3, [r7, #22]
 800946c:	8afb      	ldrh	r3, [r7, #22]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1bc      	bne.n	80093ec <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009478:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800947a:	8a7b      	ldrh	r3, [r7, #18]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d021      	beq.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009486:	8a7a      	ldrh	r2, [r7, #18]
 8009488:	429a      	cmp	r2, r3
 800948a:	d21b      	bcs.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800949a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a0b      	ldr	r2, [pc, #44]	; (80094cc <UART_RxISR_16BIT_FIFOEN+0x104>)
 80094a0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0220 	orr.w	r2, r2, #32
 80094b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094b2:	e007      	b.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699a      	ldr	r2, [r3, #24]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f042 0208 	orr.w	r2, r2, #8
 80094c2:	619a      	str	r2, [r3, #24]
}
 80094c4:	bf00      	nop
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	08009215 	.word	0x08009215

080094d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_UARTEx_DisableFifoMode+0x16>
 800951e:	2302      	movs	r3, #2
 8009520:	e027      	b.n	8009572 <HAL_UARTEx_DisableFifoMode+0x66>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2224      	movs	r2, #36	; 0x24
 800952e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f022 0201 	bic.w	r2, r2, #1
 8009548:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009550:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800958e:	2b01      	cmp	r3, #1
 8009590:	d101      	bne.n	8009596 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009592:	2302      	movs	r3, #2
 8009594:	e02d      	b.n	80095f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2224      	movs	r2, #36	; 0x24
 80095a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 0201 	bic.w	r2, r2, #1
 80095bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f850 	bl	8009678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2220      	movs	r2, #32
 80095e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800960e:	2302      	movs	r3, #2
 8009610:	e02d      	b.n	800966e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2224      	movs	r2, #36	; 0x24
 800961e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0201 	bic.w	r2, r2, #1
 8009638:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f812 	bl	8009678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2220      	movs	r2, #32
 8009660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b089      	sub	sp, #36	; 0x24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009680:	4a2f      	ldr	r2, [pc, #188]	; (8009740 <UARTEx_SetNbDataToProcess+0xc8>)
 8009682:	f107 0314 	add.w	r3, r7, #20
 8009686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800968a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800968e:	4a2d      	ldr	r2, [pc, #180]	; (8009744 <UARTEx_SetNbDataToProcess+0xcc>)
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009698:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d108      	bne.n	80096b6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096b4:	e03d      	b.n	8009732 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096b6:	2308      	movs	r3, #8
 80096b8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096ba:	2308      	movs	r3, #8
 80096bc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	0e5b      	lsrs	r3, r3, #25
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f003 0307 	and.w	r3, r3, #7
 80096cc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	0f5b      	lsrs	r3, r3, #29
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f003 0307 	and.w	r3, r3, #7
 80096dc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80096de:	7fbb      	ldrb	r3, [r7, #30]
 80096e0:	7f3a      	ldrb	r2, [r7, #28]
 80096e2:	f107 0120 	add.w	r1, r7, #32
 80096e6:	440a      	add	r2, r1
 80096e8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80096ec:	fb02 f303 	mul.w	r3, r2, r3
 80096f0:	7f3a      	ldrb	r2, [r7, #28]
 80096f2:	f107 0120 	add.w	r1, r7, #32
 80096f6:	440a      	add	r2, r1
 80096f8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80096fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009700:	b29a      	uxth	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009708:	7ffb      	ldrb	r3, [r7, #31]
 800970a:	7f7a      	ldrb	r2, [r7, #29]
 800970c:	f107 0120 	add.w	r1, r7, #32
 8009710:	440a      	add	r2, r1
 8009712:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009716:	fb02 f303 	mul.w	r3, r2, r3
 800971a:	7f7a      	ldrb	r2, [r7, #29]
 800971c:	f107 0120 	add.w	r1, r7, #32
 8009720:	440a      	add	r2, r1
 8009722:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009726:	fb93 f3f2 	sdiv	r3, r3, r2
 800972a:	b29a      	uxth	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009732:	bf00      	nop
 8009734:	3724      	adds	r7, #36	; 0x24
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	08009d0c 	.word	0x08009d0c
 8009744:	08009d14 	.word	0x08009d14

08009748 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	ed93 7a06 	vldr	s14, [r3, #24]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	edd3 7a07 	vldr	s15, [r3, #28]
 800975e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	edd3 7a08 	vldr	s15, [r3, #32]
 8009768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	edd3 7a06 	vldr	s15, [r3, #24]
 8009778:	eeb1 7a67 	vneg.f32	s14, s15
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	edd3 7a08 	vldr	s15, [r3, #32]
 8009782:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a1a      	ldr	r2, [r3, #32]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d006      	beq.n	80097ac <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	330c      	adds	r3, #12
 80097a2:	220c      	movs	r2, #12
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f8ba 	bl	8009920 <memset>
  }

}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b08b      	sub	sp, #44	; 0x2c
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 80097be:	edd7 7a01 	vldr	s15, [r7, #4]
 80097c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ca:	d50a      	bpl.n	80097e2 <arm_sin_f32+0x2e>
 80097cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80097d0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80098bc <arm_sin_f32+0x108>
 80097d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097dc:	db01      	blt.n	80097e2 <arm_sin_f32+0x2e>
     return x;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	e062      	b.n	80098a8 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80097e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80097e6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80098c0 <arm_sin_f32+0x10c>
 80097ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097ee:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80097f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80097f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097fa:	ee17 3a90 	vmov	r3, s15
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8009800:	edd7 7a01 	vldr	s15, [r7, #4]
 8009804:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800980c:	d502      	bpl.n	8009814 <arm_sin_f32+0x60>
  {
    n--;
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	3b01      	subs	r3, #1
 8009812:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800981e:	ed97 7a08 	vldr	s14, [r7, #32]
 8009822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009826:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800982a:	edd7 7a08 	vldr	s15, [r7, #32]
 800982e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80098c4 <arm_sin_f32+0x110>
 8009832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009836:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 800983a:	edd7 7a07 	vldr	s15, [r7, #28]
 800983e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009842:	ee17 3a90 	vmov	r3, s15
 8009846:	b29b      	uxth	r3, r3
 8009848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984c:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800984e:	8b7b      	ldrh	r3, [r7, #26]
 8009850:	ee07 3a90 	vmov	s15, r3
 8009854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009858:	ed97 7a07 	vldr	s14, [r7, #28]
 800985c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009860:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8009864:	8b7b      	ldrh	r3, [r7, #26]
 8009866:	4a18      	ldr	r2, [pc, #96]	; (80098c8 <arm_sin_f32+0x114>)
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8009870:	8b7b      	ldrh	r3, [r7, #26]
 8009872:	3301      	adds	r3, #1
 8009874:	4a14      	ldr	r2, [pc, #80]	; (80098c8 <arm_sin_f32+0x114>)
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800987e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009882:	edd7 7a05 	vldr	s15, [r7, #20]
 8009886:	ee37 7a67 	vsub.f32	s14, s14, s15
 800988a:	edd7 7a04 	vldr	s15, [r7, #16]
 800988e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009892:	edd7 6a05 	vldr	s13, [r7, #20]
 8009896:	edd7 7a03 	vldr	s15, [r7, #12]
 800989a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800989e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098a2:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	ee07 3a90 	vmov	s15, r3
}
 80098ac:	eeb0 0a67 	vmov.f32	s0, s15
 80098b0:	372c      	adds	r7, #44	; 0x2c
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	b44c02cd 	.word	0xb44c02cd
 80098c0:	3e22f983 	.word	0x3e22f983
 80098c4:	44000000 	.word	0x44000000
 80098c8:	08009d34 	.word	0x08009d34

080098cc <__errno>:
 80098cc:	4b01      	ldr	r3, [pc, #4]	; (80098d4 <__errno+0x8>)
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	2000000c 	.word	0x2000000c

080098d8 <__libc_init_array>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	4e0d      	ldr	r6, [pc, #52]	; (8009910 <__libc_init_array+0x38>)
 80098dc:	4c0d      	ldr	r4, [pc, #52]	; (8009914 <__libc_init_array+0x3c>)
 80098de:	1ba4      	subs	r4, r4, r6
 80098e0:	10a4      	asrs	r4, r4, #2
 80098e2:	2500      	movs	r5, #0
 80098e4:	42a5      	cmp	r5, r4
 80098e6:	d109      	bne.n	80098fc <__libc_init_array+0x24>
 80098e8:	4e0b      	ldr	r6, [pc, #44]	; (8009918 <__libc_init_array+0x40>)
 80098ea:	4c0c      	ldr	r4, [pc, #48]	; (800991c <__libc_init_array+0x44>)
 80098ec:	f000 fa02 	bl	8009cf4 <_init>
 80098f0:	1ba4      	subs	r4, r4, r6
 80098f2:	10a4      	asrs	r4, r4, #2
 80098f4:	2500      	movs	r5, #0
 80098f6:	42a5      	cmp	r5, r4
 80098f8:	d105      	bne.n	8009906 <__libc_init_array+0x2e>
 80098fa:	bd70      	pop	{r4, r5, r6, pc}
 80098fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009900:	4798      	blx	r3
 8009902:	3501      	adds	r5, #1
 8009904:	e7ee      	b.n	80098e4 <__libc_init_array+0xc>
 8009906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800990a:	4798      	blx	r3
 800990c:	3501      	adds	r5, #1
 800990e:	e7f2      	b.n	80098f6 <__libc_init_array+0x1e>
 8009910:	0800a568 	.word	0x0800a568
 8009914:	0800a568 	.word	0x0800a568
 8009918:	0800a568 	.word	0x0800a568
 800991c:	0800a56c 	.word	0x0800a56c

08009920 <memset>:
 8009920:	4402      	add	r2, r0
 8009922:	4603      	mov	r3, r0
 8009924:	4293      	cmp	r3, r2
 8009926:	d100      	bne.n	800992a <memset+0xa>
 8009928:	4770      	bx	lr
 800992a:	f803 1b01 	strb.w	r1, [r3], #1
 800992e:	e7f9      	b.n	8009924 <memset+0x4>

08009930 <atan2f>:
 8009930:	f000 b850 	b.w	80099d4 <__ieee754_atan2f>

08009934 <sqrtf>:
 8009934:	b510      	push	{r4, lr}
 8009936:	ed2d 8b02 	vpush	{d8}
 800993a:	b08a      	sub	sp, #40	; 0x28
 800993c:	eeb0 8a40 	vmov.f32	s16, s0
 8009940:	f000 f8f6 	bl	8009b30 <__ieee754_sqrtf>
 8009944:	4b21      	ldr	r3, [pc, #132]	; (80099cc <sqrtf+0x98>)
 8009946:	f993 4000 	ldrsb.w	r4, [r3]
 800994a:	1c63      	adds	r3, r4, #1
 800994c:	d02c      	beq.n	80099a8 <sqrtf+0x74>
 800994e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009956:	d627      	bvs.n	80099a8 <sqrtf+0x74>
 8009958:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	d522      	bpl.n	80099a8 <sqrtf+0x74>
 8009962:	2301      	movs	r3, #1
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <sqrtf+0x9c>)
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	ee18 0a10 	vmov	r0, s16
 800996e:	2300      	movs	r3, #0
 8009970:	9308      	str	r3, [sp, #32]
 8009972:	f7f6 fdb5 	bl	80004e0 <__aeabi_f2d>
 8009976:	2200      	movs	r2, #0
 8009978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800997c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009980:	2300      	movs	r3, #0
 8009982:	b9ac      	cbnz	r4, 80099b0 <sqrtf+0x7c>
 8009984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009988:	4668      	mov	r0, sp
 800998a:	f000 f8d4 	bl	8009b36 <matherr>
 800998e:	b1b8      	cbz	r0, 80099c0 <sqrtf+0x8c>
 8009990:	9b08      	ldr	r3, [sp, #32]
 8009992:	b11b      	cbz	r3, 800999c <sqrtf+0x68>
 8009994:	f7ff ff9a 	bl	80098cc <__errno>
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	6003      	str	r3, [r0, #0]
 800999c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099a0:	f7f7 f890 	bl	8000ac4 <__aeabi_d2f>
 80099a4:	ee00 0a10 	vmov	s0, r0
 80099a8:	b00a      	add	sp, #40	; 0x28
 80099aa:	ecbd 8b02 	vpop	{d8}
 80099ae:	bd10      	pop	{r4, pc}
 80099b0:	4610      	mov	r0, r2
 80099b2:	4619      	mov	r1, r3
 80099b4:	f7f6 ff16 	bl	80007e4 <__aeabi_ddiv>
 80099b8:	2c02      	cmp	r4, #2
 80099ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099be:	d1e3      	bne.n	8009988 <sqrtf+0x54>
 80099c0:	f7ff ff84 	bl	80098cc <__errno>
 80099c4:	2321      	movs	r3, #33	; 0x21
 80099c6:	6003      	str	r3, [r0, #0]
 80099c8:	e7e2      	b.n	8009990 <sqrtf+0x5c>
 80099ca:	bf00      	nop
 80099cc:	20000070 	.word	0x20000070
 80099d0:	0800a538 	.word	0x0800a538

080099d4 <__ieee754_atan2f>:
 80099d4:	ee10 2a90 	vmov	r2, s1
 80099d8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80099dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80099e0:	b510      	push	{r4, lr}
 80099e2:	eef0 7a40 	vmov.f32	s15, s0
 80099e6:	dc06      	bgt.n	80099f6 <__ieee754_atan2f+0x22>
 80099e8:	ee10 0a10 	vmov	r0, s0
 80099ec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80099f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80099f4:	dd04      	ble.n	8009a00 <__ieee754_atan2f+0x2c>
 80099f6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80099fa:	eeb0 0a67 	vmov.f32	s0, s15
 80099fe:	bd10      	pop	{r4, pc}
 8009a00:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009a04:	d103      	bne.n	8009a0e <__ieee754_atan2f+0x3a>
 8009a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a0a:	f000 b897 	b.w	8009b3c <atanf>
 8009a0e:	1794      	asrs	r4, r2, #30
 8009a10:	f004 0402 	and.w	r4, r4, #2
 8009a14:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009a18:	b943      	cbnz	r3, 8009a2c <__ieee754_atan2f+0x58>
 8009a1a:	2c02      	cmp	r4, #2
 8009a1c:	d06e      	beq.n	8009afc <__ieee754_atan2f+0x128>
 8009a1e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8009b04 <__ieee754_atan2f+0x130>
 8009a22:	2c03      	cmp	r4, #3
 8009a24:	bf08      	it	eq
 8009a26:	eef0 7a47 	vmoveq.f32	s15, s14
 8009a2a:	e7e6      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009a2c:	b941      	cbnz	r1, 8009a40 <__ieee754_atan2f+0x6c>
 8009a2e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8009b08 <__ieee754_atan2f+0x134>
 8009a32:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009b0c <__ieee754_atan2f+0x138>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	bfb8      	it	lt
 8009a3a:	eef0 7a47 	vmovlt.f32	s15, s14
 8009a3e:	e7dc      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009a40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009a44:	d122      	bne.n	8009a8c <__ieee754_atan2f+0xb8>
 8009a46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009a4a:	d112      	bne.n	8009a72 <__ieee754_atan2f+0x9e>
 8009a4c:	2c02      	cmp	r4, #2
 8009a4e:	d00a      	beq.n	8009a66 <__ieee754_atan2f+0x92>
 8009a50:	2c03      	cmp	r4, #3
 8009a52:	d00b      	beq.n	8009a6c <__ieee754_atan2f+0x98>
 8009a54:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8009b10 <__ieee754_atan2f+0x13c>
 8009a58:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009b14 <__ieee754_atan2f+0x140>
 8009a5c:	2c01      	cmp	r4, #1
 8009a5e:	bf18      	it	ne
 8009a60:	eef0 7a47 	vmovne.f32	s15, s14
 8009a64:	e7c9      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009a66:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009b18 <__ieee754_atan2f+0x144>
 8009a6a:	e7c6      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009a6c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009b1c <__ieee754_atan2f+0x148>
 8009a70:	e7c3      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009a72:	2c02      	cmp	r4, #2
 8009a74:	d042      	beq.n	8009afc <__ieee754_atan2f+0x128>
 8009a76:	2c03      	cmp	r4, #3
 8009a78:	d005      	beq.n	8009a86 <__ieee754_atan2f+0xb2>
 8009a7a:	2c01      	cmp	r4, #1
 8009a7c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009b20 <__ieee754_atan2f+0x14c>
 8009a80:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009b24 <__ieee754_atan2f+0x150>
 8009a84:	e7eb      	b.n	8009a5e <__ieee754_atan2f+0x8a>
 8009a86:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009b04 <__ieee754_atan2f+0x130>
 8009a8a:	e7b6      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009a8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009a90:	d0cd      	beq.n	8009a2e <__ieee754_atan2f+0x5a>
 8009a92:	1a5b      	subs	r3, r3, r1
 8009a94:	15db      	asrs	r3, r3, #23
 8009a96:	2b3c      	cmp	r3, #60	; 0x3c
 8009a98:	dc1a      	bgt.n	8009ad0 <__ieee754_atan2f+0xfc>
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	da01      	bge.n	8009aa2 <__ieee754_atan2f+0xce>
 8009a9e:	333c      	adds	r3, #60	; 0x3c
 8009aa0:	db19      	blt.n	8009ad6 <__ieee754_atan2f+0x102>
 8009aa2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009aa6:	f000 f91d 	bl	8009ce4 <fabsf>
 8009aaa:	f000 f847 	bl	8009b3c <atanf>
 8009aae:	eef0 7a40 	vmov.f32	s15, s0
 8009ab2:	2c01      	cmp	r4, #1
 8009ab4:	d012      	beq.n	8009adc <__ieee754_atan2f+0x108>
 8009ab6:	2c02      	cmp	r4, #2
 8009ab8:	d017      	beq.n	8009aea <__ieee754_atan2f+0x116>
 8009aba:	2c00      	cmp	r4, #0
 8009abc:	d09d      	beq.n	80099fa <__ieee754_atan2f+0x26>
 8009abe:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009b28 <__ieee754_atan2f+0x154>
 8009ac2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ac6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009b2c <__ieee754_atan2f+0x158>
 8009aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ace:	e794      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009ad0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009b08 <__ieee754_atan2f+0x134>
 8009ad4:	e7ed      	b.n	8009ab2 <__ieee754_atan2f+0xde>
 8009ad6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009b24 <__ieee754_atan2f+0x150>
 8009ada:	e7ea      	b.n	8009ab2 <__ieee754_atan2f+0xde>
 8009adc:	ee17 3a90 	vmov	r3, s15
 8009ae0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ae4:	ee07 3a90 	vmov	s15, r3
 8009ae8:	e787      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009aea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009b28 <__ieee754_atan2f+0x154>
 8009aee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009af2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009b2c <__ieee754_atan2f+0x158>
 8009af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009afa:	e77e      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009afc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009b2c <__ieee754_atan2f+0x158>
 8009b00:	e77b      	b.n	80099fa <__ieee754_atan2f+0x26>
 8009b02:	bf00      	nop
 8009b04:	c0490fdb 	.word	0xc0490fdb
 8009b08:	3fc90fdb 	.word	0x3fc90fdb
 8009b0c:	bfc90fdb 	.word	0xbfc90fdb
 8009b10:	bf490fdb 	.word	0xbf490fdb
 8009b14:	3f490fdb 	.word	0x3f490fdb
 8009b18:	4016cbe4 	.word	0x4016cbe4
 8009b1c:	c016cbe4 	.word	0xc016cbe4
 8009b20:	80000000 	.word	0x80000000
 8009b24:	00000000 	.word	0x00000000
 8009b28:	33bbbd2e 	.word	0x33bbbd2e
 8009b2c:	40490fdb 	.word	0x40490fdb

08009b30 <__ieee754_sqrtf>:
 8009b30:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009b34:	4770      	bx	lr

08009b36 <matherr>:
 8009b36:	2000      	movs	r0, #0
 8009b38:	4770      	bx	lr
	...

08009b3c <atanf>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	ee10 5a10 	vmov	r5, s0
 8009b42:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009b46:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009b4a:	eef0 7a40 	vmov.f32	s15, s0
 8009b4e:	db10      	blt.n	8009b72 <atanf+0x36>
 8009b50:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009b54:	dd04      	ble.n	8009b60 <atanf+0x24>
 8009b56:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009c98 <atanf+0x15c>
 8009b64:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009c9c <atanf+0x160>
 8009b68:	2d00      	cmp	r5, #0
 8009b6a:	bfd8      	it	le
 8009b6c:	eef0 7a47 	vmovle.f32	s15, s14
 8009b70:	e7f3      	b.n	8009b5a <atanf+0x1e>
 8009b72:	4b4b      	ldr	r3, [pc, #300]	; (8009ca0 <atanf+0x164>)
 8009b74:	429c      	cmp	r4, r3
 8009b76:	dc10      	bgt.n	8009b9a <atanf+0x5e>
 8009b78:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009b7c:	da0a      	bge.n	8009b94 <atanf+0x58>
 8009b7e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009ca4 <atanf+0x168>
 8009b82:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b92:	dce2      	bgt.n	8009b5a <atanf+0x1e>
 8009b94:	f04f 33ff 	mov.w	r3, #4294967295
 8009b98:	e013      	b.n	8009bc2 <atanf+0x86>
 8009b9a:	f000 f8a3 	bl	8009ce4 <fabsf>
 8009b9e:	4b42      	ldr	r3, [pc, #264]	; (8009ca8 <atanf+0x16c>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	dc4f      	bgt.n	8009c44 <atanf+0x108>
 8009ba4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009ba8:	429c      	cmp	r4, r3
 8009baa:	dc41      	bgt.n	8009c30 <atanf+0xf4>
 8009bac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009bb0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009bb4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009bb8:	2300      	movs	r3, #0
 8009bba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009bbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009bc8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009cac <atanf+0x170>
 8009bcc:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009cb0 <atanf+0x174>
 8009bd0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009cb4 <atanf+0x178>
 8009bd4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009bd8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009bdc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009cb8 <atanf+0x17c>
 8009be0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009be4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009cbc <atanf+0x180>
 8009be8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009bec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009cc0 <atanf+0x184>
 8009bf0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009bf4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009cc4 <atanf+0x188>
 8009bf8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009bfc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009cc8 <atanf+0x18c>
 8009c00:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009c04:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009ccc <atanf+0x190>
 8009c08:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009c0c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009cd0 <atanf+0x194>
 8009c10:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009c14:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009cd4 <atanf+0x198>
 8009c18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009c1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009c20:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c28:	d121      	bne.n	8009c6e <atanf+0x132>
 8009c2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c2e:	e794      	b.n	8009b5a <atanf+0x1e>
 8009c30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009c34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009c38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009c42:	e7be      	b.n	8009bc2 <atanf+0x86>
 8009c44:	4b24      	ldr	r3, [pc, #144]	; (8009cd8 <atanf+0x19c>)
 8009c46:	429c      	cmp	r4, r3
 8009c48:	dc0b      	bgt.n	8009c62 <atanf+0x126>
 8009c4a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c52:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009c56:	2302      	movs	r3, #2
 8009c58:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c60:	e7af      	b.n	8009bc2 <atanf+0x86>
 8009c62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009c66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e7a9      	b.n	8009bc2 <atanf+0x86>
 8009c6e:	4a1b      	ldr	r2, [pc, #108]	; (8009cdc <atanf+0x1a0>)
 8009c70:	491b      	ldr	r1, [pc, #108]	; (8009ce0 <atanf+0x1a4>)
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	441a      	add	r2, r3
 8009c76:	440b      	add	r3, r1
 8009c78:	edd3 6a00 	vldr	s13, [r3]
 8009c7c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c86:	ed92 7a00 	vldr	s14, [r2]
 8009c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c8e:	bfb8      	it	lt
 8009c90:	eef1 7a67 	vneglt.f32	s15, s15
 8009c94:	e761      	b.n	8009b5a <atanf+0x1e>
 8009c96:	bf00      	nop
 8009c98:	bfc90fdb 	.word	0xbfc90fdb
 8009c9c:	3fc90fdb 	.word	0x3fc90fdb
 8009ca0:	3edfffff 	.word	0x3edfffff
 8009ca4:	7149f2ca 	.word	0x7149f2ca
 8009ca8:	3f97ffff 	.word	0x3f97ffff
 8009cac:	3c8569d7 	.word	0x3c8569d7
 8009cb0:	3d4bda59 	.word	0x3d4bda59
 8009cb4:	bd6ef16b 	.word	0xbd6ef16b
 8009cb8:	3d886b35 	.word	0x3d886b35
 8009cbc:	3dba2e6e 	.word	0x3dba2e6e
 8009cc0:	3e124925 	.word	0x3e124925
 8009cc4:	3eaaaaab 	.word	0x3eaaaaab
 8009cc8:	bd15a221 	.word	0xbd15a221
 8009ccc:	bd9d8795 	.word	0xbd9d8795
 8009cd0:	bde38e38 	.word	0xbde38e38
 8009cd4:	be4ccccd 	.word	0xbe4ccccd
 8009cd8:	401bffff 	.word	0x401bffff
 8009cdc:	0800a540 	.word	0x0800a540
 8009ce0:	0800a550 	.word	0x0800a550

08009ce4 <fabsf>:
 8009ce4:	ee10 3a10 	vmov	r3, s0
 8009ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cec:	ee00 3a10 	vmov	s0, r3
 8009cf0:	4770      	bx	lr
	...

08009cf4 <_init>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr

08009d00 <_fini>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr
