
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ad8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  08010cb8  08010cb8  00020cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011908  08011908  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08011908  08011908  00021908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011910  08011910  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011910  08011910  00021910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011914  08011914  00021914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08011918  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  200001ec  08011b04  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  08011b04  000307d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020cef  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bfc  00000000  00000000  00050f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f0  00000000  00000000  00054b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001870  00000000  00000000  000564f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000236d8  00000000  00000000  00057d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016bbc  00000000  00000000  0007b440  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e21a4  00000000  00000000  00091ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001741a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008010  00000000  00000000  0017421c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010ca0 	.word	0x08010ca0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	08010ca0 	.word	0x08010ca0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800042e:	f1a4 0401 	sub.w	r4, r4, #1
 8000432:	d1e9      	bne.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b972 	b.w	8000ff4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4688      	mov	r8, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14b      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4615      	mov	r5, r2
 8000d3a:	d967      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0720 	rsb	r7, r2, #32
 8000d46:	fa01 f302 	lsl.w	r3, r1, r2
 8000d4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d4e:	4095      	lsls	r5, r2
 8000d50:	ea47 0803 	orr.w	r8, r7, r3
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d60:	fa1f fc85 	uxth.w	ip, r5
 8000d64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18eb      	adds	r3, r5, r3
 8000d76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d7a:	f080 811b 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8118 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000d84:	3f02      	subs	r7, #2
 8000d86:	442b      	add	r3, r5
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9c:	45a4      	cmp	ip, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	192c      	adds	r4, r5, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000db0:	3802      	subs	r0, #2
 8000db2:	442c      	add	r4, r5
 8000db4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000db8:	eba4 040c 	sub.w	r4, r4, ip
 8000dbc:	2700      	movs	r7, #0
 8000dbe:	b11e      	cbz	r6, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc8:	4639      	mov	r1, r7
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xbe>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80eb 	beq.w	8000fae <__udivmoddi4+0x286>
 8000dd8:	2700      	movs	r7, #0
 8000dda:	e9c6 0100 	strd	r0, r1, [r6]
 8000dde:	4638      	mov	r0, r7
 8000de0:	4639      	mov	r1, r7
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f783 	clz	r7, r3
 8000dea:	2f00      	cmp	r7, #0
 8000dec:	d147      	bne.n	8000e7e <__udivmoddi4+0x156>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd0>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80fa 	bhi.w	8000fec <__udivmoddi4+0x2c4>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	4698      	mov	r8, r3
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e06:	e9c6 4800 	strd	r4, r8, [r6]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xe8>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 808f 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e1a:	1b49      	subs	r1, r1, r5
 8000e1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e20:	fa1f f885 	uxth.w	r8, r5
 8000e24:	2701      	movs	r7, #1
 8000e26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e2a:	0c23      	lsrs	r3, r4, #16
 8000e2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb08 f10c 	mul.w	r1, r8, ip
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3c:	18eb      	adds	r3, r5, r3
 8000e3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	f200 80cd 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e4a:	4684      	mov	ip, r0
 8000e4c:	1a59      	subs	r1, r3, r1
 8000e4e:	b2a3      	uxth	r3, r4
 8000e50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e5c:	fb08 f800 	mul.w	r8, r8, r0
 8000e60:	45a0      	cmp	r8, r4
 8000e62:	d907      	bls.n	8000e74 <__udivmoddi4+0x14c>
 8000e64:	192c      	adds	r4, r5, r4
 8000e66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x14a>
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	f200 80b6 	bhi.w	8000fde <__udivmoddi4+0x2b6>
 8000e72:	4618      	mov	r0, r3
 8000e74:	eba4 0408 	sub.w	r4, r4, r8
 8000e78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e7c:	e79f      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e82:	40bb      	lsls	r3, r7
 8000e84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e9c:	4325      	orrs	r5, r4
 8000e9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ea2:	0c2c      	lsrs	r4, r5, #16
 8000ea4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ea8:	fa1f fa8e 	uxth.w	sl, lr
 8000eac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000eb0:	fb09 f40a 	mul.w	r4, r9, sl
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eba:	fa00 f107 	lsl.w	r1, r0, r7
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ec4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ec8:	f080 8087 	bcs.w	8000fda <__udivmoddi4+0x2b2>
 8000ecc:	429c      	cmp	r4, r3
 8000ece:	f240 8084 	bls.w	8000fda <__udivmoddi4+0x2b2>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4473      	add	r3, lr
 8000ed8:	1b1b      	subs	r3, r3, r4
 8000eda:	b2ad      	uxth	r5, r5
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ee4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ee8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eec:	45a2      	cmp	sl, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ef8:	d26b      	bcs.n	8000fd2 <__udivmoddi4+0x2aa>
 8000efa:	45a2      	cmp	sl, r4
 8000efc:	d969      	bls.n	8000fd2 <__udivmoddi4+0x2aa>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4474      	add	r4, lr
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0a:	eba4 040a 	sub.w	r4, r4, sl
 8000f0e:	454c      	cmp	r4, r9
 8000f10:	46c2      	mov	sl, r8
 8000f12:	464b      	mov	r3, r9
 8000f14:	d354      	bcc.n	8000fc0 <__udivmoddi4+0x298>
 8000f16:	d051      	beq.n	8000fbc <__udivmoddi4+0x294>
 8000f18:	2e00      	cmp	r6, #0
 8000f1a:	d069      	beq.n	8000ff0 <__udivmoddi4+0x2c8>
 8000f1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f20:	eb64 0403 	sbc.w	r4, r4, r3
 8000f24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f28:	40fd      	lsrs	r5, r7
 8000f2a:	40fc      	lsrs	r4, r7
 8000f2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f30:	e9c6 5400 	strd	r5, r4, [r6]
 8000f34:	2700      	movs	r7, #0
 8000f36:	e747      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f40:	4095      	lsls	r5, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f4e:	4338      	orrs	r0, r7
 8000f50:	0c01      	lsrs	r1, r0, #16
 8000f52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f56:	fa1f f885 	uxth.w	r8, r5
 8000f5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb07 f308 	mul.w	r3, r7, r8
 8000f66:	428b      	cmp	r3, r1
 8000f68:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x256>
 8000f6e:	1869      	adds	r1, r5, r1
 8000f70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f74:	d22f      	bcs.n	8000fd6 <__udivmoddi4+0x2ae>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d92d      	bls.n	8000fd6 <__udivmoddi4+0x2ae>
 8000f7a:	3f02      	subs	r7, #2
 8000f7c:	4429      	add	r1, r5
 8000f7e:	1acb      	subs	r3, r1, r3
 8000f80:	b281      	uxth	r1, r0
 8000f82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb00 f308 	mul.w	r3, r0, r8
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d907      	bls.n	8000fa6 <__udivmoddi4+0x27e>
 8000f96:	1869      	adds	r1, r5, r1
 8000f98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9c:	d217      	bcs.n	8000fce <__udivmoddi4+0x2a6>
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	d915      	bls.n	8000fce <__udivmoddi4+0x2a6>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4429      	add	r1, r5
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fac:	e73b      	b.n	8000e26 <__udivmoddi4+0xfe>
 8000fae:	4637      	mov	r7, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e709      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb4:	4607      	mov	r7, r0
 8000fb6:	e6e7      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb8:	4618      	mov	r0, r3
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fbc:	4541      	cmp	r1, r8
 8000fbe:	d2ab      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fc4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fc8:	3801      	subs	r0, #1
 8000fca:	4613      	mov	r3, r2
 8000fcc:	e7a4      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fce:	4660      	mov	r0, ip
 8000fd0:	e7e9      	b.n	8000fa6 <__udivmoddi4+0x27e>
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	e795      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd6:	4667      	mov	r7, ip
 8000fd8:	e7d1      	b.n	8000f7e <__udivmoddi4+0x256>
 8000fda:	4681      	mov	r9, r0
 8000fdc:	e77c      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fde:	3802      	subs	r0, #2
 8000fe0:	442c      	add	r4, r5
 8000fe2:	e747      	b.n	8000e74 <__udivmoddi4+0x14c>
 8000fe4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe8:	442b      	add	r3, r5
 8000fea:	e72f      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fec:	4638      	mov	r0, r7
 8000fee:	e708      	b.n	8000e02 <__udivmoddi4+0xda>
 8000ff0:	4637      	mov	r7, r6
 8000ff2:	e6e9      	b.n	8000dc8 <__udivmoddi4+0xa0>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b092      	sub	sp, #72	; 0x48
 8000ffc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000ffe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	223c      	movs	r2, #60	; 0x3c
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00b faf2 	bl	800c5fa <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001016:	4b43      	ldr	r3, [pc, #268]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001018:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800101c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800101e:	4b41      	ldr	r3, [pc, #260]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001020:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <MX_ADC1_Init+0x12c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001032:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001038:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <MX_ADC1_Init+0x12c>)
 800103a:	2201      	movs	r2, #1
 800103c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103e:	4b39      	ldr	r3, [pc, #228]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001040:	2204      	movs	r2, #4
 8001042:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001046:	2200      	movs	r2, #0
 8001048:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <MX_ADC1_Init+0x12c>)
 800104c:	2200      	movs	r2, #0
 800104e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001052:	2201      	movs	r2, #1
 8001054:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001068:	2200      	movs	r2, #0
 800106a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800106c:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <MX_ADC1_Init+0x12c>)
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001074:	482b      	ldr	r0, [pc, #172]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001076:	f003 fc35 	bl	80048e4 <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001080:	f002 fcf6 	bl	8003a70 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001084:	2300      	movs	r3, #0
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001088:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800108c:	4619      	mov	r1, r3
 800108e:	4825      	ldr	r0, [pc, #148]	; (8001124 <MX_ADC1_Init+0x12c>)
 8001090:	f005 f82a 	bl	80060e8 <HAL_ADCEx_MultiModeConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800109a:	f002 fce9 	bl	8003a70 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_ADC1_Init+0x130>)
 80010a0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80010a2:	2309      	movs	r3, #9
 80010a4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80010a6:	2301      	movs	r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80010aa:	237f      	movs	r3, #127	; 0x7f
 80010ac:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80010ae:	2304      	movs	r3, #4
 80010b0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80010cc:	2384      	movs	r3, #132	; 0x84
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_ADC1_Init+0x12c>)
 80010e0:	f004 fbaa 	bl	8005838 <HAL_ADCEx_InjectedConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80010ea:	f002 fcc1 	bl	8003a70 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_ADC1_Init+0x134>)
 80010f0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80010f2:	f240 130f 	movw	r3, #271	; 0x10f
 80010f6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 80010fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001100:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8001102:	2301      	movs	r3, #1
 8001104:	773b      	strb	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_ADC1_Init+0x12c>)
 800110c:	f004 fb94 	bl	8005838 <HAL_ADCEx_InjectedConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8001116:	f002 fcab 	bl	8003a70 <Error_Handler>
  }

}
 800111a:	bf00      	nop
 800111c:	3748      	adds	r7, #72	; 0x48
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000290 	.word	0x20000290
 8001128:	0c900008 	.word	0x0c900008
 800112c:	32601000 	.word	0x32601000

08001130 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b090      	sub	sp, #64	; 0x40
 8001134:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	223c      	movs	r2, #60	; 0x3c
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f00b fa5c 	bl	800c5fa <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <MX_ADC2_Init+0xe4>)
 8001144:	4a34      	ldr	r2, [pc, #208]	; (8001218 <MX_ADC2_Init+0xe8>)
 8001146:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001148:	4b32      	ldr	r3, [pc, #200]	; (8001214 <MX_ADC2_Init+0xe4>)
 800114a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800114e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <MX_ADC2_Init+0xe4>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <MX_ADC2_Init+0xe4>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_ADC2_Init+0xe4>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <MX_ADC2_Init+0xe4>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_ADC2_Init+0xe4>)
 800116a:	2204      	movs	r2, #4
 800116c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_ADC2_Init+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_ADC2_Init+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_ADC2_Init+0xe4>)
 800117c:	2201      	movs	r2, #1
 800117e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_ADC2_Init+0xe4>)
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_ADC2_Init+0xe4>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_ADC2_Init+0xe4>)
 8001192:	2200      	movs	r2, #0
 8001194:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_ADC2_Init+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800119e:	481d      	ldr	r0, [pc, #116]	; (8001214 <MX_ADC2_Init+0xe4>)
 80011a0:	f003 fba0 	bl	80048e4 <HAL_ADC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80011aa:	f002 fc61 	bl	8003a70 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_ADC2_Init+0xec>)
 80011b0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80011b2:	2309      	movs	r3, #9
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80011b6:	2301      	movs	r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80011ba:	237f      	movs	r3, #127	; 0x7f
 80011bc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 80011c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ca:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80011e8:	2384      	movs	r3, #132	; 0x84
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_ADC2_Init+0xe4>)
 80011fc:	f004 fb1c 	bl	8005838 <HAL_ADCEx_InjectedConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8001206:	f002 fc33 	bl	8003a70 <Error_Handler>
  }

}
 800120a:	bf00      	nop
 800120c:	3740      	adds	r7, #64	; 0x40
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000224 	.word	0x20000224
 8001218:	50000100 	.word	0x50000100
 800121c:	0c900008 	.word	0x0c900008

08001220 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001240:	d14e      	bne.n	80012e0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001242:	4b47      	ldr	r3, [pc, #284]	; (8001360 <HAL_ADC_MspInit+0x140>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a45      	ldr	r2, [pc, #276]	; (8001360 <HAL_ADC_MspInit+0x140>)
 800124a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800124c:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_ADC_MspInit+0x140>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d10b      	bne.n	800126c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001254:	4b43      	ldr	r3, [pc, #268]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800125a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800125e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001260:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a3c      	ldr	r2, [pc, #240]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b37      	ldr	r3, [pc, #220]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	4a36      	ldr	r2, [pc, #216]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001290:	4b34      	ldr	r3, [pc, #208]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800129c:	2305      	movs	r3, #5
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f005 f92f 	bl	8006514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4827      	ldr	r0, [pc, #156]	; (8001368 <HAL_ADC_MspInit+0x148>)
 80012ca:	f005 f923 	bl	8006514 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2102      	movs	r1, #2
 80012d2:	2012      	movs	r0, #18
 80012d4:	f005 f883 	bl	80063de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012d8:	2012      	movs	r0, #18
 80012da:	f005 f89a 	bl	8006412 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012de:	e03a      	b.n	8001356 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_ADC_MspInit+0x14c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d135      	bne.n	8001356 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_ADC_MspInit+0x140>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_ADC_MspInit+0x140>)
 80012f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_ADC_MspInit+0x140>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d10b      	bne.n	8001314 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_ADC_MspInit+0x144>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	4a18      	ldr	r2, [pc, #96]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800132c:	2340      	movs	r3, #64	; 0x40
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001330:	2303      	movs	r3, #3
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f005 f8e7 	bl	8006514 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2102      	movs	r1, #2
 800134a:	2012      	movs	r0, #18
 800134c:	f005 f847 	bl	80063de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001350:	2012      	movs	r0, #18
 8001352:	f005 f85e 	bl	8006412 <HAL_NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3730      	adds	r7, #48	; 0x30
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000208 	.word	0x20000208
 8001364:	40021000 	.word	0x40021000
 8001368:	48000400 	.word	0x48000400
 800136c:	50000100 	.word	0x50000100

08001370 <cJSON_GetStringValue>:
{
    return (const char*) (global_error.json + global_error.position);
}

CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item) 
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsString(item)) 
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f001 f93f 	bl	80025fc <cJSON_IsString>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <cJSON_GetStringValue+0x18>
    {
        return NULL;
 8001384:	2300      	movs	r3, #0
 8001386:	e001      	b.n	800138c <cJSON_GetStringValue+0x1c>
    }

    return item->valuestring;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <case_insensitive_strcmp+0x16>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e05e      	b.n	800146c <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d10d      	bne.n	80013d2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e058      	b.n	800146c <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e052      	b.n	800146c <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3301      	adds	r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	f00b f8d4 	bl	800c584 <__locale_ctype_ptr>
 80013dc:	4602      	mov	r2, r0
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d103      	bne.n	80013f6 <case_insensitive_strcmp+0x62>
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	f103 0420 	add.w	r4, r3, #32
 80013f4:	e000      	b.n	80013f8 <case_insensitive_strcmp+0x64>
 80013f6:	7bfc      	ldrb	r4, [r7, #15]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	73bb      	strb	r3, [r7, #14]
 80013fe:	f00b f8c1 	bl	800c584 <__locale_ctype_ptr>
 8001402:	4602      	mov	r2, r0
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	3301      	adds	r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d102      	bne.n	800141a <case_insensitive_strcmp+0x86>
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	3320      	adds	r3, #32
 8001418:	e000      	b.n	800141c <case_insensitive_strcmp+0x88>
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	429c      	cmp	r4, r3
 800141e:	d0cc      	beq.n	80013ba <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	737b      	strb	r3, [r7, #13]
 8001426:	f00b f8ad 	bl	800c584 <__locale_ctype_ptr>
 800142a:	4602      	mov	r2, r0
 800142c:	7b7b      	ldrb	r3, [r7, #13]
 800142e:	3301      	adds	r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d103      	bne.n	8001444 <case_insensitive_strcmp+0xb0>
 800143c:	7b7b      	ldrb	r3, [r7, #13]
 800143e:	f103 0420 	add.w	r4, r3, #32
 8001442:	e000      	b.n	8001446 <case_insensitive_strcmp+0xb2>
 8001444:	7b7c      	ldrb	r4, [r7, #13]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	733b      	strb	r3, [r7, #12]
 800144c:	f00b f89a 	bl	800c584 <__locale_ctype_ptr>
 8001450:	4602      	mov	r2, r0
 8001452:	7b3b      	ldrb	r3, [r7, #12]
 8001454:	3301      	adds	r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d102      	bne.n	8001468 <case_insensitive_strcmp+0xd4>
 8001462:	7b3b      	ldrb	r3, [r7, #12]
 8001464:	3320      	adds	r3, #32
 8001466:	e000      	b.n	800146a <case_insensitive_strcmp+0xd6>
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	1ae3      	subs	r3, r4, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2028      	movs	r0, #40	; 0x28
 8001482:	4798      	blx	r3
 8001484:	60f8      	str	r0, [r7, #12]
    if (node)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800148c:	2228      	movs	r2, #40	; 0x28
 800148e:	2100      	movs	r1, #0
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f00b f8b2 	bl	800c5fa <memset>
    }

    return node;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80014ac:	e037      	b.n	800151e <cJSON_Delete+0x7e>
    {
        next = item->next;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d108      	bne.n	80014d2 <cJSON_Delete+0x32>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ffe7 	bl	80014a0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <cJSON_Delete+0x52>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <cJSON_Delete+0x8c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6912      	ldr	r2, [r2, #16]
 80014ee:	4610      	mov	r0, r2
 80014f0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <cJSON_Delete+0x72>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <cJSON_Delete+0x8c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6a12      	ldr	r2, [r2, #32]
 800150e:	4610      	mov	r0, r2
 8001510:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <cJSON_Delete+0x8c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	4798      	blx	r3
        item = next;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1c4      	bne.n	80014ae <cJSON_Delete+0xe>
    }
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000

08001530 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001534:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b099      	sub	sp, #100	; 0x64
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
    double number = 0;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f04f 0400 	mov.w	r4, #0
 8001552:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001556:	2300      	movs	r3, #0
 8001558:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800155a:	f7ff ffe9 	bl	8001530 <get_decimal_point>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <parse_number+0x36>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <parse_number+0x3a>
    {
        return false;
 8001576:	2300      	movs	r3, #0
 8001578:	e104      	b.n	8001784 <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800157a:	2300      	movs	r3, #0
 800157c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800157e:	e09f      	b.n	80016c0 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6899      	ldr	r1, [r3, #8]
 8001588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800158a:	440b      	add	r3, r1
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3b2b      	subs	r3, #43	; 0x2b
 8001592:	2b3a      	cmp	r3, #58	; 0x3a
 8001594:	f200 80a4 	bhi.w	80016e0 <parse_number+0x1a0>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <parse_number+0x60>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	0800168d 	.word	0x0800168d
 80015a4:	080016e1 	.word	0x080016e1
 80015a8:	0800168d 	.word	0x0800168d
 80015ac:	080016ab 	.word	0x080016ab
 80015b0:	080016e1 	.word	0x080016e1
 80015b4:	0800168d 	.word	0x0800168d
 80015b8:	0800168d 	.word	0x0800168d
 80015bc:	0800168d 	.word	0x0800168d
 80015c0:	0800168d 	.word	0x0800168d
 80015c4:	0800168d 	.word	0x0800168d
 80015c8:	0800168d 	.word	0x0800168d
 80015cc:	0800168d 	.word	0x0800168d
 80015d0:	0800168d 	.word	0x0800168d
 80015d4:	0800168d 	.word	0x0800168d
 80015d8:	0800168d 	.word	0x0800168d
 80015dc:	080016e1 	.word	0x080016e1
 80015e0:	080016e1 	.word	0x080016e1
 80015e4:	080016e1 	.word	0x080016e1
 80015e8:	080016e1 	.word	0x080016e1
 80015ec:	080016e1 	.word	0x080016e1
 80015f0:	080016e1 	.word	0x080016e1
 80015f4:	080016e1 	.word	0x080016e1
 80015f8:	080016e1 	.word	0x080016e1
 80015fc:	080016e1 	.word	0x080016e1
 8001600:	080016e1 	.word	0x080016e1
 8001604:	080016e1 	.word	0x080016e1
 8001608:	0800168d 	.word	0x0800168d
 800160c:	080016e1 	.word	0x080016e1
 8001610:	080016e1 	.word	0x080016e1
 8001614:	080016e1 	.word	0x080016e1
 8001618:	080016e1 	.word	0x080016e1
 800161c:	080016e1 	.word	0x080016e1
 8001620:	080016e1 	.word	0x080016e1
 8001624:	080016e1 	.word	0x080016e1
 8001628:	080016e1 	.word	0x080016e1
 800162c:	080016e1 	.word	0x080016e1
 8001630:	080016e1 	.word	0x080016e1
 8001634:	080016e1 	.word	0x080016e1
 8001638:	080016e1 	.word	0x080016e1
 800163c:	080016e1 	.word	0x080016e1
 8001640:	080016e1 	.word	0x080016e1
 8001644:	080016e1 	.word	0x080016e1
 8001648:	080016e1 	.word	0x080016e1
 800164c:	080016e1 	.word	0x080016e1
 8001650:	080016e1 	.word	0x080016e1
 8001654:	080016e1 	.word	0x080016e1
 8001658:	080016e1 	.word	0x080016e1
 800165c:	080016e1 	.word	0x080016e1
 8001660:	080016e1 	.word	0x080016e1
 8001664:	080016e1 	.word	0x080016e1
 8001668:	080016e1 	.word	0x080016e1
 800166c:	080016e1 	.word	0x080016e1
 8001670:	080016e1 	.word	0x080016e1
 8001674:	080016e1 	.word	0x080016e1
 8001678:	080016e1 	.word	0x080016e1
 800167c:	080016e1 	.word	0x080016e1
 8001680:	080016e1 	.word	0x080016e1
 8001684:	080016e1 	.word	0x080016e1
 8001688:	0800168d 	.word	0x0800168d
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6899      	ldr	r1, [r3, #8]
 8001694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001696:	440b      	add	r3, r1
 8001698:	4413      	add	r3, r2
 800169a:	7819      	ldrb	r1, [r3, #0]
 800169c:	f107 0208 	add.w	r2, r7, #8
 80016a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a2:	4413      	add	r3, r2
 80016a4:	460a      	mov	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
                break;
 80016a8:	e007      	b.n	80016ba <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 80016aa:	f107 0208 	add.w	r2, r7, #8
 80016ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b0:	4413      	add	r3, r2
 80016b2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80016b6:	701a      	strb	r2, [r3, #0]
                break;
 80016b8:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80016ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016bc:	3301      	adds	r3, #1
 80016be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c2:	2b3e      	cmp	r3, #62	; 0x3e
 80016c4:	d80e      	bhi.n	80016e4 <parse_number+0x1a4>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00b      	beq.n	80016e4 <parse_number+0x1a4>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d2:	441a      	add	r2, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	f4ff af51 	bcc.w	8001580 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 80016de:	e001      	b.n	80016e4 <parse_number+0x1a4>
                goto loop_end;
 80016e0:	bf00      	nop
 80016e2:	e000      	b.n	80016e6 <parse_number+0x1a6>
loop_end:
 80016e4:	bf00      	nop
    number_c_string[i] = '\0';
 80016e6:	f107 0208 	add.w	r2, r7, #8
 80016ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ec:	4413      	add	r3, r2
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80016f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00c fd07 	bl	800e110 <strtod>
 8001702:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8001706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	429a      	cmp	r2, r3
 800170e:	d101      	bne.n	8001714 <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8001710:	2300      	movs	r3, #0
 8001712:	e037      	b.n	8001784 <parse_number+0x244>
    }

    item->valuedouble = number;
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800171a:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800171e:	a31d      	add	r3, pc, #116	; (adr r3, 8001794 <parse_number+0x254>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001728:	f7ff fa24 	bl	8000b74 <__aeabi_dcmpge>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001738:	615a      	str	r2, [r3, #20]
 800173a:	e015      	b.n	8001768 <parse_number+0x228>
    }
    else if (number <= (double)INT_MIN)
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <parse_number+0x250>)
 8001742:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001746:	f7ff fa0b 	bl	8000b60 <__aeabi_dcmple>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001756:	615a      	str	r2, [r3, #20]
 8001758:	e006      	b.n	8001768 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 800175a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800175e:	f7ff fa33 	bl	8000bc8 <__aeabi_d2iz>
 8001762:	4602      	mov	r2, r0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2208      	movs	r2, #8
 800176c:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001774:	4611      	mov	r1, r2
 8001776:	f107 0208 	add.w	r2, r7, #8
 800177a:	1a8a      	subs	r2, r1, r2
 800177c:	441a      	add	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	609a      	str	r2, [r3, #8]
    return true;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3764      	adds	r7, #100	; 0x64
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	f3af 8000 	nop.w
 8001790:	c1e00000 	.word	0xc1e00000
 8001794:	ffc00000 	.word	0xffc00000
 8001798:	41dfffff 	.word	0x41dfffff

0800179c <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	e04c      	b.n	800184c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4413      	add	r3, r2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b2f      	cmp	r3, #47	; 0x2f
 80017bc:	d90f      	bls.n	80017de <parse_hex4+0x42>
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b39      	cmp	r3, #57	; 0x39
 80017c8:	d809      	bhi.n	80017de <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	3b30      	subs	r3, #48	; 0x30
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e02d      	b.n	800183a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4413      	add	r3, r2
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b40      	cmp	r3, #64	; 0x40
 80017e8:	d90f      	bls.n	800180a <parse_hex4+0x6e>
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b46      	cmp	r3, #70	; 0x46
 80017f4:	d809      	bhi.n	800180a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	3b37      	subs	r3, #55	; 0x37
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e017      	b.n	800183a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4413      	add	r3, r2
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b60      	cmp	r3, #96	; 0x60
 8001814:	d90f      	bls.n	8001836 <parse_hex4+0x9a>
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b66      	cmp	r3, #102	; 0x66
 8001820:	d809      	bhi.n	8001836 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	3b57      	subs	r3, #87	; 0x57
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e001      	b.n	800183a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001836:	2300      	movs	r3, #0
 8001838:	e00c      	b.n	8001854 <parse_hex4+0xb8>
        }

        if (i < 3)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d802      	bhi.n	8001846 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3301      	adds	r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d9af      	bls.n	80017b2 <parse_hex4+0x16>
        }
    }

    return h;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b05      	cmp	r3, #5
 8001898:	f340 80b7 	ble.w	8001a0a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	3302      	adds	r3, #2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff7b 	bl	800179c <parse_hex4>
 80018a6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018ae:	d304      	bcc.n	80018ba <utf16_literal_to_utf8+0x5a>
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018b6:	f0c0 80aa 	bcc.w	8001a0e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80018c0:	d337      	bcc.n	8001932 <utf16_literal_to_utf8+0xd2>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018c8:	d233      	bcs.n	8001932 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	3306      	adds	r3, #6
 80018ce:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80018d4:	230c      	movs	r3, #12
 80018d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	f340 8096 	ble.w	8001a12 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b5c      	cmp	r3, #92	; 0x5c
 80018ec:	f040 8093 	bne.w	8001a16 <utf16_literal_to_utf8+0x1b6>
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b75      	cmp	r3, #117	; 0x75
 80018f8:	f040 808d 	bne.w	8001a16 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3302      	adds	r3, #2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff4b 	bl	800179c <parse_hex4>
 8001906:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800190e:	f0c0 8082 	bcc.w	8001a16 <utf16_literal_to_utf8+0x1b6>
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001918:	d27d      	bcs.n	8001a16 <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	029a      	lsls	r2, r3, #10
 800191e:	4b42      	ldr	r3, [pc, #264]	; (8001a28 <utf16_literal_to_utf8+0x1c8>)
 8001920:	4013      	ands	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001928:	4313      	orrs	r3, r2
 800192a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001930:	e004      	b.n	800193c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001932:	2306      	movs	r3, #6
 8001934:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	2b7f      	cmp	r3, #127	; 0x7f
 8001940:	d803      	bhi.n	800194a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001948:	e01f      	b.n	800198a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001950:	d206      	bcs.n	8001960 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001952:	2302      	movs	r3, #2
 8001954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001958:	23c0      	movs	r3, #192	; 0xc0
 800195a:	f887 3020 	strb.w	r3, [r7, #32]
 800195e:	e014      	b.n	800198a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001966:	d206      	bcs.n	8001976 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001968:	2303      	movs	r3, #3
 800196a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800196e:	23e0      	movs	r3, #224	; 0xe0
 8001970:	f887 3020 	strb.w	r3, [r7, #32]
 8001974:	e009      	b.n	800198a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800197c:	d24d      	bcs.n	8001a1a <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800197e:	2304      	movs	r3, #4
 8001980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001984:	23f0      	movs	r3, #240	; 0xf0
 8001986:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800198a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800198e:	3b01      	subs	r3, #1
 8001990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001994:	e015      	b.n	80019c2 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6819      	ldr	r1, [r3, #0]
 80019a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019a8:	440b      	add	r3, r1
 80019aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019bc:	3b01      	subs	r3, #1
 80019be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1e5      	bne.n	8001996 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80019ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d909      	bls.n	80019e6 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	b2d9      	uxtb	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019de:	430a      	orrs	r2, r1
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e007      	b.n	80019f6 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019fe:	441a      	add	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a08:	e009      	b.n	8001a1e <utf16_literal_to_utf8+0x1be>
        goto fail;
 8001a0a:	bf00      	nop
 8001a0c:	e006      	b.n	8001a1c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001a0e:	bf00      	nop
 8001a10:	e004      	b.n	8001a1c <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8001a12:	bf00      	nop
 8001a14:	e002      	b.n	8001a1c <utf16_literal_to_utf8+0x1bc>

fail:
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001a1a:	bf00      	nop
    return 0;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	000ffc00 	.word	0x000ffc00

08001a2c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b22      	cmp	r3, #34	; 0x22
 8001a68:	f040 816c 	bne.w	8001d44 <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a74:	e018      	b.n	8001aa8 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b5c      	cmp	r3, #92	; 0x5c
 8001a7c:	d111      	bne.n	8001aa2 <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	3301      	adds	r3, #1
 8001a82:	461a      	mov	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f080 8159 	bcs.w	8001d48 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d203      	bcs.n	8001ac2 <parse_string+0x96>
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b22      	cmp	r3, #34	; 0x22
 8001ac0:	d1d9      	bne.n	8001a76 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	461a      	mov	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f080 813b 	bcs.w	8001d4c <parse_string+0x320>
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b22      	cmp	r3, #34	; 0x22
 8001adc:	f040 8136 	bne.w	8001d4c <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	6811      	ldr	r1, [r2, #0]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	6892      	ldr	r2, [r2, #8]
 8001aea:	440a      	add	r2, r1
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	461a      	mov	r2, r3
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	3201      	adds	r2, #1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4798      	blx	r3
 8001b02:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8122 	beq.w	8001d50 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b10:	e0fc      	b.n	8001d0c <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b5c      	cmp	r3, #92	; 0x5c
 8001b18:	d008      	beq.n	8001b2c <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	1c53      	adds	r3, r2, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1c59      	adds	r1, r3, #1
 8001b24:	60f9      	str	r1, [r7, #12]
 8001b26:	7812      	ldrb	r2, [r2, #0]
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e0ef      	b.n	8001d0c <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b30:	6a3a      	ldr	r2, [r7, #32]
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f340 810c 	ble.w	8001d54 <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	3301      	adds	r3, #1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	3b22      	subs	r3, #34	; 0x22
 8001b44:	2b53      	cmp	r3, #83	; 0x53
 8001b46:	f200 8107 	bhi.w	8001d58 <parse_string+0x32c>
 8001b4a:	a201      	add	r2, pc, #4	; (adr r2, 8001b50 <parse_string+0x124>)
 8001b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b50:	08001cdd 	.word	0x08001cdd
 8001b54:	08001d59 	.word	0x08001d59
 8001b58:	08001d59 	.word	0x08001d59
 8001b5c:	08001d59 	.word	0x08001d59
 8001b60:	08001d59 	.word	0x08001d59
 8001b64:	08001d59 	.word	0x08001d59
 8001b68:	08001d59 	.word	0x08001d59
 8001b6c:	08001d59 	.word	0x08001d59
 8001b70:	08001d59 	.word	0x08001d59
 8001b74:	08001d59 	.word	0x08001d59
 8001b78:	08001d59 	.word	0x08001d59
 8001b7c:	08001d59 	.word	0x08001d59
 8001b80:	08001d59 	.word	0x08001d59
 8001b84:	08001cdd 	.word	0x08001cdd
 8001b88:	08001d59 	.word	0x08001d59
 8001b8c:	08001d59 	.word	0x08001d59
 8001b90:	08001d59 	.word	0x08001d59
 8001b94:	08001d59 	.word	0x08001d59
 8001b98:	08001d59 	.word	0x08001d59
 8001b9c:	08001d59 	.word	0x08001d59
 8001ba0:	08001d59 	.word	0x08001d59
 8001ba4:	08001d59 	.word	0x08001d59
 8001ba8:	08001d59 	.word	0x08001d59
 8001bac:	08001d59 	.word	0x08001d59
 8001bb0:	08001d59 	.word	0x08001d59
 8001bb4:	08001d59 	.word	0x08001d59
 8001bb8:	08001d59 	.word	0x08001d59
 8001bbc:	08001d59 	.word	0x08001d59
 8001bc0:	08001d59 	.word	0x08001d59
 8001bc4:	08001d59 	.word	0x08001d59
 8001bc8:	08001d59 	.word	0x08001d59
 8001bcc:	08001d59 	.word	0x08001d59
 8001bd0:	08001d59 	.word	0x08001d59
 8001bd4:	08001d59 	.word	0x08001d59
 8001bd8:	08001d59 	.word	0x08001d59
 8001bdc:	08001d59 	.word	0x08001d59
 8001be0:	08001d59 	.word	0x08001d59
 8001be4:	08001d59 	.word	0x08001d59
 8001be8:	08001d59 	.word	0x08001d59
 8001bec:	08001d59 	.word	0x08001d59
 8001bf0:	08001d59 	.word	0x08001d59
 8001bf4:	08001d59 	.word	0x08001d59
 8001bf8:	08001d59 	.word	0x08001d59
 8001bfc:	08001d59 	.word	0x08001d59
 8001c00:	08001d59 	.word	0x08001d59
 8001c04:	08001d59 	.word	0x08001d59
 8001c08:	08001d59 	.word	0x08001d59
 8001c0c:	08001d59 	.word	0x08001d59
 8001c10:	08001d59 	.word	0x08001d59
 8001c14:	08001d59 	.word	0x08001d59
 8001c18:	08001d59 	.word	0x08001d59
 8001c1c:	08001d59 	.word	0x08001d59
 8001c20:	08001d59 	.word	0x08001d59
 8001c24:	08001d59 	.word	0x08001d59
 8001c28:	08001d59 	.word	0x08001d59
 8001c2c:	08001d59 	.word	0x08001d59
 8001c30:	08001d59 	.word	0x08001d59
 8001c34:	08001d59 	.word	0x08001d59
 8001c38:	08001cdd 	.word	0x08001cdd
 8001c3c:	08001d59 	.word	0x08001d59
 8001c40:	08001d59 	.word	0x08001d59
 8001c44:	08001d59 	.word	0x08001d59
 8001c48:	08001d59 	.word	0x08001d59
 8001c4c:	08001d59 	.word	0x08001d59
 8001c50:	08001ca1 	.word	0x08001ca1
 8001c54:	08001d59 	.word	0x08001d59
 8001c58:	08001d59 	.word	0x08001d59
 8001c5c:	08001d59 	.word	0x08001d59
 8001c60:	08001cad 	.word	0x08001cad
 8001c64:	08001d59 	.word	0x08001d59
 8001c68:	08001d59 	.word	0x08001d59
 8001c6c:	08001d59 	.word	0x08001d59
 8001c70:	08001d59 	.word	0x08001d59
 8001c74:	08001d59 	.word	0x08001d59
 8001c78:	08001d59 	.word	0x08001d59
 8001c7c:	08001d59 	.word	0x08001d59
 8001c80:	08001cb9 	.word	0x08001cb9
 8001c84:	08001d59 	.word	0x08001d59
 8001c88:	08001d59 	.word	0x08001d59
 8001c8c:	08001d59 	.word	0x08001d59
 8001c90:	08001cc5 	.word	0x08001cc5
 8001c94:	08001d59 	.word	0x08001d59
 8001c98:	08001cd1 	.word	0x08001cd1
 8001c9c:	08001ceb 	.word	0x08001ceb
            {
                case 'b':
                    *output_pointer++ = '\b';
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60fa      	str	r2, [r7, #12]
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	701a      	strb	r2, [r3, #0]
                    break;
 8001caa:	e02b      	b.n	8001d04 <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	60fa      	str	r2, [r7, #12]
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	701a      	strb	r2, [r3, #0]
                    break;
 8001cb6:	e025      	b.n	8001d04 <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	60fa      	str	r2, [r7, #12]
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	701a      	strb	r2, [r3, #0]
                    break;
 8001cc2:	e01f      	b.n	8001d04 <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	60fa      	str	r2, [r7, #12]
 8001cca:	220d      	movs	r2, #13
 8001ccc:	701a      	strb	r2, [r3, #0]
                    break;
 8001cce:	e019      	b.n	8001d04 <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60fa      	str	r2, [r7, #12]
 8001cd6:	2209      	movs	r2, #9
 8001cd8:	701a      	strb	r2, [r3, #0]
                    break;
 8001cda:	e013      	b.n	8001d04 <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	60fa      	str	r2, [r7, #12]
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce4:	7852      	ldrb	r2, [r2, #1]
 8001ce6:	701a      	strb	r2, [r3, #0]
                    break;
 8001ce8:	e00c      	b.n	8001d04 <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	461a      	mov	r2, r3
 8001cf0:	6a39      	ldr	r1, [r7, #32]
 8001cf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cf4:	f7ff fdb4 	bl	8001860 <utf16_literal_to_utf8>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02c      	beq.n	8001d5c <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8001d02:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	4413      	add	r3, r2
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	f4ff aefe 	bcc.w	8001b12 <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2210      	movs	r2, #16
 8001d20:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	609a      	str	r2, [r3, #8]

    return true;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e01e      	b.n	8001d82 <parse_string+0x356>
        goto fail;
 8001d44:	bf00      	nop
 8001d46:	e00a      	b.n	8001d5e <parse_string+0x332>
                    goto fail;
 8001d48:	bf00      	nop
 8001d4a:	e008      	b.n	8001d5e <parse_string+0x332>

fail:
 8001d4c:	bf00      	nop
 8001d4e:	e006      	b.n	8001d5e <parse_string+0x332>
            goto fail; /* allocation failure */
 8001d50:	bf00      	nop
 8001d52:	e004      	b.n	8001d5e <parse_string+0x332>
                goto fail;
 8001d54:	bf00      	nop
 8001d56:	e002      	b.n	8001d5e <parse_string+0x332>
                    goto fail;
 8001d58:	bf00      	nop
 8001d5a:	e000      	b.n	8001d5e <parse_string+0x332>
                        goto fail;
 8001d5c:	bf00      	nop
    if (output != NULL)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <parse_string+0x340>
    {
        input_buffer->hooks.deallocate(output);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	69f8      	ldr	r0, [r7, #28]
 8001d6a:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <parse_string+0x354>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3728      	adds	r7, #40	; 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop

08001d8c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <buffer_skip_whitespace+0x16>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e02c      	b.n	8001e00 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <buffer_skip_whitespace+0x2c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d306      	bcc.n	8001dc6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	e021      	b.n	8001e00 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00d      	beq.n	8001de8 <buffer_skip_whitespace+0x5c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <buffer_skip_whitespace+0x5c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4413      	add	r3, r2
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d9e9      	bls.n	8001dbc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d104      	bne.n	8001dfe <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	1e5a      	subs	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <skip_utf8_bom+0x1e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <skip_utf8_bom+0x1e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <skip_utf8_bom+0x22>
    {
        return NULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e01c      	b.n	8001e68 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d018      	beq.n	8001e66 <skip_utf8_bom+0x5a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	1d1a      	adds	r2, r3, #4
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d211      	bcs.n	8001e66 <skip_utf8_bom+0x5a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <skip_utf8_bom+0x64>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f00b fb2b 	bl	800d4ac <strncmp>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	1cda      	adds	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001e66:	687b      	ldr	r3, [r7, #4]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	08010cec 	.word	0x08010cec

08001e74 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e00c      	b.n	8001ea4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7fe f9d2 	bl	8000234 <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	6979      	ldr	r1, [r7, #20]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 f805 	bl	8001eac <cJSON_ParseWithLengthOpts>
 8001ea2:	4603      	mov	r3, r0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	; 0x38
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001eba:	f107 0318 	add.w	r3, r7, #24
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <cJSON_ParseWithLengthOpts+0x128>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <cJSON_ParseWithLengthOpts+0x128>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d042      	beq.n	8001f6a <cJSON_ParseWithLengthOpts+0xbe>
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03f      	beq.n	8001f6a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001ef6:	4a38      	ldr	r2, [pc, #224]	; (8001fd8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001efe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001f02:	4835      	ldr	r0, [pc, #212]	; (8001fd8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001f04:	f7ff fab6 	bl	8001474 <cJSON_New_Item>
 8001f08:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d02e      	beq.n	8001f6e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001f10:	f107 0318 	add.w	r3, r7, #24
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff79 	bl	8001e0c <skip_utf8_bom>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff35 	bl	8001d8c <buffer_skip_whitespace>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4619      	mov	r1, r3
 8001f26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f28:	f000 f866 	bl	8001ff8 <parse_value>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01f      	beq.n	8001f72 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001f38:	f107 0318 	add.w	r3, r7, #24
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff25 	bl	8001d8c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001f42:	6a3a      	ldr	r2, [r7, #32]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d20f      	bcs.n	8001f6a <cJSON_ParseWithLengthOpts+0xbe>
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <cJSON_ParseWithLengthOpts+0xbe>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	e02f      	b.n	8001fca <cJSON_ParseWithLengthOpts+0x11e>

fail:
 8001f6a:	bf00      	nop
 8001f6c:	e002      	b.n	8001f74 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001f72:	bf00      	nop
    if (item != NULL)
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <cJSON_ParseWithLengthOpts+0xd4>
    {
        cJSON_Delete(item);
 8001f7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f7c:	f7ff fa90 	bl	80014a0 <cJSON_Delete>
    }

    if (value != NULL)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d020      	beq.n	8001fc8 <cJSON_ParseWithLengthOpts+0x11c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001f8e:	6a3a      	ldr	r2, [r7, #32]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d202      	bcs.n	8001f9c <cJSON_ParseWithLengthOpts+0xf0>
        {
            local_error.position = buffer.offset;
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e005      	b.n	8001fa8 <cJSON_ParseWithLengthOpts+0xfc>
        }
        else if (buffer.length > 0)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <cJSON_ParseWithLengthOpts+0xfc>
        {
            local_error.position = buffer.length - 1;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <cJSON_ParseWithLengthOpts+0x10c>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	441a      	add	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <cJSON_ParseWithLengthOpts+0x128>)
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fc4:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3738      	adds	r7, #56	; 0x38
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000020c 	.word	0x2000020c
 8001fd8:	20000000 	.word	0x20000000

08001fdc <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff43 	bl	8001e74 <cJSON_ParseWithOpts>
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <parse_value+0x18>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <parse_value+0x1c>
    {
        return false; /* no input */
 8002010:	2300      	movs	r3, #0
 8002012:	e0d2      	b.n	80021ba <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d01d      	beq.n	8002056 <parse_value+0x5e>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	1d1a      	adds	r2, r3, #4
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d816      	bhi.n	8002056 <parse_value+0x5e>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4413      	add	r3, r2
 8002032:	2204      	movs	r2, #4
 8002034:	4963      	ldr	r1, [pc, #396]	; (80021c4 <parse_value+0x1cc>)
 8002036:	4618      	mov	r0, r3
 8002038:	f00b fa38 	bl	800d4ac <strncmp>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2204      	movs	r2, #4
 8002046:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	1d1a      	adds	r2, r3, #4
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	609a      	str	r2, [r3, #8]
        return true;
 8002052:	2301      	movs	r3, #1
 8002054:	e0b1      	b.n	80021ba <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01d      	beq.n	8002098 <parse_value+0xa0>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	1d5a      	adds	r2, r3, #5
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	d816      	bhi.n	8002098 <parse_value+0xa0>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	4413      	add	r3, r2
 8002074:	2205      	movs	r2, #5
 8002076:	4954      	ldr	r1, [pc, #336]	; (80021c8 <parse_value+0x1d0>)
 8002078:	4618      	mov	r0, r3
 800207a:	f00b fa17 	bl	800d4ac <strncmp>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	1d5a      	adds	r2, r3, #5
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	609a      	str	r2, [r3, #8]
        return true;
 8002094:	2301      	movs	r3, #1
 8002096:	e090      	b.n	80021ba <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <parse_value+0xe8>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	1d1a      	adds	r2, r3, #4
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d819      	bhi.n	80020e0 <parse_value+0xe8>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4413      	add	r3, r2
 80020b6:	2204      	movs	r2, #4
 80020b8:	4944      	ldr	r1, [pc, #272]	; (80021cc <parse_value+0x1d4>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00b f9f6 	bl	800d4ac <strncmp>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	609a      	str	r2, [r3, #8]
        return true;
 80020dc:	2301      	movs	r3, #1
 80020de:	e06c      	b.n	80021ba <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d013      	beq.n	800210e <parse_value+0x116>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d20d      	bcs.n	800210e <parse_value+0x116>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b22      	cmp	r3, #34	; 0x22
 8002100:	d105      	bne.n	800210e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fc91 	bl	8001a2c <parse_string>
 800210a:	4603      	mov	r3, r0
 800210c:	e055      	b.n	80021ba <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <parse_value+0x164>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	d21d      	bcs.n	800215c <parse_value+0x164>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b2d      	cmp	r3, #45	; 0x2d
 800212e:	d00f      	beq.n	8002150 <parse_value+0x158>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4413      	add	r3, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b2f      	cmp	r3, #47	; 0x2f
 800213e:	d90d      	bls.n	800215c <parse_value+0x164>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b39      	cmp	r3, #57	; 0x39
 800214e:	d805      	bhi.n	800215c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002150:	6839      	ldr	r1, [r7, #0]
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff f9f4 	bl	8001540 <parse_number>
 8002158:	4603      	mov	r3, r0
 800215a:	e02e      	b.n	80021ba <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d013      	beq.n	800218a <parse_value+0x192>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	d20d      	bcs.n	800218a <parse_value+0x192>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b5b      	cmp	r3, #91	; 0x5b
 800217c:	d105      	bne.n	800218a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800217e:	6839      	ldr	r1, [r7, #0]
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f825 	bl	80021d0 <parse_array>
 8002186:	4603      	mov	r3, r0
 8002188:	e017      	b.n	80021ba <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <parse_value+0x1c0>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d20d      	bcs.n	80021b8 <parse_value+0x1c0>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4413      	add	r3, r2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b7b      	cmp	r3, #123	; 0x7b
 80021aa:	d105      	bne.n	80021b8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8d2 	bl	8002358 <parse_object>
 80021b4:	4603      	mov	r3, r0
 80021b6:	e000      	b.n	80021ba <parse_value+0x1c2>
    }

    return false;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	08010cc4 	.word	0x08010cc4
 80021c8:	08010cf0 	.word	0x08010cf0
 80021cc:	08010cf8 	.word	0x08010cf8

080021d0 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ea:	d301      	bcc.n	80021f0 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80021ec:	2300      	movs	r3, #0
 80021ee:	e0af      	b.n	8002350 <parse_array+0x180>
    }
    input_buffer->depth++;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b5b      	cmp	r3, #91	; 0x5b
 8002208:	f040 8094 	bne.w	8002334 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002216:	6838      	ldr	r0, [r7, #0]
 8002218:	f7ff fdb8 	bl	8001d8c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <parse_array+0x6e>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	d207      	bcs.n	800223e <parse_array+0x6e>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4413      	add	r3, r2
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b5d      	cmp	r3, #93	; 0x5d
 800223c:	d061      	beq.n	8002302 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <parse_array+0x80>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	d305      	bcc.n	800225c <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	609a      	str	r2, [r3, #8]
        goto fail;
 800225a:	e072      	b.n	8002342 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	1e5a      	subs	r2, r3, #1
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3310      	adds	r3, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f902 	bl	8001474 <cJSON_New_Item>
 8002270:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d05f      	beq.n	8002338 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d104      	bne.n	8002288 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	e007      	b.n	8002298 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80022a2:	6838      	ldr	r0, [r7, #0]
 80022a4:	f7ff fd72 	bl	8001d8c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80022a8:	6839      	ldr	r1, [r7, #0]
 80022aa:	6938      	ldr	r0, [r7, #16]
 80022ac:	f7ff fea4 	bl	8001ff8 <parse_value>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d042      	beq.n	800233c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80022b6:	6838      	ldr	r0, [r7, #0]
 80022b8:	f7ff fd68 	bl	8001d8c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00d      	beq.n	80022de <parse_array+0x10e>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d207      	bcs.n	80022de <parse_array+0x10e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b2c      	cmp	r3, #44	; 0x2c
 80022dc:	d0c3      	beq.n	8002266 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d02d      	beq.n	8002340 <parse_array+0x170>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d227      	bcs.n	8002340 <parse_array+0x170>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4413      	add	r3, r2
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b5d      	cmp	r3, #93	; 0x5d
 80022fe:	d11f      	bne.n	8002340 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002300:	e000      	b.n	8002304 <parse_array+0x134>
        goto success;
 8002302:	bf00      	nop
    input_buffer->depth--;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <parse_array+0x14a>
        head->prev = current_item;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	609a      	str	r2, [r3, #8]

    return true;
 8002330:	2301      	movs	r3, #1
 8002332:	e00d      	b.n	8002350 <parse_array+0x180>
        goto fail;
 8002334:	bf00      	nop
 8002336:	e004      	b.n	8002342 <parse_array+0x172>
            goto fail; /* allocation failure */
 8002338:	bf00      	nop
 800233a:	e002      	b.n	8002342 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800233c:	bf00      	nop
 800233e:	e000      	b.n	8002342 <parse_array+0x172>

fail:
 8002340:	bf00      	nop
    if (head != NULL)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002348:	6978      	ldr	r0, [r7, #20]
 800234a:	f7ff f8a9 	bl	80014a0 <cJSON_Delete>
    }

    return false;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002372:	d301      	bcc.n	8002378 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002374:	2300      	movs	r3, #0
 8002376:	e0e6      	b.n	8002546 <parse_object+0x1ee>
    }
    input_buffer->depth++;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80d0 	beq.w	800252a <parse_object+0x1d2>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	f080 80c9 	bcs.w	800252a <parse_object+0x1d2>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4413      	add	r3, r2
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b7b      	cmp	r3, #123	; 0x7b
 80023a6:	f040 80c0 	bne.w	800252a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80023b4:	6838      	ldr	r0, [r7, #0]
 80023b6:	f7ff fce9 	bl	8001d8c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00e      	beq.n	80023de <parse_object+0x86>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d208      	bcs.n	80023de <parse_object+0x86>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b7d      	cmp	r3, #125	; 0x7d
 80023da:	f000 808d 	beq.w	80024f8 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <parse_object+0x98>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d305      	bcc.n	80023fc <parse_object+0xa4>
    {
        input_buffer->offset--;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	1e5a      	subs	r2, r3, #1
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	609a      	str	r2, [r3, #8]
        goto fail;
 80023fa:	e09d      	b.n	8002538 <parse_object+0x1e0>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	1e5a      	subs	r2, r3, #1
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	3310      	adds	r3, #16
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff f832 	bl	8001474 <cJSON_New_Item>
 8002410:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 808a 	beq.w	800252e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	e007      	b.n	800243a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002444:	6838      	ldr	r0, [r7, #0]
 8002446:	f7ff fca1 	bl	8001d8c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	6938      	ldr	r0, [r7, #16]
 800244e:	f7ff faed 	bl	8001a2c <parse_string>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d06c      	beq.n	8002532 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002458:	6838      	ldr	r0, [r7, #0]
 800245a:	f7ff fc97 	bl	8001d8c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d05b      	beq.n	800252a <parse_object+0x1d2>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d255      	bcs.n	800252a <parse_object+0x1d2>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b3a      	cmp	r3, #58	; 0x3a
 800248c:	d14d      	bne.n	800252a <parse_object+0x1d2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002498:	6838      	ldr	r0, [r7, #0]
 800249a:	f7ff fc77 	bl	8001d8c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	6938      	ldr	r0, [r7, #16]
 80024a2:	f7ff fda9 	bl	8001ff8 <parse_value>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d044      	beq.n	8002536 <parse_object+0x1de>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80024ac:	6838      	ldr	r0, [r7, #0]
 80024ae:	f7ff fc6d 	bl	8001d8c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00d      	beq.n	80024d4 <parse_object+0x17c>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <parse_object+0x17c>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b2c      	cmp	r3, #44	; 0x2c
 80024d2:	d098      	beq.n	8002406 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d027      	beq.n	800252a <parse_object+0x1d2>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d221      	bcs.n	800252a <parse_object+0x1d2>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b7d      	cmp	r3, #125	; 0x7d
 80024f4:	d119      	bne.n	800252a <parse_object+0x1d2>
    {
        goto fail; /* expected end of object */
    }

success:
 80024f6:	e000      	b.n	80024fa <parse_object+0x1a2>
        goto success; /* empty object */
 80024f8:	bf00      	nop
    input_buffer->depth--;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	1e5a      	subs	r2, r3, #1
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <parse_object+0x1b8>
        head->prev = current_item;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	609a      	str	r2, [r3, #8]
    return true;
 8002526:	2301      	movs	r3, #1
 8002528:	e00d      	b.n	8002546 <parse_object+0x1ee>

fail:
 800252a:	bf00      	nop
 800252c:	e004      	b.n	8002538 <parse_object+0x1e0>
            goto fail; /* allocation failure */
 800252e:	bf00      	nop
 8002530:	e002      	b.n	8002538 <parse_object+0x1e0>
            goto fail; /* failed to parse name */
 8002532:	bf00      	nop
 8002534:	e000      	b.n	8002538 <parse_object+0x1e0>
            goto fail; /* failed to parse value */
 8002536:	bf00      	nop
    if (head != NULL)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <parse_object+0x1ec>
    {
        cJSON_Delete(head);
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7fe ffae 	bl	80014a0 <cJSON_Delete>
    }

    return false;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <get_object_item+0x1c>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <get_object_item+0x20>
    {
        return NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	e033      	b.n	80025d6 <get_object_item+0x88>
    }

    current_element = object->child;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d017      	beq.n	80025aa <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800257a:	e002      	b.n	8002582 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01c      	beq.n	80025c2 <get_object_item+0x74>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d018      	beq.n	80025c2 <get_object_item+0x74>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4619      	mov	r1, r3
 8002596:	68b8      	ldr	r0, [r7, #8]
 8002598:	f7fd fe42 	bl	8000220 <strcmp>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ec      	bne.n	800257c <get_object_item+0x2e>
 80025a2:	e00e      	b.n	80025c2 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <get_object_item+0x74>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4619      	mov	r1, r3
 80025b6:	68b8      	ldr	r0, [r7, #8]
 80025b8:	f7fe feec 	bl	8001394 <case_insensitive_strcmp>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <get_object_item+0x82>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <get_object_item+0x86>
        return NULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <get_object_item+0x88>
    }

    return current_element;
 80025d4:	697b      	ldr	r3, [r7, #20]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80025e8:	2201      	movs	r2, #1
 80025ea:	6839      	ldr	r1, [r7, #0]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ffae 	bl	800254e <get_object_item>
 80025f2:	4603      	mov	r3, r0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <cJSON_IsString+0x12>
    {
        return false;
 800260a:	2300      	movs	r3, #0
 800260c:	e007      	b.n	800261e <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b10      	cmp	r3, #16
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a2f      	ldr	r2, [pc, #188]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800265a:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <MX_GPIO_Init+0xd8>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002660:	f043 0320 	orr.w	r3, r3, #32
 8002664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002666:	4b27      	ldr	r3, [pc, #156]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	4a23      	ldr	r2, [pc, #140]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <MX_GPIO_Init+0xd8>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <MX_GPIO_Init+0xd8>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80026a2:	2200      	movs	r2, #0
 80026a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ac:	f004 f8b4 	bl	8006818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026be:	2302      	movs	r3, #2
 80026c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026cc:	f003 ff22 	bl	8006514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80026d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <MX_GPIO_Init+0xdc>)
 80026d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4809      	ldr	r0, [pc, #36]	; (800270c <MX_GPIO_Init+0xe0>)
 80026e6:	f003 ff15 	bl	8006514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	210f      	movs	r1, #15
 80026ee:	2028      	movs	r0, #40	; 0x28
 80026f0:	f003 fe75 	bl	80063de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026f4:	2028      	movs	r0, #40	; 0x28
 80026f6:	f003 fe8c 	bl	8006412 <HAL_NVIC_EnableIRQ>

}
 80026fa:	bf00      	nop
 80026fc:	3728      	adds	r7, #40	; 0x28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	10110000 	.word	0x10110000
 800270c:	48000800 	.word	0x48000800

08002710 <start_up>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


void start_up(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0

	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 8002714:	217f      	movs	r1, #127	; 0x7f
 8002716:	4862      	ldr	r0, [pc, #392]	; (80028a0 <start_up+0x190>)
 8002718:	f002 feec 	bl	80054f4 <HAL_ADCEx_Calibration_Start>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <start_up+0x24>
 8002722:	217f      	movs	r1, #127	; 0x7f
 8002724:	485f      	ldr	r0, [pc, #380]	; (80028a4 <start_up+0x194>)
 8002726:	f002 fee5 	bl	80054f4 <HAL_ADCEx_Calibration_Start>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <start_up+0x24>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <start_up+0x26>
 8002734:	2300      	movs	r3, #0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 80b0 	bne.w	800289c <start_up+0x18c>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)))
 800273c:	4a5a      	ldr	r2, [pc, #360]	; (80028a8 <start_up+0x198>)
 800273e:	495b      	ldr	r1, [pc, #364]	; (80028ac <start_up+0x19c>)
 8002740:	485b      	ldr	r0, [pc, #364]	; (80028b0 <start_up+0x1a0>)
 8002742:	f004 f99a 	bl	8006a7a <HAL_OPAMPEx_SelfCalibrateAll>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 80a7 	bne.w	800289c <start_up+0x18c>
		{

			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 800274e:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <start_up+0x1a4>)
 8002750:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 8002756:	4b57      	ldr	r3, [pc, #348]	; (80028b4 <start_up+0x1a4>)
 8002758:	2207      	movs	r2, #7
 800275a:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR1=(TIM1->ARR/10);
 800275c:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <start_up+0x1a4>)
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	4a54      	ldr	r2, [pc, #336]	; (80028b4 <start_up+0x1a4>)
 8002762:	4955      	ldr	r1, [pc, #340]	; (80028b8 <start_up+0x1a8>)
 8002764:	fba1 1303 	umull	r1, r3, r1, r3
 8002768:	08db      	lsrs	r3, r3, #3
 800276a:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=0;
 800276c:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <start_up+0x1a4>)
 800276e:	2200      	movs	r2, #0
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8002772:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <start_up+0x1a4>)
 8002774:	2200      	movs	r2, #0
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4=TIM1_CCR4;
 8002778:	4b4e      	ldr	r3, [pc, #312]	; (80028b4 <start_up+0x1a4>)
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	4a4d      	ldr	r2, [pc, #308]	; (80028b4 <start_up+0x1a4>)
 800277e:	3b0a      	subs	r3, #10
 8002780:	6413      	str	r3, [r2, #64]	; 0x40

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002782:	2100      	movs	r1, #0
 8002784:	484d      	ldr	r0, [pc, #308]	; (80028bc <start_up+0x1ac>)
 8002786:	f005 fced 	bl	8008164 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800278a:	2100      	movs	r1, #0
 800278c:	484b      	ldr	r0, [pc, #300]	; (80028bc <start_up+0x1ac>)
 800278e:	f007 f983 	bl	8009a98 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002792:	2104      	movs	r1, #4
 8002794:	4849      	ldr	r0, [pc, #292]	; (80028bc <start_up+0x1ac>)
 8002796:	f005 fce5 	bl	8008164 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800279a:	2104      	movs	r1, #4
 800279c:	4847      	ldr	r0, [pc, #284]	; (80028bc <start_up+0x1ac>)
 800279e:	f007 f97b 	bl	8009a98 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80027a2:	2108      	movs	r1, #8
 80027a4:	4845      	ldr	r0, [pc, #276]	; (80028bc <start_up+0x1ac>)
 80027a6:	f005 fcdd 	bl	8008164 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80027aa:	2108      	movs	r1, #8
 80027ac:	4843      	ldr	r0, [pc, #268]	; (80028bc <start_up+0x1ac>)
 80027ae:	f007 f973 	bl	8009a98 <HAL_TIMEx_PWMN_Start>
			//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);


			HAL_Delay(800);
 80027b2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80027b6:	f001 ff5b 	bl	8004670 <HAL_Delay>

			//////// konfiguracja Timer 4 - encoder ///////////////////
			TIM4->ARR= TIM4_ARR;
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <start_up+0x1b0>)
 80027bc:	f240 1267 	movw	r2, #359	; 0x167
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC= TIM4_PSC;
 80027c2:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <start_up+0x1b0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80027c8:	2100      	movs	r1, #0
 80027ca:	483e      	ldr	r0, [pc, #248]	; (80028c4 <start_up+0x1b4>)
 80027cc:	f005 fffc 	bl	80087c8 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80027d0:	2104      	movs	r1, #4
 80027d2:	483c      	ldr	r0, [pc, #240]	; (80028c4 <start_up+0x1b4>)
 80027d4:	f005 fff8 	bl	80087c8 <HAL_TIM_Encoder_Start>
			//////// konfiguracja Timer 4 - encoder ///////////////////

			HAL_Delay(400);
 80027d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80027dc:	f001 ff48 	bl	8004670 <HAL_Delay>

			TIM1->CCR1=0;
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <start_up+0x1a4>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <start_up+0x1a4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 80027ec:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <start_up+0x1a4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	63da      	str	r2, [r3, #60]	; 0x3c

			HAL_Delay(200);
 80027f2:	20c8      	movs	r0, #200	; 0xc8
 80027f4:	f001 ff3c 	bl	8004670 <HAL_Delay>


			//////// konfiguracja Timer 8  ///////////////////
			TIM8->ARR= TIM8_ARR;
 80027f8:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <start_up+0x1b8>)
 80027fa:	f64f 72db 	movw	r2, #65499	; 0xffdb
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM8->PSC= TIM8_PSC;
 8002800:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <start_up+0x1b8>)
 8002802:	2209      	movs	r2, #9
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8002806:	2104      	movs	r1, #4
 8002808:	4830      	ldr	r0, [pc, #192]	; (80028cc <start_up+0x1bc>)
 800280a:	f005 fe75 	bl	80084f8 <HAL_TIM_IC_Start>


			//////// start ADC 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 800280e:	4828      	ldr	r0, [pc, #160]	; (80028b0 <start_up+0x1a0>)
 8002810:	f004 f902 	bl	8006a18 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 8002814:	4825      	ldr	r0, [pc, #148]	; (80028ac <start_up+0x19c>)
 8002816:	f004 f8ff 	bl	8006a18 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp3);
 800281a:	4823      	ldr	r0, [pc, #140]	; (80028a8 <start_up+0x198>)
 800281c:	f004 f8fc 	bl	8006a18 <HAL_OPAMP_Start>
			//////// start ADC 1 2 ///////////////////////////////////
			HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002820:	481f      	ldr	r0, [pc, #124]	; (80028a0 <start_up+0x190>)
 8002822:	f002 fec9 	bl	80055b8 <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8002826:	481f      	ldr	r0, [pc, #124]	; (80028a4 <start_up+0x194>)
 8002828:	f002 fec6 	bl	80055b8 <HAL_ADCEx_InjectedStart_IT>


			/////////// inicjalizacja pid_d ////////////////
			set_d=0;
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <start_up+0x1c0>)
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
			pid_d.Kp=1;
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <start_up+0x1c4>)
 8002836:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800283a:	619a      	str	r2, [r3, #24]
			pid_d.Ki=1;
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <start_up+0x1c4>)
 800283e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002842:	61da      	str	r2, [r3, #28]
			pid_d.Kd=0;
 8002844:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <start_up+0x1c4>)
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_d, 1);
 800284c:	2101      	movs	r1, #1
 800284e:	4821      	ldr	r0, [pc, #132]	; (80028d4 <start_up+0x1c4>)
 8002850:	f009 fc1a 	bl	800c088 <arm_pid_init_f32>

			/////////// inicjalizacja pid_q ////////////////
			set_q=0.7;
 8002854:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <start_up+0x1c8>)
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <start_up+0x1cc>)
 8002858:	601a      	str	r2, [r3, #0]
			pid_q.Kp=4;
 800285a:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <start_up+0x1d0>)
 800285c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002860:	619a      	str	r2, [r3, #24]
			pid_q.Ki=1;
 8002862:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <start_up+0x1d0>)
 8002864:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002868:	61da      	str	r2, [r3, #28]
			pid_q.Kd=0;
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <start_up+0x1d0>)
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_q, 1);
 8002872:	2101      	movs	r1, #1
 8002874:	481a      	ldr	r0, [pc, #104]	; (80028e0 <start_up+0x1d0>)
 8002876:	f009 fc07 	bl	800c088 <arm_pid_init_f32>

			/////////// inicjalizacja pid_speed ////////////////
			set_speed=2200;
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <start_up+0x1d4>)
 800287c:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <start_up+0x1d8>)
 800287e:	601a      	str	r2, [r3, #0]
			pid_iq_speed.Kp=5;
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <start_up+0x1dc>)
 8002882:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <start_up+0x1e0>)
 8002884:	619a      	str	r2, [r3, #24]
			pid_iq_speed.Ki=5;
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <start_up+0x1dc>)
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <start_up+0x1e0>)
 800288a:	61da      	str	r2, [r3, #28]
			pid_iq_speed.Kd=0;
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <start_up+0x1dc>)
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_iq_speed, 1);
 8002894:	2101      	movs	r1, #1
 8002896:	4815      	ldr	r0, [pc, #84]	; (80028ec <start_up+0x1dc>)
 8002898:	f009 fbf6 	bl	800c088 <arm_pid_init_f32>
		}


	   }

}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000290 	.word	0x20000290
 80028a4:	20000224 	.word	0x20000224
 80028a8:	200005e0 	.word	0x200005e0
 80028ac:	200005a4 	.word	0x200005a4
 80028b0:	2000061c 	.word	0x2000061c
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	cccccccd 	.word	0xcccccccd
 80028bc:	200006f0 	.word	0x200006f0
 80028c0:	40000800 	.word	0x40000800
 80028c4:	200006a4 	.word	0x200006a4
 80028c8:	40013400 	.word	0x40013400
 80028cc:	20000658 	.word	0x20000658
 80028d0:	2000033c 	.word	0x2000033c
 80028d4:	20000340 	.word	0x20000340
 80028d8:	20000578 	.word	0x20000578
 80028dc:	3f333333 	.word	0x3f333333
 80028e0:	200003f8 	.word	0x200003f8
 80028e4:	2000057c 	.word	0x2000057c
 80028e8:	45098000 	.word	0x45098000
 80028ec:	20000394 	.word	0x20000394
 80028f0:	40a00000 	.word	0x40a00000

080028f4 <start1>:

void start1(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0


			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80028f8:	2100      	movs	r1, #0
 80028fa:	480e      	ldr	r0, [pc, #56]	; (8002934 <start1+0x40>)
 80028fc:	f005 fc32 	bl	8008164 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002900:	2100      	movs	r1, #0
 8002902:	480c      	ldr	r0, [pc, #48]	; (8002934 <start1+0x40>)
 8002904:	f007 f8c8 	bl	8009a98 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002908:	2104      	movs	r1, #4
 800290a:	480a      	ldr	r0, [pc, #40]	; (8002934 <start1+0x40>)
 800290c:	f005 fc2a 	bl	8008164 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002910:	2104      	movs	r1, #4
 8002912:	4808      	ldr	r0, [pc, #32]	; (8002934 <start1+0x40>)
 8002914:	f007 f8c0 	bl	8009a98 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002918:	2108      	movs	r1, #8
 800291a:	4806      	ldr	r0, [pc, #24]	; (8002934 <start1+0x40>)
 800291c:	f005 fc22 	bl	8008164 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002920:	2108      	movs	r1, #8
 8002922:	4804      	ldr	r0, [pc, #16]	; (8002934 <start1+0x40>)
 8002924:	f007 f8b8 	bl	8009a98 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002928:	210c      	movs	r1, #12
 800292a:	4802      	ldr	r0, [pc, #8]	; (8002934 <start1+0x40>)
 800292c:	f005 fc1a 	bl	8008164 <HAL_TIM_PWM_Start>

}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200006f0 	.word	0x200006f0

08002938 <stop>:




void stop(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0

	TIM1->CCR1=0;
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <stop+0x64>)
 800293e:	2200      	movs	r2, #0
 8002940:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=0;
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <stop+0x64>)
 8002944:	2200      	movs	r2, #0
 8002946:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=0;
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <stop+0x64>)
 800294a:	2200      	movs	r2, #0
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800294e:	2100      	movs	r1, #0
 8002950:	4813      	ldr	r0, [pc, #76]	; (80029a0 <stop+0x68>)
 8002952:	f005 fcd9 	bl	8008308 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002956:	2100      	movs	r1, #0
 8002958:	4811      	ldr	r0, [pc, #68]	; (80029a0 <stop+0x68>)
 800295a:	f007 f91d 	bl	8009b98 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800295e:	2104      	movs	r1, #4
 8002960:	480f      	ldr	r0, [pc, #60]	; (80029a0 <stop+0x68>)
 8002962:	f005 fcd1 	bl	8008308 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002966:	2104      	movs	r1, #4
 8002968:	480d      	ldr	r0, [pc, #52]	; (80029a0 <stop+0x68>)
 800296a:	f007 f915 	bl	8009b98 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800296e:	2108      	movs	r1, #8
 8002970:	480b      	ldr	r0, [pc, #44]	; (80029a0 <stop+0x68>)
 8002972:	f005 fcc9 	bl	8008308 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8002976:	2108      	movs	r1, #8
 8002978:	4809      	ldr	r0, [pc, #36]	; (80029a0 <stop+0x68>)
 800297a:	f007 f90d 	bl	8009b98 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 800297e:	210c      	movs	r1, #12
 8002980:	4807      	ldr	r0, [pc, #28]	; (80029a0 <stop+0x68>)
 8002982:	f005 fcc1 	bl	8008308 <HAL_TIM_PWM_Stop>


	arm_pid_reset_f32(&pid_d);
 8002986:	4807      	ldr	r0, [pc, #28]	; (80029a4 <stop+0x6c>)
 8002988:	f009 fbb4 	bl	800c0f4 <arm_pid_reset_f32>
	arm_pid_reset_f32(&pid_q);
 800298c:	4806      	ldr	r0, [pc, #24]	; (80029a8 <stop+0x70>)
 800298e:	f009 fbb1 	bl	800c0f4 <arm_pid_reset_f32>
	arm_pid_reset_f32(&pid_iq_speed);
 8002992:	4806      	ldr	r0, [pc, #24]	; (80029ac <stop+0x74>)
 8002994:	f009 fbae 	bl	800c0f4 <arm_pid_reset_f32>


}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	200006f0 	.word	0x200006f0
 80029a4:	20000340 	.word	0x20000340
 80029a8:	200003f8 	.word	0x200003f8
 80029ac:	20000394 	.word	0x20000394

080029b0 <AlphaBeta_To_Angle_Vref>:

void AlphaBeta_To_Angle_Vref(float32_t alpha,float32_t beta,float32_t *angle_current_rad,float32_t *Vref)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80029ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	*angle_current_rad = atan2f(beta,alpha);
 80029c2:	edd7 0a03 	vldr	s1, [r7, #12]
 80029c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80029ca:	f00d ff86 	bl	80108da <atan2f>
 80029ce:	eef0 7a40 	vmov.f32	s15, s0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32( ((alpha*alpha)+(beta*beta)), Vref);
 80029d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80029dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e4:	edd7 6a02 	vldr	s13, [r7, #8]
 80029e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	edc7 7a05 	vstr	s15, [r7, #20]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80029fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a08:	db09      	blt.n	8002a1e <AlphaBeta_To_Angle_Vref+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002a0a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a0e:	f00d ff67 	bl	80108e0 <sqrtf>
 8002a12:	eef0 7a40 	vmov.f32	s15, s0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	edc3 7a00 	vstr	s15, [r3]
 8002a1c:	e003      	b.n	8002a26 <AlphaBeta_To_Angle_Vref+0x76>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

	 if(*Vref>=sv_Vdc_limit)  // saturacja Vref
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fdc4 	bl	80005b8 <__aeabi_f2d>
 8002a30:	a308      	add	r3, pc, #32	; (adr r3, 8002a54 <AlphaBeta_To_Angle_Vref+0xa4>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f7fe f89d 	bl	8000b74 <__aeabi_dcmpge>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d100      	bne.n	8002a42 <AlphaBeta_To_Angle_Vref+0x92>
	    	*Vref=sv_Vdc_limit;
}
 8002a40:	e002      	b.n	8002a48 <AlphaBeta_To_Angle_Vref+0x98>
	    	*Vref=sv_Vdc_limit;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	4a02      	ldr	r2, [pc, #8]	; (8002a50 <AlphaBeta_To_Angle_Vref+0xa0>)
 8002a46:	601a      	str	r2, [r3, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	415db3d0 	.word	0x415db3d0
 8002a54:	0f9096bc 	.word	0x0f9096bc
 8002a58:	402bb67a 	.word	0x402bb67a
 8002a5c:	00000000 	.word	0x00000000

08002a60 <Angle_To_Sector>:


void Angle_To_Sector(float32_t angle_current_rad,uint8_t *sector)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a6a:	6038      	str	r0, [r7, #0]

	if((angle_current_rad>0) && (angle_current_rad<=1.047197)) // pi/3
 8002a6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a78:	dd0e      	ble.n	8002a98 <Angle_To_Sector+0x38>
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd fd9c 	bl	80005b8 <__aeabi_f2d>
 8002a80:	a347      	add	r3, pc, #284	; (adr r3, 8002ba0 <Angle_To_Sector+0x140>)
 8002a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a86:	f7fe f86b 	bl	8000b60 <__aeabi_dcmple>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <Angle_To_Sector+0x38>
		*sector=1;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e07f      	b.n	8002b98 <Angle_To_Sector+0x138>
	else if((angle_current_rad>1.047197) && (angle_current_rad<=2.094395)) //2/3*pi
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7fd fd8d 	bl	80005b8 <__aeabi_f2d>
 8002a9e:	a340      	add	r3, pc, #256	; (adr r3, 8002ba0 <Angle_To_Sector+0x140>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f7fe f870 	bl	8000b88 <__aeabi_dcmpgt>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <Angle_To_Sector+0x6c>
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fd fd82 	bl	80005b8 <__aeabi_f2d>
 8002ab4:	a33c      	add	r3, pc, #240	; (adr r3, 8002ba8 <Angle_To_Sector+0x148>)
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fe f851 	bl	8000b60 <__aeabi_dcmple>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <Angle_To_Sector+0x6c>
		*sector=2;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e065      	b.n	8002b98 <Angle_To_Sector+0x138>
	else if((angle_current_rad>2.094395) && (angle_current_rad<=3.141593))
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7fd fd73 	bl	80005b8 <__aeabi_f2d>
 8002ad2:	a335      	add	r3, pc, #212	; (adr r3, 8002ba8 <Angle_To_Sector+0x148>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fe f856 	bl	8000b88 <__aeabi_dcmpgt>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00e      	beq.n	8002b00 <Angle_To_Sector+0xa0>
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fd fd68 	bl	80005b8 <__aeabi_f2d>
 8002ae8:	a331      	add	r3, pc, #196	; (adr r3, 8002bb0 <Angle_To_Sector+0x150>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fe f837 	bl	8000b60 <__aeabi_dcmple>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <Angle_To_Sector+0xa0>
		*sector=3;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2203      	movs	r2, #3
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e04b      	b.n	8002b98 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-3.141593) && (angle_current_rad<=-2.094395))
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7fd fd59 	bl	80005b8 <__aeabi_f2d>
 8002b06:	a32c      	add	r3, pc, #176	; (adr r3, 8002bb8 <Angle_To_Sector+0x158>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fe f83c 	bl	8000b88 <__aeabi_dcmpgt>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00e      	beq.n	8002b34 <Angle_To_Sector+0xd4>
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd fd4e 	bl	80005b8 <__aeabi_f2d>
 8002b1c:	a328      	add	r3, pc, #160	; (adr r3, 8002bc0 <Angle_To_Sector+0x160>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fe f81d 	bl	8000b60 <__aeabi_dcmple>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <Angle_To_Sector+0xd4>
		*sector=4;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e031      	b.n	8002b98 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-2.094395) && (angle_current_rad<=-1.047197))
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fd fd3f 	bl	80005b8 <__aeabi_f2d>
 8002b3a:	a321      	add	r3, pc, #132	; (adr r3, 8002bc0 <Angle_To_Sector+0x160>)
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	f7fe f822 	bl	8000b88 <__aeabi_dcmpgt>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <Angle_To_Sector+0x108>
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fd fd34 	bl	80005b8 <__aeabi_f2d>
 8002b50:	a31d      	add	r3, pc, #116	; (adr r3, 8002bc8 <Angle_To_Sector+0x168>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fe f803 	bl	8000b60 <__aeabi_dcmple>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <Angle_To_Sector+0x108>
		*sector=5;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2205      	movs	r2, #5
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e017      	b.n	8002b98 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7fd fd25 	bl	80005b8 <__aeabi_f2d>
 8002b6e:	a316      	add	r3, pc, #88	; (adr r3, 8002bc8 <Angle_To_Sector+0x168>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fe f808 	bl	8000b88 <__aeabi_dcmpgt>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d100      	bne.n	8002b80 <Angle_To_Sector+0x120>
		*sector=6;
	else{}

}
 8002b7e:	e00b      	b.n	8002b98 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8002b80:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	d900      	bls.n	8002b90 <Angle_To_Sector+0x130>
}
 8002b8e:	e003      	b.n	8002b98 <Angle_To_Sector+0x138>
		*sector=6;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2206      	movs	r2, #6
 8002b94:	701a      	strb	r2, [r3, #0]
}
 8002b96:	e7ff      	b.n	8002b98 <Angle_To_Sector+0x138>
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	a437824d 	.word	0xa437824d
 8002ba4:	3ff0c151 	.word	0x3ff0c151
 8002ba8:	2a6f3f53 	.word	0x2a6f3f53
 8002bac:	4000c152 	.word	0x4000c152
 8002bb0:	82c2bd7f 	.word	0x82c2bd7f
 8002bb4:	400921fb 	.word	0x400921fb
 8002bb8:	82c2bd7f 	.word	0x82c2bd7f
 8002bbc:	c00921fb 	.word	0xc00921fb
 8002bc0:	2a6f3f53 	.word	0x2a6f3f53
 8002bc4:	c000c152 	.word	0xc000c152
 8002bc8:	a437824d 	.word	0xa437824d
 8002bcc:	bff0c151 	.word	0xbff0c151

08002bd0 <SVPWM>:


void SVPWM(uint8_t sector,float32_t angle_current_rad,float32_t Vref, float32_t T[], float32_t T_gate[], float32_t *S1,float32_t *S2,float32_t *S3)
{
 8002bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	ed87 0a04 	vstr	s0, [r7, #16]
 8002bdc:	edc7 0a03 	vstr	s1, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4603      	mov	r3, r0
 8002be8:	75fb      	strb	r3, [r7, #23]

	T[1]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((sector * 1.047197) - (angle_current_rad)); /// pi/3 = 1,0472
 8002bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bee:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002ec8 <SVPWM+0x2f8>
 8002bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf6:	ee17 0a90 	vmov	r0, s15
 8002bfa:	f7fd fcdd 	bl	80005b8 <__aeabi_f2d>
 8002bfe:	a3ac      	add	r3, pc, #688	; (adr r3, 8002eb0 <SVPWM+0x2e0>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fe5a 	bl	80008bc <__aeabi_ddiv>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	4621      	mov	r1, r4
 8002c10:	a3a9      	add	r3, pc, #676	; (adr r3, 8002eb8 <SVPWM+0x2e8>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fd27 	bl	8000668 <__aeabi_dmul>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	4625      	mov	r5, r4
 8002c20:	461c      	mov	r4, r3
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fcb5 	bl	8000594 <__aeabi_i2d>
 8002c2a:	a3a5      	add	r3, pc, #660	; (adr r3, 8002ec0 <SVPWM+0x2f0>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fd1a 	bl	8000668 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4690      	mov	r8, r2
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	6938      	ldr	r0, [r7, #16]
 8002c3e:	f7fd fcbb 	bl	80005b8 <__aeabi_f2d>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4640      	mov	r0, r8
 8002c48:	4649      	mov	r1, r9
 8002c4a:	f7fd fb55 	bl	80002f8 <__aeabi_dsub>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd ffff 	bl	8000c58 <__aeabi_d2f>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	ee00 3a10 	vmov	s0, r3
 8002c60:	f009 fbd2 	bl	800c408 <arm_sin_f32>
 8002c64:	ee10 3a10 	vmov	r3, s0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fca5 	bl	80005b8 <__aeabi_f2d>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4620      	mov	r0, r4
 8002c74:	4629      	mov	r1, r5
 8002c76:	f7fd fcf7 	bl	8000668 <__aeabi_dmul>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4622      	mov	r2, r4
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1d1c      	adds	r4, r3, #4
 8002c86:	4608      	mov	r0, r1
 8002c88:	4611      	mov	r1, r2
 8002c8a:	f7fd ffe5 	bl	8000c58 <__aeabi_d2f>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6023      	str	r3, [r4, #0]
	T[2]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((-(sector-1) * 1.047197) +  angle_current_rad) ;
 8002c92:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c96:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002ec8 <SVPWM+0x2f8>
 8002c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9e:	ee17 0a90 	vmov	r0, s15
 8002ca2:	f7fd fc89 	bl	80005b8 <__aeabi_f2d>
 8002ca6:	a382      	add	r3, pc, #520	; (adr r3, 8002eb0 <SVPWM+0x2e0>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fe06 	bl	80008bc <__aeabi_ddiv>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	a37f      	add	r3, pc, #508	; (adr r3, 8002eb8 <SVPWM+0x2e8>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f7fd fcd3 	bl	8000668 <__aeabi_dmul>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	4625      	mov	r5, r4
 8002cc8:	461c      	mov	r4, r3
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	f1c3 0301 	rsb	r3, r3, #1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc5f 	bl	8000594 <__aeabi_i2d>
 8002cd6:	a37a      	add	r3, pc, #488	; (adr r3, 8002ec0 <SVPWM+0x2f0>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fcc4 	bl	8000668 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4690      	mov	r8, r2
 8002ce6:	4699      	mov	r9, r3
 8002ce8:	6938      	ldr	r0, [r7, #16]
 8002cea:	f7fd fc65 	bl	80005b8 <__aeabi_f2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	f7fd fb01 	bl	80002fc <__adddf3>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd ffa9 	bl	8000c58 <__aeabi_d2f>
 8002d06:	4603      	mov	r3, r0
 8002d08:	ee00 3a10 	vmov	s0, r3
 8002d0c:	f009 fb7c 	bl	800c408 <arm_sin_f32>
 8002d10:	ee10 3a10 	vmov	r3, s0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fc4f 	bl	80005b8 <__aeabi_f2d>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f7fd fca1 	bl	8000668 <__aeabi_dmul>
 8002d26:	4603      	mov	r3, r0
 8002d28:	460c      	mov	r4, r1
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f103 0408 	add.w	r4, r3, #8
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	f7fd ff8e 	bl	8000c58 <__aeabi_d2f>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	6023      	str	r3, [r4, #0]
	T[0]=sv_Tz-T[1]-T[2];
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3304      	adds	r3, #4
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002ec8 <SVPWM+0x2f8>
 8002d4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	3308      	adds	r3, #8
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	edc3 7a00 	vstr	s15, [r3]

	t1=T[1];
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a59      	ldr	r2, [pc, #356]	; (8002ecc <SVPWM+0x2fc>)
 8002d68:	6013      	str	r3, [r2, #0]
	t2=T[2];
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <SVPWM+0x300>)
 8002d70:	6013      	str	r3, [r2, #0]
	t3=T[0];
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <SVPWM+0x304>)
 8002d78:	6013      	str	r3, [r2, #0]

	T_gate[0]= (T[0]/2);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	ed93 7a00 	vldr	s14, [r3]
 8002d80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	edc3 7a00 	vstr	s15, [r3]
	T_gate[1]= T[1]+(T_gate[0]);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3304      	adds	r3, #4
 8002d92:	ed93 7a00 	vldr	s14, [r3]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da4:	edc3 7a00 	vstr	s15, [r3]
	T_gate[2]= T[2]+(T_gate[0]);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	3308      	adds	r3, #8
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3308      	adds	r3, #8
 8002dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbe:	edc3 7a00 	vstr	s15, [r3]
	T_gate[3]= T[1]+T[2]+(T_gate[0]);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	ed93 7a00 	vldr	s14, [r3]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	330c      	adds	r3, #12
 8002de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de4:	edc3 7a00 	vstr	s15, [r3]


	if(sector == 1)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10c      	bne.n	8002e08 <SVPWM+0x238>
	{
		*S1=T_gate[3];
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	601a      	str	r2, [r3, #0]
		*S2=T_gate[2];
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
		*S3=T_gate[1];
	}
	else{}

}
 8002e06:	e04e      	b.n	8002ea6 <SVPWM+0x2d6>
	else if(sector == 2)
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d10c      	bne.n	8002e28 <SVPWM+0x258>
		*S1=T_gate[1];
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	601a      	str	r2, [r3, #0]
}
 8002e26:	e03e      	b.n	8002ea6 <SVPWM+0x2d6>
	else if(sector == 3)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d10c      	bne.n	8002e48 <SVPWM+0x278>
		*S1=T_gate[0];
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[2];
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	e02e      	b.n	8002ea6 <SVPWM+0x2d6>
	else if(sector == 4)
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d10c      	bne.n	8002e68 <SVPWM+0x298>
		*S1=T_gate[0];
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	601a      	str	r2, [r3, #0]
		*S2=T_gate[1];
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e64:	601a      	str	r2, [r3, #0]
}
 8002e66:	e01e      	b.n	8002ea6 <SVPWM+0x2d6>
	else if(sector == 5)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d10c      	bne.n	8002e88 <SVPWM+0x2b8>
		*S1=T_gate[2];
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	601a      	str	r2, [r3, #0]
}
 8002e86:	e00e      	b.n	8002ea6 <SVPWM+0x2d6>
	else if(sector == 6)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d10b      	bne.n	8002ea6 <SVPWM+0x2d6>
		*S1=T_gate[3];
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[1];
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea4:	601a      	str	r2, [r3, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002eb0:	0f9096bc 	.word	0x0f9096bc
 8002eb4:	402bb67a 	.word	0x402bb67a
 8002eb8:	33333333 	.word	0x33333333
 8002ebc:	3feb3333 	.word	0x3feb3333
 8002ec0:	a437824d 	.word	0xa437824d
 8002ec4:	3ff0c151 	.word	0x3ff0c151
 8002ec8:	447a0000 	.word	0x447a0000
 8002ecc:	20000430 	.word	0x20000430
 8002ed0:	20000380 	.word	0x20000380
 8002ed4:	20000304 	.word	0x20000304

08002ed8 <HAL_ADCEx_InjectedConvCpltCallback>:


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b09f      	sub	sp, #124	; 0x7c
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	6078      	str	r0, [r7, #4]


	capture_tim8_ccr2= TIM8->CCR2;
 8002ee0:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	4a47      	ldr	r2, [pc, #284]	; (8003004 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8002ee6:	6013      	str	r3, [r2, #0]
	if(capture_tim8_ccr2 <= 0)
 8002ee8:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d104      	bne.n	8002efa <HAL_ADCEx_InjectedConvCpltCallback+0x22>
		speed=0;
 8002ef0:	4b45      	ldr	r3, [pc, #276]	; (8003008 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e016      	b.n	8002f28 <HAL_ADCEx_InjectedConvCpltCallback+0x50>
	else
		speed=revolution_per_min/capture_tim8_ccr2;
 8002efa:	4b42      	ldr	r3, [pc, #264]	; (8003004 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb38 	bl	8000574 <__aeabi_ui2d>
 8002f04:	4603      	mov	r3, r0
 8002f06:	460c      	mov	r4, r1
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	a13a      	add	r1, pc, #232	; (adr r1, 8002ff8 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8002f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f12:	f7fd fcd3 	bl	80008bc <__aeabi_ddiv>
 8002f16:	4603      	mov	r3, r0
 8002f18:	460c      	mov	r4, r1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	f7fd fe9b 	bl	8000c58 <__aeabi_d2f>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8002f26:	601a      	str	r2, [r3, #0]


	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8002f28:	2109      	movs	r1, #9
 8002f2a:	4838      	ldr	r0, [pc, #224]	; (800300c <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8002f2c:	f002 fc2a 	bl	8005784 <HAL_ADCEx_InjectedGetValue>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8002f36:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8002f38:	bf00      	nop
 8002f3a:	4b34      	ldr	r3, [pc, #208]	; (800300c <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a32      	ldr	r2, [pc, #200]	; (800300c <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f5      	bne.n	8002f3a <HAL_ADCEx_InjectedConvCpltCallback+0x62>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8002f4e:	f240 110f 	movw	r1, #271	; 0x10f
 8002f52:	482e      	ldr	r0, [pc, #184]	; (800300c <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8002f54:	f002 fc16 	bl	8005784 <HAL_ADCEx_InjectedGetValue>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 8002f5e:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8002f60:	bf00      	nop
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a28      	ldr	r2, [pc, #160]	; (800300c <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f5      	bne.n	8002f62 <HAL_ADCEx_InjectedConvCpltCallback+0x8a>
	adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8002f76:	2109      	movs	r1, #9
 8002f78:	4827      	ldr	r0, [pc, #156]	; (8003018 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 8002f7a:	f002 fc03 	bl	8005784 <HAL_ADCEx_InjectedGetValue>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b26      	ldr	r3, [pc, #152]	; (800301c <HAL_ADCEx_InjectedConvCpltCallback+0x144>)
 8002f84:	601a      	str	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8002f86:	bf00      	nop
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a22      	ldr	r2, [pc, #136]	; (8003018 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f5      	bne.n	8002f88 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>
	//adc_V =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
	//while((hadc2.Instance->ISR &= (0x1<<5))!=0){}

	if(index_event_adc<300)
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002fa4:	d211      	bcs.n	8002fca <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
	{
		Ia=0;
 8002fa6:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <HAL_ADCEx_InjectedConvCpltCallback+0x14c>)
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
		Ib=0;
 8002fae:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <HAL_ADCEx_InjectedConvCpltCallback+0x150>)
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
		Ic=0;
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_ADCEx_InjectedConvCpltCallback+0x154>)
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
		index_event_adc++;
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4a16      	ldr	r2, [pc, #88]	; (8003020 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e2f3      	b.n	80035b2 <HAL_ADCEx_InjectedConvCpltCallback+0x6da>


	}
	else if(index_event_adc == 300)
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002fd2:	d133      	bne.n	800303c <HAL_ADCEx_InjectedConvCpltCallback+0x164>
	{
			   offset1=adc_Ia;
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a15      	ldr	r2, [pc, #84]	; (8003030 <HAL_ADCEx_InjectedConvCpltCallback+0x158>)
 8002fda:	6013      	str	r3, [r2, #0]
			   offset2=adc_Ib;
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_ADCEx_InjectedConvCpltCallback+0x144>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_ADCEx_InjectedConvCpltCallback+0x15c>)
 8002fe2:	6013      	str	r3, [r2, #0]
			   offset3=adc_Ic;
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a13      	ldr	r2, [pc, #76]	; (8003038 <HAL_ADCEx_InjectedConvCpltCallback+0x160>)
 8002fea:	6013      	str	r3, [r2, #0]
			   index_event_adc++;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e2dc      	b.n	80035b2 <HAL_ADCEx_InjectedConvCpltCallback+0x6da>
 8002ff8:	aaaaaaab 	.word	0xaaaaaaab
 8002ffc:	41359dda 	.word	0x41359dda
 8003000:	40013400 	.word	0x40013400
 8003004:	20000300 	.word	0x20000300
 8003008:	20000564 	.word	0x20000564
 800300c:	20000290 	.word	0x20000290
 8003010:	200003ec 	.word	0x200003ec
 8003014:	20000574 	.word	0x20000574
 8003018:	20000224 	.word	0x20000224
 800301c:	20000338 	.word	0x20000338
 8003020:	2000055c 	.word	0x2000055c
 8003024:	20000314 	.word	0x20000314
 8003028:	200003e8 	.word	0x200003e8
 800302c:	2000043c 	.word	0x2000043c
 8003030:	2000032c 	.word	0x2000032c
 8003034:	20000388 	.word	0x20000388
 8003038:	20000588 	.word	0x20000588
	}
	else
	{
	 //   sum_currents=(adc_Ia-offset1)+(adc_Ic-offset3)+(adc_Ib-offset2);

	    adc_Ia=(adc_Ia-offset1);
 800303c:	4baf      	ldr	r3, [pc, #700]	; (80032fc <HAL_ADCEx_InjectedConvCpltCallback+0x424>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4baf      	ldr	r3, [pc, #700]	; (8003300 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	4aad      	ldr	r2, [pc, #692]	; (80032fc <HAL_ADCEx_InjectedConvCpltCallback+0x424>)
 8003048:	6013      	str	r3, [r2, #0]
	    adc_Ib=(adc_Ib-offset2);
 800304a:	4bae      	ldr	r3, [pc, #696]	; (8003304 <HAL_ADCEx_InjectedConvCpltCallback+0x42c>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4bae      	ldr	r3, [pc, #696]	; (8003308 <HAL_ADCEx_InjectedConvCpltCallback+0x430>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	4aab      	ldr	r2, [pc, #684]	; (8003304 <HAL_ADCEx_InjectedConvCpltCallback+0x42c>)
 8003056:	6013      	str	r3, [r2, #0]
	    adc_Ic=(adc_Ic-offset3);
 8003058:	4bac      	ldr	r3, [pc, #688]	; (800330c <HAL_ADCEx_InjectedConvCpltCallback+0x434>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4bac      	ldr	r3, [pc, #688]	; (8003310 <HAL_ADCEx_InjectedConvCpltCallback+0x438>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	4aaa      	ldr	r2, [pc, #680]	; (800330c <HAL_ADCEx_InjectedConvCpltCallback+0x434>)
 8003064:	6013      	str	r3, [r2, #0]

	    Ia=-adc_Ia/33.0;
 8003066:	4ba5      	ldr	r3, [pc, #660]	; (80032fc <HAL_ADCEx_InjectedConvCpltCallback+0x424>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	425b      	negs	r3, r3
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fa91 	bl	8000594 <__aeabi_i2d>
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	4ba7      	ldr	r3, [pc, #668]	; (8003314 <HAL_ADCEx_InjectedConvCpltCallback+0x43c>)
 8003078:	f7fd fc20 	bl	80008bc <__aeabi_ddiv>
 800307c:	4603      	mov	r3, r0
 800307e:	460c      	mov	r4, r1
 8003080:	4618      	mov	r0, r3
 8003082:	4621      	mov	r1, r4
 8003084:	f7fd fde8 	bl	8000c58 <__aeabi_d2f>
 8003088:	4602      	mov	r2, r0
 800308a:	4ba3      	ldr	r3, [pc, #652]	; (8003318 <HAL_ADCEx_InjectedConvCpltCallback+0x440>)
 800308c:	601a      	str	r2, [r3, #0]
	    Ib=-adc_Ib/33.0;
 800308e:	4b9d      	ldr	r3, [pc, #628]	; (8003304 <HAL_ADCEx_InjectedConvCpltCallback+0x42c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	425b      	negs	r3, r3
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fa7d 	bl	8000594 <__aeabi_i2d>
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	4b9d      	ldr	r3, [pc, #628]	; (8003314 <HAL_ADCEx_InjectedConvCpltCallback+0x43c>)
 80030a0:	f7fd fc0c 	bl	80008bc <__aeabi_ddiv>
 80030a4:	4603      	mov	r3, r0
 80030a6:	460c      	mov	r4, r1
 80030a8:	4618      	mov	r0, r3
 80030aa:	4621      	mov	r1, r4
 80030ac:	f7fd fdd4 	bl	8000c58 <__aeabi_d2f>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b9a      	ldr	r3, [pc, #616]	; (800331c <HAL_ADCEx_InjectedConvCpltCallback+0x444>)
 80030b4:	601a      	str	r2, [r3, #0]
	    Ic=-adc_Ic/33.0;
 80030b6:	4b95      	ldr	r3, [pc, #596]	; (800330c <HAL_ADCEx_InjectedConvCpltCallback+0x434>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	425b      	negs	r3, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fa69 	bl	8000594 <__aeabi_i2d>
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	4b93      	ldr	r3, [pc, #588]	; (8003314 <HAL_ADCEx_InjectedConvCpltCallback+0x43c>)
 80030c8:	f7fd fbf8 	bl	80008bc <__aeabi_ddiv>
 80030cc:	4603      	mov	r3, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	4618      	mov	r0, r3
 80030d2:	4621      	mov	r1, r4
 80030d4:	f7fd fdc0 	bl	8000c58 <__aeabi_d2f>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b91      	ldr	r3, [pc, #580]	; (8003320 <HAL_ADCEx_InjectedConvCpltCallback+0x448>)
 80030dc:	601a      	str	r2, [r3, #0]

	        arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 80030de:	4b8e      	ldr	r3, [pc, #568]	; (8003318 <HAL_ADCEx_InjectedConvCpltCallback+0x440>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b8e      	ldr	r3, [pc, #568]	; (800331c <HAL_ADCEx_InjectedConvCpltCallback+0x444>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	657a      	str	r2, [r7, #84]	; 0x54
 80030e8:	653b      	str	r3, [r7, #80]	; 0x50
 80030ea:	4b8e      	ldr	r3, [pc, #568]	; (8003324 <HAL_ADCEx_InjectedConvCpltCallback+0x44c>)
 80030ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ee:	4b8e      	ldr	r3, [pc, #568]	; (8003328 <HAL_ADCEx_InjectedConvCpltCallback+0x450>)
 80030f0:	64bb      	str	r3, [r7, #72]	; 0x48
    *pIalpha = Ia;
 80030f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030f6:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 80030f8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80030fc:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800332c <HAL_ADCEx_InjectedConvCpltCallback+0x454>
 8003100:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003104:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003108:	eddf 6a89 	vldr	s13, [pc, #548]	; 8003330 <HAL_ADCEx_InjectedConvCpltCallback+0x458>
 800310c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003116:	edc3 7a00 	vstr	s15, [r3]
	    	angle_rotor_deg=TIM4->CCR1;
 800311a:	4b86      	ldr	r3, [pc, #536]	; (8003334 <HAL_ADCEx_InjectedConvCpltCallback+0x45c>)
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003126:	4b84      	ldr	r3, [pc, #528]	; (8003338 <HAL_ADCEx_InjectedConvCpltCallback+0x460>)
 8003128:	edc3 7a00 	vstr	s15, [r3]
	    	arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);
 800312c:	4b82      	ldr	r3, [pc, #520]	; (8003338 <HAL_ADCEx_InjectedConvCpltCallback+0x460>)
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	4982      	ldr	r1, [pc, #520]	; (800333c <HAL_ADCEx_InjectedConvCpltCallback+0x464>)
 8003134:	4882      	ldr	r0, [pc, #520]	; (8003340 <HAL_ADCEx_InjectedConvCpltCallback+0x468>)
 8003136:	eeb0 0a67 	vmov.f32	s0, s15
 800313a:	f008 ffeb 	bl	800c114 <arm_sin_cos_f32>
	    	arm_park_f32(Ialpha, Ibeta, &Id, &Iq, pSinVal, pCosVal);
 800313e:	4b79      	ldr	r3, [pc, #484]	; (8003324 <HAL_ADCEx_InjectedConvCpltCallback+0x44c>)
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	4b79      	ldr	r3, [pc, #484]	; (8003328 <HAL_ADCEx_InjectedConvCpltCallback+0x450>)
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	4b7e      	ldr	r3, [pc, #504]	; (8003340 <HAL_ADCEx_InjectedConvCpltCallback+0x468>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4b7c      	ldr	r3, [pc, #496]	; (800333c <HAL_ADCEx_InjectedConvCpltCallback+0x464>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8003150:	66b9      	str	r1, [r7, #104]	; 0x68
 8003152:	497c      	ldr	r1, [pc, #496]	; (8003344 <HAL_ADCEx_InjectedConvCpltCallback+0x46c>)
 8003154:	6679      	str	r1, [r7, #100]	; 0x64
 8003156:	497c      	ldr	r1, [pc, #496]	; (8003348 <HAL_ADCEx_InjectedConvCpltCallback+0x470>)
 8003158:	6639      	str	r1, [r7, #96]	; 0x60
 800315a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800315c:	65bb      	str	r3, [r7, #88]	; 0x58
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800315e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8003162:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800316a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800316e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317c:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8003180:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003184:	eeb1 7a67 	vneg.f32	s14, s15
 8003188:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800318c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003190:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8003194:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a2:	edc3 7a00 	vstr	s15, [r3]



	    	// pid speed
	   							index_speed_loop++;
 80031a6:	4b69      	ldr	r3, [pc, #420]	; (800334c <HAL_ADCEx_InjectedConvCpltCallback+0x474>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	4a67      	ldr	r2, [pc, #412]	; (800334c <HAL_ADCEx_InjectedConvCpltCallback+0x474>)
 80031ae:	6013      	str	r3, [r2, #0]
	   							if(index_speed_loop==1)
 80031b0:	4b66      	ldr	r3, [pc, #408]	; (800334c <HAL_ADCEx_InjectedConvCpltCallback+0x474>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d165      	bne.n	8003284 <HAL_ADCEx_InjectedConvCpltCallback+0x3ac>
	   							{

	    						e_speed=set_speed-speed;
 80031b8:	4b65      	ldr	r3, [pc, #404]	; (8003350 <HAL_ADCEx_InjectedConvCpltCallback+0x478>)
 80031ba:	ed93 7a00 	vldr	s14, [r3]
 80031be:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_ADCEx_InjectedConvCpltCallback+0x47c>)
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c8:	4b63      	ldr	r3, [pc, #396]	; (8003358 <HAL_ADCEx_InjectedConvCpltCallback+0x480>)
 80031ca:	edc3 7a00 	vstr	s15, [r3]
	    						iq_speed_prev=pid_iq_speed.state[2];
 80031ce:	4b63      	ldr	r3, [pc, #396]	; (800335c <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4a63      	ldr	r2, [pc, #396]	; (8003360 <HAL_ADCEx_InjectedConvCpltCallback+0x488>)
 80031d4:	6013      	str	r3, [r2, #0]
	    						iq_speed=arm_pid_f32(&pid_iq_speed, e_speed);
 80031d6:	4b60      	ldr	r3, [pc, #384]	; (8003358 <HAL_ADCEx_InjectedConvCpltCallback+0x480>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a60      	ldr	r2, [pc, #384]	; (800335c <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 80031dc:	647a      	str	r2, [r7, #68]	; 0x44
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
    out = (S->A0 * in) +
 80031e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e2:	ed93 7a00 	vldr	s14, [r3]
 80031e6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80031ea:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80031ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80031f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80031fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80031fe:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003204:	edd3 6a02 	vldr	s13, [r3, #8]
 8003208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320a:	edd3 7a04 	vldr	s15, [r3, #16]
 800320e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003218:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800321c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003220:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    S->state[1] = S->state[0];
 8003224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800322c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003230:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003234:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003236:	615a      	str	r2, [r3, #20]
    return (out);
 8003238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323a:	4a4a      	ldr	r2, [pc, #296]	; (8003364 <HAL_ADCEx_InjectedConvCpltCallback+0x48c>)
 800323c:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(iq_speed>=current_limit_max_iq)
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_ADCEx_InjectedConvCpltCallback+0x48c>)
 8003240:	ed93 7a00 	vldr	s14, [r3]
 8003244:	4b48      	ldr	r3, [pc, #288]	; (8003368 <HAL_ADCEx_InjectedConvCpltCallback+0x490>)
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003252:	db07      	blt.n	8003264 <HAL_ADCEx_InjectedConvCpltCallback+0x38c>
	    						{
	    							pid_iq_speed.state[2]=iq_speed_prev;
 8003254:	4b42      	ldr	r3, [pc, #264]	; (8003360 <HAL_ADCEx_InjectedConvCpltCallback+0x488>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a40      	ldr	r2, [pc, #256]	; (800335c <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 800325a:	6153      	str	r3, [r2, #20]
	    							iq_speed=current_limit_max_iq;
 800325c:	4b42      	ldr	r3, [pc, #264]	; (8003368 <HAL_ADCEx_InjectedConvCpltCallback+0x490>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_ADCEx_InjectedConvCpltCallback+0x48c>)
 8003262:	6013      	str	r3, [r2, #0]
	    						}

	    						if(iq_speed<=current_limit_min_iq)
 8003264:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <HAL_ADCEx_InjectedConvCpltCallback+0x48c>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003272:	d807      	bhi.n	8003284 <HAL_ADCEx_InjectedConvCpltCallback+0x3ac>
	    						{
	    							pid_iq_speed.state[2]=iq_speed_prev;
 8003274:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <HAL_ADCEx_InjectedConvCpltCallback+0x488>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a38      	ldr	r2, [pc, #224]	; (800335c <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 800327a:	6153      	str	r3, [r2, #20]
	    							iq_speed=current_limit_min_iq;
 800327c:	4b39      	ldr	r3, [pc, #228]	; (8003364 <HAL_ADCEx_InjectedConvCpltCallback+0x48c>)
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
	    						}
	   							}
	   							if(index_speed_loop==5)
 8003284:	4b31      	ldr	r3, [pc, #196]	; (800334c <HAL_ADCEx_InjectedConvCpltCallback+0x474>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b05      	cmp	r3, #5
 800328a:	d102      	bne.n	8003292 <HAL_ADCEx_InjectedConvCpltCallback+0x3ba>
	   								index_speed_loop=0;
 800328c:	4b2f      	ldr	r3, [pc, #188]	; (800334c <HAL_ADCEx_InjectedConvCpltCallback+0x474>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]



	    	// pid dla osi d
	    						ed=set_d-Id;
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_ADCEx_InjectedConvCpltCallback+0x494>)
 8003294:	ed93 7a00 	vldr	s14, [r3]
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_ADCEx_InjectedConvCpltCallback+0x46c>)
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a2:	4b33      	ldr	r3, [pc, #204]	; (8003370 <HAL_ADCEx_InjectedConvCpltCallback+0x498>)
 80032a4:	edc3 7a00 	vstr	s15, [r3]
	    						Vd_prev=pid_d.state[2];
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <HAL_ADCEx_InjectedConvCpltCallback+0x49c>)
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	4a32      	ldr	r2, [pc, #200]	; (8003378 <HAL_ADCEx_InjectedConvCpltCallback+0x4a0>)
 80032ae:	6013      	str	r3, [r2, #0]
	    						Vd=arm_pid_f32(&pid_d, ed);
 80032b0:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_ADCEx_InjectedConvCpltCallback+0x498>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2f      	ldr	r2, [pc, #188]	; (8003374 <HAL_ADCEx_InjectedConvCpltCallback+0x49c>)
 80032b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34
    out = (S->A0 * in) +
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	ed93 7a00 	vldr	s14, [r3]
 80032c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80032c4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80032d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80032d8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	edd3 6a02 	vldr	s13, [r3, #8]
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80032e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80032f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fa:	e03f      	b.n	800337c <HAL_ADCEx_InjectedConvCpltCallback+0x4a4>
 80032fc:	200003ec 	.word	0x200003ec
 8003300:	2000032c 	.word	0x2000032c
 8003304:	20000338 	.word	0x20000338
 8003308:	20000388 	.word	0x20000388
 800330c:	20000574 	.word	0x20000574
 8003310:	20000588 	.word	0x20000588
 8003314:	40408000 	.word	0x40408000
 8003318:	20000314 	.word	0x20000314
 800331c:	200003e8 	.word	0x200003e8
 8003320:	2000043c 	.word	0x2000043c
 8003324:	20000434 	.word	0x20000434
 8003328:	20000428 	.word	0x20000428
 800332c:	3f13cd3a 	.word	0x3f13cd3a
 8003330:	3f93cd3a 	.word	0x3f93cd3a
 8003334:	40000800 	.word	0x40000800
 8003338:	20000310 	.word	0x20000310
 800333c:	20000598 	.word	0x20000598
 8003340:	200003d0 	.word	0x200003d0
 8003344:	2000038c 	.word	0x2000038c
 8003348:	20000450 	.word	0x20000450
 800334c:	20000370 	.word	0x20000370
 8003350:	2000057c 	.word	0x2000057c
 8003354:	20000564 	.word	0x20000564
 8003358:	2000056c 	.word	0x2000056c
 800335c:	20000394 	.word	0x20000394
 8003360:	20000378 	.word	0x20000378
 8003364:	200005a0 	.word	0x200005a0
 8003368:	20000328 	.word	0x20000328
 800336c:	2000033c 	.word	0x2000033c
 8003370:	20000554 	.word	0x20000554
 8003374:	20000340 	.word	0x20000340
 8003378:	200003c8 	.word	0x200003c8
 800337c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    S->state[1] = S->state[0];
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800338c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003392:	615a      	str	r2, [r3, #20]
    return (out);
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	4a90      	ldr	r2, [pc, #576]	; (80035d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 8003398:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(Vd>=sv_Vdc_limit)
 800339a:	4b8f      	ldr	r3, [pc, #572]	; (80035d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f90a 	bl	80005b8 <__aeabi_f2d>
 80033a4:	a388      	add	r3, pc, #544	; (adr r3, 80035c8 <HAL_ADCEx_InjectedConvCpltCallback+0x6f0>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fd fbe3 	bl	8000b74 <__aeabi_dcmpge>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <HAL_ADCEx_InjectedConvCpltCallback+0x4ea>
	    						{
	    							pid_d.state[2]=Vd_prev;
 80033b4:	4b89      	ldr	r3, [pc, #548]	; (80035dc <HAL_ADCEx_InjectedConvCpltCallback+0x704>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a89      	ldr	r2, [pc, #548]	; (80035e0 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 80033ba:	6153      	str	r3, [r2, #20]
	    							Vd=sv_Vdc_limit;
 80033bc:	4b86      	ldr	r3, [pc, #536]	; (80035d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 80033be:	4a89      	ldr	r2, [pc, #548]	; (80035e4 <HAL_ADCEx_InjectedConvCpltCallback+0x70c>)
 80033c0:	601a      	str	r2, [r3, #0]
	    						}

	    						if(Vd<=(-sv_Vdc_limit))
 80033c2:	4b85      	ldr	r3, [pc, #532]	; (80035d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f8f6 	bl	80005b8 <__aeabi_f2d>
 80033cc:	a380      	add	r3, pc, #512	; (adr r3, 80035d0 <HAL_ADCEx_InjectedConvCpltCallback+0x6f8>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f7fd fbc5 	bl	8000b60 <__aeabi_dcmple>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d006      	beq.n	80033ea <HAL_ADCEx_InjectedConvCpltCallback+0x512>
	    						{
	    							pid_d.state[2]=Vd_prev;
 80033dc:	4b7f      	ldr	r3, [pc, #508]	; (80035dc <HAL_ADCEx_InjectedConvCpltCallback+0x704>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a7f      	ldr	r2, [pc, #508]	; (80035e0 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 80033e2:	6153      	str	r3, [r2, #20]
	    							Vd=(-sv_Vdc_limit);
 80033e4:	4b7c      	ldr	r3, [pc, #496]	; (80035d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 80033e6:	4a80      	ldr	r2, [pc, #512]	; (80035e8 <HAL_ADCEx_InjectedConvCpltCallback+0x710>)
 80033e8:	601a      	str	r2, [r3, #0]
	    						}

	    	// pid dla osi q
	    						//eq=set_q-Iq;
	    						eq=iq_speed-Iq;
 80033ea:	4b80      	ldr	r3, [pc, #512]	; (80035ec <HAL_ADCEx_InjectedConvCpltCallback+0x714>)
 80033ec:	ed93 7a00 	vldr	s14, [r3]
 80033f0:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_ADCEx_InjectedConvCpltCallback+0x718>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fa:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_ADCEx_InjectedConvCpltCallback+0x71c>)
 80033fc:	edc3 7a00 	vstr	s15, [r3]
	    						Vq_prev=pid_q.state[2];
 8003400:	4b7d      	ldr	r3, [pc, #500]	; (80035f8 <HAL_ADCEx_InjectedConvCpltCallback+0x720>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	4a7d      	ldr	r2, [pc, #500]	; (80035fc <HAL_ADCEx_InjectedConvCpltCallback+0x724>)
 8003406:	6013      	str	r3, [r2, #0]
	    						Vq=arm_pid_f32(&pid_q, eq);
 8003408:	4b7a      	ldr	r3, [pc, #488]	; (80035f4 <HAL_ADCEx_InjectedConvCpltCallback+0x71c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a7a      	ldr	r2, [pc, #488]	; (80035f8 <HAL_ADCEx_InjectedConvCpltCallback+0x720>)
 800340e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
    out = (S->A0 * in) +
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	ed93 7a00 	vldr	s14, [r3]
 8003418:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800341c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	edd3 6a01 	vldr	s13, [r3, #4]
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	edd3 7a03 	vldr	s15, [r3, #12]
 800342c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003430:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	edd3 6a02 	vldr	s13, [r3, #8]
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800344e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003452:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    S->state[1] = S->state[0];
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003462:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	615a      	str	r2, [r3, #20]
    return (out);
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	4a64      	ldr	r2, [pc, #400]	; (8003600 <HAL_ADCEx_InjectedConvCpltCallback+0x728>)
 800346e:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(Vq>=sv_Vdc_limit)
 8003470:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_ADCEx_InjectedConvCpltCallback+0x728>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f89f 	bl	80005b8 <__aeabi_f2d>
 800347a:	a353      	add	r3, pc, #332	; (adr r3, 80035c8 <HAL_ADCEx_InjectedConvCpltCallback+0x6f0>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd fb78 	bl	8000b74 <__aeabi_dcmpge>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_ADCEx_InjectedConvCpltCallback+0x5c0>
	    						{
	    						pid_q.state[2]=Vq_prev;
 800348a:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_ADCEx_InjectedConvCpltCallback+0x724>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_ADCEx_InjectedConvCpltCallback+0x720>)
 8003490:	6153      	str	r3, [r2, #20]
	    						Vq=sv_Vdc_limit;
 8003492:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <HAL_ADCEx_InjectedConvCpltCallback+0x728>)
 8003494:	4a53      	ldr	r2, [pc, #332]	; (80035e4 <HAL_ADCEx_InjectedConvCpltCallback+0x70c>)
 8003496:	601a      	str	r2, [r3, #0]
	    						}

	    						if(Vq<=(-sv_Vdc_limit))
 8003498:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_ADCEx_InjectedConvCpltCallback+0x728>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd f88b 	bl	80005b8 <__aeabi_f2d>
 80034a2:	a34b      	add	r3, pc, #300	; (adr r3, 80035d0 <HAL_ADCEx_InjectedConvCpltCallback+0x6f8>)
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f7fd fb5a 	bl	8000b60 <__aeabi_dcmple>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <HAL_ADCEx_InjectedConvCpltCallback+0x5e8>
	    						{
	    						pid_q.state[2]=Vq_prev;
 80034b2:	4b52      	ldr	r3, [pc, #328]	; (80035fc <HAL_ADCEx_InjectedConvCpltCallback+0x724>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a50      	ldr	r2, [pc, #320]	; (80035f8 <HAL_ADCEx_InjectedConvCpltCallback+0x720>)
 80034b8:	6153      	str	r3, [r2, #20]
	    						Vq=(-sv_Vdc_limit);
 80034ba:	4b51      	ldr	r3, [pc, #324]	; (8003600 <HAL_ADCEx_InjectedConvCpltCallback+0x728>)
 80034bc:	4a4a      	ldr	r2, [pc, #296]	; (80035e8 <HAL_ADCEx_InjectedConvCpltCallback+0x710>)
 80034be:	601a      	str	r2, [r3, #0]
	    						}

	    	//angle_rotor_deg=TIM4->CCR1;
	    	//arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);
	    	arm_inv_park_f32(Vd, Vq, &Valpha, &Vbeta, pSinVal, pCosVal);
 80034c0:	4b45      	ldr	r3, [pc, #276]	; (80035d8 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <HAL_ADCEx_InjectedConvCpltCallback+0x728>)
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_ADCEx_InjectedConvCpltCallback+0x72c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <HAL_ADCEx_InjectedConvCpltCallback+0x730>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6238      	str	r0, [r7, #32]
 80034d2:	61f9      	str	r1, [r7, #28]
 80034d4:	494d      	ldr	r1, [pc, #308]	; (800360c <HAL_ADCEx_InjectedConvCpltCallback+0x734>)
 80034d6:	61b9      	str	r1, [r7, #24]
 80034d8:	494d      	ldr	r1, [pc, #308]	; (8003610 <HAL_ADCEx_InjectedConvCpltCallback+0x738>)
 80034da:	6179      	str	r1, [r7, #20]
 80034dc:	613a      	str	r2, [r7, #16]
 80034de:	60fb      	str	r3, [r7, #12]
    *pIalpha = Id * cosVal - Iq * sinVal;
 80034e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80034e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80034f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80034f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	edc3 7a00 	vstr	s15, [r3]
    *pIbeta = Id * sinVal + Iq * cosVal;
 8003502:	ed97 7a08 	vldr	s14, [r7, #32]
 8003506:	edd7 7a04 	vldr	s15, [r7, #16]
 800350a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800350e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003512:	edd7 7a03 	vldr	s15, [r7, #12]
 8003516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800351a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	edc3 7a00 	vstr	s15, [r3]

	    	AlphaBeta_To_Angle_Vref(Valpha, Vbeta, &angle_current_rad, &Vref);
 8003524:	4b39      	ldr	r3, [pc, #228]	; (800360c <HAL_ADCEx_InjectedConvCpltCallback+0x734>)
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	4b39      	ldr	r3, [pc, #228]	; (8003610 <HAL_ADCEx_InjectedConvCpltCallback+0x738>)
 800352c:	ed93 7a00 	vldr	s14, [r3]
 8003530:	4938      	ldr	r1, [pc, #224]	; (8003614 <HAL_ADCEx_InjectedConvCpltCallback+0x73c>)
 8003532:	4839      	ldr	r0, [pc, #228]	; (8003618 <HAL_ADCEx_InjectedConvCpltCallback+0x740>)
 8003534:	eef0 0a47 	vmov.f32	s1, s14
 8003538:	eeb0 0a67 	vmov.f32	s0, s15
 800353c:	f7ff fa38 	bl	80029b0 <AlphaBeta_To_Angle_Vref>
	    	Angle_To_Sector(angle_current_rad, &sector);
 8003540:	4b35      	ldr	r3, [pc, #212]	; (8003618 <HAL_ADCEx_InjectedConvCpltCallback+0x740>)
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	4835      	ldr	r0, [pc, #212]	; (800361c <HAL_ADCEx_InjectedConvCpltCallback+0x744>)
 8003548:	eeb0 0a67 	vmov.f32	s0, s15
 800354c:	f7ff fa88 	bl	8002a60 <Angle_To_Sector>
	    	SVPWM(sector, angle_current_rad , Vref, sv_T, sv_T_gate, &sv_S1, &sv_S2, &sv_S3);
 8003550:	4b32      	ldr	r3, [pc, #200]	; (800361c <HAL_ADCEx_InjectedConvCpltCallback+0x744>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	b2d8      	uxtb	r0, r3
 8003556:	4b30      	ldr	r3, [pc, #192]	; (8003618 <HAL_ADCEx_InjectedConvCpltCallback+0x740>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <HAL_ADCEx_InjectedConvCpltCallback+0x73c>)
 800355e:	ed93 7a00 	vldr	s14, [r3]
 8003562:	4b2f      	ldr	r3, [pc, #188]	; (8003620 <HAL_ADCEx_InjectedConvCpltCallback+0x748>)
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <HAL_ADCEx_InjectedConvCpltCallback+0x74c>)
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <HAL_ADCEx_InjectedConvCpltCallback+0x750>)
 800356c:	4a2f      	ldr	r2, [pc, #188]	; (800362c <HAL_ADCEx_InjectedConvCpltCallback+0x754>)
 800356e:	4930      	ldr	r1, [pc, #192]	; (8003630 <HAL_ADCEx_InjectedConvCpltCallback+0x758>)
 8003570:	eef0 0a47 	vmov.f32	s1, s14
 8003574:	eeb0 0a67 	vmov.f32	s0, s15
 8003578:	f7ff fb2a 	bl	8002bd0 <SVPWM>

	    	TIM1->CCR1 = sv_S1;
 800357c:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <HAL_ADCEx_InjectedConvCpltCallback+0x750>)
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <HAL_ADCEx_InjectedConvCpltCallback+0x75c>)
 8003584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003588:	ee17 2a90 	vmov	r2, s15
 800358c:	635a      	str	r2, [r3, #52]	; 0x34
	    	TIM1->CCR2 = sv_S2;
 800358e:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_ADCEx_InjectedConvCpltCallback+0x74c>)
 8003590:	edd3 7a00 	vldr	s15, [r3]
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_ADCEx_InjectedConvCpltCallback+0x75c>)
 8003596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800359a:	ee17 2a90 	vmov	r2, s15
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
	    	TIM1->CCR3 = sv_S3;
 80035a0:	4b1f      	ldr	r3, [pc, #124]	; (8003620 <HAL_ADCEx_InjectedConvCpltCallback+0x748>)
 80035a2:	edd3 7a00 	vldr	s15, [r3]
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <HAL_ADCEx_InjectedConvCpltCallback+0x75c>)
 80035a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ac:	ee17 2a90 	vmov	r2, s15
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c

	}



	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 80035b2:	4821      	ldr	r0, [pc, #132]	; (8003638 <HAL_ADCEx_InjectedConvCpltCallback+0x760>)
 80035b4:	f002 f800 	bl	80055b8 <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 80035b8:	4820      	ldr	r0, [pc, #128]	; (800363c <HAL_ADCEx_InjectedConvCpltCallback+0x764>)
 80035ba:	f001 fffd 	bl	80055b8 <HAL_ADCEx_InjectedStart_IT>
}
 80035be:	bf00      	nop
 80035c0:	3774      	adds	r7, #116	; 0x74
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd90      	pop	{r4, r7, pc}
 80035c6:	bf00      	nop
 80035c8:	0f9096bc 	.word	0x0f9096bc
 80035cc:	402bb67a 	.word	0x402bb67a
 80035d0:	0f9096bc 	.word	0x0f9096bc
 80035d4:	c02bb67a 	.word	0xc02bb67a
 80035d8:	20000368 	.word	0x20000368
 80035dc:	200003c8 	.word	0x200003c8
 80035e0:	20000340 	.word	0x20000340
 80035e4:	415db3d0 	.word	0x415db3d0
 80035e8:	c15db3d0 	.word	0xc15db3d0
 80035ec:	200005a0 	.word	0x200005a0
 80035f0:	20000450 	.word	0x20000450
 80035f4:	20000364 	.word	0x20000364
 80035f8:	200003f8 	.word	0x200003f8
 80035fc:	200003d8 	.word	0x200003d8
 8003600:	20000390 	.word	0x20000390
 8003604:	200003d0 	.word	0x200003d0
 8003608:	20000598 	.word	0x20000598
 800360c:	2000058c 	.word	0x2000058c
 8003610:	200003f4 	.word	0x200003f4
 8003614:	20000420 	.word	0x20000420
 8003618:	200003e4 	.word	0x200003e4
 800361c:	200003f0 	.word	0x200003f0
 8003620:	20000334 	.word	0x20000334
 8003624:	20000374 	.word	0x20000374
 8003628:	200003c4 	.word	0x200003c4
 800362c:	20000318 	.word	0x20000318
 8003630:	200003b8 	.word	0x200003b8
 8003634:	40012c00 	.word	0x40012c00
 8003638:	20000290 	.word	0x20000290
 800363c:	20000224 	.word	0x20000224

08003640 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	d119      	bne.n	8003686 <HAL_GPIO_EXTI_Callback+0x46>
	{
		if(config==0)
 8003652:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <HAL_GPIO_EXTI_Callback+0x50>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <HAL_GPIO_EXTI_Callback+0x26>
		{
			config=1;
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_GPIO_EXTI_Callback+0x50>)
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
			start_up();
 8003662:	f7ff f855 	bl	8002710 <start_up>
		}

		if(start==0)
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_GPIO_EXTI_Callback+0x54>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_GPIO_EXTI_Callback+0x3c>
		{
			start=1;
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <HAL_GPIO_EXTI_Callback+0x54>)
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
			start1();
 8003676:	f7ff f93d 	bl	80028f4 <start1>
			start=0;
			stop();

		}
	}
}
 800367a:	e004      	b.n	8003686 <HAL_GPIO_EXTI_Callback+0x46>
			start=0;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_GPIO_EXTI_Callback+0x54>)
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
			stop();
 8003682:	f7ff f959 	bl	8002938 <stop>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000214 	.word	0x20000214
 8003694:	20000584 	.word	0x20000584

08003698 <HAL_UART_RxCpltCallback>:
	}

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b090      	sub	sp, #64	; 0x40
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a93      	ldr	r2, [pc, #588]	; (80038f4 <HAL_UART_RxCpltCallback+0x25c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f040 811f 	bne.w	80038ea <HAL_UART_RxCpltCallback+0x252>
	{

		if(config==0)
 80036ac:	4b92      	ldr	r3, [pc, #584]	; (80038f8 <HAL_UART_RxCpltCallback+0x260>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <HAL_UART_RxCpltCallback+0x28>
		{
			config=1;
 80036b6:	4b90      	ldr	r3, [pc, #576]	; (80038f8 <HAL_UART_RxCpltCallback+0x260>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
			start_up();
 80036bc:	f7ff f828 	bl	8002710 <start_up>
		}


		/////////// parse JSON ///////////////////////////////
		 cJSON * root = cJSON_Parse((char *)jstring);
 80036c0:	488e      	ldr	r0, [pc, #568]	; (80038fc <HAL_UART_RxCpltCallback+0x264>)
 80036c2:	f7fe fc8b 	bl	8001fdc <cJSON_Parse>
 80036c6:	63f8      	str	r0, [r7, #60]	; 0x3c

		 cJSON * set = cJSON_GetObjectItemCaseSensitive(root, "set");
 80036c8:	498d      	ldr	r1, [pc, #564]	; (8003900 <HAL_UART_RxCpltCallback+0x268>)
 80036ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036cc:	f7fe ff87 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 80036d0:	63b8      	str	r0, [r7, #56]	; 0x38
		 settings =  atoi(cJSON_GetStringValue(set));
 80036d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036d4:	f7fd fe4c 	bl	8001370 <cJSON_GetStringValue>
 80036d8:	4603      	mov	r3, r0
 80036da:	4618      	mov	r0, r3
 80036dc:	f008 ff20 	bl	800c520 <atoi>
 80036e0:	4603      	mov	r3, r0
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4b87      	ldr	r3, [pc, #540]	; (8003904 <HAL_UART_RxCpltCallback+0x26c>)
 80036e6:	701a      	strb	r2, [r3, #0]

		 if(settings==0)
 80036e8:	4b86      	ldr	r3, [pc, #536]	; (8003904 <HAL_UART_RxCpltCallback+0x26c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11a      	bne.n	8003728 <HAL_UART_RxCpltCallback+0x90>
		 {

			 cJSON * start_stop = cJSON_GetObjectItemCaseSensitive(root, "start_stop");
 80036f2:	4985      	ldr	r1, [pc, #532]	; (8003908 <HAL_UART_RxCpltCallback+0x270>)
 80036f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036f6:	f7fe ff72 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 80036fa:	60b8      	str	r0, [r7, #8]
			 startstop =  atoi(cJSON_GetStringValue(start_stop));
 80036fc:	68b8      	ldr	r0, [r7, #8]
 80036fe:	f7fd fe37 	bl	8001370 <cJSON_GetStringValue>
 8003702:	4603      	mov	r3, r0
 8003704:	4618      	mov	r0, r3
 8003706:	f008 ff0b 	bl	800c520 <atoi>
 800370a:	4603      	mov	r3, r0
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b7f      	ldr	r3, [pc, #508]	; (800390c <HAL_UART_RxCpltCallback+0x274>)
 8003710:	701a      	strb	r2, [r3, #0]

			 if(startstop==1)
 8003712:	4b7e      	ldr	r3, [pc, #504]	; (800390c <HAL_UART_RxCpltCallback+0x274>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_UART_RxCpltCallback+0x8a>
				 start1();
 800371c:	f7ff f8ea 	bl	80028f4 <start1>
 8003720:	e0da      	b.n	80038d8 <HAL_UART_RxCpltCallback+0x240>
			 else
				 stop();
 8003722:	f7ff f909 	bl	8002938 <stop>
 8003726:	e0d7      	b.n	80038d8 <HAL_UART_RxCpltCallback+0x240>
		 }

		 else
		 {

			 cJSON * speed = cJSON_GetObjectItemCaseSensitive(root, "speed");
 8003728:	4979      	ldr	r1, [pc, #484]	; (8003910 <HAL_UART_RxCpltCallback+0x278>)
 800372a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800372c:	f7fe ff57 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 8003730:	6378      	str	r0, [r7, #52]	; 0x34
			 set_speed =  atoi(cJSON_GetStringValue(speed));
 8003732:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003734:	f7fd fe1c 	bl	8001370 <cJSON_GetStringValue>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	f008 fef0 	bl	800c520 <atoi>
 8003740:	ee07 0a90 	vmov	s15, r0
 8003744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003748:	4b72      	ldr	r3, [pc, #456]	; (8003914 <HAL_UART_RxCpltCallback+0x27c>)
 800374a:	edc3 7a00 	vstr	s15, [r3]

			 cJSON * current = cJSON_GetObjectItemCaseSensitive(root, "current");
 800374e:	4972      	ldr	r1, [pc, #456]	; (8003918 <HAL_UART_RxCpltCallback+0x280>)
 8003750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003752:	f7fe ff44 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 8003756:	6338      	str	r0, [r7, #48]	; 0x30
			 sscanf(cJSON_GetStringValue(current),"%f",&current_limit_max_iq);
 8003758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800375a:	f7fd fe09 	bl	8001370 <cJSON_GetStringValue>
 800375e:	4603      	mov	r3, r0
 8003760:	4a6e      	ldr	r2, [pc, #440]	; (800391c <HAL_UART_RxCpltCallback+0x284>)
 8003762:	496f      	ldr	r1, [pc, #444]	; (8003920 <HAL_UART_RxCpltCallback+0x288>)
 8003764:	4618      	mov	r0, r3
 8003766:	f009 fe75 	bl	800d454 <siscanf>


			 cJSON * iq_Kp = cJSON_GetObjectItemCaseSensitive(root, "iq_Kp");
 800376a:	496e      	ldr	r1, [pc, #440]	; (8003924 <HAL_UART_RxCpltCallback+0x28c>)
 800376c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800376e:	f7fe ff36 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 8003772:	62f8      	str	r0, [r7, #44]	; 0x2c
			 pid_q.Kp =  atoi(cJSON_GetStringValue(iq_Kp));
 8003774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003776:	f7fd fdfb 	bl	8001370 <cJSON_GetStringValue>
 800377a:	4603      	mov	r3, r0
 800377c:	4618      	mov	r0, r3
 800377e:	f008 fecf 	bl	800c520 <atoi>
 8003782:	ee07 0a90 	vmov	s15, r0
 8003786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378a:	4b67      	ldr	r3, [pc, #412]	; (8003928 <HAL_UART_RxCpltCallback+0x290>)
 800378c:	edc3 7a06 	vstr	s15, [r3, #24]

			 cJSON * iq_Ki = cJSON_GetObjectItemCaseSensitive(root, "iq_Ki");
 8003790:	4966      	ldr	r1, [pc, #408]	; (800392c <HAL_UART_RxCpltCallback+0x294>)
 8003792:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003794:	f7fe ff23 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 8003798:	62b8      	str	r0, [r7, #40]	; 0x28
			 pid_q.Ki =  atoi(cJSON_GetStringValue(iq_Ki));
 800379a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800379c:	f7fd fde8 	bl	8001370 <cJSON_GetStringValue>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f008 febc 	bl	800c520 <atoi>
 80037a8:	ee07 0a90 	vmov	s15, r0
 80037ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b0:	4b5d      	ldr	r3, [pc, #372]	; (8003928 <HAL_UART_RxCpltCallback+0x290>)
 80037b2:	edc3 7a07 	vstr	s15, [r3, #28]

			 cJSON * iq_Kd = cJSON_GetObjectItemCaseSensitive(root, "iq_Kd");
 80037b6:	495e      	ldr	r1, [pc, #376]	; (8003930 <HAL_UART_RxCpltCallback+0x298>)
 80037b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037ba:	f7fe ff10 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 80037be:	6278      	str	r0, [r7, #36]	; 0x24
			 pid_q.Kd =  atoi(cJSON_GetStringValue(iq_Kd));
 80037c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037c2:	f7fd fdd5 	bl	8001370 <cJSON_GetStringValue>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f008 fea9 	bl	800c520 <atoi>
 80037ce:	ee07 0a90 	vmov	s15, r0
 80037d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d6:	4b54      	ldr	r3, [pc, #336]	; (8003928 <HAL_UART_RxCpltCallback+0x290>)
 80037d8:	edc3 7a08 	vstr	s15, [r3, #32]

			 cJSON * id_Kp = cJSON_GetObjectItemCaseSensitive(root, "id_Kp");
 80037dc:	4955      	ldr	r1, [pc, #340]	; (8003934 <HAL_UART_RxCpltCallback+0x29c>)
 80037de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037e0:	f7fe fefd 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 80037e4:	6238      	str	r0, [r7, #32]
			 pid_d.Kp =  atoi(cJSON_GetStringValue(id_Kp));
 80037e6:	6a38      	ldr	r0, [r7, #32]
 80037e8:	f7fd fdc2 	bl	8001370 <cJSON_GetStringValue>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f008 fe96 	bl	800c520 <atoi>
 80037f4:	ee07 0a90 	vmov	s15, r0
 80037f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037fc:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <HAL_UART_RxCpltCallback+0x2a0>)
 80037fe:	edc3 7a06 	vstr	s15, [r3, #24]

			 cJSON * id_Ki = cJSON_GetObjectItemCaseSensitive(root, "id_Ki");
 8003802:	494e      	ldr	r1, [pc, #312]	; (800393c <HAL_UART_RxCpltCallback+0x2a4>)
 8003804:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003806:	f7fe feea 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 800380a:	61f8      	str	r0, [r7, #28]
			 pid_d.Ki =  atoi(cJSON_GetStringValue(id_Ki));
 800380c:	69f8      	ldr	r0, [r7, #28]
 800380e:	f7fd fdaf 	bl	8001370 <cJSON_GetStringValue>
 8003812:	4603      	mov	r3, r0
 8003814:	4618      	mov	r0, r3
 8003816:	f008 fe83 	bl	800c520 <atoi>
 800381a:	ee07 0a90 	vmov	s15, r0
 800381e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003822:	4b45      	ldr	r3, [pc, #276]	; (8003938 <HAL_UART_RxCpltCallback+0x2a0>)
 8003824:	edc3 7a07 	vstr	s15, [r3, #28]

			 cJSON * id_Kd = cJSON_GetObjectItemCaseSensitive(root, "id_Kd");
 8003828:	4945      	ldr	r1, [pc, #276]	; (8003940 <HAL_UART_RxCpltCallback+0x2a8>)
 800382a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800382c:	f7fe fed7 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 8003830:	61b8      	str	r0, [r7, #24]
			 pid_d.Kd =  atoi(cJSON_GetStringValue(id_Kd));
 8003832:	69b8      	ldr	r0, [r7, #24]
 8003834:	f7fd fd9c 	bl	8001370 <cJSON_GetStringValue>
 8003838:	4603      	mov	r3, r0
 800383a:	4618      	mov	r0, r3
 800383c:	f008 fe70 	bl	800c520 <atoi>
 8003840:	ee07 0a90 	vmov	s15, r0
 8003844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003848:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_UART_RxCpltCallback+0x2a0>)
 800384a:	edc3 7a08 	vstr	s15, [r3, #32]

			 cJSON * speed_Kp = cJSON_GetObjectItemCaseSensitive(root, "speed_Kp");
 800384e:	493d      	ldr	r1, [pc, #244]	; (8003944 <HAL_UART_RxCpltCallback+0x2ac>)
 8003850:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003852:	f7fe fec4 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 8003856:	6178      	str	r0, [r7, #20]
			 pid_iq_speed.Kp =  atoi(cJSON_GetStringValue(speed_Kp));
 8003858:	6978      	ldr	r0, [r7, #20]
 800385a:	f7fd fd89 	bl	8001370 <cJSON_GetStringValue>
 800385e:	4603      	mov	r3, r0
 8003860:	4618      	mov	r0, r3
 8003862:	f008 fe5d 	bl	800c520 <atoi>
 8003866:	ee07 0a90 	vmov	s15, r0
 800386a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386e:	4b36      	ldr	r3, [pc, #216]	; (8003948 <HAL_UART_RxCpltCallback+0x2b0>)
 8003870:	edc3 7a06 	vstr	s15, [r3, #24]

			 cJSON * speed_Ki = cJSON_GetObjectItemCaseSensitive(root, "speed_Ki");
 8003874:	4935      	ldr	r1, [pc, #212]	; (800394c <HAL_UART_RxCpltCallback+0x2b4>)
 8003876:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003878:	f7fe feb1 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 800387c:	6138      	str	r0, [r7, #16]
			 pid_iq_speed.Ki =  atoi(cJSON_GetStringValue(speed_Ki));
 800387e:	6938      	ldr	r0, [r7, #16]
 8003880:	f7fd fd76 	bl	8001370 <cJSON_GetStringValue>
 8003884:	4603      	mov	r3, r0
 8003886:	4618      	mov	r0, r3
 8003888:	f008 fe4a 	bl	800c520 <atoi>
 800388c:	ee07 0a90 	vmov	s15, r0
 8003890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003894:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <HAL_UART_RxCpltCallback+0x2b0>)
 8003896:	edc3 7a07 	vstr	s15, [r3, #28]

			 cJSON * speed_Kd = cJSON_GetObjectItemCaseSensitive(root, "speed_Kd");
 800389a:	492d      	ldr	r1, [pc, #180]	; (8003950 <HAL_UART_RxCpltCallback+0x2b8>)
 800389c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800389e:	f7fe fe9e 	bl	80025de <cJSON_GetObjectItemCaseSensitive>
 80038a2:	60f8      	str	r0, [r7, #12]
			 pid_iq_speed.Kd =  atoi(cJSON_GetStringValue(speed_Kd));
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7fd fd63 	bl	8001370 <cJSON_GetStringValue>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f008 fe37 	bl	800c520 <atoi>
 80038b2:	ee07 0a90 	vmov	s15, r0
 80038b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_UART_RxCpltCallback+0x2b0>)
 80038bc:	edc3 7a08 	vstr	s15, [r3, #32]

			arm_pid_init_f32(&pid_d, 1);
 80038c0:	2101      	movs	r1, #1
 80038c2:	481d      	ldr	r0, [pc, #116]	; (8003938 <HAL_UART_RxCpltCallback+0x2a0>)
 80038c4:	f008 fbe0 	bl	800c088 <arm_pid_init_f32>
			arm_pid_init_f32(&pid_q, 1);
 80038c8:	2101      	movs	r1, #1
 80038ca:	4817      	ldr	r0, [pc, #92]	; (8003928 <HAL_UART_RxCpltCallback+0x290>)
 80038cc:	f008 fbdc 	bl	800c088 <arm_pid_init_f32>
			arm_pid_init_f32(&pid_iq_speed, 1);
 80038d0:	2101      	movs	r1, #1
 80038d2:	481d      	ldr	r0, [pc, #116]	; (8003948 <HAL_UART_RxCpltCallback+0x2b0>)
 80038d4:	f008 fbd8 	bl	800c088 <arm_pid_init_f32>
		 }


	     cJSON_Delete(root);
 80038d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038da:	f7fd fde1 	bl	80014a0 <cJSON_Delete>




		HAL_UART_Receive_IT(&huart2, jstring ,256);
 80038de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038e2:	4906      	ldr	r1, [pc, #24]	; (80038fc <HAL_UART_RxCpltCallback+0x264>)
 80038e4:	481b      	ldr	r0, [pc, #108]	; (8003954 <HAL_UART_RxCpltCallback+0x2bc>)
 80038e6:	f006 fb4d 	bl	8009f84 <HAL_UART_Receive_IT>

	}
}
 80038ea:	bf00      	nop
 80038ec:	3740      	adds	r7, #64	; 0x40
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40004400 	.word	0x40004400
 80038f8:	20000214 	.word	0x20000214
 80038fc:	20000454 	.word	0x20000454
 8003900:	08010d00 	.word	0x08010d00
 8003904:	20000330 	.word	0x20000330
 8003908:	08010d04 	.word	0x08010d04
 800390c:	200003d4 	.word	0x200003d4
 8003910:	08010d10 	.word	0x08010d10
 8003914:	2000057c 	.word	0x2000057c
 8003918:	08010d18 	.word	0x08010d18
 800391c:	20000328 	.word	0x20000328
 8003920:	08010d20 	.word	0x08010d20
 8003924:	08010d24 	.word	0x08010d24
 8003928:	200003f8 	.word	0x200003f8
 800392c:	08010d2c 	.word	0x08010d2c
 8003930:	08010d34 	.word	0x08010d34
 8003934:	08010d3c 	.word	0x08010d3c
 8003938:	20000340 	.word	0x20000340
 800393c:	08010d44 	.word	0x08010d44
 8003940:	08010d4c 	.word	0x08010d4c
 8003944:	08010d54 	.word	0x08010d54
 8003948:	20000394 	.word	0x20000394
 800394c:	08010d60 	.word	0x08010d60
 8003950:	08010d6c 	.word	0x08010d6c
 8003954:	2000073c 	.word	0x2000073c

08003958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800395c:	f000 fe17 	bl	800458e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003960:	f000 f820 	bl	80039a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003964:	f7fe fe62 	bl	800262c <MX_GPIO_Init>
  MX_TIM1_Init();
 8003968:	f000 fa4e 	bl	8003e08 <MX_TIM1_Init>
  MX_TIM4_Init();
 800396c:	f000 fb2c 	bl	8003fc8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8003970:	f000 fd4c 	bl	800440c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8003974:	f7fd fb40 	bl	8000ff8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003978:	f7fd fbda 	bl	8001130 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 800397c:	f000 f880 	bl	8003a80 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8003980:	f000 f8ac 	bl	8003adc <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8003984:	f000 f8d8 	bl	8003b38 <MX_OPAMP3_Init>
  MX_TIM8_Init();
 8003988:	f000 fb76 	bl	8004078 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */


  //HAL_UART_Receive_IT(&huart2, &recive, 1);
  HAL_UART_Receive_IT(&huart2, jstring ,256);
 800398c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003990:	4902      	ldr	r1, [pc, #8]	; (800399c <main+0x44>)
 8003992:	4803      	ldr	r0, [pc, #12]	; (80039a0 <main+0x48>)
 8003994:	f006 faf6 	bl	8009f84 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003998:	e7fe      	b.n	8003998 <main+0x40>
 800399a:	bf00      	nop
 800399c:	20000454 	.word	0x20000454
 80039a0:	2000073c 	.word	0x2000073c

080039a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b0a4      	sub	sp, #144	; 0x90
 80039a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039ae:	2238      	movs	r2, #56	; 0x38
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f008 fe21 	bl	800c5fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039c8:	463b      	mov	r3, r7
 80039ca:	2244      	movs	r2, #68	; 0x44
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f008 fe13 	bl	800c5fa <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80039d4:	2000      	movs	r0, #0
 80039d6:	f003 fb45 	bl	8007064 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039da:	2301      	movs	r3, #1
 80039dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039e4:	2302      	movs	r3, #2
 80039e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039e8:	2303      	movs	r3, #3
 80039ea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80039ec:	2302      	movs	r3, #2
 80039ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80039f0:	2355      	movs	r3, #85	; 0x55
 80039f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039f6:	2302      	movs	r3, #2
 80039f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039fc:	2302      	movs	r3, #2
 80039fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a02:	2302      	movs	r3, #2
 8003a04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 fbcd 	bl	80071ac <HAL_RCC_OscConfig>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003a18:	f000 f82a 	bl	8003a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a20:	2303      	movs	r3, #3
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a24:	2300      	movs	r3, #0
 8003a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8003a30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a34:	2108      	movs	r1, #8
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fed0 	bl	80077dc <HAL_RCC_ClockConfig>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003a42:	f000 f815 	bl	8003a70 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8003a46:	f248 0302 	movw	r3, #32770	; 0x8002
 8003a4a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003a50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a56:	463b      	mov	r3, r7
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f004 f8db 	bl	8007c14 <HAL_RCCEx_PeriphCLKConfig>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003a64:	f000 f804 	bl	8003a70 <Error_Handler>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3790      	adds	r7, #144	; 0x90
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003a86:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <MX_OPAMP1_Init+0x58>)
 8003a88:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8003a90:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003a92:	2240      	movs	r2, #64	; 0x40
 8003a94:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003ab2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8003abe:	4805      	ldr	r0, [pc, #20]	; (8003ad4 <MX_OPAMP1_Init+0x54>)
 8003ac0:	f002 feda 	bl	8006878 <HAL_OPAMP_Init>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8003aca:	f7ff ffd1 	bl	8003a70 <Error_Handler>
  }

}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2000061c 	.word	0x2000061c
 8003ad8:	40010300 	.word	0x40010300

08003adc <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003ae2:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <MX_OPAMP2_Init+0x58>)
 8003ae4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8003af8:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003b06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003b0e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8003b1a:	4805      	ldr	r0, [pc, #20]	; (8003b30 <MX_OPAMP2_Init+0x54>)
 8003b1c:	f002 feac 	bl	8006878 <HAL_OPAMP_Init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8003b26:	f7ff ffa3 	bl	8003a70 <Error_Handler>
  }

}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200005a4 	.word	0x200005a4
 8003b34:	40010304 	.word	0x40010304

08003b38 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8003b3c:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b3e:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <MX_OPAMP3_Init+0x58>)
 8003b40:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b4a:	2240      	movs	r2, #64	; 0x40
 8003b4c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b6a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8003b76:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_OPAMP3_Init+0x54>)
 8003b78:	f002 fe7e 	bl	8006878 <HAL_OPAMP_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8003b82:	f7ff ff75 	bl	8003a70 <Error_Handler>
  }

}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200005e0 	.word	0x200005e0
 8003b90:	40010308 	.word	0x40010308

08003b94 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2e      	ldr	r2, [pc, #184]	; (8003c6c <HAL_OPAMP_MspInit+0xd8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d119      	bne.n	8003bea <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc2:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003bce:	230e      	movs	r3, #14
 8003bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bda:	f107 0314 	add.w	r3, r7, #20
 8003bde:	4619      	mov	r1, r3
 8003be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be4:	f002 fc96 	bl	8006514 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8003be8:	e03b      	b.n	8003c62 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_OPAMP_MspInit+0xe0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d119      	bne.n	8003c28 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003c0c:	23e0      	movs	r3, #224	; 0xe0
 8003c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c10:	2303      	movs	r3, #3
 8003c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c22:	f002 fc77 	bl	8006514 <HAL_GPIO_Init>
}
 8003c26:	e01c      	b.n	8003c62 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <HAL_OPAMP_MspInit+0xe4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d117      	bne.n	8003c62 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4807      	ldr	r0, [pc, #28]	; (8003c7c <HAL_OPAMP_MspInit+0xe8>)
 8003c5e:	f002 fc59 	bl	8006514 <HAL_GPIO_Init>
}
 8003c62:	bf00      	nop
 8003c64:	3728      	adds	r7, #40	; 0x28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40010300 	.word	0x40010300
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40010304 	.word	0x40010304
 8003c78:	40010308 	.word	0x40010308
 8003c7c:	48000400 	.word	0x48000400

08003c80 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8003c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c8e:	6093      	str	r3, [r2, #8]
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40007000 	.word	0x40007000

08003ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <HAL_MspInit+0x44>)
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <HAL_MspInit+0x44>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_MspInit+0x44>)
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_MspInit+0x44>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <HAL_MspInit+0x44>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_MspInit+0x44>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8003cd6:	f7ff ffd3 	bl	8003c80 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cfa:	e7fe      	b.n	8003cfa <HardFault_Handler+0x4>

08003cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d00:	e7fe      	b.n	8003d00 <MemManage_Handler+0x4>

08003d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d06:	e7fe      	b.n	8003d06 <BusFault_Handler+0x4>

08003d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <UsageFault_Handler+0x4>

08003d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d3c:	f000 fc7a 	bl	8004634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d40:	bf00      	nop
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d48:	4803      	ldr	r0, [pc, #12]	; (8003d58 <ADC1_2_IRQHandler+0x14>)
 8003d4a:	f000 ff53 	bl	8004bf4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003d4e:	4803      	ldr	r0, [pc, #12]	; (8003d5c <ADC1_2_IRQHandler+0x18>)
 8003d50:	f000 ff50 	bl	8004bf4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000290 	.word	0x20000290
 8003d5c:	20000224 	.word	0x20000224

08003d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d64:	4802      	ldr	r0, [pc, #8]	; (8003d70 <USART2_IRQHandler+0x10>)
 8003d66:	f006 f9e5 	bl	800a134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	2000073c 	.word	0x2000073c

08003d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003d78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d7c:	f002 fd64 	bl	8006848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d80:	bf00      	nop
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <_sbrk+0x50>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <_sbrk+0x16>
		heap_end = &end;
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <_sbrk+0x50>)
 8003d96:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <_sbrk+0x54>)
 8003d98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <_sbrk+0x50>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <_sbrk+0x50>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4413      	add	r3, r2
 8003da8:	466a      	mov	r2, sp
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d907      	bls.n	8003dbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003dae:	f008 fbbb 	bl	800c528 <__errno>
 8003db2:	4602      	mov	r2, r0
 8003db4:	230c      	movs	r3, #12
 8003db6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbc:	e006      	b.n	8003dcc <_sbrk+0x48>
	}

	heap_end += incr;
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <_sbrk+0x50>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4a03      	ldr	r2, [pc, #12]	; (8003dd4 <_sbrk+0x50>)
 8003dc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000218 	.word	0x20000218
 8003dd8:	200007d0 	.word	0x200007d0

08003ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <SystemInit+0x28>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <SystemInit+0x28>)
 8003de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <SystemInit+0x28>)
 8003df2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003df6:	609a      	str	r2, [r3, #8]
#endif
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b09c      	sub	sp, #112	; 0x70
 8003e0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	611a      	str	r2, [r3, #16]
 8003e38:	615a      	str	r2, [r3, #20]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e3c:	1d3b      	adds	r3, r7, #4
 8003e3e:	2234      	movs	r2, #52	; 0x34
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f008 fbd9 	bl	800c5fa <memset>

  htim1.Instance = TIM1;
 8003e48:	4b5d      	ldr	r3, [pc, #372]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <MX_TIM1_Init+0x1bc>)
 8003e4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003e54:	4b5a      	ldr	r3, [pc, #360]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003e56:	2220      	movs	r2, #32
 8003e58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8003e5a:	4b59      	ldr	r3, [pc, #356]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e60:	4b57      	ldr	r3, [pc, #348]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e66:	4b56      	ldr	r3, [pc, #344]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e6c:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e72:	4853      	ldr	r0, [pc, #332]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003e74:	f004 f8be 	bl	8007ff4 <HAL_TIM_Base_Init>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003e7e:	f7ff fdf7 	bl	8003a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e86:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	484c      	ldr	r0, [pc, #304]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003e90:	f004 fecc 	bl	8008c2c <HAL_TIM_ConfigClockSource>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003e9a:	f7ff fde9 	bl	8003a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e9e:	4848      	ldr	r0, [pc, #288]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003ea0:	f004 f8ff 	bl	80080a2 <HAL_TIM_PWM_Init>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003eaa:	f7ff fde1 	bl	8003a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003eae:	2370      	movs	r3, #112	; 0x70
 8003eb0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003eba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	483f      	ldr	r0, [pc, #252]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003ec2:	f005 fec7 	bl	8009c54 <HAL_TIMEx_MasterConfigSynchronization>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8003ecc:	f7ff fdd0 	bl	8003a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ed0:	2360      	movs	r3, #96	; 0x60
 8003ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003edc:	2300      	movs	r3, #0
 8003ede:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4832      	ldr	r0, [pc, #200]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003ef6:	f004 fd89 	bl	8008a0c <HAL_TIM_PWM_ConfigChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003f00:	f7ff fdb6 	bl	8003a70 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	482b      	ldr	r0, [pc, #172]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003f12:	f004 fd7b 	bl	8008a0c <HAL_TIM_PWM_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8003f1c:	f7ff fda8 	bl	8003a70 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f28:	2208      	movs	r2, #8
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4824      	ldr	r0, [pc, #144]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003f2e:	f004 fd6d 	bl	8008a0c <HAL_TIM_PWM_ConfigChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8003f38:	f7ff fd9a 	bl	8003a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003f3c:	2370      	movs	r3, #112	; 0x70
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f44:	2300      	movs	r3, #0
 8003f46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f4c:	220c      	movs	r2, #12
 8003f4e:	4619      	mov	r1, r3
 8003f50:	481b      	ldr	r0, [pc, #108]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003f52:	f004 fd5b 	bl	8008a0c <HAL_TIM_PWM_ConfigChannel>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8003f5c:	f7ff fd88 	bl	8003a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003f60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8003f70:	2344      	movs	r3, #68	; 0x44
 8003f72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f82:	2300      	movs	r3, #0
 8003f84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 8003f90:	2303      	movs	r3, #3
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003f94:	2300      	movs	r3, #0
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4807      	ldr	r0, [pc, #28]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003fa2:	f005 fed9 	bl	8009d58 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8003fac:	f7ff fd60 	bl	8003a70 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003fb0:	4803      	ldr	r0, [pc, #12]	; (8003fc0 <MX_TIM1_Init+0x1b8>)
 8003fb2:	f000 f9a3 	bl	80042fc <HAL_TIM_MspPostInit>

}
 8003fb6:	bf00      	nop
 8003fb8:	3770      	adds	r7, #112	; 0x70
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200006f0 	.word	0x200006f0
 8003fc4:	40012c00 	.word	0x40012c00

08003fc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08c      	sub	sp, #48	; 0x30
 8003fcc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	2224      	movs	r2, #36	; 0x24
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f008 fb0f 	bl	800c5fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fdc:	463b      	mov	r3, r7
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8003fe6:	4b21      	ldr	r3, [pc, #132]	; (800406c <MX_TIM4_Init+0xa4>)
 8003fe8:	4a21      	ldr	r2, [pc, #132]	; (8004070 <MX_TIM4_Init+0xa8>)
 8003fea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003fec:	4b1f      	ldr	r3, [pc, #124]	; (800406c <MX_TIM4_Init+0xa4>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	; (800406c <MX_TIM4_Init+0xa4>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8003ff8:	4b1c      	ldr	r3, [pc, #112]	; (800406c <MX_TIM4_Init+0xa4>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <MX_TIM4_Init+0xa4>)
 8004000:	2200      	movs	r2, #0
 8004002:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004004:	4b19      	ldr	r3, [pc, #100]	; (800406c <MX_TIM4_Init+0xa4>)
 8004006:	2200      	movs	r2, #0
 8004008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 800400a:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <MX_TIM4_Init+0xac>)
 800400c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004012:	2301      	movs	r3, #1
 8004014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800401e:	2300      	movs	r3, #0
 8004020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004022:	2301      	movs	r3, #1
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004026:	2300      	movs	r3, #0
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800402e:	f107 030c 	add.w	r3, r7, #12
 8004032:	4619      	mov	r1, r3
 8004034:	480d      	ldr	r0, [pc, #52]	; (800406c <MX_TIM4_Init+0xa4>)
 8004036:	f004 fb21 	bl	800867c <HAL_TIM_Encoder_Init>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004040:	f7ff fd16 	bl	8003a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENCODER_CLK;
 8004044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800404e:	463b      	mov	r3, r7
 8004050:	4619      	mov	r1, r3
 8004052:	4806      	ldr	r0, [pc, #24]	; (800406c <MX_TIM4_Init+0xa4>)
 8004054:	f005 fdfe 	bl	8009c54 <HAL_TIMEx_MasterConfigSynchronization>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800405e:	f7ff fd07 	bl	8003a70 <Error_Handler>
  }

}
 8004062:	bf00      	nop
 8004064:	3730      	adds	r7, #48	; 0x30
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200006a4 	.word	0x200006a4
 8004070:	40000800 	.word	0x40000800
 8004074:	00010006 	.word	0x00010006

08004078 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b09e      	sub	sp, #120	; 0x78
 800407c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800407e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800408c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800409c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80040a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	2234      	movs	r2, #52	; 0x34
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f008 fa9c 	bl	800c5fa <memset>

  htim8.Instance = TIM8;
 80040c2:	4b3e      	ldr	r3, [pc, #248]	; (80041bc <MX_TIM8_Init+0x144>)
 80040c4:	4a3e      	ldr	r2, [pc, #248]	; (80041c0 <MX_TIM8_Init+0x148>)
 80040c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80040c8:	4b3c      	ldr	r3, [pc, #240]	; (80041bc <MX_TIM8_Init+0x144>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ce:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <MX_TIM8_Init+0x144>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80040d4:	4b39      	ldr	r3, [pc, #228]	; (80041bc <MX_TIM8_Init+0x144>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040da:	4b38      	ldr	r3, [pc, #224]	; (80041bc <MX_TIM8_Init+0x144>)
 80040dc:	2200      	movs	r2, #0
 80040de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040e0:	4b36      	ldr	r3, [pc, #216]	; (80041bc <MX_TIM8_Init+0x144>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e6:	4b35      	ldr	r3, [pc, #212]	; (80041bc <MX_TIM8_Init+0x144>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80040ec:	4833      	ldr	r0, [pc, #204]	; (80041bc <MX_TIM8_Init+0x144>)
 80040ee:	f003 ff81 	bl	8007ff4 <HAL_TIM_Base_Init>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80040f8:	f7ff fcba 	bl	8003a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004100:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004102:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004106:	4619      	mov	r1, r3
 8004108:	482c      	ldr	r0, [pc, #176]	; (80041bc <MX_TIM8_Init+0x144>)
 800410a:	f004 fd8f 	bl	8008c2c <HAL_TIM_ConfigClockSource>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM8_Init+0xa0>
  {
    Error_Handler();
 8004114:	f7ff fcac 	bl	8003a70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8004118:	4828      	ldr	r0, [pc, #160]	; (80041bc <MX_TIM8_Init+0x144>)
 800411a:	f004 f98b 	bl	8008434 <HAL_TIM_IC_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8004124:	f7ff fca4 	bl	8003a70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004128:	2304      	movs	r3, #4
 800412a:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800412c:	2360      	movs	r3, #96	; 0x60
 800412e:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004130:	2300      	movs	r3, #0
 8004132:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.TriggerFilter = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8004138:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800413c:	4619      	mov	r1, r3
 800413e:	481f      	ldr	r0, [pc, #124]	; (80041bc <MX_TIM8_Init+0x144>)
 8004140:	f004 fe52 	bl	8008de8 <HAL_TIM_SlaveConfigSynchro>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800414a:	f7ff fc91 	bl	8003a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800414e:	2300      	movs	r3, #0
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004152:	2300      	movs	r3, #0
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004156:	2300      	movs	r3, #0
 8004158:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800415a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800415e:	4619      	mov	r1, r3
 8004160:	4816      	ldr	r0, [pc, #88]	; (80041bc <MX_TIM8_Init+0x144>)
 8004162:	f005 fd77 	bl	8009c54 <HAL_TIMEx_MasterConfigSynchronization>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800416c:	f7ff fc80 	bl	8003a70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004170:	2300      	movs	r3, #0
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004174:	2301      	movs	r3, #1
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004178:	2300      	movs	r3, #0
 800417a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004180:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004184:	2204      	movs	r2, #4
 8004186:	4619      	mov	r1, r3
 8004188:	480c      	ldr	r0, [pc, #48]	; (80041bc <MX_TIM8_Init+0x144>)
 800418a:	f004 fbaa 	bl	80088e2 <HAL_TIM_IC_ConfigChannel>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8004194:	f7ff fc6c 	bl	8003a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004198:	2300      	movs	r3, #0
 800419a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800419c:	2300      	movs	r3, #0
 800419e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4805      	ldr	r0, [pc, #20]	; (80041bc <MX_TIM8_Init+0x144>)
 80041a6:	f005 fdd7 	bl	8009d58 <HAL_TIMEx_ConfigBreakDeadTime>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 80041b0:	f7ff fc5e 	bl	8003a70 <Error_Handler>
  }

}
 80041b4:	bf00      	nop
 80041b6:	3778      	adds	r7, #120	; 0x78
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000658 	.word	0x20000658
 80041c0:	40013400 	.word	0x40013400

080041c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a20      	ldr	r2, [pc, #128]	; (8004264 <HAL_TIM_Base_MspInit+0xa0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d10c      	bne.n	8004200 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_TIM_Base_MspInit+0xa4>)
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <HAL_TIM_Base_MspInit+0xa4>)
 80041ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041f0:	6613      	str	r3, [r2, #96]	; 0x60
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_TIM_Base_MspInit+0xa4>)
 80041f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80041fe:	e02d      	b.n	800425c <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM8)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <HAL_TIM_Base_MspInit+0xa8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d128      	bne.n	800425c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800420a:	4b17      	ldr	r3, [pc, #92]	; (8004268 <HAL_TIM_Base_MspInit+0xa4>)
 800420c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420e:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_TIM_Base_MspInit+0xa4>)
 8004210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004214:	6613      	str	r3, [r2, #96]	; 0x60
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <HAL_TIM_Base_MspInit+0xa4>)
 8004218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <HAL_TIM_Base_MspInit+0xa4>)
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <HAL_TIM_Base_MspInit+0xa4>)
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800422e:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_TIM_Base_MspInit+0xa4>)
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800423a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800423e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004240:	2302      	movs	r3, #2
 8004242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004244:	2302      	movs	r3, #2
 8004246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004248:	2302      	movs	r3, #2
 800424a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800424c:	230a      	movs	r3, #10
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	4619      	mov	r1, r3
 8004256:	4806      	ldr	r0, [pc, #24]	; (8004270 <HAL_TIM_Base_MspInit+0xac>)
 8004258:	f002 f95c 	bl	8006514 <HAL_GPIO_Init>
}
 800425c:	bf00      	nop
 800425e:	3728      	adds	r7, #40	; 0x28
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40021000 	.word	0x40021000
 800426c:	40013400 	.word	0x40013400
 8004270:	48000400 	.word	0x48000400

08004274 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d127      	bne.n	80042e6 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004296:	4b17      	ldr	r3, [pc, #92]	; (80042f4 <HAL_TIM_Encoder_MspInit+0x80>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	4a16      	ldr	r2, [pc, #88]	; (80042f4 <HAL_TIM_Encoder_MspInit+0x80>)
 800429c:	f043 0304 	orr.w	r3, r3, #4
 80042a0:	6593      	str	r3, [r2, #88]	; 0x58
 80042a2:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <HAL_TIM_Encoder_MspInit+0x80>)
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HAL_TIM_Encoder_MspInit+0x80>)
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	4a10      	ldr	r2, [pc, #64]	; (80042f4 <HAL_TIM_Encoder_MspInit+0x80>)
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <HAL_TIM_Encoder_MspInit+0x80>)
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 80042c6:	23c0      	movs	r3, #192	; 0xc0
 80042c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ca:	2302      	movs	r3, #2
 80042cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042ce:	2302      	movs	r3, #2
 80042d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042d2:	2302      	movs	r3, #2
 80042d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042d6:	2302      	movs	r3, #2
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042da:	f107 0314 	add.w	r3, r7, #20
 80042de:	4619      	mov	r1, r3
 80042e0:	4805      	ldr	r0, [pc, #20]	; (80042f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80042e2:	f002 f917 	bl	8006514 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80042e6:	bf00      	nop
 80042e8:	3728      	adds	r7, #40	; 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40000800 	.word	0x40000800
 80042f4:	40021000 	.word	0x40021000
 80042f8:	48000400 	.word	0x48000400

080042fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	60da      	str	r2, [r3, #12]
 8004312:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a38      	ldr	r2, [pc, #224]	; (80043fc <HAL_TIM_MspPostInit+0x100>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d169      	bne.n	80043f2 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800431e:	4b38      	ldr	r3, [pc, #224]	; (8004400 <HAL_TIM_MspPostInit+0x104>)
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	4a37      	ldr	r2, [pc, #220]	; (8004400 <HAL_TIM_MspPostInit+0x104>)
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800432a:	4b35      	ldr	r3, [pc, #212]	; (8004400 <HAL_TIM_MspPostInit+0x104>)
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004336:	4b32      	ldr	r3, [pc, #200]	; (8004400 <HAL_TIM_MspPostInit+0x104>)
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	4a31      	ldr	r2, [pc, #196]	; (8004400 <HAL_TIM_MspPostInit+0x104>)
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004342:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <HAL_TIM_MspPostInit+0x104>)
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800434e:	4b2c      	ldr	r3, [pc, #176]	; (8004400 <HAL_TIM_MspPostInit+0x104>)
 8004350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004352:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_TIM_MspPostInit+0x104>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800435a:	4b29      	ldr	r3, [pc, #164]	; (8004400 <HAL_TIM_MspPostInit+0x104>)
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800436a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436c:	2302      	movs	r3, #2
 800436e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004370:	2302      	movs	r3, #2
 8004372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004374:	2300      	movs	r3, #0
 8004376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004378:	2304      	movs	r3, #4
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4619      	mov	r1, r3
 8004382:	4820      	ldr	r0, [pc, #128]	; (8004404 <HAL_TIM_MspPostInit+0x108>)
 8004384:	f002 f8c6 	bl	8006514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438e:	2302      	movs	r3, #2
 8004390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004392:	2302      	movs	r3, #2
 8004394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004396:	2302      	movs	r3, #2
 8004398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800439a:	2304      	movs	r3, #4
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800439e:	f107 0314 	add.w	r3, r7, #20
 80043a2:	4619      	mov	r1, r3
 80043a4:	4818      	ldr	r0, [pc, #96]	; (8004408 <HAL_TIM_MspPostInit+0x10c>)
 80043a6:	f002 f8b5 	bl	8006514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80043aa:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80043ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b0:	2302      	movs	r3, #2
 80043b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043b4:	2302      	movs	r3, #2
 80043b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043b8:	2302      	movs	r3, #2
 80043ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80043bc:	2306      	movs	r3, #6
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	4619      	mov	r1, r3
 80043c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ca:	f002 f8a3 	bl	8006514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d4:	2302      	movs	r3, #2
 80043d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043dc:	2300      	movs	r3, #0
 80043de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80043e0:	230b      	movs	r3, #11
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	4619      	mov	r1, r3
 80043ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ee:	f002 f891 	bl	8006514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043f2:	bf00      	nop
 80043f4:	3728      	adds	r7, #40	; 0x28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40021000 	.word	0x40021000
 8004404:	48000800 	.word	0x48000800
 8004408:	48000400 	.word	0x48000400

0800440c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004410:	4b22      	ldr	r3, [pc, #136]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004412:	4a23      	ldr	r2, [pc, #140]	; (80044a0 <MX_USART2_UART_Init+0x94>)
 8004414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004416:	4b21      	ldr	r3, [pc, #132]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800441c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004420:	2200      	movs	r2, #0
 8004422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004424:	4b1d      	ldr	r3, [pc, #116]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004426:	2200      	movs	r2, #0
 8004428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <MX_USART2_UART_Init+0x90>)
 800442c:	2200      	movs	r2, #0
 800442e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004432:	220c      	movs	r2, #12
 8004434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004436:	4b19      	ldr	r3, [pc, #100]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004438:	2200      	movs	r2, #0
 800443a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <MX_USART2_UART_Init+0x90>)
 800443e:	2200      	movs	r2, #0
 8004440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004444:	2200      	movs	r2, #0
 8004446:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <MX_USART2_UART_Init+0x90>)
 800444a:	2200      	movs	r2, #0
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004450:	2200      	movs	r2, #0
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004454:	4811      	ldr	r0, [pc, #68]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004456:	f005 fd44 	bl	8009ee2 <HAL_UART_Init>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004460:	f7ff fb06 	bl	8003a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004464:	2100      	movs	r1, #0
 8004466:	480d      	ldr	r0, [pc, #52]	; (800449c <MX_USART2_UART_Init+0x90>)
 8004468:	f007 fd29 	bl	800bebe <HAL_UARTEx_SetTxFifoThreshold>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004472:	f7ff fafd 	bl	8003a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004476:	2100      	movs	r1, #0
 8004478:	4808      	ldr	r0, [pc, #32]	; (800449c <MX_USART2_UART_Init+0x90>)
 800447a:	f007 fd5e 	bl	800bf3a <HAL_UARTEx_SetRxFifoThreshold>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004484:	f7ff faf4 	bl	8003a70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004488:	4804      	ldr	r0, [pc, #16]	; (800449c <MX_USART2_UART_Init+0x90>)
 800448a:	f007 fcdf 	bl	800be4c <HAL_UARTEx_DisableFifoMode>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004494:	f7ff faec 	bl	8003a70 <Error_Handler>
  }

}
 8004498:	bf00      	nop
 800449a:	bd80      	pop	{r7, pc}
 800449c:	2000073c 	.word	0x2000073c
 80044a0:	40004400 	.word	0x40004400

080044a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	f107 0314 	add.w	r3, r7, #20
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_UART_MspInit+0x8c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d12f      	bne.n	8004526 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044c6:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <HAL_UART_MspInit+0x90>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <HAL_UART_MspInit+0x90>)
 80044cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d0:	6593      	str	r3, [r2, #88]	; 0x58
 80044d2:	4b18      	ldr	r3, [pc, #96]	; (8004534 <HAL_UART_MspInit+0x90>)
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044de:	4b15      	ldr	r3, [pc, #84]	; (8004534 <HAL_UART_MspInit+0x90>)
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <HAL_UART_MspInit+0x90>)
 80044e4:	f043 0302 	orr.w	r3, r3, #2
 80044e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_UART_MspInit+0x90>)
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80044f6:	2318      	movs	r3, #24
 80044f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fa:	2302      	movs	r3, #2
 80044fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004502:	2302      	movs	r3, #2
 8004504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004506:	2307      	movs	r3, #7
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800450a:	f107 0314 	add.w	r3, r7, #20
 800450e:	4619      	mov	r1, r3
 8004510:	4809      	ldr	r0, [pc, #36]	; (8004538 <HAL_UART_MspInit+0x94>)
 8004512:	f001 ffff 	bl	8006514 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004516:	2200      	movs	r2, #0
 8004518:	2101      	movs	r1, #1
 800451a:	2026      	movs	r0, #38	; 0x26
 800451c:	f001 ff5f 	bl	80063de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004520:	2026      	movs	r0, #38	; 0x26
 8004522:	f001 ff76 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004526:	bf00      	nop
 8004528:	3728      	adds	r7, #40	; 0x28
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40004400 	.word	0x40004400
 8004534:	40021000 	.word	0x40021000
 8004538:	48000400 	.word	0x48000400

0800453c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800453c:	480d      	ldr	r0, [pc, #52]	; (8004574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800453e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004540:	480d      	ldr	r0, [pc, #52]	; (8004578 <LoopForever+0x6>)
  ldr r1, =_edata
 8004542:	490e      	ldr	r1, [pc, #56]	; (800457c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004544:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <LoopForever+0xe>)
  movs r3, #0
 8004546:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004548:	e002      	b.n	8004550 <LoopCopyDataInit>

0800454a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800454a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800454c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800454e:	3304      	adds	r3, #4

08004550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004554:	d3f9      	bcc.n	800454a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004556:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004558:	4c0b      	ldr	r4, [pc, #44]	; (8004588 <LoopForever+0x16>)
  movs r3, #0
 800455a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800455c:	e001      	b.n	8004562 <LoopFillZerobss>

0800455e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800455e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004560:	3204      	adds	r2, #4

08004562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004564:	d3fb      	bcc.n	800455e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004566:	f7ff fc39 	bl	8003ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800456a:	f007 ffe3 	bl	800c534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800456e:	f7ff f9f3 	bl	8003958 <main>

08004572 <LoopForever>:

LoopForever:
    b LoopForever
 8004572:	e7fe      	b.n	8004572 <LoopForever>
  ldr   r0, =_estack
 8004574:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800457c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004580:	08011918 	.word	0x08011918
  ldr r2, =_sbss
 8004584:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004588:	200007d0 	.word	0x200007d0

0800458c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800458c:	e7fe      	b.n	800458c <COMP1_2_3_IRQHandler>

0800458e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004598:	2003      	movs	r0, #3
 800459a:	f001 ff15 	bl	80063c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800459e:	2000      	movs	r0, #0
 80045a0:	f000 f80e 	bl	80045c0 <HAL_InitTick>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	71fb      	strb	r3, [r7, #7]
 80045ae:	e001      	b.n	80045b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80045b0:	f7ff fb76 	bl	8003ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80045b4:	79fb      	ldrb	r3, [r7, #7]

}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80045cc:	4b16      	ldr	r3, [pc, #88]	; (8004628 <HAL_InitTick+0x68>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d022      	beq.n	800461a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80045d4:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_InitTick+0x6c>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_InitTick+0x68>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80045e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 ff20 	bl	800642e <HAL_SYSTICK_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10f      	bne.n	8004614 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b0f      	cmp	r3, #15
 80045f8:	d809      	bhi.n	800460e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045fa:	2200      	movs	r2, #0
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004602:	f001 feec 	bl	80063de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <HAL_InitTick+0x70>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	e007      	b.n	800461e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
 8004612:	e004      	b.n	800461e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
 8004618:	e001      	b.n	800461e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000014 	.word	0x20000014
 800462c:	2000000c 	.word	0x2000000c
 8004630:	20000010 	.word	0x20000010

08004634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <HAL_IncTick+0x1c>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_IncTick+0x20>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4413      	add	r3, r2
 8004642:	4a03      	ldr	r2, [pc, #12]	; (8004650 <HAL_IncTick+0x1c>)
 8004644:	6013      	str	r3, [r2, #0]
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	200007c8 	.word	0x200007c8
 8004654:	20000014 	.word	0x20000014

08004658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return uwTick;
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <HAL_GetTick+0x14>)
 800465e:	681b      	ldr	r3, [r3, #0]
}
 8004660:	4618      	mov	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	200007c8 	.word	0x200007c8

08004670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004678:	f7ff ffee 	bl	8004658 <HAL_GetTick>
 800467c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004688:	d004      	beq.n	8004694 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <HAL_Delay+0x40>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004694:	bf00      	nop
 8004696:	f7ff ffdf 	bl	8004658 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d8f7      	bhi.n	8004696 <HAL_Delay+0x26>
  {
  }
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000014 	.word	0x20000014

080046b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 031f 	and.w	r3, r3, #31
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800476e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6093      	str	r3, [r2, #8]
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004796:	d101      	bne.n	800479c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80047ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e6:	d101      	bne.n	80047ec <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800480a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800480e:	f043 0201 	orr.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004832:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004836:	f043 0202 	orr.w	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <LL_ADC_IsEnabled+0x18>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <LL_ADC_IsEnabled+0x1a>
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d101      	bne.n	8004888 <LL_ADC_IsDisableOngoing+0x18>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <LL_ADC_IsDisableOngoing+0x1a>
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d101      	bne.n	80048ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d101      	bne.n	80048d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e16b      	b.n	8004bd6 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fc fc87 	bl	8001220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff ff2c 	bl	8004782 <LL_ADC_IsDeepPowerDownEnabled>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff ff12 	bl	800475e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ff47 	bl	80047d2 <LL_ADC_IsInternalRegulatorEnabled>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d113      	bne.n	8004972 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff ff2b 	bl	80047aa <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004954:	4ba2      	ldr	r3, [pc, #648]	; (8004be0 <HAL_ADC_Init+0x2fc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	099b      	lsrs	r3, r3, #6
 800495a:	4aa2      	ldr	r2, [pc, #648]	; (8004be4 <HAL_ADC_Init+0x300>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	099b      	lsrs	r3, r3, #6
 8004962:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004964:	e002      	b.n	800496c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	3b01      	subs	r3, #1
 800496a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f9      	bne.n	8004966 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ff2b 	bl	80047d2 <LL_ADC_IsInternalRegulatorEnabled>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10d      	bne.n	800499e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	f043 0210 	orr.w	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff ff77 	bl	8004896 <LL_ADC_REG_IsConversionOngoing>
 80049a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 8106 	bne.w	8004bc4 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 8102 	bne.w	8004bc4 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049c8:	f043 0202 	orr.w	r2, r3, #2
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff38 	bl	800484a <LL_ADC_IsEnabled>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d111      	bne.n	8004a04 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80049e4:	f7ff ff31 	bl	800484a <LL_ADC_IsEnabled>
 80049e8:	4604      	mov	r4, r0
 80049ea:	487f      	ldr	r0, [pc, #508]	; (8004be8 <HAL_ADC_Init+0x304>)
 80049ec:	f7ff ff2d 	bl	800484a <LL_ADC_IsEnabled>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4323      	orrs	r3, r4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4619      	mov	r1, r3
 80049fe:	487b      	ldr	r0, [pc, #492]	; (8004bec <HAL_ADC_Init+0x308>)
 8004a00:	f7ff fe58 	bl	80046b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7f5b      	ldrb	r3, [r3, #29]
 8004a08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004a14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004a1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d106      	bne.n	8004a40 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	3b01      	subs	r3, #1
 8004a38:	045b      	lsls	r3, r3, #17
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d009      	beq.n	8004a5c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	4b63      	ldr	r3, [pc, #396]	; (8004bf0 <HAL_ADC_Init+0x30c>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	69b9      	ldr	r1, [r7, #24]
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff ff03 	bl	8004896 <LL_ADC_REG_IsConversionOngoing>
 8004a90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff ff10 	bl	80048bc <LL_ADC_INJ_IsConversionOngoing>
 8004a9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d16d      	bne.n	8004b80 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d16a      	bne.n	8004b80 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004aae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ab6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac6:	f023 0302 	bic.w	r3, r3, #2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	69b9      	ldr	r1, [r7, #24]
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d017      	beq.n	8004b0c <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004aea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004af4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6911      	ldr	r1, [r2, #16]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004b0a:	e013      	b.n	8004b34 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b30:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d118      	bne.n	8004b70 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b54:	4311      	orrs	r1, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b60:	430a      	orrs	r2, r1
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0201 	orr.w	r2, r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
 8004b6e:	e007      	b.n	8004b80 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10c      	bne.n	8004ba2 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	f023 010f 	bic.w	r1, r3, #15
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	1e5a      	subs	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8004ba0:	e007      	b.n	8004bb2 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 020f 	bic.w	r2, r2, #15
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb6:	f023 0303 	bic.w	r3, r3, #3
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bc2:	e007      	b.n	8004bd4 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc8:	f043 0210 	orr.w	r2, r3, #16
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3724      	adds	r7, #36	; 0x24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd90      	pop	{r4, r7, pc}
 8004bde:	bf00      	nop
 8004be0:	2000000c 	.word	0x2000000c
 8004be4:	053e2d63 	.word	0x053e2d63
 8004be8:	50000100 	.word	0x50000100
 8004bec:	50000300 	.word	0x50000300
 8004bf0:	fff04007 	.word	0xfff04007

08004bf4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c10:	4883      	ldr	r0, [pc, #524]	; (8004e20 <HAL_ADC_IRQHandler+0x22c>)
 8004c12:	f7ff fd88 	bl	8004726 <LL_ADC_GetMultimode>
 8004c16:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d017      	beq.n	8004c52 <HAL_ADC_IRQHandler+0x5e>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d105      	bne.n	8004c44 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fded 	bl	8005824 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <HAL_ADC_IRQHandler+0x72>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8085 	beq.w	8004d7c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d07f      	beq.n	8004d7c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fd1e 	bl	80046da <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d064      	beq.n	8004d6e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5e      	ldr	r2, [pc, #376]	; (8004e24 <HAL_ADC_IRQHandler+0x230>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d002      	beq.n	8004cb4 <HAL_ADC_IRQHandler+0xc0>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	e001      	b.n	8004cb8 <HAL_ADC_IRQHandler+0xc4>
 8004cb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d008      	beq.n	8004cd2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b05      	cmp	r3, #5
 8004cca:	d002      	beq.n	8004cd2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2b09      	cmp	r3, #9
 8004cd0:	d104      	bne.n	8004cdc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	623b      	str	r3, [r7, #32]
 8004cda:	e00d      	b.n	8004cf8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a50      	ldr	r2, [pc, #320]	; (8004e24 <HAL_ADC_IRQHandler+0x230>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d002      	beq.n	8004cec <HAL_ADC_IRQHandler+0xf8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	e001      	b.n	8004cf0 <HAL_ADC_IRQHandler+0xfc>
 8004cec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004cf0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d135      	bne.n	8004d6e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d12e      	bne.n	8004d6e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fdbe 	bl	8004896 <LL_ADC_REG_IsConversionOngoing>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d11a      	bne.n	8004d56 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 020c 	bic.w	r2, r2, #12
 8004d2e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d112      	bne.n	8004d6e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4c:	f043 0201 	orr.w	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d54:	e00b      	b.n	8004d6e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5a:	f043 0210 	orr.w	r2, r3, #16
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	f043 0201 	orr.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f95a 	bl	8005028 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	220c      	movs	r2, #12
 8004d7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <HAL_ADC_IRQHandler+0x19c>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 809e 	beq.w	8004ed8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8098 	beq.w	8004ed8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fc9b 	bl	8004700 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004dca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff fc82 	bl	80046da <LL_ADC_REG_IsTriggerSourceSWStart>
 8004dd6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <HAL_ADC_IRQHandler+0x230>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d002      	beq.n	8004de8 <HAL_ADC_IRQHandler+0x1f4>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	e001      	b.n	8004dec <HAL_ADC_IRQHandler+0x1f8>
 8004de8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d008      	beq.n	8004e06 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b06      	cmp	r3, #6
 8004dfe:	d002      	beq.n	8004e06 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b07      	cmp	r3, #7
 8004e04:	d104      	bne.n	8004e10 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	623b      	str	r3, [r7, #32]
 8004e0e:	e011      	b.n	8004e34 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a03      	ldr	r2, [pc, #12]	; (8004e24 <HAL_ADC_IRQHandler+0x230>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d006      	beq.n	8004e28 <HAL_ADC_IRQHandler+0x234>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	e005      	b.n	8004e2c <HAL_ADC_IRQHandler+0x238>
 8004e20:	50000300 	.word	0x50000300
 8004e24:	50000100 	.word	0x50000100
 8004e28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e2c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10c      	bne.n	8004e54 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d142      	bne.n	8004eca <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03f      	beq.n	8004eca <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d13a      	bne.n	8004eca <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d133      	bne.n	8004eca <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d12e      	bne.n	8004eca <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fd23 	bl	80048bc <LL_ADC_INJ_IsConversionOngoing>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11a      	bne.n	8004eb2 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e8a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d112      	bne.n	8004eca <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eb0:	e00b      	b.n	8004eca <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb6:	f043 0210 	orr.w	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec2:	f043 0201 	orr.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fe f804 	bl	8002ed8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2260      	movs	r2, #96	; 0x60
 8004ed6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d011      	beq.n	8004f06 <HAL_ADC_IRQHandler+0x312>
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00c      	beq.n	8004f06 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f89f 	bl	800503c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2280      	movs	r2, #128	; 0x80
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d012      	beq.n	8004f36 <HAL_ADC_IRQHandler+0x342>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fc68 	bl	80057fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d012      	beq.n	8004f66 <HAL_ADC_IRQHandler+0x372>
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00d      	beq.n	8004f66 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fc5a 	bl	8005810 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d036      	beq.n	8004fde <HAL_ADC_IRQHandler+0x3ea>
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d031      	beq.n	8004fde <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004f82:	2301      	movs	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	e014      	b.n	8004fb2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004f8e:	4825      	ldr	r0, [pc, #148]	; (8005024 <HAL_ADC_IRQHandler+0x430>)
 8004f90:	f7ff fbd7 	bl	8004742 <LL_ADC_GetMultiDMATransfer>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9e:	e008      	b.n	8004fb2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc8:	f043 0202 	orr.w	r2, r3, #2
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f83d 	bl	8005050 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2210      	movs	r2, #16
 8004fdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d018      	beq.n	800501a <HAL_ADC_IRQHandler+0x426>
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d013      	beq.n	800501a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005002:	f043 0208 	orr.w	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005012:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fbe7 	bl	80057e8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800501a:	bf00      	nop
 800501c:	3728      	adds	r7, #40	; 0x28
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	50000300 	.word	0x50000300

08005028 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fbea 	bl	800484a <LL_ADC_IsEnabled>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d146      	bne.n	800510a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	4b24      	ldr	r3, [pc, #144]	; (8005114 <ADC_Enable+0xb0>)
 8005084:	4013      	ands	r3, r2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	f043 0210 	orr.w	r2, r3, #16
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509a:	f043 0201 	orr.w	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e032      	b.n	800510c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fba5 	bl	80047fa <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050b0:	f7ff fad2 	bl	8004658 <HAL_GetTick>
 80050b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050b6:	e021      	b.n	80050fc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fbc4 	bl	800484a <LL_ADC_IsEnabled>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fb94 	bl	80047fa <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050d2:	f7ff fac1 	bl	8004658 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d90d      	bls.n	80050fc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e4:	f043 0210 	orr.w	r2, r3, #16
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f0:	f043 0201 	orr.w	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e007      	b.n	800510c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d1d6      	bne.n	80050b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	8000003f 	.word	0x8000003f

08005118 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fba3 	bl	8004870 <LL_ADC_IsDisableOngoing>
 800512a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fb8a 	bl	800484a <LL_ADC_IsEnabled>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d040      	beq.n	80051be <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d13d      	bne.n	80051be <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 030d 	and.w	r3, r3, #13
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10c      	bne.n	800516a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fb64 	bl	8004822 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2203      	movs	r2, #3
 8005160:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005162:	f7ff fa79 	bl	8004658 <HAL_GetTick>
 8005166:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005168:	e022      	b.n	80051b0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	f043 0210 	orr.w	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	f043 0201 	orr.w	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e01c      	b.n	80051c0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005186:	f7ff fa67 	bl	8004658 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d90d      	bls.n	80051b0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005198:	f043 0210 	orr.w	r2, r3, #16
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a4:	f043 0201 	orr.w	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e007      	b.n	80051c0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e3      	bne.n	8005186 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <LL_ADC_SetCommonPathInternalCh>:
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	609a      	str	r2, [r3, #8]
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <LL_ADC_GetCommonPathInternalCh>:
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <LL_ADC_SetOffset>:
{
 800520c:	b490      	push	{r4, r7}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3360      	adds	r3, #96	; 0x60
 800521e:	461a      	mov	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <LL_ADC_SetOffset+0x40>)
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800523e:	6023      	str	r3, [r4, #0]
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bc90      	pop	{r4, r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	03fff000 	.word	0x03fff000

08005250 <LL_ADC_GetOffsetChannel>:
{
 8005250:	b490      	push	{r4, r7}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3360      	adds	r3, #96	; 0x60
 800525e:	461a      	mov	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bc90      	pop	{r4, r7}
 8005276:	4770      	bx	lr

08005278 <LL_ADC_SetOffsetState>:
{
 8005278:	b490      	push	{r4, r7}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3360      	adds	r3, #96	; 0x60
 8005288:	461a      	mov	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4313      	orrs	r3, r2
 800529c:	6023      	str	r3, [r4, #0]
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc90      	pop	{r4, r7}
 80052a6:	4770      	bx	lr

080052a8 <LL_ADC_SetOffsetSign>:
{
 80052a8:	b490      	push	{r4, r7}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3360      	adds	r3, #96	; 0x60
 80052b8:	461a      	mov	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	6023      	str	r3, [r4, #0]
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc90      	pop	{r4, r7}
 80052d6:	4770      	bx	lr

080052d8 <LL_ADC_SetOffsetSaturation>:
{
 80052d8:	b490      	push	{r4, r7}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3360      	adds	r3, #96	; 0x60
 80052e8:	461a      	mov	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	6023      	str	r3, [r4, #0]
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bc90      	pop	{r4, r7}
 8005306:	4770      	bx	lr

08005308 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	615a      	str	r2, [r3, #20]
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_ADC_INJ_GetTrigAuto>:
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <LL_ADC_SetChannelSamplingTime>:
{
 800534a:	b490      	push	{r4, r7}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3314      	adds	r3, #20
 800535a:	461a      	mov	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	0e5b      	lsrs	r3, r3, #25
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	4413      	add	r3, r2
 8005368:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	0d1b      	lsrs	r3, r3, #20
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	2107      	movs	r1, #7
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	43db      	mvns	r3, r3
 800537c:	401a      	ands	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	0d1b      	lsrs	r3, r3, #20
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	fa01 f303 	lsl.w	r3, r1, r3
 800538c:	4313      	orrs	r3, r2
 800538e:	6023      	str	r3, [r4, #0]
}
 8005390:	bf00      	nop
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bc90      	pop	{r4, r7}
 8005398:	4770      	bx	lr
	...

0800539c <LL_ADC_SetChannelSingleDiff>:
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b4:	43db      	mvns	r3, r3
 80053b6:	401a      	ands	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0318 	and.w	r3, r3, #24
 80053be:	4908      	ldr	r1, [pc, #32]	; (80053e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80053c0:	40d9      	lsrs	r1, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	400b      	ands	r3, r1
 80053c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ca:	431a      	orrs	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	0007ffff 	.word	0x0007ffff

080053e4 <LL_ADC_GetMultimode>:
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 031f 	and.w	r3, r3, #31
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <LL_ADC_IsEnabled>:
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <LL_ADC_IsEnabled+0x18>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <LL_ADC_IsEnabled+0x1a>
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <LL_ADC_StartCalibration>:
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005442:	4313      	orrs	r3, r2
 8005444:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	609a      	str	r2, [r3, #8]
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <LL_ADC_IsCalibrationOnGoing>:
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800546c:	d101      	bne.n	8005472 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <LL_ADC_REG_IsConversionOngoing>:
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b04      	cmp	r3, #4
 8005492:	d101      	bne.n	8005498 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_ADC_INJ_StartConversion>:
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054ba:	f043 0208 	orr.w	r2, r3, #8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	609a      	str	r2, [r3, #8]
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <LL_ADC_INJ_IsConversionOngoing>:
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d101      	bne.n	80054e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_ADCEx_Calibration_Start+0x1c>
 800550c:	2302      	movs	r3, #2
 800550e:	e04d      	b.n	80055ac <HAL_ADCEx_Calibration_Start+0xb8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fdfd 	bl	8005118 <ADC_Disable>
 800551e:	4603      	mov	r3, r0
 8005520:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d136      	bne.n	8005596 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005530:	f023 0302 	bic.w	r3, r3, #2
 8005534:	f043 0202 	orr.w	r2, r3, #2
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff ff6f 	bl	8005426 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005548:	e014      	b.n	8005574 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3301      	adds	r3, #1
 800554e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d90d      	bls.n	8005574 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555c:	f023 0312 	bic.w	r3, r3, #18
 8005560:	f043 0210 	orr.w	r2, r3, #16
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e01b      	b.n	80055ac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ff6d 	bl	8005458 <LL_ADC_IsCalibrationOnGoing>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e2      	bne.n	800554a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	f023 0303 	bic.w	r3, r3, #3
 800558c:	f043 0201 	orr.w	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	65da      	str	r2, [r3, #92]	; 0x5c
 8005594:	e005      	b.n	80055a2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	f043 0210 	orr.w	r2, r3, #16
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	0004de01 	.word	0x0004de01

080055b8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055c0:	486e      	ldr	r0, [pc, #440]	; (800577c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80055c2:	f7ff ff0f 	bl	80053e4 <LL_ADC_GetMultimode>
 80055c6:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff ff7e 	bl	80054ce <LL_ADC_INJ_IsConversionOngoing>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
 80055da:	e0ca      	b.n	8005772 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e6:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ee:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d107      	bne.n	800560c <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0b2      	b.n	8005772 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_ADCEx_InjectedStart_IT+0x62>
 8005616:	2302      	movs	r3, #2
 8005618:	e0ab      	b.n	8005772 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fd1e 	bl	8005064 <ADC_Enable>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f040 809a 	bne.w	8005768 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005644:	f023 0208 	bic.w	r2, r3, #8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	661a      	str	r2, [r3, #96]	; 0x60
 800564c:	e002      	b.n	8005654 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005658:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a44      	ldr	r2, [pc, #272]	; (8005780 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d002      	beq.n	8005678 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	e001      	b.n	800567c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8005678:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	4293      	cmp	r3, r2
 8005682:	d002      	beq.n	800568a <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d105      	bne.n	8005696 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2260      	movs	r2, #96	; 0x60
 800569c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056c2:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d110      	bne.n	80056ee <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0220 	bic.w	r2, r2, #32
 80056da:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ea:	605a      	str	r2, [r3, #4]
          break;
 80056ec:	e010      	b.n	8005710 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fc:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0220 	orr.w	r2, r2, #32
 800570c:	605a      	str	r2, [r3, #4]
          break;
 800570e:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d002      	beq.n	8005720 <HAL_ADCEx_InjectedStart_IT+0x168>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	e001      	b.n	8005724 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8005720:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	4293      	cmp	r3, r2
 800572a:	d008      	beq.n	800573e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b06      	cmp	r3, #6
 8005736:	d002      	beq.n	800573e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b07      	cmp	r3, #7
 800573c:	d10d      	bne.n	800575a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fdf3 	bl	800532e <LL_ADC_INJ_GetTrigAuto>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d110      	bne.n	8005770 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fea7 	bl	80054a6 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005758:	e00a      	b.n	8005770 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	65da      	str	r2, [r3, #92]	; 0x5c
 8005766:	e003      	b.n	8005770 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	50000300 	.word	0x50000300
 8005780:	50000100 	.word	0x50000100

08005784 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f240 2215 	movw	r2, #533	; 0x215
 8005794:	4293      	cmp	r3, r2
 8005796:	d00e      	beq.n	80057b6 <HAL_ADCEx_InjectedGetValue+0x32>
 8005798:	f240 321b 	movw	r2, #795	; 0x31b
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_ADCEx_InjectedGetValue+0x26>
 80057a0:	f240 120f 	movw	r2, #271	; 0x10f
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00c      	beq.n	80057c2 <HAL_ADCEx_InjectedGetValue+0x3e>
 80057a8:	e011      	b.n	80057ce <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b2:	60fb      	str	r3, [r7, #12]
      break;
 80057b4:	e011      	b.n	80057da <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	60fb      	str	r3, [r7, #12]
      break;
 80057c0:	e00b      	b.n	80057da <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ca:	60fb      	str	r3, [r7, #12]
      break;
 80057cc:	e005      	b.n	80057da <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d6:	60fb      	str	r3, [r7, #12]
      break;
 80057d8:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b0a8      	sub	sp, #160	; 0xa0
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005858:	2b01      	cmp	r3, #1
 800585a:	d102      	bne.n	8005862 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800585c:	2302      	movs	r3, #2
 800585e:	f000 bc39 	b.w	80060d4 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005876:	2b01      	cmp	r3, #1
 8005878:	d130      	bne.n	80058dc <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b09      	cmp	r3, #9
 8005880:	d179      	bne.n	8005976 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d010      	beq.n	80058ac <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	0e9b      	lsrs	r3, r3, #26
 8005890:	025b      	lsls	r3, r3, #9
 8005892:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800589e:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058aa:	e007      	b.n	80058bc <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	0e9b      	lsrs	r3, r3, #26
 80058b2:	025b      	lsls	r3, r3, #9
 80058b4:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80058b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058c2:	4ba3      	ldr	r3, [pc, #652]	; (8005b50 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80058ce:	430b      	orrs	r3, r1
 80058d0:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80058d8:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80058da:	e04c      	b.n	8005976 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11d      	bne.n	8005920 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00d      	beq.n	8005916 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005908:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005914:	e004      	b.n	8005920 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	3b01      	subs	r3, #1
 800591c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	0e9b      	lsrs	r3, r3, #26
 8005926:	f003 021f 	and.w	r2, r3, #31
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005944:	1e5a      	subs	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800594e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005966:	4b7a      	ldr	r3, [pc, #488]	; (8005b50 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8005968:	4013      	ands	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	430b      	orrs	r3, r1
 8005974:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fda7 	bl	80054ce <LL_ADC_INJ_IsConversionOngoing>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d124      	bne.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800598c:	2b00      	cmp	r3, #0
 800598e:	d112      	bne.n	80059b6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80059a0:	055a      	lsls	r2, r3, #21
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059a8:	051b      	lsls	r3, r3, #20
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	60da      	str	r2, [r3, #12]
 80059b4:	e00c      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80059c6:	055a      	lsls	r2, r3, #21
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fd53 	bl	8005480 <LL_ADC_REG_IsConversionOngoing>
 80059da:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fd73 	bl	80054ce <LL_ADC_INJ_IsConversionOngoing>
 80059e8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f040 81d4 	bne.w	8005d9e <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 81cf 	bne.w	8005d9e <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d116      	bne.n	8005a3e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d108      	bne.n	8005a2c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005a28:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005a2a:	e01f      	b.n	8005a6c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005a3a:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005a3c:	e016      	b.n	8005a6c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d109      	bne.n	8005a5c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8005a5a:	e007      	b.n	8005a6c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005a6a:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d110      	bne.n	8005a98 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0202 	orr.w	r2, r2, #2
 8005a94:	611a      	str	r2, [r3, #16]
 8005a96:	e007      	b.n	8005aa8 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0202 	bic.w	r2, r2, #2
 8005aa6:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab0:	d10f      	bne.n	8005ad2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	4619      	mov	r1, r3
 8005abe:	f7ff fc44 	bl	800534a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fc1c 	bl	8005308 <LL_ADC_SetSamplingTimeCommonConfig>
 8005ad0:	e00e      	b.n	8005af0 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6819      	ldr	r1, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f7ff fc33 	bl	800534a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fc0c 	bl	8005308 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	08db      	lsrs	r3, r3, #3
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d025      	beq.n	8005b5e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6919      	ldr	r1, [r3, #16]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b22:	f7ff fb73 	bl	800520c <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6919      	ldr	r1, [r3, #16]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f7ff fbb8 	bl	80052a8 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d105      	bne.n	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8005b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b4c:	e003      	b.n	8005b56 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8005b4e:	bf00      	nop
 8005b50:	04104000 	.word	0x04104000
 8005b54:	2300      	movs	r3, #0
 8005b56:	461a      	mov	r2, r3
 8005b58:	f7ff fbbe 	bl	80052d8 <LL_ADC_SetOffsetSaturation>
 8005b5c:	e11f      	b.n	8005d9e <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2100      	movs	r1, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff fb73 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fb68 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005b80:	4603      	mov	r3, r0
 8005b82:	0e9b      	lsrs	r3, r3, #26
 8005b84:	f003 021f 	and.w	r2, r3, #31
 8005b88:	e014      	b.n	8005bb4 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff fb5d 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ba0:	fa93 f3a3 	rbit	r3, r3
 8005ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bac:	fab3 f383 	clz	r3, r3
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d105      	bne.n	8005bcc <HAL_ADCEx_InjectedConfigChannel+0x394>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	0e9b      	lsrs	r3, r3, #26
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	e00a      	b.n	8005be2 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bd4:	fa93 f3a3 	rbit	r3, r3
 8005bd8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bdc:	fab3 f383 	clz	r3, r3
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d106      	bne.n	8005bf4 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fb42 	bl	8005278 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff fb28 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2101      	movs	r1, #1
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fb1d 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005c16:	4603      	mov	r3, r0
 8005c18:	0e9b      	lsrs	r3, r3, #26
 8005c1a:	f003 021f 	and.w	r2, r3, #31
 8005c1e:	e010      	b.n	8005c42 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2101      	movs	r1, #1
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fb12 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c32:	fa93 f3a3 	rbit	r3, r3
 8005c36:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3a:	fab3 f383 	clz	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d105      	bne.n	8005c5a <HAL_ADCEx_InjectedConfigChannel+0x422>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	0e9b      	lsrs	r3, r3, #26
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	e00a      	b.n	8005c70 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c62:	fa93 f3a3 	rbit	r3, r3
 8005c66:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8005c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c6a:	fab3 f383 	clz	r3, r3
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d106      	bne.n	8005c82 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff fafb 	bl	8005278 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2102      	movs	r1, #2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fae1 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <HAL_ADCEx_InjectedConfigChannel+0x476>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fad6 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	0e9b      	lsrs	r3, r3, #26
 8005ca8:	f003 021f 	and.w	r2, r3, #31
 8005cac:	e010      	b.n	8005cd0 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff facb 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc0:	fa93 f3a3 	rbit	r3, r3
 8005cc4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc8:	fab3 f383 	clz	r3, r3
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	0e9b      	lsrs	r3, r3, #26
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	e00a      	b.n	8005cfe <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf0:	fa93 f3a3 	rbit	r3, r3
 8005cf4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cf8:	fab3 f383 	clz	r3, r3
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d106      	bne.n	8005d10 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	2102      	movs	r1, #2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fab4 	bl	8005278 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2103      	movs	r1, #3
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fa9a 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10a      	bne.n	8005d3c <HAL_ADCEx_InjectedConfigChannel+0x504>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2103      	movs	r1, #3
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fa8f 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005d32:	4603      	mov	r3, r0
 8005d34:	0e9b      	lsrs	r3, r3, #26
 8005d36:	f003 021f 	and.w	r2, r3, #31
 8005d3a:	e010      	b.n	8005d5e <HAL_ADCEx_InjectedConfigChannel+0x526>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2103      	movs	r1, #3
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fa84 	bl	8005250 <LL_ADC_GetOffsetChannel>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d4e:	fa93 f3a3 	rbit	r3, r3
 8005d52:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8005d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d56:	fab3 f383 	clz	r3, r3
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	0e9b      	lsrs	r3, r3, #26
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	e00a      	b.n	8005d8c <HAL_ADCEx_InjectedConfigChannel+0x554>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7e:	fa93 f3a3 	rbit	r3, r3
 8005d82:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d86:	fab3 f383 	clz	r3, r3
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d106      	bne.n	8005d9e <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2200      	movs	r2, #0
 8005d96:	2103      	movs	r1, #3
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fa6d 	bl	8005278 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fb2c 	bl	8005400 <LL_ADC_IsEnabled>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 810c 	bne.w	8005fc8 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	6819      	ldr	r1, [r3, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f7ff faed 	bl	800539c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4aab      	ldr	r2, [pc, #684]	; (8006074 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	f040 80fd 	bne.w	8005fc8 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	0e9b      	lsrs	r3, r3, #26
 8005de4:	3301      	adds	r3, #1
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2b09      	cmp	r3, #9
 8005dec:	bf94      	ite	ls
 8005dee:	2301      	movls	r3, #1
 8005df0:	2300      	movhi	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	e012      	b.n	8005e1c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dfe:	fa93 f3a3 	rbit	r3, r3
 8005e02:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e06:	fab3 f383 	clz	r3, r3
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	bf94      	ite	ls
 8005e16:	2301      	movls	r3, #1
 8005e18:	2300      	movhi	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d064      	beq.n	8005eea <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d107      	bne.n	8005e3c <HAL_ADCEx_InjectedConfigChannel+0x604>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	0e9b      	lsrs	r3, r3, #26
 8005e32:	3301      	adds	r3, #1
 8005e34:	069b      	lsls	r3, r3, #26
 8005e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e3a:	e00e      	b.n	8005e5a <HAL_ADCEx_InjectedConfigChannel+0x622>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	fa93 f3a3 	rbit	r3, r3
 8005e48:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	fab3 f383 	clz	r3, r3
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	3301      	adds	r3, #1
 8005e54:	069b      	lsls	r3, r3, #26
 8005e56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <HAL_ADCEx_InjectedConfigChannel+0x642>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	0e9b      	lsrs	r3, r3, #26
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	2101      	movs	r1, #1
 8005e74:	fa01 f303 	lsl.w	r3, r1, r3
 8005e78:	e010      	b.n	8005e9c <HAL_ADCEx_InjectedConfigChannel+0x664>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e82:	fa93 f3a3 	rbit	r3, r3
 8005e86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	fab3 f383 	clz	r3, r3
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	3301      	adds	r3, #1
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2101      	movs	r1, #1
 8005e98:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9c:	ea42 0103 	orr.w	r1, r2, r3
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	0e9b      	lsrs	r3, r3, #26
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f003 021f 	and.w	r2, r3, #31
 8005eb8:	4613      	mov	r3, r2
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	4413      	add	r3, r2
 8005ebe:	051b      	lsls	r3, r3, #20
 8005ec0:	e011      	b.n	8005ee6 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	fa93 f3a3 	rbit	r3, r3
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	fab3 f383 	clz	r3, r3
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	3301      	adds	r3, #1
 8005eda:	f003 021f 	and.w	r2, r3, #31
 8005ede:	4613      	mov	r3, r2
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	4413      	add	r3, r2
 8005ee4:	051b      	lsls	r3, r3, #20
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	e069      	b.n	8005fbe <HAL_ADCEx_InjectedConfigChannel+0x786>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	0e9b      	lsrs	r3, r3, #26
 8005efc:	3301      	adds	r3, #1
 8005efe:	069b      	lsls	r3, r3, #26
 8005f00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f04:	e00e      	b.n	8005f24 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	fa93 f3a3 	rbit	r3, r3
 8005f12:	623b      	str	r3, [r7, #32]
  return result;
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	fab3 f383 	clz	r3, r3
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	069b      	lsls	r3, r3, #26
 8005f20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d109      	bne.n	8005f44 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	0e9b      	lsrs	r3, r3, #26
 8005f36:	3301      	adds	r3, #1
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	e010      	b.n	8005f66 <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	fa93 f3a3 	rbit	r3, r3
 8005f50:	61bb      	str	r3, [r7, #24]
  return result;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	fab3 f383 	clz	r3, r3
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	2101      	movs	r1, #1
 8005f62:	fa01 f303 	lsl.w	r3, r1, r3
 8005f66:	ea42 0103 	orr.w	r1, r2, r3
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10d      	bne.n	8005f92 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	0e9b      	lsrs	r3, r3, #26
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	f003 021f 	and.w	r2, r3, #31
 8005f82:	4613      	mov	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	3b1e      	subs	r3, #30
 8005f8a:	051b      	lsls	r3, r3, #20
 8005f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f90:	e014      	b.n	8005fbc <HAL_ADCEx_InjectedConfigChannel+0x784>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	fa93 f3a3 	rbit	r3, r3
 8005f9e:	613b      	str	r3, [r7, #16]
  return result;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	fab3 f383 	clz	r3, r3
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	3301      	adds	r3, #1
 8005faa:	f003 021f 	and.w	r2, r3, #31
 8005fae:	4613      	mov	r3, r2
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3b1e      	subs	r3, #30
 8005fb6:	051b      	lsls	r3, r3, #20
 8005fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	6892      	ldr	r2, [r2, #8]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f7ff f9c1 	bl	800534a <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b2a      	ldr	r3, [pc, #168]	; (8006078 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d079      	beq.n	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fd4:	4829      	ldr	r0, [pc, #164]	; (800607c <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8005fd6:	f7ff f90a 	bl	80051ee <LL_ADC_GetCommonPathInternalCh>
 8005fda:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a27      	ldr	r2, [pc, #156]	; (8006080 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a25      	ldr	r2, [pc, #148]	; (8006084 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d126      	bne.n	8006040 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d120      	bne.n	8006040 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006006:	d15f      	bne.n	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800600c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006010:	4619      	mov	r1, r3
 8006012:	481a      	ldr	r0, [pc, #104]	; (800607c <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8006014:	f7ff f8d8 	bl	80051c8 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	099b      	lsrs	r3, r3, #6
 800601e:	4a1b      	ldr	r2, [pc, #108]	; (800608c <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8006020:	fba2 2303 	umull	r2, r3, r2, r3
 8006024:	099a      	lsrs	r2, r3, #6
 8006026:	4613      	mov	r3, r2
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8006030:	e002      	b.n	8006038 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3b01      	subs	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f9      	bne.n	8006032 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800603e:	e043      	b.n	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a12      	ldr	r2, [pc, #72]	; (8006090 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d126      	bne.n	8006098 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800604a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800604e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d120      	bne.n	8006098 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d033      	beq.n	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006068:	4619      	mov	r1, r3
 800606a:	4804      	ldr	r0, [pc, #16]	; (800607c <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800606c:	f7ff f8ac 	bl	80051c8 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006070:	e02a      	b.n	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
 8006072:	bf00      	nop
 8006074:	407f0000 	.word	0x407f0000
 8006078:	80080000 	.word	0x80080000
 800607c:	50000300 	.word	0x50000300
 8006080:	c3210000 	.word	0xc3210000
 8006084:	90c00010 	.word	0x90c00010
 8006088:	2000000c 	.word	0x2000000c
 800608c:	053e2d63 	.word	0x053e2d63
 8006090:	c7520000 	.word	0xc7520000
 8006094:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d112      	bne.n	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a0b      	ldr	r2, [pc, #44]	; (80060e0 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060c0:	4619      	mov	r1, r3
 80060c2:	4808      	ldr	r0, [pc, #32]	; (80060e4 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 80060c4:	f7ff f880 	bl	80051c8 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80060d0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	37a0      	adds	r7, #160	; 0xa0
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	cb840000 	.word	0xcb840000
 80060e0:	50000100 	.word	0x50000100
 80060e4:	50000300 	.word	0x50000300

080060e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b0a1      	sub	sp, #132	; 0x84
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006102:	2302      	movs	r3, #2
 8006104:	e087      	b.n	8006216 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006116:	d102      	bne.n	800611e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006118:	4b41      	ldr	r3, [pc, #260]	; (8006220 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	e001      	b.n	8006122 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612c:	f043 0220 	orr.w	r2, r3, #32
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e06a      	b.n	8006216 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff f99c 	bl	8005480 <LL_ADC_REG_IsConversionOngoing>
 8006148:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff f996 	bl	8005480 <LL_ADC_REG_IsConversionOngoing>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d14c      	bne.n	80061f4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800615a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800615c:	2b00      	cmp	r3, #0
 800615e:	d149      	bne.n	80061f4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006160:	4b30      	ldr	r3, [pc, #192]	; (8006224 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006162:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d028      	beq.n	80061be <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800616c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6859      	ldr	r1, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800617e:	035b      	lsls	r3, r3, #13
 8006180:	430b      	orrs	r3, r1
 8006182:	431a      	orrs	r2, r3
 8006184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006186:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006188:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800618c:	f7ff f938 	bl	8005400 <LL_ADC_IsEnabled>
 8006190:	4604      	mov	r4, r0
 8006192:	4823      	ldr	r0, [pc, #140]	; (8006220 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006194:	f7ff f934 	bl	8005400 <LL_ADC_IsEnabled>
 8006198:	4603      	mov	r3, r0
 800619a:	4323      	orrs	r3, r4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d133      	bne.n	8006208 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80061a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80061a8:	f023 030f 	bic.w	r3, r3, #15
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	6811      	ldr	r1, [r2, #0]
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	6892      	ldr	r2, [r2, #8]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	431a      	orrs	r2, r3
 80061b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061bc:	e024      	b.n	8006208 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80061be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80061ce:	f7ff f917 	bl	8005400 <LL_ADC_IsEnabled>
 80061d2:	4604      	mov	r4, r0
 80061d4:	4812      	ldr	r0, [pc, #72]	; (8006220 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80061d6:	f7ff f913 	bl	8005400 <LL_ADC_IsEnabled>
 80061da:	4603      	mov	r3, r0
 80061dc:	4323      	orrs	r3, r4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d112      	bne.n	8006208 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80061e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80061ea:	f023 030f 	bic.w	r3, r3, #15
 80061ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80061f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061f2:	e009      	b.n	8006208 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f8:	f043 0220 	orr.w	r2, r3, #32
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006206:	e000      	b.n	800620a <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006208:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006212:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006216:	4618      	mov	r0, r3
 8006218:	3784      	adds	r7, #132	; 0x84
 800621a:	46bd      	mov	sp, r7
 800621c:	bd90      	pop	{r4, r7, pc}
 800621e:	bf00      	nop
 8006220:	50000100 	.word	0x50000100
 8006224:	50000300 	.word	0x50000300

08006228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <__NVIC_SetPriorityGrouping+0x44>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006244:	4013      	ands	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800625a:	4a04      	ldr	r2, [pc, #16]	; (800626c <__NVIC_SetPriorityGrouping+0x44>)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	60d3      	str	r3, [r2, #12]
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	e000ed00 	.word	0xe000ed00

08006270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006274:	4b04      	ldr	r3, [pc, #16]	; (8006288 <__NVIC_GetPriorityGrouping+0x18>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	f003 0307 	and.w	r3, r3, #7
}
 800627e:	4618      	mov	r0, r3
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	e000ed00 	.word	0xe000ed00

0800628c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629a:	2b00      	cmp	r3, #0
 800629c:	db0b      	blt.n	80062b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	f003 021f 	and.w	r2, r3, #31
 80062a4:	4907      	ldr	r1, [pc, #28]	; (80062c4 <__NVIC_EnableIRQ+0x38>)
 80062a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	2001      	movs	r0, #1
 80062ae:	fa00 f202 	lsl.w	r2, r0, r2
 80062b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	e000e100 	.word	0xe000e100

080062c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	6039      	str	r1, [r7, #0]
 80062d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	db0a      	blt.n	80062f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	490c      	ldr	r1, [pc, #48]	; (8006314 <__NVIC_SetPriority+0x4c>)
 80062e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e6:	0112      	lsls	r2, r2, #4
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	440b      	add	r3, r1
 80062ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062f0:	e00a      	b.n	8006308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	4908      	ldr	r1, [pc, #32]	; (8006318 <__NVIC_SetPriority+0x50>)
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	3b04      	subs	r3, #4
 8006300:	0112      	lsls	r2, r2, #4
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	440b      	add	r3, r1
 8006306:	761a      	strb	r2, [r3, #24]
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	e000e100 	.word	0xe000e100
 8006318:	e000ed00 	.word	0xe000ed00

0800631c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800631c:	b480      	push	{r7}
 800631e:	b089      	sub	sp, #36	; 0x24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	f1c3 0307 	rsb	r3, r3, #7
 8006336:	2b04      	cmp	r3, #4
 8006338:	bf28      	it	cs
 800633a:	2304      	movcs	r3, #4
 800633c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3304      	adds	r3, #4
 8006342:	2b06      	cmp	r3, #6
 8006344:	d902      	bls.n	800634c <NVIC_EncodePriority+0x30>
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	3b03      	subs	r3, #3
 800634a:	e000      	b.n	800634e <NVIC_EncodePriority+0x32>
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006350:	f04f 32ff 	mov.w	r2, #4294967295
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	fa02 f303 	lsl.w	r3, r2, r3
 800635a:	43da      	mvns	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	401a      	ands	r2, r3
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006364:	f04f 31ff 	mov.w	r1, #4294967295
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	fa01 f303 	lsl.w	r3, r1, r3
 800636e:	43d9      	mvns	r1, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006374:	4313      	orrs	r3, r2
         );
}
 8006376:	4618      	mov	r0, r3
 8006378:	3724      	adds	r7, #36	; 0x24
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
	...

08006384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3b01      	subs	r3, #1
 8006390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006394:	d301      	bcc.n	800639a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006396:	2301      	movs	r3, #1
 8006398:	e00f      	b.n	80063ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800639a:	4a0a      	ldr	r2, [pc, #40]	; (80063c4 <SysTick_Config+0x40>)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3b01      	subs	r3, #1
 80063a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063a2:	210f      	movs	r1, #15
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	f7ff ff8e 	bl	80062c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <SysTick_Config+0x40>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063b2:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <SysTick_Config+0x40>)
 80063b4:	2207      	movs	r2, #7
 80063b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	e000e010 	.word	0xe000e010

080063c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff ff29 	bl	8006228 <__NVIC_SetPriorityGrouping>
}
 80063d6:	bf00      	nop
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b086      	sub	sp, #24
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	4603      	mov	r3, r0
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
 80063ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80063ec:	f7ff ff40 	bl	8006270 <__NVIC_GetPriorityGrouping>
 80063f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7ff ff90 	bl	800631c <NVIC_EncodePriority>
 80063fc:	4602      	mov	r2, r0
 80063fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006402:	4611      	mov	r1, r2
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff ff5f 	bl	80062c8 <__NVIC_SetPriority>
}
 800640a:	bf00      	nop
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	4603      	mov	r3, r0
 800641a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800641c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff ff33 	bl	800628c <__NVIC_EnableIRQ>
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff ffa4 	bl	8006384 <SysTick_Config>
 800643c:	4603      	mov	r3, r0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d00d      	beq.n	800647a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2204      	movs	r2, #4
 8006462:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	e047      	b.n	800650a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 020e 	bic.w	r2, r2, #14
 8006488:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ae:	f003 021f 	and.w	r2, r3, #31
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	2101      	movs	r1, #1
 80064b8:	fa01 f202 	lsl.w	r2, r1, r2
 80064bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80064c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00c      	beq.n	80064ea <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80064e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	4798      	blx	r3
    }
  }
  return status;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006522:	e15a      	b.n	80067da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	2101      	movs	r1, #1
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	fa01 f303 	lsl.w	r3, r1, r3
 8006530:	4013      	ands	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 814c 	beq.w	80067d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d00b      	beq.n	800655c <HAL_GPIO_Init+0x48>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d007      	beq.n	800655c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006550:	2b11      	cmp	r3, #17
 8006552:	d003      	beq.n	800655c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b12      	cmp	r3, #18
 800655a:	d130      	bne.n	80065be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	2203      	movs	r2, #3
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4013      	ands	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006592:	2201      	movs	r2, #1
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4013      	ands	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	f003 0201 	and.w	r2, r3, #1
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	2203      	movs	r2, #3
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43db      	mvns	r3, r3
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4013      	ands	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d003      	beq.n	80065fe <HAL_GPIO_Init+0xea>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b12      	cmp	r3, #18
 80065fc:	d123      	bne.n	8006646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	08da      	lsrs	r2, r3, #3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3208      	adds	r2, #8
 8006606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	220f      	movs	r2, #15
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43db      	mvns	r3, r3
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	08da      	lsrs	r2, r3, #3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3208      	adds	r2, #8
 8006640:	6939      	ldr	r1, [r7, #16]
 8006642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	2203      	movs	r2, #3
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43db      	mvns	r3, r3
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4013      	ands	r3, r2
 800665c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f003 0203 	and.w	r2, r3, #3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80a6 	beq.w	80067d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006688:	4b5b      	ldr	r3, [pc, #364]	; (80067f8 <HAL_GPIO_Init+0x2e4>)
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	4a5a      	ldr	r2, [pc, #360]	; (80067f8 <HAL_GPIO_Init+0x2e4>)
 800668e:	f043 0301 	orr.w	r3, r3, #1
 8006692:	6613      	str	r3, [r2, #96]	; 0x60
 8006694:	4b58      	ldr	r3, [pc, #352]	; (80067f8 <HAL_GPIO_Init+0x2e4>)
 8006696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066a0:	4a56      	ldr	r2, [pc, #344]	; (80067fc <HAL_GPIO_Init+0x2e8>)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	089b      	lsrs	r3, r3, #2
 80066a6:	3302      	adds	r3, #2
 80066a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	220f      	movs	r2, #15
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	43db      	mvns	r3, r3
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4013      	ands	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066ca:	d01f      	beq.n	800670c <HAL_GPIO_Init+0x1f8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a4c      	ldr	r2, [pc, #304]	; (8006800 <HAL_GPIO_Init+0x2ec>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d019      	beq.n	8006708 <HAL_GPIO_Init+0x1f4>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a4b      	ldr	r2, [pc, #300]	; (8006804 <HAL_GPIO_Init+0x2f0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <HAL_GPIO_Init+0x1f0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a4a      	ldr	r2, [pc, #296]	; (8006808 <HAL_GPIO_Init+0x2f4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00d      	beq.n	8006700 <HAL_GPIO_Init+0x1ec>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a49      	ldr	r2, [pc, #292]	; (800680c <HAL_GPIO_Init+0x2f8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d007      	beq.n	80066fc <HAL_GPIO_Init+0x1e8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a48      	ldr	r2, [pc, #288]	; (8006810 <HAL_GPIO_Init+0x2fc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d101      	bne.n	80066f8 <HAL_GPIO_Init+0x1e4>
 80066f4:	2305      	movs	r3, #5
 80066f6:	e00a      	b.n	800670e <HAL_GPIO_Init+0x1fa>
 80066f8:	2306      	movs	r3, #6
 80066fa:	e008      	b.n	800670e <HAL_GPIO_Init+0x1fa>
 80066fc:	2304      	movs	r3, #4
 80066fe:	e006      	b.n	800670e <HAL_GPIO_Init+0x1fa>
 8006700:	2303      	movs	r3, #3
 8006702:	e004      	b.n	800670e <HAL_GPIO_Init+0x1fa>
 8006704:	2302      	movs	r3, #2
 8006706:	e002      	b.n	800670e <HAL_GPIO_Init+0x1fa>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <HAL_GPIO_Init+0x1fa>
 800670c:	2300      	movs	r3, #0
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	f002 0203 	and.w	r2, r2, #3
 8006714:	0092      	lsls	r2, r2, #2
 8006716:	4093      	lsls	r3, r2
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800671e:	4937      	ldr	r1, [pc, #220]	; (80067fc <HAL_GPIO_Init+0x2e8>)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	089b      	lsrs	r3, r3, #2
 8006724:	3302      	adds	r3, #2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800672c:	4b39      	ldr	r3, [pc, #228]	; (8006814 <HAL_GPIO_Init+0x300>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	43db      	mvns	r3, r3
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4013      	ands	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006750:	4a30      	ldr	r2, [pc, #192]	; (8006814 <HAL_GPIO_Init+0x300>)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006756:	4b2f      	ldr	r3, [pc, #188]	; (8006814 <HAL_GPIO_Init+0x300>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	43db      	mvns	r3, r3
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4013      	ands	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800677a:	4a26      	ldr	r2, [pc, #152]	; (8006814 <HAL_GPIO_Init+0x300>)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006780:	4b24      	ldr	r3, [pc, #144]	; (8006814 <HAL_GPIO_Init+0x300>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	43db      	mvns	r3, r3
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4013      	ands	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80067a4:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <HAL_GPIO_Init+0x300>)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80067aa:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <HAL_GPIO_Init+0x300>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	43db      	mvns	r3, r3
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4013      	ands	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80067ce:	4a11      	ldr	r2, [pc, #68]	; (8006814 <HAL_GPIO_Init+0x300>)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3301      	adds	r3, #1
 80067d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f47f ae9d 	bne.w	8006524 <HAL_GPIO_Init+0x10>
  }
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40021000 	.word	0x40021000
 80067fc:	40010000 	.word	0x40010000
 8006800:	48000400 	.word	0x48000400
 8006804:	48000800 	.word	0x48000800
 8006808:	48000c00 	.word	0x48000c00
 800680c:	48001000 	.word	0x48001000
 8006810:	48001400 	.word	0x48001400
 8006814:	40010400 	.word	0x40010400

08006818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	807b      	strh	r3, [r7, #2]
 8006824:	4613      	mov	r3, r2
 8006826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006828:	787b      	ldrb	r3, [r7, #1]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800682e:	887a      	ldrh	r2, [r7, #2]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006834:	e002      	b.n	800683c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006836:	887a      	ldrh	r2, [r7, #2]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d006      	beq.n	800686c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800685e:	4a05      	ldr	r2, [pc, #20]	; (8006874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	4618      	mov	r0, r3
 8006868:	f7fc feea 	bl	8003640 <HAL_GPIO_EXTI_Callback>
  }
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40010400 	.word	0x40010400

08006878 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e0bb      	b.n	8006a06 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b05      	cmp	r3, #5
 8006898:	d101      	bne.n	800689e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e0b3      	b.n	8006a06 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d101      	bne.n	80068ae <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e0ab      	b.n	8006a06 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ae:	4b58      	ldr	r3, [pc, #352]	; (8006a10 <HAL_OPAMP_Init+0x198>)
 80068b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b2:	4a57      	ldr	r2, [pc, #348]	; (8006a10 <HAL_OPAMP_Init+0x198>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	6613      	str	r3, [r2, #96]	; 0x60
 80068ba:	4b55      	ldr	r3, [pc, #340]	; (8006a10 <HAL_OPAMP_Init+0x198>)
 80068bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	60bb      	str	r3, [r7, #8]
 80068c4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d103      	bne.n	80068da <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fd f95a 	bl	8003b94 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b40      	cmp	r3, #64	; 0x40
 80068e6:	d003      	beq.n	80068f0 <HAL_OPAMP_Init+0x78>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b60      	cmp	r3, #96	; 0x60
 80068ee:	d133      	bne.n	8006958 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 0110 	bic.w	r1, r3, #16
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4b41      	ldr	r3, [pc, #260]	; (8006a14 <HAL_OPAMP_Init+0x19c>)
 800690e:	4013      	ands	r3, r2
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6851      	ldr	r1, [r2, #4]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6892      	ldr	r2, [r2, #8]
 8006918:	4311      	orrs	r1, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6912      	ldr	r2, [r2, #16]
 800691e:	430a      	orrs	r2, r1
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	7d09      	ldrb	r1, [r1, #20]
 8006924:	2901      	cmp	r1, #1
 8006926:	d102      	bne.n	800692e <HAL_OPAMP_Init+0xb6>
 8006928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800692c:	e000      	b.n	8006930 <HAL_OPAMP_Init+0xb8>
 800692e:	2100      	movs	r1, #0
 8006930:	4311      	orrs	r1, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006936:	4311      	orrs	r1, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800693c:	4311      	orrs	r1, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006942:	04d2      	lsls	r2, r2, #19
 8006944:	4311      	orrs	r1, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800694a:	0612      	lsls	r2, r2, #24
 800694c:	4311      	orrs	r1, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	430b      	orrs	r3, r1
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e035      	b.n	80069c4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 0110 	bic.w	r1, r3, #16
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <HAL_OPAMP_Init+0x19c>)
 8006976:	4013      	ands	r3, r2
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6851      	ldr	r1, [r2, #4]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6892      	ldr	r2, [r2, #8]
 8006980:	4311      	orrs	r1, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68d2      	ldr	r2, [r2, #12]
 8006986:	4311      	orrs	r1, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6912      	ldr	r2, [r2, #16]
 800698c:	430a      	orrs	r2, r1
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	7d09      	ldrb	r1, [r1, #20]
 8006992:	2901      	cmp	r1, #1
 8006994:	d102      	bne.n	800699c <HAL_OPAMP_Init+0x124>
 8006996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800699a:	e000      	b.n	800699e <HAL_OPAMP_Init+0x126>
 800699c:	2100      	movs	r1, #0
 800699e:	4311      	orrs	r1, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069a4:	4311      	orrs	r1, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80069aa:	4311      	orrs	r1, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069b0:	04d2      	lsls	r2, r2, #19
 80069b2:	4311      	orrs	r1, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069b8:	0612      	lsls	r2, r2, #24
 80069ba:	4311      	orrs	r1, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	db10      	blt.n	80069f0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40021000 	.word	0x40021000
 8006a14:	e0003e11 	.word	0xe0003e11

08006a18 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
 8006a2e:	e01d      	b.n	8006a6c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b05      	cmp	r3, #5
 8006a3a:	d102      	bne.n	8006a42 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
 8006a40:	e014      	b.n	8006a6c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d10c      	bne.n	8006a68 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2204      	movs	r2, #4
 8006a62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006a66:	e001      	b.n	8006a6c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b08c      	sub	sp, #48	; 0x30
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e2df      	b.n	800705c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d001      	beq.n	8006aac <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e2d7      	b.n	800705c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d001      	beq.n	8006abc <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e2cf      	b.n	800705c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d001      	beq.n	8006acc <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e2c7      	b.n	800705c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0202 	orr.w	r2, r2, #2
 8006ada:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0202 	orr.w	r2, r2, #2
 8006aea:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0202 	orr.w	r2, r2, #2
 8006afa:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0210 	orr.w	r2, r2, #16
 8006b0a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0210 	orr.w	r2, r2, #16
 8006b1a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0210 	orr.w	r2, r2, #16
 8006b2a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b4a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b5a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006b6a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006b7a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006b8a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 8006bbc:	2310      	movs	r3, #16
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 8006bc8:	2308      	movs	r3, #8
 8006bca:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8006bcc:	e056      	b.n	8006c7c <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	061a      	lsls	r2, r3, #24
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	061a      	lsls	r2, r3, #24
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	061a      	lsls	r2, r3, #24
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8006c10:	2002      	movs	r0, #2
 8006c12:	f7fd fd2d 	bl	8004670 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8006c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	4413      	add	r3, r2
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c2c:	e003      	b.n	8006c36 <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 8006c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8006c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4c:	e003      	b.n	8006c56 <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	4413      	add	r3, r2
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	e003      	b.n	8006c76 <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1a5      	bne.n	8006bce <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	061a      	lsls	r2, r3, #24
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	061a      	lsls	r2, r3, #24
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	061a      	lsls	r2, r3, #24
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8006cc4:	2002      	movs	r0, #2
 8006cc6:	f7fd fcd3 	bl	8004670 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00d      	beq.n	8006cf4 <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	3301      	adds	r3, #1
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	061a      	lsls	r2, r3, #24
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	3301      	adds	r3, #1
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	061a      	lsls	r2, r3, #24
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00d      	beq.n	8006d48 <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	061a      	lsls	r2, r3, #24
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d5a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d6e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d82:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 8006d84:	2310      	movs	r3, #16
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 8006d88:	2310      	movs	r3, #16
 8006d8a:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 8006d90:	2308      	movs	r3, #8
 8006d92:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8006d94:	e056      	b.n	8006e44 <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	04da      	lsls	r2, r3, #19
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	04da      	lsls	r2, r3, #19
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	04da      	lsls	r2, r3, #19
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8006dd8:	2002      	movs	r0, #2
 8006dda:	f7fd fc49 	bl	8004670 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 8006dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	4413      	add	r3, r2
 8006df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006df4:	e003      	b.n	8006dfe <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 8006df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 8006e0c:	6a3a      	ldr	r2, [r7, #32]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	4413      	add	r3, r2
 8006e12:	623b      	str	r3, [r7, #32]
 8006e14:	e003      	b.n	8006e1e <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 8006e16:	6a3a      	ldr	r2, [r7, #32]
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	4413      	add	r3, r2
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e003      	b.n	8006e3e <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1a5      	bne.n	8006d96 <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	04da      	lsls	r2, r3, #19
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	04da      	lsls	r2, r3, #19
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	04da      	lsls	r2, r3, #19
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8006e8c:	2002      	movs	r0, #2
 8006e8e:	f7fd fbef 	bl	8004670 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00d      	beq.n	8006ebc <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	04da      	lsls	r2, r3, #19
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00d      	beq.n	8006ee6 <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	04da      	lsls	r2, r3, #19
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00d      	beq.n	8006f10 <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	04da      	lsls	r2, r3, #19
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f1e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f2e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f3e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0201 	bic.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0201 	bic.w	r2, r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0201 	bic.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0202 	bic.w	r2, r2, #2
 8006f7e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0202 	bic.w	r2, r2, #2
 8006f8e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0202 	bic.w	r2, r2, #2
 8006f9e:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa4:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006faa:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb6:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6a3a      	ldr	r2, [r7, #32]
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	061a      	lsls	r2, r3, #24
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	061a      	lsls	r2, r3, #24
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	061a      	lsls	r2, r3, #24
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	04da      	lsls	r2, r3, #19
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	04da      	lsls	r2, r3, #19
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	04da      	lsls	r2, r3, #19
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3730      	adds	r7, #48	; 0x30
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d141      	bne.n	80070f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007072:	4b4b      	ldr	r3, [pc, #300]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800707a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707e:	d131      	bne.n	80070e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007080:	4b47      	ldr	r3, [pc, #284]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007086:	4a46      	ldr	r2, [pc, #280]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007090:	4b43      	ldr	r3, [pc, #268]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007098:	4a41      	ldr	r2, [pc, #260]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800709a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800709e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070a0:	4b40      	ldr	r3, [pc, #256]	; (80071a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2232      	movs	r2, #50	; 0x32
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	4a3f      	ldr	r2, [pc, #252]	; (80071a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070ac:	fba2 2303 	umull	r2, r3, r2, r3
 80070b0:	0c9b      	lsrs	r3, r3, #18
 80070b2:	3301      	adds	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070b6:	e002      	b.n	80070be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070be:	4b38      	ldr	r3, [pc, #224]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ca:	d102      	bne.n	80070d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1f2      	bne.n	80070b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070d2:	4b33      	ldr	r3, [pc, #204]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070de:	d158      	bne.n	8007192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e057      	b.n	8007194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070e4:	4b2e      	ldr	r3, [pc, #184]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ea:	4a2d      	ldr	r2, [pc, #180]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80070f4:	e04d      	b.n	8007192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070fc:	d141      	bne.n	8007182 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070fe:	4b28      	ldr	r3, [pc, #160]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710a:	d131      	bne.n	8007170 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800710c:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800710e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007112:	4a23      	ldr	r2, [pc, #140]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800711c:	4b20      	ldr	r3, [pc, #128]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007124:	4a1e      	ldr	r2, [pc, #120]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800712a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800712c:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2232      	movs	r2, #50	; 0x32
 8007132:	fb02 f303 	mul.w	r3, r2, r3
 8007136:	4a1c      	ldr	r2, [pc, #112]	; (80071a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007138:	fba2 2303 	umull	r2, r3, r2, r3
 800713c:	0c9b      	lsrs	r3, r3, #18
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007142:	e002      	b.n	800714a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3b01      	subs	r3, #1
 8007148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800714a:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007156:	d102      	bne.n	800715e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f2      	bne.n	8007144 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800715e:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800716a:	d112      	bne.n	8007192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e011      	b.n	8007194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007176:	4a0a      	ldr	r2, [pc, #40]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800717c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007180:	e007      	b.n	8007192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800718a:	4a05      	ldr	r2, [pc, #20]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800718c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007190:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40007000 	.word	0x40007000
 80071a4:	2000000c 	.word	0x2000000c
 80071a8:	431bde83 	.word	0x431bde83

080071ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e308      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d075      	beq.n	80072b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ca:	4ba3      	ldr	r3, [pc, #652]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 030c 	and.w	r3, r3, #12
 80071d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071d4:	4ba0      	ldr	r3, [pc, #640]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	f003 0303 	and.w	r3, r3, #3
 80071dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b0c      	cmp	r3, #12
 80071e2:	d102      	bne.n	80071ea <HAL_RCC_OscConfig+0x3e>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d002      	beq.n	80071f0 <HAL_RCC_OscConfig+0x44>
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d10b      	bne.n	8007208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f0:	4b99      	ldr	r3, [pc, #612]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d05b      	beq.n	80072b4 <HAL_RCC_OscConfig+0x108>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d157      	bne.n	80072b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e2e3      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007210:	d106      	bne.n	8007220 <HAL_RCC_OscConfig+0x74>
 8007212:	4b91      	ldr	r3, [pc, #580]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a90      	ldr	r2, [pc, #576]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e01d      	b.n	800725c <HAL_RCC_OscConfig+0xb0>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007228:	d10c      	bne.n	8007244 <HAL_RCC_OscConfig+0x98>
 800722a:	4b8b      	ldr	r3, [pc, #556]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a8a      	ldr	r2, [pc, #552]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	4b88      	ldr	r3, [pc, #544]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a87      	ldr	r2, [pc, #540]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e00b      	b.n	800725c <HAL_RCC_OscConfig+0xb0>
 8007244:	4b84      	ldr	r3, [pc, #528]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a83      	ldr	r2, [pc, #524]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 800724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	4b81      	ldr	r3, [pc, #516]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a80      	ldr	r2, [pc, #512]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800725a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d013      	beq.n	800728c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007264:	f7fd f9f8 	bl	8004658 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800726c:	f7fd f9f4 	bl	8004658 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b64      	cmp	r3, #100	; 0x64
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e2a8      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800727e:	4b76      	ldr	r3, [pc, #472]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f0      	beq.n	800726c <HAL_RCC_OscConfig+0xc0>
 800728a:	e014      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728c:	f7fd f9e4 	bl	8004658 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007294:	f7fd f9e0 	bl	8004658 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b64      	cmp	r3, #100	; 0x64
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e294      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072a6:	4b6c      	ldr	r3, [pc, #432]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1f0      	bne.n	8007294 <HAL_RCC_OscConfig+0xe8>
 80072b2:	e000      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d075      	beq.n	80073ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072c2:	4b65      	ldr	r3, [pc, #404]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 030c 	and.w	r3, r3, #12
 80072ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072cc:	4b62      	ldr	r3, [pc, #392]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b0c      	cmp	r3, #12
 80072da:	d102      	bne.n	80072e2 <HAL_RCC_OscConfig+0x136>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d002      	beq.n	80072e8 <HAL_RCC_OscConfig+0x13c>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d11f      	bne.n	8007328 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072e8:	4b5b      	ldr	r3, [pc, #364]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <HAL_RCC_OscConfig+0x154>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e267      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007300:	4b55      	ldr	r3, [pc, #340]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	4952      	ldr	r1, [pc, #328]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007310:	4313      	orrs	r3, r2
 8007312:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007314:	4b51      	ldr	r3, [pc, #324]	; (800745c <HAL_RCC_OscConfig+0x2b0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f7fd f951 	bl	80045c0 <HAL_InitTick>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d043      	beq.n	80073ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e253      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d023      	beq.n	8007378 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007330:	4b49      	ldr	r3, [pc, #292]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a48      	ldr	r2, [pc, #288]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800733a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fd f98c 	bl	8004658 <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007344:	f7fd f988 	bl	8004658 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e23c      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007356:	4b40      	ldr	r3, [pc, #256]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007362:	4b3d      	ldr	r3, [pc, #244]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	061b      	lsls	r3, r3, #24
 8007370:	4939      	ldr	r1, [pc, #228]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007372:	4313      	orrs	r3, r2
 8007374:	604b      	str	r3, [r1, #4]
 8007376:	e01a      	b.n	80073ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007378:	4b37      	ldr	r3, [pc, #220]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a36      	ldr	r2, [pc, #216]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 800737e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fd f968 	bl	8004658 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800738c:	f7fd f964 	bl	8004658 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e218      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800739e:	4b2e      	ldr	r3, [pc, #184]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f0      	bne.n	800738c <HAL_RCC_OscConfig+0x1e0>
 80073aa:	e000      	b.n	80073ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d03c      	beq.n	8007434 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01c      	beq.n	80073fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073c2:	4b25      	ldr	r3, [pc, #148]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80073c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073c8:	4a23      	ldr	r2, [pc, #140]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d2:	f7fd f941 	bl	8004658 <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073d8:	e008      	b.n	80073ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073da:	f7fd f93d 	bl	8004658 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e1f1      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073ec:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80073ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0ef      	beq.n	80073da <HAL_RCC_OscConfig+0x22e>
 80073fa:	e01b      	b.n	8007434 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073fc:	4b16      	ldr	r3, [pc, #88]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 80073fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007402:	4a15      	ldr	r2, [pc, #84]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800740c:	f7fd f924 	bl	8004658 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007414:	f7fd f920 	bl	8004658 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e1d4      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007426:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1ef      	bne.n	8007414 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80ab 	beq.w	8007598 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007442:	2300      	movs	r3, #0
 8007444:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007446:	4b04      	ldr	r3, [pc, #16]	; (8007458 <HAL_RCC_OscConfig+0x2ac>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <HAL_RCC_OscConfig+0x2b4>
 8007452:	2301      	movs	r3, #1
 8007454:	e005      	b.n	8007462 <HAL_RCC_OscConfig+0x2b6>
 8007456:	bf00      	nop
 8007458:	40021000 	.word	0x40021000
 800745c:	20000010 	.word	0x20000010
 8007460:	2300      	movs	r3, #0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00d      	beq.n	8007482 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007466:	4baf      	ldr	r3, [pc, #700]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746a:	4aae      	ldr	r2, [pc, #696]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 800746c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007470:	6593      	str	r3, [r2, #88]	; 0x58
 8007472:	4bac      	ldr	r3, [pc, #688]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800747e:	2301      	movs	r3, #1
 8007480:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007482:	4ba9      	ldr	r3, [pc, #676]	; (8007728 <HAL_RCC_OscConfig+0x57c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748a:	2b00      	cmp	r3, #0
 800748c:	d118      	bne.n	80074c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800748e:	4ba6      	ldr	r3, [pc, #664]	; (8007728 <HAL_RCC_OscConfig+0x57c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4aa5      	ldr	r2, [pc, #660]	; (8007728 <HAL_RCC_OscConfig+0x57c>)
 8007494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800749a:	f7fd f8dd 	bl	8004658 <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a2:	f7fd f8d9 	bl	8004658 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e18d      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074b4:	4b9c      	ldr	r3, [pc, #624]	; (8007728 <HAL_RCC_OscConfig+0x57c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0f0      	beq.n	80074a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d108      	bne.n	80074da <HAL_RCC_OscConfig+0x32e>
 80074c8:	4b96      	ldr	r3, [pc, #600]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80074ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ce:	4a95      	ldr	r2, [pc, #596]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80074d0:	f043 0301 	orr.w	r3, r3, #1
 80074d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074d8:	e024      	b.n	8007524 <HAL_RCC_OscConfig+0x378>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d110      	bne.n	8007504 <HAL_RCC_OscConfig+0x358>
 80074e2:	4b90      	ldr	r3, [pc, #576]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80074e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e8:	4a8e      	ldr	r2, [pc, #568]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80074ea:	f043 0304 	orr.w	r3, r3, #4
 80074ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074f2:	4b8c      	ldr	r3, [pc, #560]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f8:	4a8a      	ldr	r2, [pc, #552]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007502:	e00f      	b.n	8007524 <HAL_RCC_OscConfig+0x378>
 8007504:	4b87      	ldr	r3, [pc, #540]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750a:	4a86      	ldr	r2, [pc, #536]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 800750c:	f023 0301 	bic.w	r3, r3, #1
 8007510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007514:	4b83      	ldr	r3, [pc, #524]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751a:	4a82      	ldr	r2, [pc, #520]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 800751c:	f023 0304 	bic.w	r3, r3, #4
 8007520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d016      	beq.n	800755a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752c:	f7fd f894 	bl	8004658 <HAL_GetTick>
 8007530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007532:	e00a      	b.n	800754a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007534:	f7fd f890 	bl	8004658 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007542:	4293      	cmp	r3, r2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e142      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800754a:	4b76      	ldr	r3, [pc, #472]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 800754c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0ed      	beq.n	8007534 <HAL_RCC_OscConfig+0x388>
 8007558:	e015      	b.n	8007586 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755a:	f7fd f87d 	bl	8004658 <HAL_GetTick>
 800755e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007560:	e00a      	b.n	8007578 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007562:	f7fd f879 	bl	8004658 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007570:	4293      	cmp	r3, r2
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e12b      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007578:	4b6a      	ldr	r3, [pc, #424]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 800757a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1ed      	bne.n	8007562 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007586:	7ffb      	ldrb	r3, [r7, #31]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d105      	bne.n	8007598 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800758c:	4b65      	ldr	r3, [pc, #404]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 800758e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007590:	4a64      	ldr	r2, [pc, #400]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d03c      	beq.n	800761e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01c      	beq.n	80075e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075ac:	4b5d      	ldr	r3, [pc, #372]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80075ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075b2:	4a5c      	ldr	r2, [pc, #368]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075bc:	f7fd f84c 	bl	8004658 <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075c4:	f7fd f848 	bl	8004658 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e0fc      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075d6:	4b53      	ldr	r3, [pc, #332]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80075d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0ef      	beq.n	80075c4 <HAL_RCC_OscConfig+0x418>
 80075e4:	e01b      	b.n	800761e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075e6:	4b4f      	ldr	r3, [pc, #316]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80075e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075ec:	4a4d      	ldr	r2, [pc, #308]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f6:	f7fd f82f 	bl	8004658 <HAL_GetTick>
 80075fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075fc:	e008      	b.n	8007610 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075fe:	f7fd f82b 	bl	8004658 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e0df      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007610:	4b44      	ldr	r3, [pc, #272]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1ef      	bne.n	80075fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 80d3 	beq.w	80077ce <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007628:	4b3e      	ldr	r3, [pc, #248]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 030c 	and.w	r3, r3, #12
 8007630:	2b0c      	cmp	r3, #12
 8007632:	f000 808d 	beq.w	8007750 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d15a      	bne.n	80076f4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800763e:	4b39      	ldr	r3, [pc, #228]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a38      	ldr	r2, [pc, #224]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764a:	f7fd f805 	bl	8004658 <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007650:	e008      	b.n	8007664 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007652:	f7fd f801 	bl	8004658 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e0b5      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007664:	4b2f      	ldr	r3, [pc, #188]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1f0      	bne.n	8007652 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007670:	4b2c      	ldr	r3, [pc, #176]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	4b2d      	ldr	r3, [pc, #180]	; (800772c <HAL_RCC_OscConfig+0x580>)
 8007676:	4013      	ands	r3, r2
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6a11      	ldr	r1, [r2, #32]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007680:	3a01      	subs	r2, #1
 8007682:	0112      	lsls	r2, r2, #4
 8007684:	4311      	orrs	r1, r2
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800768a:	0212      	lsls	r2, r2, #8
 800768c:	4311      	orrs	r1, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007692:	0852      	lsrs	r2, r2, #1
 8007694:	3a01      	subs	r2, #1
 8007696:	0552      	lsls	r2, r2, #21
 8007698:	4311      	orrs	r1, r2
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800769e:	0852      	lsrs	r2, r2, #1
 80076a0:	3a01      	subs	r2, #1
 80076a2:	0652      	lsls	r2, r2, #25
 80076a4:	4311      	orrs	r1, r2
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076aa:	06d2      	lsls	r2, r2, #27
 80076ac:	430a      	orrs	r2, r1
 80076ae:	491d      	ldr	r1, [pc, #116]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076b4:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a1a      	ldr	r2, [pc, #104]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80076ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076c0:	4b18      	ldr	r3, [pc, #96]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	4a17      	ldr	r2, [pc, #92]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80076c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076cc:	f7fc ffc4 	bl	8004658 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076d4:	f7fc ffc0 	bl	8004658 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e074      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f0      	beq.n	80076d4 <HAL_RCC_OscConfig+0x528>
 80076f2:	e06c      	b.n	80077ce <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f4:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 80076fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076fe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007700:	4b08      	ldr	r3, [pc, #32]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	4a07      	ldr	r2, [pc, #28]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007706:	f023 0303 	bic.w	r3, r3, #3
 800770a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	4a04      	ldr	r2, [pc, #16]	; (8007724 <HAL_RCC_OscConfig+0x578>)
 8007712:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800771a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771c:	f7fc ff9c 	bl	8004658 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007722:	e00e      	b.n	8007742 <HAL_RCC_OscConfig+0x596>
 8007724:	40021000 	.word	0x40021000
 8007728:	40007000 	.word	0x40007000
 800772c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007730:	f7fc ff92 	bl	8004658 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e046      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007742:	4b25      	ldr	r3, [pc, #148]	; (80077d8 <HAL_RCC_OscConfig+0x62c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x584>
 800774e:	e03e      	b.n	80077ce <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e039      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800775c:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <HAL_RCC_OscConfig+0x62c>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f003 0203 	and.w	r2, r3, #3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	429a      	cmp	r2, r3
 800776e:	d12c      	bne.n	80077ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	3b01      	subs	r3, #1
 800777c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777e:	429a      	cmp	r2, r3
 8007780:	d123      	bne.n	80077ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800778e:	429a      	cmp	r2, r3
 8007790:	d11b      	bne.n	80077ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800779e:	429a      	cmp	r2, r3
 80077a0:	d113      	bne.n	80077ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	085b      	lsrs	r3, r3, #1
 80077ae:	3b01      	subs	r3, #1
 80077b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d109      	bne.n	80077ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	3b01      	subs	r3, #1
 80077c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d001      	beq.n	80077ce <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40021000 	.word	0x40021000

080077dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80077e6:	2300      	movs	r3, #0
 80077e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e11e      	b.n	8007a32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077f4:	4b91      	ldr	r3, [pc, #580]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d910      	bls.n	8007824 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007802:	4b8e      	ldr	r3, [pc, #568]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f023 020f 	bic.w	r2, r3, #15
 800780a:	498c      	ldr	r1, [pc, #560]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	4313      	orrs	r3, r2
 8007810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007812:	4b8a      	ldr	r3, [pc, #552]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d001      	beq.n	8007824 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e106      	b.n	8007a32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d073      	beq.n	8007918 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d129      	bne.n	800788c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007838:	4b81      	ldr	r3, [pc, #516]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e0f4      	b.n	8007a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007848:	f000 f99e 	bl	8007b88 <RCC_GetSysClockFreqFromPLLSource>
 800784c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	4a7c      	ldr	r2, [pc, #496]	; (8007a44 <HAL_RCC_ClockConfig+0x268>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d93f      	bls.n	80078d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007856:	4b7a      	ldr	r3, [pc, #488]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d009      	beq.n	8007876 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800786a:	2b00      	cmp	r3, #0
 800786c:	d033      	beq.n	80078d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007872:	2b00      	cmp	r3, #0
 8007874:	d12f      	bne.n	80078d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007876:	4b72      	ldr	r3, [pc, #456]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800787e:	4a70      	ldr	r2, [pc, #448]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007884:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007886:	2380      	movs	r3, #128	; 0x80
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	e024      	b.n	80078d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d107      	bne.n	80078a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007894:	4b6a      	ldr	r3, [pc, #424]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d109      	bne.n	80078b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e0c6      	b.n	8007a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078a4:	4b66      	ldr	r3, [pc, #408]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e0be      	b.n	8007a32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80078b4:	f000 f8ce 	bl	8007a54 <HAL_RCC_GetSysClockFreq>
 80078b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4a61      	ldr	r2, [pc, #388]	; (8007a44 <HAL_RCC_ClockConfig+0x268>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d909      	bls.n	80078d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078c2:	4b5f      	ldr	r3, [pc, #380]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078ca:	4a5d      	ldr	r2, [pc, #372]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 80078cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80078d2:	2380      	movs	r3, #128	; 0x80
 80078d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078d6:	4b5a      	ldr	r3, [pc, #360]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f023 0203 	bic.w	r2, r3, #3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	4957      	ldr	r1, [pc, #348]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e8:	f7fc feb6 	bl	8004658 <HAL_GetTick>
 80078ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ee:	e00a      	b.n	8007906 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078f0:	f7fc feb2 	bl	8004658 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078fe:	4293      	cmp	r3, r2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e095      	b.n	8007a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007906:	4b4e      	ldr	r3, [pc, #312]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 020c 	and.w	r2, r3, #12
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	429a      	cmp	r2, r3
 8007916:	d1eb      	bne.n	80078f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d023      	beq.n	800796c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007930:	4b43      	ldr	r3, [pc, #268]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4a42      	ldr	r2, [pc, #264]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800793a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007948:	4b3d      	ldr	r3, [pc, #244]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007950:	4a3b      	ldr	r2, [pc, #236]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007956:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007958:	4b39      	ldr	r3, [pc, #228]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	4936      	ldr	r1, [pc, #216]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007966:	4313      	orrs	r3, r2
 8007968:	608b      	str	r3, [r1, #8]
 800796a:	e008      	b.n	800797e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b80      	cmp	r3, #128	; 0x80
 8007970:	d105      	bne.n	800797e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007972:	4b33      	ldr	r3, [pc, #204]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	4a32      	ldr	r2, [pc, #200]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800797c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800797e:	4b2f      	ldr	r3, [pc, #188]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d21d      	bcs.n	80079c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800798c:	4b2b      	ldr	r3, [pc, #172]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f023 020f 	bic.w	r2, r3, #15
 8007994:	4929      	ldr	r1, [pc, #164]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	4313      	orrs	r3, r2
 800799a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800799c:	f7fc fe5c 	bl	8004658 <HAL_GetTick>
 80079a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a2:	e00a      	b.n	80079ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a4:	f7fc fe58 	bl	8004658 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e03b      	b.n	8007a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ba:	4b20      	ldr	r3, [pc, #128]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d1ed      	bne.n	80079a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079d4:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	4917      	ldr	r1, [pc, #92]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079f2:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	490f      	ldr	r1, [pc, #60]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a06:	f000 f825 	bl	8007a54 <HAL_RCC_GetSysClockFreq>
 8007a0a:	4601      	mov	r1, r0
 8007a0c:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	091b      	lsrs	r3, r3, #4
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	4a0c      	ldr	r2, [pc, #48]	; (8007a48 <HAL_RCC_ClockConfig+0x26c>)
 8007a18:	5cd3      	ldrb	r3, [r2, r3]
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8007a22:	4a0a      	ldr	r2, [pc, #40]	; (8007a4c <HAL_RCC_ClockConfig+0x270>)
 8007a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007a26:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <HAL_RCC_ClockConfig+0x274>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fc fdc8 	bl	80045c0 <HAL_InitTick>
 8007a30:	4603      	mov	r3, r0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40022000 	.word	0x40022000
 8007a40:	40021000 	.word	0x40021000
 8007a44:	04c4b400 	.word	0x04c4b400
 8007a48:	08010d94 	.word	0x08010d94
 8007a4c:	2000000c 	.word	0x2000000c
 8007a50:	20000010 	.word	0x20000010

08007a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007a5a:	4b2c      	ldr	r3, [pc, #176]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 030c 	and.w	r3, r3, #12
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d102      	bne.n	8007a6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a66:	4b2a      	ldr	r3, [pc, #168]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007a68:	613b      	str	r3, [r7, #16]
 8007a6a:	e047      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007a6c:	4b27      	ldr	r3, [pc, #156]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 030c 	and.w	r3, r3, #12
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d102      	bne.n	8007a7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a78:	4b26      	ldr	r3, [pc, #152]	; (8007b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	e03e      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007a7e:	4b23      	ldr	r3, [pc, #140]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 030c 	and.w	r3, r3, #12
 8007a86:	2b0c      	cmp	r3, #12
 8007a88:	d136      	bne.n	8007af8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a8a:	4b20      	ldr	r3, [pc, #128]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a94:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	091b      	lsrs	r3, r3, #4
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d10c      	bne.n	8007ac2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007aa8:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab0:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ab2:	68d2      	ldr	r2, [r2, #12]
 8007ab4:	0a12      	lsrs	r2, r2, #8
 8007ab6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	617b      	str	r3, [r7, #20]
      break;
 8007ac0:	e00c      	b.n	8007adc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aca:	4a10      	ldr	r2, [pc, #64]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007acc:	68d2      	ldr	r2, [r2, #12]
 8007ace:	0a12      	lsrs	r2, r2, #8
 8007ad0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ad4:	fb02 f303 	mul.w	r3, r2, r3
 8007ad8:	617b      	str	r3, [r7, #20]
      break;
 8007ada:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007adc:	4b0b      	ldr	r3, [pc, #44]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	0e5b      	lsrs	r3, r3, #25
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af4:	613b      	str	r3, [r7, #16]
 8007af6:	e001      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007afc:	693b      	ldr	r3, [r7, #16]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	371c      	adds	r7, #28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40021000 	.word	0x40021000
 8007b10:	00f42400 	.word	0x00f42400
 8007b14:	007a1200 	.word	0x007a1200

08007b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b1c:	4b03      	ldr	r3, [pc, #12]	; (8007b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	2000000c 	.word	0x2000000c

08007b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b34:	f7ff fff0 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8007b38:	4601      	mov	r1, r0
 8007b3a:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	4a04      	ldr	r2, [pc, #16]	; (8007b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b46:	5cd3      	ldrb	r3, [r2, r3]
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	40021000 	.word	0x40021000
 8007b58:	08010da4 	.word	0x08010da4

08007b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007b60:	f7ff ffda 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8007b64:	4601      	mov	r1, r0
 8007b66:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	0adb      	lsrs	r3, r3, #11
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	4a04      	ldr	r2, [pc, #16]	; (8007b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b72:	5cd3      	ldrb	r3, [r2, r3]
 8007b74:	f003 031f 	and.w	r3, r3, #31
 8007b78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40021000 	.word	0x40021000
 8007b84:	08010da4 	.word	0x08010da4

08007b88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b8e:	4b1e      	ldr	r3, [pc, #120]	; (8007c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b98:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	091b      	lsrs	r3, r3, #4
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d10c      	bne.n	8007bc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bac:	4a17      	ldr	r2, [pc, #92]	; (8007c0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb4:	4a14      	ldr	r2, [pc, #80]	; (8007c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bb6:	68d2      	ldr	r2, [r2, #12]
 8007bb8:	0a12      	lsrs	r2, r2, #8
 8007bba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007bbe:	fb02 f303 	mul.w	r3, r2, r3
 8007bc2:	617b      	str	r3, [r7, #20]
    break;
 8007bc4:	e00c      	b.n	8007be0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bc6:	4a12      	ldr	r2, [pc, #72]	; (8007c10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bce:	4a0e      	ldr	r2, [pc, #56]	; (8007c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bd0:	68d2      	ldr	r2, [r2, #12]
 8007bd2:	0a12      	lsrs	r2, r2, #8
 8007bd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007bd8:	fb02 f303 	mul.w	r3, r2, r3
 8007bdc:	617b      	str	r3, [r7, #20]
    break;
 8007bde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007be0:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	0e5b      	lsrs	r3, r3, #25
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	3301      	adds	r3, #1
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007bfa:	687b      	ldr	r3, [r7, #4]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	40021000 	.word	0x40021000
 8007c0c:	007a1200 	.word	0x007a1200
 8007c10:	00f42400 	.word	0x00f42400

08007c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c20:	2300      	movs	r3, #0
 8007c22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8098 	beq.w	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c32:	2300      	movs	r3, #0
 8007c34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c36:	4b43      	ldr	r3, [pc, #268]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10d      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c42:	4b40      	ldr	r3, [pc, #256]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	4a3f      	ldr	r2, [pc, #252]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c4e:	4b3d      	ldr	r3, [pc, #244]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c56:	60bb      	str	r3, [r7, #8]
 8007c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c5e:	4b3a      	ldr	r3, [pc, #232]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a39      	ldr	r2, [pc, #228]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c6a:	f7fc fcf5 	bl	8004658 <HAL_GetTick>
 8007c6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c70:	e009      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c72:	f7fc fcf1 	bl	8004658 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d902      	bls.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	74fb      	strb	r3, [r7, #19]
        break;
 8007c84:	e005      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c86:	4b30      	ldr	r3, [pc, #192]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0ef      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007c92:	7cfb      	ldrb	r3, [r7, #19]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d159      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c98:	4b2a      	ldr	r3, [pc, #168]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01e      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d019      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cb4:	4b23      	ldr	r3, [pc, #140]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cc0:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	4a1f      	ldr	r2, [pc, #124]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd6:	4a1b      	ldr	r2, [pc, #108]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ce0:	4a18      	ldr	r2, [pc, #96]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d016      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf2:	f7fc fcb1 	bl	8004658 <HAL_GetTick>
 8007cf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf8:	e00b      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cfa:	f7fc fcad 	bl	8004658 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d902      	bls.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	74fb      	strb	r3, [r7, #19]
            break;
 8007d10:	e006      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0ec      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007d20:	7cfb      	ldrb	r3, [r7, #19]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d26:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	4903      	ldr	r1, [pc, #12]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d3c:	e008      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d3e:	7cfb      	ldrb	r3, [r7, #19]
 8007d40:	74bb      	strb	r3, [r7, #18]
 8007d42:	e005      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007d44:	40021000 	.word	0x40021000
 8007d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4c:	7cfb      	ldrb	r3, [r7, #19]
 8007d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d50:	7c7b      	ldrb	r3, [r7, #17]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d105      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d56:	4ba6      	ldr	r3, [pc, #664]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5a:	4aa5      	ldr	r2, [pc, #660]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d6e:	4ba0      	ldr	r3, [pc, #640]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d74:	f023 0203 	bic.w	r2, r3, #3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	499c      	ldr	r1, [pc, #624]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d90:	4b97      	ldr	r3, [pc, #604]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d96:	f023 020c 	bic.w	r2, r3, #12
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	4994      	ldr	r1, [pc, #592]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007db2:	4b8f      	ldr	r3, [pc, #572]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	498b      	ldr	r1, [pc, #556]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007dd4:	4b86      	ldr	r3, [pc, #536]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	4983      	ldr	r1, [pc, #524]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007df6:	4b7e      	ldr	r3, [pc, #504]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	497a      	ldr	r1, [pc, #488]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e18:	4b75      	ldr	r3, [pc, #468]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	4972      	ldr	r1, [pc, #456]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e3a:	4b6d      	ldr	r3, [pc, #436]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	4969      	ldr	r1, [pc, #420]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e5c:	4b64      	ldr	r3, [pc, #400]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	4961      	ldr	r1, [pc, #388]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e7e:	4b5c      	ldr	r3, [pc, #368]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	4958      	ldr	r1, [pc, #352]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d015      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ea0:	4b53      	ldr	r3, [pc, #332]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	4950      	ldr	r1, [pc, #320]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ebe:	d105      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ec0:	4b4b      	ldr	r3, [pc, #300]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	4a4a      	ldr	r2, [pc, #296]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d015      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ed8:	4b45      	ldr	r3, [pc, #276]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ede:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee6:	4942      	ldr	r1, [pc, #264]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ef6:	d105      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ef8:	4b3d      	ldr	r3, [pc, #244]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	4a3c      	ldr	r2, [pc, #240]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d015      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f10:	4b37      	ldr	r3, [pc, #220]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	4934      	ldr	r1, [pc, #208]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f2e:	d105      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f30:	4b2f      	ldr	r3, [pc, #188]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	4a2e      	ldr	r2, [pc, #184]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d015      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f48:	4b29      	ldr	r3, [pc, #164]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f56:	4926      	ldr	r1, [pc, #152]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f66:	d105      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f68:	4b21      	ldr	r3, [pc, #132]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	4a20      	ldr	r2, [pc, #128]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d015      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f80:	4b1b      	ldr	r3, [pc, #108]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	4918      	ldr	r1, [pc, #96]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f9e:	d105      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fa0:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	4a12      	ldr	r2, [pc, #72]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007faa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d015      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007fb8:	4b0d      	ldr	r3, [pc, #52]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	490a      	ldr	r1, [pc, #40]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fd6:	d105      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	4a04      	ldr	r2, [pc, #16]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40021000 	.word	0x40021000

08007ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e049      	b.n	800809a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fc f8d2 	bl	80041c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3304      	adds	r3, #4
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	f000 ff1a 	bl	8008e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e049      	b.n	8008148 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d106      	bne.n	80080ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f841 	bl	8008150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2202      	movs	r2, #2
 80080d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f000 fec3 	bl	8008e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d109      	bne.n	8008188 <HAL_TIM_PWM_Start+0x24>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b01      	cmp	r3, #1
 800817e:	bf14      	ite	ne
 8008180:	2301      	movne	r3, #1
 8008182:	2300      	moveq	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	e03c      	b.n	8008202 <HAL_TIM_PWM_Start+0x9e>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b04      	cmp	r3, #4
 800818c:	d109      	bne.n	80081a2 <HAL_TIM_PWM_Start+0x3e>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b01      	cmp	r3, #1
 8008198:	bf14      	ite	ne
 800819a:	2301      	movne	r3, #1
 800819c:	2300      	moveq	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	e02f      	b.n	8008202 <HAL_TIM_PWM_Start+0x9e>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	d109      	bne.n	80081bc <HAL_TIM_PWM_Start+0x58>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	bf14      	ite	ne
 80081b4:	2301      	movne	r3, #1
 80081b6:	2300      	moveq	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	e022      	b.n	8008202 <HAL_TIM_PWM_Start+0x9e>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b0c      	cmp	r3, #12
 80081c0:	d109      	bne.n	80081d6 <HAL_TIM_PWM_Start+0x72>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	bf14      	ite	ne
 80081ce:	2301      	movne	r3, #1
 80081d0:	2300      	moveq	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	e015      	b.n	8008202 <HAL_TIM_PWM_Start+0x9e>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b10      	cmp	r3, #16
 80081da:	d109      	bne.n	80081f0 <HAL_TIM_PWM_Start+0x8c>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	bf14      	ite	ne
 80081e8:	2301      	movne	r3, #1
 80081ea:	2300      	moveq	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	e008      	b.n	8008202 <HAL_TIM_PWM_Start+0x9e>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	bf14      	ite	ne
 80081fc:	2301      	movne	r3, #1
 80081fe:	2300      	moveq	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e06e      	b.n	80082e8 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <HAL_TIM_PWM_Start+0xb6>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008218:	e023      	b.n	8008262 <HAL_TIM_PWM_Start+0xfe>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b04      	cmp	r3, #4
 800821e:	d104      	bne.n	800822a <HAL_TIM_PWM_Start+0xc6>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008228:	e01b      	b.n	8008262 <HAL_TIM_PWM_Start+0xfe>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b08      	cmp	r3, #8
 800822e:	d104      	bne.n	800823a <HAL_TIM_PWM_Start+0xd6>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008238:	e013      	b.n	8008262 <HAL_TIM_PWM_Start+0xfe>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b0c      	cmp	r3, #12
 800823e:	d104      	bne.n	800824a <HAL_TIM_PWM_Start+0xe6>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008248:	e00b      	b.n	8008262 <HAL_TIM_PWM_Start+0xfe>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b10      	cmp	r3, #16
 800824e:	d104      	bne.n	800825a <HAL_TIM_PWM_Start+0xf6>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008258:	e003      	b.n	8008262 <HAL_TIM_PWM_Start+0xfe>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2201      	movs	r2, #1
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	4618      	mov	r0, r3
 800826c:	f001 fbee 	bl	8009a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <HAL_TIM_PWM_Start+0x18c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x13e>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <HAL_TIM_PWM_Start+0x190>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d00e      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x13e>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a1b      	ldr	r2, [pc, #108]	; (80082f8 <HAL_TIM_PWM_Start+0x194>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d009      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x13e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a1a      	ldr	r2, [pc, #104]	; (80082fc <HAL_TIM_PWM_Start+0x198>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d004      	beq.n	80082a2 <HAL_TIM_PWM_Start+0x13e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a18      	ldr	r2, [pc, #96]	; (8008300 <HAL_TIM_PWM_Start+0x19c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d101      	bne.n	80082a6 <HAL_TIM_PWM_Start+0x142>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e000      	b.n	80082a8 <HAL_TIM_PWM_Start+0x144>
 80082a6:	2300      	movs	r3, #0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	4b10      	ldr	r3, [pc, #64]	; (8008304 <HAL_TIM_PWM_Start+0x1a0>)
 80082c4:	4013      	ands	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b06      	cmp	r3, #6
 80082cc:	d00b      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x182>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d4:	d007      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0201 	orr.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40012c00 	.word	0x40012c00
 80082f4:	40013400 	.word	0x40013400
 80082f8:	40014000 	.word	0x40014000
 80082fc:	40014400 	.word	0x40014400
 8008300:	40014800 	.word	0x40014800
 8008304:	00010007 	.word	0x00010007

08008308 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2200      	movs	r2, #0
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f001 fb96 	bl	8009a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a3e      	ldr	r2, [pc, #248]	; (8008420 <HAL_TIM_PWM_Stop+0x118>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d013      	beq.n	8008352 <HAL_TIM_PWM_Stop+0x4a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a3d      	ldr	r2, [pc, #244]	; (8008424 <HAL_TIM_PWM_Stop+0x11c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00e      	beq.n	8008352 <HAL_TIM_PWM_Stop+0x4a>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a3b      	ldr	r2, [pc, #236]	; (8008428 <HAL_TIM_PWM_Stop+0x120>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d009      	beq.n	8008352 <HAL_TIM_PWM_Stop+0x4a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a3a      	ldr	r2, [pc, #232]	; (800842c <HAL_TIM_PWM_Stop+0x124>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d004      	beq.n	8008352 <HAL_TIM_PWM_Stop+0x4a>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a38      	ldr	r2, [pc, #224]	; (8008430 <HAL_TIM_PWM_Stop+0x128>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d101      	bne.n	8008356 <HAL_TIM_PWM_Stop+0x4e>
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <HAL_TIM_PWM_Stop+0x50>
 8008356:	2300      	movs	r3, #0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d017      	beq.n	800838c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6a1a      	ldr	r2, [r3, #32]
 8008362:	f241 1311 	movw	r3, #4369	; 0x1111
 8008366:	4013      	ands	r3, r2
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10f      	bne.n	800838c <HAL_TIM_PWM_Stop+0x84>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6a1a      	ldr	r2, [r3, #32]
 8008372:	f244 4344 	movw	r3, #17476	; 0x4444
 8008376:	4013      	ands	r3, r2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <HAL_TIM_PWM_Stop+0x84>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800838a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6a1a      	ldr	r2, [r3, #32]
 8008392:	f241 1311 	movw	r3, #4369	; 0x1111
 8008396:	4013      	ands	r3, r2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10f      	bne.n	80083bc <HAL_TIM_PWM_Stop+0xb4>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6a1a      	ldr	r2, [r3, #32]
 80083a2:	f244 4344 	movw	r3, #17476	; 0x4444
 80083a6:	4013      	ands	r3, r2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d107      	bne.n	80083bc <HAL_TIM_PWM_Stop+0xb4>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0201 	bic.w	r2, r2, #1
 80083ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d104      	bne.n	80083cc <HAL_TIM_PWM_Stop+0xc4>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083ca:	e023      	b.n	8008414 <HAL_TIM_PWM_Stop+0x10c>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d104      	bne.n	80083dc <HAL_TIM_PWM_Stop+0xd4>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083da:	e01b      	b.n	8008414 <HAL_TIM_PWM_Stop+0x10c>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b08      	cmp	r3, #8
 80083e0:	d104      	bne.n	80083ec <HAL_TIM_PWM_Stop+0xe4>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083ea:	e013      	b.n	8008414 <HAL_TIM_PWM_Stop+0x10c>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b0c      	cmp	r3, #12
 80083f0:	d104      	bne.n	80083fc <HAL_TIM_PWM_Stop+0xf4>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083fa:	e00b      	b.n	8008414 <HAL_TIM_PWM_Stop+0x10c>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b10      	cmp	r3, #16
 8008400:	d104      	bne.n	800840c <HAL_TIM_PWM_Stop+0x104>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800840a:	e003      	b.n	8008414 <HAL_TIM_PWM_Stop+0x10c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40012c00 	.word	0x40012c00
 8008424:	40013400 	.word	0x40013400
 8008428:	40014000 	.word	0x40014000
 800842c:	40014400 	.word	0x40014400
 8008430:	40014800 	.word	0x40014800

08008434 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e049      	b.n	80084da <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d106      	bne.n	8008460 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f841 	bl	80084e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3304      	adds	r3, #4
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f000 fcfa 	bl	8008e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80084ea:	bf00      	nop
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
	...

080084f8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d104      	bne.n	8008512 <HAL_TIM_IC_Start+0x1a>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800850e:	b2db      	uxtb	r3, r3
 8008510:	e023      	b.n	800855a <HAL_TIM_IC_Start+0x62>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b04      	cmp	r3, #4
 8008516:	d104      	bne.n	8008522 <HAL_TIM_IC_Start+0x2a>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800851e:	b2db      	uxtb	r3, r3
 8008520:	e01b      	b.n	800855a <HAL_TIM_IC_Start+0x62>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b08      	cmp	r3, #8
 8008526:	d104      	bne.n	8008532 <HAL_TIM_IC_Start+0x3a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800852e:	b2db      	uxtb	r3, r3
 8008530:	e013      	b.n	800855a <HAL_TIM_IC_Start+0x62>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b0c      	cmp	r3, #12
 8008536:	d104      	bne.n	8008542 <HAL_TIM_IC_Start+0x4a>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800853e:	b2db      	uxtb	r3, r3
 8008540:	e00b      	b.n	800855a <HAL_TIM_IC_Start+0x62>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b10      	cmp	r3, #16
 8008546:	d104      	bne.n	8008552 <HAL_TIM_IC_Start+0x5a>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800854e:	b2db      	uxtb	r3, r3
 8008550:	e003      	b.n	800855a <HAL_TIM_IC_Start+0x62>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008558:	b2db      	uxtb	r3, r3
 800855a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <HAL_TIM_IC_Start+0x74>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008568:	b2db      	uxtb	r3, r3
 800856a:	e013      	b.n	8008594 <HAL_TIM_IC_Start+0x9c>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b04      	cmp	r3, #4
 8008570:	d104      	bne.n	800857c <HAL_TIM_IC_Start+0x84>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008578:	b2db      	uxtb	r3, r3
 800857a:	e00b      	b.n	8008594 <HAL_TIM_IC_Start+0x9c>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b08      	cmp	r3, #8
 8008580:	d104      	bne.n	800858c <HAL_TIM_IC_Start+0x94>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008588:	b2db      	uxtb	r3, r3
 800858a:	e003      	b.n	8008594 <HAL_TIM_IC_Start+0x9c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008592:	b2db      	uxtb	r3, r3
 8008594:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d102      	bne.n	80085a2 <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d001      	beq.n	80085a6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e064      	b.n	8008670 <HAL_TIM_IC_Start+0x178>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <HAL_TIM_IC_Start+0xbe>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b4:	e023      	b.n	80085fe <HAL_TIM_IC_Start+0x106>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d104      	bne.n	80085c6 <HAL_TIM_IC_Start+0xce>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c4:	e01b      	b.n	80085fe <HAL_TIM_IC_Start+0x106>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d104      	bne.n	80085d6 <HAL_TIM_IC_Start+0xde>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085d4:	e013      	b.n	80085fe <HAL_TIM_IC_Start+0x106>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b0c      	cmp	r3, #12
 80085da:	d104      	bne.n	80085e6 <HAL_TIM_IC_Start+0xee>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085e4:	e00b      	b.n	80085fe <HAL_TIM_IC_Start+0x106>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b10      	cmp	r3, #16
 80085ea:	d104      	bne.n	80085f6 <HAL_TIM_IC_Start+0xfe>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f4:	e003      	b.n	80085fe <HAL_TIM_IC_Start+0x106>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d104      	bne.n	800860e <HAL_TIM_IC_Start+0x116>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800860c:	e013      	b.n	8008636 <HAL_TIM_IC_Start+0x13e>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b04      	cmp	r3, #4
 8008612:	d104      	bne.n	800861e <HAL_TIM_IC_Start+0x126>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800861c:	e00b      	b.n	8008636 <HAL_TIM_IC_Start+0x13e>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2b08      	cmp	r3, #8
 8008622:	d104      	bne.n	800862e <HAL_TIM_IC_Start+0x136>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800862c:	e003      	b.n	8008636 <HAL_TIM_IC_Start+0x13e>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2201      	movs	r2, #1
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f001 fa04 	bl	8009a4c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <HAL_TIM_IC_Start+0x180>)
 800864c:	4013      	ands	r3, r2
 800864e:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b06      	cmp	r3, #6
 8008654:	d00b      	beq.n	800866e <HAL_TIM_IC_Start+0x176>
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d007      	beq.n	800866e <HAL_TIM_IC_Start+0x176>
  {
    __HAL_TIM_ENABLE(htim);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f042 0201 	orr.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	00010007 	.word	0x00010007

0800867c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e097      	b.n	80087c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7fb fde5 	bl	8004274 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2202      	movs	r2, #2
 80086ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	6812      	ldr	r2, [r2, #0]
 80086bc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80086c0:	f023 0307 	bic.w	r3, r3, #7
 80086c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3304      	adds	r3, #4
 80086ce:	4619      	mov	r1, r3
 80086d0:	4610      	mov	r0, r2
 80086d2:	f000 fbcb 	bl	8008e6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086fe:	f023 0303 	bic.w	r3, r3, #3
 8008702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	4313      	orrs	r3, r2
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800871c:	f023 030c 	bic.w	r3, r3, #12
 8008720:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800872c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	4313      	orrs	r3, r2
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	011a      	lsls	r2, r3, #4
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	031b      	lsls	r3, r3, #12
 800874c:	4313      	orrs	r3, r2
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	4313      	orrs	r3, r2
 8008752:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800875a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008762:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	4313      	orrs	r3, r2
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d110      	bne.n	800881a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d102      	bne.n	8008804 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80087fe:	7b7b      	ldrb	r3, [r7, #13]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d001      	beq.n	8008808 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e068      	b.n	80088da <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2202      	movs	r2, #2
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008818:	e031      	b.n	800887e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d110      	bne.n	8008842 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d102      	bne.n	800882c <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008826:	7b3b      	ldrb	r3, [r7, #12]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d001      	beq.n	8008830 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e054      	b.n	80088da <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008840:	e01d      	b.n	800887e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d108      	bne.n	800885a <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d105      	bne.n	800885a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800884e:	7b7b      	ldrb	r3, [r7, #13]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d102      	bne.n	800885a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008854:	7b3b      	ldrb	r3, [r7, #12]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d001      	beq.n	800885e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e03d      	b.n	80088da <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2202      	movs	r2, #2
 8008862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2202      	movs	r2, #2
 8008872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2202      	movs	r2, #2
 800887a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <HAL_TIM_Encoder_Start+0xc2>
 8008884:	2b04      	cmp	r3, #4
 8008886:	d008      	beq.n	800889a <HAL_TIM_Encoder_Start+0xd2>
 8008888:	e00f      	b.n	80088aa <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2201      	movs	r2, #1
 8008890:	2100      	movs	r1, #0
 8008892:	4618      	mov	r0, r3
 8008894:	f001 f8da 	bl	8009a4c <TIM_CCxChannelCmd>
      break;
 8008898:	e016      	b.n	80088c8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2201      	movs	r2, #1
 80088a0:	2104      	movs	r1, #4
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 f8d2 	bl	8009a4c <TIM_CCxChannelCmd>
      break;
 80088a8:	e00e      	b.n	80088c8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2201      	movs	r2, #1
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 f8ca 	bl	8009a4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2201      	movs	r2, #1
 80088be:	2104      	movs	r1, #4
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 f8c3 	bl	8009a4c <TIM_CCxChannelCmd>
      break;
 80088c6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_TIM_IC_ConfigChannel+0x1a>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e082      	b.n	8008a02 <HAL_TIM_IC_ConfigChannel+0x120>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d11b      	bne.n	8008942 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f000 fedd 	bl	80096d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699a      	ldr	r2, [r3, #24]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 020c 	bic.w	r2, r2, #12
 800892c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6999      	ldr	r1, [r3, #24]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	619a      	str	r2, [r3, #24]
 8008940:	e05a      	b.n	80089f8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b04      	cmp	r3, #4
 8008946:	d11c      	bne.n	8008982 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f000 ff55 	bl	8009806 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800896a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6999      	ldr	r1, [r3, #24]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	021a      	lsls	r2, r3, #8
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	619a      	str	r2, [r3, #24]
 8008980:	e03a      	b.n	80089f8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b08      	cmp	r3, #8
 8008986:	d11b      	bne.n	80089c0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	6819      	ldr	r1, [r3, #0]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f000 ffa2 	bl	80098e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69da      	ldr	r2, [r3, #28]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 020c 	bic.w	r2, r2, #12
 80089aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	69d9      	ldr	r1, [r3, #28]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	61da      	str	r2, [r3, #28]
 80089be:	e01b      	b.n	80089f8 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6819      	ldr	r1, [r3, #0]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f000 ffc2 	bl	8009958 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	69da      	ldr	r2, [r3, #28]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80089e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69d9      	ldr	r1, [r3, #28]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	021a      	lsls	r2, r3, #8
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d101      	bne.n	8008a26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008a22:	2302      	movs	r3, #2
 8008a24:	e0fd      	b.n	8008c22 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b14      	cmp	r3, #20
 8008a32:	f200 80f0 	bhi.w	8008c16 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a91 	.word	0x08008a91
 8008a40:	08008c17 	.word	0x08008c17
 8008a44:	08008c17 	.word	0x08008c17
 8008a48:	08008c17 	.word	0x08008c17
 8008a4c:	08008ad1 	.word	0x08008ad1
 8008a50:	08008c17 	.word	0x08008c17
 8008a54:	08008c17 	.word	0x08008c17
 8008a58:	08008c17 	.word	0x08008c17
 8008a5c:	08008b13 	.word	0x08008b13
 8008a60:	08008c17 	.word	0x08008c17
 8008a64:	08008c17 	.word	0x08008c17
 8008a68:	08008c17 	.word	0x08008c17
 8008a6c:	08008b53 	.word	0x08008b53
 8008a70:	08008c17 	.word	0x08008c17
 8008a74:	08008c17 	.word	0x08008c17
 8008a78:	08008c17 	.word	0x08008c17
 8008a7c:	08008b95 	.word	0x08008b95
 8008a80:	08008c17 	.word	0x08008c17
 8008a84:	08008c17 	.word	0x08008c17
 8008a88:	08008c17 	.word	0x08008c17
 8008a8c:	08008bd5 	.word	0x08008bd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 fa78 	bl	8008f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f042 0208 	orr.w	r2, r2, #8
 8008aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0204 	bic.w	r2, r2, #4
 8008aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6999      	ldr	r1, [r3, #24]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	691a      	ldr	r2, [r3, #16]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	619a      	str	r2, [r3, #24]
      break;
 8008ace:	e0a3      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68b9      	ldr	r1, [r7, #8]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fae8 	bl	80090ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6999      	ldr	r1, [r3, #24]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	021a      	lsls	r2, r3, #8
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	619a      	str	r2, [r3, #24]
      break;
 8008b10:	e082      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68b9      	ldr	r1, [r7, #8]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fb51 	bl	80091c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69da      	ldr	r2, [r3, #28]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f042 0208 	orr.w	r2, r2, #8
 8008b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	69da      	ldr	r2, [r3, #28]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0204 	bic.w	r2, r2, #4
 8008b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69d9      	ldr	r1, [r3, #28]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	691a      	ldr	r2, [r3, #16]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	61da      	str	r2, [r3, #28]
      break;
 8008b50:	e062      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68b9      	ldr	r1, [r7, #8]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fbb9 	bl	80092d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	69da      	ldr	r2, [r3, #28]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69d9      	ldr	r1, [r3, #28]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	021a      	lsls	r2, r3, #8
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	61da      	str	r2, [r3, #28]
      break;
 8008b92:	e041      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fc22 	bl	80093e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0208 	orr.w	r2, r2, #8
 8008bae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0204 	bic.w	r2, r2, #4
 8008bbe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	691a      	ldr	r2, [r3, #16]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008bd2:	e021      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 fc66 	bl	80094ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bfe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	021a      	lsls	r2, r3, #8
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008c14:	e000      	b.n	8008c18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008c16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop

08008c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d101      	bne.n	8008c44 <HAL_TIM_ConfigClockSource+0x18>
 8008c40:	2302      	movs	r3, #2
 8008c42:	e0c3      	b.n	8008dcc <HAL_TIM_ConfigClockSource+0x1a0>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008c62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b70      	cmp	r3, #112	; 0x70
 8008c7e:	d038      	beq.n	8008cf2 <HAL_TIM_ConfigClockSource+0xc6>
 8008c80:	2b70      	cmp	r3, #112	; 0x70
 8008c82:	d815      	bhi.n	8008cb0 <HAL_TIM_ConfigClockSource+0x84>
 8008c84:	2b30      	cmp	r3, #48	; 0x30
 8008c86:	f000 808e 	beq.w	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
 8008c8a:	2b30      	cmp	r3, #48	; 0x30
 8008c8c:	d809      	bhi.n	8008ca2 <HAL_TIM_ConfigClockSource+0x76>
 8008c8e:	2b10      	cmp	r3, #16
 8008c90:	f000 8089 	beq.w	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	f000 8086 	beq.w	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 8083 	beq.w	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008ca0:	e08b      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8008ca2:	2b50      	cmp	r3, #80	; 0x50
 8008ca4:	d04f      	beq.n	8008d46 <HAL_TIM_ConfigClockSource+0x11a>
 8008ca6:	2b60      	cmp	r3, #96	; 0x60
 8008ca8:	d05d      	beq.n	8008d66 <HAL_TIM_ConfigClockSource+0x13a>
 8008caa:	2b40      	cmp	r3, #64	; 0x40
 8008cac:	d06b      	beq.n	8008d86 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8008cae:	e084      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8008cb0:	4a48      	ldr	r2, [pc, #288]	; (8008dd4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d077      	beq.n	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
 8008cb6:	4a47      	ldr	r2, [pc, #284]	; (8008dd4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d809      	bhi.n	8008cd0 <HAL_TIM_ConfigClockSource+0xa4>
 8008cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc0:	d02e      	beq.n	8008d20 <HAL_TIM_ConfigClockSource+0xf4>
 8008cc2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008cc6:	d06e      	beq.n	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
 8008cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ccc:	d074      	beq.n	8008db8 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8008cce:	e074      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8008cd0:	4a41      	ldr	r2, [pc, #260]	; (8008dd8 <HAL_TIM_ConfigClockSource+0x1ac>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d067      	beq.n	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
 8008cd6:	4a40      	ldr	r2, [pc, #256]	; (8008dd8 <HAL_TIM_ConfigClockSource+0x1ac>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d803      	bhi.n	8008ce4 <HAL_TIM_ConfigClockSource+0xb8>
 8008cdc:	4a3f      	ldr	r2, [pc, #252]	; (8008ddc <HAL_TIM_ConfigClockSource+0x1b0>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d061      	beq.n	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8008ce2:	e06a      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8008ce4:	4a3e      	ldr	r2, [pc, #248]	; (8008de0 <HAL_TIM_ConfigClockSource+0x1b4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d05d      	beq.n	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
 8008cea:	4a3e      	ldr	r2, [pc, #248]	; (8008de4 <HAL_TIM_ConfigClockSource+0x1b8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d05a      	beq.n	8008da6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8008cf0:	e063      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6818      	ldr	r0, [r3, #0]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	6899      	ldr	r1, [r3, #8]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	f000 fe83 	bl	8009a0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	609a      	str	r2, [r3, #8]
      break;
 8008d1e:	e04c      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	6899      	ldr	r1, [r3, #8]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f000 fe6c 	bl	8009a0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689a      	ldr	r2, [r3, #8]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d42:	609a      	str	r2, [r3, #8]
      break;
 8008d44:	e039      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	6859      	ldr	r1, [r3, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f000 fd28 	bl	80097a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2150      	movs	r1, #80	; 0x50
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fe37 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 8008d64:	e029      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	6859      	ldr	r1, [r3, #4]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	461a      	mov	r2, r3
 8008d74:	f000 fd84 	bl	8009880 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2160      	movs	r1, #96	; 0x60
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fe27 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 8008d84:	e019      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	6859      	ldr	r1, [r3, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	461a      	mov	r2, r3
 8008d94:	f000 fd08 	bl	80097a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2140      	movs	r1, #64	; 0x40
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 fe17 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 8008da4:	e009      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f000 fe0e 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 8008db6:	e000      	b.n	8008dba <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8008db8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	00100020 	.word	0x00100020
 8008dd8:	00100040 	.word	0x00100040
 8008ddc:	00100030 	.word	0x00100030
 8008de0:	00100060 	.word	0x00100060
 8008de4:	00100070 	.word	0x00100070

08008de8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e031      	b.n	8008e64 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fbb0 	bl	8009578 <TIM_SlaveTimer_SetConfig>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d009      	beq.n	8008e32 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e018      	b.n	8008e64 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e40:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e50:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a3c      	ldr	r2, [pc, #240]	; (8008f70 <TIM_Base_SetConfig+0x104>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00f      	beq.n	8008ea4 <TIM_Base_SetConfig+0x38>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8a:	d00b      	beq.n	8008ea4 <TIM_Base_SetConfig+0x38>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a39      	ldr	r2, [pc, #228]	; (8008f74 <TIM_Base_SetConfig+0x108>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d007      	beq.n	8008ea4 <TIM_Base_SetConfig+0x38>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a38      	ldr	r2, [pc, #224]	; (8008f78 <TIM_Base_SetConfig+0x10c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d003      	beq.n	8008ea4 <TIM_Base_SetConfig+0x38>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a37      	ldr	r2, [pc, #220]	; (8008f7c <TIM_Base_SetConfig+0x110>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d108      	bne.n	8008eb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a2d      	ldr	r2, [pc, #180]	; (8008f70 <TIM_Base_SetConfig+0x104>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d01b      	beq.n	8008ef6 <TIM_Base_SetConfig+0x8a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec4:	d017      	beq.n	8008ef6 <TIM_Base_SetConfig+0x8a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a2a      	ldr	r2, [pc, #168]	; (8008f74 <TIM_Base_SetConfig+0x108>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d013      	beq.n	8008ef6 <TIM_Base_SetConfig+0x8a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a29      	ldr	r2, [pc, #164]	; (8008f78 <TIM_Base_SetConfig+0x10c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00f      	beq.n	8008ef6 <TIM_Base_SetConfig+0x8a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a28      	ldr	r2, [pc, #160]	; (8008f7c <TIM_Base_SetConfig+0x110>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00b      	beq.n	8008ef6 <TIM_Base_SetConfig+0x8a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a27      	ldr	r2, [pc, #156]	; (8008f80 <TIM_Base_SetConfig+0x114>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d007      	beq.n	8008ef6 <TIM_Base_SetConfig+0x8a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a26      	ldr	r2, [pc, #152]	; (8008f84 <TIM_Base_SetConfig+0x118>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d003      	beq.n	8008ef6 <TIM_Base_SetConfig+0x8a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a25      	ldr	r2, [pc, #148]	; (8008f88 <TIM_Base_SetConfig+0x11c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d108      	bne.n	8008f08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a10      	ldr	r2, [pc, #64]	; (8008f70 <TIM_Base_SetConfig+0x104>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00f      	beq.n	8008f54 <TIM_Base_SetConfig+0xe8>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <TIM_Base_SetConfig+0x110>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <TIM_Base_SetConfig+0xe8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a10      	ldr	r2, [pc, #64]	; (8008f80 <TIM_Base_SetConfig+0x114>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <TIM_Base_SetConfig+0xe8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a0f      	ldr	r2, [pc, #60]	; (8008f84 <TIM_Base_SetConfig+0x118>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_Base_SetConfig+0xe8>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a0e      	ldr	r2, [pc, #56]	; (8008f88 <TIM_Base_SetConfig+0x11c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d103      	bne.n	8008f5c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	691a      	ldr	r2, [r3, #16]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	615a      	str	r2, [r3, #20]
}
 8008f62:	bf00      	nop
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	40012c00 	.word	0x40012c00
 8008f74:	40000400 	.word	0x40000400
 8008f78:	40000800 	.word	0x40000800
 8008f7c:	40013400 	.word	0x40013400
 8008f80:	40014000 	.word	0x40014000
 8008f84:	40014400 	.word	0x40014400
 8008f88:	40014800 	.word	0x40014800

08008f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b087      	sub	sp, #28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f023 0201 	bic.w	r2, r3, #1
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0303 	bic.w	r3, r3, #3
 8008fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f023 0302 	bic.w	r3, r3, #2
 8008fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a2c      	ldr	r2, [pc, #176]	; (8009098 <TIM_OC1_SetConfig+0x10c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d00f      	beq.n	800900c <TIM_OC1_SetConfig+0x80>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a2b      	ldr	r2, [pc, #172]	; (800909c <TIM_OC1_SetConfig+0x110>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d00b      	beq.n	800900c <TIM_OC1_SetConfig+0x80>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a2a      	ldr	r2, [pc, #168]	; (80090a0 <TIM_OC1_SetConfig+0x114>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d007      	beq.n	800900c <TIM_OC1_SetConfig+0x80>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a29      	ldr	r2, [pc, #164]	; (80090a4 <TIM_OC1_SetConfig+0x118>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d003      	beq.n	800900c <TIM_OC1_SetConfig+0x80>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a28      	ldr	r2, [pc, #160]	; (80090a8 <TIM_OC1_SetConfig+0x11c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d10c      	bne.n	8009026 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f023 0308 	bic.w	r3, r3, #8
 8009012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f023 0304 	bic.w	r3, r3, #4
 8009024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a1b      	ldr	r2, [pc, #108]	; (8009098 <TIM_OC1_SetConfig+0x10c>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00f      	beq.n	800904e <TIM_OC1_SetConfig+0xc2>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a1a      	ldr	r2, [pc, #104]	; (800909c <TIM_OC1_SetConfig+0x110>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d00b      	beq.n	800904e <TIM_OC1_SetConfig+0xc2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a19      	ldr	r2, [pc, #100]	; (80090a0 <TIM_OC1_SetConfig+0x114>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d007      	beq.n	800904e <TIM_OC1_SetConfig+0xc2>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a18      	ldr	r2, [pc, #96]	; (80090a4 <TIM_OC1_SetConfig+0x118>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d003      	beq.n	800904e <TIM_OC1_SetConfig+0xc2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a17      	ldr	r2, [pc, #92]	; (80090a8 <TIM_OC1_SetConfig+0x11c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d111      	bne.n	8009072 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800905c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	4313      	orrs	r3, r2
 8009066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	621a      	str	r2, [r3, #32]
}
 800908c:	bf00      	nop
 800908e:	371c      	adds	r7, #28
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	40012c00 	.word	0x40012c00
 800909c:	40013400 	.word	0x40013400
 80090a0:	40014000 	.word	0x40014000
 80090a4:	40014400 	.word	0x40014400
 80090a8:	40014800 	.word	0x40014800

080090ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f023 0210 	bic.w	r2, r3, #16
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	021b      	lsls	r3, r3, #8
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f023 0320 	bic.w	r3, r3, #32
 80090fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	011b      	lsls	r3, r3, #4
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	4313      	orrs	r3, r2
 8009106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a28      	ldr	r2, [pc, #160]	; (80091ac <TIM_OC2_SetConfig+0x100>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d003      	beq.n	8009118 <TIM_OC2_SetConfig+0x6c>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a27      	ldr	r2, [pc, #156]	; (80091b0 <TIM_OC2_SetConfig+0x104>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d10d      	bne.n	8009134 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800911e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	011b      	lsls	r3, r3, #4
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009132:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a1d      	ldr	r2, [pc, #116]	; (80091ac <TIM_OC2_SetConfig+0x100>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00f      	beq.n	800915c <TIM_OC2_SetConfig+0xb0>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a1c      	ldr	r2, [pc, #112]	; (80091b0 <TIM_OC2_SetConfig+0x104>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00b      	beq.n	800915c <TIM_OC2_SetConfig+0xb0>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a1b      	ldr	r2, [pc, #108]	; (80091b4 <TIM_OC2_SetConfig+0x108>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d007      	beq.n	800915c <TIM_OC2_SetConfig+0xb0>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a1a      	ldr	r2, [pc, #104]	; (80091b8 <TIM_OC2_SetConfig+0x10c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d003      	beq.n	800915c <TIM_OC2_SetConfig+0xb0>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a19      	ldr	r2, [pc, #100]	; (80091bc <TIM_OC2_SetConfig+0x110>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d113      	bne.n	8009184 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800916a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	4313      	orrs	r3, r2
 8009176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	4313      	orrs	r3, r2
 8009182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	621a      	str	r2, [r3, #32]
}
 800919e:	bf00      	nop
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	40012c00 	.word	0x40012c00
 80091b0:	40013400 	.word	0x40013400
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40014400 	.word	0x40014400
 80091bc:	40014800 	.word	0x40014800

080091c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0303 	bic.w	r3, r3, #3
 80091fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800920c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	4313      	orrs	r3, r2
 8009218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a27      	ldr	r2, [pc, #156]	; (80092bc <TIM_OC3_SetConfig+0xfc>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d003      	beq.n	800922a <TIM_OC3_SetConfig+0x6a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a26      	ldr	r2, [pc, #152]	; (80092c0 <TIM_OC3_SetConfig+0x100>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d10d      	bne.n	8009246 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	021b      	lsls	r3, r3, #8
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	4313      	orrs	r3, r2
 800923c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a1c      	ldr	r2, [pc, #112]	; (80092bc <TIM_OC3_SetConfig+0xfc>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d00f      	beq.n	800926e <TIM_OC3_SetConfig+0xae>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a1b      	ldr	r2, [pc, #108]	; (80092c0 <TIM_OC3_SetConfig+0x100>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d00b      	beq.n	800926e <TIM_OC3_SetConfig+0xae>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a1a      	ldr	r2, [pc, #104]	; (80092c4 <TIM_OC3_SetConfig+0x104>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d007      	beq.n	800926e <TIM_OC3_SetConfig+0xae>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a19      	ldr	r2, [pc, #100]	; (80092c8 <TIM_OC3_SetConfig+0x108>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d003      	beq.n	800926e <TIM_OC3_SetConfig+0xae>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a18      	ldr	r2, [pc, #96]	; (80092cc <TIM_OC3_SetConfig+0x10c>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d113      	bne.n	8009296 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800927c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	4313      	orrs	r3, r2
 8009288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	011b      	lsls	r3, r3, #4
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	621a      	str	r2, [r3, #32]
}
 80092b0:	bf00      	nop
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	40012c00 	.word	0x40012c00
 80092c0:	40013400 	.word	0x40013400
 80092c4:	40014000 	.word	0x40014000
 80092c8:	40014400 	.word	0x40014400
 80092cc:	40014800 	.word	0x40014800

080092d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800930a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	021b      	lsls	r3, r3, #8
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	4313      	orrs	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800931e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	031b      	lsls	r3, r3, #12
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	4313      	orrs	r3, r2
 800932a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a28      	ldr	r2, [pc, #160]	; (80093d0 <TIM_OC4_SetConfig+0x100>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d003      	beq.n	800933c <TIM_OC4_SetConfig+0x6c>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a27      	ldr	r2, [pc, #156]	; (80093d4 <TIM_OC4_SetConfig+0x104>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d10d      	bne.n	8009358 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	031b      	lsls	r3, r3, #12
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	4313      	orrs	r3, r2
 800934e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009356:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a1d      	ldr	r2, [pc, #116]	; (80093d0 <TIM_OC4_SetConfig+0x100>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d00f      	beq.n	8009380 <TIM_OC4_SetConfig+0xb0>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a1c      	ldr	r2, [pc, #112]	; (80093d4 <TIM_OC4_SetConfig+0x104>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d00b      	beq.n	8009380 <TIM_OC4_SetConfig+0xb0>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a1b      	ldr	r2, [pc, #108]	; (80093d8 <TIM_OC4_SetConfig+0x108>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d007      	beq.n	8009380 <TIM_OC4_SetConfig+0xb0>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a1a      	ldr	r2, [pc, #104]	; (80093dc <TIM_OC4_SetConfig+0x10c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d003      	beq.n	8009380 <TIM_OC4_SetConfig+0xb0>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a19      	ldr	r2, [pc, #100]	; (80093e0 <TIM_OC4_SetConfig+0x110>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d113      	bne.n	80093a8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009386:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800938e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	019b      	lsls	r3, r3, #6
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	4313      	orrs	r3, r2
 800939a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	019b      	lsls	r3, r3, #6
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	621a      	str	r2, [r3, #32]
}
 80093c2:	bf00      	nop
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	40012c00 	.word	0x40012c00
 80093d4:	40013400 	.word	0x40013400
 80093d8:	40014000 	.word	0x40014000
 80093dc:	40014400 	.word	0x40014400
 80093e0:	40014800 	.word	0x40014800

080093e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009428:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	041b      	lsls	r3, r3, #16
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	4313      	orrs	r3, r2
 8009434:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a17      	ldr	r2, [pc, #92]	; (8009498 <TIM_OC5_SetConfig+0xb4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00f      	beq.n	800945e <TIM_OC5_SetConfig+0x7a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a16      	ldr	r2, [pc, #88]	; (800949c <TIM_OC5_SetConfig+0xb8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00b      	beq.n	800945e <TIM_OC5_SetConfig+0x7a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a15      	ldr	r2, [pc, #84]	; (80094a0 <TIM_OC5_SetConfig+0xbc>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d007      	beq.n	800945e <TIM_OC5_SetConfig+0x7a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a14      	ldr	r2, [pc, #80]	; (80094a4 <TIM_OC5_SetConfig+0xc0>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d003      	beq.n	800945e <TIM_OC5_SetConfig+0x7a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a13      	ldr	r2, [pc, #76]	; (80094a8 <TIM_OC5_SetConfig+0xc4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d109      	bne.n	8009472 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009464:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	021b      	lsls	r3, r3, #8
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	4313      	orrs	r3, r2
 8009470:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	621a      	str	r2, [r3, #32]
}
 800948c:	bf00      	nop
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	40012c00 	.word	0x40012c00
 800949c:	40013400 	.word	0x40013400
 80094a0:	40014000 	.word	0x40014000
 80094a4:	40014400 	.word	0x40014400
 80094a8:	40014800 	.word	0x40014800

080094ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	021b      	lsls	r3, r3, #8
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	051b      	lsls	r3, r3, #20
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a18      	ldr	r2, [pc, #96]	; (8009564 <TIM_OC6_SetConfig+0xb8>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00f      	beq.n	8009528 <TIM_OC6_SetConfig+0x7c>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a17      	ldr	r2, [pc, #92]	; (8009568 <TIM_OC6_SetConfig+0xbc>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00b      	beq.n	8009528 <TIM_OC6_SetConfig+0x7c>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a16      	ldr	r2, [pc, #88]	; (800956c <TIM_OC6_SetConfig+0xc0>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d007      	beq.n	8009528 <TIM_OC6_SetConfig+0x7c>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a15      	ldr	r2, [pc, #84]	; (8009570 <TIM_OC6_SetConfig+0xc4>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d003      	beq.n	8009528 <TIM_OC6_SetConfig+0x7c>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a14      	ldr	r2, [pc, #80]	; (8009574 <TIM_OC6_SetConfig+0xc8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d109      	bne.n	800953c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800952e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	029b      	lsls	r3, r3, #10
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	4313      	orrs	r3, r2
 800953a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	621a      	str	r2, [r3, #32]
}
 8009556:	bf00      	nop
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	40012c00 	.word	0x40012c00
 8009568:	40013400 	.word	0x40013400
 800956c:	40014000 	.word	0x40014000
 8009570:	40014400 	.word	0x40014400
 8009574:	40014800 	.word	0x40014800

08009578 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009594:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4313      	orrs	r3, r2
 800959e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095a6:	f023 0307 	bic.w	r3, r3, #7
 80095aa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	2b60      	cmp	r3, #96	; 0x60
 80095c4:	d06d      	beq.n	80096a2 <TIM_SlaveTimer_SetConfig+0x12a>
 80095c6:	2b60      	cmp	r3, #96	; 0x60
 80095c8:	d80f      	bhi.n	80095ea <TIM_SlaveTimer_SetConfig+0x72>
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d073      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
 80095ce:	2b20      	cmp	r3, #32
 80095d0:	d804      	bhi.n	80095dc <TIM_SlaveTimer_SetConfig+0x64>
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d06f      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
 80095d6:	2b10      	cmp	r3, #16
 80095d8:	d06d      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 80095da:	e06d      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 80095dc:	2b40      	cmp	r3, #64	; 0x40
 80095de:	d028      	beq.n	8009632 <TIM_SlaveTimer_SetConfig+0xba>
 80095e0:	2b50      	cmp	r3, #80	; 0x50
 80095e2:	d054      	beq.n	800968e <TIM_SlaveTimer_SetConfig+0x116>
 80095e4:	2b30      	cmp	r3, #48	; 0x30
 80095e6:	d066      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 80095e8:	e066      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 80095ea:	4a36      	ldr	r2, [pc, #216]	; (80096c4 <TIM_SlaveTimer_SetConfig+0x14c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d062      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
 80095f0:	4a34      	ldr	r2, [pc, #208]	; (80096c4 <TIM_SlaveTimer_SetConfig+0x14c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d808      	bhi.n	8009608 <TIM_SlaveTimer_SetConfig+0x90>
 80095f6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095fa:	d05c      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
 80095fc:	4a32      	ldr	r2, [pc, #200]	; (80096c8 <TIM_SlaveTimer_SetConfig+0x150>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d059      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
 8009602:	2b70      	cmp	r3, #112	; 0x70
 8009604:	d00a      	beq.n	800961c <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8009606:	e057      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8009608:	4a30      	ldr	r2, [pc, #192]	; (80096cc <TIM_SlaveTimer_SetConfig+0x154>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d053      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
 800960e:	4a30      	ldr	r2, [pc, #192]	; (80096d0 <TIM_SlaveTimer_SetConfig+0x158>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d050      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
 8009614:	4a2f      	ldr	r2, [pc, #188]	; (80096d4 <TIM_SlaveTimer_SetConfig+0x15c>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d04d      	beq.n	80096b6 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 800961a:	e04d      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	68d9      	ldr	r1, [r3, #12]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	f000 f9ee 	bl	8009a0c <TIM_ETR_SetConfig>
      break;
 8009630:	e042      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b05      	cmp	r3, #5
 8009638:	d004      	beq.n	8009644 <TIM_SlaveTimer_SetConfig+0xcc>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009642:	d101      	bne.n	8009648 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e038      	b.n	80096ba <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6a1a      	ldr	r2, [r3, #32]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0201 	bic.w	r2, r2, #1
 800965e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800966e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	011b      	lsls	r3, r3, #4
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	4313      	orrs	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	621a      	str	r2, [r3, #32]
      break;
 800968c:	e014      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	6899      	ldr	r1, [r3, #8]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	461a      	mov	r2, r3
 800969c:	f000 f884 	bl	80097a8 <TIM_TI1_ConfigInputStage>
      break;
 80096a0:	e00a      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6899      	ldr	r1, [r3, #8]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f000 f8e6 	bl	8009880 <TIM_TI2_ConfigInputStage>
      break;
 80096b4:	e000      	b.n	80096b8 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 80096b6:	bf00      	nop
  }
  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	00100030 	.word	0x00100030
 80096c8:	00100020 	.word	0x00100020
 80096cc:	00100060 	.word	0x00100060
 80096d0:	00100070 	.word	0x00100070
 80096d4:	00100040 	.word	0x00100040

080096d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	f023 0201 	bic.w	r2, r3, #1
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4a24      	ldr	r2, [pc, #144]	; (8009794 <TIM_TI1_SetConfig+0xbc>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d013      	beq.n	800972e <TIM_TI1_SetConfig+0x56>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970c:	d00f      	beq.n	800972e <TIM_TI1_SetConfig+0x56>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4a21      	ldr	r2, [pc, #132]	; (8009798 <TIM_TI1_SetConfig+0xc0>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d00b      	beq.n	800972e <TIM_TI1_SetConfig+0x56>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4a20      	ldr	r2, [pc, #128]	; (800979c <TIM_TI1_SetConfig+0xc4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d007      	beq.n	800972e <TIM_TI1_SetConfig+0x56>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4a1f      	ldr	r2, [pc, #124]	; (80097a0 <TIM_TI1_SetConfig+0xc8>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d003      	beq.n	800972e <TIM_TI1_SetConfig+0x56>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4a1e      	ldr	r2, [pc, #120]	; (80097a4 <TIM_TI1_SetConfig+0xcc>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d101      	bne.n	8009732 <TIM_TI1_SetConfig+0x5a>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <TIM_TI1_SetConfig+0x5c>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d008      	beq.n	800974a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f023 0303 	bic.w	r3, r3, #3
 800973e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4313      	orrs	r3, r2
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	e003      	b.n	8009752 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f043 0301 	orr.w	r3, r3, #1
 8009750:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	011b      	lsls	r3, r3, #4
 800975e:	b2db      	uxtb	r3, r3
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	4313      	orrs	r3, r2
 8009764:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	f023 030a 	bic.w	r3, r3, #10
 800976c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f003 030a 	and.w	r3, r3, #10
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	4313      	orrs	r3, r2
 8009778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	621a      	str	r2, [r3, #32]
}
 8009786:	bf00      	nop
 8009788:	371c      	adds	r7, #28
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	40012c00 	.word	0x40012c00
 8009798:	40000400 	.word	0x40000400
 800979c:	40000800 	.word	0x40000800
 80097a0:	40013400 	.word	0x40013400
 80097a4:	40014000 	.word	0x40014000

080097a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	f023 0201 	bic.w	r2, r3, #1
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4313      	orrs	r3, r2
 80097dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f023 030a 	bic.w	r3, r3, #10
 80097e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	621a      	str	r2, [r3, #32]
}
 80097fa:	bf00      	nop
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009806:	b480      	push	{r7}
 8009808:	b087      	sub	sp, #28
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
 8009812:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	f023 0210 	bic.w	r2, r3, #16
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009832:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	4313      	orrs	r3, r2
 800983c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	031b      	lsls	r3, r3, #12
 800984a:	b29b      	uxth	r3, r3
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009858:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	011b      	lsls	r3, r3, #4
 800985e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4313      	orrs	r3, r2
 8009866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	621a      	str	r2, [r3, #32]
}
 8009874:	bf00      	nop
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	f023 0210 	bic.w	r2, r3, #16
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	031b      	lsls	r3, r3, #12
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	011b      	lsls	r3, r3, #4
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	621a      	str	r2, [r3, #32]
}
 80098d4:	bf00      	nop
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f023 0303 	bic.w	r3, r3, #3
 800990c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800991c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	b2db      	uxtb	r3, r3
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	4313      	orrs	r3, r2
 8009928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009930:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	4313      	orrs	r3, r2
 800993e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	621a      	str	r2, [r3, #32]
}
 800994c:	bf00      	nop
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009984:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	4313      	orrs	r3, r2
 800998e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009996:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	031b      	lsls	r3, r3, #12
 800999c:	b29b      	uxth	r3, r3
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80099aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	031b      	lsls	r3, r3, #12
 80099b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	621a      	str	r2, [r3, #32]
}
 80099c6:	bf00      	nop
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80099e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	f043 0307 	orr.w	r3, r3, #7
 80099f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	609a      	str	r2, [r3, #8]
}
 8009a00:	bf00      	nop
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	021a      	lsls	r2, r3, #8
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	609a      	str	r2, [r3, #8]
}
 8009a40:	bf00      	nop
 8009a42:	371c      	adds	r7, #28
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b087      	sub	sp, #28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f003 031f 	and.w	r3, r3, #31
 8009a5e:	2201      	movs	r2, #1
 8009a60:	fa02 f303 	lsl.w	r3, r2, r3
 8009a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a1a      	ldr	r2, [r3, #32]
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	43db      	mvns	r3, r3
 8009a6e:	401a      	ands	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6a1a      	ldr	r2, [r3, #32]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f003 031f 	and.w	r3, r3, #31
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	fa01 f303 	lsl.w	r3, r1, r3
 8009a84:	431a      	orrs	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	621a      	str	r2, [r3, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
	...

08009a98 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d109      	bne.n	8009abc <HAL_TIMEx_PWMN_Start+0x24>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	bf14      	ite	ne
 8009ab4:	2301      	movne	r3, #1
 8009ab6:	2300      	moveq	r3, #0
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	e022      	b.n	8009b02 <HAL_TIMEx_PWMN_Start+0x6a>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d109      	bne.n	8009ad6 <HAL_TIMEx_PWMN_Start+0x3e>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	bf14      	ite	ne
 8009ace:	2301      	movne	r3, #1
 8009ad0:	2300      	moveq	r3, #0
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	e015      	b.n	8009b02 <HAL_TIMEx_PWMN_Start+0x6a>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	d109      	bne.n	8009af0 <HAL_TIMEx_PWMN_Start+0x58>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	bf14      	ite	ne
 8009ae8:	2301      	movne	r3, #1
 8009aea:	2300      	moveq	r3, #0
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	e008      	b.n	8009b02 <HAL_TIMEx_PWMN_Start+0x6a>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	bf14      	ite	ne
 8009afc:	2301      	movne	r3, #1
 8009afe:	2300      	moveq	r3, #0
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e040      	b.n	8009b8c <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d104      	bne.n	8009b1a <HAL_TIMEx_PWMN_Start+0x82>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b18:	e013      	b.n	8009b42 <HAL_TIMEx_PWMN_Start+0xaa>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d104      	bne.n	8009b2a <HAL_TIMEx_PWMN_Start+0x92>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b28:	e00b      	b.n	8009b42 <HAL_TIMEx_PWMN_Start+0xaa>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b08      	cmp	r3, #8
 8009b2e:	d104      	bne.n	8009b3a <HAL_TIMEx_PWMN_Start+0xa2>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2202      	movs	r2, #2
 8009b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b38:	e003      	b.n	8009b42 <HAL_TIMEx_PWMN_Start+0xaa>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2204      	movs	r2, #4
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 f9a4 	bl	8009e98 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <HAL_TIMEx_PWMN_Start+0xfc>)
 8009b68:	4013      	ands	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b06      	cmp	r3, #6
 8009b70:	d00b      	beq.n	8009b8a <HAL_TIMEx_PWMN_Start+0xf2>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b78:	d007      	beq.n	8009b8a <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f042 0201 	orr.w	r2, r2, #1
 8009b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	00010007 	.word	0x00010007

08009b98 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 f974 	bl	8009e98 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6a1a      	ldr	r2, [r3, #32]
 8009bb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bba:	4013      	ands	r3, r2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10f      	bne.n	8009be0 <HAL_TIMEx_PWMN_Stop+0x48>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6a1a      	ldr	r2, [r3, #32]
 8009bc6:	f244 4344 	movw	r3, #17476	; 0x4444
 8009bca:	4013      	ands	r3, r2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d107      	bne.n	8009be0 <HAL_TIMEx_PWMN_Stop+0x48>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009bde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6a1a      	ldr	r2, [r3, #32]
 8009be6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bea:	4013      	ands	r3, r2
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10f      	bne.n	8009c10 <HAL_TIMEx_PWMN_Stop+0x78>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6a1a      	ldr	r2, [r3, #32]
 8009bf6:	f244 4344 	movw	r3, #17476	; 0x4444
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d107      	bne.n	8009c10 <HAL_TIMEx_PWMN_Stop+0x78>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f022 0201 	bic.w	r2, r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d104      	bne.n	8009c20 <HAL_TIMEx_PWMN_Stop+0x88>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c1e:	e013      	b.n	8009c48 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	d104      	bne.n	8009c30 <HAL_TIMEx_PWMN_Stop+0x98>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c2e:	e00b      	b.n	8009c48 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b08      	cmp	r3, #8
 8009c34:	d104      	bne.n	8009c40 <HAL_TIMEx_PWMN_Stop+0xa8>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c3e:	e003      	b.n	8009c48 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d101      	bne.n	8009c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c68:	2302      	movs	r3, #2
 8009c6a:	e065      	b.n	8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a2c      	ldr	r2, [pc, #176]	; (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d004      	beq.n	8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a2b      	ldr	r2, [pc, #172]	; (8009d48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d108      	bne.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ca6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a1b      	ldr	r2, [pc, #108]	; (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d018      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce2:	d013      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a18      	ldr	r2, [pc, #96]	; (8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00e      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a17      	ldr	r2, [pc, #92]	; (8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d009      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a12      	ldr	r2, [pc, #72]	; (8009d48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d004      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a13      	ldr	r2, [pc, #76]	; (8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d10c      	bne.n	8009d26 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	40012c00 	.word	0x40012c00
 8009d48:	40013400 	.word	0x40013400
 8009d4c:	40000400 	.word	0x40000400
 8009d50:	40000800 	.word	0x40000800
 8009d54:	40014000 	.word	0x40014000

08009d58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d101      	bne.n	8009d74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d70:	2302      	movs	r3, #2
 8009d72:	e087      	b.n	8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	041b      	lsls	r3, r3, #16
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a27      	ldr	r2, [pc, #156]	; (8009e90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d004      	beq.n	8009e02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a25      	ldr	r2, [pc, #148]	; (8009e94 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d106      	bne.n	8009e10 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a1e      	ldr	r2, [pc, #120]	; (8009e90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d004      	beq.n	8009e24 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a1d      	ldr	r2, [pc, #116]	; (8009e94 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d126      	bne.n	8009e72 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	051b      	lsls	r3, r3, #20
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a0e      	ldr	r2, [pc, #56]	; (8009e90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d004      	beq.n	8009e64 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a0d      	ldr	r2, [pc, #52]	; (8009e94 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d106      	bne.n	8009e72 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	40012c00 	.word	0x40012c00
 8009e94:	40013400 	.word	0x40013400

08009e98 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f003 031f 	and.w	r3, r3, #31
 8009eaa:	2204      	movs	r2, #4
 8009eac:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a1a      	ldr	r2, [r3, #32]
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	43db      	mvns	r3, r3
 8009eba:	401a      	ands	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a1a      	ldr	r2, [r3, #32]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f003 031f 	and.w	r3, r3, #31
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed0:	431a      	orrs	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	621a      	str	r2, [r3, #32]
}
 8009ed6:	bf00      	nop
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e042      	b.n	8009f7a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d106      	bne.n	8009f0c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7fa facc 	bl	80044a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2224      	movs	r2, #36	; 0x24
 8009f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 0201 	bic.w	r2, r2, #1
 8009f22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fa7f 	bl	800a428 <UART_SetConfig>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d101      	bne.n	8009f34 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e022      	b.n	8009f7a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 fc2d 	bl	800b79c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f042 0201 	orr.w	r2, r2, #1
 8009f70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 fcb4 	bl	800b8e0 <UART_CheckIdleState>
 8009f78:	4603      	mov	r3, r0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f98:	2b20      	cmp	r3, #32
 8009f9a:	f040 80bc 	bne.w	800a116 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <HAL_UART_Receive_IT+0x26>
 8009fa4:	88fb      	ldrh	r3, [r7, #6]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e0b4      	b.n	800a118 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d101      	bne.n	8009fbc <HAL_UART_Receive_IT+0x38>
 8009fb8:	2302      	movs	r3, #2
 8009fba:	e0ad      	b.n	800a118 <HAL_UART_Receive_IT+0x194>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	88fa      	ldrh	r2, [r7, #6]
 8009fce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	88fa      	ldrh	r2, [r7, #6]
 8009fd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fe8:	d10e      	bne.n	800a008 <HAL_UART_Receive_IT+0x84>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d105      	bne.n	8009ffe <HAL_UART_Receive_IT+0x7a>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009ff8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009ffc:	e02d      	b.n	800a05a <HAL_UART_Receive_IT+0xd6>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	22ff      	movs	r2, #255	; 0xff
 800a002:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a006:	e028      	b.n	800a05a <HAL_UART_Receive_IT+0xd6>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10d      	bne.n	800a02c <HAL_UART_Receive_IT+0xa8>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d104      	bne.n	800a022 <HAL_UART_Receive_IT+0x9e>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	22ff      	movs	r2, #255	; 0xff
 800a01c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a020:	e01b      	b.n	800a05a <HAL_UART_Receive_IT+0xd6>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	227f      	movs	r2, #127	; 0x7f
 800a026:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a02a:	e016      	b.n	800a05a <HAL_UART_Receive_IT+0xd6>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a034:	d10d      	bne.n	800a052 <HAL_UART_Receive_IT+0xce>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d104      	bne.n	800a048 <HAL_UART_Receive_IT+0xc4>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	227f      	movs	r2, #127	; 0x7f
 800a042:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a046:	e008      	b.n	800a05a <HAL_UART_Receive_IT+0xd6>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	223f      	movs	r2, #63	; 0x3f
 800a04c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a050:	e003      	b.n	800a05a <HAL_UART_Receive_IT+0xd6>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2222      	movs	r2, #34	; 0x22
 800a066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689a      	ldr	r2, [r3, #8]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f042 0201 	orr.w	r2, r2, #1
 800a078:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a07e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a082:	d12a      	bne.n	800a0da <HAL_UART_Receive_IT+0x156>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a08a:	88fa      	ldrh	r2, [r7, #6]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d324      	bcc.n	800a0da <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a098:	d107      	bne.n	800a0aa <HAL_UART_Receive_IT+0x126>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d103      	bne.n	800a0aa <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4a1f      	ldr	r2, [pc, #124]	; (800a124 <HAL_UART_Receive_IT+0x1a0>)
 800a0a6:	66da      	str	r2, [r3, #108]	; 0x6c
 800a0a8:	e002      	b.n	800a0b0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	4a1e      	ldr	r2, [pc, #120]	; (800a128 <HAL_UART_Receive_IT+0x1a4>)
 800a0ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0c6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a0d6:	609a      	str	r2, [r3, #8]
 800a0d8:	e01b      	b.n	800a112 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e2:	d107      	bne.n	800a0f4 <HAL_UART_Receive_IT+0x170>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d103      	bne.n	800a0f4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	4a0f      	ldr	r2, [pc, #60]	; (800a12c <HAL_UART_Receive_IT+0x1a8>)
 800a0f0:	66da      	str	r2, [r3, #108]	; 0x6c
 800a0f2:	e002      	b.n	800a0fa <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4a0e      	ldr	r2, [pc, #56]	; (800a130 <HAL_UART_Receive_IT+0x1ac>)
 800a0f8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a110:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	e000      	b.n	800a118 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800a116:	2302      	movs	r3, #2
  }
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	0800bd09 	.word	0x0800bd09
 800a128:	0800bc01 	.word	0x0800bc01
 800a12c:	0800bb55 	.word	0x0800bb55
 800a130:	0800baab 	.word	0x0800baab

0800a134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d118      	bne.n	800a194 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	f003 0320 	and.w	r3, r3, #32
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d013      	beq.n	800a194 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	f003 0320 	and.w	r3, r3, #32
 800a172:	2b00      	cmp	r3, #0
 800a174:	d104      	bne.n	800a180 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d009      	beq.n	800a194 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 812e 	beq.w	800a3e6 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	4798      	blx	r3
      }
      return;
 800a192:	e128      	b.n	800a3e6 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	f000 80d1 	beq.w	800a33e <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	4b96      	ldr	r3, [pc, #600]	; (800a3f8 <HAL_UART_IRQHandler+0x2c4>)
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d105      	bne.n	800a1b2 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 80c6 	beq.w	800a33e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d010      	beq.n	800a1de <HAL_UART_IRQHandler+0xaa>
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d4:	f043 0201 	orr.w	r2, r3, #1
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	f003 0302 	and.w	r3, r3, #2
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d010      	beq.n	800a20a <HAL_UART_IRQHandler+0xd6>
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00b      	beq.n	800a20a <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a200:	f043 0204 	orr.w	r2, r3, #4
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	2b00      	cmp	r3, #0
 800a212:	d010      	beq.n	800a236 <HAL_UART_IRQHandler+0x102>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00b      	beq.n	800a236 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2204      	movs	r2, #4
 800a224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22c:	f043 0202 	orr.w	r2, r3, #2
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f003 0308 	and.w	r3, r3, #8
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d015      	beq.n	800a26c <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f003 0320 	and.w	r3, r3, #32
 800a246:	2b00      	cmp	r3, #0
 800a248:	d104      	bne.n	800a254 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	4b6a      	ldr	r3, [pc, #424]	; (800a3f8 <HAL_UART_IRQHandler+0x2c4>)
 800a24e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00b      	beq.n	800a26c <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2208      	movs	r2, #8
 800a25a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a262:	f043 0208 	orr.w	r2, r3, #8
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 80b9 	beq.w	800a3ea <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d011      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d104      	bne.n	800a296 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d007      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b8:	2b40      	cmp	r3, #64	; 0x40
 800a2ba:	d004      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d031      	beq.n	800a32a <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f001 fb9c 	bl	800ba04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d6:	2b40      	cmp	r3, #64	; 0x40
 800a2d8:	d123      	bne.n	800a322 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2e8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d013      	beq.n	800a31a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2f6:	4a41      	ldr	r2, [pc, #260]	; (800a3fc <HAL_UART_IRQHandler+0x2c8>)
 800a2f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fc f8a1 	bl	8006446 <HAL_DMA_Abort_IT>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d017      	beq.n	800a33a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a314:	4610      	mov	r0, r2
 800a316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a318:	e00f      	b.n	800a33a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f87a 	bl	800a414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a320:	e00b      	b.n	800a33a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f876 	bl	800a414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a328:	e007      	b.n	800a33a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f872 	bl	800a414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800a338:	e057      	b.n	800a3ea <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a33a:	bf00      	nop
    return;
 800a33c:	e055      	b.n	800a3ea <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00d      	beq.n	800a364 <HAL_UART_IRQHandler+0x230>
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d008      	beq.n	800a364 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a35a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f001 fd57 	bl	800be10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a362:	e045      	b.n	800a3f0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d012      	beq.n	800a394 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a374:	2b00      	cmp	r3, #0
 800a376:	d104      	bne.n	800a382 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d008      	beq.n	800a394 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a386:	2b00      	cmp	r3, #0
 800a388:	d031      	beq.n	800a3ee <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
    }
    return;
 800a392:	e02c      	b.n	800a3ee <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d008      	beq.n	800a3b0 <HAL_UART_IRQHandler+0x27c>
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 fb64 	bl	800ba76 <UART_EndTransmit_IT>
    return;
 800a3ae:	e01f      	b.n	800a3f0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d008      	beq.n	800a3cc <HAL_UART_IRQHandler+0x298>
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 fd37 	bl	800be38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3ca:	e011      	b.n	800a3f0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00c      	beq.n	800a3f0 <HAL_UART_IRQHandler+0x2bc>
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da09      	bge.n	800a3f0 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 fd21 	bl	800be24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3e2:	bf00      	nop
 800a3e4:	e004      	b.n	800a3f0 <HAL_UART_IRQHandler+0x2bc>
      return;
 800a3e6:	bf00      	nop
 800a3e8:	e002      	b.n	800a3f0 <HAL_UART_IRQHandler+0x2bc>
    return;
 800a3ea:	bf00      	nop
 800a3ec:	e000      	b.n	800a3f0 <HAL_UART_IRQHandler+0x2bc>
    return;
 800a3ee:	bf00      	nop
  }
}
 800a3f0:	3720      	adds	r7, #32
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	10000001 	.word	0x10000001
 800a3fc:	0800ba4b 	.word	0x0800ba4b

0800a400 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a428:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a42c:	b08a      	sub	sp, #40	; 0x28
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a432:	2300      	movs	r3, #0
 800a434:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	689a      	ldr	r2, [r3, #8]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	431a      	orrs	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	695b      	ldr	r3, [r3, #20]
 800a44c:	431a      	orrs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	4313      	orrs	r3, r2
 800a454:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a45a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45c:	4313      	orrs	r3, r2
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	4ba4      	ldr	r3, [pc, #656]	; (800a6f8 <UART_SetConfig+0x2d0>)
 800a468:	4013      	ands	r3, r2
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	6812      	ldr	r2, [r2, #0]
 800a46e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a470:	430b      	orrs	r3, r1
 800a472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	430a      	orrs	r2, r1
 800a488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a99      	ldr	r2, [pc, #612]	; (800a6fc <UART_SetConfig+0x2d4>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d004      	beq.n	800a4a4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a4ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	6812      	ldr	r2, [r2, #0]
 800a4b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4b8:	430b      	orrs	r3, r1
 800a4ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c2:	f023 010f 	bic.w	r1, r3, #15
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a8a      	ldr	r2, [pc, #552]	; (800a700 <UART_SetConfig+0x2d8>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d126      	bne.n	800a52a <UART_SetConfig+0x102>
 800a4dc:	4b89      	ldr	r3, [pc, #548]	; (800a704 <UART_SetConfig+0x2dc>)
 800a4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e2:	f003 0303 	and.w	r3, r3, #3
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d81a      	bhi.n	800a520 <UART_SetConfig+0xf8>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <UART_SetConfig+0xc8>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a501 	.word	0x0800a501
 800a4f4:	0800a511 	.word	0x0800a511
 800a4f8:	0800a509 	.word	0x0800a509
 800a4fc:	0800a519 	.word	0x0800a519
 800a500:	2301      	movs	r3, #1
 800a502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a506:	e0d6      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a508:	2302      	movs	r3, #2
 800a50a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a50e:	e0d2      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a510:	2304      	movs	r3, #4
 800a512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a516:	e0ce      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a518:	2308      	movs	r3, #8
 800a51a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a51e:	e0ca      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a520:	2310      	movs	r3, #16
 800a522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a526:	bf00      	nop
 800a528:	e0c5      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a76      	ldr	r2, [pc, #472]	; (800a708 <UART_SetConfig+0x2e0>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d138      	bne.n	800a5a6 <UART_SetConfig+0x17e>
 800a534:	4b73      	ldr	r3, [pc, #460]	; (800a704 <UART_SetConfig+0x2dc>)
 800a536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53a:	f003 030c 	and.w	r3, r3, #12
 800a53e:	2b0c      	cmp	r3, #12
 800a540:	d82c      	bhi.n	800a59c <UART_SetConfig+0x174>
 800a542:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <UART_SetConfig+0x120>)
 800a544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a548:	0800a57d 	.word	0x0800a57d
 800a54c:	0800a59d 	.word	0x0800a59d
 800a550:	0800a59d 	.word	0x0800a59d
 800a554:	0800a59d 	.word	0x0800a59d
 800a558:	0800a58d 	.word	0x0800a58d
 800a55c:	0800a59d 	.word	0x0800a59d
 800a560:	0800a59d 	.word	0x0800a59d
 800a564:	0800a59d 	.word	0x0800a59d
 800a568:	0800a585 	.word	0x0800a585
 800a56c:	0800a59d 	.word	0x0800a59d
 800a570:	0800a59d 	.word	0x0800a59d
 800a574:	0800a59d 	.word	0x0800a59d
 800a578:	0800a595 	.word	0x0800a595
 800a57c:	2300      	movs	r3, #0
 800a57e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a582:	e098      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a584:	2302      	movs	r3, #2
 800a586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a58a:	e094      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a58c:	2304      	movs	r3, #4
 800a58e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a592:	e090      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a594:	2308      	movs	r3, #8
 800a596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a59a:	e08c      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a59c:	2310      	movs	r3, #16
 800a59e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5a2:	bf00      	nop
 800a5a4:	e087      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a58      	ldr	r2, [pc, #352]	; (800a70c <UART_SetConfig+0x2e4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d125      	bne.n	800a5fc <UART_SetConfig+0x1d4>
 800a5b0:	4b54      	ldr	r3, [pc, #336]	; (800a704 <UART_SetConfig+0x2dc>)
 800a5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a5ba:	2b10      	cmp	r3, #16
 800a5bc:	d011      	beq.n	800a5e2 <UART_SetConfig+0x1ba>
 800a5be:	2b10      	cmp	r3, #16
 800a5c0:	d802      	bhi.n	800a5c8 <UART_SetConfig+0x1a0>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d005      	beq.n	800a5d2 <UART_SetConfig+0x1aa>
 800a5c6:	e014      	b.n	800a5f2 <UART_SetConfig+0x1ca>
 800a5c8:	2b20      	cmp	r3, #32
 800a5ca:	d006      	beq.n	800a5da <UART_SetConfig+0x1b2>
 800a5cc:	2b30      	cmp	r3, #48	; 0x30
 800a5ce:	d00c      	beq.n	800a5ea <UART_SetConfig+0x1c2>
 800a5d0:	e00f      	b.n	800a5f2 <UART_SetConfig+0x1ca>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5d8:	e06d      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a5da:	2302      	movs	r3, #2
 800a5dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5e0:	e069      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a5e2:	2304      	movs	r3, #4
 800a5e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5e8:	e065      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5f0:	e061      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a5f2:	2310      	movs	r3, #16
 800a5f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5f8:	bf00      	nop
 800a5fa:	e05c      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a43      	ldr	r2, [pc, #268]	; (800a710 <UART_SetConfig+0x2e8>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d125      	bne.n	800a652 <UART_SetConfig+0x22a>
 800a606:	4b3f      	ldr	r3, [pc, #252]	; (800a704 <UART_SetConfig+0x2dc>)
 800a608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a610:	2b40      	cmp	r3, #64	; 0x40
 800a612:	d011      	beq.n	800a638 <UART_SetConfig+0x210>
 800a614:	2b40      	cmp	r3, #64	; 0x40
 800a616:	d802      	bhi.n	800a61e <UART_SetConfig+0x1f6>
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <UART_SetConfig+0x200>
 800a61c:	e014      	b.n	800a648 <UART_SetConfig+0x220>
 800a61e:	2b80      	cmp	r3, #128	; 0x80
 800a620:	d006      	beq.n	800a630 <UART_SetConfig+0x208>
 800a622:	2bc0      	cmp	r3, #192	; 0xc0
 800a624:	d00c      	beq.n	800a640 <UART_SetConfig+0x218>
 800a626:	e00f      	b.n	800a648 <UART_SetConfig+0x220>
 800a628:	2300      	movs	r3, #0
 800a62a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a62e:	e042      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a630:	2302      	movs	r3, #2
 800a632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a636:	e03e      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a638:	2304      	movs	r3, #4
 800a63a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a63e:	e03a      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a640:	2308      	movs	r3, #8
 800a642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a646:	e036      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a648:	2310      	movs	r3, #16
 800a64a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a64e:	bf00      	nop
 800a650:	e031      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a29      	ldr	r2, [pc, #164]	; (800a6fc <UART_SetConfig+0x2d4>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d129      	bne.n	800a6b0 <UART_SetConfig+0x288>
 800a65c:	4b29      	ldr	r3, [pc, #164]	; (800a704 <UART_SetConfig+0x2dc>)
 800a65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a662:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a66a:	d014      	beq.n	800a696 <UART_SetConfig+0x26e>
 800a66c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a670:	d802      	bhi.n	800a678 <UART_SetConfig+0x250>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d007      	beq.n	800a686 <UART_SetConfig+0x25e>
 800a676:	e016      	b.n	800a6a6 <UART_SetConfig+0x27e>
 800a678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a67c:	d007      	beq.n	800a68e <UART_SetConfig+0x266>
 800a67e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a682:	d00c      	beq.n	800a69e <UART_SetConfig+0x276>
 800a684:	e00f      	b.n	800a6a6 <UART_SetConfig+0x27e>
 800a686:	2300      	movs	r3, #0
 800a688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a68c:	e013      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a68e:	2302      	movs	r3, #2
 800a690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a694:	e00f      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a696:	2304      	movs	r3, #4
 800a698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a69c:	e00b      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a69e:	2308      	movs	r3, #8
 800a6a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6a4:	e007      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a6a6:	2310      	movs	r3, #16
 800a6a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6ac:	bf00      	nop
 800a6ae:	e002      	b.n	800a6b6 <UART_SetConfig+0x28e>
 800a6b0:	2310      	movs	r3, #16
 800a6b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a10      	ldr	r2, [pc, #64]	; (800a6fc <UART_SetConfig+0x2d4>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	f040 842e 	bne.w	800af1e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6c6:	2b08      	cmp	r3, #8
 800a6c8:	f200 8169 	bhi.w	800a99e <UART_SetConfig+0x576>
 800a6cc:	a201      	add	r2, pc, #4	; (adr r2, 800a6d4 <UART_SetConfig+0x2ac>)
 800a6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d2:	bf00      	nop
 800a6d4:	0800a715 	.word	0x0800a715
 800a6d8:	0800a99f 	.word	0x0800a99f
 800a6dc:	0800a7b7 	.word	0x0800a7b7
 800a6e0:	0800a99f 	.word	0x0800a99f
 800a6e4:	0800a84f 	.word	0x0800a84f
 800a6e8:	0800a99f 	.word	0x0800a99f
 800a6ec:	0800a99f 	.word	0x0800a99f
 800a6f0:	0800a99f 	.word	0x0800a99f
 800a6f4:	0800a8f1 	.word	0x0800a8f1
 800a6f8:	cfff69f3 	.word	0xcfff69f3
 800a6fc:	40008000 	.word	0x40008000
 800a700:	40013800 	.word	0x40013800
 800a704:	40021000 	.word	0x40021000
 800a708:	40004400 	.word	0x40004400
 800a70c:	40004800 	.word	0x40004800
 800a710:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a714:	f7fd fa0c 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 800a718:	4602      	mov	r2, r0
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d044      	beq.n	800a7ac <UART_SetConfig+0x384>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a726:	2b01      	cmp	r3, #1
 800a728:	d03e      	beq.n	800a7a8 <UART_SetConfig+0x380>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d038      	beq.n	800a7a4 <UART_SetConfig+0x37c>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	2b03      	cmp	r3, #3
 800a738:	d032      	beq.n	800a7a0 <UART_SetConfig+0x378>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d02c      	beq.n	800a79c <UART_SetConfig+0x374>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b05      	cmp	r3, #5
 800a748:	d026      	beq.n	800a798 <UART_SetConfig+0x370>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b06      	cmp	r3, #6
 800a750:	d020      	beq.n	800a794 <UART_SetConfig+0x36c>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b07      	cmp	r3, #7
 800a758:	d01a      	beq.n	800a790 <UART_SetConfig+0x368>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b08      	cmp	r3, #8
 800a760:	d014      	beq.n	800a78c <UART_SetConfig+0x364>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b09      	cmp	r3, #9
 800a768:	d00e      	beq.n	800a788 <UART_SetConfig+0x360>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b0a      	cmp	r3, #10
 800a770:	d008      	beq.n	800a784 <UART_SetConfig+0x35c>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b0b      	cmp	r3, #11
 800a778:	d102      	bne.n	800a780 <UART_SetConfig+0x358>
 800a77a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a77e:	e016      	b.n	800a7ae <UART_SetConfig+0x386>
 800a780:	2301      	movs	r3, #1
 800a782:	e014      	b.n	800a7ae <UART_SetConfig+0x386>
 800a784:	2380      	movs	r3, #128	; 0x80
 800a786:	e012      	b.n	800a7ae <UART_SetConfig+0x386>
 800a788:	2340      	movs	r3, #64	; 0x40
 800a78a:	e010      	b.n	800a7ae <UART_SetConfig+0x386>
 800a78c:	2320      	movs	r3, #32
 800a78e:	e00e      	b.n	800a7ae <UART_SetConfig+0x386>
 800a790:	2310      	movs	r3, #16
 800a792:	e00c      	b.n	800a7ae <UART_SetConfig+0x386>
 800a794:	230c      	movs	r3, #12
 800a796:	e00a      	b.n	800a7ae <UART_SetConfig+0x386>
 800a798:	230a      	movs	r3, #10
 800a79a:	e008      	b.n	800a7ae <UART_SetConfig+0x386>
 800a79c:	2308      	movs	r3, #8
 800a79e:	e006      	b.n	800a7ae <UART_SetConfig+0x386>
 800a7a0:	2306      	movs	r3, #6
 800a7a2:	e004      	b.n	800a7ae <UART_SetConfig+0x386>
 800a7a4:	2304      	movs	r3, #4
 800a7a6:	e002      	b.n	800a7ae <UART_SetConfig+0x386>
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	e000      	b.n	800a7ae <UART_SetConfig+0x386>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b2:	617b      	str	r3, [r7, #20]
        break;
 800a7b4:	e0f6      	b.n	800a9a4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d044      	beq.n	800a848 <UART_SetConfig+0x420>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d03e      	beq.n	800a844 <UART_SetConfig+0x41c>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d038      	beq.n	800a840 <UART_SetConfig+0x418>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d032      	beq.n	800a83c <UART_SetConfig+0x414>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7da:	2b04      	cmp	r3, #4
 800a7dc:	d02c      	beq.n	800a838 <UART_SetConfig+0x410>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e2:	2b05      	cmp	r3, #5
 800a7e4:	d026      	beq.n	800a834 <UART_SetConfig+0x40c>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ea:	2b06      	cmp	r3, #6
 800a7ec:	d020      	beq.n	800a830 <UART_SetConfig+0x408>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f2:	2b07      	cmp	r3, #7
 800a7f4:	d01a      	beq.n	800a82c <UART_SetConfig+0x404>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fa:	2b08      	cmp	r3, #8
 800a7fc:	d014      	beq.n	800a828 <UART_SetConfig+0x400>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a802:	2b09      	cmp	r3, #9
 800a804:	d00e      	beq.n	800a824 <UART_SetConfig+0x3fc>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80a:	2b0a      	cmp	r3, #10
 800a80c:	d008      	beq.n	800a820 <UART_SetConfig+0x3f8>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a812:	2b0b      	cmp	r3, #11
 800a814:	d102      	bne.n	800a81c <UART_SetConfig+0x3f4>
 800a816:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a81a:	e016      	b.n	800a84a <UART_SetConfig+0x422>
 800a81c:	4ba1      	ldr	r3, [pc, #644]	; (800aaa4 <UART_SetConfig+0x67c>)
 800a81e:	e014      	b.n	800a84a <UART_SetConfig+0x422>
 800a820:	4ba1      	ldr	r3, [pc, #644]	; (800aaa8 <UART_SetConfig+0x680>)
 800a822:	e012      	b.n	800a84a <UART_SetConfig+0x422>
 800a824:	4ba1      	ldr	r3, [pc, #644]	; (800aaac <UART_SetConfig+0x684>)
 800a826:	e010      	b.n	800a84a <UART_SetConfig+0x422>
 800a828:	4ba1      	ldr	r3, [pc, #644]	; (800aab0 <UART_SetConfig+0x688>)
 800a82a:	e00e      	b.n	800a84a <UART_SetConfig+0x422>
 800a82c:	4ba1      	ldr	r3, [pc, #644]	; (800aab4 <UART_SetConfig+0x68c>)
 800a82e:	e00c      	b.n	800a84a <UART_SetConfig+0x422>
 800a830:	4ba1      	ldr	r3, [pc, #644]	; (800aab8 <UART_SetConfig+0x690>)
 800a832:	e00a      	b.n	800a84a <UART_SetConfig+0x422>
 800a834:	4ba1      	ldr	r3, [pc, #644]	; (800aabc <UART_SetConfig+0x694>)
 800a836:	e008      	b.n	800a84a <UART_SetConfig+0x422>
 800a838:	4ba1      	ldr	r3, [pc, #644]	; (800aac0 <UART_SetConfig+0x698>)
 800a83a:	e006      	b.n	800a84a <UART_SetConfig+0x422>
 800a83c:	4ba1      	ldr	r3, [pc, #644]	; (800aac4 <UART_SetConfig+0x69c>)
 800a83e:	e004      	b.n	800a84a <UART_SetConfig+0x422>
 800a840:	4ba1      	ldr	r3, [pc, #644]	; (800aac8 <UART_SetConfig+0x6a0>)
 800a842:	e002      	b.n	800a84a <UART_SetConfig+0x422>
 800a844:	4ba1      	ldr	r3, [pc, #644]	; (800aacc <UART_SetConfig+0x6a4>)
 800a846:	e000      	b.n	800a84a <UART_SetConfig+0x422>
 800a848:	4b96      	ldr	r3, [pc, #600]	; (800aaa4 <UART_SetConfig+0x67c>)
 800a84a:	617b      	str	r3, [r7, #20]
        break;
 800a84c:	e0aa      	b.n	800a9a4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a84e:	f7fd f901 	bl	8007a54 <HAL_RCC_GetSysClockFreq>
 800a852:	4602      	mov	r2, r0
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d044      	beq.n	800a8e6 <UART_SetConfig+0x4be>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	2b01      	cmp	r3, #1
 800a862:	d03e      	beq.n	800a8e2 <UART_SetConfig+0x4ba>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d038      	beq.n	800a8de <UART_SetConfig+0x4b6>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a870:	2b03      	cmp	r3, #3
 800a872:	d032      	beq.n	800a8da <UART_SetConfig+0x4b2>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a878:	2b04      	cmp	r3, #4
 800a87a:	d02c      	beq.n	800a8d6 <UART_SetConfig+0x4ae>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a880:	2b05      	cmp	r3, #5
 800a882:	d026      	beq.n	800a8d2 <UART_SetConfig+0x4aa>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	2b06      	cmp	r3, #6
 800a88a:	d020      	beq.n	800a8ce <UART_SetConfig+0x4a6>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	2b07      	cmp	r3, #7
 800a892:	d01a      	beq.n	800a8ca <UART_SetConfig+0x4a2>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d014      	beq.n	800a8c6 <UART_SetConfig+0x49e>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	2b09      	cmp	r3, #9
 800a8a2:	d00e      	beq.n	800a8c2 <UART_SetConfig+0x49a>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a8:	2b0a      	cmp	r3, #10
 800a8aa:	d008      	beq.n	800a8be <UART_SetConfig+0x496>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	2b0b      	cmp	r3, #11
 800a8b2:	d102      	bne.n	800a8ba <UART_SetConfig+0x492>
 800a8b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8b8:	e016      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e014      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8be:	2380      	movs	r3, #128	; 0x80
 800a8c0:	e012      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8c2:	2340      	movs	r3, #64	; 0x40
 800a8c4:	e010      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8c6:	2320      	movs	r3, #32
 800a8c8:	e00e      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8ca:	2310      	movs	r3, #16
 800a8cc:	e00c      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8ce:	230c      	movs	r3, #12
 800a8d0:	e00a      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8d2:	230a      	movs	r3, #10
 800a8d4:	e008      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8d6:	2308      	movs	r3, #8
 800a8d8:	e006      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8da:	2306      	movs	r3, #6
 800a8dc:	e004      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8de:	2304      	movs	r3, #4
 800a8e0:	e002      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e000      	b.n	800a8e8 <UART_SetConfig+0x4c0>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ec:	617b      	str	r3, [r7, #20]
        break;
 800a8ee:	e059      	b.n	800a9a4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d04e      	beq.n	800a996 <UART_SetConfig+0x56e>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d047      	beq.n	800a990 <UART_SetConfig+0x568>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	2b02      	cmp	r3, #2
 800a906:	d040      	beq.n	800a98a <UART_SetConfig+0x562>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d039      	beq.n	800a984 <UART_SetConfig+0x55c>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	2b04      	cmp	r3, #4
 800a916:	d032      	beq.n	800a97e <UART_SetConfig+0x556>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91c:	2b05      	cmp	r3, #5
 800a91e:	d02b      	beq.n	800a978 <UART_SetConfig+0x550>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	2b06      	cmp	r3, #6
 800a926:	d024      	beq.n	800a972 <UART_SetConfig+0x54a>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	2b07      	cmp	r3, #7
 800a92e:	d01d      	beq.n	800a96c <UART_SetConfig+0x544>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a934:	2b08      	cmp	r3, #8
 800a936:	d016      	beq.n	800a966 <UART_SetConfig+0x53e>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93c:	2b09      	cmp	r3, #9
 800a93e:	d00f      	beq.n	800a960 <UART_SetConfig+0x538>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	2b0a      	cmp	r3, #10
 800a946:	d008      	beq.n	800a95a <UART_SetConfig+0x532>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94c:	2b0b      	cmp	r3, #11
 800a94e:	d101      	bne.n	800a954 <UART_SetConfig+0x52c>
 800a950:	2380      	movs	r3, #128	; 0x80
 800a952:	e022      	b.n	800a99a <UART_SetConfig+0x572>
 800a954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a958:	e01f      	b.n	800a99a <UART_SetConfig+0x572>
 800a95a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a95e:	e01c      	b.n	800a99a <UART_SetConfig+0x572>
 800a960:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a964:	e019      	b.n	800a99a <UART_SetConfig+0x572>
 800a966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a96a:	e016      	b.n	800a99a <UART_SetConfig+0x572>
 800a96c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a970:	e013      	b.n	800a99a <UART_SetConfig+0x572>
 800a972:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a976:	e010      	b.n	800a99a <UART_SetConfig+0x572>
 800a978:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a97c:	e00d      	b.n	800a99a <UART_SetConfig+0x572>
 800a97e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a982:	e00a      	b.n	800a99a <UART_SetConfig+0x572>
 800a984:	f241 5355 	movw	r3, #5461	; 0x1555
 800a988:	e007      	b.n	800a99a <UART_SetConfig+0x572>
 800a98a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a98e:	e004      	b.n	800a99a <UART_SetConfig+0x572>
 800a990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a994:	e001      	b.n	800a99a <UART_SetConfig+0x572>
 800a996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a99a:	617b      	str	r3, [r7, #20]
        break;
 800a99c:	e002      	b.n	800a9a4 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	76fb      	strb	r3, [r7, #27]
        break;
 800a9a2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 86cd 	beq.w	800b746 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	4413      	add	r3, r2
 800a9b6:	697a      	ldr	r2, [r7, #20]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d305      	bcc.n	800a9c8 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d903      	bls.n	800a9d0 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	76fb      	strb	r3, [r7, #27]
 800a9cc:	f000 bebb 	b.w	800b746 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 800a9d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9d4:	2b08      	cmp	r3, #8
 800a9d6:	f200 828d 	bhi.w	800aef4 <UART_SetConfig+0xacc>
 800a9da:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <UART_SetConfig+0x5b8>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800aa05 	.word	0x0800aa05
 800a9e4:	0800aef5 	.word	0x0800aef5
 800a9e8:	0800ab6f 	.word	0x0800ab6f
 800a9ec:	0800aef5 	.word	0x0800aef5
 800a9f0:	0800ac65 	.word	0x0800ac65
 800a9f4:	0800aef5 	.word	0x0800aef5
 800a9f8:	0800aef5 	.word	0x0800aef5
 800a9fc:	0800aef5 	.word	0x0800aef5
 800aa00:	0800ada3 	.word	0x0800ada3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800aa04:	f7fd f894 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 800aa08:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f04f 0100 	mov.w	r1, #0
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d07d      	beq.n	800ab16 <UART_SetConfig+0x6ee>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d074      	beq.n	800ab0c <UART_SetConfig+0x6e4>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d06b      	beq.n	800ab02 <UART_SetConfig+0x6da>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d062      	beq.n	800aaf8 <UART_SetConfig+0x6d0>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d059      	beq.n	800aaee <UART_SetConfig+0x6c6>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	2b05      	cmp	r3, #5
 800aa40:	d050      	beq.n	800aae4 <UART_SetConfig+0x6bc>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2b06      	cmp	r3, #6
 800aa48:	d047      	beq.n	800aada <UART_SetConfig+0x6b2>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4e:	2b07      	cmp	r3, #7
 800aa50:	d03e      	beq.n	800aad0 <UART_SetConfig+0x6a8>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	2b08      	cmp	r3, #8
 800aa58:	d01f      	beq.n	800aa9a <UART_SetConfig+0x672>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2b09      	cmp	r3, #9
 800aa60:	d016      	beq.n	800aa90 <UART_SetConfig+0x668>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	2b0a      	cmp	r3, #10
 800aa68:	d00d      	beq.n	800aa86 <UART_SetConfig+0x65e>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	2b0b      	cmp	r3, #11
 800aa70:	d104      	bne.n	800aa7c <UART_SetConfig+0x654>
 800aa72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa76:	f04f 0400 	mov.w	r4, #0
 800aa7a:	e050      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800aa7c:	f04f 0301 	mov.w	r3, #1
 800aa80:	f04f 0400 	mov.w	r4, #0
 800aa84:	e04b      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800aa86:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aa8a:	f04f 0400 	mov.w	r4, #0
 800aa8e:	e046      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800aa90:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aa94:	f04f 0400 	mov.w	r4, #0
 800aa98:	e041      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800aa9a:	f04f 0320 	mov.w	r3, #32
 800aa9e:	f04f 0400 	mov.w	r4, #0
 800aaa2:	e03c      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800aaa4:	00f42400 	.word	0x00f42400
 800aaa8:	0001e848 	.word	0x0001e848
 800aaac:	0003d090 	.word	0x0003d090
 800aab0:	0007a120 	.word	0x0007a120
 800aab4:	000f4240 	.word	0x000f4240
 800aab8:	00145855 	.word	0x00145855
 800aabc:	00186a00 	.word	0x00186a00
 800aac0:	001e8480 	.word	0x001e8480
 800aac4:	0028b0aa 	.word	0x0028b0aa
 800aac8:	003d0900 	.word	0x003d0900
 800aacc:	007a1200 	.word	0x007a1200
 800aad0:	f04f 0310 	mov.w	r3, #16
 800aad4:	f04f 0400 	mov.w	r4, #0
 800aad8:	e021      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800aada:	f04f 030c 	mov.w	r3, #12
 800aade:	f04f 0400 	mov.w	r4, #0
 800aae2:	e01c      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800aae4:	f04f 030a 	mov.w	r3, #10
 800aae8:	f04f 0400 	mov.w	r4, #0
 800aaec:	e017      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800aaee:	f04f 0308 	mov.w	r3, #8
 800aaf2:	f04f 0400 	mov.w	r4, #0
 800aaf6:	e012      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800aaf8:	f04f 0306 	mov.w	r3, #6
 800aafc:	f04f 0400 	mov.w	r4, #0
 800ab00:	e00d      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800ab02:	f04f 0304 	mov.w	r3, #4
 800ab06:	f04f 0400 	mov.w	r4, #0
 800ab0a:	e008      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800ab0c:	f04f 0302 	mov.w	r3, #2
 800ab10:	f04f 0400 	mov.w	r4, #0
 800ab14:	e003      	b.n	800ab1e <UART_SetConfig+0x6f6>
 800ab16:	f04f 0301 	mov.w	r3, #1
 800ab1a:	f04f 0400 	mov.w	r4, #0
 800ab1e:	461a      	mov	r2, r3
 800ab20:	4623      	mov	r3, r4
 800ab22:	f7f6 f8e9 	bl	8000cf8 <__aeabi_uldivmod>
 800ab26:	4603      	mov	r3, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	f04f 0300 	mov.w	r3, #0
 800ab32:	f04f 0400 	mov.w	r4, #0
 800ab36:	0214      	lsls	r4, r2, #8
 800ab38:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ab3c:	020b      	lsls	r3, r1, #8
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	6852      	ldr	r2, [r2, #4]
 800ab42:	0852      	lsrs	r2, r2, #1
 800ab44:	4611      	mov	r1, r2
 800ab46:	f04f 0200 	mov.w	r2, #0
 800ab4a:	eb13 0b01 	adds.w	fp, r3, r1
 800ab4e:	eb44 0c02 	adc.w	ip, r4, r2
 800ab52:	4658      	mov	r0, fp
 800ab54:	4661      	mov	r1, ip
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f04f 0400 	mov.w	r4, #0
 800ab5e:	461a      	mov	r2, r3
 800ab60:	4623      	mov	r3, r4
 800ab62:	f7f6 f8c9 	bl	8000cf8 <__aeabi_uldivmod>
 800ab66:	4603      	mov	r3, r0
 800ab68:	460c      	mov	r4, r1
 800ab6a:	61fb      	str	r3, [r7, #28]
            break;
 800ab6c:	e1c5      	b.n	800aefa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d05b      	beq.n	800ac2e <UART_SetConfig+0x806>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d053      	beq.n	800ac26 <UART_SetConfig+0x7fe>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d04b      	beq.n	800ac1e <UART_SetConfig+0x7f6>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d043      	beq.n	800ac16 <UART_SetConfig+0x7ee>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	2b04      	cmp	r3, #4
 800ab94:	d03b      	beq.n	800ac0e <UART_SetConfig+0x7e6>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	2b05      	cmp	r3, #5
 800ab9c:	d033      	beq.n	800ac06 <UART_SetConfig+0x7de>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba2:	2b06      	cmp	r3, #6
 800aba4:	d02b      	beq.n	800abfe <UART_SetConfig+0x7d6>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abaa:	2b07      	cmp	r3, #7
 800abac:	d023      	beq.n	800abf6 <UART_SetConfig+0x7ce>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb2:	2b08      	cmp	r3, #8
 800abb4:	d01b      	beq.n	800abee <UART_SetConfig+0x7c6>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	2b09      	cmp	r3, #9
 800abbc:	d013      	beq.n	800abe6 <UART_SetConfig+0x7be>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc2:	2b0a      	cmp	r3, #10
 800abc4:	d00b      	beq.n	800abde <UART_SetConfig+0x7b6>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abca:	2b0b      	cmp	r3, #11
 800abcc:	d103      	bne.n	800abd6 <UART_SetConfig+0x7ae>
 800abce:	4bae      	ldr	r3, [pc, #696]	; (800ae88 <UART_SetConfig+0xa60>)
 800abd0:	f04f 0400 	mov.w	r4, #0
 800abd4:	e02e      	b.n	800ac34 <UART_SetConfig+0x80c>
 800abd6:	4bad      	ldr	r3, [pc, #692]	; (800ae8c <UART_SetConfig+0xa64>)
 800abd8:	f04f 0400 	mov.w	r4, #0
 800abdc:	e02a      	b.n	800ac34 <UART_SetConfig+0x80c>
 800abde:	4bac      	ldr	r3, [pc, #688]	; (800ae90 <UART_SetConfig+0xa68>)
 800abe0:	f04f 0400 	mov.w	r4, #0
 800abe4:	e026      	b.n	800ac34 <UART_SetConfig+0x80c>
 800abe6:	4bab      	ldr	r3, [pc, #684]	; (800ae94 <UART_SetConfig+0xa6c>)
 800abe8:	f04f 0400 	mov.w	r4, #0
 800abec:	e022      	b.n	800ac34 <UART_SetConfig+0x80c>
 800abee:	4baa      	ldr	r3, [pc, #680]	; (800ae98 <UART_SetConfig+0xa70>)
 800abf0:	f04f 0400 	mov.w	r4, #0
 800abf4:	e01e      	b.n	800ac34 <UART_SetConfig+0x80c>
 800abf6:	4ba9      	ldr	r3, [pc, #676]	; (800ae9c <UART_SetConfig+0xa74>)
 800abf8:	f04f 0400 	mov.w	r4, #0
 800abfc:	e01a      	b.n	800ac34 <UART_SetConfig+0x80c>
 800abfe:	a49e      	add	r4, pc, #632	; (adr r4, 800ae78 <UART_SetConfig+0xa50>)
 800ac00:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ac04:	e016      	b.n	800ac34 <UART_SetConfig+0x80c>
 800ac06:	4ba6      	ldr	r3, [pc, #664]	; (800aea0 <UART_SetConfig+0xa78>)
 800ac08:	f04f 0400 	mov.w	r4, #0
 800ac0c:	e012      	b.n	800ac34 <UART_SetConfig+0x80c>
 800ac0e:	4ba5      	ldr	r3, [pc, #660]	; (800aea4 <UART_SetConfig+0xa7c>)
 800ac10:	f04f 0400 	mov.w	r4, #0
 800ac14:	e00e      	b.n	800ac34 <UART_SetConfig+0x80c>
 800ac16:	a49a      	add	r4, pc, #616	; (adr r4, 800ae80 <UART_SetConfig+0xa58>)
 800ac18:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ac1c:	e00a      	b.n	800ac34 <UART_SetConfig+0x80c>
 800ac1e:	4ba2      	ldr	r3, [pc, #648]	; (800aea8 <UART_SetConfig+0xa80>)
 800ac20:	f04f 0400 	mov.w	r4, #0
 800ac24:	e006      	b.n	800ac34 <UART_SetConfig+0x80c>
 800ac26:	4ba1      	ldr	r3, [pc, #644]	; (800aeac <UART_SetConfig+0xa84>)
 800ac28:	f04f 0400 	mov.w	r4, #0
 800ac2c:	e002      	b.n	800ac34 <UART_SetConfig+0x80c>
 800ac2e:	4b97      	ldr	r3, [pc, #604]	; (800ae8c <UART_SetConfig+0xa64>)
 800ac30:	f04f 0400 	mov.w	r4, #0
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6852      	ldr	r2, [r2, #4]
 800ac38:	0852      	lsrs	r2, r2, #1
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	f04f 0200 	mov.w	r2, #0
 800ac40:	eb13 0b01 	adds.w	fp, r3, r1
 800ac44:	eb44 0c02 	adc.w	ip, r4, r2
 800ac48:	4658      	mov	r0, fp
 800ac4a:	4661      	mov	r1, ip
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f04f 0400 	mov.w	r4, #0
 800ac54:	461a      	mov	r2, r3
 800ac56:	4623      	mov	r3, r4
 800ac58:	f7f6 f84e 	bl	8000cf8 <__aeabi_uldivmod>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	61fb      	str	r3, [r7, #28]
            break;
 800ac62:	e14a      	b.n	800aefa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800ac64:	f7fc fef6 	bl	8007a54 <HAL_RCC_GetSysClockFreq>
 800ac68:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f04f 0100 	mov.w	r1, #0
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d067      	beq.n	800ad4a <UART_SetConfig+0x922>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d05e      	beq.n	800ad40 <UART_SetConfig+0x918>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d055      	beq.n	800ad36 <UART_SetConfig+0x90e>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d04c      	beq.n	800ad2c <UART_SetConfig+0x904>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac96:	2b04      	cmp	r3, #4
 800ac98:	d043      	beq.n	800ad22 <UART_SetConfig+0x8fa>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9e:	2b05      	cmp	r3, #5
 800aca0:	d03a      	beq.n	800ad18 <UART_SetConfig+0x8f0>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca6:	2b06      	cmp	r3, #6
 800aca8:	d031      	beq.n	800ad0e <UART_SetConfig+0x8e6>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acae:	2b07      	cmp	r3, #7
 800acb0:	d028      	beq.n	800ad04 <UART_SetConfig+0x8dc>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	2b08      	cmp	r3, #8
 800acb8:	d01f      	beq.n	800acfa <UART_SetConfig+0x8d2>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	2b09      	cmp	r3, #9
 800acc0:	d016      	beq.n	800acf0 <UART_SetConfig+0x8c8>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc6:	2b0a      	cmp	r3, #10
 800acc8:	d00d      	beq.n	800ace6 <UART_SetConfig+0x8be>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acce:	2b0b      	cmp	r3, #11
 800acd0:	d104      	bne.n	800acdc <UART_SetConfig+0x8b4>
 800acd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acd6:	f04f 0400 	mov.w	r4, #0
 800acda:	e03a      	b.n	800ad52 <UART_SetConfig+0x92a>
 800acdc:	f04f 0301 	mov.w	r3, #1
 800ace0:	f04f 0400 	mov.w	r4, #0
 800ace4:	e035      	b.n	800ad52 <UART_SetConfig+0x92a>
 800ace6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800acea:	f04f 0400 	mov.w	r4, #0
 800acee:	e030      	b.n	800ad52 <UART_SetConfig+0x92a>
 800acf0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800acf4:	f04f 0400 	mov.w	r4, #0
 800acf8:	e02b      	b.n	800ad52 <UART_SetConfig+0x92a>
 800acfa:	f04f 0320 	mov.w	r3, #32
 800acfe:	f04f 0400 	mov.w	r4, #0
 800ad02:	e026      	b.n	800ad52 <UART_SetConfig+0x92a>
 800ad04:	f04f 0310 	mov.w	r3, #16
 800ad08:	f04f 0400 	mov.w	r4, #0
 800ad0c:	e021      	b.n	800ad52 <UART_SetConfig+0x92a>
 800ad0e:	f04f 030c 	mov.w	r3, #12
 800ad12:	f04f 0400 	mov.w	r4, #0
 800ad16:	e01c      	b.n	800ad52 <UART_SetConfig+0x92a>
 800ad18:	f04f 030a 	mov.w	r3, #10
 800ad1c:	f04f 0400 	mov.w	r4, #0
 800ad20:	e017      	b.n	800ad52 <UART_SetConfig+0x92a>
 800ad22:	f04f 0308 	mov.w	r3, #8
 800ad26:	f04f 0400 	mov.w	r4, #0
 800ad2a:	e012      	b.n	800ad52 <UART_SetConfig+0x92a>
 800ad2c:	f04f 0306 	mov.w	r3, #6
 800ad30:	f04f 0400 	mov.w	r4, #0
 800ad34:	e00d      	b.n	800ad52 <UART_SetConfig+0x92a>
 800ad36:	f04f 0304 	mov.w	r3, #4
 800ad3a:	f04f 0400 	mov.w	r4, #0
 800ad3e:	e008      	b.n	800ad52 <UART_SetConfig+0x92a>
 800ad40:	f04f 0302 	mov.w	r3, #2
 800ad44:	f04f 0400 	mov.w	r4, #0
 800ad48:	e003      	b.n	800ad52 <UART_SetConfig+0x92a>
 800ad4a:	f04f 0301 	mov.w	r3, #1
 800ad4e:	f04f 0400 	mov.w	r4, #0
 800ad52:	461a      	mov	r2, r3
 800ad54:	4623      	mov	r3, r4
 800ad56:	f7f5 ffcf 	bl	8000cf8 <__aeabi_uldivmod>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4622      	mov	r2, r4
 800ad62:	f04f 0300 	mov.w	r3, #0
 800ad66:	f04f 0400 	mov.w	r4, #0
 800ad6a:	0214      	lsls	r4, r2, #8
 800ad6c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ad70:	020b      	lsls	r3, r1, #8
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	6852      	ldr	r2, [r2, #4]
 800ad76:	0852      	lsrs	r2, r2, #1
 800ad78:	4611      	mov	r1, r2
 800ad7a:	f04f 0200 	mov.w	r2, #0
 800ad7e:	eb13 0b01 	adds.w	fp, r3, r1
 800ad82:	eb44 0c02 	adc.w	ip, r4, r2
 800ad86:	4658      	mov	r0, fp
 800ad88:	4661      	mov	r1, ip
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f04f 0400 	mov.w	r4, #0
 800ad92:	461a      	mov	r2, r3
 800ad94:	4623      	mov	r3, r4
 800ad96:	f7f5 ffaf 	bl	8000cf8 <__aeabi_uldivmod>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	61fb      	str	r3, [r7, #28]
            break;
 800ada0:	e0ab      	b.n	800aefa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 8088 	beq.w	800aebc <UART_SetConfig+0xa94>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d05b      	beq.n	800ae6c <UART_SetConfig+0xa44>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d052      	beq.n	800ae62 <UART_SetConfig+0xa3a>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d04a      	beq.n	800ae5a <UART_SetConfig+0xa32>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b04      	cmp	r3, #4
 800adca:	d041      	beq.n	800ae50 <UART_SetConfig+0xa28>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b05      	cmp	r3, #5
 800add2:	d039      	beq.n	800ae48 <UART_SetConfig+0xa20>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b06      	cmp	r3, #6
 800adda:	d031      	beq.n	800ae40 <UART_SetConfig+0xa18>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b07      	cmp	r3, #7
 800ade2:	d028      	beq.n	800ae36 <UART_SetConfig+0xa0e>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	2b08      	cmp	r3, #8
 800adea:	d01f      	beq.n	800ae2c <UART_SetConfig+0xa04>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	2b09      	cmp	r3, #9
 800adf2:	d016      	beq.n	800ae22 <UART_SetConfig+0x9fa>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	2b0a      	cmp	r3, #10
 800adfa:	d00d      	beq.n	800ae18 <UART_SetConfig+0x9f0>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	2b0b      	cmp	r3, #11
 800ae02:	d104      	bne.n	800ae0e <UART_SetConfig+0x9e6>
 800ae04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae08:	f04f 0400 	mov.w	r4, #0
 800ae0c:	e05a      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ae12:	f04f 0400 	mov.w	r4, #0
 800ae16:	e055      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae1c:	f04f 0400 	mov.w	r4, #0
 800ae20:	e050      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ae26:	f04f 0400 	mov.w	r4, #0
 800ae2a:	e04b      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ae30:	f04f 0400 	mov.w	r4, #0
 800ae34:	e046      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae3a:	f04f 0400 	mov.w	r4, #0
 800ae3e:	e041      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae40:	4b1b      	ldr	r3, [pc, #108]	; (800aeb0 <UART_SetConfig+0xa88>)
 800ae42:	f04f 0400 	mov.w	r4, #0
 800ae46:	e03d      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae48:	4b1a      	ldr	r3, [pc, #104]	; (800aeb4 <UART_SetConfig+0xa8c>)
 800ae4a:	f04f 0400 	mov.w	r4, #0
 800ae4e:	e039      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae54:	f04f 0400 	mov.w	r4, #0
 800ae58:	e034      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae5a:	4b17      	ldr	r3, [pc, #92]	; (800aeb8 <UART_SetConfig+0xa90>)
 800ae5c:	f04f 0400 	mov.w	r4, #0
 800ae60:	e030      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ae66:	f04f 0400 	mov.w	r4, #0
 800ae6a:	e02b      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ae70:	f04f 0400 	mov.w	r4, #0
 800ae74:	e026      	b.n	800aec4 <UART_SetConfig+0xa9c>
 800ae76:	bf00      	nop
 800ae78:	14585500 	.word	0x14585500
 800ae7c:	00000000 	.word	0x00000000
 800ae80:	28b0aa00 	.word	0x28b0aa00
 800ae84:	00000000 	.word	0x00000000
 800ae88:	00f42400 	.word	0x00f42400
 800ae8c:	f4240000 	.word	0xf4240000
 800ae90:	01e84800 	.word	0x01e84800
 800ae94:	03d09000 	.word	0x03d09000
 800ae98:	07a12000 	.word	0x07a12000
 800ae9c:	0f424000 	.word	0x0f424000
 800aea0:	186a0000 	.word	0x186a0000
 800aea4:	1e848000 	.word	0x1e848000
 800aea8:	3d090000 	.word	0x3d090000
 800aeac:	7a120000 	.word	0x7a120000
 800aeb0:	000aaa00 	.word	0x000aaa00
 800aeb4:	000ccc00 	.word	0x000ccc00
 800aeb8:	00155500 	.word	0x00155500
 800aebc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aec0:	f04f 0400 	mov.w	r4, #0
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	6852      	ldr	r2, [r2, #4]
 800aec8:	0852      	lsrs	r2, r2, #1
 800aeca:	4611      	mov	r1, r2
 800aecc:	f04f 0200 	mov.w	r2, #0
 800aed0:	eb13 0b01 	adds.w	fp, r3, r1
 800aed4:	eb44 0c02 	adc.w	ip, r4, r2
 800aed8:	4658      	mov	r0, fp
 800aeda:	4661      	mov	r1, ip
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	f04f 0400 	mov.w	r4, #0
 800aee4:	461a      	mov	r2, r3
 800aee6:	4623      	mov	r3, r4
 800aee8:	f7f5 ff06 	bl	8000cf8 <__aeabi_uldivmod>
 800aeec:	4603      	mov	r3, r0
 800aeee:	460c      	mov	r4, r1
 800aef0:	61fb      	str	r3, [r7, #28]
            break;
 800aef2:	e002      	b.n	800aefa <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	76fb      	strb	r3, [r7, #27]
            break;
 800aef8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af00:	d309      	bcc.n	800af16 <UART_SetConfig+0xaee>
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af08:	d205      	bcs.n	800af16 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	69fa      	ldr	r2, [r7, #28]
 800af10:	60da      	str	r2, [r3, #12]
 800af12:	f000 bc18 	b.w	800b746 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	76fb      	strb	r3, [r7, #27]
 800af1a:	f000 bc14 	b.w	800b746 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	69db      	ldr	r3, [r3, #28]
 800af22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af26:	f040 8204 	bne.w	800b332 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800af2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af2e:	2b08      	cmp	r3, #8
 800af30:	f200 81df 	bhi.w	800b2f2 <UART_SetConfig+0xeca>
 800af34:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <UART_SetConfig+0xb14>)
 800af36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3a:	bf00      	nop
 800af3c:	0800af61 	.word	0x0800af61
 800af40:	0800b019 	.word	0x0800b019
 800af44:	0800b0d1 	.word	0x0800b0d1
 800af48:	0800b2f3 	.word	0x0800b2f3
 800af4c:	0800b179 	.word	0x0800b179
 800af50:	0800b2f3 	.word	0x0800b2f3
 800af54:	0800b2f3 	.word	0x0800b2f3
 800af58:	0800b2f3 	.word	0x0800b2f3
 800af5c:	0800b231 	.word	0x0800b231
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af60:	f7fc fde6 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 800af64:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d044      	beq.n	800aff8 <UART_SetConfig+0xbd0>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af72:	2b01      	cmp	r3, #1
 800af74:	d03e      	beq.n	800aff4 <UART_SetConfig+0xbcc>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d038      	beq.n	800aff0 <UART_SetConfig+0xbc8>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af82:	2b03      	cmp	r3, #3
 800af84:	d032      	beq.n	800afec <UART_SetConfig+0xbc4>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	d02c      	beq.n	800afe8 <UART_SetConfig+0xbc0>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af92:	2b05      	cmp	r3, #5
 800af94:	d026      	beq.n	800afe4 <UART_SetConfig+0xbbc>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9a:	2b06      	cmp	r3, #6
 800af9c:	d020      	beq.n	800afe0 <UART_SetConfig+0xbb8>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	2b07      	cmp	r3, #7
 800afa4:	d01a      	beq.n	800afdc <UART_SetConfig+0xbb4>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afaa:	2b08      	cmp	r3, #8
 800afac:	d014      	beq.n	800afd8 <UART_SetConfig+0xbb0>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb2:	2b09      	cmp	r3, #9
 800afb4:	d00e      	beq.n	800afd4 <UART_SetConfig+0xbac>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	2b0a      	cmp	r3, #10
 800afbc:	d008      	beq.n	800afd0 <UART_SetConfig+0xba8>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	2b0b      	cmp	r3, #11
 800afc4:	d102      	bne.n	800afcc <UART_SetConfig+0xba4>
 800afc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afca:	e016      	b.n	800affa <UART_SetConfig+0xbd2>
 800afcc:	2301      	movs	r3, #1
 800afce:	e014      	b.n	800affa <UART_SetConfig+0xbd2>
 800afd0:	2380      	movs	r3, #128	; 0x80
 800afd2:	e012      	b.n	800affa <UART_SetConfig+0xbd2>
 800afd4:	2340      	movs	r3, #64	; 0x40
 800afd6:	e010      	b.n	800affa <UART_SetConfig+0xbd2>
 800afd8:	2320      	movs	r3, #32
 800afda:	e00e      	b.n	800affa <UART_SetConfig+0xbd2>
 800afdc:	2310      	movs	r3, #16
 800afde:	e00c      	b.n	800affa <UART_SetConfig+0xbd2>
 800afe0:	230c      	movs	r3, #12
 800afe2:	e00a      	b.n	800affa <UART_SetConfig+0xbd2>
 800afe4:	230a      	movs	r3, #10
 800afe6:	e008      	b.n	800affa <UART_SetConfig+0xbd2>
 800afe8:	2308      	movs	r3, #8
 800afea:	e006      	b.n	800affa <UART_SetConfig+0xbd2>
 800afec:	2306      	movs	r3, #6
 800afee:	e004      	b.n	800affa <UART_SetConfig+0xbd2>
 800aff0:	2304      	movs	r3, #4
 800aff2:	e002      	b.n	800affa <UART_SetConfig+0xbd2>
 800aff4:	2302      	movs	r3, #2
 800aff6:	e000      	b.n	800affa <UART_SetConfig+0xbd2>
 800aff8:	2301      	movs	r3, #1
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b000:	005a      	lsls	r2, r3, #1
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	085b      	lsrs	r3, r3, #1
 800b008:	441a      	add	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b012:	b29b      	uxth	r3, r3
 800b014:	61fb      	str	r3, [r7, #28]
        break;
 800b016:	e16f      	b.n	800b2f8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b018:	f7fc fda0 	bl	8007b5c <HAL_RCC_GetPCLK2Freq>
 800b01c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b022:	2b00      	cmp	r3, #0
 800b024:	d044      	beq.n	800b0b0 <UART_SetConfig+0xc88>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d03e      	beq.n	800b0ac <UART_SetConfig+0xc84>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b032:	2b02      	cmp	r3, #2
 800b034:	d038      	beq.n	800b0a8 <UART_SetConfig+0xc80>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d032      	beq.n	800b0a4 <UART_SetConfig+0xc7c>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b042:	2b04      	cmp	r3, #4
 800b044:	d02c      	beq.n	800b0a0 <UART_SetConfig+0xc78>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	2b05      	cmp	r3, #5
 800b04c:	d026      	beq.n	800b09c <UART_SetConfig+0xc74>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b052:	2b06      	cmp	r3, #6
 800b054:	d020      	beq.n	800b098 <UART_SetConfig+0xc70>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05a:	2b07      	cmp	r3, #7
 800b05c:	d01a      	beq.n	800b094 <UART_SetConfig+0xc6c>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b062:	2b08      	cmp	r3, #8
 800b064:	d014      	beq.n	800b090 <UART_SetConfig+0xc68>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	2b09      	cmp	r3, #9
 800b06c:	d00e      	beq.n	800b08c <UART_SetConfig+0xc64>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	2b0a      	cmp	r3, #10
 800b074:	d008      	beq.n	800b088 <UART_SetConfig+0xc60>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	2b0b      	cmp	r3, #11
 800b07c:	d102      	bne.n	800b084 <UART_SetConfig+0xc5c>
 800b07e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b082:	e016      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b084:	2301      	movs	r3, #1
 800b086:	e014      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b088:	2380      	movs	r3, #128	; 0x80
 800b08a:	e012      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b08c:	2340      	movs	r3, #64	; 0x40
 800b08e:	e010      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b090:	2320      	movs	r3, #32
 800b092:	e00e      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b094:	2310      	movs	r3, #16
 800b096:	e00c      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b098:	230c      	movs	r3, #12
 800b09a:	e00a      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b09c:	230a      	movs	r3, #10
 800b09e:	e008      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b0a0:	2308      	movs	r3, #8
 800b0a2:	e006      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b0a4:	2306      	movs	r3, #6
 800b0a6:	e004      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	e002      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e000      	b.n	800b0b2 <UART_SetConfig+0xc8a>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b8:	005a      	lsls	r2, r3, #1
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	085b      	lsrs	r3, r3, #1
 800b0c0:	441a      	add	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	61fb      	str	r3, [r7, #28]
        break;
 800b0ce:	e113      	b.n	800b2f8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d043      	beq.n	800b160 <UART_SetConfig+0xd38>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d03d      	beq.n	800b15c <UART_SetConfig+0xd34>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d037      	beq.n	800b158 <UART_SetConfig+0xd30>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d031      	beq.n	800b154 <UART_SetConfig+0xd2c>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	2b04      	cmp	r3, #4
 800b0f6:	d02b      	beq.n	800b150 <UART_SetConfig+0xd28>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	2b05      	cmp	r3, #5
 800b0fe:	d025      	beq.n	800b14c <UART_SetConfig+0xd24>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	2b06      	cmp	r3, #6
 800b106:	d01f      	beq.n	800b148 <UART_SetConfig+0xd20>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	2b07      	cmp	r3, #7
 800b10e:	d019      	beq.n	800b144 <UART_SetConfig+0xd1c>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	2b08      	cmp	r3, #8
 800b116:	d013      	beq.n	800b140 <UART_SetConfig+0xd18>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	2b09      	cmp	r3, #9
 800b11e:	d00d      	beq.n	800b13c <UART_SetConfig+0xd14>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	2b0a      	cmp	r3, #10
 800b126:	d007      	beq.n	800b138 <UART_SetConfig+0xd10>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	2b0b      	cmp	r3, #11
 800b12e:	d101      	bne.n	800b134 <UART_SetConfig+0xd0c>
 800b130:	4b8d      	ldr	r3, [pc, #564]	; (800b368 <UART_SetConfig+0xf40>)
 800b132:	e016      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b134:	4b8d      	ldr	r3, [pc, #564]	; (800b36c <UART_SetConfig+0xf44>)
 800b136:	e014      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b138:	4b8d      	ldr	r3, [pc, #564]	; (800b370 <UART_SetConfig+0xf48>)
 800b13a:	e012      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b13c:	4b8d      	ldr	r3, [pc, #564]	; (800b374 <UART_SetConfig+0xf4c>)
 800b13e:	e010      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b140:	4b8d      	ldr	r3, [pc, #564]	; (800b378 <UART_SetConfig+0xf50>)
 800b142:	e00e      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b144:	4b8d      	ldr	r3, [pc, #564]	; (800b37c <UART_SetConfig+0xf54>)
 800b146:	e00c      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b148:	4b8d      	ldr	r3, [pc, #564]	; (800b380 <UART_SetConfig+0xf58>)
 800b14a:	e00a      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b14c:	4b8d      	ldr	r3, [pc, #564]	; (800b384 <UART_SetConfig+0xf5c>)
 800b14e:	e008      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b150:	4b8d      	ldr	r3, [pc, #564]	; (800b388 <UART_SetConfig+0xf60>)
 800b152:	e006      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b154:	4b8d      	ldr	r3, [pc, #564]	; (800b38c <UART_SetConfig+0xf64>)
 800b156:	e004      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b158:	4b8d      	ldr	r3, [pc, #564]	; (800b390 <UART_SetConfig+0xf68>)
 800b15a:	e002      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b15c:	4b8d      	ldr	r3, [pc, #564]	; (800b394 <UART_SetConfig+0xf6c>)
 800b15e:	e000      	b.n	800b162 <UART_SetConfig+0xd3a>
 800b160:	4b82      	ldr	r3, [pc, #520]	; (800b36c <UART_SetConfig+0xf44>)
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	6852      	ldr	r2, [r2, #4]
 800b166:	0852      	lsrs	r2, r2, #1
 800b168:	441a      	add	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b172:	b29b      	uxth	r3, r3
 800b174:	61fb      	str	r3, [r7, #28]
        break;
 800b176:	e0bf      	b.n	800b2f8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b178:	f7fc fc6c 	bl	8007a54 <HAL_RCC_GetSysClockFreq>
 800b17c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	2b00      	cmp	r3, #0
 800b184:	d044      	beq.n	800b210 <UART_SetConfig+0xde8>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d03e      	beq.n	800b20c <UART_SetConfig+0xde4>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	2b02      	cmp	r3, #2
 800b194:	d038      	beq.n	800b208 <UART_SetConfig+0xde0>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d032      	beq.n	800b204 <UART_SetConfig+0xddc>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	d02c      	beq.n	800b200 <UART_SetConfig+0xdd8>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	2b05      	cmp	r3, #5
 800b1ac:	d026      	beq.n	800b1fc <UART_SetConfig+0xdd4>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b2:	2b06      	cmp	r3, #6
 800b1b4:	d020      	beq.n	800b1f8 <UART_SetConfig+0xdd0>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ba:	2b07      	cmp	r3, #7
 800b1bc:	d01a      	beq.n	800b1f4 <UART_SetConfig+0xdcc>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	2b08      	cmp	r3, #8
 800b1c4:	d014      	beq.n	800b1f0 <UART_SetConfig+0xdc8>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ca:	2b09      	cmp	r3, #9
 800b1cc:	d00e      	beq.n	800b1ec <UART_SetConfig+0xdc4>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	2b0a      	cmp	r3, #10
 800b1d4:	d008      	beq.n	800b1e8 <UART_SetConfig+0xdc0>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1da:	2b0b      	cmp	r3, #11
 800b1dc:	d102      	bne.n	800b1e4 <UART_SetConfig+0xdbc>
 800b1de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1e2:	e016      	b.n	800b212 <UART_SetConfig+0xdea>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e014      	b.n	800b212 <UART_SetConfig+0xdea>
 800b1e8:	2380      	movs	r3, #128	; 0x80
 800b1ea:	e012      	b.n	800b212 <UART_SetConfig+0xdea>
 800b1ec:	2340      	movs	r3, #64	; 0x40
 800b1ee:	e010      	b.n	800b212 <UART_SetConfig+0xdea>
 800b1f0:	2320      	movs	r3, #32
 800b1f2:	e00e      	b.n	800b212 <UART_SetConfig+0xdea>
 800b1f4:	2310      	movs	r3, #16
 800b1f6:	e00c      	b.n	800b212 <UART_SetConfig+0xdea>
 800b1f8:	230c      	movs	r3, #12
 800b1fa:	e00a      	b.n	800b212 <UART_SetConfig+0xdea>
 800b1fc:	230a      	movs	r3, #10
 800b1fe:	e008      	b.n	800b212 <UART_SetConfig+0xdea>
 800b200:	2308      	movs	r3, #8
 800b202:	e006      	b.n	800b212 <UART_SetConfig+0xdea>
 800b204:	2306      	movs	r3, #6
 800b206:	e004      	b.n	800b212 <UART_SetConfig+0xdea>
 800b208:	2304      	movs	r3, #4
 800b20a:	e002      	b.n	800b212 <UART_SetConfig+0xdea>
 800b20c:	2302      	movs	r3, #2
 800b20e:	e000      	b.n	800b212 <UART_SetConfig+0xdea>
 800b210:	2301      	movs	r3, #1
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	fbb2 f3f3 	udiv	r3, r2, r3
 800b218:	005a      	lsls	r2, r3, #1
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	085b      	lsrs	r3, r3, #1
 800b220:	441a      	add	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	fbb2 f3f3 	udiv	r3, r2, r3
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	61fb      	str	r3, [r7, #28]
        break;
 800b22e:	e063      	b.n	800b2f8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b234:	2b00      	cmp	r3, #0
 800b236:	d04f      	beq.n	800b2d8 <UART_SetConfig+0xeb0>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d048      	beq.n	800b2d2 <UART_SetConfig+0xeaa>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b244:	2b02      	cmp	r3, #2
 800b246:	d041      	beq.n	800b2cc <UART_SetConfig+0xea4>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d03a      	beq.n	800b2c6 <UART_SetConfig+0xe9e>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	2b04      	cmp	r3, #4
 800b256:	d033      	beq.n	800b2c0 <UART_SetConfig+0xe98>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25c:	2b05      	cmp	r3, #5
 800b25e:	d02c      	beq.n	800b2ba <UART_SetConfig+0xe92>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	2b06      	cmp	r3, #6
 800b266:	d025      	beq.n	800b2b4 <UART_SetConfig+0xe8c>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	2b07      	cmp	r3, #7
 800b26e:	d01e      	beq.n	800b2ae <UART_SetConfig+0xe86>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	2b08      	cmp	r3, #8
 800b276:	d017      	beq.n	800b2a8 <UART_SetConfig+0xe80>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27c:	2b09      	cmp	r3, #9
 800b27e:	d010      	beq.n	800b2a2 <UART_SetConfig+0xe7a>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b284:	2b0a      	cmp	r3, #10
 800b286:	d009      	beq.n	800b29c <UART_SetConfig+0xe74>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	2b0b      	cmp	r3, #11
 800b28e:	d102      	bne.n	800b296 <UART_SetConfig+0xe6e>
 800b290:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b294:	e022      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b29a:	e01f      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b29c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2a0:	e01c      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a6:	e019      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2ac:	e016      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2b2:	e013      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2b4:	f241 5354 	movw	r3, #5460	; 0x1554
 800b2b8:	e010      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2ba:	f641 1398 	movw	r3, #6552	; 0x1998
 800b2be:	e00d      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2c4:	e00a      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2c6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b2ca:	e007      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2d0:	e004      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2d6:	e001      	b.n	800b2dc <UART_SetConfig+0xeb4>
 800b2d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	6852      	ldr	r2, [r2, #4]
 800b2e0:	0852      	lsrs	r2, r2, #1
 800b2e2:	441a      	add	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	61fb      	str	r3, [r7, #28]
        break;
 800b2f0:	e002      	b.n	800b2f8 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	76fb      	strb	r3, [r7, #27]
        break;
 800b2f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2b0f      	cmp	r3, #15
 800b2fc:	d916      	bls.n	800b32c <UART_SetConfig+0xf04>
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b304:	d212      	bcs.n	800b32c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	f023 030f 	bic.w	r3, r3, #15
 800b30e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	085b      	lsrs	r3, r3, #1
 800b314:	b29b      	uxth	r3, r3
 800b316:	f003 0307 	and.w	r3, r3, #7
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	89fb      	ldrh	r3, [r7, #14]
 800b31e:	4313      	orrs	r3, r2
 800b320:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	89fa      	ldrh	r2, [r7, #14]
 800b328:	60da      	str	r2, [r3, #12]
 800b32a:	e20c      	b.n	800b746 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	76fb      	strb	r3, [r7, #27]
 800b330:	e209      	b.n	800b746 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 800b332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b336:	2b08      	cmp	r3, #8
 800b338:	f200 81f4 	bhi.w	800b724 <UART_SetConfig+0x12fc>
 800b33c:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <UART_SetConfig+0xf1c>)
 800b33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b342:	bf00      	nop
 800b344:	0800b399 	.word	0x0800b399
 800b348:	0800b44f 	.word	0x0800b44f
 800b34c:	0800b505 	.word	0x0800b505
 800b350:	0800b725 	.word	0x0800b725
 800b354:	0800b5af 	.word	0x0800b5af
 800b358:	0800b725 	.word	0x0800b725
 800b35c:	0800b725 	.word	0x0800b725
 800b360:	0800b725 	.word	0x0800b725
 800b364:	0800b665 	.word	0x0800b665
 800b368:	0001e848 	.word	0x0001e848
 800b36c:	01e84800 	.word	0x01e84800
 800b370:	0003d090 	.word	0x0003d090
 800b374:	0007a120 	.word	0x0007a120
 800b378:	000f4240 	.word	0x000f4240
 800b37c:	001e8480 	.word	0x001e8480
 800b380:	0028b0aa 	.word	0x0028b0aa
 800b384:	0030d400 	.word	0x0030d400
 800b388:	003d0900 	.word	0x003d0900
 800b38c:	00516154 	.word	0x00516154
 800b390:	007a1200 	.word	0x007a1200
 800b394:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b398:	f7fc fbca 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 800b39c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d044      	beq.n	800b430 <UART_SetConfig+0x1008>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d03e      	beq.n	800b42c <UART_SetConfig+0x1004>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d038      	beq.n	800b428 <UART_SetConfig+0x1000>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d032      	beq.n	800b424 <UART_SetConfig+0xffc>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c2:	2b04      	cmp	r3, #4
 800b3c4:	d02c      	beq.n	800b420 <UART_SetConfig+0xff8>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ca:	2b05      	cmp	r3, #5
 800b3cc:	d026      	beq.n	800b41c <UART_SetConfig+0xff4>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d2:	2b06      	cmp	r3, #6
 800b3d4:	d020      	beq.n	800b418 <UART_SetConfig+0xff0>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	2b07      	cmp	r3, #7
 800b3dc:	d01a      	beq.n	800b414 <UART_SetConfig+0xfec>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e2:	2b08      	cmp	r3, #8
 800b3e4:	d014      	beq.n	800b410 <UART_SetConfig+0xfe8>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ea:	2b09      	cmp	r3, #9
 800b3ec:	d00e      	beq.n	800b40c <UART_SetConfig+0xfe4>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f2:	2b0a      	cmp	r3, #10
 800b3f4:	d008      	beq.n	800b408 <UART_SetConfig+0xfe0>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	2b0b      	cmp	r3, #11
 800b3fc:	d102      	bne.n	800b404 <UART_SetConfig+0xfdc>
 800b3fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b402:	e016      	b.n	800b432 <UART_SetConfig+0x100a>
 800b404:	2301      	movs	r3, #1
 800b406:	e014      	b.n	800b432 <UART_SetConfig+0x100a>
 800b408:	2380      	movs	r3, #128	; 0x80
 800b40a:	e012      	b.n	800b432 <UART_SetConfig+0x100a>
 800b40c:	2340      	movs	r3, #64	; 0x40
 800b40e:	e010      	b.n	800b432 <UART_SetConfig+0x100a>
 800b410:	2320      	movs	r3, #32
 800b412:	e00e      	b.n	800b432 <UART_SetConfig+0x100a>
 800b414:	2310      	movs	r3, #16
 800b416:	e00c      	b.n	800b432 <UART_SetConfig+0x100a>
 800b418:	230c      	movs	r3, #12
 800b41a:	e00a      	b.n	800b432 <UART_SetConfig+0x100a>
 800b41c:	230a      	movs	r3, #10
 800b41e:	e008      	b.n	800b432 <UART_SetConfig+0x100a>
 800b420:	2308      	movs	r3, #8
 800b422:	e006      	b.n	800b432 <UART_SetConfig+0x100a>
 800b424:	2306      	movs	r3, #6
 800b426:	e004      	b.n	800b432 <UART_SetConfig+0x100a>
 800b428:	2304      	movs	r3, #4
 800b42a:	e002      	b.n	800b432 <UART_SetConfig+0x100a>
 800b42c:	2302      	movs	r3, #2
 800b42e:	e000      	b.n	800b432 <UART_SetConfig+0x100a>
 800b430:	2301      	movs	r3, #1
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	fbb2 f2f3 	udiv	r2, r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	085b      	lsrs	r3, r3, #1
 800b43e:	441a      	add	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	fbb2 f3f3 	udiv	r3, r2, r3
 800b448:	b29b      	uxth	r3, r3
 800b44a:	61fb      	str	r3, [r7, #28]
        break;
 800b44c:	e16d      	b.n	800b72a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b44e:	f7fc fb85 	bl	8007b5c <HAL_RCC_GetPCLK2Freq>
 800b452:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d044      	beq.n	800b4e6 <UART_SetConfig+0x10be>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b460:	2b01      	cmp	r3, #1
 800b462:	d03e      	beq.n	800b4e2 <UART_SetConfig+0x10ba>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d038      	beq.n	800b4de <UART_SetConfig+0x10b6>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	2b03      	cmp	r3, #3
 800b472:	d032      	beq.n	800b4da <UART_SetConfig+0x10b2>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b478:	2b04      	cmp	r3, #4
 800b47a:	d02c      	beq.n	800b4d6 <UART_SetConfig+0x10ae>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	2b05      	cmp	r3, #5
 800b482:	d026      	beq.n	800b4d2 <UART_SetConfig+0x10aa>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b488:	2b06      	cmp	r3, #6
 800b48a:	d020      	beq.n	800b4ce <UART_SetConfig+0x10a6>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b490:	2b07      	cmp	r3, #7
 800b492:	d01a      	beq.n	800b4ca <UART_SetConfig+0x10a2>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b498:	2b08      	cmp	r3, #8
 800b49a:	d014      	beq.n	800b4c6 <UART_SetConfig+0x109e>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	2b09      	cmp	r3, #9
 800b4a2:	d00e      	beq.n	800b4c2 <UART_SetConfig+0x109a>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a8:	2b0a      	cmp	r3, #10
 800b4aa:	d008      	beq.n	800b4be <UART_SetConfig+0x1096>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b0:	2b0b      	cmp	r3, #11
 800b4b2:	d102      	bne.n	800b4ba <UART_SetConfig+0x1092>
 800b4b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b8:	e016      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e014      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4be:	2380      	movs	r3, #128	; 0x80
 800b4c0:	e012      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4c2:	2340      	movs	r3, #64	; 0x40
 800b4c4:	e010      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4c6:	2320      	movs	r3, #32
 800b4c8:	e00e      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4ca:	2310      	movs	r3, #16
 800b4cc:	e00c      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4ce:	230c      	movs	r3, #12
 800b4d0:	e00a      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4d2:	230a      	movs	r3, #10
 800b4d4:	e008      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4d6:	2308      	movs	r3, #8
 800b4d8:	e006      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4da:	2306      	movs	r3, #6
 800b4dc:	e004      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4de:	2304      	movs	r3, #4
 800b4e0:	e002      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4e2:	2302      	movs	r3, #2
 800b4e4:	e000      	b.n	800b4e8 <UART_SetConfig+0x10c0>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	085b      	lsrs	r3, r3, #1
 800b4f4:	441a      	add	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	61fb      	str	r3, [r7, #28]
        break;
 800b502:	e112      	b.n	800b72a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d044      	beq.n	800b596 <UART_SetConfig+0x116e>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b510:	2b01      	cmp	r3, #1
 800b512:	d03e      	beq.n	800b592 <UART_SetConfig+0x116a>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d038      	beq.n	800b58e <UART_SetConfig+0x1166>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b520:	2b03      	cmp	r3, #3
 800b522:	d032      	beq.n	800b58a <UART_SetConfig+0x1162>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d02c      	beq.n	800b586 <UART_SetConfig+0x115e>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b530:	2b05      	cmp	r3, #5
 800b532:	d026      	beq.n	800b582 <UART_SetConfig+0x115a>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b538:	2b06      	cmp	r3, #6
 800b53a:	d020      	beq.n	800b57e <UART_SetConfig+0x1156>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	2b07      	cmp	r3, #7
 800b542:	d01a      	beq.n	800b57a <UART_SetConfig+0x1152>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	2b08      	cmp	r3, #8
 800b54a:	d014      	beq.n	800b576 <UART_SetConfig+0x114e>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b550:	2b09      	cmp	r3, #9
 800b552:	d00e      	beq.n	800b572 <UART_SetConfig+0x114a>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b558:	2b0a      	cmp	r3, #10
 800b55a:	d008      	beq.n	800b56e <UART_SetConfig+0x1146>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	2b0b      	cmp	r3, #11
 800b562:	d102      	bne.n	800b56a <UART_SetConfig+0x1142>
 800b564:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b568:	e016      	b.n	800b598 <UART_SetConfig+0x1170>
 800b56a:	4b81      	ldr	r3, [pc, #516]	; (800b770 <UART_SetConfig+0x1348>)
 800b56c:	e014      	b.n	800b598 <UART_SetConfig+0x1170>
 800b56e:	4b81      	ldr	r3, [pc, #516]	; (800b774 <UART_SetConfig+0x134c>)
 800b570:	e012      	b.n	800b598 <UART_SetConfig+0x1170>
 800b572:	4b81      	ldr	r3, [pc, #516]	; (800b778 <UART_SetConfig+0x1350>)
 800b574:	e010      	b.n	800b598 <UART_SetConfig+0x1170>
 800b576:	4b81      	ldr	r3, [pc, #516]	; (800b77c <UART_SetConfig+0x1354>)
 800b578:	e00e      	b.n	800b598 <UART_SetConfig+0x1170>
 800b57a:	4b81      	ldr	r3, [pc, #516]	; (800b780 <UART_SetConfig+0x1358>)
 800b57c:	e00c      	b.n	800b598 <UART_SetConfig+0x1170>
 800b57e:	4b81      	ldr	r3, [pc, #516]	; (800b784 <UART_SetConfig+0x135c>)
 800b580:	e00a      	b.n	800b598 <UART_SetConfig+0x1170>
 800b582:	4b81      	ldr	r3, [pc, #516]	; (800b788 <UART_SetConfig+0x1360>)
 800b584:	e008      	b.n	800b598 <UART_SetConfig+0x1170>
 800b586:	4b81      	ldr	r3, [pc, #516]	; (800b78c <UART_SetConfig+0x1364>)
 800b588:	e006      	b.n	800b598 <UART_SetConfig+0x1170>
 800b58a:	4b81      	ldr	r3, [pc, #516]	; (800b790 <UART_SetConfig+0x1368>)
 800b58c:	e004      	b.n	800b598 <UART_SetConfig+0x1170>
 800b58e:	4b81      	ldr	r3, [pc, #516]	; (800b794 <UART_SetConfig+0x136c>)
 800b590:	e002      	b.n	800b598 <UART_SetConfig+0x1170>
 800b592:	4b81      	ldr	r3, [pc, #516]	; (800b798 <UART_SetConfig+0x1370>)
 800b594:	e000      	b.n	800b598 <UART_SetConfig+0x1170>
 800b596:	4b76      	ldr	r3, [pc, #472]	; (800b770 <UART_SetConfig+0x1348>)
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	6852      	ldr	r2, [r2, #4]
 800b59c:	0852      	lsrs	r2, r2, #1
 800b59e:	441a      	add	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	61fb      	str	r3, [r7, #28]
        break;
 800b5ac:	e0bd      	b.n	800b72a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5ae:	f7fc fa51 	bl	8007a54 <HAL_RCC_GetSysClockFreq>
 800b5b2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d044      	beq.n	800b646 <UART_SetConfig+0x121e>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d03e      	beq.n	800b642 <UART_SetConfig+0x121a>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d038      	beq.n	800b63e <UART_SetConfig+0x1216>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d032      	beq.n	800b63a <UART_SetConfig+0x1212>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	2b04      	cmp	r3, #4
 800b5da:	d02c      	beq.n	800b636 <UART_SetConfig+0x120e>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	2b05      	cmp	r3, #5
 800b5e2:	d026      	beq.n	800b632 <UART_SetConfig+0x120a>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	2b06      	cmp	r3, #6
 800b5ea:	d020      	beq.n	800b62e <UART_SetConfig+0x1206>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f0:	2b07      	cmp	r3, #7
 800b5f2:	d01a      	beq.n	800b62a <UART_SetConfig+0x1202>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	d014      	beq.n	800b626 <UART_SetConfig+0x11fe>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	2b09      	cmp	r3, #9
 800b602:	d00e      	beq.n	800b622 <UART_SetConfig+0x11fa>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	2b0a      	cmp	r3, #10
 800b60a:	d008      	beq.n	800b61e <UART_SetConfig+0x11f6>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b610:	2b0b      	cmp	r3, #11
 800b612:	d102      	bne.n	800b61a <UART_SetConfig+0x11f2>
 800b614:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b618:	e016      	b.n	800b648 <UART_SetConfig+0x1220>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e014      	b.n	800b648 <UART_SetConfig+0x1220>
 800b61e:	2380      	movs	r3, #128	; 0x80
 800b620:	e012      	b.n	800b648 <UART_SetConfig+0x1220>
 800b622:	2340      	movs	r3, #64	; 0x40
 800b624:	e010      	b.n	800b648 <UART_SetConfig+0x1220>
 800b626:	2320      	movs	r3, #32
 800b628:	e00e      	b.n	800b648 <UART_SetConfig+0x1220>
 800b62a:	2310      	movs	r3, #16
 800b62c:	e00c      	b.n	800b648 <UART_SetConfig+0x1220>
 800b62e:	230c      	movs	r3, #12
 800b630:	e00a      	b.n	800b648 <UART_SetConfig+0x1220>
 800b632:	230a      	movs	r3, #10
 800b634:	e008      	b.n	800b648 <UART_SetConfig+0x1220>
 800b636:	2308      	movs	r3, #8
 800b638:	e006      	b.n	800b648 <UART_SetConfig+0x1220>
 800b63a:	2306      	movs	r3, #6
 800b63c:	e004      	b.n	800b648 <UART_SetConfig+0x1220>
 800b63e:	2304      	movs	r3, #4
 800b640:	e002      	b.n	800b648 <UART_SetConfig+0x1220>
 800b642:	2302      	movs	r3, #2
 800b644:	e000      	b.n	800b648 <UART_SetConfig+0x1220>
 800b646:	2301      	movs	r3, #1
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	085b      	lsrs	r3, r3, #1
 800b654:	441a      	add	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	61fb      	str	r3, [r7, #28]
        break;
 800b662:	e062      	b.n	800b72a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d04e      	beq.n	800b70a <UART_SetConfig+0x12e2>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	2b01      	cmp	r3, #1
 800b672:	d047      	beq.n	800b704 <UART_SetConfig+0x12dc>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d040      	beq.n	800b6fe <UART_SetConfig+0x12d6>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	2b03      	cmp	r3, #3
 800b682:	d039      	beq.n	800b6f8 <UART_SetConfig+0x12d0>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	2b04      	cmp	r3, #4
 800b68a:	d032      	beq.n	800b6f2 <UART_SetConfig+0x12ca>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	2b05      	cmp	r3, #5
 800b692:	d02b      	beq.n	800b6ec <UART_SetConfig+0x12c4>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	2b06      	cmp	r3, #6
 800b69a:	d024      	beq.n	800b6e6 <UART_SetConfig+0x12be>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	2b07      	cmp	r3, #7
 800b6a2:	d01d      	beq.n	800b6e0 <UART_SetConfig+0x12b8>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	2b08      	cmp	r3, #8
 800b6aa:	d016      	beq.n	800b6da <UART_SetConfig+0x12b2>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b09      	cmp	r3, #9
 800b6b2:	d00f      	beq.n	800b6d4 <UART_SetConfig+0x12ac>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	2b0a      	cmp	r3, #10
 800b6ba:	d008      	beq.n	800b6ce <UART_SetConfig+0x12a6>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b0b      	cmp	r3, #11
 800b6c2:	d101      	bne.n	800b6c8 <UART_SetConfig+0x12a0>
 800b6c4:	2380      	movs	r3, #128	; 0x80
 800b6c6:	e022      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6cc:	e01f      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d2:	e01c      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6d8:	e019      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6de:	e016      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6e4:	e013      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6e6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b6ea:	e010      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6ec:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b6f0:	e00d      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6f6:	e00a      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6f8:	f241 5355 	movw	r3, #5461	; 0x1555
 800b6fc:	e007      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b6fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b702:	e004      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b708:	e001      	b.n	800b70e <UART_SetConfig+0x12e6>
 800b70a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	6852      	ldr	r2, [r2, #4]
 800b712:	0852      	lsrs	r2, r2, #1
 800b714:	441a      	add	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b71e:	b29b      	uxth	r3, r3
 800b720:	61fb      	str	r3, [r7, #28]
        break;
 800b722:	e002      	b.n	800b72a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	76fb      	strb	r3, [r7, #27]
        break;
 800b728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	2b0f      	cmp	r3, #15
 800b72e:	d908      	bls.n	800b742 <UART_SetConfig+0x131a>
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b736:	d204      	bcs.n	800b742 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	69fa      	ldr	r2, [r7, #28]
 800b73e:	60da      	str	r2, [r3, #12]
 800b740:	e001      	b.n	800b746 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b762:	7efb      	ldrb	r3, [r7, #27]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3728      	adds	r7, #40	; 0x28
 800b768:	46bd      	mov	sp, r7
 800b76a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b76e:	bf00      	nop
 800b770:	00f42400 	.word	0x00f42400
 800b774:	0001e848 	.word	0x0001e848
 800b778:	0003d090 	.word	0x0003d090
 800b77c:	0007a120 	.word	0x0007a120
 800b780:	000f4240 	.word	0x000f4240
 800b784:	00145855 	.word	0x00145855
 800b788:	00186a00 	.word	0x00186a00
 800b78c:	001e8480 	.word	0x001e8480
 800b790:	0028b0aa 	.word	0x0028b0aa
 800b794:	003d0900 	.word	0x003d0900
 800b798:	007a1200 	.word	0x007a1200

0800b79c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00a      	beq.n	800b7c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	430a      	orrs	r2, r1
 800b7c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ca:	f003 0302 	and.w	r3, r3, #2
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00a      	beq.n	800b7e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	430a      	orrs	r2, r1
 800b7e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ec:	f003 0304 	and.w	r3, r3, #4
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00a      	beq.n	800b80a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	430a      	orrs	r2, r1
 800b808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80e:	f003 0308 	and.w	r3, r3, #8
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00a      	beq.n	800b82c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	430a      	orrs	r2, r1
 800b82a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b830:	f003 0310 	and.w	r3, r3, #16
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00a      	beq.n	800b84e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	430a      	orrs	r2, r1
 800b84c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b852:	f003 0320 	and.w	r3, r3, #32
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00a      	beq.n	800b870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	430a      	orrs	r2, r1
 800b86e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d01a      	beq.n	800b8b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	430a      	orrs	r2, r1
 800b890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b89a:	d10a      	bne.n	800b8b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	430a      	orrs	r2, r1
 800b8b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	605a      	str	r2, [r3, #4]
  }
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af02      	add	r7, sp, #8
 800b8e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b8f0:	f7f8 feb2 	bl	8004658 <HAL_GetTick>
 800b8f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0308 	and.w	r3, r3, #8
 800b900:	2b08      	cmp	r3, #8
 800b902:	d10e      	bne.n	800b922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f82c 	bl	800b970 <UART_WaitOnFlagUntilTimeout>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b91e:	2303      	movs	r3, #3
 800b920:	e022      	b.n	800b968 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0304 	and.w	r3, r3, #4
 800b92c:	2b04      	cmp	r3, #4
 800b92e:	d10e      	bne.n	800b94e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f816 	bl	800b970 <UART_WaitOnFlagUntilTimeout>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e00c      	b.n	800b968 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2220      	movs	r2, #32
 800b952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2220      	movs	r2, #32
 800b95a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	603b      	str	r3, [r7, #0]
 800b97c:	4613      	mov	r3, r2
 800b97e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b980:	e02c      	b.n	800b9dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b988:	d028      	beq.n	800b9dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b98a:	f7f8 fe65 	bl	8004658 <HAL_GetTick>
 800b98e:	4602      	mov	r2, r0
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	69ba      	ldr	r2, [r7, #24]
 800b996:	429a      	cmp	r2, r3
 800b998:	d302      	bcc.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d11d      	bne.n	800b9dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689a      	ldr	r2, [r3, #8]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f022 0201 	bic.w	r2, r2, #1
 800b9be:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	e00f      	b.n	800b9fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	69da      	ldr	r2, [r3, #28]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	68ba      	ldr	r2, [r7, #8]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	bf0c      	ite	eq
 800b9ec:	2301      	moveq	r3, #1
 800b9ee:	2300      	movne	r3, #0
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d0c3      	beq.n	800b982 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ba1a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	6812      	ldr	r2, [r2, #0]
 800ba26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba2a:	f023 0301 	bic.w	r3, r3, #1
 800ba2e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2220      	movs	r2, #32
 800ba34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f7fe fcd3 	bl	800a414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba6e:	bf00      	nop
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b082      	sub	sp, #8
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba8c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2220      	movs	r2, #32
 800ba92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7fe fcaf 	bl	800a400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800baa2:	bf00      	nop
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bab8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bac0:	2b22      	cmp	r3, #34	; 0x22
 800bac2:	d13b      	bne.n	800bb3c <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bacc:	89bb      	ldrh	r3, [r7, #12]
 800bace:	b2d9      	uxtb	r1, r3
 800bad0:	89fb      	ldrh	r3, [r7, #14]
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad8:	400a      	ands	r2, r1
 800bada:	b2d2      	uxtb	r2, r2
 800badc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bae2:	1c5a      	adds	r2, r3, #1
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baee:	b29b      	uxth	r3, r3
 800baf0:	3b01      	subs	r3, #1
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d122      	bne.n	800bb4c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bb14:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	689a      	ldr	r2, [r3, #8]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f022 0201 	bic.w	r2, r2, #1
 800bb24:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7f7 fdaf 	bl	8003698 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb3a:	e007      	b.n	800bb4c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	699a      	ldr	r2, [r3, #24]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f042 0208 	orr.w	r2, r2, #8
 800bb4a:	619a      	str	r2, [r3, #24]
}
 800bb4c:	bf00      	nop
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb62:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb6a:	2b22      	cmp	r3, #34	; 0x22
 800bb6c:	d13b      	bne.n	800bbe6 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb74:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800bb7c:	89ba      	ldrh	r2, [r7, #12]
 800bb7e:	89fb      	ldrh	r3, [r7, #14]
 800bb80:	4013      	ands	r3, r2
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb8c:	1c9a      	adds	r2, r3, #2
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d122      	bne.n	800bbf6 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bbbe:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f022 0201 	bic.w	r2, r2, #1
 800bbce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7f7 fd5a 	bl	8003698 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bbe4:	e007      	b.n	800bbf6 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	699a      	ldr	r2, [r3, #24]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f042 0208 	orr.w	r2, r2, #8
 800bbf4:	619a      	str	r2, [r3, #24]
}
 800bbf6:	bf00      	nop
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
	...

0800bc00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc0e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc16:	2b22      	cmp	r3, #34	; 0x22
 800bc18:	d168      	bne.n	800bcec <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bc20:	81fb      	strh	r3, [r7, #14]
 800bc22:	e03f      	b.n	800bca4 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc2c:	893b      	ldrh	r3, [r7, #8]
 800bc2e:	b2d9      	uxtb	r1, r3
 800bc30:	89bb      	ldrh	r3, [r7, #12]
 800bc32:	b2da      	uxtb	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc38:	400a      	ands	r2, r1
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc42:	1c5a      	adds	r2, r3, #1
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	3b01      	subs	r3, #1
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d11b      	bne.n	800bc9e <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc74:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	6812      	ldr	r2, [r2, #0]
 800bc80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc84:	f023 0301 	bic.w	r3, r3, #1
 800bc88:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2220      	movs	r2, #32
 800bc8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7f7 fcfd 	bl	8003698 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bc9e:	89fb      	ldrh	r3, [r7, #14]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	81fb      	strh	r3, [r7, #14]
 800bca4:	89fb      	ldrh	r3, [r7, #14]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1bc      	bne.n	800bc24 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcb0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bcb2:	897b      	ldrh	r3, [r7, #10]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d021      	beq.n	800bcfc <UART_RxISR_8BIT_FIFOEN+0xfc>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bcbe:	897a      	ldrh	r2, [r7, #10]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d21b      	bcs.n	800bcfc <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689a      	ldr	r2, [r3, #8]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bcd2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a0b      	ldr	r2, [pc, #44]	; (800bd04 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800bcd8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f042 0220 	orr.w	r2, r2, #32
 800bce8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bcea:	e007      	b.n	800bcfc <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	699a      	ldr	r2, [r3, #24]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f042 0208 	orr.w	r2, r2, #8
 800bcfa:	619a      	str	r2, [r3, #24]
}
 800bcfc:	bf00      	nop
 800bcfe:	3710      	adds	r7, #16
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	0800baab 	.word	0x0800baab

0800bd08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd16:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd1e:	2b22      	cmp	r3, #34	; 0x22
 800bd20:	d168      	bne.n	800bdf4 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd28:	82fb      	strh	r3, [r7, #22]
 800bd2a:	e03f      	b.n	800bdac <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd32:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd38:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800bd3a:	8a3a      	ldrh	r2, [r7, #16]
 800bd3c:	8abb      	ldrh	r3, [r7, #20]
 800bd3e:	4013      	ands	r3, r2
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd4a:	1c9a      	adds	r2, r3, #2
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d11b      	bne.n	800bda6 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd7c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	6812      	ldr	r2, [r2, #0]
 800bd88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd8c:	f023 0301 	bic.w	r3, r3, #1
 800bd90:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2220      	movs	r2, #32
 800bd96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7f7 fc79 	bl	8003698 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bda6:	8afb      	ldrh	r3, [r7, #22]
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	82fb      	strh	r3, [r7, #22]
 800bdac:	8afb      	ldrh	r3, [r7, #22]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1bc      	bne.n	800bd2c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdb8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bdba:	8a7b      	ldrh	r3, [r7, #18]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d021      	beq.n	800be04 <UART_RxISR_16BIT_FIFOEN+0xfc>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bdc6:	8a7a      	ldrh	r2, [r7, #18]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d21b      	bcs.n	800be04 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	689a      	ldr	r2, [r3, #8]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bdda:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a0b      	ldr	r2, [pc, #44]	; (800be0c <UART_RxISR_16BIT_FIFOEN+0x104>)
 800bde0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f042 0220 	orr.w	r2, r2, #32
 800bdf0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdf2:	e007      	b.n	800be04 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	699a      	ldr	r2, [r3, #24]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f042 0208 	orr.w	r2, r2, #8
 800be02:	619a      	str	r2, [r3, #24]
}
 800be04:	bf00      	nop
 800be06:	3718      	adds	r7, #24
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	0800bb55 	.word	0x0800bb55

0800be10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be2c:	bf00      	nop
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d101      	bne.n	800be62 <HAL_UARTEx_DisableFifoMode+0x16>
 800be5e:	2302      	movs	r3, #2
 800be60:	e027      	b.n	800beb2 <HAL_UARTEx_DisableFifoMode+0x66>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2224      	movs	r2, #36	; 0x24
 800be6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f022 0201 	bic.w	r2, r2, #1
 800be88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2220      	movs	r2, #32
 800bea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3714      	adds	r7, #20
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b084      	sub	sp, #16
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d101      	bne.n	800bed6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bed2:	2302      	movs	r3, #2
 800bed4:	e02d      	b.n	800bf32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2224      	movs	r2, #36	; 0x24
 800bee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f022 0201 	bic.w	r2, r2, #1
 800befc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	430a      	orrs	r2, r1
 800bf10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f850 	bl	800bfb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2220      	movs	r2, #32
 800bf24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d101      	bne.n	800bf52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf4e:	2302      	movs	r3, #2
 800bf50:	e02d      	b.n	800bfae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2224      	movs	r2, #36	; 0x24
 800bf5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f022 0201 	bic.w	r2, r2, #1
 800bf78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	683a      	ldr	r2, [r7, #0]
 800bf8a:	430a      	orrs	r2, r1
 800bf8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f812 	bl	800bfb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2220      	movs	r2, #32
 800bfa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b089      	sub	sp, #36	; 0x24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bfc0:	4a2f      	ldr	r2, [pc, #188]	; (800c080 <UARTEx_SetNbDataToProcess+0xc8>)
 800bfc2:	f107 0314 	add.w	r3, r7, #20
 800bfc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bfce:	4a2d      	ldr	r2, [pc, #180]	; (800c084 <UARTEx_SetNbDataToProcess+0xcc>)
 800bfd0:	f107 030c 	add.w	r3, r7, #12
 800bfd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfd8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d108      	bne.n	800bff6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bff4:	e03d      	b.n	800c072 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bff6:	2308      	movs	r3, #8
 800bff8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bffa:	2308      	movs	r3, #8
 800bffc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	0e5b      	lsrs	r3, r3, #25
 800c006:	b2db      	uxtb	r3, r3
 800c008:	f003 0307 	and.w	r3, r3, #7
 800c00c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	0f5b      	lsrs	r3, r3, #29
 800c016:	b2db      	uxtb	r3, r3
 800c018:	f003 0307 	and.w	r3, r3, #7
 800c01c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c01e:	7fbb      	ldrb	r3, [r7, #30]
 800c020:	7f3a      	ldrb	r2, [r7, #28]
 800c022:	f107 0120 	add.w	r1, r7, #32
 800c026:	440a      	add	r2, r1
 800c028:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c02c:	fb02 f303 	mul.w	r3, r2, r3
 800c030:	7f3a      	ldrb	r2, [r7, #28]
 800c032:	f107 0120 	add.w	r1, r7, #32
 800c036:	440a      	add	r2, r1
 800c038:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c03c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c040:	b29a      	uxth	r2, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c048:	7ffb      	ldrb	r3, [r7, #31]
 800c04a:	7f7a      	ldrb	r2, [r7, #29]
 800c04c:	f107 0120 	add.w	r1, r7, #32
 800c050:	440a      	add	r2, r1
 800c052:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c056:	fb02 f303 	mul.w	r3, r2, r3
 800c05a:	7f7a      	ldrb	r2, [r7, #29]
 800c05c:	f107 0120 	add.w	r1, r7, #32
 800c060:	440a      	add	r2, r1
 800c062:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c066:	fb93 f3f2 	sdiv	r3, r3, r2
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c072:	bf00      	nop
 800c074:	3724      	adds	r7, #36	; 0x24
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	08010d78 	.word	0x08010d78
 800c084:	08010d80 	.word	0x08010d80

0800c088 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	ed93 7a06 	vldr	s14, [r3, #24]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	edd3 7a07 	vldr	s15, [r3, #28]
 800c09e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	edd3 7a08 	vldr	s15, [r3, #32]
 800c0a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	edd3 7a06 	vldr	s15, [r3, #24]
 800c0b8:	eeb1 7a67 	vneg.f32	s14, s15
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	edd3 7a08 	vldr	s15, [r3, #32]
 800c0c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c0c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a1a      	ldr	r2, [r3, #32]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d006      	beq.n	800c0ec <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	330c      	adds	r3, #12
 800c0e2:	220c      	movs	r2, #12
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fa87 	bl	800c5fa <memset>
  }

}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <arm_pid_reset_f32>:
* \par Description:
* The function resets the state buffer to zeros.
*/
void arm_pid_reset_f32(
  arm_pid_instance_f32 * S)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]

  /* Clear the state buffer.  The size will be always 3 samples */
  memset(S->state, 0, 3U * sizeof(float32_t));
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	330c      	adds	r3, #12
 800c100:	220c      	movs	r2, #12
 800c102:	2100      	movs	r1, #0
 800c104:	4618      	mov	r0, r3
 800c106:	f000 fa78 	bl	800c5fa <memset>
}
 800c10a:	bf00      	nop
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <arm_sin_cos_f32>:

void arm_sin_cos_f32(
                      float32_t theta,
                      float32_t * pSinVal,
                      float32_t * pCosVal)
{
 800c114:	b480      	push	{r7}
 800c116:	b091      	sub	sp, #68	; 0x44
 800c118:	af00      	add	r7, sp, #0
 800c11a:	ed87 0a03 	vstr	s0, [r7, #12]
 800c11e:	60b8      	str	r0, [r7, #8]
 800c120:	6079      	str	r1, [r7, #4]
    float32_t f1, f2, d1, d2;                        /* Two nearest output values */
    float32_t findex, Dn, Df, temp;

    /* input x is in degrees */
    /* Scale the input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
    in = theta * 0.00277777777778f;
 800c122:	edd7 7a03 	vldr	s15, [r7, #12]
 800c126:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800c3f8 <arm_sin_cos_f32+0x2e4>
 800c12a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c12e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if (in < 0.0f)
 800c132:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13e:	d505      	bpl.n	800c14c <arm_sin_cos_f32+0x38>
    {
        in = -in;
 800c140:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c144:	eef1 7a67 	vneg.f32	s15, s15
 800c148:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    in = in - (int32_t)in;
 800c14c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c158:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c15c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c160:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculation of index of the table */
    findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800c164:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c168:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800c3fc <arm_sin_cos_f32+0x2e8>
 800c16c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c170:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    indexS = ((uint16_t)findex) & 0x1ff;
 800c174:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c17c:	ee17 3a90 	vmov	r3, s15
 800c180:	b29b      	uxth	r3, r3
 800c182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c186:	86fb      	strh	r3, [r7, #54]	; 0x36
    indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
 800c188:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c18a:	3380      	adds	r3, #128	; 0x80
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c192:	86bb      	strh	r3, [r7, #52]	; 0x34

    /* fractional value calculation */
    fract = findex - (float32_t) indexS;
 800c194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c1a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1a6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexC+0];
 800c1aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c1ac:	4a94      	ldr	r2, [pc, #592]	; (800c400 <arm_sin_cos_f32+0x2ec>)
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexC+1];
 800c1b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	4a91      	ldr	r2, [pc, #580]	; (800c400 <arm_sin_cos_f32+0x2ec>)
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = -sinTable_f32[indexS+0];
 800c1c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1c6:	4a8e      	ldr	r2, [pc, #568]	; (800c400 <arm_sin_cos_f32+0x2ec>)
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	4413      	add	r3, r2
 800c1cc:	edd3 7a00 	vldr	s15, [r3]
 800c1d0:	eef1 7a67 	vneg.f32	s15, s15
 800c1d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    d2 = -sinTable_f32[indexS+1];
 800c1d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1da:	3301      	adds	r3, #1
 800c1dc:	4a88      	ldr	r2, [pc, #544]	; (800c400 <arm_sin_cos_f32+0x2ec>)
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	edd3 7a00 	vldr	s15, [r3]
 800c1e6:	eef1 7a67 	vneg.f32	s15, s15
 800c1ea:	edc7 7a08 	vstr	s15, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 800c1ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c1f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c1fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c1fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c202:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800c206:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c20a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c20e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c212:	edc7 7a07 	vstr	s15, [r7, #28]

    Dn = 0.0122718463030f; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
 800c216:	4b7b      	ldr	r3, [pc, #492]	; (800c404 <arm_sin_cos_f32+0x2f0>)
 800c218:	61bb      	str	r3, [r7, #24]
    Df = f2 - f1;          // delta between the values of the functions
 800c21a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c21e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c222:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c226:	edc7 7a05 	vstr	s15, [r7, #20]

    temp = Dn *(d1 + d2) - 2 * Df;
 800c22a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c22e:	edd7 7a08 	vldr	s15, [r7, #32]
 800c232:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c236:	edd7 7a06 	vldr	s15, [r7, #24]
 800c23a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c23e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c242:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c24a:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 800c24e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c252:	edd7 7a07 	vldr	s15, [r7, #28]
 800c256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c25a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c25e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c262:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c266:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c26a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800c26e:	edd7 7a08 	vldr	s15, [r7, #32]
 800c272:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c276:	edd7 7a06 	vldr	s15, [r7, #24]
 800c27a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c27e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c282:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c286:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + d1 * Dn;
 800c28a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c28e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c292:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c296:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c29a:	edd7 7a06 	vldr	s15, [r7, #24]
 800c29e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2a6:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of cosine value */
    *pCosVal = fract * temp + f1;
 800c2aa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c2ae:	edd7 7a07 	vldr	s15, [r7, #28]
 800c2b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c2ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	edc3 7a00 	vstr	s15, [r3]

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexS+0];
 800c2c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c2c6:	4a4e      	ldr	r2, [pc, #312]	; (800c400 <arm_sin_cos_f32+0x2ec>)
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexS+1];
 800c2d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	4a4a      	ldr	r2, [pc, #296]	; (800c400 <arm_sin_cos_f32+0x2ec>)
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = sinTable_f32[indexC+0];
 800c2de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c2e0:	4a47      	ldr	r2, [pc, #284]	; (800c400 <arm_sin_cos_f32+0x2ec>)
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	4413      	add	r3, r2
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	627b      	str	r3, [r7, #36]	; 0x24
    d2 = sinTable_f32[indexC+1];
 800c2ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	4a44      	ldr	r2, [pc, #272]	; (800c400 <arm_sin_cos_f32+0x2ec>)
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4413      	add	r3, r2
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	623b      	str	r3, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 800c2f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c300:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c304:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c30c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800c310:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c31c:	edc7 7a07 	vstr	s15, [r7, #28]

    Df = f2 - f1; // delta between the values of the functions
 800c320:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c324:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c32c:	edc7 7a05 	vstr	s15, [r7, #20]
    temp = Dn*(d1 + d2) - 2*Df;
 800c330:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c334:	edd7 7a08 	vldr	s15, [r7, #32]
 800c338:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c33c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c340:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c344:	edd7 7a05 	vldr	s15, [r7, #20]
 800c348:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c34c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c350:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + (3*Df - (d2 + 2*d1)*Dn);
 800c354:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c358:	edd7 7a07 	vldr	s15, [r7, #28]
 800c35c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c360:	edd7 7a05 	vldr	s15, [r7, #20]
 800c364:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c368:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c36c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c370:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800c374:	edd7 7a08 	vldr	s15, [r7, #32]
 800c378:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c37c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c380:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c384:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c38c:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + d1*Dn;
 800c390:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c394:	edd7 7a07 	vldr	s15, [r7, #28]
 800c398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c39c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c3a0:	edd7 7a06 	vldr	s15, [r7, #24]
 800c3a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3ac:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of sine value */
    *pSinVal = fract*temp + f1;
 800c3b0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c3b4:	edd7 7a07 	vldr	s15, [r7, #28]
 800c3b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c3c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	edc3 7a00 	vstr	s15, [r3]

    if (theta < 0.0f)
 800c3ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d6:	d400      	bmi.n	800c3da <arm_sin_cos_f32+0x2c6>
    {
        *pSinVal = -*pSinVal;
    }
}
 800c3d8:	e007      	b.n	800c3ea <arm_sin_cos_f32+0x2d6>
        *pSinVal = -*pSinVal;
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	edd3 7a00 	vldr	s15, [r3]
 800c3e0:	eef1 7a67 	vneg.f32	s15, s15
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	edc3 7a00 	vstr	s15, [r3]
}
 800c3ea:	bf00      	nop
 800c3ec:	3744      	adds	r7, #68	; 0x44
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	3b360b61 	.word	0x3b360b61
 800c3fc:	44000000 	.word	0x44000000
 800c400:	08010dac 	.word	0x08010dac
 800c404:	3c490fdb 	.word	0x3c490fdb

0800c408 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800c408:	b480      	push	{r7}
 800c40a:	b08b      	sub	sp, #44	; 0x2c
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 800c412:	edd7 7a01 	vldr	s15, [r7, #4]
 800c416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c41e:	d50a      	bpl.n	800c436 <arm_sin_f32+0x2e>
 800c420:	edd7 7a01 	vldr	s15, [r7, #4]
 800c424:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800c510 <arm_sin_f32+0x108>
 800c428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c430:	db01      	blt.n	800c436 <arm_sin_f32+0x2e>
     return x;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	e062      	b.n	800c4fc <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800c436:	edd7 7a01 	vldr	s15, [r7, #4]
 800c43a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c514 <arm_sin_f32+0x10c>
 800c43e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c442:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800c446:	edd7 7a08 	vldr	s15, [r7, #32]
 800c44a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c44e:	ee17 3a90 	vmov	r3, s15
 800c452:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 800c454:	edd7 7a01 	vldr	s15, [r7, #4]
 800c458:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c460:	d502      	bpl.n	800c468 <arm_sin_f32+0x60>
  {
    n--;
 800c462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c464:	3b01      	subs	r3, #1
 800c466:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c472:	ed97 7a08 	vldr	s14, [r7, #32]
 800c476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c47a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800c47e:	edd7 7a08 	vldr	s15, [r7, #32]
 800c482:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800c518 <arm_sin_f32+0x110>
 800c486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c48a:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 800c48e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c496:	ee17 3a90 	vmov	r3, s15
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a0:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800c4a2:	8b7b      	ldrh	r3, [r7, #26]
 800c4a4:	ee07 3a90 	vmov	s15, r3
 800c4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ac:	ed97 7a07 	vldr	s14, [r7, #28]
 800c4b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4b4:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800c4b8:	8b7b      	ldrh	r3, [r7, #26]
 800c4ba:	4a18      	ldr	r2, [pc, #96]	; (800c51c <arm_sin_f32+0x114>)
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	4413      	add	r3, r2
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800c4c4:	8b7b      	ldrh	r3, [r7, #26]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	4a14      	ldr	r2, [pc, #80]	; (800c51c <arm_sin_f32+0x114>)
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4413      	add	r3, r2
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800c4d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4de:	edd7 7a04 	vldr	s15, [r7, #16]
 800c4e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4e6:	edd7 6a05 	vldr	s13, [r7, #20]
 800c4ea:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4f6:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	ee07 3a90 	vmov	s15, r3
}
 800c500:	eeb0 0a67 	vmov.f32	s0, s15
 800c504:	372c      	adds	r7, #44	; 0x2c
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	b44c02cd 	.word	0xb44c02cd
 800c514:	3e22f983 	.word	0x3e22f983
 800c518:	44000000 	.word	0x44000000
 800c51c:	08010dac 	.word	0x08010dac

0800c520 <atoi>:
 800c520:	220a      	movs	r2, #10
 800c522:	2100      	movs	r1, #0
 800c524:	f001 be96 	b.w	800e254 <strtol>

0800c528 <__errno>:
 800c528:	4b01      	ldr	r3, [pc, #4]	; (800c530 <__errno+0x8>)
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	20000018 	.word	0x20000018

0800c534 <__libc_init_array>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	4e0d      	ldr	r6, [pc, #52]	; (800c56c <__libc_init_array+0x38>)
 800c538:	4c0d      	ldr	r4, [pc, #52]	; (800c570 <__libc_init_array+0x3c>)
 800c53a:	1ba4      	subs	r4, r4, r6
 800c53c:	10a4      	asrs	r4, r4, #2
 800c53e:	2500      	movs	r5, #0
 800c540:	42a5      	cmp	r5, r4
 800c542:	d109      	bne.n	800c558 <__libc_init_array+0x24>
 800c544:	4e0b      	ldr	r6, [pc, #44]	; (800c574 <__libc_init_array+0x40>)
 800c546:	4c0c      	ldr	r4, [pc, #48]	; (800c578 <__libc_init_array+0x44>)
 800c548:	f004 fbaa 	bl	8010ca0 <_init>
 800c54c:	1ba4      	subs	r4, r4, r6
 800c54e:	10a4      	asrs	r4, r4, #2
 800c550:	2500      	movs	r5, #0
 800c552:	42a5      	cmp	r5, r4
 800c554:	d105      	bne.n	800c562 <__libc_init_array+0x2e>
 800c556:	bd70      	pop	{r4, r5, r6, pc}
 800c558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c55c:	4798      	blx	r3
 800c55e:	3501      	adds	r5, #1
 800c560:	e7ee      	b.n	800c540 <__libc_init_array+0xc>
 800c562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c566:	4798      	blx	r3
 800c568:	3501      	adds	r5, #1
 800c56a:	e7f2      	b.n	800c552 <__libc_init_array+0x1e>
 800c56c:	08011910 	.word	0x08011910
 800c570:	08011910 	.word	0x08011910
 800c574:	08011910 	.word	0x08011910
 800c578:	08011914 	.word	0x08011914

0800c57c <__locale_ctype_ptr_l>:
 800c57c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c580:	4770      	bx	lr
	...

0800c584 <__locale_ctype_ptr>:
 800c584:	4b04      	ldr	r3, [pc, #16]	; (800c598 <__locale_ctype_ptr+0x14>)
 800c586:	4a05      	ldr	r2, [pc, #20]	; (800c59c <__locale_ctype_ptr+0x18>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6a1b      	ldr	r3, [r3, #32]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bf08      	it	eq
 800c590:	4613      	moveq	r3, r2
 800c592:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c596:	4770      	bx	lr
 800c598:	20000018 	.word	0x20000018
 800c59c:	2000007c 	.word	0x2000007c

0800c5a0 <malloc>:
 800c5a0:	4b02      	ldr	r3, [pc, #8]	; (800c5ac <malloc+0xc>)
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	6818      	ldr	r0, [r3, #0]
 800c5a6:	f000 b87f 	b.w	800c6a8 <_malloc_r>
 800c5aa:	bf00      	nop
 800c5ac:	20000018 	.word	0x20000018

0800c5b0 <free>:
 800c5b0:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <free+0xc>)
 800c5b2:	4601      	mov	r1, r0
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	f000 b829 	b.w	800c60c <_free_r>
 800c5ba:	bf00      	nop
 800c5bc:	20000018 	.word	0x20000018

0800c5c0 <__ascii_mbtowc>:
 800c5c0:	b082      	sub	sp, #8
 800c5c2:	b901      	cbnz	r1, 800c5c6 <__ascii_mbtowc+0x6>
 800c5c4:	a901      	add	r1, sp, #4
 800c5c6:	b142      	cbz	r2, 800c5da <__ascii_mbtowc+0x1a>
 800c5c8:	b14b      	cbz	r3, 800c5de <__ascii_mbtowc+0x1e>
 800c5ca:	7813      	ldrb	r3, [r2, #0]
 800c5cc:	600b      	str	r3, [r1, #0]
 800c5ce:	7812      	ldrb	r2, [r2, #0]
 800c5d0:	1c10      	adds	r0, r2, #0
 800c5d2:	bf18      	it	ne
 800c5d4:	2001      	movne	r0, #1
 800c5d6:	b002      	add	sp, #8
 800c5d8:	4770      	bx	lr
 800c5da:	4610      	mov	r0, r2
 800c5dc:	e7fb      	b.n	800c5d6 <__ascii_mbtowc+0x16>
 800c5de:	f06f 0001 	mvn.w	r0, #1
 800c5e2:	e7f8      	b.n	800c5d6 <__ascii_mbtowc+0x16>

0800c5e4 <memcpy>:
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	1e43      	subs	r3, r0, #1
 800c5e8:	440a      	add	r2, r1
 800c5ea:	4291      	cmp	r1, r2
 800c5ec:	d100      	bne.n	800c5f0 <memcpy+0xc>
 800c5ee:	bd10      	pop	{r4, pc}
 800c5f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5f8:	e7f7      	b.n	800c5ea <memcpy+0x6>

0800c5fa <memset>:
 800c5fa:	4402      	add	r2, r0
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d100      	bne.n	800c604 <memset+0xa>
 800c602:	4770      	bx	lr
 800c604:	f803 1b01 	strb.w	r1, [r3], #1
 800c608:	e7f9      	b.n	800c5fe <memset+0x4>
	...

0800c60c <_free_r>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	4605      	mov	r5, r0
 800c610:	2900      	cmp	r1, #0
 800c612:	d045      	beq.n	800c6a0 <_free_r+0x94>
 800c614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c618:	1f0c      	subs	r4, r1, #4
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	bfb8      	it	lt
 800c61e:	18e4      	addlt	r4, r4, r3
 800c620:	f002 ffb8 	bl	800f594 <__malloc_lock>
 800c624:	4a1f      	ldr	r2, [pc, #124]	; (800c6a4 <_free_r+0x98>)
 800c626:	6813      	ldr	r3, [r2, #0]
 800c628:	4610      	mov	r0, r2
 800c62a:	b933      	cbnz	r3, 800c63a <_free_r+0x2e>
 800c62c:	6063      	str	r3, [r4, #4]
 800c62e:	6014      	str	r4, [r2, #0]
 800c630:	4628      	mov	r0, r5
 800c632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c636:	f002 bfae 	b.w	800f596 <__malloc_unlock>
 800c63a:	42a3      	cmp	r3, r4
 800c63c:	d90c      	bls.n	800c658 <_free_r+0x4c>
 800c63e:	6821      	ldr	r1, [r4, #0]
 800c640:	1862      	adds	r2, r4, r1
 800c642:	4293      	cmp	r3, r2
 800c644:	bf04      	itt	eq
 800c646:	681a      	ldreq	r2, [r3, #0]
 800c648:	685b      	ldreq	r3, [r3, #4]
 800c64a:	6063      	str	r3, [r4, #4]
 800c64c:	bf04      	itt	eq
 800c64e:	1852      	addeq	r2, r2, r1
 800c650:	6022      	streq	r2, [r4, #0]
 800c652:	6004      	str	r4, [r0, #0]
 800c654:	e7ec      	b.n	800c630 <_free_r+0x24>
 800c656:	4613      	mov	r3, r2
 800c658:	685a      	ldr	r2, [r3, #4]
 800c65a:	b10a      	cbz	r2, 800c660 <_free_r+0x54>
 800c65c:	42a2      	cmp	r2, r4
 800c65e:	d9fa      	bls.n	800c656 <_free_r+0x4a>
 800c660:	6819      	ldr	r1, [r3, #0]
 800c662:	1858      	adds	r0, r3, r1
 800c664:	42a0      	cmp	r0, r4
 800c666:	d10b      	bne.n	800c680 <_free_r+0x74>
 800c668:	6820      	ldr	r0, [r4, #0]
 800c66a:	4401      	add	r1, r0
 800c66c:	1858      	adds	r0, r3, r1
 800c66e:	4282      	cmp	r2, r0
 800c670:	6019      	str	r1, [r3, #0]
 800c672:	d1dd      	bne.n	800c630 <_free_r+0x24>
 800c674:	6810      	ldr	r0, [r2, #0]
 800c676:	6852      	ldr	r2, [r2, #4]
 800c678:	605a      	str	r2, [r3, #4]
 800c67a:	4401      	add	r1, r0
 800c67c:	6019      	str	r1, [r3, #0]
 800c67e:	e7d7      	b.n	800c630 <_free_r+0x24>
 800c680:	d902      	bls.n	800c688 <_free_r+0x7c>
 800c682:	230c      	movs	r3, #12
 800c684:	602b      	str	r3, [r5, #0]
 800c686:	e7d3      	b.n	800c630 <_free_r+0x24>
 800c688:	6820      	ldr	r0, [r4, #0]
 800c68a:	1821      	adds	r1, r4, r0
 800c68c:	428a      	cmp	r2, r1
 800c68e:	bf04      	itt	eq
 800c690:	6811      	ldreq	r1, [r2, #0]
 800c692:	6852      	ldreq	r2, [r2, #4]
 800c694:	6062      	str	r2, [r4, #4]
 800c696:	bf04      	itt	eq
 800c698:	1809      	addeq	r1, r1, r0
 800c69a:	6021      	streq	r1, [r4, #0]
 800c69c:	605c      	str	r4, [r3, #4]
 800c69e:	e7c7      	b.n	800c630 <_free_r+0x24>
 800c6a0:	bd38      	pop	{r3, r4, r5, pc}
 800c6a2:	bf00      	nop
 800c6a4:	2000021c 	.word	0x2000021c

0800c6a8 <_malloc_r>:
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	1ccd      	adds	r5, r1, #3
 800c6ac:	f025 0503 	bic.w	r5, r5, #3
 800c6b0:	3508      	adds	r5, #8
 800c6b2:	2d0c      	cmp	r5, #12
 800c6b4:	bf38      	it	cc
 800c6b6:	250c      	movcc	r5, #12
 800c6b8:	2d00      	cmp	r5, #0
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	db01      	blt.n	800c6c2 <_malloc_r+0x1a>
 800c6be:	42a9      	cmp	r1, r5
 800c6c0:	d903      	bls.n	800c6ca <_malloc_r+0x22>
 800c6c2:	230c      	movs	r3, #12
 800c6c4:	6033      	str	r3, [r6, #0]
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ca:	f002 ff63 	bl	800f594 <__malloc_lock>
 800c6ce:	4a21      	ldr	r2, [pc, #132]	; (800c754 <_malloc_r+0xac>)
 800c6d0:	6814      	ldr	r4, [r2, #0]
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	b991      	cbnz	r1, 800c6fc <_malloc_r+0x54>
 800c6d6:	4c20      	ldr	r4, [pc, #128]	; (800c758 <_malloc_r+0xb0>)
 800c6d8:	6823      	ldr	r3, [r4, #0]
 800c6da:	b91b      	cbnz	r3, 800c6e4 <_malloc_r+0x3c>
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f000 fe83 	bl	800d3e8 <_sbrk_r>
 800c6e2:	6020      	str	r0, [r4, #0]
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f000 fe7e 	bl	800d3e8 <_sbrk_r>
 800c6ec:	1c43      	adds	r3, r0, #1
 800c6ee:	d124      	bne.n	800c73a <_malloc_r+0x92>
 800c6f0:	230c      	movs	r3, #12
 800c6f2:	6033      	str	r3, [r6, #0]
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f002 ff4e 	bl	800f596 <__malloc_unlock>
 800c6fa:	e7e4      	b.n	800c6c6 <_malloc_r+0x1e>
 800c6fc:	680b      	ldr	r3, [r1, #0]
 800c6fe:	1b5b      	subs	r3, r3, r5
 800c700:	d418      	bmi.n	800c734 <_malloc_r+0x8c>
 800c702:	2b0b      	cmp	r3, #11
 800c704:	d90f      	bls.n	800c726 <_malloc_r+0x7e>
 800c706:	600b      	str	r3, [r1, #0]
 800c708:	50cd      	str	r5, [r1, r3]
 800c70a:	18cc      	adds	r4, r1, r3
 800c70c:	4630      	mov	r0, r6
 800c70e:	f002 ff42 	bl	800f596 <__malloc_unlock>
 800c712:	f104 000b 	add.w	r0, r4, #11
 800c716:	1d23      	adds	r3, r4, #4
 800c718:	f020 0007 	bic.w	r0, r0, #7
 800c71c:	1ac3      	subs	r3, r0, r3
 800c71e:	d0d3      	beq.n	800c6c8 <_malloc_r+0x20>
 800c720:	425a      	negs	r2, r3
 800c722:	50e2      	str	r2, [r4, r3]
 800c724:	e7d0      	b.n	800c6c8 <_malloc_r+0x20>
 800c726:	428c      	cmp	r4, r1
 800c728:	684b      	ldr	r3, [r1, #4]
 800c72a:	bf16      	itet	ne
 800c72c:	6063      	strne	r3, [r4, #4]
 800c72e:	6013      	streq	r3, [r2, #0]
 800c730:	460c      	movne	r4, r1
 800c732:	e7eb      	b.n	800c70c <_malloc_r+0x64>
 800c734:	460c      	mov	r4, r1
 800c736:	6849      	ldr	r1, [r1, #4]
 800c738:	e7cc      	b.n	800c6d4 <_malloc_r+0x2c>
 800c73a:	1cc4      	adds	r4, r0, #3
 800c73c:	f024 0403 	bic.w	r4, r4, #3
 800c740:	42a0      	cmp	r0, r4
 800c742:	d005      	beq.n	800c750 <_malloc_r+0xa8>
 800c744:	1a21      	subs	r1, r4, r0
 800c746:	4630      	mov	r0, r6
 800c748:	f000 fe4e 	bl	800d3e8 <_sbrk_r>
 800c74c:	3001      	adds	r0, #1
 800c74e:	d0cf      	beq.n	800c6f0 <_malloc_r+0x48>
 800c750:	6025      	str	r5, [r4, #0]
 800c752:	e7db      	b.n	800c70c <_malloc_r+0x64>
 800c754:	2000021c 	.word	0x2000021c
 800c758:	20000220 	.word	0x20000220

0800c75c <__cvt>:
 800c75c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c760:	ec55 4b10 	vmov	r4, r5, d0
 800c764:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c766:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c76a:	2d00      	cmp	r5, #0
 800c76c:	460e      	mov	r6, r1
 800c76e:	4691      	mov	r9, r2
 800c770:	4619      	mov	r1, r3
 800c772:	bfb8      	it	lt
 800c774:	4622      	movlt	r2, r4
 800c776:	462b      	mov	r3, r5
 800c778:	f027 0720 	bic.w	r7, r7, #32
 800c77c:	bfbb      	ittet	lt
 800c77e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c782:	461d      	movlt	r5, r3
 800c784:	2300      	movge	r3, #0
 800c786:	232d      	movlt	r3, #45	; 0x2d
 800c788:	bfb8      	it	lt
 800c78a:	4614      	movlt	r4, r2
 800c78c:	2f46      	cmp	r7, #70	; 0x46
 800c78e:	700b      	strb	r3, [r1, #0]
 800c790:	d004      	beq.n	800c79c <__cvt+0x40>
 800c792:	2f45      	cmp	r7, #69	; 0x45
 800c794:	d100      	bne.n	800c798 <__cvt+0x3c>
 800c796:	3601      	adds	r6, #1
 800c798:	2102      	movs	r1, #2
 800c79a:	e000      	b.n	800c79e <__cvt+0x42>
 800c79c:	2103      	movs	r1, #3
 800c79e:	ab03      	add	r3, sp, #12
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	ab02      	add	r3, sp, #8
 800c7a4:	9300      	str	r3, [sp, #0]
 800c7a6:	4632      	mov	r2, r6
 800c7a8:	4653      	mov	r3, sl
 800c7aa:	ec45 4b10 	vmov	d0, r4, r5
 800c7ae:	f001 fe03 	bl	800e3b8 <_dtoa_r>
 800c7b2:	2f47      	cmp	r7, #71	; 0x47
 800c7b4:	4680      	mov	r8, r0
 800c7b6:	d102      	bne.n	800c7be <__cvt+0x62>
 800c7b8:	f019 0f01 	tst.w	r9, #1
 800c7bc:	d026      	beq.n	800c80c <__cvt+0xb0>
 800c7be:	2f46      	cmp	r7, #70	; 0x46
 800c7c0:	eb08 0906 	add.w	r9, r8, r6
 800c7c4:	d111      	bne.n	800c7ea <__cvt+0x8e>
 800c7c6:	f898 3000 	ldrb.w	r3, [r8]
 800c7ca:	2b30      	cmp	r3, #48	; 0x30
 800c7cc:	d10a      	bne.n	800c7e4 <__cvt+0x88>
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	f7f4 f9af 	bl	8000b38 <__aeabi_dcmpeq>
 800c7da:	b918      	cbnz	r0, 800c7e4 <__cvt+0x88>
 800c7dc:	f1c6 0601 	rsb	r6, r6, #1
 800c7e0:	f8ca 6000 	str.w	r6, [sl]
 800c7e4:	f8da 3000 	ldr.w	r3, [sl]
 800c7e8:	4499      	add	r9, r3
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	f7f4 f9a1 	bl	8000b38 <__aeabi_dcmpeq>
 800c7f6:	b938      	cbnz	r0, 800c808 <__cvt+0xac>
 800c7f8:	2230      	movs	r2, #48	; 0x30
 800c7fa:	9b03      	ldr	r3, [sp, #12]
 800c7fc:	454b      	cmp	r3, r9
 800c7fe:	d205      	bcs.n	800c80c <__cvt+0xb0>
 800c800:	1c59      	adds	r1, r3, #1
 800c802:	9103      	str	r1, [sp, #12]
 800c804:	701a      	strb	r2, [r3, #0]
 800c806:	e7f8      	b.n	800c7fa <__cvt+0x9e>
 800c808:	f8cd 900c 	str.w	r9, [sp, #12]
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c810:	eba3 0308 	sub.w	r3, r3, r8
 800c814:	4640      	mov	r0, r8
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	b004      	add	sp, #16
 800c81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c81e <__exponent>:
 800c81e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c820:	2900      	cmp	r1, #0
 800c822:	4604      	mov	r4, r0
 800c824:	bfba      	itte	lt
 800c826:	4249      	neglt	r1, r1
 800c828:	232d      	movlt	r3, #45	; 0x2d
 800c82a:	232b      	movge	r3, #43	; 0x2b
 800c82c:	2909      	cmp	r1, #9
 800c82e:	f804 2b02 	strb.w	r2, [r4], #2
 800c832:	7043      	strb	r3, [r0, #1]
 800c834:	dd20      	ble.n	800c878 <__exponent+0x5a>
 800c836:	f10d 0307 	add.w	r3, sp, #7
 800c83a:	461f      	mov	r7, r3
 800c83c:	260a      	movs	r6, #10
 800c83e:	fb91 f5f6 	sdiv	r5, r1, r6
 800c842:	fb06 1115 	mls	r1, r6, r5, r1
 800c846:	3130      	adds	r1, #48	; 0x30
 800c848:	2d09      	cmp	r5, #9
 800c84a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c84e:	f103 32ff 	add.w	r2, r3, #4294967295
 800c852:	4629      	mov	r1, r5
 800c854:	dc09      	bgt.n	800c86a <__exponent+0x4c>
 800c856:	3130      	adds	r1, #48	; 0x30
 800c858:	3b02      	subs	r3, #2
 800c85a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c85e:	42bb      	cmp	r3, r7
 800c860:	4622      	mov	r2, r4
 800c862:	d304      	bcc.n	800c86e <__exponent+0x50>
 800c864:	1a10      	subs	r0, r2, r0
 800c866:	b003      	add	sp, #12
 800c868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c86a:	4613      	mov	r3, r2
 800c86c:	e7e7      	b.n	800c83e <__exponent+0x20>
 800c86e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c872:	f804 2b01 	strb.w	r2, [r4], #1
 800c876:	e7f2      	b.n	800c85e <__exponent+0x40>
 800c878:	2330      	movs	r3, #48	; 0x30
 800c87a:	4419      	add	r1, r3
 800c87c:	7083      	strb	r3, [r0, #2]
 800c87e:	1d02      	adds	r2, r0, #4
 800c880:	70c1      	strb	r1, [r0, #3]
 800c882:	e7ef      	b.n	800c864 <__exponent+0x46>

0800c884 <_printf_float>:
 800c884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c888:	b08d      	sub	sp, #52	; 0x34
 800c88a:	460c      	mov	r4, r1
 800c88c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c890:	4616      	mov	r6, r2
 800c892:	461f      	mov	r7, r3
 800c894:	4605      	mov	r5, r0
 800c896:	f002 fe6f 	bl	800f578 <_localeconv_r>
 800c89a:	6803      	ldr	r3, [r0, #0]
 800c89c:	9304      	str	r3, [sp, #16]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7f3 fcc8 	bl	8000234 <strlen>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8a8:	f8d8 3000 	ldr.w	r3, [r8]
 800c8ac:	9005      	str	r0, [sp, #20]
 800c8ae:	3307      	adds	r3, #7
 800c8b0:	f023 0307 	bic.w	r3, r3, #7
 800c8b4:	f103 0208 	add.w	r2, r3, #8
 800c8b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c8bc:	f8d4 b000 	ldr.w	fp, [r4]
 800c8c0:	f8c8 2000 	str.w	r2, [r8]
 800c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c8cc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c8d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8d4:	9307      	str	r3, [sp, #28]
 800c8d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8da:	f04f 32ff 	mov.w	r2, #4294967295
 800c8de:	4ba7      	ldr	r3, [pc, #668]	; (800cb7c <_printf_float+0x2f8>)
 800c8e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8e4:	f7f4 f95a 	bl	8000b9c <__aeabi_dcmpun>
 800c8e8:	bb70      	cbnz	r0, 800c948 <_printf_float+0xc4>
 800c8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ee:	4ba3      	ldr	r3, [pc, #652]	; (800cb7c <_printf_float+0x2f8>)
 800c8f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8f4:	f7f4 f934 	bl	8000b60 <__aeabi_dcmple>
 800c8f8:	bb30      	cbnz	r0, 800c948 <_printf_float+0xc4>
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4640      	mov	r0, r8
 800c900:	4649      	mov	r1, r9
 800c902:	f7f4 f923 	bl	8000b4c <__aeabi_dcmplt>
 800c906:	b110      	cbz	r0, 800c90e <_printf_float+0x8a>
 800c908:	232d      	movs	r3, #45	; 0x2d
 800c90a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c90e:	4a9c      	ldr	r2, [pc, #624]	; (800cb80 <_printf_float+0x2fc>)
 800c910:	4b9c      	ldr	r3, [pc, #624]	; (800cb84 <_printf_float+0x300>)
 800c912:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c916:	bf8c      	ite	hi
 800c918:	4690      	movhi	r8, r2
 800c91a:	4698      	movls	r8, r3
 800c91c:	2303      	movs	r3, #3
 800c91e:	f02b 0204 	bic.w	r2, fp, #4
 800c922:	6123      	str	r3, [r4, #16]
 800c924:	6022      	str	r2, [r4, #0]
 800c926:	f04f 0900 	mov.w	r9, #0
 800c92a:	9700      	str	r7, [sp, #0]
 800c92c:	4633      	mov	r3, r6
 800c92e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c930:	4621      	mov	r1, r4
 800c932:	4628      	mov	r0, r5
 800c934:	f000 f9e6 	bl	800cd04 <_printf_common>
 800c938:	3001      	adds	r0, #1
 800c93a:	f040 808d 	bne.w	800ca58 <_printf_float+0x1d4>
 800c93e:	f04f 30ff 	mov.w	r0, #4294967295
 800c942:	b00d      	add	sp, #52	; 0x34
 800c944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c948:	4642      	mov	r2, r8
 800c94a:	464b      	mov	r3, r9
 800c94c:	4640      	mov	r0, r8
 800c94e:	4649      	mov	r1, r9
 800c950:	f7f4 f924 	bl	8000b9c <__aeabi_dcmpun>
 800c954:	b110      	cbz	r0, 800c95c <_printf_float+0xd8>
 800c956:	4a8c      	ldr	r2, [pc, #560]	; (800cb88 <_printf_float+0x304>)
 800c958:	4b8c      	ldr	r3, [pc, #560]	; (800cb8c <_printf_float+0x308>)
 800c95a:	e7da      	b.n	800c912 <_printf_float+0x8e>
 800c95c:	6861      	ldr	r1, [r4, #4]
 800c95e:	1c4b      	adds	r3, r1, #1
 800c960:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c964:	a80a      	add	r0, sp, #40	; 0x28
 800c966:	d13e      	bne.n	800c9e6 <_printf_float+0x162>
 800c968:	2306      	movs	r3, #6
 800c96a:	6063      	str	r3, [r4, #4]
 800c96c:	2300      	movs	r3, #0
 800c96e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c972:	ab09      	add	r3, sp, #36	; 0x24
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	ec49 8b10 	vmov	d0, r8, r9
 800c97a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c97e:	6022      	str	r2, [r4, #0]
 800c980:	f8cd a004 	str.w	sl, [sp, #4]
 800c984:	6861      	ldr	r1, [r4, #4]
 800c986:	4628      	mov	r0, r5
 800c988:	f7ff fee8 	bl	800c75c <__cvt>
 800c98c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c990:	2b47      	cmp	r3, #71	; 0x47
 800c992:	4680      	mov	r8, r0
 800c994:	d109      	bne.n	800c9aa <_printf_float+0x126>
 800c996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c998:	1cd8      	adds	r0, r3, #3
 800c99a:	db02      	blt.n	800c9a2 <_printf_float+0x11e>
 800c99c:	6862      	ldr	r2, [r4, #4]
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	dd47      	ble.n	800ca32 <_printf_float+0x1ae>
 800c9a2:	f1aa 0a02 	sub.w	sl, sl, #2
 800c9a6:	fa5f fa8a 	uxtb.w	sl, sl
 800c9aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c9ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9b0:	d824      	bhi.n	800c9fc <_printf_float+0x178>
 800c9b2:	3901      	subs	r1, #1
 800c9b4:	4652      	mov	r2, sl
 800c9b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9ba:	9109      	str	r1, [sp, #36]	; 0x24
 800c9bc:	f7ff ff2f 	bl	800c81e <__exponent>
 800c9c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9c2:	1813      	adds	r3, r2, r0
 800c9c4:	2a01      	cmp	r2, #1
 800c9c6:	4681      	mov	r9, r0
 800c9c8:	6123      	str	r3, [r4, #16]
 800c9ca:	dc02      	bgt.n	800c9d2 <_printf_float+0x14e>
 800c9cc:	6822      	ldr	r2, [r4, #0]
 800c9ce:	07d1      	lsls	r1, r2, #31
 800c9d0:	d501      	bpl.n	800c9d6 <_printf_float+0x152>
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	6123      	str	r3, [r4, #16]
 800c9d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0a5      	beq.n	800c92a <_printf_float+0xa6>
 800c9de:	232d      	movs	r3, #45	; 0x2d
 800c9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e4:	e7a1      	b.n	800c92a <_printf_float+0xa6>
 800c9e6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c9ea:	f000 8177 	beq.w	800ccdc <_printf_float+0x458>
 800c9ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c9f2:	d1bb      	bne.n	800c96c <_printf_float+0xe8>
 800c9f4:	2900      	cmp	r1, #0
 800c9f6:	d1b9      	bne.n	800c96c <_printf_float+0xe8>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e7b6      	b.n	800c96a <_printf_float+0xe6>
 800c9fc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ca00:	d119      	bne.n	800ca36 <_printf_float+0x1b2>
 800ca02:	2900      	cmp	r1, #0
 800ca04:	6863      	ldr	r3, [r4, #4]
 800ca06:	dd0c      	ble.n	800ca22 <_printf_float+0x19e>
 800ca08:	6121      	str	r1, [r4, #16]
 800ca0a:	b913      	cbnz	r3, 800ca12 <_printf_float+0x18e>
 800ca0c:	6822      	ldr	r2, [r4, #0]
 800ca0e:	07d2      	lsls	r2, r2, #31
 800ca10:	d502      	bpl.n	800ca18 <_printf_float+0x194>
 800ca12:	3301      	adds	r3, #1
 800ca14:	440b      	add	r3, r1
 800ca16:	6123      	str	r3, [r4, #16]
 800ca18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca1a:	65a3      	str	r3, [r4, #88]	; 0x58
 800ca1c:	f04f 0900 	mov.w	r9, #0
 800ca20:	e7d9      	b.n	800c9d6 <_printf_float+0x152>
 800ca22:	b913      	cbnz	r3, 800ca2a <_printf_float+0x1a6>
 800ca24:	6822      	ldr	r2, [r4, #0]
 800ca26:	07d0      	lsls	r0, r2, #31
 800ca28:	d501      	bpl.n	800ca2e <_printf_float+0x1aa>
 800ca2a:	3302      	adds	r3, #2
 800ca2c:	e7f3      	b.n	800ca16 <_printf_float+0x192>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e7f1      	b.n	800ca16 <_printf_float+0x192>
 800ca32:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ca36:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	db05      	blt.n	800ca4a <_printf_float+0x1c6>
 800ca3e:	6822      	ldr	r2, [r4, #0]
 800ca40:	6123      	str	r3, [r4, #16]
 800ca42:	07d1      	lsls	r1, r2, #31
 800ca44:	d5e8      	bpl.n	800ca18 <_printf_float+0x194>
 800ca46:	3301      	adds	r3, #1
 800ca48:	e7e5      	b.n	800ca16 <_printf_float+0x192>
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	bfd4      	ite	le
 800ca4e:	f1c3 0302 	rsble	r3, r3, #2
 800ca52:	2301      	movgt	r3, #1
 800ca54:	4413      	add	r3, r2
 800ca56:	e7de      	b.n	800ca16 <_printf_float+0x192>
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	055a      	lsls	r2, r3, #21
 800ca5c:	d407      	bmi.n	800ca6e <_printf_float+0x1ea>
 800ca5e:	6923      	ldr	r3, [r4, #16]
 800ca60:	4642      	mov	r2, r8
 800ca62:	4631      	mov	r1, r6
 800ca64:	4628      	mov	r0, r5
 800ca66:	47b8      	blx	r7
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d12b      	bne.n	800cac4 <_printf_float+0x240>
 800ca6c:	e767      	b.n	800c93e <_printf_float+0xba>
 800ca6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ca72:	f240 80dc 	bls.w	800cc2e <_printf_float+0x3aa>
 800ca76:	2200      	movs	r2, #0
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca7e:	f7f4 f85b 	bl	8000b38 <__aeabi_dcmpeq>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d033      	beq.n	800caee <_printf_float+0x26a>
 800ca86:	2301      	movs	r3, #1
 800ca88:	4a41      	ldr	r2, [pc, #260]	; (800cb90 <_printf_float+0x30c>)
 800ca8a:	4631      	mov	r1, r6
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	47b8      	blx	r7
 800ca90:	3001      	adds	r0, #1
 800ca92:	f43f af54 	beq.w	800c93e <_printf_float+0xba>
 800ca96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	db02      	blt.n	800caa4 <_printf_float+0x220>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	07d8      	lsls	r0, r3, #31
 800caa2:	d50f      	bpl.n	800cac4 <_printf_float+0x240>
 800caa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800caa8:	4631      	mov	r1, r6
 800caaa:	4628      	mov	r0, r5
 800caac:	47b8      	blx	r7
 800caae:	3001      	adds	r0, #1
 800cab0:	f43f af45 	beq.w	800c93e <_printf_float+0xba>
 800cab4:	f04f 0800 	mov.w	r8, #0
 800cab8:	f104 091a 	add.w	r9, r4, #26
 800cabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cabe:	3b01      	subs	r3, #1
 800cac0:	4543      	cmp	r3, r8
 800cac2:	dc09      	bgt.n	800cad8 <_printf_float+0x254>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	079b      	lsls	r3, r3, #30
 800cac8:	f100 8103 	bmi.w	800ccd2 <_printf_float+0x44e>
 800cacc:	68e0      	ldr	r0, [r4, #12]
 800cace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cad0:	4298      	cmp	r0, r3
 800cad2:	bfb8      	it	lt
 800cad4:	4618      	movlt	r0, r3
 800cad6:	e734      	b.n	800c942 <_printf_float+0xbe>
 800cad8:	2301      	movs	r3, #1
 800cada:	464a      	mov	r2, r9
 800cadc:	4631      	mov	r1, r6
 800cade:	4628      	mov	r0, r5
 800cae0:	47b8      	blx	r7
 800cae2:	3001      	adds	r0, #1
 800cae4:	f43f af2b 	beq.w	800c93e <_printf_float+0xba>
 800cae8:	f108 0801 	add.w	r8, r8, #1
 800caec:	e7e6      	b.n	800cabc <_printf_float+0x238>
 800caee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dc2b      	bgt.n	800cb4c <_printf_float+0x2c8>
 800caf4:	2301      	movs	r3, #1
 800caf6:	4a26      	ldr	r2, [pc, #152]	; (800cb90 <_printf_float+0x30c>)
 800caf8:	4631      	mov	r1, r6
 800cafa:	4628      	mov	r0, r5
 800cafc:	47b8      	blx	r7
 800cafe:	3001      	adds	r0, #1
 800cb00:	f43f af1d 	beq.w	800c93e <_printf_float+0xba>
 800cb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb06:	b923      	cbnz	r3, 800cb12 <_printf_float+0x28e>
 800cb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb0a:	b913      	cbnz	r3, 800cb12 <_printf_float+0x28e>
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	07d9      	lsls	r1, r3, #31
 800cb10:	d5d8      	bpl.n	800cac4 <_printf_float+0x240>
 800cb12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb16:	4631      	mov	r1, r6
 800cb18:	4628      	mov	r0, r5
 800cb1a:	47b8      	blx	r7
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	f43f af0e 	beq.w	800c93e <_printf_float+0xba>
 800cb22:	f04f 0900 	mov.w	r9, #0
 800cb26:	f104 0a1a 	add.w	sl, r4, #26
 800cb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2c:	425b      	negs	r3, r3
 800cb2e:	454b      	cmp	r3, r9
 800cb30:	dc01      	bgt.n	800cb36 <_printf_float+0x2b2>
 800cb32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb34:	e794      	b.n	800ca60 <_printf_float+0x1dc>
 800cb36:	2301      	movs	r3, #1
 800cb38:	4652      	mov	r2, sl
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	47b8      	blx	r7
 800cb40:	3001      	adds	r0, #1
 800cb42:	f43f aefc 	beq.w	800c93e <_printf_float+0xba>
 800cb46:	f109 0901 	add.w	r9, r9, #1
 800cb4a:	e7ee      	b.n	800cb2a <_printf_float+0x2a6>
 800cb4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb50:	429a      	cmp	r2, r3
 800cb52:	bfa8      	it	ge
 800cb54:	461a      	movge	r2, r3
 800cb56:	2a00      	cmp	r2, #0
 800cb58:	4691      	mov	r9, r2
 800cb5a:	dd07      	ble.n	800cb6c <_printf_float+0x2e8>
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	4631      	mov	r1, r6
 800cb60:	4642      	mov	r2, r8
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b8      	blx	r7
 800cb66:	3001      	adds	r0, #1
 800cb68:	f43f aee9 	beq.w	800c93e <_printf_float+0xba>
 800cb6c:	f104 031a 	add.w	r3, r4, #26
 800cb70:	f04f 0b00 	mov.w	fp, #0
 800cb74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb78:	9306      	str	r3, [sp, #24]
 800cb7a:	e015      	b.n	800cba8 <_printf_float+0x324>
 800cb7c:	7fefffff 	.word	0x7fefffff
 800cb80:	080115be 	.word	0x080115be
 800cb84:	080115ba 	.word	0x080115ba
 800cb88:	080115c6 	.word	0x080115c6
 800cb8c:	080115c2 	.word	0x080115c2
 800cb90:	0801187b 	.word	0x0801187b
 800cb94:	2301      	movs	r3, #1
 800cb96:	9a06      	ldr	r2, [sp, #24]
 800cb98:	4631      	mov	r1, r6
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	47b8      	blx	r7
 800cb9e:	3001      	adds	r0, #1
 800cba0:	f43f aecd 	beq.w	800c93e <_printf_float+0xba>
 800cba4:	f10b 0b01 	add.w	fp, fp, #1
 800cba8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cbac:	ebaa 0309 	sub.w	r3, sl, r9
 800cbb0:	455b      	cmp	r3, fp
 800cbb2:	dcef      	bgt.n	800cb94 <_printf_float+0x310>
 800cbb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	44d0      	add	r8, sl
 800cbbc:	db15      	blt.n	800cbea <_printf_float+0x366>
 800cbbe:	6823      	ldr	r3, [r4, #0]
 800cbc0:	07da      	lsls	r2, r3, #31
 800cbc2:	d412      	bmi.n	800cbea <_printf_float+0x366>
 800cbc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbc8:	eba3 020a 	sub.w	r2, r3, sl
 800cbcc:	eba3 0a01 	sub.w	sl, r3, r1
 800cbd0:	4592      	cmp	sl, r2
 800cbd2:	bfa8      	it	ge
 800cbd4:	4692      	movge	sl, r2
 800cbd6:	f1ba 0f00 	cmp.w	sl, #0
 800cbda:	dc0e      	bgt.n	800cbfa <_printf_float+0x376>
 800cbdc:	f04f 0800 	mov.w	r8, #0
 800cbe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbe4:	f104 091a 	add.w	r9, r4, #26
 800cbe8:	e019      	b.n	800cc1e <_printf_float+0x39a>
 800cbea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbee:	4631      	mov	r1, r6
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b8      	blx	r7
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d1e5      	bne.n	800cbc4 <_printf_float+0x340>
 800cbf8:	e6a1      	b.n	800c93e <_printf_float+0xba>
 800cbfa:	4653      	mov	r3, sl
 800cbfc:	4642      	mov	r2, r8
 800cbfe:	4631      	mov	r1, r6
 800cc00:	4628      	mov	r0, r5
 800cc02:	47b8      	blx	r7
 800cc04:	3001      	adds	r0, #1
 800cc06:	d1e9      	bne.n	800cbdc <_printf_float+0x358>
 800cc08:	e699      	b.n	800c93e <_printf_float+0xba>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	464a      	mov	r2, r9
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4628      	mov	r0, r5
 800cc12:	47b8      	blx	r7
 800cc14:	3001      	adds	r0, #1
 800cc16:	f43f ae92 	beq.w	800c93e <_printf_float+0xba>
 800cc1a:	f108 0801 	add.w	r8, r8, #1
 800cc1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc22:	1a9b      	subs	r3, r3, r2
 800cc24:	eba3 030a 	sub.w	r3, r3, sl
 800cc28:	4543      	cmp	r3, r8
 800cc2a:	dcee      	bgt.n	800cc0a <_printf_float+0x386>
 800cc2c:	e74a      	b.n	800cac4 <_printf_float+0x240>
 800cc2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc30:	2a01      	cmp	r2, #1
 800cc32:	dc01      	bgt.n	800cc38 <_printf_float+0x3b4>
 800cc34:	07db      	lsls	r3, r3, #31
 800cc36:	d53a      	bpl.n	800ccae <_printf_float+0x42a>
 800cc38:	2301      	movs	r3, #1
 800cc3a:	4642      	mov	r2, r8
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	4628      	mov	r0, r5
 800cc40:	47b8      	blx	r7
 800cc42:	3001      	adds	r0, #1
 800cc44:	f43f ae7b 	beq.w	800c93e <_printf_float+0xba>
 800cc48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc4c:	4631      	mov	r1, r6
 800cc4e:	4628      	mov	r0, r5
 800cc50:	47b8      	blx	r7
 800cc52:	3001      	adds	r0, #1
 800cc54:	f108 0801 	add.w	r8, r8, #1
 800cc58:	f43f ae71 	beq.w	800c93e <_printf_float+0xba>
 800cc5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f103 3aff 	add.w	sl, r3, #4294967295
 800cc64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f7f3 ff65 	bl	8000b38 <__aeabi_dcmpeq>
 800cc6e:	b9c8      	cbnz	r0, 800cca4 <_printf_float+0x420>
 800cc70:	4653      	mov	r3, sl
 800cc72:	4642      	mov	r2, r8
 800cc74:	4631      	mov	r1, r6
 800cc76:	4628      	mov	r0, r5
 800cc78:	47b8      	blx	r7
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	d10e      	bne.n	800cc9c <_printf_float+0x418>
 800cc7e:	e65e      	b.n	800c93e <_printf_float+0xba>
 800cc80:	2301      	movs	r3, #1
 800cc82:	4652      	mov	r2, sl
 800cc84:	4631      	mov	r1, r6
 800cc86:	4628      	mov	r0, r5
 800cc88:	47b8      	blx	r7
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	f43f ae57 	beq.w	800c93e <_printf_float+0xba>
 800cc90:	f108 0801 	add.w	r8, r8, #1
 800cc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc96:	3b01      	subs	r3, #1
 800cc98:	4543      	cmp	r3, r8
 800cc9a:	dcf1      	bgt.n	800cc80 <_printf_float+0x3fc>
 800cc9c:	464b      	mov	r3, r9
 800cc9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cca2:	e6de      	b.n	800ca62 <_printf_float+0x1de>
 800cca4:	f04f 0800 	mov.w	r8, #0
 800cca8:	f104 0a1a 	add.w	sl, r4, #26
 800ccac:	e7f2      	b.n	800cc94 <_printf_float+0x410>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e7df      	b.n	800cc72 <_printf_float+0x3ee>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	464a      	mov	r2, r9
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4628      	mov	r0, r5
 800ccba:	47b8      	blx	r7
 800ccbc:	3001      	adds	r0, #1
 800ccbe:	f43f ae3e 	beq.w	800c93e <_printf_float+0xba>
 800ccc2:	f108 0801 	add.w	r8, r8, #1
 800ccc6:	68e3      	ldr	r3, [r4, #12]
 800ccc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccca:	1a9b      	subs	r3, r3, r2
 800cccc:	4543      	cmp	r3, r8
 800ccce:	dcf0      	bgt.n	800ccb2 <_printf_float+0x42e>
 800ccd0:	e6fc      	b.n	800cacc <_printf_float+0x248>
 800ccd2:	f04f 0800 	mov.w	r8, #0
 800ccd6:	f104 0919 	add.w	r9, r4, #25
 800ccda:	e7f4      	b.n	800ccc6 <_printf_float+0x442>
 800ccdc:	2900      	cmp	r1, #0
 800ccde:	f43f ae8b 	beq.w	800c9f8 <_printf_float+0x174>
 800cce2:	2300      	movs	r3, #0
 800cce4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cce8:	ab09      	add	r3, sp, #36	; 0x24
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	ec49 8b10 	vmov	d0, r8, r9
 800ccf0:	6022      	str	r2, [r4, #0]
 800ccf2:	f8cd a004 	str.w	sl, [sp, #4]
 800ccf6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	f7ff fd2e 	bl	800c75c <__cvt>
 800cd00:	4680      	mov	r8, r0
 800cd02:	e648      	b.n	800c996 <_printf_float+0x112>

0800cd04 <_printf_common>:
 800cd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd08:	4691      	mov	r9, r2
 800cd0a:	461f      	mov	r7, r3
 800cd0c:	688a      	ldr	r2, [r1, #8]
 800cd0e:	690b      	ldr	r3, [r1, #16]
 800cd10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd14:	4293      	cmp	r3, r2
 800cd16:	bfb8      	it	lt
 800cd18:	4613      	movlt	r3, r2
 800cd1a:	f8c9 3000 	str.w	r3, [r9]
 800cd1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd22:	4606      	mov	r6, r0
 800cd24:	460c      	mov	r4, r1
 800cd26:	b112      	cbz	r2, 800cd2e <_printf_common+0x2a>
 800cd28:	3301      	adds	r3, #1
 800cd2a:	f8c9 3000 	str.w	r3, [r9]
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	0699      	lsls	r1, r3, #26
 800cd32:	bf42      	ittt	mi
 800cd34:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cd38:	3302      	addmi	r3, #2
 800cd3a:	f8c9 3000 	strmi.w	r3, [r9]
 800cd3e:	6825      	ldr	r5, [r4, #0]
 800cd40:	f015 0506 	ands.w	r5, r5, #6
 800cd44:	d107      	bne.n	800cd56 <_printf_common+0x52>
 800cd46:	f104 0a19 	add.w	sl, r4, #25
 800cd4a:	68e3      	ldr	r3, [r4, #12]
 800cd4c:	f8d9 2000 	ldr.w	r2, [r9]
 800cd50:	1a9b      	subs	r3, r3, r2
 800cd52:	42ab      	cmp	r3, r5
 800cd54:	dc28      	bgt.n	800cda8 <_printf_common+0xa4>
 800cd56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cd5a:	6822      	ldr	r2, [r4, #0]
 800cd5c:	3300      	adds	r3, #0
 800cd5e:	bf18      	it	ne
 800cd60:	2301      	movne	r3, #1
 800cd62:	0692      	lsls	r2, r2, #26
 800cd64:	d42d      	bmi.n	800cdc2 <_printf_common+0xbe>
 800cd66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd6a:	4639      	mov	r1, r7
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	47c0      	blx	r8
 800cd70:	3001      	adds	r0, #1
 800cd72:	d020      	beq.n	800cdb6 <_printf_common+0xb2>
 800cd74:	6823      	ldr	r3, [r4, #0]
 800cd76:	68e5      	ldr	r5, [r4, #12]
 800cd78:	f8d9 2000 	ldr.w	r2, [r9]
 800cd7c:	f003 0306 	and.w	r3, r3, #6
 800cd80:	2b04      	cmp	r3, #4
 800cd82:	bf08      	it	eq
 800cd84:	1aad      	subeq	r5, r5, r2
 800cd86:	68a3      	ldr	r3, [r4, #8]
 800cd88:	6922      	ldr	r2, [r4, #16]
 800cd8a:	bf0c      	ite	eq
 800cd8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd90:	2500      	movne	r5, #0
 800cd92:	4293      	cmp	r3, r2
 800cd94:	bfc4      	itt	gt
 800cd96:	1a9b      	subgt	r3, r3, r2
 800cd98:	18ed      	addgt	r5, r5, r3
 800cd9a:	f04f 0900 	mov.w	r9, #0
 800cd9e:	341a      	adds	r4, #26
 800cda0:	454d      	cmp	r5, r9
 800cda2:	d11a      	bne.n	800cdda <_printf_common+0xd6>
 800cda4:	2000      	movs	r0, #0
 800cda6:	e008      	b.n	800cdba <_printf_common+0xb6>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	4652      	mov	r2, sl
 800cdac:	4639      	mov	r1, r7
 800cdae:	4630      	mov	r0, r6
 800cdb0:	47c0      	blx	r8
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d103      	bne.n	800cdbe <_printf_common+0xba>
 800cdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdbe:	3501      	adds	r5, #1
 800cdc0:	e7c3      	b.n	800cd4a <_printf_common+0x46>
 800cdc2:	18e1      	adds	r1, r4, r3
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	2030      	movs	r0, #48	; 0x30
 800cdc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdcc:	4422      	add	r2, r4
 800cdce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdd6:	3302      	adds	r3, #2
 800cdd8:	e7c5      	b.n	800cd66 <_printf_common+0x62>
 800cdda:	2301      	movs	r3, #1
 800cddc:	4622      	mov	r2, r4
 800cdde:	4639      	mov	r1, r7
 800cde0:	4630      	mov	r0, r6
 800cde2:	47c0      	blx	r8
 800cde4:	3001      	adds	r0, #1
 800cde6:	d0e6      	beq.n	800cdb6 <_printf_common+0xb2>
 800cde8:	f109 0901 	add.w	r9, r9, #1
 800cdec:	e7d8      	b.n	800cda0 <_printf_common+0x9c>
	...

0800cdf0 <_printf_i>:
 800cdf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdf4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	7e09      	ldrb	r1, [r1, #24]
 800cdfc:	b085      	sub	sp, #20
 800cdfe:	296e      	cmp	r1, #110	; 0x6e
 800ce00:	4617      	mov	r7, r2
 800ce02:	4606      	mov	r6, r0
 800ce04:	4698      	mov	r8, r3
 800ce06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce08:	f000 80b3 	beq.w	800cf72 <_printf_i+0x182>
 800ce0c:	d822      	bhi.n	800ce54 <_printf_i+0x64>
 800ce0e:	2963      	cmp	r1, #99	; 0x63
 800ce10:	d036      	beq.n	800ce80 <_printf_i+0x90>
 800ce12:	d80a      	bhi.n	800ce2a <_printf_i+0x3a>
 800ce14:	2900      	cmp	r1, #0
 800ce16:	f000 80b9 	beq.w	800cf8c <_printf_i+0x19c>
 800ce1a:	2958      	cmp	r1, #88	; 0x58
 800ce1c:	f000 8083 	beq.w	800cf26 <_printf_i+0x136>
 800ce20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ce28:	e032      	b.n	800ce90 <_printf_i+0xa0>
 800ce2a:	2964      	cmp	r1, #100	; 0x64
 800ce2c:	d001      	beq.n	800ce32 <_printf_i+0x42>
 800ce2e:	2969      	cmp	r1, #105	; 0x69
 800ce30:	d1f6      	bne.n	800ce20 <_printf_i+0x30>
 800ce32:	6820      	ldr	r0, [r4, #0]
 800ce34:	6813      	ldr	r3, [r2, #0]
 800ce36:	0605      	lsls	r5, r0, #24
 800ce38:	f103 0104 	add.w	r1, r3, #4
 800ce3c:	d52a      	bpl.n	800ce94 <_printf_i+0xa4>
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6011      	str	r1, [r2, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	da03      	bge.n	800ce4e <_printf_i+0x5e>
 800ce46:	222d      	movs	r2, #45	; 0x2d
 800ce48:	425b      	negs	r3, r3
 800ce4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ce4e:	486f      	ldr	r0, [pc, #444]	; (800d00c <_printf_i+0x21c>)
 800ce50:	220a      	movs	r2, #10
 800ce52:	e039      	b.n	800cec8 <_printf_i+0xd8>
 800ce54:	2973      	cmp	r1, #115	; 0x73
 800ce56:	f000 809d 	beq.w	800cf94 <_printf_i+0x1a4>
 800ce5a:	d808      	bhi.n	800ce6e <_printf_i+0x7e>
 800ce5c:	296f      	cmp	r1, #111	; 0x6f
 800ce5e:	d020      	beq.n	800cea2 <_printf_i+0xb2>
 800ce60:	2970      	cmp	r1, #112	; 0x70
 800ce62:	d1dd      	bne.n	800ce20 <_printf_i+0x30>
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	f043 0320 	orr.w	r3, r3, #32
 800ce6a:	6023      	str	r3, [r4, #0]
 800ce6c:	e003      	b.n	800ce76 <_printf_i+0x86>
 800ce6e:	2975      	cmp	r1, #117	; 0x75
 800ce70:	d017      	beq.n	800cea2 <_printf_i+0xb2>
 800ce72:	2978      	cmp	r1, #120	; 0x78
 800ce74:	d1d4      	bne.n	800ce20 <_printf_i+0x30>
 800ce76:	2378      	movs	r3, #120	; 0x78
 800ce78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce7c:	4864      	ldr	r0, [pc, #400]	; (800d010 <_printf_i+0x220>)
 800ce7e:	e055      	b.n	800cf2c <_printf_i+0x13c>
 800ce80:	6813      	ldr	r3, [r2, #0]
 800ce82:	1d19      	adds	r1, r3, #4
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6011      	str	r1, [r2, #0]
 800ce88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce90:	2301      	movs	r3, #1
 800ce92:	e08c      	b.n	800cfae <_printf_i+0x1be>
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6011      	str	r1, [r2, #0]
 800ce98:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce9c:	bf18      	it	ne
 800ce9e:	b21b      	sxthne	r3, r3
 800cea0:	e7cf      	b.n	800ce42 <_printf_i+0x52>
 800cea2:	6813      	ldr	r3, [r2, #0]
 800cea4:	6825      	ldr	r5, [r4, #0]
 800cea6:	1d18      	adds	r0, r3, #4
 800cea8:	6010      	str	r0, [r2, #0]
 800ceaa:	0628      	lsls	r0, r5, #24
 800ceac:	d501      	bpl.n	800ceb2 <_printf_i+0xc2>
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	e002      	b.n	800ceb8 <_printf_i+0xc8>
 800ceb2:	0668      	lsls	r0, r5, #25
 800ceb4:	d5fb      	bpl.n	800ceae <_printf_i+0xbe>
 800ceb6:	881b      	ldrh	r3, [r3, #0]
 800ceb8:	4854      	ldr	r0, [pc, #336]	; (800d00c <_printf_i+0x21c>)
 800ceba:	296f      	cmp	r1, #111	; 0x6f
 800cebc:	bf14      	ite	ne
 800cebe:	220a      	movne	r2, #10
 800cec0:	2208      	moveq	r2, #8
 800cec2:	2100      	movs	r1, #0
 800cec4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cec8:	6865      	ldr	r5, [r4, #4]
 800ceca:	60a5      	str	r5, [r4, #8]
 800cecc:	2d00      	cmp	r5, #0
 800cece:	f2c0 8095 	blt.w	800cffc <_printf_i+0x20c>
 800ced2:	6821      	ldr	r1, [r4, #0]
 800ced4:	f021 0104 	bic.w	r1, r1, #4
 800ced8:	6021      	str	r1, [r4, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d13d      	bne.n	800cf5a <_printf_i+0x16a>
 800cede:	2d00      	cmp	r5, #0
 800cee0:	f040 808e 	bne.w	800d000 <_printf_i+0x210>
 800cee4:	4665      	mov	r5, ip
 800cee6:	2a08      	cmp	r2, #8
 800cee8:	d10b      	bne.n	800cf02 <_printf_i+0x112>
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	07db      	lsls	r3, r3, #31
 800ceee:	d508      	bpl.n	800cf02 <_printf_i+0x112>
 800cef0:	6923      	ldr	r3, [r4, #16]
 800cef2:	6862      	ldr	r2, [r4, #4]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	bfde      	ittt	le
 800cef8:	2330      	movle	r3, #48	; 0x30
 800cefa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cefe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf02:	ebac 0305 	sub.w	r3, ip, r5
 800cf06:	6123      	str	r3, [r4, #16]
 800cf08:	f8cd 8000 	str.w	r8, [sp]
 800cf0c:	463b      	mov	r3, r7
 800cf0e:	aa03      	add	r2, sp, #12
 800cf10:	4621      	mov	r1, r4
 800cf12:	4630      	mov	r0, r6
 800cf14:	f7ff fef6 	bl	800cd04 <_printf_common>
 800cf18:	3001      	adds	r0, #1
 800cf1a:	d14d      	bne.n	800cfb8 <_printf_i+0x1c8>
 800cf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf20:	b005      	add	sp, #20
 800cf22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf26:	4839      	ldr	r0, [pc, #228]	; (800d00c <_printf_i+0x21c>)
 800cf28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cf2c:	6813      	ldr	r3, [r2, #0]
 800cf2e:	6821      	ldr	r1, [r4, #0]
 800cf30:	1d1d      	adds	r5, r3, #4
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	6015      	str	r5, [r2, #0]
 800cf36:	060a      	lsls	r2, r1, #24
 800cf38:	d50b      	bpl.n	800cf52 <_printf_i+0x162>
 800cf3a:	07ca      	lsls	r2, r1, #31
 800cf3c:	bf44      	itt	mi
 800cf3e:	f041 0120 	orrmi.w	r1, r1, #32
 800cf42:	6021      	strmi	r1, [r4, #0]
 800cf44:	b91b      	cbnz	r3, 800cf4e <_printf_i+0x15e>
 800cf46:	6822      	ldr	r2, [r4, #0]
 800cf48:	f022 0220 	bic.w	r2, r2, #32
 800cf4c:	6022      	str	r2, [r4, #0]
 800cf4e:	2210      	movs	r2, #16
 800cf50:	e7b7      	b.n	800cec2 <_printf_i+0xd2>
 800cf52:	064d      	lsls	r5, r1, #25
 800cf54:	bf48      	it	mi
 800cf56:	b29b      	uxthmi	r3, r3
 800cf58:	e7ef      	b.n	800cf3a <_printf_i+0x14a>
 800cf5a:	4665      	mov	r5, ip
 800cf5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf60:	fb02 3311 	mls	r3, r2, r1, r3
 800cf64:	5cc3      	ldrb	r3, [r0, r3]
 800cf66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	2900      	cmp	r1, #0
 800cf6e:	d1f5      	bne.n	800cf5c <_printf_i+0x16c>
 800cf70:	e7b9      	b.n	800cee6 <_printf_i+0xf6>
 800cf72:	6813      	ldr	r3, [r2, #0]
 800cf74:	6825      	ldr	r5, [r4, #0]
 800cf76:	6961      	ldr	r1, [r4, #20]
 800cf78:	1d18      	adds	r0, r3, #4
 800cf7a:	6010      	str	r0, [r2, #0]
 800cf7c:	0628      	lsls	r0, r5, #24
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	d501      	bpl.n	800cf86 <_printf_i+0x196>
 800cf82:	6019      	str	r1, [r3, #0]
 800cf84:	e002      	b.n	800cf8c <_printf_i+0x19c>
 800cf86:	066a      	lsls	r2, r5, #25
 800cf88:	d5fb      	bpl.n	800cf82 <_printf_i+0x192>
 800cf8a:	8019      	strh	r1, [r3, #0]
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	6123      	str	r3, [r4, #16]
 800cf90:	4665      	mov	r5, ip
 800cf92:	e7b9      	b.n	800cf08 <_printf_i+0x118>
 800cf94:	6813      	ldr	r3, [r2, #0]
 800cf96:	1d19      	adds	r1, r3, #4
 800cf98:	6011      	str	r1, [r2, #0]
 800cf9a:	681d      	ldr	r5, [r3, #0]
 800cf9c:	6862      	ldr	r2, [r4, #4]
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f7f3 f955 	bl	8000250 <memchr>
 800cfa6:	b108      	cbz	r0, 800cfac <_printf_i+0x1bc>
 800cfa8:	1b40      	subs	r0, r0, r5
 800cfaa:	6060      	str	r0, [r4, #4]
 800cfac:	6863      	ldr	r3, [r4, #4]
 800cfae:	6123      	str	r3, [r4, #16]
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfb6:	e7a7      	b.n	800cf08 <_printf_i+0x118>
 800cfb8:	6923      	ldr	r3, [r4, #16]
 800cfba:	462a      	mov	r2, r5
 800cfbc:	4639      	mov	r1, r7
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	47c0      	blx	r8
 800cfc2:	3001      	adds	r0, #1
 800cfc4:	d0aa      	beq.n	800cf1c <_printf_i+0x12c>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	079b      	lsls	r3, r3, #30
 800cfca:	d413      	bmi.n	800cff4 <_printf_i+0x204>
 800cfcc:	68e0      	ldr	r0, [r4, #12]
 800cfce:	9b03      	ldr	r3, [sp, #12]
 800cfd0:	4298      	cmp	r0, r3
 800cfd2:	bfb8      	it	lt
 800cfd4:	4618      	movlt	r0, r3
 800cfd6:	e7a3      	b.n	800cf20 <_printf_i+0x130>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	464a      	mov	r2, r9
 800cfdc:	4639      	mov	r1, r7
 800cfde:	4630      	mov	r0, r6
 800cfe0:	47c0      	blx	r8
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	d09a      	beq.n	800cf1c <_printf_i+0x12c>
 800cfe6:	3501      	adds	r5, #1
 800cfe8:	68e3      	ldr	r3, [r4, #12]
 800cfea:	9a03      	ldr	r2, [sp, #12]
 800cfec:	1a9b      	subs	r3, r3, r2
 800cfee:	42ab      	cmp	r3, r5
 800cff0:	dcf2      	bgt.n	800cfd8 <_printf_i+0x1e8>
 800cff2:	e7eb      	b.n	800cfcc <_printf_i+0x1dc>
 800cff4:	2500      	movs	r5, #0
 800cff6:	f104 0919 	add.w	r9, r4, #25
 800cffa:	e7f5      	b.n	800cfe8 <_printf_i+0x1f8>
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1ac      	bne.n	800cf5a <_printf_i+0x16a>
 800d000:	7803      	ldrb	r3, [r0, #0]
 800d002:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d006:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d00a:	e76c      	b.n	800cee6 <_printf_i+0xf6>
 800d00c:	080115ca 	.word	0x080115ca
 800d010:	080115db 	.word	0x080115db

0800d014 <_scanf_float>:
 800d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	469a      	mov	sl, r3
 800d01a:	688b      	ldr	r3, [r1, #8]
 800d01c:	4616      	mov	r6, r2
 800d01e:	1e5a      	subs	r2, r3, #1
 800d020:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d024:	b087      	sub	sp, #28
 800d026:	bf83      	ittte	hi
 800d028:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d02c:	189b      	addhi	r3, r3, r2
 800d02e:	9301      	strhi	r3, [sp, #4]
 800d030:	2300      	movls	r3, #0
 800d032:	bf86      	itte	hi
 800d034:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d038:	608b      	strhi	r3, [r1, #8]
 800d03a:	9301      	strls	r3, [sp, #4]
 800d03c:	680b      	ldr	r3, [r1, #0]
 800d03e:	4688      	mov	r8, r1
 800d040:	f04f 0b00 	mov.w	fp, #0
 800d044:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d048:	f848 3b1c 	str.w	r3, [r8], #28
 800d04c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d050:	4607      	mov	r7, r0
 800d052:	460c      	mov	r4, r1
 800d054:	4645      	mov	r5, r8
 800d056:	465a      	mov	r2, fp
 800d058:	46d9      	mov	r9, fp
 800d05a:	f8cd b008 	str.w	fp, [sp, #8]
 800d05e:	68a1      	ldr	r1, [r4, #8]
 800d060:	b181      	cbz	r1, 800d084 <_scanf_float+0x70>
 800d062:	6833      	ldr	r3, [r6, #0]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b49      	cmp	r3, #73	; 0x49
 800d068:	d071      	beq.n	800d14e <_scanf_float+0x13a>
 800d06a:	d84d      	bhi.n	800d108 <_scanf_float+0xf4>
 800d06c:	2b39      	cmp	r3, #57	; 0x39
 800d06e:	d840      	bhi.n	800d0f2 <_scanf_float+0xde>
 800d070:	2b31      	cmp	r3, #49	; 0x31
 800d072:	f080 8088 	bcs.w	800d186 <_scanf_float+0x172>
 800d076:	2b2d      	cmp	r3, #45	; 0x2d
 800d078:	f000 8090 	beq.w	800d19c <_scanf_float+0x188>
 800d07c:	d815      	bhi.n	800d0aa <_scanf_float+0x96>
 800d07e:	2b2b      	cmp	r3, #43	; 0x2b
 800d080:	f000 808c 	beq.w	800d19c <_scanf_float+0x188>
 800d084:	f1b9 0f00 	cmp.w	r9, #0
 800d088:	d003      	beq.n	800d092 <_scanf_float+0x7e>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d090:	6023      	str	r3, [r4, #0]
 800d092:	3a01      	subs	r2, #1
 800d094:	2a01      	cmp	r2, #1
 800d096:	f200 80ea 	bhi.w	800d26e <_scanf_float+0x25a>
 800d09a:	4545      	cmp	r5, r8
 800d09c:	f200 80dc 	bhi.w	800d258 <_scanf_float+0x244>
 800d0a0:	2601      	movs	r6, #1
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	b007      	add	sp, #28
 800d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ac:	f000 809f 	beq.w	800d1ee <_scanf_float+0x1da>
 800d0b0:	2b30      	cmp	r3, #48	; 0x30
 800d0b2:	d1e7      	bne.n	800d084 <_scanf_float+0x70>
 800d0b4:	6820      	ldr	r0, [r4, #0]
 800d0b6:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d0ba:	d064      	beq.n	800d186 <_scanf_float+0x172>
 800d0bc:	9b01      	ldr	r3, [sp, #4]
 800d0be:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d0c2:	6020      	str	r0, [r4, #0]
 800d0c4:	f109 0901 	add.w	r9, r9, #1
 800d0c8:	b11b      	cbz	r3, 800d0d2 <_scanf_float+0xbe>
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	3101      	adds	r1, #1
 800d0ce:	9301      	str	r3, [sp, #4]
 800d0d0:	60a1      	str	r1, [r4, #8]
 800d0d2:	68a3      	ldr	r3, [r4, #8]
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	60a3      	str	r3, [r4, #8]
 800d0d8:	6923      	ldr	r3, [r4, #16]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	6123      	str	r3, [r4, #16]
 800d0de:	6873      	ldr	r3, [r6, #4]
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	6073      	str	r3, [r6, #4]
 800d0e6:	f340 80ac 	ble.w	800d242 <_scanf_float+0x22e>
 800d0ea:	6833      	ldr	r3, [r6, #0]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	6033      	str	r3, [r6, #0]
 800d0f0:	e7b5      	b.n	800d05e <_scanf_float+0x4a>
 800d0f2:	2b45      	cmp	r3, #69	; 0x45
 800d0f4:	f000 8085 	beq.w	800d202 <_scanf_float+0x1ee>
 800d0f8:	2b46      	cmp	r3, #70	; 0x46
 800d0fa:	d06a      	beq.n	800d1d2 <_scanf_float+0x1be>
 800d0fc:	2b41      	cmp	r3, #65	; 0x41
 800d0fe:	d1c1      	bne.n	800d084 <_scanf_float+0x70>
 800d100:	2a01      	cmp	r2, #1
 800d102:	d1bf      	bne.n	800d084 <_scanf_float+0x70>
 800d104:	2202      	movs	r2, #2
 800d106:	e046      	b.n	800d196 <_scanf_float+0x182>
 800d108:	2b65      	cmp	r3, #101	; 0x65
 800d10a:	d07a      	beq.n	800d202 <_scanf_float+0x1ee>
 800d10c:	d818      	bhi.n	800d140 <_scanf_float+0x12c>
 800d10e:	2b54      	cmp	r3, #84	; 0x54
 800d110:	d066      	beq.n	800d1e0 <_scanf_float+0x1cc>
 800d112:	d811      	bhi.n	800d138 <_scanf_float+0x124>
 800d114:	2b4e      	cmp	r3, #78	; 0x4e
 800d116:	d1b5      	bne.n	800d084 <_scanf_float+0x70>
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d146      	bne.n	800d1aa <_scanf_float+0x196>
 800d11c:	f1b9 0f00 	cmp.w	r9, #0
 800d120:	d145      	bne.n	800d1ae <_scanf_float+0x19a>
 800d122:	6821      	ldr	r1, [r4, #0]
 800d124:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d128:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d12c:	d13f      	bne.n	800d1ae <_scanf_float+0x19a>
 800d12e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d132:	6021      	str	r1, [r4, #0]
 800d134:	2201      	movs	r2, #1
 800d136:	e02e      	b.n	800d196 <_scanf_float+0x182>
 800d138:	2b59      	cmp	r3, #89	; 0x59
 800d13a:	d01e      	beq.n	800d17a <_scanf_float+0x166>
 800d13c:	2b61      	cmp	r3, #97	; 0x61
 800d13e:	e7de      	b.n	800d0fe <_scanf_float+0xea>
 800d140:	2b6e      	cmp	r3, #110	; 0x6e
 800d142:	d0e9      	beq.n	800d118 <_scanf_float+0x104>
 800d144:	d815      	bhi.n	800d172 <_scanf_float+0x15e>
 800d146:	2b66      	cmp	r3, #102	; 0x66
 800d148:	d043      	beq.n	800d1d2 <_scanf_float+0x1be>
 800d14a:	2b69      	cmp	r3, #105	; 0x69
 800d14c:	d19a      	bne.n	800d084 <_scanf_float+0x70>
 800d14e:	f1bb 0f00 	cmp.w	fp, #0
 800d152:	d138      	bne.n	800d1c6 <_scanf_float+0x1b2>
 800d154:	f1b9 0f00 	cmp.w	r9, #0
 800d158:	d197      	bne.n	800d08a <_scanf_float+0x76>
 800d15a:	6821      	ldr	r1, [r4, #0]
 800d15c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d160:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d164:	d195      	bne.n	800d092 <_scanf_float+0x7e>
 800d166:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d16a:	6021      	str	r1, [r4, #0]
 800d16c:	f04f 0b01 	mov.w	fp, #1
 800d170:	e011      	b.n	800d196 <_scanf_float+0x182>
 800d172:	2b74      	cmp	r3, #116	; 0x74
 800d174:	d034      	beq.n	800d1e0 <_scanf_float+0x1cc>
 800d176:	2b79      	cmp	r3, #121	; 0x79
 800d178:	d184      	bne.n	800d084 <_scanf_float+0x70>
 800d17a:	f1bb 0f07 	cmp.w	fp, #7
 800d17e:	d181      	bne.n	800d084 <_scanf_float+0x70>
 800d180:	f04f 0b08 	mov.w	fp, #8
 800d184:	e007      	b.n	800d196 <_scanf_float+0x182>
 800d186:	eb12 0f0b 	cmn.w	r2, fp
 800d18a:	f47f af7b 	bne.w	800d084 <_scanf_float+0x70>
 800d18e:	6821      	ldr	r1, [r4, #0]
 800d190:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d194:	6021      	str	r1, [r4, #0]
 800d196:	702b      	strb	r3, [r5, #0]
 800d198:	3501      	adds	r5, #1
 800d19a:	e79a      	b.n	800d0d2 <_scanf_float+0xbe>
 800d19c:	6821      	ldr	r1, [r4, #0]
 800d19e:	0608      	lsls	r0, r1, #24
 800d1a0:	f57f af70 	bpl.w	800d084 <_scanf_float+0x70>
 800d1a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d1a8:	e7f4      	b.n	800d194 <_scanf_float+0x180>
 800d1aa:	2a02      	cmp	r2, #2
 800d1ac:	d047      	beq.n	800d23e <_scanf_float+0x22a>
 800d1ae:	f1bb 0f01 	cmp.w	fp, #1
 800d1b2:	d003      	beq.n	800d1bc <_scanf_float+0x1a8>
 800d1b4:	f1bb 0f04 	cmp.w	fp, #4
 800d1b8:	f47f af64 	bne.w	800d084 <_scanf_float+0x70>
 800d1bc:	f10b 0b01 	add.w	fp, fp, #1
 800d1c0:	fa5f fb8b 	uxtb.w	fp, fp
 800d1c4:	e7e7      	b.n	800d196 <_scanf_float+0x182>
 800d1c6:	f1bb 0f03 	cmp.w	fp, #3
 800d1ca:	d0f7      	beq.n	800d1bc <_scanf_float+0x1a8>
 800d1cc:	f1bb 0f05 	cmp.w	fp, #5
 800d1d0:	e7f2      	b.n	800d1b8 <_scanf_float+0x1a4>
 800d1d2:	f1bb 0f02 	cmp.w	fp, #2
 800d1d6:	f47f af55 	bne.w	800d084 <_scanf_float+0x70>
 800d1da:	f04f 0b03 	mov.w	fp, #3
 800d1de:	e7da      	b.n	800d196 <_scanf_float+0x182>
 800d1e0:	f1bb 0f06 	cmp.w	fp, #6
 800d1e4:	f47f af4e 	bne.w	800d084 <_scanf_float+0x70>
 800d1e8:	f04f 0b07 	mov.w	fp, #7
 800d1ec:	e7d3      	b.n	800d196 <_scanf_float+0x182>
 800d1ee:	6821      	ldr	r1, [r4, #0]
 800d1f0:	0588      	lsls	r0, r1, #22
 800d1f2:	f57f af47 	bpl.w	800d084 <_scanf_float+0x70>
 800d1f6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d1fa:	6021      	str	r1, [r4, #0]
 800d1fc:	f8cd 9008 	str.w	r9, [sp, #8]
 800d200:	e7c9      	b.n	800d196 <_scanf_float+0x182>
 800d202:	6821      	ldr	r1, [r4, #0]
 800d204:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d208:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d20c:	d006      	beq.n	800d21c <_scanf_float+0x208>
 800d20e:	0548      	lsls	r0, r1, #21
 800d210:	f57f af38 	bpl.w	800d084 <_scanf_float+0x70>
 800d214:	f1b9 0f00 	cmp.w	r9, #0
 800d218:	f43f af3b 	beq.w	800d092 <_scanf_float+0x7e>
 800d21c:	0588      	lsls	r0, r1, #22
 800d21e:	bf58      	it	pl
 800d220:	9802      	ldrpl	r0, [sp, #8]
 800d222:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d226:	bf58      	it	pl
 800d228:	eba9 0000 	subpl.w	r0, r9, r0
 800d22c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d230:	bf58      	it	pl
 800d232:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d236:	6021      	str	r1, [r4, #0]
 800d238:	f04f 0900 	mov.w	r9, #0
 800d23c:	e7ab      	b.n	800d196 <_scanf_float+0x182>
 800d23e:	2203      	movs	r2, #3
 800d240:	e7a9      	b.n	800d196 <_scanf_float+0x182>
 800d242:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d246:	9205      	str	r2, [sp, #20]
 800d248:	4631      	mov	r1, r6
 800d24a:	4638      	mov	r0, r7
 800d24c:	4798      	blx	r3
 800d24e:	9a05      	ldr	r2, [sp, #20]
 800d250:	2800      	cmp	r0, #0
 800d252:	f43f af04 	beq.w	800d05e <_scanf_float+0x4a>
 800d256:	e715      	b.n	800d084 <_scanf_float+0x70>
 800d258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d25c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d260:	4632      	mov	r2, r6
 800d262:	4638      	mov	r0, r7
 800d264:	4798      	blx	r3
 800d266:	6923      	ldr	r3, [r4, #16]
 800d268:	3b01      	subs	r3, #1
 800d26a:	6123      	str	r3, [r4, #16]
 800d26c:	e715      	b.n	800d09a <_scanf_float+0x86>
 800d26e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d272:	2b06      	cmp	r3, #6
 800d274:	d80a      	bhi.n	800d28c <_scanf_float+0x278>
 800d276:	f1bb 0f02 	cmp.w	fp, #2
 800d27a:	d968      	bls.n	800d34e <_scanf_float+0x33a>
 800d27c:	f1ab 0b03 	sub.w	fp, fp, #3
 800d280:	fa5f fb8b 	uxtb.w	fp, fp
 800d284:	eba5 0b0b 	sub.w	fp, r5, fp
 800d288:	455d      	cmp	r5, fp
 800d28a:	d14b      	bne.n	800d324 <_scanf_float+0x310>
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	05da      	lsls	r2, r3, #23
 800d290:	d51f      	bpl.n	800d2d2 <_scanf_float+0x2be>
 800d292:	055b      	lsls	r3, r3, #21
 800d294:	d468      	bmi.n	800d368 <_scanf_float+0x354>
 800d296:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d29a:	6923      	ldr	r3, [r4, #16]
 800d29c:	2965      	cmp	r1, #101	; 0x65
 800d29e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d2a2:	f105 3bff 	add.w	fp, r5, #4294967295
 800d2a6:	6123      	str	r3, [r4, #16]
 800d2a8:	d00d      	beq.n	800d2c6 <_scanf_float+0x2b2>
 800d2aa:	2945      	cmp	r1, #69	; 0x45
 800d2ac:	d00b      	beq.n	800d2c6 <_scanf_float+0x2b2>
 800d2ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2b2:	4632      	mov	r2, r6
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	4798      	blx	r3
 800d2b8:	6923      	ldr	r3, [r4, #16]
 800d2ba:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	f1a5 0b02 	sub.w	fp, r5, #2
 800d2c4:	6123      	str	r3, [r4, #16]
 800d2c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2ca:	4632      	mov	r2, r6
 800d2cc:	4638      	mov	r0, r7
 800d2ce:	4798      	blx	r3
 800d2d0:	465d      	mov	r5, fp
 800d2d2:	6826      	ldr	r6, [r4, #0]
 800d2d4:	f016 0610 	ands.w	r6, r6, #16
 800d2d8:	d17a      	bne.n	800d3d0 <_scanf_float+0x3bc>
 800d2da:	702e      	strb	r6, [r5, #0]
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d2e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2e6:	d142      	bne.n	800d36e <_scanf_float+0x35a>
 800d2e8:	9b02      	ldr	r3, [sp, #8]
 800d2ea:	eba9 0303 	sub.w	r3, r9, r3
 800d2ee:	425a      	negs	r2, r3
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d149      	bne.n	800d388 <_scanf_float+0x374>
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	4641      	mov	r1, r8
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	f000 fef9 	bl	800e0f0 <_strtod_r>
 800d2fe:	6825      	ldr	r5, [r4, #0]
 800d300:	f8da 3000 	ldr.w	r3, [sl]
 800d304:	f015 0f02 	tst.w	r5, #2
 800d308:	f103 0204 	add.w	r2, r3, #4
 800d30c:	ec59 8b10 	vmov	r8, r9, d0
 800d310:	f8ca 2000 	str.w	r2, [sl]
 800d314:	d043      	beq.n	800d39e <_scanf_float+0x38a>
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	e9c3 8900 	strd	r8, r9, [r3]
 800d31c:	68e3      	ldr	r3, [r4, #12]
 800d31e:	3301      	adds	r3, #1
 800d320:	60e3      	str	r3, [r4, #12]
 800d322:	e6be      	b.n	800d0a2 <_scanf_float+0x8e>
 800d324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d328:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d32c:	4632      	mov	r2, r6
 800d32e:	4638      	mov	r0, r7
 800d330:	4798      	blx	r3
 800d332:	6923      	ldr	r3, [r4, #16]
 800d334:	3b01      	subs	r3, #1
 800d336:	6123      	str	r3, [r4, #16]
 800d338:	e7a6      	b.n	800d288 <_scanf_float+0x274>
 800d33a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d33e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d342:	4632      	mov	r2, r6
 800d344:	4638      	mov	r0, r7
 800d346:	4798      	blx	r3
 800d348:	6923      	ldr	r3, [r4, #16]
 800d34a:	3b01      	subs	r3, #1
 800d34c:	6123      	str	r3, [r4, #16]
 800d34e:	4545      	cmp	r5, r8
 800d350:	d8f3      	bhi.n	800d33a <_scanf_float+0x326>
 800d352:	e6a5      	b.n	800d0a0 <_scanf_float+0x8c>
 800d354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d358:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d35c:	4632      	mov	r2, r6
 800d35e:	4638      	mov	r0, r7
 800d360:	4798      	blx	r3
 800d362:	6923      	ldr	r3, [r4, #16]
 800d364:	3b01      	subs	r3, #1
 800d366:	6123      	str	r3, [r4, #16]
 800d368:	4545      	cmp	r5, r8
 800d36a:	d8f3      	bhi.n	800d354 <_scanf_float+0x340>
 800d36c:	e698      	b.n	800d0a0 <_scanf_float+0x8c>
 800d36e:	9b03      	ldr	r3, [sp, #12]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d0bf      	beq.n	800d2f4 <_scanf_float+0x2e0>
 800d374:	9904      	ldr	r1, [sp, #16]
 800d376:	230a      	movs	r3, #10
 800d378:	4632      	mov	r2, r6
 800d37a:	3101      	adds	r1, #1
 800d37c:	4638      	mov	r0, r7
 800d37e:	f000 ff57 	bl	800e230 <_strtol_r>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	9d04      	ldr	r5, [sp, #16]
 800d386:	1ac2      	subs	r2, r0, r3
 800d388:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d38c:	429d      	cmp	r5, r3
 800d38e:	bf28      	it	cs
 800d390:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d394:	490f      	ldr	r1, [pc, #60]	; (800d3d4 <_scanf_float+0x3c0>)
 800d396:	4628      	mov	r0, r5
 800d398:	f000 f83c 	bl	800d414 <siprintf>
 800d39c:	e7aa      	b.n	800d2f4 <_scanf_float+0x2e0>
 800d39e:	f015 0504 	ands.w	r5, r5, #4
 800d3a2:	d1b8      	bne.n	800d316 <_scanf_float+0x302>
 800d3a4:	681f      	ldr	r7, [r3, #0]
 800d3a6:	ee10 2a10 	vmov	r2, s0
 800d3aa:	464b      	mov	r3, r9
 800d3ac:	ee10 0a10 	vmov	r0, s0
 800d3b0:	4649      	mov	r1, r9
 800d3b2:	f7f3 fbf3 	bl	8000b9c <__aeabi_dcmpun>
 800d3b6:	b128      	cbz	r0, 800d3c4 <_scanf_float+0x3b0>
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f000 f825 	bl	800d408 <nanf>
 800d3be:	ed87 0a00 	vstr	s0, [r7]
 800d3c2:	e7ab      	b.n	800d31c <_scanf_float+0x308>
 800d3c4:	4640      	mov	r0, r8
 800d3c6:	4649      	mov	r1, r9
 800d3c8:	f7f3 fc46 	bl	8000c58 <__aeabi_d2f>
 800d3cc:	6038      	str	r0, [r7, #0]
 800d3ce:	e7a5      	b.n	800d31c <_scanf_float+0x308>
 800d3d0:	2600      	movs	r6, #0
 800d3d2:	e666      	b.n	800d0a2 <_scanf_float+0x8e>
 800d3d4:	080115ec 	.word	0x080115ec

0800d3d8 <realloc>:
 800d3d8:	4b02      	ldr	r3, [pc, #8]	; (800d3e4 <realloc+0xc>)
 800d3da:	460a      	mov	r2, r1
 800d3dc:	4601      	mov	r1, r0
 800d3de:	6818      	ldr	r0, [r3, #0]
 800d3e0:	f002 bce7 	b.w	800fdb2 <_realloc_r>
 800d3e4:	20000018 	.word	0x20000018

0800d3e8 <_sbrk_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4c06      	ldr	r4, [pc, #24]	; (800d404 <_sbrk_r+0x1c>)
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	f7f6 fcc6 	bl	8003d84 <_sbrk>
 800d3f8:	1c43      	adds	r3, r0, #1
 800d3fa:	d102      	bne.n	800d402 <_sbrk_r+0x1a>
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	b103      	cbz	r3, 800d402 <_sbrk_r+0x1a>
 800d400:	602b      	str	r3, [r5, #0]
 800d402:	bd38      	pop	{r3, r4, r5, pc}
 800d404:	200007cc 	.word	0x200007cc

0800d408 <nanf>:
 800d408:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d410 <nanf+0x8>
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	7fc00000 	.word	0x7fc00000

0800d414 <siprintf>:
 800d414:	b40e      	push	{r1, r2, r3}
 800d416:	b500      	push	{lr}
 800d418:	b09c      	sub	sp, #112	; 0x70
 800d41a:	ab1d      	add	r3, sp, #116	; 0x74
 800d41c:	9002      	str	r0, [sp, #8]
 800d41e:	9006      	str	r0, [sp, #24]
 800d420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d424:	4809      	ldr	r0, [pc, #36]	; (800d44c <siprintf+0x38>)
 800d426:	9107      	str	r1, [sp, #28]
 800d428:	9104      	str	r1, [sp, #16]
 800d42a:	4909      	ldr	r1, [pc, #36]	; (800d450 <siprintf+0x3c>)
 800d42c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d430:	9105      	str	r1, [sp, #20]
 800d432:	6800      	ldr	r0, [r0, #0]
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	a902      	add	r1, sp, #8
 800d438:	f002 fd3c 	bl	800feb4 <_svfiprintf_r>
 800d43c:	9b02      	ldr	r3, [sp, #8]
 800d43e:	2200      	movs	r2, #0
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	b01c      	add	sp, #112	; 0x70
 800d444:	f85d eb04 	ldr.w	lr, [sp], #4
 800d448:	b003      	add	sp, #12
 800d44a:	4770      	bx	lr
 800d44c:	20000018 	.word	0x20000018
 800d450:	ffff0208 	.word	0xffff0208

0800d454 <siscanf>:
 800d454:	b40e      	push	{r1, r2, r3}
 800d456:	b530      	push	{r4, r5, lr}
 800d458:	b09c      	sub	sp, #112	; 0x70
 800d45a:	ac1f      	add	r4, sp, #124	; 0x7c
 800d45c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d460:	f854 5b04 	ldr.w	r5, [r4], #4
 800d464:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d468:	9002      	str	r0, [sp, #8]
 800d46a:	9006      	str	r0, [sp, #24]
 800d46c:	f7f2 fee2 	bl	8000234 <strlen>
 800d470:	4b0b      	ldr	r3, [pc, #44]	; (800d4a0 <siscanf+0x4c>)
 800d472:	9003      	str	r0, [sp, #12]
 800d474:	9007      	str	r0, [sp, #28]
 800d476:	930b      	str	r3, [sp, #44]	; 0x2c
 800d478:	480a      	ldr	r0, [pc, #40]	; (800d4a4 <siscanf+0x50>)
 800d47a:	9401      	str	r4, [sp, #4]
 800d47c:	2300      	movs	r3, #0
 800d47e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d480:	9314      	str	r3, [sp, #80]	; 0x50
 800d482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d486:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d48a:	462a      	mov	r2, r5
 800d48c:	4623      	mov	r3, r4
 800d48e:	a902      	add	r1, sp, #8
 800d490:	6800      	ldr	r0, [r0, #0]
 800d492:	f002 fe61 	bl	8010158 <__ssvfiscanf_r>
 800d496:	b01c      	add	sp, #112	; 0x70
 800d498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d49c:	b003      	add	sp, #12
 800d49e:	4770      	bx	lr
 800d4a0:	0800d4a9 	.word	0x0800d4a9
 800d4a4:	20000018 	.word	0x20000018

0800d4a8 <__seofread>:
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	4770      	bx	lr

0800d4ac <strncmp>:
 800d4ac:	b510      	push	{r4, lr}
 800d4ae:	b16a      	cbz	r2, 800d4cc <strncmp+0x20>
 800d4b0:	3901      	subs	r1, #1
 800d4b2:	1884      	adds	r4, r0, r2
 800d4b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d4b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d103      	bne.n	800d4c8 <strncmp+0x1c>
 800d4c0:	42a0      	cmp	r0, r4
 800d4c2:	d001      	beq.n	800d4c8 <strncmp+0x1c>
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d1f5      	bne.n	800d4b4 <strncmp+0x8>
 800d4c8:	1a98      	subs	r0, r3, r2
 800d4ca:	bd10      	pop	{r4, pc}
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	e7fc      	b.n	800d4ca <strncmp+0x1e>

0800d4d0 <sulp>:
 800d4d0:	b570      	push	{r4, r5, r6, lr}
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	460d      	mov	r5, r1
 800d4d6:	ec45 4b10 	vmov	d0, r4, r5
 800d4da:	4616      	mov	r6, r2
 800d4dc:	f002 fb28 	bl	800fb30 <__ulp>
 800d4e0:	ec51 0b10 	vmov	r0, r1, d0
 800d4e4:	b17e      	cbz	r6, 800d506 <sulp+0x36>
 800d4e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d4ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	dd09      	ble.n	800d506 <sulp+0x36>
 800d4f2:	051b      	lsls	r3, r3, #20
 800d4f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d4f8:	2400      	movs	r4, #0
 800d4fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d4fe:	4622      	mov	r2, r4
 800d500:	462b      	mov	r3, r5
 800d502:	f7f3 f8b1 	bl	8000668 <__aeabi_dmul>
 800d506:	bd70      	pop	{r4, r5, r6, pc}

0800d508 <_strtod_l>:
 800d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50c:	461f      	mov	r7, r3
 800d50e:	b0a1      	sub	sp, #132	; 0x84
 800d510:	2300      	movs	r3, #0
 800d512:	4681      	mov	r9, r0
 800d514:	4638      	mov	r0, r7
 800d516:	460e      	mov	r6, r1
 800d518:	9217      	str	r2, [sp, #92]	; 0x5c
 800d51a:	931c      	str	r3, [sp, #112]	; 0x70
 800d51c:	f002 f82a 	bl	800f574 <__localeconv_l>
 800d520:	4680      	mov	r8, r0
 800d522:	6800      	ldr	r0, [r0, #0]
 800d524:	f7f2 fe86 	bl	8000234 <strlen>
 800d528:	f04f 0a00 	mov.w	sl, #0
 800d52c:	4604      	mov	r4, r0
 800d52e:	f04f 0b00 	mov.w	fp, #0
 800d532:	961b      	str	r6, [sp, #108]	; 0x6c
 800d534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d536:	781a      	ldrb	r2, [r3, #0]
 800d538:	2a0d      	cmp	r2, #13
 800d53a:	d832      	bhi.n	800d5a2 <_strtod_l+0x9a>
 800d53c:	2a09      	cmp	r2, #9
 800d53e:	d236      	bcs.n	800d5ae <_strtod_l+0xa6>
 800d540:	2a00      	cmp	r2, #0
 800d542:	d03e      	beq.n	800d5c2 <_strtod_l+0xba>
 800d544:	2300      	movs	r3, #0
 800d546:	930d      	str	r3, [sp, #52]	; 0x34
 800d548:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d54a:	782b      	ldrb	r3, [r5, #0]
 800d54c:	2b30      	cmp	r3, #48	; 0x30
 800d54e:	f040 80ac 	bne.w	800d6aa <_strtod_l+0x1a2>
 800d552:	786b      	ldrb	r3, [r5, #1]
 800d554:	2b58      	cmp	r3, #88	; 0x58
 800d556:	d001      	beq.n	800d55c <_strtod_l+0x54>
 800d558:	2b78      	cmp	r3, #120	; 0x78
 800d55a:	d167      	bne.n	800d62c <_strtod_l+0x124>
 800d55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d55e:	9301      	str	r3, [sp, #4]
 800d560:	ab1c      	add	r3, sp, #112	; 0x70
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	9702      	str	r7, [sp, #8]
 800d566:	ab1d      	add	r3, sp, #116	; 0x74
 800d568:	4a88      	ldr	r2, [pc, #544]	; (800d78c <_strtod_l+0x284>)
 800d56a:	a91b      	add	r1, sp, #108	; 0x6c
 800d56c:	4648      	mov	r0, r9
 800d56e:	f001 fd2a 	bl	800efc6 <__gethex>
 800d572:	f010 0407 	ands.w	r4, r0, #7
 800d576:	4606      	mov	r6, r0
 800d578:	d005      	beq.n	800d586 <_strtod_l+0x7e>
 800d57a:	2c06      	cmp	r4, #6
 800d57c:	d12b      	bne.n	800d5d6 <_strtod_l+0xce>
 800d57e:	3501      	adds	r5, #1
 800d580:	2300      	movs	r3, #0
 800d582:	951b      	str	r5, [sp, #108]	; 0x6c
 800d584:	930d      	str	r3, [sp, #52]	; 0x34
 800d586:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f040 859a 	bne.w	800e0c2 <_strtod_l+0xbba>
 800d58e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d590:	b1e3      	cbz	r3, 800d5cc <_strtod_l+0xc4>
 800d592:	4652      	mov	r2, sl
 800d594:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d598:	ec43 2b10 	vmov	d0, r2, r3
 800d59c:	b021      	add	sp, #132	; 0x84
 800d59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a2:	2a2b      	cmp	r2, #43	; 0x2b
 800d5a4:	d015      	beq.n	800d5d2 <_strtod_l+0xca>
 800d5a6:	2a2d      	cmp	r2, #45	; 0x2d
 800d5a8:	d004      	beq.n	800d5b4 <_strtod_l+0xac>
 800d5aa:	2a20      	cmp	r2, #32
 800d5ac:	d1ca      	bne.n	800d544 <_strtod_l+0x3c>
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d5b2:	e7bf      	b.n	800d534 <_strtod_l+0x2c>
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	920d      	str	r2, [sp, #52]	; 0x34
 800d5b8:	1c5a      	adds	r2, r3, #1
 800d5ba:	921b      	str	r2, [sp, #108]	; 0x6c
 800d5bc:	785b      	ldrb	r3, [r3, #1]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1c2      	bne.n	800d548 <_strtod_l+0x40>
 800d5c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5c4:	961b      	str	r6, [sp, #108]	; 0x6c
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f040 8579 	bne.w	800e0be <_strtod_l+0xbb6>
 800d5cc:	4652      	mov	r2, sl
 800d5ce:	465b      	mov	r3, fp
 800d5d0:	e7e2      	b.n	800d598 <_strtod_l+0x90>
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	e7ef      	b.n	800d5b6 <_strtod_l+0xae>
 800d5d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d5d8:	b13a      	cbz	r2, 800d5ea <_strtod_l+0xe2>
 800d5da:	2135      	movs	r1, #53	; 0x35
 800d5dc:	a81e      	add	r0, sp, #120	; 0x78
 800d5de:	f002 fb9f 	bl	800fd20 <__copybits>
 800d5e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d5e4:	4648      	mov	r0, r9
 800d5e6:	f002 f80b 	bl	800f600 <_Bfree>
 800d5ea:	3c01      	subs	r4, #1
 800d5ec:	2c04      	cmp	r4, #4
 800d5ee:	d806      	bhi.n	800d5fe <_strtod_l+0xf6>
 800d5f0:	e8df f004 	tbb	[pc, r4]
 800d5f4:	1714030a 	.word	0x1714030a
 800d5f8:	0a          	.byte	0x0a
 800d5f9:	00          	.byte	0x00
 800d5fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d5fe:	0730      	lsls	r0, r6, #28
 800d600:	d5c1      	bpl.n	800d586 <_strtod_l+0x7e>
 800d602:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d606:	e7be      	b.n	800d586 <_strtod_l+0x7e>
 800d608:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d60c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d60e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d612:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d616:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d61a:	e7f0      	b.n	800d5fe <_strtod_l+0xf6>
 800d61c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d790 <_strtod_l+0x288>
 800d620:	e7ed      	b.n	800d5fe <_strtod_l+0xf6>
 800d622:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d626:	f04f 3aff 	mov.w	sl, #4294967295
 800d62a:	e7e8      	b.n	800d5fe <_strtod_l+0xf6>
 800d62c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d62e:	1c5a      	adds	r2, r3, #1
 800d630:	921b      	str	r2, [sp, #108]	; 0x6c
 800d632:	785b      	ldrb	r3, [r3, #1]
 800d634:	2b30      	cmp	r3, #48	; 0x30
 800d636:	d0f9      	beq.n	800d62c <_strtod_l+0x124>
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d0a4      	beq.n	800d586 <_strtod_l+0x7e>
 800d63c:	2301      	movs	r3, #1
 800d63e:	2500      	movs	r5, #0
 800d640:	9306      	str	r3, [sp, #24]
 800d642:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d644:	9308      	str	r3, [sp, #32]
 800d646:	9507      	str	r5, [sp, #28]
 800d648:	9505      	str	r5, [sp, #20]
 800d64a:	220a      	movs	r2, #10
 800d64c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d64e:	7807      	ldrb	r7, [r0, #0]
 800d650:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d654:	b2d9      	uxtb	r1, r3
 800d656:	2909      	cmp	r1, #9
 800d658:	d929      	bls.n	800d6ae <_strtod_l+0x1a6>
 800d65a:	4622      	mov	r2, r4
 800d65c:	f8d8 1000 	ldr.w	r1, [r8]
 800d660:	f7ff ff24 	bl	800d4ac <strncmp>
 800d664:	2800      	cmp	r0, #0
 800d666:	d031      	beq.n	800d6cc <_strtod_l+0x1c4>
 800d668:	2000      	movs	r0, #0
 800d66a:	9c05      	ldr	r4, [sp, #20]
 800d66c:	9004      	str	r0, [sp, #16]
 800d66e:	463b      	mov	r3, r7
 800d670:	4602      	mov	r2, r0
 800d672:	2b65      	cmp	r3, #101	; 0x65
 800d674:	d001      	beq.n	800d67a <_strtod_l+0x172>
 800d676:	2b45      	cmp	r3, #69	; 0x45
 800d678:	d114      	bne.n	800d6a4 <_strtod_l+0x19c>
 800d67a:	b924      	cbnz	r4, 800d686 <_strtod_l+0x17e>
 800d67c:	b910      	cbnz	r0, 800d684 <_strtod_l+0x17c>
 800d67e:	9b06      	ldr	r3, [sp, #24]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d09e      	beq.n	800d5c2 <_strtod_l+0xba>
 800d684:	2400      	movs	r4, #0
 800d686:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d688:	1c73      	adds	r3, r6, #1
 800d68a:	931b      	str	r3, [sp, #108]	; 0x6c
 800d68c:	7873      	ldrb	r3, [r6, #1]
 800d68e:	2b2b      	cmp	r3, #43	; 0x2b
 800d690:	d078      	beq.n	800d784 <_strtod_l+0x27c>
 800d692:	2b2d      	cmp	r3, #45	; 0x2d
 800d694:	d070      	beq.n	800d778 <_strtod_l+0x270>
 800d696:	f04f 0c00 	mov.w	ip, #0
 800d69a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d69e:	2f09      	cmp	r7, #9
 800d6a0:	d97c      	bls.n	800d79c <_strtod_l+0x294>
 800d6a2:	961b      	str	r6, [sp, #108]	; 0x6c
 800d6a4:	f04f 0e00 	mov.w	lr, #0
 800d6a8:	e09a      	b.n	800d7e0 <_strtod_l+0x2d8>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	e7c7      	b.n	800d63e <_strtod_l+0x136>
 800d6ae:	9905      	ldr	r1, [sp, #20]
 800d6b0:	2908      	cmp	r1, #8
 800d6b2:	bfdd      	ittte	le
 800d6b4:	9907      	ldrle	r1, [sp, #28]
 800d6b6:	fb02 3301 	mlale	r3, r2, r1, r3
 800d6ba:	9307      	strle	r3, [sp, #28]
 800d6bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d6c0:	9b05      	ldr	r3, [sp, #20]
 800d6c2:	3001      	adds	r0, #1
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	9305      	str	r3, [sp, #20]
 800d6c8:	901b      	str	r0, [sp, #108]	; 0x6c
 800d6ca:	e7bf      	b.n	800d64c <_strtod_l+0x144>
 800d6cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d6ce:	191a      	adds	r2, r3, r4
 800d6d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d6d2:	9a05      	ldr	r2, [sp, #20]
 800d6d4:	5d1b      	ldrb	r3, [r3, r4]
 800d6d6:	2a00      	cmp	r2, #0
 800d6d8:	d037      	beq.n	800d74a <_strtod_l+0x242>
 800d6da:	9c05      	ldr	r4, [sp, #20]
 800d6dc:	4602      	mov	r2, r0
 800d6de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d6e2:	2909      	cmp	r1, #9
 800d6e4:	d913      	bls.n	800d70e <_strtod_l+0x206>
 800d6e6:	2101      	movs	r1, #1
 800d6e8:	9104      	str	r1, [sp, #16]
 800d6ea:	e7c2      	b.n	800d672 <_strtod_l+0x16a>
 800d6ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d6ee:	1c5a      	adds	r2, r3, #1
 800d6f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d6f2:	785b      	ldrb	r3, [r3, #1]
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	2b30      	cmp	r3, #48	; 0x30
 800d6f8:	d0f8      	beq.n	800d6ec <_strtod_l+0x1e4>
 800d6fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d6fe:	2a08      	cmp	r2, #8
 800d700:	f200 84e4 	bhi.w	800e0cc <_strtod_l+0xbc4>
 800d704:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d706:	9208      	str	r2, [sp, #32]
 800d708:	4602      	mov	r2, r0
 800d70a:	2000      	movs	r0, #0
 800d70c:	4604      	mov	r4, r0
 800d70e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d712:	f100 0101 	add.w	r1, r0, #1
 800d716:	d012      	beq.n	800d73e <_strtod_l+0x236>
 800d718:	440a      	add	r2, r1
 800d71a:	eb00 0c04 	add.w	ip, r0, r4
 800d71e:	4621      	mov	r1, r4
 800d720:	270a      	movs	r7, #10
 800d722:	458c      	cmp	ip, r1
 800d724:	d113      	bne.n	800d74e <_strtod_l+0x246>
 800d726:	1821      	adds	r1, r4, r0
 800d728:	2908      	cmp	r1, #8
 800d72a:	f104 0401 	add.w	r4, r4, #1
 800d72e:	4404      	add	r4, r0
 800d730:	dc19      	bgt.n	800d766 <_strtod_l+0x25e>
 800d732:	9b07      	ldr	r3, [sp, #28]
 800d734:	210a      	movs	r1, #10
 800d736:	fb01 e303 	mla	r3, r1, r3, lr
 800d73a:	9307      	str	r3, [sp, #28]
 800d73c:	2100      	movs	r1, #0
 800d73e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d740:	1c58      	adds	r0, r3, #1
 800d742:	901b      	str	r0, [sp, #108]	; 0x6c
 800d744:	785b      	ldrb	r3, [r3, #1]
 800d746:	4608      	mov	r0, r1
 800d748:	e7c9      	b.n	800d6de <_strtod_l+0x1d6>
 800d74a:	9805      	ldr	r0, [sp, #20]
 800d74c:	e7d3      	b.n	800d6f6 <_strtod_l+0x1ee>
 800d74e:	2908      	cmp	r1, #8
 800d750:	f101 0101 	add.w	r1, r1, #1
 800d754:	dc03      	bgt.n	800d75e <_strtod_l+0x256>
 800d756:	9b07      	ldr	r3, [sp, #28]
 800d758:	437b      	muls	r3, r7
 800d75a:	9307      	str	r3, [sp, #28]
 800d75c:	e7e1      	b.n	800d722 <_strtod_l+0x21a>
 800d75e:	2910      	cmp	r1, #16
 800d760:	bfd8      	it	le
 800d762:	437d      	mulle	r5, r7
 800d764:	e7dd      	b.n	800d722 <_strtod_l+0x21a>
 800d766:	2c10      	cmp	r4, #16
 800d768:	bfdc      	itt	le
 800d76a:	210a      	movle	r1, #10
 800d76c:	fb01 e505 	mlale	r5, r1, r5, lr
 800d770:	e7e4      	b.n	800d73c <_strtod_l+0x234>
 800d772:	2301      	movs	r3, #1
 800d774:	9304      	str	r3, [sp, #16]
 800d776:	e781      	b.n	800d67c <_strtod_l+0x174>
 800d778:	f04f 0c01 	mov.w	ip, #1
 800d77c:	1cb3      	adds	r3, r6, #2
 800d77e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d780:	78b3      	ldrb	r3, [r6, #2]
 800d782:	e78a      	b.n	800d69a <_strtod_l+0x192>
 800d784:	f04f 0c00 	mov.w	ip, #0
 800d788:	e7f8      	b.n	800d77c <_strtod_l+0x274>
 800d78a:	bf00      	nop
 800d78c:	080115f4 	.word	0x080115f4
 800d790:	7ff00000 	.word	0x7ff00000
 800d794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d796:	1c5f      	adds	r7, r3, #1
 800d798:	971b      	str	r7, [sp, #108]	; 0x6c
 800d79a:	785b      	ldrb	r3, [r3, #1]
 800d79c:	2b30      	cmp	r3, #48	; 0x30
 800d79e:	d0f9      	beq.n	800d794 <_strtod_l+0x28c>
 800d7a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d7a4:	2f08      	cmp	r7, #8
 800d7a6:	f63f af7d 	bhi.w	800d6a4 <_strtod_l+0x19c>
 800d7aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d7ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7b0:	930a      	str	r3, [sp, #40]	; 0x28
 800d7b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7b4:	1c5f      	adds	r7, r3, #1
 800d7b6:	971b      	str	r7, [sp, #108]	; 0x6c
 800d7b8:	785b      	ldrb	r3, [r3, #1]
 800d7ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d7be:	f1b8 0f09 	cmp.w	r8, #9
 800d7c2:	d937      	bls.n	800d834 <_strtod_l+0x32c>
 800d7c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d7c6:	1a7f      	subs	r7, r7, r1
 800d7c8:	2f08      	cmp	r7, #8
 800d7ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d7ce:	dc37      	bgt.n	800d840 <_strtod_l+0x338>
 800d7d0:	45be      	cmp	lr, r7
 800d7d2:	bfa8      	it	ge
 800d7d4:	46be      	movge	lr, r7
 800d7d6:	f1bc 0f00 	cmp.w	ip, #0
 800d7da:	d001      	beq.n	800d7e0 <_strtod_l+0x2d8>
 800d7dc:	f1ce 0e00 	rsb	lr, lr, #0
 800d7e0:	2c00      	cmp	r4, #0
 800d7e2:	d151      	bne.n	800d888 <_strtod_l+0x380>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	f47f aece 	bne.w	800d586 <_strtod_l+0x7e>
 800d7ea:	9a06      	ldr	r2, [sp, #24]
 800d7ec:	2a00      	cmp	r2, #0
 800d7ee:	f47f aeca 	bne.w	800d586 <_strtod_l+0x7e>
 800d7f2:	9a04      	ldr	r2, [sp, #16]
 800d7f4:	2a00      	cmp	r2, #0
 800d7f6:	f47f aee4 	bne.w	800d5c2 <_strtod_l+0xba>
 800d7fa:	2b4e      	cmp	r3, #78	; 0x4e
 800d7fc:	d027      	beq.n	800d84e <_strtod_l+0x346>
 800d7fe:	dc21      	bgt.n	800d844 <_strtod_l+0x33c>
 800d800:	2b49      	cmp	r3, #73	; 0x49
 800d802:	f47f aede 	bne.w	800d5c2 <_strtod_l+0xba>
 800d806:	49a0      	ldr	r1, [pc, #640]	; (800da88 <_strtod_l+0x580>)
 800d808:	a81b      	add	r0, sp, #108	; 0x6c
 800d80a:	f001 fe0f 	bl	800f42c <__match>
 800d80e:	2800      	cmp	r0, #0
 800d810:	f43f aed7 	beq.w	800d5c2 <_strtod_l+0xba>
 800d814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d816:	499d      	ldr	r1, [pc, #628]	; (800da8c <_strtod_l+0x584>)
 800d818:	3b01      	subs	r3, #1
 800d81a:	a81b      	add	r0, sp, #108	; 0x6c
 800d81c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d81e:	f001 fe05 	bl	800f42c <__match>
 800d822:	b910      	cbnz	r0, 800d82a <_strtod_l+0x322>
 800d824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d826:	3301      	adds	r3, #1
 800d828:	931b      	str	r3, [sp, #108]	; 0x6c
 800d82a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800daa0 <_strtod_l+0x598>
 800d82e:	f04f 0a00 	mov.w	sl, #0
 800d832:	e6a8      	b.n	800d586 <_strtod_l+0x7e>
 800d834:	210a      	movs	r1, #10
 800d836:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d83a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d83e:	e7b8      	b.n	800d7b2 <_strtod_l+0x2aa>
 800d840:	46be      	mov	lr, r7
 800d842:	e7c8      	b.n	800d7d6 <_strtod_l+0x2ce>
 800d844:	2b69      	cmp	r3, #105	; 0x69
 800d846:	d0de      	beq.n	800d806 <_strtod_l+0x2fe>
 800d848:	2b6e      	cmp	r3, #110	; 0x6e
 800d84a:	f47f aeba 	bne.w	800d5c2 <_strtod_l+0xba>
 800d84e:	4990      	ldr	r1, [pc, #576]	; (800da90 <_strtod_l+0x588>)
 800d850:	a81b      	add	r0, sp, #108	; 0x6c
 800d852:	f001 fdeb 	bl	800f42c <__match>
 800d856:	2800      	cmp	r0, #0
 800d858:	f43f aeb3 	beq.w	800d5c2 <_strtod_l+0xba>
 800d85c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	2b28      	cmp	r3, #40	; 0x28
 800d862:	d10e      	bne.n	800d882 <_strtod_l+0x37a>
 800d864:	aa1e      	add	r2, sp, #120	; 0x78
 800d866:	498b      	ldr	r1, [pc, #556]	; (800da94 <_strtod_l+0x58c>)
 800d868:	a81b      	add	r0, sp, #108	; 0x6c
 800d86a:	f001 fdf3 	bl	800f454 <__hexnan>
 800d86e:	2805      	cmp	r0, #5
 800d870:	d107      	bne.n	800d882 <_strtod_l+0x37a>
 800d872:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d874:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d878:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d87c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d880:	e681      	b.n	800d586 <_strtod_l+0x7e>
 800d882:	f8df b224 	ldr.w	fp, [pc, #548]	; 800daa8 <_strtod_l+0x5a0>
 800d886:	e7d2      	b.n	800d82e <_strtod_l+0x326>
 800d888:	ebae 0302 	sub.w	r3, lr, r2
 800d88c:	9306      	str	r3, [sp, #24]
 800d88e:	9b05      	ldr	r3, [sp, #20]
 800d890:	9807      	ldr	r0, [sp, #28]
 800d892:	2b00      	cmp	r3, #0
 800d894:	bf08      	it	eq
 800d896:	4623      	moveq	r3, r4
 800d898:	2c10      	cmp	r4, #16
 800d89a:	9305      	str	r3, [sp, #20]
 800d89c:	46a0      	mov	r8, r4
 800d89e:	bfa8      	it	ge
 800d8a0:	f04f 0810 	movge.w	r8, #16
 800d8a4:	f7f2 fe66 	bl	8000574 <__aeabi_ui2d>
 800d8a8:	2c09      	cmp	r4, #9
 800d8aa:	4682      	mov	sl, r0
 800d8ac:	468b      	mov	fp, r1
 800d8ae:	dc13      	bgt.n	800d8d8 <_strtod_l+0x3d0>
 800d8b0:	9b06      	ldr	r3, [sp, #24]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f43f ae67 	beq.w	800d586 <_strtod_l+0x7e>
 800d8b8:	9b06      	ldr	r3, [sp, #24]
 800d8ba:	dd7a      	ble.n	800d9b2 <_strtod_l+0x4aa>
 800d8bc:	2b16      	cmp	r3, #22
 800d8be:	dc61      	bgt.n	800d984 <_strtod_l+0x47c>
 800d8c0:	4a75      	ldr	r2, [pc, #468]	; (800da98 <_strtod_l+0x590>)
 800d8c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d8c6:	e9de 0100 	ldrd	r0, r1, [lr]
 800d8ca:	4652      	mov	r2, sl
 800d8cc:	465b      	mov	r3, fp
 800d8ce:	f7f2 fecb 	bl	8000668 <__aeabi_dmul>
 800d8d2:	4682      	mov	sl, r0
 800d8d4:	468b      	mov	fp, r1
 800d8d6:	e656      	b.n	800d586 <_strtod_l+0x7e>
 800d8d8:	4b6f      	ldr	r3, [pc, #444]	; (800da98 <_strtod_l+0x590>)
 800d8da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d8de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d8e2:	f7f2 fec1 	bl	8000668 <__aeabi_dmul>
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	460f      	mov	r7, r1
 800d8ec:	f7f2 fe42 	bl	8000574 <__aeabi_ui2d>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	f7f2 fd00 	bl	80002fc <__adddf3>
 800d8fc:	2c0f      	cmp	r4, #15
 800d8fe:	4682      	mov	sl, r0
 800d900:	468b      	mov	fp, r1
 800d902:	ddd5      	ble.n	800d8b0 <_strtod_l+0x3a8>
 800d904:	9b06      	ldr	r3, [sp, #24]
 800d906:	eba4 0808 	sub.w	r8, r4, r8
 800d90a:	4498      	add	r8, r3
 800d90c:	f1b8 0f00 	cmp.w	r8, #0
 800d910:	f340 8096 	ble.w	800da40 <_strtod_l+0x538>
 800d914:	f018 030f 	ands.w	r3, r8, #15
 800d918:	d00a      	beq.n	800d930 <_strtod_l+0x428>
 800d91a:	495f      	ldr	r1, [pc, #380]	; (800da98 <_strtod_l+0x590>)
 800d91c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d920:	4652      	mov	r2, sl
 800d922:	465b      	mov	r3, fp
 800d924:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d928:	f7f2 fe9e 	bl	8000668 <__aeabi_dmul>
 800d92c:	4682      	mov	sl, r0
 800d92e:	468b      	mov	fp, r1
 800d930:	f038 080f 	bics.w	r8, r8, #15
 800d934:	d073      	beq.n	800da1e <_strtod_l+0x516>
 800d936:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d93a:	dd47      	ble.n	800d9cc <_strtod_l+0x4c4>
 800d93c:	2400      	movs	r4, #0
 800d93e:	46a0      	mov	r8, r4
 800d940:	9407      	str	r4, [sp, #28]
 800d942:	9405      	str	r4, [sp, #20]
 800d944:	2322      	movs	r3, #34	; 0x22
 800d946:	f8df b158 	ldr.w	fp, [pc, #344]	; 800daa0 <_strtod_l+0x598>
 800d94a:	f8c9 3000 	str.w	r3, [r9]
 800d94e:	f04f 0a00 	mov.w	sl, #0
 800d952:	9b07      	ldr	r3, [sp, #28]
 800d954:	2b00      	cmp	r3, #0
 800d956:	f43f ae16 	beq.w	800d586 <_strtod_l+0x7e>
 800d95a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d95c:	4648      	mov	r0, r9
 800d95e:	f001 fe4f 	bl	800f600 <_Bfree>
 800d962:	9905      	ldr	r1, [sp, #20]
 800d964:	4648      	mov	r0, r9
 800d966:	f001 fe4b 	bl	800f600 <_Bfree>
 800d96a:	4641      	mov	r1, r8
 800d96c:	4648      	mov	r0, r9
 800d96e:	f001 fe47 	bl	800f600 <_Bfree>
 800d972:	9907      	ldr	r1, [sp, #28]
 800d974:	4648      	mov	r0, r9
 800d976:	f001 fe43 	bl	800f600 <_Bfree>
 800d97a:	4621      	mov	r1, r4
 800d97c:	4648      	mov	r0, r9
 800d97e:	f001 fe3f 	bl	800f600 <_Bfree>
 800d982:	e600      	b.n	800d586 <_strtod_l+0x7e>
 800d984:	9a06      	ldr	r2, [sp, #24]
 800d986:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d98a:	4293      	cmp	r3, r2
 800d98c:	dbba      	blt.n	800d904 <_strtod_l+0x3fc>
 800d98e:	4d42      	ldr	r5, [pc, #264]	; (800da98 <_strtod_l+0x590>)
 800d990:	f1c4 040f 	rsb	r4, r4, #15
 800d994:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d998:	4652      	mov	r2, sl
 800d99a:	465b      	mov	r3, fp
 800d99c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9a0:	f7f2 fe62 	bl	8000668 <__aeabi_dmul>
 800d9a4:	9b06      	ldr	r3, [sp, #24]
 800d9a6:	1b1c      	subs	r4, r3, r4
 800d9a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d9ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9b0:	e78d      	b.n	800d8ce <_strtod_l+0x3c6>
 800d9b2:	f113 0f16 	cmn.w	r3, #22
 800d9b6:	dba5      	blt.n	800d904 <_strtod_l+0x3fc>
 800d9b8:	4a37      	ldr	r2, [pc, #220]	; (800da98 <_strtod_l+0x590>)
 800d9ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d9be:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d9c2:	4650      	mov	r0, sl
 800d9c4:	4659      	mov	r1, fp
 800d9c6:	f7f2 ff79 	bl	80008bc <__aeabi_ddiv>
 800d9ca:	e782      	b.n	800d8d2 <_strtod_l+0x3ca>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	4e33      	ldr	r6, [pc, #204]	; (800da9c <_strtod_l+0x594>)
 800d9d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d9d4:	4650      	mov	r0, sl
 800d9d6:	4659      	mov	r1, fp
 800d9d8:	461d      	mov	r5, r3
 800d9da:	f1b8 0f01 	cmp.w	r8, #1
 800d9de:	dc21      	bgt.n	800da24 <_strtod_l+0x51c>
 800d9e0:	b10b      	cbz	r3, 800d9e6 <_strtod_l+0x4de>
 800d9e2:	4682      	mov	sl, r0
 800d9e4:	468b      	mov	fp, r1
 800d9e6:	4b2d      	ldr	r3, [pc, #180]	; (800da9c <_strtod_l+0x594>)
 800d9e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d9ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d9f0:	4652      	mov	r2, sl
 800d9f2:	465b      	mov	r3, fp
 800d9f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d9f8:	f7f2 fe36 	bl	8000668 <__aeabi_dmul>
 800d9fc:	4b28      	ldr	r3, [pc, #160]	; (800daa0 <_strtod_l+0x598>)
 800d9fe:	460a      	mov	r2, r1
 800da00:	400b      	ands	r3, r1
 800da02:	4928      	ldr	r1, [pc, #160]	; (800daa4 <_strtod_l+0x59c>)
 800da04:	428b      	cmp	r3, r1
 800da06:	4682      	mov	sl, r0
 800da08:	d898      	bhi.n	800d93c <_strtod_l+0x434>
 800da0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800da0e:	428b      	cmp	r3, r1
 800da10:	bf86      	itte	hi
 800da12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800daac <_strtod_l+0x5a4>
 800da16:	f04f 3aff 	movhi.w	sl, #4294967295
 800da1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800da1e:	2300      	movs	r3, #0
 800da20:	9304      	str	r3, [sp, #16]
 800da22:	e077      	b.n	800db14 <_strtod_l+0x60c>
 800da24:	f018 0f01 	tst.w	r8, #1
 800da28:	d006      	beq.n	800da38 <_strtod_l+0x530>
 800da2a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da32:	f7f2 fe19 	bl	8000668 <__aeabi_dmul>
 800da36:	2301      	movs	r3, #1
 800da38:	3501      	adds	r5, #1
 800da3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800da3e:	e7cc      	b.n	800d9da <_strtod_l+0x4d2>
 800da40:	d0ed      	beq.n	800da1e <_strtod_l+0x516>
 800da42:	f1c8 0800 	rsb	r8, r8, #0
 800da46:	f018 020f 	ands.w	r2, r8, #15
 800da4a:	d00a      	beq.n	800da62 <_strtod_l+0x55a>
 800da4c:	4b12      	ldr	r3, [pc, #72]	; (800da98 <_strtod_l+0x590>)
 800da4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da52:	4650      	mov	r0, sl
 800da54:	4659      	mov	r1, fp
 800da56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5a:	f7f2 ff2f 	bl	80008bc <__aeabi_ddiv>
 800da5e:	4682      	mov	sl, r0
 800da60:	468b      	mov	fp, r1
 800da62:	ea5f 1828 	movs.w	r8, r8, asr #4
 800da66:	d0da      	beq.n	800da1e <_strtod_l+0x516>
 800da68:	f1b8 0f1f 	cmp.w	r8, #31
 800da6c:	dd20      	ble.n	800dab0 <_strtod_l+0x5a8>
 800da6e:	2400      	movs	r4, #0
 800da70:	46a0      	mov	r8, r4
 800da72:	9407      	str	r4, [sp, #28]
 800da74:	9405      	str	r4, [sp, #20]
 800da76:	2322      	movs	r3, #34	; 0x22
 800da78:	f04f 0a00 	mov.w	sl, #0
 800da7c:	f04f 0b00 	mov.w	fp, #0
 800da80:	f8c9 3000 	str.w	r3, [r9]
 800da84:	e765      	b.n	800d952 <_strtod_l+0x44a>
 800da86:	bf00      	nop
 800da88:	080115bf 	.word	0x080115bf
 800da8c:	0801174c 	.word	0x0801174c
 800da90:	080115c7 	.word	0x080115c7
 800da94:	08011608 	.word	0x08011608
 800da98:	08011780 	.word	0x08011780
 800da9c:	08011758 	.word	0x08011758
 800daa0:	7ff00000 	.word	0x7ff00000
 800daa4:	7ca00000 	.word	0x7ca00000
 800daa8:	fff80000 	.word	0xfff80000
 800daac:	7fefffff 	.word	0x7fefffff
 800dab0:	f018 0310 	ands.w	r3, r8, #16
 800dab4:	bf18      	it	ne
 800dab6:	236a      	movne	r3, #106	; 0x6a
 800dab8:	4da0      	ldr	r5, [pc, #640]	; (800dd3c <_strtod_l+0x834>)
 800daba:	9304      	str	r3, [sp, #16]
 800dabc:	4650      	mov	r0, sl
 800dabe:	4659      	mov	r1, fp
 800dac0:	2300      	movs	r3, #0
 800dac2:	f1b8 0f00 	cmp.w	r8, #0
 800dac6:	f300 810a 	bgt.w	800dcde <_strtod_l+0x7d6>
 800daca:	b10b      	cbz	r3, 800dad0 <_strtod_l+0x5c8>
 800dacc:	4682      	mov	sl, r0
 800dace:	468b      	mov	fp, r1
 800dad0:	9b04      	ldr	r3, [sp, #16]
 800dad2:	b1bb      	cbz	r3, 800db04 <_strtod_l+0x5fc>
 800dad4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800dad8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dadc:	2b00      	cmp	r3, #0
 800dade:	4659      	mov	r1, fp
 800dae0:	dd10      	ble.n	800db04 <_strtod_l+0x5fc>
 800dae2:	2b1f      	cmp	r3, #31
 800dae4:	f340 8107 	ble.w	800dcf6 <_strtod_l+0x7ee>
 800dae8:	2b34      	cmp	r3, #52	; 0x34
 800daea:	bfde      	ittt	le
 800daec:	3b20      	suble	r3, #32
 800daee:	f04f 32ff 	movle.w	r2, #4294967295
 800daf2:	fa02 f303 	lslle.w	r3, r2, r3
 800daf6:	f04f 0a00 	mov.w	sl, #0
 800dafa:	bfcc      	ite	gt
 800dafc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800db00:	ea03 0b01 	andle.w	fp, r3, r1
 800db04:	2200      	movs	r2, #0
 800db06:	2300      	movs	r3, #0
 800db08:	4650      	mov	r0, sl
 800db0a:	4659      	mov	r1, fp
 800db0c:	f7f3 f814 	bl	8000b38 <__aeabi_dcmpeq>
 800db10:	2800      	cmp	r0, #0
 800db12:	d1ac      	bne.n	800da6e <_strtod_l+0x566>
 800db14:	9b07      	ldr	r3, [sp, #28]
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	9a05      	ldr	r2, [sp, #20]
 800db1a:	9908      	ldr	r1, [sp, #32]
 800db1c:	4623      	mov	r3, r4
 800db1e:	4648      	mov	r0, r9
 800db20:	f001 fdc0 	bl	800f6a4 <__s2b>
 800db24:	9007      	str	r0, [sp, #28]
 800db26:	2800      	cmp	r0, #0
 800db28:	f43f af08 	beq.w	800d93c <_strtod_l+0x434>
 800db2c:	9a06      	ldr	r2, [sp, #24]
 800db2e:	9b06      	ldr	r3, [sp, #24]
 800db30:	2a00      	cmp	r2, #0
 800db32:	f1c3 0300 	rsb	r3, r3, #0
 800db36:	bfa8      	it	ge
 800db38:	2300      	movge	r3, #0
 800db3a:	930e      	str	r3, [sp, #56]	; 0x38
 800db3c:	2400      	movs	r4, #0
 800db3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800db42:	9316      	str	r3, [sp, #88]	; 0x58
 800db44:	46a0      	mov	r8, r4
 800db46:	9b07      	ldr	r3, [sp, #28]
 800db48:	4648      	mov	r0, r9
 800db4a:	6859      	ldr	r1, [r3, #4]
 800db4c:	f001 fd24 	bl	800f598 <_Balloc>
 800db50:	9005      	str	r0, [sp, #20]
 800db52:	2800      	cmp	r0, #0
 800db54:	f43f aef6 	beq.w	800d944 <_strtod_l+0x43c>
 800db58:	9b07      	ldr	r3, [sp, #28]
 800db5a:	691a      	ldr	r2, [r3, #16]
 800db5c:	3202      	adds	r2, #2
 800db5e:	f103 010c 	add.w	r1, r3, #12
 800db62:	0092      	lsls	r2, r2, #2
 800db64:	300c      	adds	r0, #12
 800db66:	f7fe fd3d 	bl	800c5e4 <memcpy>
 800db6a:	aa1e      	add	r2, sp, #120	; 0x78
 800db6c:	a91d      	add	r1, sp, #116	; 0x74
 800db6e:	ec4b ab10 	vmov	d0, sl, fp
 800db72:	4648      	mov	r0, r9
 800db74:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800db78:	f002 f850 	bl	800fc1c <__d2b>
 800db7c:	901c      	str	r0, [sp, #112]	; 0x70
 800db7e:	2800      	cmp	r0, #0
 800db80:	f43f aee0 	beq.w	800d944 <_strtod_l+0x43c>
 800db84:	2101      	movs	r1, #1
 800db86:	4648      	mov	r0, r9
 800db88:	f001 fe18 	bl	800f7bc <__i2b>
 800db8c:	4680      	mov	r8, r0
 800db8e:	2800      	cmp	r0, #0
 800db90:	f43f aed8 	beq.w	800d944 <_strtod_l+0x43c>
 800db94:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800db96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800db98:	2e00      	cmp	r6, #0
 800db9a:	bfab      	itete	ge
 800db9c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800db9e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800dba0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800dba2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800dba4:	bfac      	ite	ge
 800dba6:	18f7      	addge	r7, r6, r3
 800dba8:	1b9d      	sublt	r5, r3, r6
 800dbaa:	9b04      	ldr	r3, [sp, #16]
 800dbac:	1af6      	subs	r6, r6, r3
 800dbae:	4416      	add	r6, r2
 800dbb0:	4b63      	ldr	r3, [pc, #396]	; (800dd40 <_strtod_l+0x838>)
 800dbb2:	3e01      	subs	r6, #1
 800dbb4:	429e      	cmp	r6, r3
 800dbb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dbba:	f280 80af 	bge.w	800dd1c <_strtod_l+0x814>
 800dbbe:	1b9b      	subs	r3, r3, r6
 800dbc0:	2b1f      	cmp	r3, #31
 800dbc2:	eba2 0203 	sub.w	r2, r2, r3
 800dbc6:	f04f 0101 	mov.w	r1, #1
 800dbca:	f300 809b 	bgt.w	800dd04 <_strtod_l+0x7fc>
 800dbce:	fa01 f303 	lsl.w	r3, r1, r3
 800dbd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	930a      	str	r3, [sp, #40]	; 0x28
 800dbd8:	18be      	adds	r6, r7, r2
 800dbda:	9b04      	ldr	r3, [sp, #16]
 800dbdc:	42b7      	cmp	r7, r6
 800dbde:	4415      	add	r5, r2
 800dbe0:	441d      	add	r5, r3
 800dbe2:	463b      	mov	r3, r7
 800dbe4:	bfa8      	it	ge
 800dbe6:	4633      	movge	r3, r6
 800dbe8:	42ab      	cmp	r3, r5
 800dbea:	bfa8      	it	ge
 800dbec:	462b      	movge	r3, r5
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	bfc2      	ittt	gt
 800dbf2:	1af6      	subgt	r6, r6, r3
 800dbf4:	1aed      	subgt	r5, r5, r3
 800dbf6:	1aff      	subgt	r7, r7, r3
 800dbf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbfa:	b1bb      	cbz	r3, 800dc2c <_strtod_l+0x724>
 800dbfc:	4641      	mov	r1, r8
 800dbfe:	461a      	mov	r2, r3
 800dc00:	4648      	mov	r0, r9
 800dc02:	f001 fe7b 	bl	800f8fc <__pow5mult>
 800dc06:	4680      	mov	r8, r0
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	f43f ae9b 	beq.w	800d944 <_strtod_l+0x43c>
 800dc0e:	4601      	mov	r1, r0
 800dc10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dc12:	4648      	mov	r0, r9
 800dc14:	f001 fddb 	bl	800f7ce <__multiply>
 800dc18:	900c      	str	r0, [sp, #48]	; 0x30
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	f43f ae92 	beq.w	800d944 <_strtod_l+0x43c>
 800dc20:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dc22:	4648      	mov	r0, r9
 800dc24:	f001 fcec 	bl	800f600 <_Bfree>
 800dc28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc2a:	931c      	str	r3, [sp, #112]	; 0x70
 800dc2c:	2e00      	cmp	r6, #0
 800dc2e:	dc7a      	bgt.n	800dd26 <_strtod_l+0x81e>
 800dc30:	9b06      	ldr	r3, [sp, #24]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	dd08      	ble.n	800dc48 <_strtod_l+0x740>
 800dc36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc38:	9905      	ldr	r1, [sp, #20]
 800dc3a:	4648      	mov	r0, r9
 800dc3c:	f001 fe5e 	bl	800f8fc <__pow5mult>
 800dc40:	9005      	str	r0, [sp, #20]
 800dc42:	2800      	cmp	r0, #0
 800dc44:	f43f ae7e 	beq.w	800d944 <_strtod_l+0x43c>
 800dc48:	2d00      	cmp	r5, #0
 800dc4a:	dd08      	ble.n	800dc5e <_strtod_l+0x756>
 800dc4c:	462a      	mov	r2, r5
 800dc4e:	9905      	ldr	r1, [sp, #20]
 800dc50:	4648      	mov	r0, r9
 800dc52:	f001 fea1 	bl	800f998 <__lshift>
 800dc56:	9005      	str	r0, [sp, #20]
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	f43f ae73 	beq.w	800d944 <_strtod_l+0x43c>
 800dc5e:	2f00      	cmp	r7, #0
 800dc60:	dd08      	ble.n	800dc74 <_strtod_l+0x76c>
 800dc62:	4641      	mov	r1, r8
 800dc64:	463a      	mov	r2, r7
 800dc66:	4648      	mov	r0, r9
 800dc68:	f001 fe96 	bl	800f998 <__lshift>
 800dc6c:	4680      	mov	r8, r0
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	f43f ae68 	beq.w	800d944 <_strtod_l+0x43c>
 800dc74:	9a05      	ldr	r2, [sp, #20]
 800dc76:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dc78:	4648      	mov	r0, r9
 800dc7a:	f001 fefb 	bl	800fa74 <__mdiff>
 800dc7e:	4604      	mov	r4, r0
 800dc80:	2800      	cmp	r0, #0
 800dc82:	f43f ae5f 	beq.w	800d944 <_strtod_l+0x43c>
 800dc86:	68c3      	ldr	r3, [r0, #12]
 800dc88:	930c      	str	r3, [sp, #48]	; 0x30
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	60c3      	str	r3, [r0, #12]
 800dc8e:	4641      	mov	r1, r8
 800dc90:	f001 fed6 	bl	800fa40 <__mcmp>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	da55      	bge.n	800dd44 <_strtod_l+0x83c>
 800dc98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc9a:	b9e3      	cbnz	r3, 800dcd6 <_strtod_l+0x7ce>
 800dc9c:	f1ba 0f00 	cmp.w	sl, #0
 800dca0:	d119      	bne.n	800dcd6 <_strtod_l+0x7ce>
 800dca2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dca6:	b9b3      	cbnz	r3, 800dcd6 <_strtod_l+0x7ce>
 800dca8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dcac:	0d1b      	lsrs	r3, r3, #20
 800dcae:	051b      	lsls	r3, r3, #20
 800dcb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dcb4:	d90f      	bls.n	800dcd6 <_strtod_l+0x7ce>
 800dcb6:	6963      	ldr	r3, [r4, #20]
 800dcb8:	b913      	cbnz	r3, 800dcc0 <_strtod_l+0x7b8>
 800dcba:	6923      	ldr	r3, [r4, #16]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	dd0a      	ble.n	800dcd6 <_strtod_l+0x7ce>
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	4648      	mov	r0, r9
 800dcc6:	f001 fe67 	bl	800f998 <__lshift>
 800dcca:	4641      	mov	r1, r8
 800dccc:	4604      	mov	r4, r0
 800dcce:	f001 feb7 	bl	800fa40 <__mcmp>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	dc67      	bgt.n	800dda6 <_strtod_l+0x89e>
 800dcd6:	9b04      	ldr	r3, [sp, #16]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d171      	bne.n	800ddc0 <_strtod_l+0x8b8>
 800dcdc:	e63d      	b.n	800d95a <_strtod_l+0x452>
 800dcde:	f018 0f01 	tst.w	r8, #1
 800dce2:	d004      	beq.n	800dcee <_strtod_l+0x7e6>
 800dce4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dce8:	f7f2 fcbe 	bl	8000668 <__aeabi_dmul>
 800dcec:	2301      	movs	r3, #1
 800dcee:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dcf2:	3508      	adds	r5, #8
 800dcf4:	e6e5      	b.n	800dac2 <_strtod_l+0x5ba>
 800dcf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcfa:	fa02 f303 	lsl.w	r3, r2, r3
 800dcfe:	ea03 0a0a 	and.w	sl, r3, sl
 800dd02:	e6ff      	b.n	800db04 <_strtod_l+0x5fc>
 800dd04:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800dd08:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800dd0c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800dd10:	36e2      	adds	r6, #226	; 0xe2
 800dd12:	fa01 f306 	lsl.w	r3, r1, r6
 800dd16:	930a      	str	r3, [sp, #40]	; 0x28
 800dd18:	910f      	str	r1, [sp, #60]	; 0x3c
 800dd1a:	e75d      	b.n	800dbd8 <_strtod_l+0x6d0>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd20:	2301      	movs	r3, #1
 800dd22:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd24:	e758      	b.n	800dbd8 <_strtod_l+0x6d0>
 800dd26:	4632      	mov	r2, r6
 800dd28:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dd2a:	4648      	mov	r0, r9
 800dd2c:	f001 fe34 	bl	800f998 <__lshift>
 800dd30:	901c      	str	r0, [sp, #112]	; 0x70
 800dd32:	2800      	cmp	r0, #0
 800dd34:	f47f af7c 	bne.w	800dc30 <_strtod_l+0x728>
 800dd38:	e604      	b.n	800d944 <_strtod_l+0x43c>
 800dd3a:	bf00      	nop
 800dd3c:	08011620 	.word	0x08011620
 800dd40:	fffffc02 	.word	0xfffffc02
 800dd44:	465d      	mov	r5, fp
 800dd46:	f040 8086 	bne.w	800de56 <_strtod_l+0x94e>
 800dd4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd50:	b32a      	cbz	r2, 800dd9e <_strtod_l+0x896>
 800dd52:	4aaf      	ldr	r2, [pc, #700]	; (800e010 <_strtod_l+0xb08>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d153      	bne.n	800de00 <_strtod_l+0x8f8>
 800dd58:	9b04      	ldr	r3, [sp, #16]
 800dd5a:	4650      	mov	r0, sl
 800dd5c:	b1d3      	cbz	r3, 800dd94 <_strtod_l+0x88c>
 800dd5e:	4aad      	ldr	r2, [pc, #692]	; (800e014 <_strtod_l+0xb0c>)
 800dd60:	402a      	ands	r2, r5
 800dd62:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800dd66:	f04f 31ff 	mov.w	r1, #4294967295
 800dd6a:	d816      	bhi.n	800dd9a <_strtod_l+0x892>
 800dd6c:	0d12      	lsrs	r2, r2, #20
 800dd6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dd72:	fa01 f303 	lsl.w	r3, r1, r3
 800dd76:	4298      	cmp	r0, r3
 800dd78:	d142      	bne.n	800de00 <_strtod_l+0x8f8>
 800dd7a:	4ba7      	ldr	r3, [pc, #668]	; (800e018 <_strtod_l+0xb10>)
 800dd7c:	429d      	cmp	r5, r3
 800dd7e:	d102      	bne.n	800dd86 <_strtod_l+0x87e>
 800dd80:	3001      	adds	r0, #1
 800dd82:	f43f addf 	beq.w	800d944 <_strtod_l+0x43c>
 800dd86:	4ba3      	ldr	r3, [pc, #652]	; (800e014 <_strtod_l+0xb0c>)
 800dd88:	402b      	ands	r3, r5
 800dd8a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dd8e:	f04f 0a00 	mov.w	sl, #0
 800dd92:	e7a0      	b.n	800dcd6 <_strtod_l+0x7ce>
 800dd94:	f04f 33ff 	mov.w	r3, #4294967295
 800dd98:	e7ed      	b.n	800dd76 <_strtod_l+0x86e>
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	e7eb      	b.n	800dd76 <_strtod_l+0x86e>
 800dd9e:	bb7b      	cbnz	r3, 800de00 <_strtod_l+0x8f8>
 800dda0:	f1ba 0f00 	cmp.w	sl, #0
 800dda4:	d12c      	bne.n	800de00 <_strtod_l+0x8f8>
 800dda6:	9904      	ldr	r1, [sp, #16]
 800dda8:	4a9a      	ldr	r2, [pc, #616]	; (800e014 <_strtod_l+0xb0c>)
 800ddaa:	465b      	mov	r3, fp
 800ddac:	b1f1      	cbz	r1, 800ddec <_strtod_l+0x8e4>
 800ddae:	ea02 010b 	and.w	r1, r2, fp
 800ddb2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ddb6:	dc19      	bgt.n	800ddec <_strtod_l+0x8e4>
 800ddb8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ddbc:	f77f ae5b 	ble.w	800da76 <_strtod_l+0x56e>
 800ddc0:	4a96      	ldr	r2, [pc, #600]	; (800e01c <_strtod_l+0xb14>)
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ddc8:	4650      	mov	r0, sl
 800ddca:	4659      	mov	r1, fp
 800ddcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ddd0:	f7f2 fc4a 	bl	8000668 <__aeabi_dmul>
 800ddd4:	4682      	mov	sl, r0
 800ddd6:	468b      	mov	fp, r1
 800ddd8:	2900      	cmp	r1, #0
 800ddda:	f47f adbe 	bne.w	800d95a <_strtod_l+0x452>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	f47f adbb 	bne.w	800d95a <_strtod_l+0x452>
 800dde4:	2322      	movs	r3, #34	; 0x22
 800dde6:	f8c9 3000 	str.w	r3, [r9]
 800ddea:	e5b6      	b.n	800d95a <_strtod_l+0x452>
 800ddec:	4013      	ands	r3, r2
 800ddee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ddf2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ddf6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ddfa:	f04f 3aff 	mov.w	sl, #4294967295
 800ddfe:	e76a      	b.n	800dcd6 <_strtod_l+0x7ce>
 800de00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de02:	b193      	cbz	r3, 800de2a <_strtod_l+0x922>
 800de04:	422b      	tst	r3, r5
 800de06:	f43f af66 	beq.w	800dcd6 <_strtod_l+0x7ce>
 800de0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de0c:	9a04      	ldr	r2, [sp, #16]
 800de0e:	4650      	mov	r0, sl
 800de10:	4659      	mov	r1, fp
 800de12:	b173      	cbz	r3, 800de32 <_strtod_l+0x92a>
 800de14:	f7ff fb5c 	bl	800d4d0 <sulp>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de20:	f7f2 fa6c 	bl	80002fc <__adddf3>
 800de24:	4682      	mov	sl, r0
 800de26:	468b      	mov	fp, r1
 800de28:	e755      	b.n	800dcd6 <_strtod_l+0x7ce>
 800de2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de2c:	ea13 0f0a 	tst.w	r3, sl
 800de30:	e7e9      	b.n	800de06 <_strtod_l+0x8fe>
 800de32:	f7ff fb4d 	bl	800d4d0 <sulp>
 800de36:	4602      	mov	r2, r0
 800de38:	460b      	mov	r3, r1
 800de3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de3e:	f7f2 fa5b 	bl	80002f8 <__aeabi_dsub>
 800de42:	2200      	movs	r2, #0
 800de44:	2300      	movs	r3, #0
 800de46:	4682      	mov	sl, r0
 800de48:	468b      	mov	fp, r1
 800de4a:	f7f2 fe75 	bl	8000b38 <__aeabi_dcmpeq>
 800de4e:	2800      	cmp	r0, #0
 800de50:	f47f ae11 	bne.w	800da76 <_strtod_l+0x56e>
 800de54:	e73f      	b.n	800dcd6 <_strtod_l+0x7ce>
 800de56:	4641      	mov	r1, r8
 800de58:	4620      	mov	r0, r4
 800de5a:	f001 ff2e 	bl	800fcba <__ratio>
 800de5e:	ec57 6b10 	vmov	r6, r7, d0
 800de62:	2200      	movs	r2, #0
 800de64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de68:	ee10 0a10 	vmov	r0, s0
 800de6c:	4639      	mov	r1, r7
 800de6e:	f7f2 fe77 	bl	8000b60 <__aeabi_dcmple>
 800de72:	2800      	cmp	r0, #0
 800de74:	d077      	beq.n	800df66 <_strtod_l+0xa5e>
 800de76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d04a      	beq.n	800df12 <_strtod_l+0xa0a>
 800de7c:	4b68      	ldr	r3, [pc, #416]	; (800e020 <_strtod_l+0xb18>)
 800de7e:	2200      	movs	r2, #0
 800de80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800de84:	4f66      	ldr	r7, [pc, #408]	; (800e020 <_strtod_l+0xb18>)
 800de86:	2600      	movs	r6, #0
 800de88:	4b62      	ldr	r3, [pc, #392]	; (800e014 <_strtod_l+0xb0c>)
 800de8a:	402b      	ands	r3, r5
 800de8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800de8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de90:	4b64      	ldr	r3, [pc, #400]	; (800e024 <_strtod_l+0xb1c>)
 800de92:	429a      	cmp	r2, r3
 800de94:	f040 80ce 	bne.w	800e034 <_strtod_l+0xb2c>
 800de98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800de9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dea0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800dea4:	ec4b ab10 	vmov	d0, sl, fp
 800dea8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800deac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800deb0:	f001 fe3e 	bl	800fb30 <__ulp>
 800deb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800deb8:	ec53 2b10 	vmov	r2, r3, d0
 800debc:	f7f2 fbd4 	bl	8000668 <__aeabi_dmul>
 800dec0:	4652      	mov	r2, sl
 800dec2:	465b      	mov	r3, fp
 800dec4:	f7f2 fa1a 	bl	80002fc <__adddf3>
 800dec8:	460b      	mov	r3, r1
 800deca:	4952      	ldr	r1, [pc, #328]	; (800e014 <_strtod_l+0xb0c>)
 800decc:	4a56      	ldr	r2, [pc, #344]	; (800e028 <_strtod_l+0xb20>)
 800dece:	4019      	ands	r1, r3
 800ded0:	4291      	cmp	r1, r2
 800ded2:	4682      	mov	sl, r0
 800ded4:	d95b      	bls.n	800df8e <_strtod_l+0xa86>
 800ded6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dedc:	4293      	cmp	r3, r2
 800dede:	d103      	bne.n	800dee8 <_strtod_l+0x9e0>
 800dee0:	9b08      	ldr	r3, [sp, #32]
 800dee2:	3301      	adds	r3, #1
 800dee4:	f43f ad2e 	beq.w	800d944 <_strtod_l+0x43c>
 800dee8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800e018 <_strtod_l+0xb10>
 800deec:	f04f 3aff 	mov.w	sl, #4294967295
 800def0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800def2:	4648      	mov	r0, r9
 800def4:	f001 fb84 	bl	800f600 <_Bfree>
 800def8:	9905      	ldr	r1, [sp, #20]
 800defa:	4648      	mov	r0, r9
 800defc:	f001 fb80 	bl	800f600 <_Bfree>
 800df00:	4641      	mov	r1, r8
 800df02:	4648      	mov	r0, r9
 800df04:	f001 fb7c 	bl	800f600 <_Bfree>
 800df08:	4621      	mov	r1, r4
 800df0a:	4648      	mov	r0, r9
 800df0c:	f001 fb78 	bl	800f600 <_Bfree>
 800df10:	e619      	b.n	800db46 <_strtod_l+0x63e>
 800df12:	f1ba 0f00 	cmp.w	sl, #0
 800df16:	d11a      	bne.n	800df4e <_strtod_l+0xa46>
 800df18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df1c:	b9eb      	cbnz	r3, 800df5a <_strtod_l+0xa52>
 800df1e:	2200      	movs	r2, #0
 800df20:	4b3f      	ldr	r3, [pc, #252]	; (800e020 <_strtod_l+0xb18>)
 800df22:	4630      	mov	r0, r6
 800df24:	4639      	mov	r1, r7
 800df26:	f7f2 fe11 	bl	8000b4c <__aeabi_dcmplt>
 800df2a:	b9c8      	cbnz	r0, 800df60 <_strtod_l+0xa58>
 800df2c:	4630      	mov	r0, r6
 800df2e:	4639      	mov	r1, r7
 800df30:	2200      	movs	r2, #0
 800df32:	4b3e      	ldr	r3, [pc, #248]	; (800e02c <_strtod_l+0xb24>)
 800df34:	f7f2 fb98 	bl	8000668 <__aeabi_dmul>
 800df38:	4606      	mov	r6, r0
 800df3a:	460f      	mov	r7, r1
 800df3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800df40:	9618      	str	r6, [sp, #96]	; 0x60
 800df42:	9319      	str	r3, [sp, #100]	; 0x64
 800df44:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800df48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800df4c:	e79c      	b.n	800de88 <_strtod_l+0x980>
 800df4e:	f1ba 0f01 	cmp.w	sl, #1
 800df52:	d102      	bne.n	800df5a <_strtod_l+0xa52>
 800df54:	2d00      	cmp	r5, #0
 800df56:	f43f ad8e 	beq.w	800da76 <_strtod_l+0x56e>
 800df5a:	2200      	movs	r2, #0
 800df5c:	4b34      	ldr	r3, [pc, #208]	; (800e030 <_strtod_l+0xb28>)
 800df5e:	e78f      	b.n	800de80 <_strtod_l+0x978>
 800df60:	2600      	movs	r6, #0
 800df62:	4f32      	ldr	r7, [pc, #200]	; (800e02c <_strtod_l+0xb24>)
 800df64:	e7ea      	b.n	800df3c <_strtod_l+0xa34>
 800df66:	4b31      	ldr	r3, [pc, #196]	; (800e02c <_strtod_l+0xb24>)
 800df68:	4630      	mov	r0, r6
 800df6a:	4639      	mov	r1, r7
 800df6c:	2200      	movs	r2, #0
 800df6e:	f7f2 fb7b 	bl	8000668 <__aeabi_dmul>
 800df72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df74:	4606      	mov	r6, r0
 800df76:	460f      	mov	r7, r1
 800df78:	b933      	cbnz	r3, 800df88 <_strtod_l+0xa80>
 800df7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df7e:	9010      	str	r0, [sp, #64]	; 0x40
 800df80:	9311      	str	r3, [sp, #68]	; 0x44
 800df82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df86:	e7df      	b.n	800df48 <_strtod_l+0xa40>
 800df88:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800df8c:	e7f9      	b.n	800df82 <_strtod_l+0xa7a>
 800df8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800df92:	9b04      	ldr	r3, [sp, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1ab      	bne.n	800def0 <_strtod_l+0x9e8>
 800df98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df9c:	0d1b      	lsrs	r3, r3, #20
 800df9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dfa0:	051b      	lsls	r3, r3, #20
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	465d      	mov	r5, fp
 800dfa6:	d1a3      	bne.n	800def0 <_strtod_l+0x9e8>
 800dfa8:	4639      	mov	r1, r7
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f7f2 fe0c 	bl	8000bc8 <__aeabi_d2iz>
 800dfb0:	f7f2 faf0 	bl	8000594 <__aeabi_i2d>
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	4639      	mov	r1, r7
 800dfba:	4630      	mov	r0, r6
 800dfbc:	f7f2 f99c 	bl	80002f8 <__aeabi_dsub>
 800dfc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	460f      	mov	r7, r1
 800dfc6:	b933      	cbnz	r3, 800dfd6 <_strtod_l+0xace>
 800dfc8:	f1ba 0f00 	cmp.w	sl, #0
 800dfcc:	d103      	bne.n	800dfd6 <_strtod_l+0xace>
 800dfce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800dfd2:	2d00      	cmp	r5, #0
 800dfd4:	d06d      	beq.n	800e0b2 <_strtod_l+0xbaa>
 800dfd6:	a30a      	add	r3, pc, #40	; (adr r3, 800e000 <_strtod_l+0xaf8>)
 800dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfdc:	4630      	mov	r0, r6
 800dfde:	4639      	mov	r1, r7
 800dfe0:	f7f2 fdb4 	bl	8000b4c <__aeabi_dcmplt>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	f47f acb8 	bne.w	800d95a <_strtod_l+0x452>
 800dfea:	a307      	add	r3, pc, #28	; (adr r3, 800e008 <_strtod_l+0xb00>)
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	4630      	mov	r0, r6
 800dff2:	4639      	mov	r1, r7
 800dff4:	f7f2 fdc8 	bl	8000b88 <__aeabi_dcmpgt>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f43f af79 	beq.w	800def0 <_strtod_l+0x9e8>
 800dffe:	e4ac      	b.n	800d95a <_strtod_l+0x452>
 800e000:	94a03595 	.word	0x94a03595
 800e004:	3fdfffff 	.word	0x3fdfffff
 800e008:	35afe535 	.word	0x35afe535
 800e00c:	3fe00000 	.word	0x3fe00000
 800e010:	000fffff 	.word	0x000fffff
 800e014:	7ff00000 	.word	0x7ff00000
 800e018:	7fefffff 	.word	0x7fefffff
 800e01c:	39500000 	.word	0x39500000
 800e020:	3ff00000 	.word	0x3ff00000
 800e024:	7fe00000 	.word	0x7fe00000
 800e028:	7c9fffff 	.word	0x7c9fffff
 800e02c:	3fe00000 	.word	0x3fe00000
 800e030:	bff00000 	.word	0xbff00000
 800e034:	9b04      	ldr	r3, [sp, #16]
 800e036:	b333      	cbz	r3, 800e086 <_strtod_l+0xb7e>
 800e038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e03a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e03e:	d822      	bhi.n	800e086 <_strtod_l+0xb7e>
 800e040:	a327      	add	r3, pc, #156	; (adr r3, 800e0e0 <_strtod_l+0xbd8>)
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	4630      	mov	r0, r6
 800e048:	4639      	mov	r1, r7
 800e04a:	f7f2 fd89 	bl	8000b60 <__aeabi_dcmple>
 800e04e:	b1a0      	cbz	r0, 800e07a <_strtod_l+0xb72>
 800e050:	4639      	mov	r1, r7
 800e052:	4630      	mov	r0, r6
 800e054:	f7f2 fde0 	bl	8000c18 <__aeabi_d2uiz>
 800e058:	2800      	cmp	r0, #0
 800e05a:	bf08      	it	eq
 800e05c:	2001      	moveq	r0, #1
 800e05e:	f7f2 fa89 	bl	8000574 <__aeabi_ui2d>
 800e062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e064:	4606      	mov	r6, r0
 800e066:	460f      	mov	r7, r1
 800e068:	bb03      	cbnz	r3, 800e0ac <_strtod_l+0xba4>
 800e06a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e06e:	9012      	str	r0, [sp, #72]	; 0x48
 800e070:	9313      	str	r3, [sp, #76]	; 0x4c
 800e072:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e076:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e07c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e07e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e082:	1a9b      	subs	r3, r3, r2
 800e084:	930b      	str	r3, [sp, #44]	; 0x2c
 800e086:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e08a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800e08e:	f001 fd4f 	bl	800fb30 <__ulp>
 800e092:	4650      	mov	r0, sl
 800e094:	ec53 2b10 	vmov	r2, r3, d0
 800e098:	4659      	mov	r1, fp
 800e09a:	f7f2 fae5 	bl	8000668 <__aeabi_dmul>
 800e09e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e0a2:	f7f2 f92b 	bl	80002fc <__adddf3>
 800e0a6:	4682      	mov	sl, r0
 800e0a8:	468b      	mov	fp, r1
 800e0aa:	e772      	b.n	800df92 <_strtod_l+0xa8a>
 800e0ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800e0b0:	e7df      	b.n	800e072 <_strtod_l+0xb6a>
 800e0b2:	a30d      	add	r3, pc, #52	; (adr r3, 800e0e8 <_strtod_l+0xbe0>)
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	f7f2 fd48 	bl	8000b4c <__aeabi_dcmplt>
 800e0bc:	e79c      	b.n	800dff8 <_strtod_l+0xaf0>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	930d      	str	r3, [sp, #52]	; 0x34
 800e0c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	f7ff ba61 	b.w	800d58e <_strtod_l+0x86>
 800e0cc:	2b65      	cmp	r3, #101	; 0x65
 800e0ce:	f04f 0200 	mov.w	r2, #0
 800e0d2:	f43f ab4e 	beq.w	800d772 <_strtod_l+0x26a>
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	4614      	mov	r4, r2
 800e0da:	9104      	str	r1, [sp, #16]
 800e0dc:	f7ff bacb 	b.w	800d676 <_strtod_l+0x16e>
 800e0e0:	ffc00000 	.word	0xffc00000
 800e0e4:	41dfffff 	.word	0x41dfffff
 800e0e8:	94a03595 	.word	0x94a03595
 800e0ec:	3fcfffff 	.word	0x3fcfffff

0800e0f0 <_strtod_r>:
 800e0f0:	4b05      	ldr	r3, [pc, #20]	; (800e108 <_strtod_r+0x18>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	b410      	push	{r4}
 800e0f6:	6a1b      	ldr	r3, [r3, #32]
 800e0f8:	4c04      	ldr	r4, [pc, #16]	; (800e10c <_strtod_r+0x1c>)
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	bf08      	it	eq
 800e0fe:	4623      	moveq	r3, r4
 800e100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e104:	f7ff ba00 	b.w	800d508 <_strtod_l>
 800e108:	20000018 	.word	0x20000018
 800e10c:	2000007c 	.word	0x2000007c

0800e110 <strtod>:
 800e110:	4b07      	ldr	r3, [pc, #28]	; (800e130 <strtod+0x20>)
 800e112:	4a08      	ldr	r2, [pc, #32]	; (800e134 <strtod+0x24>)
 800e114:	b410      	push	{r4}
 800e116:	681c      	ldr	r4, [r3, #0]
 800e118:	6a23      	ldr	r3, [r4, #32]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	bf08      	it	eq
 800e11e:	4613      	moveq	r3, r2
 800e120:	460a      	mov	r2, r1
 800e122:	4601      	mov	r1, r0
 800e124:	4620      	mov	r0, r4
 800e126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e12a:	f7ff b9ed 	b.w	800d508 <_strtod_l>
 800e12e:	bf00      	nop
 800e130:	20000018 	.word	0x20000018
 800e134:	2000007c 	.word	0x2000007c

0800e138 <_strtol_l.isra.0>:
 800e138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e13c:	4680      	mov	r8, r0
 800e13e:	4689      	mov	r9, r1
 800e140:	4692      	mov	sl, r2
 800e142:	461e      	mov	r6, r3
 800e144:	460f      	mov	r7, r1
 800e146:	463d      	mov	r5, r7
 800e148:	9808      	ldr	r0, [sp, #32]
 800e14a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e14e:	f7fe fa15 	bl	800c57c <__locale_ctype_ptr_l>
 800e152:	4420      	add	r0, r4
 800e154:	7843      	ldrb	r3, [r0, #1]
 800e156:	f013 0308 	ands.w	r3, r3, #8
 800e15a:	d132      	bne.n	800e1c2 <_strtol_l.isra.0+0x8a>
 800e15c:	2c2d      	cmp	r4, #45	; 0x2d
 800e15e:	d132      	bne.n	800e1c6 <_strtol_l.isra.0+0x8e>
 800e160:	787c      	ldrb	r4, [r7, #1]
 800e162:	1cbd      	adds	r5, r7, #2
 800e164:	2201      	movs	r2, #1
 800e166:	2e00      	cmp	r6, #0
 800e168:	d05d      	beq.n	800e226 <_strtol_l.isra.0+0xee>
 800e16a:	2e10      	cmp	r6, #16
 800e16c:	d109      	bne.n	800e182 <_strtol_l.isra.0+0x4a>
 800e16e:	2c30      	cmp	r4, #48	; 0x30
 800e170:	d107      	bne.n	800e182 <_strtol_l.isra.0+0x4a>
 800e172:	782b      	ldrb	r3, [r5, #0]
 800e174:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e178:	2b58      	cmp	r3, #88	; 0x58
 800e17a:	d14f      	bne.n	800e21c <_strtol_l.isra.0+0xe4>
 800e17c:	786c      	ldrb	r4, [r5, #1]
 800e17e:	2610      	movs	r6, #16
 800e180:	3502      	adds	r5, #2
 800e182:	2a00      	cmp	r2, #0
 800e184:	bf14      	ite	ne
 800e186:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e18a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e18e:	2700      	movs	r7, #0
 800e190:	fbb1 fcf6 	udiv	ip, r1, r6
 800e194:	4638      	mov	r0, r7
 800e196:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e19a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e19e:	2b09      	cmp	r3, #9
 800e1a0:	d817      	bhi.n	800e1d2 <_strtol_l.isra.0+0x9a>
 800e1a2:	461c      	mov	r4, r3
 800e1a4:	42a6      	cmp	r6, r4
 800e1a6:	dd23      	ble.n	800e1f0 <_strtol_l.isra.0+0xb8>
 800e1a8:	1c7b      	adds	r3, r7, #1
 800e1aa:	d007      	beq.n	800e1bc <_strtol_l.isra.0+0x84>
 800e1ac:	4584      	cmp	ip, r0
 800e1ae:	d31c      	bcc.n	800e1ea <_strtol_l.isra.0+0xb2>
 800e1b0:	d101      	bne.n	800e1b6 <_strtol_l.isra.0+0x7e>
 800e1b2:	45a6      	cmp	lr, r4
 800e1b4:	db19      	blt.n	800e1ea <_strtol_l.isra.0+0xb2>
 800e1b6:	fb00 4006 	mla	r0, r0, r6, r4
 800e1ba:	2701      	movs	r7, #1
 800e1bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1c0:	e7eb      	b.n	800e19a <_strtol_l.isra.0+0x62>
 800e1c2:	462f      	mov	r7, r5
 800e1c4:	e7bf      	b.n	800e146 <_strtol_l.isra.0+0xe>
 800e1c6:	2c2b      	cmp	r4, #43	; 0x2b
 800e1c8:	bf04      	itt	eq
 800e1ca:	1cbd      	addeq	r5, r7, #2
 800e1cc:	787c      	ldrbeq	r4, [r7, #1]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	e7c9      	b.n	800e166 <_strtol_l.isra.0+0x2e>
 800e1d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e1d6:	2b19      	cmp	r3, #25
 800e1d8:	d801      	bhi.n	800e1de <_strtol_l.isra.0+0xa6>
 800e1da:	3c37      	subs	r4, #55	; 0x37
 800e1dc:	e7e2      	b.n	800e1a4 <_strtol_l.isra.0+0x6c>
 800e1de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e1e2:	2b19      	cmp	r3, #25
 800e1e4:	d804      	bhi.n	800e1f0 <_strtol_l.isra.0+0xb8>
 800e1e6:	3c57      	subs	r4, #87	; 0x57
 800e1e8:	e7dc      	b.n	800e1a4 <_strtol_l.isra.0+0x6c>
 800e1ea:	f04f 37ff 	mov.w	r7, #4294967295
 800e1ee:	e7e5      	b.n	800e1bc <_strtol_l.isra.0+0x84>
 800e1f0:	1c7b      	adds	r3, r7, #1
 800e1f2:	d108      	bne.n	800e206 <_strtol_l.isra.0+0xce>
 800e1f4:	2322      	movs	r3, #34	; 0x22
 800e1f6:	f8c8 3000 	str.w	r3, [r8]
 800e1fa:	4608      	mov	r0, r1
 800e1fc:	f1ba 0f00 	cmp.w	sl, #0
 800e200:	d107      	bne.n	800e212 <_strtol_l.isra.0+0xda>
 800e202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e206:	b102      	cbz	r2, 800e20a <_strtol_l.isra.0+0xd2>
 800e208:	4240      	negs	r0, r0
 800e20a:	f1ba 0f00 	cmp.w	sl, #0
 800e20e:	d0f8      	beq.n	800e202 <_strtol_l.isra.0+0xca>
 800e210:	b10f      	cbz	r7, 800e216 <_strtol_l.isra.0+0xde>
 800e212:	f105 39ff 	add.w	r9, r5, #4294967295
 800e216:	f8ca 9000 	str.w	r9, [sl]
 800e21a:	e7f2      	b.n	800e202 <_strtol_l.isra.0+0xca>
 800e21c:	2430      	movs	r4, #48	; 0x30
 800e21e:	2e00      	cmp	r6, #0
 800e220:	d1af      	bne.n	800e182 <_strtol_l.isra.0+0x4a>
 800e222:	2608      	movs	r6, #8
 800e224:	e7ad      	b.n	800e182 <_strtol_l.isra.0+0x4a>
 800e226:	2c30      	cmp	r4, #48	; 0x30
 800e228:	d0a3      	beq.n	800e172 <_strtol_l.isra.0+0x3a>
 800e22a:	260a      	movs	r6, #10
 800e22c:	e7a9      	b.n	800e182 <_strtol_l.isra.0+0x4a>
	...

0800e230 <_strtol_r>:
 800e230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e232:	4c06      	ldr	r4, [pc, #24]	; (800e24c <_strtol_r+0x1c>)
 800e234:	4d06      	ldr	r5, [pc, #24]	; (800e250 <_strtol_r+0x20>)
 800e236:	6824      	ldr	r4, [r4, #0]
 800e238:	6a24      	ldr	r4, [r4, #32]
 800e23a:	2c00      	cmp	r4, #0
 800e23c:	bf08      	it	eq
 800e23e:	462c      	moveq	r4, r5
 800e240:	9400      	str	r4, [sp, #0]
 800e242:	f7ff ff79 	bl	800e138 <_strtol_l.isra.0>
 800e246:	b003      	add	sp, #12
 800e248:	bd30      	pop	{r4, r5, pc}
 800e24a:	bf00      	nop
 800e24c:	20000018 	.word	0x20000018
 800e250:	2000007c 	.word	0x2000007c

0800e254 <strtol>:
 800e254:	4b08      	ldr	r3, [pc, #32]	; (800e278 <strtol+0x24>)
 800e256:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e258:	681c      	ldr	r4, [r3, #0]
 800e25a:	4d08      	ldr	r5, [pc, #32]	; (800e27c <strtol+0x28>)
 800e25c:	6a23      	ldr	r3, [r4, #32]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	bf08      	it	eq
 800e262:	462b      	moveq	r3, r5
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	4613      	mov	r3, r2
 800e268:	460a      	mov	r2, r1
 800e26a:	4601      	mov	r1, r0
 800e26c:	4620      	mov	r0, r4
 800e26e:	f7ff ff63 	bl	800e138 <_strtol_l.isra.0>
 800e272:	b003      	add	sp, #12
 800e274:	bd30      	pop	{r4, r5, pc}
 800e276:	bf00      	nop
 800e278:	20000018 	.word	0x20000018
 800e27c:	2000007c 	.word	0x2000007c

0800e280 <__ascii_wctomb>:
 800e280:	b149      	cbz	r1, 800e296 <__ascii_wctomb+0x16>
 800e282:	2aff      	cmp	r2, #255	; 0xff
 800e284:	bf85      	ittet	hi
 800e286:	238a      	movhi	r3, #138	; 0x8a
 800e288:	6003      	strhi	r3, [r0, #0]
 800e28a:	700a      	strbls	r2, [r1, #0]
 800e28c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e290:	bf98      	it	ls
 800e292:	2001      	movls	r0, #1
 800e294:	4770      	bx	lr
 800e296:	4608      	mov	r0, r1
 800e298:	4770      	bx	lr

0800e29a <quorem>:
 800e29a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29e:	6903      	ldr	r3, [r0, #16]
 800e2a0:	690c      	ldr	r4, [r1, #16]
 800e2a2:	42a3      	cmp	r3, r4
 800e2a4:	4680      	mov	r8, r0
 800e2a6:	f2c0 8082 	blt.w	800e3ae <quorem+0x114>
 800e2aa:	3c01      	subs	r4, #1
 800e2ac:	f101 0714 	add.w	r7, r1, #20
 800e2b0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e2b4:	f100 0614 	add.w	r6, r0, #20
 800e2b8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e2bc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e2c0:	eb06 030c 	add.w	r3, r6, ip
 800e2c4:	3501      	adds	r5, #1
 800e2c6:	eb07 090c 	add.w	r9, r7, ip
 800e2ca:	9301      	str	r3, [sp, #4]
 800e2cc:	fbb0 f5f5 	udiv	r5, r0, r5
 800e2d0:	b395      	cbz	r5, 800e338 <quorem+0x9e>
 800e2d2:	f04f 0a00 	mov.w	sl, #0
 800e2d6:	4638      	mov	r0, r7
 800e2d8:	46b6      	mov	lr, r6
 800e2da:	46d3      	mov	fp, sl
 800e2dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2e0:	b293      	uxth	r3, r2
 800e2e2:	fb05 a303 	mla	r3, r5, r3, sl
 800e2e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	ebab 0303 	sub.w	r3, fp, r3
 800e2f0:	0c12      	lsrs	r2, r2, #16
 800e2f2:	f8de b000 	ldr.w	fp, [lr]
 800e2f6:	fb05 a202 	mla	r2, r5, r2, sl
 800e2fa:	fa13 f38b 	uxtah	r3, r3, fp
 800e2fe:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e302:	fa1f fb82 	uxth.w	fp, r2
 800e306:	f8de 2000 	ldr.w	r2, [lr]
 800e30a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e30e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e312:	b29b      	uxth	r3, r3
 800e314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e318:	4581      	cmp	r9, r0
 800e31a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e31e:	f84e 3b04 	str.w	r3, [lr], #4
 800e322:	d2db      	bcs.n	800e2dc <quorem+0x42>
 800e324:	f856 300c 	ldr.w	r3, [r6, ip]
 800e328:	b933      	cbnz	r3, 800e338 <quorem+0x9e>
 800e32a:	9b01      	ldr	r3, [sp, #4]
 800e32c:	3b04      	subs	r3, #4
 800e32e:	429e      	cmp	r6, r3
 800e330:	461a      	mov	r2, r3
 800e332:	d330      	bcc.n	800e396 <quorem+0xfc>
 800e334:	f8c8 4010 	str.w	r4, [r8, #16]
 800e338:	4640      	mov	r0, r8
 800e33a:	f001 fb81 	bl	800fa40 <__mcmp>
 800e33e:	2800      	cmp	r0, #0
 800e340:	db25      	blt.n	800e38e <quorem+0xf4>
 800e342:	3501      	adds	r5, #1
 800e344:	4630      	mov	r0, r6
 800e346:	f04f 0c00 	mov.w	ip, #0
 800e34a:	f857 2b04 	ldr.w	r2, [r7], #4
 800e34e:	f8d0 e000 	ldr.w	lr, [r0]
 800e352:	b293      	uxth	r3, r2
 800e354:	ebac 0303 	sub.w	r3, ip, r3
 800e358:	0c12      	lsrs	r2, r2, #16
 800e35a:	fa13 f38e 	uxtah	r3, r3, lr
 800e35e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e362:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e366:	b29b      	uxth	r3, r3
 800e368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e36c:	45b9      	cmp	r9, r7
 800e36e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e372:	f840 3b04 	str.w	r3, [r0], #4
 800e376:	d2e8      	bcs.n	800e34a <quorem+0xb0>
 800e378:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e37c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e380:	b92a      	cbnz	r2, 800e38e <quorem+0xf4>
 800e382:	3b04      	subs	r3, #4
 800e384:	429e      	cmp	r6, r3
 800e386:	461a      	mov	r2, r3
 800e388:	d30b      	bcc.n	800e3a2 <quorem+0x108>
 800e38a:	f8c8 4010 	str.w	r4, [r8, #16]
 800e38e:	4628      	mov	r0, r5
 800e390:	b003      	add	sp, #12
 800e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e396:	6812      	ldr	r2, [r2, #0]
 800e398:	3b04      	subs	r3, #4
 800e39a:	2a00      	cmp	r2, #0
 800e39c:	d1ca      	bne.n	800e334 <quorem+0x9a>
 800e39e:	3c01      	subs	r4, #1
 800e3a0:	e7c5      	b.n	800e32e <quorem+0x94>
 800e3a2:	6812      	ldr	r2, [r2, #0]
 800e3a4:	3b04      	subs	r3, #4
 800e3a6:	2a00      	cmp	r2, #0
 800e3a8:	d1ef      	bne.n	800e38a <quorem+0xf0>
 800e3aa:	3c01      	subs	r4, #1
 800e3ac:	e7ea      	b.n	800e384 <quorem+0xea>
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	e7ee      	b.n	800e390 <quorem+0xf6>
 800e3b2:	0000      	movs	r0, r0
 800e3b4:	0000      	movs	r0, r0
	...

0800e3b8 <_dtoa_r>:
 800e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	ec57 6b10 	vmov	r6, r7, d0
 800e3c0:	b097      	sub	sp, #92	; 0x5c
 800e3c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e3c4:	9106      	str	r1, [sp, #24]
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	920b      	str	r2, [sp, #44]	; 0x2c
 800e3ca:	9312      	str	r3, [sp, #72]	; 0x48
 800e3cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e3d0:	e9cd 6700 	strd	r6, r7, [sp]
 800e3d4:	b93d      	cbnz	r5, 800e3e6 <_dtoa_r+0x2e>
 800e3d6:	2010      	movs	r0, #16
 800e3d8:	f7fe f8e2 	bl	800c5a0 <malloc>
 800e3dc:	6260      	str	r0, [r4, #36]	; 0x24
 800e3de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3e2:	6005      	str	r5, [r0, #0]
 800e3e4:	60c5      	str	r5, [r0, #12]
 800e3e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3e8:	6819      	ldr	r1, [r3, #0]
 800e3ea:	b151      	cbz	r1, 800e402 <_dtoa_r+0x4a>
 800e3ec:	685a      	ldr	r2, [r3, #4]
 800e3ee:	604a      	str	r2, [r1, #4]
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	4093      	lsls	r3, r2
 800e3f4:	608b      	str	r3, [r1, #8]
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f001 f902 	bl	800f600 <_Bfree>
 800e3fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3fe:	2200      	movs	r2, #0
 800e400:	601a      	str	r2, [r3, #0]
 800e402:	1e3b      	subs	r3, r7, #0
 800e404:	bfbb      	ittet	lt
 800e406:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e40a:	9301      	strlt	r3, [sp, #4]
 800e40c:	2300      	movge	r3, #0
 800e40e:	2201      	movlt	r2, #1
 800e410:	bfac      	ite	ge
 800e412:	f8c8 3000 	strge.w	r3, [r8]
 800e416:	f8c8 2000 	strlt.w	r2, [r8]
 800e41a:	4baf      	ldr	r3, [pc, #700]	; (800e6d8 <_dtoa_r+0x320>)
 800e41c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e420:	ea33 0308 	bics.w	r3, r3, r8
 800e424:	d114      	bne.n	800e450 <_dtoa_r+0x98>
 800e426:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e428:	f242 730f 	movw	r3, #9999	; 0x270f
 800e42c:	6013      	str	r3, [r2, #0]
 800e42e:	9b00      	ldr	r3, [sp, #0]
 800e430:	b923      	cbnz	r3, 800e43c <_dtoa_r+0x84>
 800e432:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e436:	2800      	cmp	r0, #0
 800e438:	f000 8542 	beq.w	800eec0 <_dtoa_r+0xb08>
 800e43c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e43e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e6ec <_dtoa_r+0x334>
 800e442:	2b00      	cmp	r3, #0
 800e444:	f000 8544 	beq.w	800eed0 <_dtoa_r+0xb18>
 800e448:	f10b 0303 	add.w	r3, fp, #3
 800e44c:	f000 bd3e 	b.w	800eecc <_dtoa_r+0xb14>
 800e450:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e454:	2200      	movs	r2, #0
 800e456:	2300      	movs	r3, #0
 800e458:	4630      	mov	r0, r6
 800e45a:	4639      	mov	r1, r7
 800e45c:	f7f2 fb6c 	bl	8000b38 <__aeabi_dcmpeq>
 800e460:	4681      	mov	r9, r0
 800e462:	b168      	cbz	r0, 800e480 <_dtoa_r+0xc8>
 800e464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e466:	2301      	movs	r3, #1
 800e468:	6013      	str	r3, [r2, #0]
 800e46a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 8524 	beq.w	800eeba <_dtoa_r+0xb02>
 800e472:	4b9a      	ldr	r3, [pc, #616]	; (800e6dc <_dtoa_r+0x324>)
 800e474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e476:	f103 3bff 	add.w	fp, r3, #4294967295
 800e47a:	6013      	str	r3, [r2, #0]
 800e47c:	f000 bd28 	b.w	800eed0 <_dtoa_r+0xb18>
 800e480:	aa14      	add	r2, sp, #80	; 0x50
 800e482:	a915      	add	r1, sp, #84	; 0x54
 800e484:	ec47 6b10 	vmov	d0, r6, r7
 800e488:	4620      	mov	r0, r4
 800e48a:	f001 fbc7 	bl	800fc1c <__d2b>
 800e48e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e492:	9004      	str	r0, [sp, #16]
 800e494:	2d00      	cmp	r5, #0
 800e496:	d07c      	beq.n	800e592 <_dtoa_r+0x1da>
 800e498:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e49c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e4a0:	46b2      	mov	sl, r6
 800e4a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e4a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e4aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	4b8b      	ldr	r3, [pc, #556]	; (800e6e0 <_dtoa_r+0x328>)
 800e4b2:	4650      	mov	r0, sl
 800e4b4:	4659      	mov	r1, fp
 800e4b6:	f7f1 ff1f 	bl	80002f8 <__aeabi_dsub>
 800e4ba:	a381      	add	r3, pc, #516	; (adr r3, 800e6c0 <_dtoa_r+0x308>)
 800e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c0:	f7f2 f8d2 	bl	8000668 <__aeabi_dmul>
 800e4c4:	a380      	add	r3, pc, #512	; (adr r3, 800e6c8 <_dtoa_r+0x310>)
 800e4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ca:	f7f1 ff17 	bl	80002fc <__adddf3>
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	460f      	mov	r7, r1
 800e4d4:	f7f2 f85e 	bl	8000594 <__aeabi_i2d>
 800e4d8:	a37d      	add	r3, pc, #500	; (adr r3, 800e6d0 <_dtoa_r+0x318>)
 800e4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4de:	f7f2 f8c3 	bl	8000668 <__aeabi_dmul>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	4639      	mov	r1, r7
 800e4ea:	f7f1 ff07 	bl	80002fc <__adddf3>
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	460f      	mov	r7, r1
 800e4f2:	f7f2 fb69 	bl	8000bc8 <__aeabi_d2iz>
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	4682      	mov	sl, r0
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	4639      	mov	r1, r7
 800e500:	f7f2 fb24 	bl	8000b4c <__aeabi_dcmplt>
 800e504:	b148      	cbz	r0, 800e51a <_dtoa_r+0x162>
 800e506:	4650      	mov	r0, sl
 800e508:	f7f2 f844 	bl	8000594 <__aeabi_i2d>
 800e50c:	4632      	mov	r2, r6
 800e50e:	463b      	mov	r3, r7
 800e510:	f7f2 fb12 	bl	8000b38 <__aeabi_dcmpeq>
 800e514:	b908      	cbnz	r0, 800e51a <_dtoa_r+0x162>
 800e516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e51a:	f1ba 0f16 	cmp.w	sl, #22
 800e51e:	d859      	bhi.n	800e5d4 <_dtoa_r+0x21c>
 800e520:	4970      	ldr	r1, [pc, #448]	; (800e6e4 <_dtoa_r+0x32c>)
 800e522:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e526:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e52a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e52e:	f7f2 fb2b 	bl	8000b88 <__aeabi_dcmpgt>
 800e532:	2800      	cmp	r0, #0
 800e534:	d050      	beq.n	800e5d8 <_dtoa_r+0x220>
 800e536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e53a:	2300      	movs	r3, #0
 800e53c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e53e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e540:	1b5d      	subs	r5, r3, r5
 800e542:	f1b5 0801 	subs.w	r8, r5, #1
 800e546:	bf49      	itett	mi
 800e548:	f1c5 0301 	rsbmi	r3, r5, #1
 800e54c:	2300      	movpl	r3, #0
 800e54e:	9305      	strmi	r3, [sp, #20]
 800e550:	f04f 0800 	movmi.w	r8, #0
 800e554:	bf58      	it	pl
 800e556:	9305      	strpl	r3, [sp, #20]
 800e558:	f1ba 0f00 	cmp.w	sl, #0
 800e55c:	db3e      	blt.n	800e5dc <_dtoa_r+0x224>
 800e55e:	2300      	movs	r3, #0
 800e560:	44d0      	add	r8, sl
 800e562:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e566:	9307      	str	r3, [sp, #28]
 800e568:	9b06      	ldr	r3, [sp, #24]
 800e56a:	2b09      	cmp	r3, #9
 800e56c:	f200 8090 	bhi.w	800e690 <_dtoa_r+0x2d8>
 800e570:	2b05      	cmp	r3, #5
 800e572:	bfc4      	itt	gt
 800e574:	3b04      	subgt	r3, #4
 800e576:	9306      	strgt	r3, [sp, #24]
 800e578:	9b06      	ldr	r3, [sp, #24]
 800e57a:	f1a3 0302 	sub.w	r3, r3, #2
 800e57e:	bfcc      	ite	gt
 800e580:	2500      	movgt	r5, #0
 800e582:	2501      	movle	r5, #1
 800e584:	2b03      	cmp	r3, #3
 800e586:	f200 808f 	bhi.w	800e6a8 <_dtoa_r+0x2f0>
 800e58a:	e8df f003 	tbb	[pc, r3]
 800e58e:	7f7d      	.short	0x7f7d
 800e590:	7131      	.short	0x7131
 800e592:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e596:	441d      	add	r5, r3
 800e598:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e59c:	2820      	cmp	r0, #32
 800e59e:	dd13      	ble.n	800e5c8 <_dtoa_r+0x210>
 800e5a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e5a4:	9b00      	ldr	r3, [sp, #0]
 800e5a6:	fa08 f800 	lsl.w	r8, r8, r0
 800e5aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e5ae:	fa23 f000 	lsr.w	r0, r3, r0
 800e5b2:	ea48 0000 	orr.w	r0, r8, r0
 800e5b6:	f7f1 ffdd 	bl	8000574 <__aeabi_ui2d>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	4682      	mov	sl, r0
 800e5be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e5c2:	3d01      	subs	r5, #1
 800e5c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e5c6:	e772      	b.n	800e4ae <_dtoa_r+0xf6>
 800e5c8:	9b00      	ldr	r3, [sp, #0]
 800e5ca:	f1c0 0020 	rsb	r0, r0, #32
 800e5ce:	fa03 f000 	lsl.w	r0, r3, r0
 800e5d2:	e7f0      	b.n	800e5b6 <_dtoa_r+0x1fe>
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e7b1      	b.n	800e53c <_dtoa_r+0x184>
 800e5d8:	900f      	str	r0, [sp, #60]	; 0x3c
 800e5da:	e7b0      	b.n	800e53e <_dtoa_r+0x186>
 800e5dc:	9b05      	ldr	r3, [sp, #20]
 800e5de:	eba3 030a 	sub.w	r3, r3, sl
 800e5e2:	9305      	str	r3, [sp, #20]
 800e5e4:	f1ca 0300 	rsb	r3, sl, #0
 800e5e8:	9307      	str	r3, [sp, #28]
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	930e      	str	r3, [sp, #56]	; 0x38
 800e5ee:	e7bb      	b.n	800e568 <_dtoa_r+0x1b0>
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	930a      	str	r3, [sp, #40]	; 0x28
 800e5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	dd59      	ble.n	800e6ae <_dtoa_r+0x2f6>
 800e5fa:	9302      	str	r3, [sp, #8]
 800e5fc:	4699      	mov	r9, r3
 800e5fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e600:	2200      	movs	r2, #0
 800e602:	6072      	str	r2, [r6, #4]
 800e604:	2204      	movs	r2, #4
 800e606:	f102 0014 	add.w	r0, r2, #20
 800e60a:	4298      	cmp	r0, r3
 800e60c:	6871      	ldr	r1, [r6, #4]
 800e60e:	d953      	bls.n	800e6b8 <_dtoa_r+0x300>
 800e610:	4620      	mov	r0, r4
 800e612:	f000 ffc1 	bl	800f598 <_Balloc>
 800e616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e618:	6030      	str	r0, [r6, #0]
 800e61a:	f1b9 0f0e 	cmp.w	r9, #14
 800e61e:	f8d3 b000 	ldr.w	fp, [r3]
 800e622:	f200 80e6 	bhi.w	800e7f2 <_dtoa_r+0x43a>
 800e626:	2d00      	cmp	r5, #0
 800e628:	f000 80e3 	beq.w	800e7f2 <_dtoa_r+0x43a>
 800e62c:	ed9d 7b00 	vldr	d7, [sp]
 800e630:	f1ba 0f00 	cmp.w	sl, #0
 800e634:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e638:	dd74      	ble.n	800e724 <_dtoa_r+0x36c>
 800e63a:	4a2a      	ldr	r2, [pc, #168]	; (800e6e4 <_dtoa_r+0x32c>)
 800e63c:	f00a 030f 	and.w	r3, sl, #15
 800e640:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e644:	ed93 7b00 	vldr	d7, [r3]
 800e648:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e64c:	06f0      	lsls	r0, r6, #27
 800e64e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e652:	d565      	bpl.n	800e720 <_dtoa_r+0x368>
 800e654:	4b24      	ldr	r3, [pc, #144]	; (800e6e8 <_dtoa_r+0x330>)
 800e656:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e65a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e65e:	f7f2 f92d 	bl	80008bc <__aeabi_ddiv>
 800e662:	e9cd 0100 	strd	r0, r1, [sp]
 800e666:	f006 060f 	and.w	r6, r6, #15
 800e66a:	2503      	movs	r5, #3
 800e66c:	4f1e      	ldr	r7, [pc, #120]	; (800e6e8 <_dtoa_r+0x330>)
 800e66e:	e04c      	b.n	800e70a <_dtoa_r+0x352>
 800e670:	2301      	movs	r3, #1
 800e672:	930a      	str	r3, [sp, #40]	; 0x28
 800e674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e676:	4453      	add	r3, sl
 800e678:	f103 0901 	add.w	r9, r3, #1
 800e67c:	9302      	str	r3, [sp, #8]
 800e67e:	464b      	mov	r3, r9
 800e680:	2b01      	cmp	r3, #1
 800e682:	bfb8      	it	lt
 800e684:	2301      	movlt	r3, #1
 800e686:	e7ba      	b.n	800e5fe <_dtoa_r+0x246>
 800e688:	2300      	movs	r3, #0
 800e68a:	e7b2      	b.n	800e5f2 <_dtoa_r+0x23a>
 800e68c:	2300      	movs	r3, #0
 800e68e:	e7f0      	b.n	800e672 <_dtoa_r+0x2ba>
 800e690:	2501      	movs	r5, #1
 800e692:	2300      	movs	r3, #0
 800e694:	9306      	str	r3, [sp, #24]
 800e696:	950a      	str	r5, [sp, #40]	; 0x28
 800e698:	f04f 33ff 	mov.w	r3, #4294967295
 800e69c:	9302      	str	r3, [sp, #8]
 800e69e:	4699      	mov	r9, r3
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	2312      	movs	r3, #18
 800e6a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800e6a6:	e7aa      	b.n	800e5fe <_dtoa_r+0x246>
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	930a      	str	r3, [sp, #40]	; 0x28
 800e6ac:	e7f4      	b.n	800e698 <_dtoa_r+0x2e0>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	9302      	str	r3, [sp, #8]
 800e6b2:	4699      	mov	r9, r3
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	e7f5      	b.n	800e6a4 <_dtoa_r+0x2ec>
 800e6b8:	3101      	adds	r1, #1
 800e6ba:	6071      	str	r1, [r6, #4]
 800e6bc:	0052      	lsls	r2, r2, #1
 800e6be:	e7a2      	b.n	800e606 <_dtoa_r+0x24e>
 800e6c0:	636f4361 	.word	0x636f4361
 800e6c4:	3fd287a7 	.word	0x3fd287a7
 800e6c8:	8b60c8b3 	.word	0x8b60c8b3
 800e6cc:	3fc68a28 	.word	0x3fc68a28
 800e6d0:	509f79fb 	.word	0x509f79fb
 800e6d4:	3fd34413 	.word	0x3fd34413
 800e6d8:	7ff00000 	.word	0x7ff00000
 800e6dc:	0801187c 	.word	0x0801187c
 800e6e0:	3ff80000 	.word	0x3ff80000
 800e6e4:	08011780 	.word	0x08011780
 800e6e8:	08011758 	.word	0x08011758
 800e6ec:	08011752 	.word	0x08011752
 800e6f0:	07f1      	lsls	r1, r6, #31
 800e6f2:	d508      	bpl.n	800e706 <_dtoa_r+0x34e>
 800e6f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e6f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6fc:	f7f1 ffb4 	bl	8000668 <__aeabi_dmul>
 800e700:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e704:	3501      	adds	r5, #1
 800e706:	1076      	asrs	r6, r6, #1
 800e708:	3708      	adds	r7, #8
 800e70a:	2e00      	cmp	r6, #0
 800e70c:	d1f0      	bne.n	800e6f0 <_dtoa_r+0x338>
 800e70e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e712:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e716:	f7f2 f8d1 	bl	80008bc <__aeabi_ddiv>
 800e71a:	e9cd 0100 	strd	r0, r1, [sp]
 800e71e:	e01a      	b.n	800e756 <_dtoa_r+0x39e>
 800e720:	2502      	movs	r5, #2
 800e722:	e7a3      	b.n	800e66c <_dtoa_r+0x2b4>
 800e724:	f000 80a0 	beq.w	800e868 <_dtoa_r+0x4b0>
 800e728:	f1ca 0600 	rsb	r6, sl, #0
 800e72c:	4b9f      	ldr	r3, [pc, #636]	; (800e9ac <_dtoa_r+0x5f4>)
 800e72e:	4fa0      	ldr	r7, [pc, #640]	; (800e9b0 <_dtoa_r+0x5f8>)
 800e730:	f006 020f 	and.w	r2, r6, #15
 800e734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e740:	f7f1 ff92 	bl	8000668 <__aeabi_dmul>
 800e744:	e9cd 0100 	strd	r0, r1, [sp]
 800e748:	1136      	asrs	r6, r6, #4
 800e74a:	2300      	movs	r3, #0
 800e74c:	2502      	movs	r5, #2
 800e74e:	2e00      	cmp	r6, #0
 800e750:	d17f      	bne.n	800e852 <_dtoa_r+0x49a>
 800e752:	2b00      	cmp	r3, #0
 800e754:	d1e1      	bne.n	800e71a <_dtoa_r+0x362>
 800e756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f000 8087 	beq.w	800e86c <_dtoa_r+0x4b4>
 800e75e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e762:	2200      	movs	r2, #0
 800e764:	4b93      	ldr	r3, [pc, #588]	; (800e9b4 <_dtoa_r+0x5fc>)
 800e766:	4630      	mov	r0, r6
 800e768:	4639      	mov	r1, r7
 800e76a:	f7f2 f9ef 	bl	8000b4c <__aeabi_dcmplt>
 800e76e:	2800      	cmp	r0, #0
 800e770:	d07c      	beq.n	800e86c <_dtoa_r+0x4b4>
 800e772:	f1b9 0f00 	cmp.w	r9, #0
 800e776:	d079      	beq.n	800e86c <_dtoa_r+0x4b4>
 800e778:	9b02      	ldr	r3, [sp, #8]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	dd35      	ble.n	800e7ea <_dtoa_r+0x432>
 800e77e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e782:	9308      	str	r3, [sp, #32]
 800e784:	4639      	mov	r1, r7
 800e786:	2200      	movs	r2, #0
 800e788:	4b8b      	ldr	r3, [pc, #556]	; (800e9b8 <_dtoa_r+0x600>)
 800e78a:	4630      	mov	r0, r6
 800e78c:	f7f1 ff6c 	bl	8000668 <__aeabi_dmul>
 800e790:	e9cd 0100 	strd	r0, r1, [sp]
 800e794:	9f02      	ldr	r7, [sp, #8]
 800e796:	3501      	adds	r5, #1
 800e798:	4628      	mov	r0, r5
 800e79a:	f7f1 fefb 	bl	8000594 <__aeabi_i2d>
 800e79e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7a2:	f7f1 ff61 	bl	8000668 <__aeabi_dmul>
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	4b84      	ldr	r3, [pc, #528]	; (800e9bc <_dtoa_r+0x604>)
 800e7aa:	f7f1 fda7 	bl	80002fc <__adddf3>
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e7b4:	2f00      	cmp	r7, #0
 800e7b6:	d15d      	bne.n	800e874 <_dtoa_r+0x4bc>
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	4b81      	ldr	r3, [pc, #516]	; (800e9c0 <_dtoa_r+0x608>)
 800e7bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7c0:	f7f1 fd9a 	bl	80002f8 <__aeabi_dsub>
 800e7c4:	462a      	mov	r2, r5
 800e7c6:	4633      	mov	r3, r6
 800e7c8:	e9cd 0100 	strd	r0, r1, [sp]
 800e7cc:	f7f2 f9dc 	bl	8000b88 <__aeabi_dcmpgt>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	f040 8288 	bne.w	800ece6 <_dtoa_r+0x92e>
 800e7d6:	462a      	mov	r2, r5
 800e7d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e7dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7e0:	f7f2 f9b4 	bl	8000b4c <__aeabi_dcmplt>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	f040 827c 	bne.w	800ece2 <_dtoa_r+0x92a>
 800e7ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e7ee:	e9cd 2300 	strd	r2, r3, [sp]
 800e7f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f2c0 8150 	blt.w	800ea9a <_dtoa_r+0x6e2>
 800e7fa:	f1ba 0f0e 	cmp.w	sl, #14
 800e7fe:	f300 814c 	bgt.w	800ea9a <_dtoa_r+0x6e2>
 800e802:	4b6a      	ldr	r3, [pc, #424]	; (800e9ac <_dtoa_r+0x5f4>)
 800e804:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e808:	ed93 7b00 	vldr	d7, [r3]
 800e80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e814:	f280 80d8 	bge.w	800e9c8 <_dtoa_r+0x610>
 800e818:	f1b9 0f00 	cmp.w	r9, #0
 800e81c:	f300 80d4 	bgt.w	800e9c8 <_dtoa_r+0x610>
 800e820:	f040 825e 	bne.w	800ece0 <_dtoa_r+0x928>
 800e824:	2200      	movs	r2, #0
 800e826:	4b66      	ldr	r3, [pc, #408]	; (800e9c0 <_dtoa_r+0x608>)
 800e828:	ec51 0b17 	vmov	r0, r1, d7
 800e82c:	f7f1 ff1c 	bl	8000668 <__aeabi_dmul>
 800e830:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e834:	f7f2 f99e 	bl	8000b74 <__aeabi_dcmpge>
 800e838:	464f      	mov	r7, r9
 800e83a:	464e      	mov	r6, r9
 800e83c:	2800      	cmp	r0, #0
 800e83e:	f040 8234 	bne.w	800ecaa <_dtoa_r+0x8f2>
 800e842:	2331      	movs	r3, #49	; 0x31
 800e844:	f10b 0501 	add.w	r5, fp, #1
 800e848:	f88b 3000 	strb.w	r3, [fp]
 800e84c:	f10a 0a01 	add.w	sl, sl, #1
 800e850:	e22f      	b.n	800ecb2 <_dtoa_r+0x8fa>
 800e852:	07f2      	lsls	r2, r6, #31
 800e854:	d505      	bpl.n	800e862 <_dtoa_r+0x4aa>
 800e856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e85a:	f7f1 ff05 	bl	8000668 <__aeabi_dmul>
 800e85e:	3501      	adds	r5, #1
 800e860:	2301      	movs	r3, #1
 800e862:	1076      	asrs	r6, r6, #1
 800e864:	3708      	adds	r7, #8
 800e866:	e772      	b.n	800e74e <_dtoa_r+0x396>
 800e868:	2502      	movs	r5, #2
 800e86a:	e774      	b.n	800e756 <_dtoa_r+0x39e>
 800e86c:	f8cd a020 	str.w	sl, [sp, #32]
 800e870:	464f      	mov	r7, r9
 800e872:	e791      	b.n	800e798 <_dtoa_r+0x3e0>
 800e874:	4b4d      	ldr	r3, [pc, #308]	; (800e9ac <_dtoa_r+0x5f4>)
 800e876:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e87a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e880:	2b00      	cmp	r3, #0
 800e882:	d047      	beq.n	800e914 <_dtoa_r+0x55c>
 800e884:	4602      	mov	r2, r0
 800e886:	460b      	mov	r3, r1
 800e888:	2000      	movs	r0, #0
 800e88a:	494e      	ldr	r1, [pc, #312]	; (800e9c4 <_dtoa_r+0x60c>)
 800e88c:	f7f2 f816 	bl	80008bc <__aeabi_ddiv>
 800e890:	462a      	mov	r2, r5
 800e892:	4633      	mov	r3, r6
 800e894:	f7f1 fd30 	bl	80002f8 <__aeabi_dsub>
 800e898:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e89c:	465d      	mov	r5, fp
 800e89e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8a2:	f7f2 f991 	bl	8000bc8 <__aeabi_d2iz>
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	f7f1 fe74 	bl	8000594 <__aeabi_i2d>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8b4:	f7f1 fd20 	bl	80002f8 <__aeabi_dsub>
 800e8b8:	3630      	adds	r6, #48	; 0x30
 800e8ba:	f805 6b01 	strb.w	r6, [r5], #1
 800e8be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e8c2:	e9cd 0100 	strd	r0, r1, [sp]
 800e8c6:	f7f2 f941 	bl	8000b4c <__aeabi_dcmplt>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	d163      	bne.n	800e996 <_dtoa_r+0x5de>
 800e8ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	4937      	ldr	r1, [pc, #220]	; (800e9b4 <_dtoa_r+0x5fc>)
 800e8d6:	f7f1 fd0f 	bl	80002f8 <__aeabi_dsub>
 800e8da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e8de:	f7f2 f935 	bl	8000b4c <__aeabi_dcmplt>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	f040 80b7 	bne.w	800ea56 <_dtoa_r+0x69e>
 800e8e8:	eba5 030b 	sub.w	r3, r5, fp
 800e8ec:	429f      	cmp	r7, r3
 800e8ee:	f77f af7c 	ble.w	800e7ea <_dtoa_r+0x432>
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	4b30      	ldr	r3, [pc, #192]	; (800e9b8 <_dtoa_r+0x600>)
 800e8f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8fa:	f7f1 feb5 	bl	8000668 <__aeabi_dmul>
 800e8fe:	2200      	movs	r2, #0
 800e900:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e904:	4b2c      	ldr	r3, [pc, #176]	; (800e9b8 <_dtoa_r+0x600>)
 800e906:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e90a:	f7f1 fead 	bl	8000668 <__aeabi_dmul>
 800e90e:	e9cd 0100 	strd	r0, r1, [sp]
 800e912:	e7c4      	b.n	800e89e <_dtoa_r+0x4e6>
 800e914:	462a      	mov	r2, r5
 800e916:	4633      	mov	r3, r6
 800e918:	f7f1 fea6 	bl	8000668 <__aeabi_dmul>
 800e91c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e920:	eb0b 0507 	add.w	r5, fp, r7
 800e924:	465e      	mov	r6, fp
 800e926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e92a:	f7f2 f94d 	bl	8000bc8 <__aeabi_d2iz>
 800e92e:	4607      	mov	r7, r0
 800e930:	f7f1 fe30 	bl	8000594 <__aeabi_i2d>
 800e934:	3730      	adds	r7, #48	; 0x30
 800e936:	4602      	mov	r2, r0
 800e938:	460b      	mov	r3, r1
 800e93a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e93e:	f7f1 fcdb 	bl	80002f8 <__aeabi_dsub>
 800e942:	f806 7b01 	strb.w	r7, [r6], #1
 800e946:	42ae      	cmp	r6, r5
 800e948:	e9cd 0100 	strd	r0, r1, [sp]
 800e94c:	f04f 0200 	mov.w	r2, #0
 800e950:	d126      	bne.n	800e9a0 <_dtoa_r+0x5e8>
 800e952:	4b1c      	ldr	r3, [pc, #112]	; (800e9c4 <_dtoa_r+0x60c>)
 800e954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e958:	f7f1 fcd0 	bl	80002fc <__adddf3>
 800e95c:	4602      	mov	r2, r0
 800e95e:	460b      	mov	r3, r1
 800e960:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e964:	f7f2 f910 	bl	8000b88 <__aeabi_dcmpgt>
 800e968:	2800      	cmp	r0, #0
 800e96a:	d174      	bne.n	800ea56 <_dtoa_r+0x69e>
 800e96c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e970:	2000      	movs	r0, #0
 800e972:	4914      	ldr	r1, [pc, #80]	; (800e9c4 <_dtoa_r+0x60c>)
 800e974:	f7f1 fcc0 	bl	80002f8 <__aeabi_dsub>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e980:	f7f2 f8e4 	bl	8000b4c <__aeabi_dcmplt>
 800e984:	2800      	cmp	r0, #0
 800e986:	f43f af30 	beq.w	800e7ea <_dtoa_r+0x432>
 800e98a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e98e:	2b30      	cmp	r3, #48	; 0x30
 800e990:	f105 32ff 	add.w	r2, r5, #4294967295
 800e994:	d002      	beq.n	800e99c <_dtoa_r+0x5e4>
 800e996:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e99a:	e04a      	b.n	800ea32 <_dtoa_r+0x67a>
 800e99c:	4615      	mov	r5, r2
 800e99e:	e7f4      	b.n	800e98a <_dtoa_r+0x5d2>
 800e9a0:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <_dtoa_r+0x600>)
 800e9a2:	f7f1 fe61 	bl	8000668 <__aeabi_dmul>
 800e9a6:	e9cd 0100 	strd	r0, r1, [sp]
 800e9aa:	e7bc      	b.n	800e926 <_dtoa_r+0x56e>
 800e9ac:	08011780 	.word	0x08011780
 800e9b0:	08011758 	.word	0x08011758
 800e9b4:	3ff00000 	.word	0x3ff00000
 800e9b8:	40240000 	.word	0x40240000
 800e9bc:	401c0000 	.word	0x401c0000
 800e9c0:	40140000 	.word	0x40140000
 800e9c4:	3fe00000 	.word	0x3fe00000
 800e9c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e9cc:	465d      	mov	r5, fp
 800e9ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	4639      	mov	r1, r7
 800e9d6:	f7f1 ff71 	bl	80008bc <__aeabi_ddiv>
 800e9da:	f7f2 f8f5 	bl	8000bc8 <__aeabi_d2iz>
 800e9de:	4680      	mov	r8, r0
 800e9e0:	f7f1 fdd8 	bl	8000594 <__aeabi_i2d>
 800e9e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9e8:	f7f1 fe3e 	bl	8000668 <__aeabi_dmul>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	4639      	mov	r1, r7
 800e9f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e9f8:	f7f1 fc7e 	bl	80002f8 <__aeabi_dsub>
 800e9fc:	f805 6b01 	strb.w	r6, [r5], #1
 800ea00:	eba5 060b 	sub.w	r6, r5, fp
 800ea04:	45b1      	cmp	r9, r6
 800ea06:	4602      	mov	r2, r0
 800ea08:	460b      	mov	r3, r1
 800ea0a:	d139      	bne.n	800ea80 <_dtoa_r+0x6c8>
 800ea0c:	f7f1 fc76 	bl	80002fc <__adddf3>
 800ea10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea14:	4606      	mov	r6, r0
 800ea16:	460f      	mov	r7, r1
 800ea18:	f7f2 f8b6 	bl	8000b88 <__aeabi_dcmpgt>
 800ea1c:	b9c8      	cbnz	r0, 800ea52 <_dtoa_r+0x69a>
 800ea1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea22:	4630      	mov	r0, r6
 800ea24:	4639      	mov	r1, r7
 800ea26:	f7f2 f887 	bl	8000b38 <__aeabi_dcmpeq>
 800ea2a:	b110      	cbz	r0, 800ea32 <_dtoa_r+0x67a>
 800ea2c:	f018 0f01 	tst.w	r8, #1
 800ea30:	d10f      	bne.n	800ea52 <_dtoa_r+0x69a>
 800ea32:	9904      	ldr	r1, [sp, #16]
 800ea34:	4620      	mov	r0, r4
 800ea36:	f000 fde3 	bl	800f600 <_Bfree>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea3e:	702b      	strb	r3, [r5, #0]
 800ea40:	f10a 0301 	add.w	r3, sl, #1
 800ea44:	6013      	str	r3, [r2, #0]
 800ea46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f000 8241 	beq.w	800eed0 <_dtoa_r+0xb18>
 800ea4e:	601d      	str	r5, [r3, #0]
 800ea50:	e23e      	b.n	800eed0 <_dtoa_r+0xb18>
 800ea52:	f8cd a020 	str.w	sl, [sp, #32]
 800ea56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ea5a:	2a39      	cmp	r2, #57	; 0x39
 800ea5c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ea60:	d108      	bne.n	800ea74 <_dtoa_r+0x6bc>
 800ea62:	459b      	cmp	fp, r3
 800ea64:	d10a      	bne.n	800ea7c <_dtoa_r+0x6c4>
 800ea66:	9b08      	ldr	r3, [sp, #32]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	9308      	str	r3, [sp, #32]
 800ea6c:	2330      	movs	r3, #48	; 0x30
 800ea6e:	f88b 3000 	strb.w	r3, [fp]
 800ea72:	465b      	mov	r3, fp
 800ea74:	781a      	ldrb	r2, [r3, #0]
 800ea76:	3201      	adds	r2, #1
 800ea78:	701a      	strb	r2, [r3, #0]
 800ea7a:	e78c      	b.n	800e996 <_dtoa_r+0x5de>
 800ea7c:	461d      	mov	r5, r3
 800ea7e:	e7ea      	b.n	800ea56 <_dtoa_r+0x69e>
 800ea80:	2200      	movs	r2, #0
 800ea82:	4b9b      	ldr	r3, [pc, #620]	; (800ecf0 <_dtoa_r+0x938>)
 800ea84:	f7f1 fdf0 	bl	8000668 <__aeabi_dmul>
 800ea88:	2200      	movs	r2, #0
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	460f      	mov	r7, r1
 800ea90:	f7f2 f852 	bl	8000b38 <__aeabi_dcmpeq>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d09a      	beq.n	800e9ce <_dtoa_r+0x616>
 800ea98:	e7cb      	b.n	800ea32 <_dtoa_r+0x67a>
 800ea9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	f000 808b 	beq.w	800ebb8 <_dtoa_r+0x800>
 800eaa2:	9a06      	ldr	r2, [sp, #24]
 800eaa4:	2a01      	cmp	r2, #1
 800eaa6:	dc6e      	bgt.n	800eb86 <_dtoa_r+0x7ce>
 800eaa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eaaa:	2a00      	cmp	r2, #0
 800eaac:	d067      	beq.n	800eb7e <_dtoa_r+0x7c6>
 800eaae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eab2:	9f07      	ldr	r7, [sp, #28]
 800eab4:	9d05      	ldr	r5, [sp, #20]
 800eab6:	9a05      	ldr	r2, [sp, #20]
 800eab8:	2101      	movs	r1, #1
 800eaba:	441a      	add	r2, r3
 800eabc:	4620      	mov	r0, r4
 800eabe:	9205      	str	r2, [sp, #20]
 800eac0:	4498      	add	r8, r3
 800eac2:	f000 fe7b 	bl	800f7bc <__i2b>
 800eac6:	4606      	mov	r6, r0
 800eac8:	2d00      	cmp	r5, #0
 800eaca:	dd0c      	ble.n	800eae6 <_dtoa_r+0x72e>
 800eacc:	f1b8 0f00 	cmp.w	r8, #0
 800ead0:	dd09      	ble.n	800eae6 <_dtoa_r+0x72e>
 800ead2:	4545      	cmp	r5, r8
 800ead4:	9a05      	ldr	r2, [sp, #20]
 800ead6:	462b      	mov	r3, r5
 800ead8:	bfa8      	it	ge
 800eada:	4643      	movge	r3, r8
 800eadc:	1ad2      	subs	r2, r2, r3
 800eade:	9205      	str	r2, [sp, #20]
 800eae0:	1aed      	subs	r5, r5, r3
 800eae2:	eba8 0803 	sub.w	r8, r8, r3
 800eae6:	9b07      	ldr	r3, [sp, #28]
 800eae8:	b1eb      	cbz	r3, 800eb26 <_dtoa_r+0x76e>
 800eaea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d067      	beq.n	800ebc0 <_dtoa_r+0x808>
 800eaf0:	b18f      	cbz	r7, 800eb16 <_dtoa_r+0x75e>
 800eaf2:	4631      	mov	r1, r6
 800eaf4:	463a      	mov	r2, r7
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f000 ff00 	bl	800f8fc <__pow5mult>
 800eafc:	9a04      	ldr	r2, [sp, #16]
 800eafe:	4601      	mov	r1, r0
 800eb00:	4606      	mov	r6, r0
 800eb02:	4620      	mov	r0, r4
 800eb04:	f000 fe63 	bl	800f7ce <__multiply>
 800eb08:	9904      	ldr	r1, [sp, #16]
 800eb0a:	9008      	str	r0, [sp, #32]
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f000 fd77 	bl	800f600 <_Bfree>
 800eb12:	9b08      	ldr	r3, [sp, #32]
 800eb14:	9304      	str	r3, [sp, #16]
 800eb16:	9b07      	ldr	r3, [sp, #28]
 800eb18:	1bda      	subs	r2, r3, r7
 800eb1a:	d004      	beq.n	800eb26 <_dtoa_r+0x76e>
 800eb1c:	9904      	ldr	r1, [sp, #16]
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f000 feec 	bl	800f8fc <__pow5mult>
 800eb24:	9004      	str	r0, [sp, #16]
 800eb26:	2101      	movs	r1, #1
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f000 fe47 	bl	800f7bc <__i2b>
 800eb2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb30:	4607      	mov	r7, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f000 81d0 	beq.w	800eed8 <_dtoa_r+0xb20>
 800eb38:	461a      	mov	r2, r3
 800eb3a:	4601      	mov	r1, r0
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f000 fedd 	bl	800f8fc <__pow5mult>
 800eb42:	9b06      	ldr	r3, [sp, #24]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	4607      	mov	r7, r0
 800eb48:	dc40      	bgt.n	800ebcc <_dtoa_r+0x814>
 800eb4a:	9b00      	ldr	r3, [sp, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d139      	bne.n	800ebc4 <_dtoa_r+0x80c>
 800eb50:	9b01      	ldr	r3, [sp, #4]
 800eb52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d136      	bne.n	800ebc8 <_dtoa_r+0x810>
 800eb5a:	9b01      	ldr	r3, [sp, #4]
 800eb5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb60:	0d1b      	lsrs	r3, r3, #20
 800eb62:	051b      	lsls	r3, r3, #20
 800eb64:	b12b      	cbz	r3, 800eb72 <_dtoa_r+0x7ba>
 800eb66:	9b05      	ldr	r3, [sp, #20]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	9305      	str	r3, [sp, #20]
 800eb6c:	f108 0801 	add.w	r8, r8, #1
 800eb70:	2301      	movs	r3, #1
 800eb72:	9307      	str	r3, [sp, #28]
 800eb74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d12a      	bne.n	800ebd0 <_dtoa_r+0x818>
 800eb7a:	2001      	movs	r0, #1
 800eb7c:	e030      	b.n	800ebe0 <_dtoa_r+0x828>
 800eb7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb84:	e795      	b.n	800eab2 <_dtoa_r+0x6fa>
 800eb86:	9b07      	ldr	r3, [sp, #28]
 800eb88:	f109 37ff 	add.w	r7, r9, #4294967295
 800eb8c:	42bb      	cmp	r3, r7
 800eb8e:	bfbf      	itttt	lt
 800eb90:	9b07      	ldrlt	r3, [sp, #28]
 800eb92:	9707      	strlt	r7, [sp, #28]
 800eb94:	1afa      	sublt	r2, r7, r3
 800eb96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800eb98:	bfbb      	ittet	lt
 800eb9a:	189b      	addlt	r3, r3, r2
 800eb9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eb9e:	1bdf      	subge	r7, r3, r7
 800eba0:	2700      	movlt	r7, #0
 800eba2:	f1b9 0f00 	cmp.w	r9, #0
 800eba6:	bfb5      	itete	lt
 800eba8:	9b05      	ldrlt	r3, [sp, #20]
 800ebaa:	9d05      	ldrge	r5, [sp, #20]
 800ebac:	eba3 0509 	sublt.w	r5, r3, r9
 800ebb0:	464b      	movge	r3, r9
 800ebb2:	bfb8      	it	lt
 800ebb4:	2300      	movlt	r3, #0
 800ebb6:	e77e      	b.n	800eab6 <_dtoa_r+0x6fe>
 800ebb8:	9f07      	ldr	r7, [sp, #28]
 800ebba:	9d05      	ldr	r5, [sp, #20]
 800ebbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ebbe:	e783      	b.n	800eac8 <_dtoa_r+0x710>
 800ebc0:	9a07      	ldr	r2, [sp, #28]
 800ebc2:	e7ab      	b.n	800eb1c <_dtoa_r+0x764>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	e7d4      	b.n	800eb72 <_dtoa_r+0x7ba>
 800ebc8:	9b00      	ldr	r3, [sp, #0]
 800ebca:	e7d2      	b.n	800eb72 <_dtoa_r+0x7ba>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	9307      	str	r3, [sp, #28]
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ebd6:	6918      	ldr	r0, [r3, #16]
 800ebd8:	f000 fda2 	bl	800f720 <__hi0bits>
 800ebdc:	f1c0 0020 	rsb	r0, r0, #32
 800ebe0:	4440      	add	r0, r8
 800ebe2:	f010 001f 	ands.w	r0, r0, #31
 800ebe6:	d047      	beq.n	800ec78 <_dtoa_r+0x8c0>
 800ebe8:	f1c0 0320 	rsb	r3, r0, #32
 800ebec:	2b04      	cmp	r3, #4
 800ebee:	dd3b      	ble.n	800ec68 <_dtoa_r+0x8b0>
 800ebf0:	9b05      	ldr	r3, [sp, #20]
 800ebf2:	f1c0 001c 	rsb	r0, r0, #28
 800ebf6:	4403      	add	r3, r0
 800ebf8:	9305      	str	r3, [sp, #20]
 800ebfa:	4405      	add	r5, r0
 800ebfc:	4480      	add	r8, r0
 800ebfe:	9b05      	ldr	r3, [sp, #20]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	dd05      	ble.n	800ec10 <_dtoa_r+0x858>
 800ec04:	461a      	mov	r2, r3
 800ec06:	9904      	ldr	r1, [sp, #16]
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f000 fec5 	bl	800f998 <__lshift>
 800ec0e:	9004      	str	r0, [sp, #16]
 800ec10:	f1b8 0f00 	cmp.w	r8, #0
 800ec14:	dd05      	ble.n	800ec22 <_dtoa_r+0x86a>
 800ec16:	4639      	mov	r1, r7
 800ec18:	4642      	mov	r2, r8
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f000 febc 	bl	800f998 <__lshift>
 800ec20:	4607      	mov	r7, r0
 800ec22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec24:	b353      	cbz	r3, 800ec7c <_dtoa_r+0x8c4>
 800ec26:	4639      	mov	r1, r7
 800ec28:	9804      	ldr	r0, [sp, #16]
 800ec2a:	f000 ff09 	bl	800fa40 <__mcmp>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	da24      	bge.n	800ec7c <_dtoa_r+0x8c4>
 800ec32:	2300      	movs	r3, #0
 800ec34:	220a      	movs	r2, #10
 800ec36:	9904      	ldr	r1, [sp, #16]
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f000 fcf8 	bl	800f62e <__multadd>
 800ec3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec40:	9004      	str	r0, [sp, #16]
 800ec42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f000 814d 	beq.w	800eee6 <_dtoa_r+0xb2e>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	4631      	mov	r1, r6
 800ec50:	220a      	movs	r2, #10
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 fceb 	bl	800f62e <__multadd>
 800ec58:	9b02      	ldr	r3, [sp, #8]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	dc4f      	bgt.n	800ed00 <_dtoa_r+0x948>
 800ec60:	9b06      	ldr	r3, [sp, #24]
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	dd4c      	ble.n	800ed00 <_dtoa_r+0x948>
 800ec66:	e011      	b.n	800ec8c <_dtoa_r+0x8d4>
 800ec68:	d0c9      	beq.n	800ebfe <_dtoa_r+0x846>
 800ec6a:	9a05      	ldr	r2, [sp, #20]
 800ec6c:	331c      	adds	r3, #28
 800ec6e:	441a      	add	r2, r3
 800ec70:	9205      	str	r2, [sp, #20]
 800ec72:	441d      	add	r5, r3
 800ec74:	4498      	add	r8, r3
 800ec76:	e7c2      	b.n	800ebfe <_dtoa_r+0x846>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	e7f6      	b.n	800ec6a <_dtoa_r+0x8b2>
 800ec7c:	f1b9 0f00 	cmp.w	r9, #0
 800ec80:	dc38      	bgt.n	800ecf4 <_dtoa_r+0x93c>
 800ec82:	9b06      	ldr	r3, [sp, #24]
 800ec84:	2b02      	cmp	r3, #2
 800ec86:	dd35      	ble.n	800ecf4 <_dtoa_r+0x93c>
 800ec88:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec8c:	9b02      	ldr	r3, [sp, #8]
 800ec8e:	b963      	cbnz	r3, 800ecaa <_dtoa_r+0x8f2>
 800ec90:	4639      	mov	r1, r7
 800ec92:	2205      	movs	r2, #5
 800ec94:	4620      	mov	r0, r4
 800ec96:	f000 fcca 	bl	800f62e <__multadd>
 800ec9a:	4601      	mov	r1, r0
 800ec9c:	4607      	mov	r7, r0
 800ec9e:	9804      	ldr	r0, [sp, #16]
 800eca0:	f000 fece 	bl	800fa40 <__mcmp>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	f73f adcc 	bgt.w	800e842 <_dtoa_r+0x48a>
 800ecaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecac:	465d      	mov	r5, fp
 800ecae:	ea6f 0a03 	mvn.w	sl, r3
 800ecb2:	f04f 0900 	mov.w	r9, #0
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f000 fca1 	bl	800f600 <_Bfree>
 800ecbe:	2e00      	cmp	r6, #0
 800ecc0:	f43f aeb7 	beq.w	800ea32 <_dtoa_r+0x67a>
 800ecc4:	f1b9 0f00 	cmp.w	r9, #0
 800ecc8:	d005      	beq.n	800ecd6 <_dtoa_r+0x91e>
 800ecca:	45b1      	cmp	r9, r6
 800eccc:	d003      	beq.n	800ecd6 <_dtoa_r+0x91e>
 800ecce:	4649      	mov	r1, r9
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f000 fc95 	bl	800f600 <_Bfree>
 800ecd6:	4631      	mov	r1, r6
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f000 fc91 	bl	800f600 <_Bfree>
 800ecde:	e6a8      	b.n	800ea32 <_dtoa_r+0x67a>
 800ece0:	2700      	movs	r7, #0
 800ece2:	463e      	mov	r6, r7
 800ece4:	e7e1      	b.n	800ecaa <_dtoa_r+0x8f2>
 800ece6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ecea:	463e      	mov	r6, r7
 800ecec:	e5a9      	b.n	800e842 <_dtoa_r+0x48a>
 800ecee:	bf00      	nop
 800ecf0:	40240000 	.word	0x40240000
 800ecf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecf6:	f8cd 9008 	str.w	r9, [sp, #8]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f000 80fa 	beq.w	800eef4 <_dtoa_r+0xb3c>
 800ed00:	2d00      	cmp	r5, #0
 800ed02:	dd05      	ble.n	800ed10 <_dtoa_r+0x958>
 800ed04:	4631      	mov	r1, r6
 800ed06:	462a      	mov	r2, r5
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f000 fe45 	bl	800f998 <__lshift>
 800ed0e:	4606      	mov	r6, r0
 800ed10:	9b07      	ldr	r3, [sp, #28]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d04c      	beq.n	800edb0 <_dtoa_r+0x9f8>
 800ed16:	6871      	ldr	r1, [r6, #4]
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f000 fc3d 	bl	800f598 <_Balloc>
 800ed1e:	6932      	ldr	r2, [r6, #16]
 800ed20:	3202      	adds	r2, #2
 800ed22:	4605      	mov	r5, r0
 800ed24:	0092      	lsls	r2, r2, #2
 800ed26:	f106 010c 	add.w	r1, r6, #12
 800ed2a:	300c      	adds	r0, #12
 800ed2c:	f7fd fc5a 	bl	800c5e4 <memcpy>
 800ed30:	2201      	movs	r2, #1
 800ed32:	4629      	mov	r1, r5
 800ed34:	4620      	mov	r0, r4
 800ed36:	f000 fe2f 	bl	800f998 <__lshift>
 800ed3a:	9b00      	ldr	r3, [sp, #0]
 800ed3c:	f8cd b014 	str.w	fp, [sp, #20]
 800ed40:	f003 0301 	and.w	r3, r3, #1
 800ed44:	46b1      	mov	r9, r6
 800ed46:	9307      	str	r3, [sp, #28]
 800ed48:	4606      	mov	r6, r0
 800ed4a:	4639      	mov	r1, r7
 800ed4c:	9804      	ldr	r0, [sp, #16]
 800ed4e:	f7ff faa4 	bl	800e29a <quorem>
 800ed52:	4649      	mov	r1, r9
 800ed54:	4605      	mov	r5, r0
 800ed56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ed5a:	9804      	ldr	r0, [sp, #16]
 800ed5c:	f000 fe70 	bl	800fa40 <__mcmp>
 800ed60:	4632      	mov	r2, r6
 800ed62:	9000      	str	r0, [sp, #0]
 800ed64:	4639      	mov	r1, r7
 800ed66:	4620      	mov	r0, r4
 800ed68:	f000 fe84 	bl	800fa74 <__mdiff>
 800ed6c:	68c3      	ldr	r3, [r0, #12]
 800ed6e:	4602      	mov	r2, r0
 800ed70:	bb03      	cbnz	r3, 800edb4 <_dtoa_r+0x9fc>
 800ed72:	4601      	mov	r1, r0
 800ed74:	9008      	str	r0, [sp, #32]
 800ed76:	9804      	ldr	r0, [sp, #16]
 800ed78:	f000 fe62 	bl	800fa40 <__mcmp>
 800ed7c:	9a08      	ldr	r2, [sp, #32]
 800ed7e:	4603      	mov	r3, r0
 800ed80:	4611      	mov	r1, r2
 800ed82:	4620      	mov	r0, r4
 800ed84:	9308      	str	r3, [sp, #32]
 800ed86:	f000 fc3b 	bl	800f600 <_Bfree>
 800ed8a:	9b08      	ldr	r3, [sp, #32]
 800ed8c:	b9a3      	cbnz	r3, 800edb8 <_dtoa_r+0xa00>
 800ed8e:	9a06      	ldr	r2, [sp, #24]
 800ed90:	b992      	cbnz	r2, 800edb8 <_dtoa_r+0xa00>
 800ed92:	9a07      	ldr	r2, [sp, #28]
 800ed94:	b982      	cbnz	r2, 800edb8 <_dtoa_r+0xa00>
 800ed96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed9a:	d029      	beq.n	800edf0 <_dtoa_r+0xa38>
 800ed9c:	9b00      	ldr	r3, [sp, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	dd01      	ble.n	800eda6 <_dtoa_r+0x9ee>
 800eda2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800eda6:	9b05      	ldr	r3, [sp, #20]
 800eda8:	1c5d      	adds	r5, r3, #1
 800edaa:	f883 8000 	strb.w	r8, [r3]
 800edae:	e782      	b.n	800ecb6 <_dtoa_r+0x8fe>
 800edb0:	4630      	mov	r0, r6
 800edb2:	e7c2      	b.n	800ed3a <_dtoa_r+0x982>
 800edb4:	2301      	movs	r3, #1
 800edb6:	e7e3      	b.n	800ed80 <_dtoa_r+0x9c8>
 800edb8:	9a00      	ldr	r2, [sp, #0]
 800edba:	2a00      	cmp	r2, #0
 800edbc:	db04      	blt.n	800edc8 <_dtoa_r+0xa10>
 800edbe:	d125      	bne.n	800ee0c <_dtoa_r+0xa54>
 800edc0:	9a06      	ldr	r2, [sp, #24]
 800edc2:	bb1a      	cbnz	r2, 800ee0c <_dtoa_r+0xa54>
 800edc4:	9a07      	ldr	r2, [sp, #28]
 800edc6:	bb0a      	cbnz	r2, 800ee0c <_dtoa_r+0xa54>
 800edc8:	2b00      	cmp	r3, #0
 800edca:	ddec      	ble.n	800eda6 <_dtoa_r+0x9ee>
 800edcc:	2201      	movs	r2, #1
 800edce:	9904      	ldr	r1, [sp, #16]
 800edd0:	4620      	mov	r0, r4
 800edd2:	f000 fde1 	bl	800f998 <__lshift>
 800edd6:	4639      	mov	r1, r7
 800edd8:	9004      	str	r0, [sp, #16]
 800edda:	f000 fe31 	bl	800fa40 <__mcmp>
 800edde:	2800      	cmp	r0, #0
 800ede0:	dc03      	bgt.n	800edea <_dtoa_r+0xa32>
 800ede2:	d1e0      	bne.n	800eda6 <_dtoa_r+0x9ee>
 800ede4:	f018 0f01 	tst.w	r8, #1
 800ede8:	d0dd      	beq.n	800eda6 <_dtoa_r+0x9ee>
 800edea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800edee:	d1d8      	bne.n	800eda2 <_dtoa_r+0x9ea>
 800edf0:	9b05      	ldr	r3, [sp, #20]
 800edf2:	9a05      	ldr	r2, [sp, #20]
 800edf4:	1c5d      	adds	r5, r3, #1
 800edf6:	2339      	movs	r3, #57	; 0x39
 800edf8:	7013      	strb	r3, [r2, #0]
 800edfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800edfe:	2b39      	cmp	r3, #57	; 0x39
 800ee00:	f105 32ff 	add.w	r2, r5, #4294967295
 800ee04:	d04f      	beq.n	800eea6 <_dtoa_r+0xaee>
 800ee06:	3301      	adds	r3, #1
 800ee08:	7013      	strb	r3, [r2, #0]
 800ee0a:	e754      	b.n	800ecb6 <_dtoa_r+0x8fe>
 800ee0c:	9a05      	ldr	r2, [sp, #20]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f102 0501 	add.w	r5, r2, #1
 800ee14:	dd06      	ble.n	800ee24 <_dtoa_r+0xa6c>
 800ee16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ee1a:	d0e9      	beq.n	800edf0 <_dtoa_r+0xa38>
 800ee1c:	f108 0801 	add.w	r8, r8, #1
 800ee20:	9b05      	ldr	r3, [sp, #20]
 800ee22:	e7c2      	b.n	800edaa <_dtoa_r+0x9f2>
 800ee24:	9a02      	ldr	r2, [sp, #8]
 800ee26:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ee2a:	eba5 030b 	sub.w	r3, r5, fp
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d021      	beq.n	800ee76 <_dtoa_r+0xabe>
 800ee32:	2300      	movs	r3, #0
 800ee34:	220a      	movs	r2, #10
 800ee36:	9904      	ldr	r1, [sp, #16]
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f000 fbf8 	bl	800f62e <__multadd>
 800ee3e:	45b1      	cmp	r9, r6
 800ee40:	9004      	str	r0, [sp, #16]
 800ee42:	f04f 0300 	mov.w	r3, #0
 800ee46:	f04f 020a 	mov.w	r2, #10
 800ee4a:	4649      	mov	r1, r9
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	d105      	bne.n	800ee5c <_dtoa_r+0xaa4>
 800ee50:	f000 fbed 	bl	800f62e <__multadd>
 800ee54:	4681      	mov	r9, r0
 800ee56:	4606      	mov	r6, r0
 800ee58:	9505      	str	r5, [sp, #20]
 800ee5a:	e776      	b.n	800ed4a <_dtoa_r+0x992>
 800ee5c:	f000 fbe7 	bl	800f62e <__multadd>
 800ee60:	4631      	mov	r1, r6
 800ee62:	4681      	mov	r9, r0
 800ee64:	2300      	movs	r3, #0
 800ee66:	220a      	movs	r2, #10
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f000 fbe0 	bl	800f62e <__multadd>
 800ee6e:	4606      	mov	r6, r0
 800ee70:	e7f2      	b.n	800ee58 <_dtoa_r+0xaa0>
 800ee72:	f04f 0900 	mov.w	r9, #0
 800ee76:	2201      	movs	r2, #1
 800ee78:	9904      	ldr	r1, [sp, #16]
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f000 fd8c 	bl	800f998 <__lshift>
 800ee80:	4639      	mov	r1, r7
 800ee82:	9004      	str	r0, [sp, #16]
 800ee84:	f000 fddc 	bl	800fa40 <__mcmp>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	dcb6      	bgt.n	800edfa <_dtoa_r+0xa42>
 800ee8c:	d102      	bne.n	800ee94 <_dtoa_r+0xadc>
 800ee8e:	f018 0f01 	tst.w	r8, #1
 800ee92:	d1b2      	bne.n	800edfa <_dtoa_r+0xa42>
 800ee94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee98:	2b30      	cmp	r3, #48	; 0x30
 800ee9a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ee9e:	f47f af0a 	bne.w	800ecb6 <_dtoa_r+0x8fe>
 800eea2:	4615      	mov	r5, r2
 800eea4:	e7f6      	b.n	800ee94 <_dtoa_r+0xadc>
 800eea6:	4593      	cmp	fp, r2
 800eea8:	d105      	bne.n	800eeb6 <_dtoa_r+0xafe>
 800eeaa:	2331      	movs	r3, #49	; 0x31
 800eeac:	f10a 0a01 	add.w	sl, sl, #1
 800eeb0:	f88b 3000 	strb.w	r3, [fp]
 800eeb4:	e6ff      	b.n	800ecb6 <_dtoa_r+0x8fe>
 800eeb6:	4615      	mov	r5, r2
 800eeb8:	e79f      	b.n	800edfa <_dtoa_r+0xa42>
 800eeba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ef20 <_dtoa_r+0xb68>
 800eebe:	e007      	b.n	800eed0 <_dtoa_r+0xb18>
 800eec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eec2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ef24 <_dtoa_r+0xb6c>
 800eec6:	b11b      	cbz	r3, 800eed0 <_dtoa_r+0xb18>
 800eec8:	f10b 0308 	add.w	r3, fp, #8
 800eecc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eece:	6013      	str	r3, [r2, #0]
 800eed0:	4658      	mov	r0, fp
 800eed2:	b017      	add	sp, #92	; 0x5c
 800eed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed8:	9b06      	ldr	r3, [sp, #24]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	f77f ae35 	ble.w	800eb4a <_dtoa_r+0x792>
 800eee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eee2:	9307      	str	r3, [sp, #28]
 800eee4:	e649      	b.n	800eb7a <_dtoa_r+0x7c2>
 800eee6:	9b02      	ldr	r3, [sp, #8]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	dc03      	bgt.n	800eef4 <_dtoa_r+0xb3c>
 800eeec:	9b06      	ldr	r3, [sp, #24]
 800eeee:	2b02      	cmp	r3, #2
 800eef0:	f73f aecc 	bgt.w	800ec8c <_dtoa_r+0x8d4>
 800eef4:	465d      	mov	r5, fp
 800eef6:	4639      	mov	r1, r7
 800eef8:	9804      	ldr	r0, [sp, #16]
 800eefa:	f7ff f9ce 	bl	800e29a <quorem>
 800eefe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ef02:	f805 8b01 	strb.w	r8, [r5], #1
 800ef06:	9a02      	ldr	r2, [sp, #8]
 800ef08:	eba5 030b 	sub.w	r3, r5, fp
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	ddb0      	ble.n	800ee72 <_dtoa_r+0xaba>
 800ef10:	2300      	movs	r3, #0
 800ef12:	220a      	movs	r2, #10
 800ef14:	9904      	ldr	r1, [sp, #16]
 800ef16:	4620      	mov	r0, r4
 800ef18:	f000 fb89 	bl	800f62e <__multadd>
 800ef1c:	9004      	str	r0, [sp, #16]
 800ef1e:	e7ea      	b.n	800eef6 <_dtoa_r+0xb3e>
 800ef20:	0801187b 	.word	0x0801187b
 800ef24:	08011749 	.word	0x08011749

0800ef28 <rshift>:
 800ef28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef2a:	6906      	ldr	r6, [r0, #16]
 800ef2c:	114b      	asrs	r3, r1, #5
 800ef2e:	429e      	cmp	r6, r3
 800ef30:	f100 0414 	add.w	r4, r0, #20
 800ef34:	dd30      	ble.n	800ef98 <rshift+0x70>
 800ef36:	f011 011f 	ands.w	r1, r1, #31
 800ef3a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ef3e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ef42:	d108      	bne.n	800ef56 <rshift+0x2e>
 800ef44:	4621      	mov	r1, r4
 800ef46:	42b2      	cmp	r2, r6
 800ef48:	460b      	mov	r3, r1
 800ef4a:	d211      	bcs.n	800ef70 <rshift+0x48>
 800ef4c:	f852 3b04 	ldr.w	r3, [r2], #4
 800ef50:	f841 3b04 	str.w	r3, [r1], #4
 800ef54:	e7f7      	b.n	800ef46 <rshift+0x1e>
 800ef56:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ef5a:	f1c1 0c20 	rsb	ip, r1, #32
 800ef5e:	40cd      	lsrs	r5, r1
 800ef60:	3204      	adds	r2, #4
 800ef62:	4623      	mov	r3, r4
 800ef64:	42b2      	cmp	r2, r6
 800ef66:	4617      	mov	r7, r2
 800ef68:	d30c      	bcc.n	800ef84 <rshift+0x5c>
 800ef6a:	601d      	str	r5, [r3, #0]
 800ef6c:	b105      	cbz	r5, 800ef70 <rshift+0x48>
 800ef6e:	3304      	adds	r3, #4
 800ef70:	1b1a      	subs	r2, r3, r4
 800ef72:	42a3      	cmp	r3, r4
 800ef74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef78:	bf08      	it	eq
 800ef7a:	2300      	moveq	r3, #0
 800ef7c:	6102      	str	r2, [r0, #16]
 800ef7e:	bf08      	it	eq
 800ef80:	6143      	streq	r3, [r0, #20]
 800ef82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef84:	683f      	ldr	r7, [r7, #0]
 800ef86:	fa07 f70c 	lsl.w	r7, r7, ip
 800ef8a:	433d      	orrs	r5, r7
 800ef8c:	f843 5b04 	str.w	r5, [r3], #4
 800ef90:	f852 5b04 	ldr.w	r5, [r2], #4
 800ef94:	40cd      	lsrs	r5, r1
 800ef96:	e7e5      	b.n	800ef64 <rshift+0x3c>
 800ef98:	4623      	mov	r3, r4
 800ef9a:	e7e9      	b.n	800ef70 <rshift+0x48>

0800ef9c <__hexdig_fun>:
 800ef9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800efa0:	2b09      	cmp	r3, #9
 800efa2:	d802      	bhi.n	800efaa <__hexdig_fun+0xe>
 800efa4:	3820      	subs	r0, #32
 800efa6:	b2c0      	uxtb	r0, r0
 800efa8:	4770      	bx	lr
 800efaa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800efae:	2b05      	cmp	r3, #5
 800efb0:	d801      	bhi.n	800efb6 <__hexdig_fun+0x1a>
 800efb2:	3847      	subs	r0, #71	; 0x47
 800efb4:	e7f7      	b.n	800efa6 <__hexdig_fun+0xa>
 800efb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800efba:	2b05      	cmp	r3, #5
 800efbc:	d801      	bhi.n	800efc2 <__hexdig_fun+0x26>
 800efbe:	3827      	subs	r0, #39	; 0x27
 800efc0:	e7f1      	b.n	800efa6 <__hexdig_fun+0xa>
 800efc2:	2000      	movs	r0, #0
 800efc4:	4770      	bx	lr

0800efc6 <__gethex>:
 800efc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efca:	b08b      	sub	sp, #44	; 0x2c
 800efcc:	468a      	mov	sl, r1
 800efce:	9002      	str	r0, [sp, #8]
 800efd0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800efd2:	9306      	str	r3, [sp, #24]
 800efd4:	4690      	mov	r8, r2
 800efd6:	f000 facd 	bl	800f574 <__localeconv_l>
 800efda:	6803      	ldr	r3, [r0, #0]
 800efdc:	9303      	str	r3, [sp, #12]
 800efde:	4618      	mov	r0, r3
 800efe0:	f7f1 f928 	bl	8000234 <strlen>
 800efe4:	9b03      	ldr	r3, [sp, #12]
 800efe6:	9001      	str	r0, [sp, #4]
 800efe8:	4403      	add	r3, r0
 800efea:	f04f 0b00 	mov.w	fp, #0
 800efee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eff2:	9307      	str	r3, [sp, #28]
 800eff4:	f8da 3000 	ldr.w	r3, [sl]
 800eff8:	3302      	adds	r3, #2
 800effa:	461f      	mov	r7, r3
 800effc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f000:	2830      	cmp	r0, #48	; 0x30
 800f002:	d06c      	beq.n	800f0de <__gethex+0x118>
 800f004:	f7ff ffca 	bl	800ef9c <__hexdig_fun>
 800f008:	4604      	mov	r4, r0
 800f00a:	2800      	cmp	r0, #0
 800f00c:	d16a      	bne.n	800f0e4 <__gethex+0x11e>
 800f00e:	9a01      	ldr	r2, [sp, #4]
 800f010:	9903      	ldr	r1, [sp, #12]
 800f012:	4638      	mov	r0, r7
 800f014:	f7fe fa4a 	bl	800d4ac <strncmp>
 800f018:	2800      	cmp	r0, #0
 800f01a:	d166      	bne.n	800f0ea <__gethex+0x124>
 800f01c:	9b01      	ldr	r3, [sp, #4]
 800f01e:	5cf8      	ldrb	r0, [r7, r3]
 800f020:	18fe      	adds	r6, r7, r3
 800f022:	f7ff ffbb 	bl	800ef9c <__hexdig_fun>
 800f026:	2800      	cmp	r0, #0
 800f028:	d062      	beq.n	800f0f0 <__gethex+0x12a>
 800f02a:	4633      	mov	r3, r6
 800f02c:	7818      	ldrb	r0, [r3, #0]
 800f02e:	2830      	cmp	r0, #48	; 0x30
 800f030:	461f      	mov	r7, r3
 800f032:	f103 0301 	add.w	r3, r3, #1
 800f036:	d0f9      	beq.n	800f02c <__gethex+0x66>
 800f038:	f7ff ffb0 	bl	800ef9c <__hexdig_fun>
 800f03c:	fab0 f580 	clz	r5, r0
 800f040:	096d      	lsrs	r5, r5, #5
 800f042:	4634      	mov	r4, r6
 800f044:	f04f 0b01 	mov.w	fp, #1
 800f048:	463a      	mov	r2, r7
 800f04a:	4616      	mov	r6, r2
 800f04c:	3201      	adds	r2, #1
 800f04e:	7830      	ldrb	r0, [r6, #0]
 800f050:	f7ff ffa4 	bl	800ef9c <__hexdig_fun>
 800f054:	2800      	cmp	r0, #0
 800f056:	d1f8      	bne.n	800f04a <__gethex+0x84>
 800f058:	9a01      	ldr	r2, [sp, #4]
 800f05a:	9903      	ldr	r1, [sp, #12]
 800f05c:	4630      	mov	r0, r6
 800f05e:	f7fe fa25 	bl	800d4ac <strncmp>
 800f062:	b950      	cbnz	r0, 800f07a <__gethex+0xb4>
 800f064:	b954      	cbnz	r4, 800f07c <__gethex+0xb6>
 800f066:	9b01      	ldr	r3, [sp, #4]
 800f068:	18f4      	adds	r4, r6, r3
 800f06a:	4622      	mov	r2, r4
 800f06c:	4616      	mov	r6, r2
 800f06e:	3201      	adds	r2, #1
 800f070:	7830      	ldrb	r0, [r6, #0]
 800f072:	f7ff ff93 	bl	800ef9c <__hexdig_fun>
 800f076:	2800      	cmp	r0, #0
 800f078:	d1f8      	bne.n	800f06c <__gethex+0xa6>
 800f07a:	b10c      	cbz	r4, 800f080 <__gethex+0xba>
 800f07c:	1ba4      	subs	r4, r4, r6
 800f07e:	00a4      	lsls	r4, r4, #2
 800f080:	7833      	ldrb	r3, [r6, #0]
 800f082:	2b50      	cmp	r3, #80	; 0x50
 800f084:	d001      	beq.n	800f08a <__gethex+0xc4>
 800f086:	2b70      	cmp	r3, #112	; 0x70
 800f088:	d140      	bne.n	800f10c <__gethex+0x146>
 800f08a:	7873      	ldrb	r3, [r6, #1]
 800f08c:	2b2b      	cmp	r3, #43	; 0x2b
 800f08e:	d031      	beq.n	800f0f4 <__gethex+0x12e>
 800f090:	2b2d      	cmp	r3, #45	; 0x2d
 800f092:	d033      	beq.n	800f0fc <__gethex+0x136>
 800f094:	1c71      	adds	r1, r6, #1
 800f096:	f04f 0900 	mov.w	r9, #0
 800f09a:	7808      	ldrb	r0, [r1, #0]
 800f09c:	f7ff ff7e 	bl	800ef9c <__hexdig_fun>
 800f0a0:	1e43      	subs	r3, r0, #1
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	2b18      	cmp	r3, #24
 800f0a6:	d831      	bhi.n	800f10c <__gethex+0x146>
 800f0a8:	f1a0 0210 	sub.w	r2, r0, #16
 800f0ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f0b0:	f7ff ff74 	bl	800ef9c <__hexdig_fun>
 800f0b4:	1e43      	subs	r3, r0, #1
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	2b18      	cmp	r3, #24
 800f0ba:	d922      	bls.n	800f102 <__gethex+0x13c>
 800f0bc:	f1b9 0f00 	cmp.w	r9, #0
 800f0c0:	d000      	beq.n	800f0c4 <__gethex+0xfe>
 800f0c2:	4252      	negs	r2, r2
 800f0c4:	4414      	add	r4, r2
 800f0c6:	f8ca 1000 	str.w	r1, [sl]
 800f0ca:	b30d      	cbz	r5, 800f110 <__gethex+0x14a>
 800f0cc:	f1bb 0f00 	cmp.w	fp, #0
 800f0d0:	bf0c      	ite	eq
 800f0d2:	2706      	moveq	r7, #6
 800f0d4:	2700      	movne	r7, #0
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	b00b      	add	sp, #44	; 0x2c
 800f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0de:	f10b 0b01 	add.w	fp, fp, #1
 800f0e2:	e78a      	b.n	800effa <__gethex+0x34>
 800f0e4:	2500      	movs	r5, #0
 800f0e6:	462c      	mov	r4, r5
 800f0e8:	e7ae      	b.n	800f048 <__gethex+0x82>
 800f0ea:	463e      	mov	r6, r7
 800f0ec:	2501      	movs	r5, #1
 800f0ee:	e7c7      	b.n	800f080 <__gethex+0xba>
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	e7fb      	b.n	800f0ec <__gethex+0x126>
 800f0f4:	f04f 0900 	mov.w	r9, #0
 800f0f8:	1cb1      	adds	r1, r6, #2
 800f0fa:	e7ce      	b.n	800f09a <__gethex+0xd4>
 800f0fc:	f04f 0901 	mov.w	r9, #1
 800f100:	e7fa      	b.n	800f0f8 <__gethex+0x132>
 800f102:	230a      	movs	r3, #10
 800f104:	fb03 0202 	mla	r2, r3, r2, r0
 800f108:	3a10      	subs	r2, #16
 800f10a:	e7cf      	b.n	800f0ac <__gethex+0xe6>
 800f10c:	4631      	mov	r1, r6
 800f10e:	e7da      	b.n	800f0c6 <__gethex+0x100>
 800f110:	1bf3      	subs	r3, r6, r7
 800f112:	3b01      	subs	r3, #1
 800f114:	4629      	mov	r1, r5
 800f116:	2b07      	cmp	r3, #7
 800f118:	dc49      	bgt.n	800f1ae <__gethex+0x1e8>
 800f11a:	9802      	ldr	r0, [sp, #8]
 800f11c:	f000 fa3c 	bl	800f598 <_Balloc>
 800f120:	9b01      	ldr	r3, [sp, #4]
 800f122:	f100 0914 	add.w	r9, r0, #20
 800f126:	f04f 0b00 	mov.w	fp, #0
 800f12a:	f1c3 0301 	rsb	r3, r3, #1
 800f12e:	4605      	mov	r5, r0
 800f130:	f8cd 9010 	str.w	r9, [sp, #16]
 800f134:	46da      	mov	sl, fp
 800f136:	9308      	str	r3, [sp, #32]
 800f138:	42b7      	cmp	r7, r6
 800f13a:	d33b      	bcc.n	800f1b4 <__gethex+0x1ee>
 800f13c:	9804      	ldr	r0, [sp, #16]
 800f13e:	f840 ab04 	str.w	sl, [r0], #4
 800f142:	eba0 0009 	sub.w	r0, r0, r9
 800f146:	1080      	asrs	r0, r0, #2
 800f148:	6128      	str	r0, [r5, #16]
 800f14a:	0147      	lsls	r7, r0, #5
 800f14c:	4650      	mov	r0, sl
 800f14e:	f000 fae7 	bl	800f720 <__hi0bits>
 800f152:	f8d8 6000 	ldr.w	r6, [r8]
 800f156:	1a3f      	subs	r7, r7, r0
 800f158:	42b7      	cmp	r7, r6
 800f15a:	dd64      	ble.n	800f226 <__gethex+0x260>
 800f15c:	1bbf      	subs	r7, r7, r6
 800f15e:	4639      	mov	r1, r7
 800f160:	4628      	mov	r0, r5
 800f162:	f000 fdf7 	bl	800fd54 <__any_on>
 800f166:	4682      	mov	sl, r0
 800f168:	b178      	cbz	r0, 800f18a <__gethex+0x1c4>
 800f16a:	1e7b      	subs	r3, r7, #1
 800f16c:	1159      	asrs	r1, r3, #5
 800f16e:	f003 021f 	and.w	r2, r3, #31
 800f172:	f04f 0a01 	mov.w	sl, #1
 800f176:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f17a:	fa0a f202 	lsl.w	r2, sl, r2
 800f17e:	420a      	tst	r2, r1
 800f180:	d003      	beq.n	800f18a <__gethex+0x1c4>
 800f182:	4553      	cmp	r3, sl
 800f184:	dc46      	bgt.n	800f214 <__gethex+0x24e>
 800f186:	f04f 0a02 	mov.w	sl, #2
 800f18a:	4639      	mov	r1, r7
 800f18c:	4628      	mov	r0, r5
 800f18e:	f7ff fecb 	bl	800ef28 <rshift>
 800f192:	443c      	add	r4, r7
 800f194:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f198:	42a3      	cmp	r3, r4
 800f19a:	da52      	bge.n	800f242 <__gethex+0x27c>
 800f19c:	4629      	mov	r1, r5
 800f19e:	9802      	ldr	r0, [sp, #8]
 800f1a0:	f000 fa2e 	bl	800f600 <_Bfree>
 800f1a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	6013      	str	r3, [r2, #0]
 800f1aa:	27a3      	movs	r7, #163	; 0xa3
 800f1ac:	e793      	b.n	800f0d6 <__gethex+0x110>
 800f1ae:	3101      	adds	r1, #1
 800f1b0:	105b      	asrs	r3, r3, #1
 800f1b2:	e7b0      	b.n	800f116 <__gethex+0x150>
 800f1b4:	1e73      	subs	r3, r6, #1
 800f1b6:	9305      	str	r3, [sp, #20]
 800f1b8:	9a07      	ldr	r2, [sp, #28]
 800f1ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d018      	beq.n	800f1f4 <__gethex+0x22e>
 800f1c2:	f1bb 0f20 	cmp.w	fp, #32
 800f1c6:	d107      	bne.n	800f1d8 <__gethex+0x212>
 800f1c8:	9b04      	ldr	r3, [sp, #16]
 800f1ca:	f8c3 a000 	str.w	sl, [r3]
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	f04f 0a00 	mov.w	sl, #0
 800f1d4:	9304      	str	r3, [sp, #16]
 800f1d6:	46d3      	mov	fp, sl
 800f1d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f1dc:	f7ff fede 	bl	800ef9c <__hexdig_fun>
 800f1e0:	f000 000f 	and.w	r0, r0, #15
 800f1e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f1e8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f1ec:	f10b 0b04 	add.w	fp, fp, #4
 800f1f0:	9b05      	ldr	r3, [sp, #20]
 800f1f2:	e00d      	b.n	800f210 <__gethex+0x24a>
 800f1f4:	9b05      	ldr	r3, [sp, #20]
 800f1f6:	9a08      	ldr	r2, [sp, #32]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	42bb      	cmp	r3, r7
 800f1fc:	d3e1      	bcc.n	800f1c2 <__gethex+0x1fc>
 800f1fe:	4618      	mov	r0, r3
 800f200:	9a01      	ldr	r2, [sp, #4]
 800f202:	9903      	ldr	r1, [sp, #12]
 800f204:	9309      	str	r3, [sp, #36]	; 0x24
 800f206:	f7fe f951 	bl	800d4ac <strncmp>
 800f20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d1d8      	bne.n	800f1c2 <__gethex+0x1fc>
 800f210:	461e      	mov	r6, r3
 800f212:	e791      	b.n	800f138 <__gethex+0x172>
 800f214:	1eb9      	subs	r1, r7, #2
 800f216:	4628      	mov	r0, r5
 800f218:	f000 fd9c 	bl	800fd54 <__any_on>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d0b2      	beq.n	800f186 <__gethex+0x1c0>
 800f220:	f04f 0a03 	mov.w	sl, #3
 800f224:	e7b1      	b.n	800f18a <__gethex+0x1c4>
 800f226:	da09      	bge.n	800f23c <__gethex+0x276>
 800f228:	1bf7      	subs	r7, r6, r7
 800f22a:	4629      	mov	r1, r5
 800f22c:	463a      	mov	r2, r7
 800f22e:	9802      	ldr	r0, [sp, #8]
 800f230:	f000 fbb2 	bl	800f998 <__lshift>
 800f234:	1be4      	subs	r4, r4, r7
 800f236:	4605      	mov	r5, r0
 800f238:	f100 0914 	add.w	r9, r0, #20
 800f23c:	f04f 0a00 	mov.w	sl, #0
 800f240:	e7a8      	b.n	800f194 <__gethex+0x1ce>
 800f242:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f246:	42a0      	cmp	r0, r4
 800f248:	dd6a      	ble.n	800f320 <__gethex+0x35a>
 800f24a:	1b04      	subs	r4, r0, r4
 800f24c:	42a6      	cmp	r6, r4
 800f24e:	dc2e      	bgt.n	800f2ae <__gethex+0x2e8>
 800f250:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f254:	2b02      	cmp	r3, #2
 800f256:	d022      	beq.n	800f29e <__gethex+0x2d8>
 800f258:	2b03      	cmp	r3, #3
 800f25a:	d024      	beq.n	800f2a6 <__gethex+0x2e0>
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d115      	bne.n	800f28c <__gethex+0x2c6>
 800f260:	42a6      	cmp	r6, r4
 800f262:	d113      	bne.n	800f28c <__gethex+0x2c6>
 800f264:	2e01      	cmp	r6, #1
 800f266:	dc0b      	bgt.n	800f280 <__gethex+0x2ba>
 800f268:	9a06      	ldr	r2, [sp, #24]
 800f26a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f26e:	6013      	str	r3, [r2, #0]
 800f270:	2301      	movs	r3, #1
 800f272:	612b      	str	r3, [r5, #16]
 800f274:	f8c9 3000 	str.w	r3, [r9]
 800f278:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f27a:	2762      	movs	r7, #98	; 0x62
 800f27c:	601d      	str	r5, [r3, #0]
 800f27e:	e72a      	b.n	800f0d6 <__gethex+0x110>
 800f280:	1e71      	subs	r1, r6, #1
 800f282:	4628      	mov	r0, r5
 800f284:	f000 fd66 	bl	800fd54 <__any_on>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d1ed      	bne.n	800f268 <__gethex+0x2a2>
 800f28c:	4629      	mov	r1, r5
 800f28e:	9802      	ldr	r0, [sp, #8]
 800f290:	f000 f9b6 	bl	800f600 <_Bfree>
 800f294:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f296:	2300      	movs	r3, #0
 800f298:	6013      	str	r3, [r2, #0]
 800f29a:	2750      	movs	r7, #80	; 0x50
 800f29c:	e71b      	b.n	800f0d6 <__gethex+0x110>
 800f29e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d0e1      	beq.n	800f268 <__gethex+0x2a2>
 800f2a4:	e7f2      	b.n	800f28c <__gethex+0x2c6>
 800f2a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d1dd      	bne.n	800f268 <__gethex+0x2a2>
 800f2ac:	e7ee      	b.n	800f28c <__gethex+0x2c6>
 800f2ae:	1e67      	subs	r7, r4, #1
 800f2b0:	f1ba 0f00 	cmp.w	sl, #0
 800f2b4:	d131      	bne.n	800f31a <__gethex+0x354>
 800f2b6:	b127      	cbz	r7, 800f2c2 <__gethex+0x2fc>
 800f2b8:	4639      	mov	r1, r7
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f000 fd4a 	bl	800fd54 <__any_on>
 800f2c0:	4682      	mov	sl, r0
 800f2c2:	117a      	asrs	r2, r7, #5
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	f007 071f 	and.w	r7, r7, #31
 800f2ca:	fa03 f707 	lsl.w	r7, r3, r7
 800f2ce:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	421f      	tst	r7, r3
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	bf18      	it	ne
 800f2da:	f04a 0a02 	orrne.w	sl, sl, #2
 800f2de:	1b36      	subs	r6, r6, r4
 800f2e0:	f7ff fe22 	bl	800ef28 <rshift>
 800f2e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f2e8:	2702      	movs	r7, #2
 800f2ea:	f1ba 0f00 	cmp.w	sl, #0
 800f2ee:	d048      	beq.n	800f382 <__gethex+0x3bc>
 800f2f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2f4:	2b02      	cmp	r3, #2
 800f2f6:	d015      	beq.n	800f324 <__gethex+0x35e>
 800f2f8:	2b03      	cmp	r3, #3
 800f2fa:	d017      	beq.n	800f32c <__gethex+0x366>
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d109      	bne.n	800f314 <__gethex+0x34e>
 800f300:	f01a 0f02 	tst.w	sl, #2
 800f304:	d006      	beq.n	800f314 <__gethex+0x34e>
 800f306:	f8d9 3000 	ldr.w	r3, [r9]
 800f30a:	ea4a 0a03 	orr.w	sl, sl, r3
 800f30e:	f01a 0f01 	tst.w	sl, #1
 800f312:	d10e      	bne.n	800f332 <__gethex+0x36c>
 800f314:	f047 0710 	orr.w	r7, r7, #16
 800f318:	e033      	b.n	800f382 <__gethex+0x3bc>
 800f31a:	f04f 0a01 	mov.w	sl, #1
 800f31e:	e7d0      	b.n	800f2c2 <__gethex+0x2fc>
 800f320:	2701      	movs	r7, #1
 800f322:	e7e2      	b.n	800f2ea <__gethex+0x324>
 800f324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f326:	f1c3 0301 	rsb	r3, r3, #1
 800f32a:	9315      	str	r3, [sp, #84]	; 0x54
 800f32c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d0f0      	beq.n	800f314 <__gethex+0x34e>
 800f332:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f336:	f105 0314 	add.w	r3, r5, #20
 800f33a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f33e:	eb03 010a 	add.w	r1, r3, sl
 800f342:	f04f 0c00 	mov.w	ip, #0
 800f346:	4618      	mov	r0, r3
 800f348:	f853 2b04 	ldr.w	r2, [r3], #4
 800f34c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f350:	d01c      	beq.n	800f38c <__gethex+0x3c6>
 800f352:	3201      	adds	r2, #1
 800f354:	6002      	str	r2, [r0, #0]
 800f356:	2f02      	cmp	r7, #2
 800f358:	f105 0314 	add.w	r3, r5, #20
 800f35c:	d138      	bne.n	800f3d0 <__gethex+0x40a>
 800f35e:	f8d8 2000 	ldr.w	r2, [r8]
 800f362:	3a01      	subs	r2, #1
 800f364:	42b2      	cmp	r2, r6
 800f366:	d10a      	bne.n	800f37e <__gethex+0x3b8>
 800f368:	1171      	asrs	r1, r6, #5
 800f36a:	2201      	movs	r2, #1
 800f36c:	f006 061f 	and.w	r6, r6, #31
 800f370:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f374:	fa02 f606 	lsl.w	r6, r2, r6
 800f378:	421e      	tst	r6, r3
 800f37a:	bf18      	it	ne
 800f37c:	4617      	movne	r7, r2
 800f37e:	f047 0720 	orr.w	r7, r7, #32
 800f382:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f384:	601d      	str	r5, [r3, #0]
 800f386:	9b06      	ldr	r3, [sp, #24]
 800f388:	601c      	str	r4, [r3, #0]
 800f38a:	e6a4      	b.n	800f0d6 <__gethex+0x110>
 800f38c:	4299      	cmp	r1, r3
 800f38e:	f843 cc04 	str.w	ip, [r3, #-4]
 800f392:	d8d8      	bhi.n	800f346 <__gethex+0x380>
 800f394:	68ab      	ldr	r3, [r5, #8]
 800f396:	4599      	cmp	r9, r3
 800f398:	db12      	blt.n	800f3c0 <__gethex+0x3fa>
 800f39a:	6869      	ldr	r1, [r5, #4]
 800f39c:	9802      	ldr	r0, [sp, #8]
 800f39e:	3101      	adds	r1, #1
 800f3a0:	f000 f8fa 	bl	800f598 <_Balloc>
 800f3a4:	692a      	ldr	r2, [r5, #16]
 800f3a6:	3202      	adds	r2, #2
 800f3a8:	f105 010c 	add.w	r1, r5, #12
 800f3ac:	4683      	mov	fp, r0
 800f3ae:	0092      	lsls	r2, r2, #2
 800f3b0:	300c      	adds	r0, #12
 800f3b2:	f7fd f917 	bl	800c5e4 <memcpy>
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	9802      	ldr	r0, [sp, #8]
 800f3ba:	f000 f921 	bl	800f600 <_Bfree>
 800f3be:	465d      	mov	r5, fp
 800f3c0:	692b      	ldr	r3, [r5, #16]
 800f3c2:	1c5a      	adds	r2, r3, #1
 800f3c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f3c8:	612a      	str	r2, [r5, #16]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	615a      	str	r2, [r3, #20]
 800f3ce:	e7c2      	b.n	800f356 <__gethex+0x390>
 800f3d0:	692a      	ldr	r2, [r5, #16]
 800f3d2:	454a      	cmp	r2, r9
 800f3d4:	dd0b      	ble.n	800f3ee <__gethex+0x428>
 800f3d6:	2101      	movs	r1, #1
 800f3d8:	4628      	mov	r0, r5
 800f3da:	f7ff fda5 	bl	800ef28 <rshift>
 800f3de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3e2:	3401      	adds	r4, #1
 800f3e4:	42a3      	cmp	r3, r4
 800f3e6:	f6ff aed9 	blt.w	800f19c <__gethex+0x1d6>
 800f3ea:	2701      	movs	r7, #1
 800f3ec:	e7c7      	b.n	800f37e <__gethex+0x3b8>
 800f3ee:	f016 061f 	ands.w	r6, r6, #31
 800f3f2:	d0fa      	beq.n	800f3ea <__gethex+0x424>
 800f3f4:	449a      	add	sl, r3
 800f3f6:	f1c6 0620 	rsb	r6, r6, #32
 800f3fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f3fe:	f000 f98f 	bl	800f720 <__hi0bits>
 800f402:	42b0      	cmp	r0, r6
 800f404:	dbe7      	blt.n	800f3d6 <__gethex+0x410>
 800f406:	e7f0      	b.n	800f3ea <__gethex+0x424>

0800f408 <L_shift>:
 800f408:	f1c2 0208 	rsb	r2, r2, #8
 800f40c:	0092      	lsls	r2, r2, #2
 800f40e:	b570      	push	{r4, r5, r6, lr}
 800f410:	f1c2 0620 	rsb	r6, r2, #32
 800f414:	6843      	ldr	r3, [r0, #4]
 800f416:	6804      	ldr	r4, [r0, #0]
 800f418:	fa03 f506 	lsl.w	r5, r3, r6
 800f41c:	432c      	orrs	r4, r5
 800f41e:	40d3      	lsrs	r3, r2
 800f420:	6004      	str	r4, [r0, #0]
 800f422:	f840 3f04 	str.w	r3, [r0, #4]!
 800f426:	4288      	cmp	r0, r1
 800f428:	d3f4      	bcc.n	800f414 <L_shift+0xc>
 800f42a:	bd70      	pop	{r4, r5, r6, pc}

0800f42c <__match>:
 800f42c:	b530      	push	{r4, r5, lr}
 800f42e:	6803      	ldr	r3, [r0, #0]
 800f430:	3301      	adds	r3, #1
 800f432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f436:	b914      	cbnz	r4, 800f43e <__match+0x12>
 800f438:	6003      	str	r3, [r0, #0]
 800f43a:	2001      	movs	r0, #1
 800f43c:	bd30      	pop	{r4, r5, pc}
 800f43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f442:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f446:	2d19      	cmp	r5, #25
 800f448:	bf98      	it	ls
 800f44a:	3220      	addls	r2, #32
 800f44c:	42a2      	cmp	r2, r4
 800f44e:	d0f0      	beq.n	800f432 <__match+0x6>
 800f450:	2000      	movs	r0, #0
 800f452:	e7f3      	b.n	800f43c <__match+0x10>

0800f454 <__hexnan>:
 800f454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f458:	680b      	ldr	r3, [r1, #0]
 800f45a:	6801      	ldr	r1, [r0, #0]
 800f45c:	115f      	asrs	r7, r3, #5
 800f45e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f462:	f013 031f 	ands.w	r3, r3, #31
 800f466:	b087      	sub	sp, #28
 800f468:	bf18      	it	ne
 800f46a:	3704      	addne	r7, #4
 800f46c:	2500      	movs	r5, #0
 800f46e:	1f3e      	subs	r6, r7, #4
 800f470:	4682      	mov	sl, r0
 800f472:	4690      	mov	r8, r2
 800f474:	9301      	str	r3, [sp, #4]
 800f476:	f847 5c04 	str.w	r5, [r7, #-4]
 800f47a:	46b1      	mov	r9, r6
 800f47c:	4634      	mov	r4, r6
 800f47e:	9502      	str	r5, [sp, #8]
 800f480:	46ab      	mov	fp, r5
 800f482:	784a      	ldrb	r2, [r1, #1]
 800f484:	1c4b      	adds	r3, r1, #1
 800f486:	9303      	str	r3, [sp, #12]
 800f488:	b342      	cbz	r2, 800f4dc <__hexnan+0x88>
 800f48a:	4610      	mov	r0, r2
 800f48c:	9105      	str	r1, [sp, #20]
 800f48e:	9204      	str	r2, [sp, #16]
 800f490:	f7ff fd84 	bl	800ef9c <__hexdig_fun>
 800f494:	2800      	cmp	r0, #0
 800f496:	d143      	bne.n	800f520 <__hexnan+0xcc>
 800f498:	9a04      	ldr	r2, [sp, #16]
 800f49a:	9905      	ldr	r1, [sp, #20]
 800f49c:	2a20      	cmp	r2, #32
 800f49e:	d818      	bhi.n	800f4d2 <__hexnan+0x7e>
 800f4a0:	9b02      	ldr	r3, [sp, #8]
 800f4a2:	459b      	cmp	fp, r3
 800f4a4:	dd13      	ble.n	800f4ce <__hexnan+0x7a>
 800f4a6:	454c      	cmp	r4, r9
 800f4a8:	d206      	bcs.n	800f4b8 <__hexnan+0x64>
 800f4aa:	2d07      	cmp	r5, #7
 800f4ac:	dc04      	bgt.n	800f4b8 <__hexnan+0x64>
 800f4ae:	462a      	mov	r2, r5
 800f4b0:	4649      	mov	r1, r9
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f7ff ffa8 	bl	800f408 <L_shift>
 800f4b8:	4544      	cmp	r4, r8
 800f4ba:	d944      	bls.n	800f546 <__hexnan+0xf2>
 800f4bc:	2300      	movs	r3, #0
 800f4be:	f1a4 0904 	sub.w	r9, r4, #4
 800f4c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4c6:	f8cd b008 	str.w	fp, [sp, #8]
 800f4ca:	464c      	mov	r4, r9
 800f4cc:	461d      	mov	r5, r3
 800f4ce:	9903      	ldr	r1, [sp, #12]
 800f4d0:	e7d7      	b.n	800f482 <__hexnan+0x2e>
 800f4d2:	2a29      	cmp	r2, #41	; 0x29
 800f4d4:	d14a      	bne.n	800f56c <__hexnan+0x118>
 800f4d6:	3102      	adds	r1, #2
 800f4d8:	f8ca 1000 	str.w	r1, [sl]
 800f4dc:	f1bb 0f00 	cmp.w	fp, #0
 800f4e0:	d044      	beq.n	800f56c <__hexnan+0x118>
 800f4e2:	454c      	cmp	r4, r9
 800f4e4:	d206      	bcs.n	800f4f4 <__hexnan+0xa0>
 800f4e6:	2d07      	cmp	r5, #7
 800f4e8:	dc04      	bgt.n	800f4f4 <__hexnan+0xa0>
 800f4ea:	462a      	mov	r2, r5
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f7ff ff8a 	bl	800f408 <L_shift>
 800f4f4:	4544      	cmp	r4, r8
 800f4f6:	d928      	bls.n	800f54a <__hexnan+0xf6>
 800f4f8:	4643      	mov	r3, r8
 800f4fa:	f854 2b04 	ldr.w	r2, [r4], #4
 800f4fe:	f843 2b04 	str.w	r2, [r3], #4
 800f502:	42a6      	cmp	r6, r4
 800f504:	d2f9      	bcs.n	800f4fa <__hexnan+0xa6>
 800f506:	2200      	movs	r2, #0
 800f508:	f843 2b04 	str.w	r2, [r3], #4
 800f50c:	429e      	cmp	r6, r3
 800f50e:	d2fb      	bcs.n	800f508 <__hexnan+0xb4>
 800f510:	6833      	ldr	r3, [r6, #0]
 800f512:	b91b      	cbnz	r3, 800f51c <__hexnan+0xc8>
 800f514:	4546      	cmp	r6, r8
 800f516:	d127      	bne.n	800f568 <__hexnan+0x114>
 800f518:	2301      	movs	r3, #1
 800f51a:	6033      	str	r3, [r6, #0]
 800f51c:	2005      	movs	r0, #5
 800f51e:	e026      	b.n	800f56e <__hexnan+0x11a>
 800f520:	3501      	adds	r5, #1
 800f522:	2d08      	cmp	r5, #8
 800f524:	f10b 0b01 	add.w	fp, fp, #1
 800f528:	dd06      	ble.n	800f538 <__hexnan+0xe4>
 800f52a:	4544      	cmp	r4, r8
 800f52c:	d9cf      	bls.n	800f4ce <__hexnan+0x7a>
 800f52e:	2300      	movs	r3, #0
 800f530:	f844 3c04 	str.w	r3, [r4, #-4]
 800f534:	2501      	movs	r5, #1
 800f536:	3c04      	subs	r4, #4
 800f538:	6822      	ldr	r2, [r4, #0]
 800f53a:	f000 000f 	and.w	r0, r0, #15
 800f53e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f542:	6020      	str	r0, [r4, #0]
 800f544:	e7c3      	b.n	800f4ce <__hexnan+0x7a>
 800f546:	2508      	movs	r5, #8
 800f548:	e7c1      	b.n	800f4ce <__hexnan+0x7a>
 800f54a:	9b01      	ldr	r3, [sp, #4]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0df      	beq.n	800f510 <__hexnan+0xbc>
 800f550:	f04f 32ff 	mov.w	r2, #4294967295
 800f554:	f1c3 0320 	rsb	r3, r3, #32
 800f558:	fa22 f303 	lsr.w	r3, r2, r3
 800f55c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f560:	401a      	ands	r2, r3
 800f562:	f847 2c04 	str.w	r2, [r7, #-4]
 800f566:	e7d3      	b.n	800f510 <__hexnan+0xbc>
 800f568:	3e04      	subs	r6, #4
 800f56a:	e7d1      	b.n	800f510 <__hexnan+0xbc>
 800f56c:	2004      	movs	r0, #4
 800f56e:	b007      	add	sp, #28
 800f570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f574 <__localeconv_l>:
 800f574:	30f0      	adds	r0, #240	; 0xf0
 800f576:	4770      	bx	lr

0800f578 <_localeconv_r>:
 800f578:	4b04      	ldr	r3, [pc, #16]	; (800f58c <_localeconv_r+0x14>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	6a18      	ldr	r0, [r3, #32]
 800f57e:	4b04      	ldr	r3, [pc, #16]	; (800f590 <_localeconv_r+0x18>)
 800f580:	2800      	cmp	r0, #0
 800f582:	bf08      	it	eq
 800f584:	4618      	moveq	r0, r3
 800f586:	30f0      	adds	r0, #240	; 0xf0
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	20000018 	.word	0x20000018
 800f590:	2000007c 	.word	0x2000007c

0800f594 <__malloc_lock>:
 800f594:	4770      	bx	lr

0800f596 <__malloc_unlock>:
 800f596:	4770      	bx	lr

0800f598 <_Balloc>:
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f59c:	4604      	mov	r4, r0
 800f59e:	460e      	mov	r6, r1
 800f5a0:	b93d      	cbnz	r5, 800f5b2 <_Balloc+0x1a>
 800f5a2:	2010      	movs	r0, #16
 800f5a4:	f7fc fffc 	bl	800c5a0 <malloc>
 800f5a8:	6260      	str	r0, [r4, #36]	; 0x24
 800f5aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f5ae:	6005      	str	r5, [r0, #0]
 800f5b0:	60c5      	str	r5, [r0, #12]
 800f5b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f5b4:	68eb      	ldr	r3, [r5, #12]
 800f5b6:	b183      	cbz	r3, 800f5da <_Balloc+0x42>
 800f5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f5c0:	b9b8      	cbnz	r0, 800f5f2 <_Balloc+0x5a>
 800f5c2:	2101      	movs	r1, #1
 800f5c4:	fa01 f506 	lsl.w	r5, r1, r6
 800f5c8:	1d6a      	adds	r2, r5, #5
 800f5ca:	0092      	lsls	r2, r2, #2
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f000 fbe2 	bl	800fd96 <_calloc_r>
 800f5d2:	b160      	cbz	r0, 800f5ee <_Balloc+0x56>
 800f5d4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f5d8:	e00e      	b.n	800f5f8 <_Balloc+0x60>
 800f5da:	2221      	movs	r2, #33	; 0x21
 800f5dc:	2104      	movs	r1, #4
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f000 fbd9 	bl	800fd96 <_calloc_r>
 800f5e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5e6:	60e8      	str	r0, [r5, #12]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d1e4      	bne.n	800f5b8 <_Balloc+0x20>
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	bd70      	pop	{r4, r5, r6, pc}
 800f5f2:	6802      	ldr	r2, [r0, #0]
 800f5f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5fe:	e7f7      	b.n	800f5f0 <_Balloc+0x58>

0800f600 <_Bfree>:
 800f600:	b570      	push	{r4, r5, r6, lr}
 800f602:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f604:	4606      	mov	r6, r0
 800f606:	460d      	mov	r5, r1
 800f608:	b93c      	cbnz	r4, 800f61a <_Bfree+0x1a>
 800f60a:	2010      	movs	r0, #16
 800f60c:	f7fc ffc8 	bl	800c5a0 <malloc>
 800f610:	6270      	str	r0, [r6, #36]	; 0x24
 800f612:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f616:	6004      	str	r4, [r0, #0]
 800f618:	60c4      	str	r4, [r0, #12]
 800f61a:	b13d      	cbz	r5, 800f62c <_Bfree+0x2c>
 800f61c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f61e:	686a      	ldr	r2, [r5, #4]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f626:	6029      	str	r1, [r5, #0]
 800f628:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f62c:	bd70      	pop	{r4, r5, r6, pc}

0800f62e <__multadd>:
 800f62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f632:	690d      	ldr	r5, [r1, #16]
 800f634:	461f      	mov	r7, r3
 800f636:	4606      	mov	r6, r0
 800f638:	460c      	mov	r4, r1
 800f63a:	f101 0c14 	add.w	ip, r1, #20
 800f63e:	2300      	movs	r3, #0
 800f640:	f8dc 0000 	ldr.w	r0, [ip]
 800f644:	b281      	uxth	r1, r0
 800f646:	fb02 7101 	mla	r1, r2, r1, r7
 800f64a:	0c0f      	lsrs	r7, r1, #16
 800f64c:	0c00      	lsrs	r0, r0, #16
 800f64e:	fb02 7000 	mla	r0, r2, r0, r7
 800f652:	b289      	uxth	r1, r1
 800f654:	3301      	adds	r3, #1
 800f656:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f65a:	429d      	cmp	r5, r3
 800f65c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f660:	f84c 1b04 	str.w	r1, [ip], #4
 800f664:	dcec      	bgt.n	800f640 <__multadd+0x12>
 800f666:	b1d7      	cbz	r7, 800f69e <__multadd+0x70>
 800f668:	68a3      	ldr	r3, [r4, #8]
 800f66a:	42ab      	cmp	r3, r5
 800f66c:	dc12      	bgt.n	800f694 <__multadd+0x66>
 800f66e:	6861      	ldr	r1, [r4, #4]
 800f670:	4630      	mov	r0, r6
 800f672:	3101      	adds	r1, #1
 800f674:	f7ff ff90 	bl	800f598 <_Balloc>
 800f678:	6922      	ldr	r2, [r4, #16]
 800f67a:	3202      	adds	r2, #2
 800f67c:	f104 010c 	add.w	r1, r4, #12
 800f680:	4680      	mov	r8, r0
 800f682:	0092      	lsls	r2, r2, #2
 800f684:	300c      	adds	r0, #12
 800f686:	f7fc ffad 	bl	800c5e4 <memcpy>
 800f68a:	4621      	mov	r1, r4
 800f68c:	4630      	mov	r0, r6
 800f68e:	f7ff ffb7 	bl	800f600 <_Bfree>
 800f692:	4644      	mov	r4, r8
 800f694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f698:	3501      	adds	r5, #1
 800f69a:	615f      	str	r7, [r3, #20]
 800f69c:	6125      	str	r5, [r4, #16]
 800f69e:	4620      	mov	r0, r4
 800f6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6a4 <__s2b>:
 800f6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6a8:	460c      	mov	r4, r1
 800f6aa:	4615      	mov	r5, r2
 800f6ac:	461f      	mov	r7, r3
 800f6ae:	2209      	movs	r2, #9
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	db20      	blt.n	800f702 <__s2b+0x5e>
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	f7ff ff69 	bl	800f598 <_Balloc>
 800f6c6:	9b08      	ldr	r3, [sp, #32]
 800f6c8:	6143      	str	r3, [r0, #20]
 800f6ca:	2d09      	cmp	r5, #9
 800f6cc:	f04f 0301 	mov.w	r3, #1
 800f6d0:	6103      	str	r3, [r0, #16]
 800f6d2:	dd19      	ble.n	800f708 <__s2b+0x64>
 800f6d4:	f104 0809 	add.w	r8, r4, #9
 800f6d8:	46c1      	mov	r9, r8
 800f6da:	442c      	add	r4, r5
 800f6dc:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f6e0:	4601      	mov	r1, r0
 800f6e2:	3b30      	subs	r3, #48	; 0x30
 800f6e4:	220a      	movs	r2, #10
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	f7ff ffa1 	bl	800f62e <__multadd>
 800f6ec:	45a1      	cmp	r9, r4
 800f6ee:	d1f5      	bne.n	800f6dc <__s2b+0x38>
 800f6f0:	eb08 0405 	add.w	r4, r8, r5
 800f6f4:	3c08      	subs	r4, #8
 800f6f6:	1b2d      	subs	r5, r5, r4
 800f6f8:	1963      	adds	r3, r4, r5
 800f6fa:	42bb      	cmp	r3, r7
 800f6fc:	db07      	blt.n	800f70e <__s2b+0x6a>
 800f6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f702:	0052      	lsls	r2, r2, #1
 800f704:	3101      	adds	r1, #1
 800f706:	e7d9      	b.n	800f6bc <__s2b+0x18>
 800f708:	340a      	adds	r4, #10
 800f70a:	2509      	movs	r5, #9
 800f70c:	e7f3      	b.n	800f6f6 <__s2b+0x52>
 800f70e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f712:	4601      	mov	r1, r0
 800f714:	3b30      	subs	r3, #48	; 0x30
 800f716:	220a      	movs	r2, #10
 800f718:	4630      	mov	r0, r6
 800f71a:	f7ff ff88 	bl	800f62e <__multadd>
 800f71e:	e7eb      	b.n	800f6f8 <__s2b+0x54>

0800f720 <__hi0bits>:
 800f720:	0c02      	lsrs	r2, r0, #16
 800f722:	0412      	lsls	r2, r2, #16
 800f724:	4603      	mov	r3, r0
 800f726:	b9b2      	cbnz	r2, 800f756 <__hi0bits+0x36>
 800f728:	0403      	lsls	r3, r0, #16
 800f72a:	2010      	movs	r0, #16
 800f72c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f730:	bf04      	itt	eq
 800f732:	021b      	lsleq	r3, r3, #8
 800f734:	3008      	addeq	r0, #8
 800f736:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f73a:	bf04      	itt	eq
 800f73c:	011b      	lsleq	r3, r3, #4
 800f73e:	3004      	addeq	r0, #4
 800f740:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f744:	bf04      	itt	eq
 800f746:	009b      	lsleq	r3, r3, #2
 800f748:	3002      	addeq	r0, #2
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	db06      	blt.n	800f75c <__hi0bits+0x3c>
 800f74e:	005b      	lsls	r3, r3, #1
 800f750:	d503      	bpl.n	800f75a <__hi0bits+0x3a>
 800f752:	3001      	adds	r0, #1
 800f754:	4770      	bx	lr
 800f756:	2000      	movs	r0, #0
 800f758:	e7e8      	b.n	800f72c <__hi0bits+0xc>
 800f75a:	2020      	movs	r0, #32
 800f75c:	4770      	bx	lr

0800f75e <__lo0bits>:
 800f75e:	6803      	ldr	r3, [r0, #0]
 800f760:	f013 0207 	ands.w	r2, r3, #7
 800f764:	4601      	mov	r1, r0
 800f766:	d00b      	beq.n	800f780 <__lo0bits+0x22>
 800f768:	07da      	lsls	r2, r3, #31
 800f76a:	d423      	bmi.n	800f7b4 <__lo0bits+0x56>
 800f76c:	0798      	lsls	r0, r3, #30
 800f76e:	bf49      	itett	mi
 800f770:	085b      	lsrmi	r3, r3, #1
 800f772:	089b      	lsrpl	r3, r3, #2
 800f774:	2001      	movmi	r0, #1
 800f776:	600b      	strmi	r3, [r1, #0]
 800f778:	bf5c      	itt	pl
 800f77a:	600b      	strpl	r3, [r1, #0]
 800f77c:	2002      	movpl	r0, #2
 800f77e:	4770      	bx	lr
 800f780:	b298      	uxth	r0, r3
 800f782:	b9a8      	cbnz	r0, 800f7b0 <__lo0bits+0x52>
 800f784:	0c1b      	lsrs	r3, r3, #16
 800f786:	2010      	movs	r0, #16
 800f788:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f78c:	bf04      	itt	eq
 800f78e:	0a1b      	lsreq	r3, r3, #8
 800f790:	3008      	addeq	r0, #8
 800f792:	071a      	lsls	r2, r3, #28
 800f794:	bf04      	itt	eq
 800f796:	091b      	lsreq	r3, r3, #4
 800f798:	3004      	addeq	r0, #4
 800f79a:	079a      	lsls	r2, r3, #30
 800f79c:	bf04      	itt	eq
 800f79e:	089b      	lsreq	r3, r3, #2
 800f7a0:	3002      	addeq	r0, #2
 800f7a2:	07da      	lsls	r2, r3, #31
 800f7a4:	d402      	bmi.n	800f7ac <__lo0bits+0x4e>
 800f7a6:	085b      	lsrs	r3, r3, #1
 800f7a8:	d006      	beq.n	800f7b8 <__lo0bits+0x5a>
 800f7aa:	3001      	adds	r0, #1
 800f7ac:	600b      	str	r3, [r1, #0]
 800f7ae:	4770      	bx	lr
 800f7b0:	4610      	mov	r0, r2
 800f7b2:	e7e9      	b.n	800f788 <__lo0bits+0x2a>
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	4770      	bx	lr
 800f7b8:	2020      	movs	r0, #32
 800f7ba:	4770      	bx	lr

0800f7bc <__i2b>:
 800f7bc:	b510      	push	{r4, lr}
 800f7be:	460c      	mov	r4, r1
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	f7ff fee9 	bl	800f598 <_Balloc>
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	6144      	str	r4, [r0, #20]
 800f7ca:	6102      	str	r2, [r0, #16]
 800f7cc:	bd10      	pop	{r4, pc}

0800f7ce <__multiply>:
 800f7ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d2:	4614      	mov	r4, r2
 800f7d4:	690a      	ldr	r2, [r1, #16]
 800f7d6:	6923      	ldr	r3, [r4, #16]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	bfb8      	it	lt
 800f7dc:	460b      	movlt	r3, r1
 800f7de:	4688      	mov	r8, r1
 800f7e0:	bfbc      	itt	lt
 800f7e2:	46a0      	movlt	r8, r4
 800f7e4:	461c      	movlt	r4, r3
 800f7e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f7ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f7ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f7f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f7f6:	eb07 0609 	add.w	r6, r7, r9
 800f7fa:	42b3      	cmp	r3, r6
 800f7fc:	bfb8      	it	lt
 800f7fe:	3101      	addlt	r1, #1
 800f800:	f7ff feca 	bl	800f598 <_Balloc>
 800f804:	f100 0514 	add.w	r5, r0, #20
 800f808:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f80c:	462b      	mov	r3, r5
 800f80e:	2200      	movs	r2, #0
 800f810:	4573      	cmp	r3, lr
 800f812:	d316      	bcc.n	800f842 <__multiply+0x74>
 800f814:	f104 0214 	add.w	r2, r4, #20
 800f818:	f108 0114 	add.w	r1, r8, #20
 800f81c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f820:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f824:	9300      	str	r3, [sp, #0]
 800f826:	9b00      	ldr	r3, [sp, #0]
 800f828:	9201      	str	r2, [sp, #4]
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d80c      	bhi.n	800f848 <__multiply+0x7a>
 800f82e:	2e00      	cmp	r6, #0
 800f830:	dd03      	ble.n	800f83a <__multiply+0x6c>
 800f832:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f836:	2b00      	cmp	r3, #0
 800f838:	d05d      	beq.n	800f8f6 <__multiply+0x128>
 800f83a:	6106      	str	r6, [r0, #16]
 800f83c:	b003      	add	sp, #12
 800f83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f842:	f843 2b04 	str.w	r2, [r3], #4
 800f846:	e7e3      	b.n	800f810 <__multiply+0x42>
 800f848:	f8b2 b000 	ldrh.w	fp, [r2]
 800f84c:	f1bb 0f00 	cmp.w	fp, #0
 800f850:	d023      	beq.n	800f89a <__multiply+0xcc>
 800f852:	4689      	mov	r9, r1
 800f854:	46ac      	mov	ip, r5
 800f856:	f04f 0800 	mov.w	r8, #0
 800f85a:	f859 4b04 	ldr.w	r4, [r9], #4
 800f85e:	f8dc a000 	ldr.w	sl, [ip]
 800f862:	b2a3      	uxth	r3, r4
 800f864:	fa1f fa8a 	uxth.w	sl, sl
 800f868:	fb0b a303 	mla	r3, fp, r3, sl
 800f86c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f870:	f8dc 4000 	ldr.w	r4, [ip]
 800f874:	4443      	add	r3, r8
 800f876:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f87a:	fb0b 840a 	mla	r4, fp, sl, r8
 800f87e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f882:	46e2      	mov	sl, ip
 800f884:	b29b      	uxth	r3, r3
 800f886:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f88a:	454f      	cmp	r7, r9
 800f88c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f890:	f84a 3b04 	str.w	r3, [sl], #4
 800f894:	d82b      	bhi.n	800f8ee <__multiply+0x120>
 800f896:	f8cc 8004 	str.w	r8, [ip, #4]
 800f89a:	9b01      	ldr	r3, [sp, #4]
 800f89c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f8a0:	3204      	adds	r2, #4
 800f8a2:	f1ba 0f00 	cmp.w	sl, #0
 800f8a6:	d020      	beq.n	800f8ea <__multiply+0x11c>
 800f8a8:	682b      	ldr	r3, [r5, #0]
 800f8aa:	4689      	mov	r9, r1
 800f8ac:	46a8      	mov	r8, r5
 800f8ae:	f04f 0b00 	mov.w	fp, #0
 800f8b2:	f8b9 c000 	ldrh.w	ip, [r9]
 800f8b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f8ba:	fb0a 440c 	mla	r4, sl, ip, r4
 800f8be:	445c      	add	r4, fp
 800f8c0:	46c4      	mov	ip, r8
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f8c8:	f84c 3b04 	str.w	r3, [ip], #4
 800f8cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800f8d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f8d4:	0c1b      	lsrs	r3, r3, #16
 800f8d6:	fb0a b303 	mla	r3, sl, r3, fp
 800f8da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f8de:	454f      	cmp	r7, r9
 800f8e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f8e4:	d805      	bhi.n	800f8f2 <__multiply+0x124>
 800f8e6:	f8c8 3004 	str.w	r3, [r8, #4]
 800f8ea:	3504      	adds	r5, #4
 800f8ec:	e79b      	b.n	800f826 <__multiply+0x58>
 800f8ee:	46d4      	mov	ip, sl
 800f8f0:	e7b3      	b.n	800f85a <__multiply+0x8c>
 800f8f2:	46e0      	mov	r8, ip
 800f8f4:	e7dd      	b.n	800f8b2 <__multiply+0xe4>
 800f8f6:	3e01      	subs	r6, #1
 800f8f8:	e799      	b.n	800f82e <__multiply+0x60>
	...

0800f8fc <__pow5mult>:
 800f8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f900:	4615      	mov	r5, r2
 800f902:	f012 0203 	ands.w	r2, r2, #3
 800f906:	4606      	mov	r6, r0
 800f908:	460f      	mov	r7, r1
 800f90a:	d007      	beq.n	800f91c <__pow5mult+0x20>
 800f90c:	3a01      	subs	r2, #1
 800f90e:	4c21      	ldr	r4, [pc, #132]	; (800f994 <__pow5mult+0x98>)
 800f910:	2300      	movs	r3, #0
 800f912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f916:	f7ff fe8a 	bl	800f62e <__multadd>
 800f91a:	4607      	mov	r7, r0
 800f91c:	10ad      	asrs	r5, r5, #2
 800f91e:	d035      	beq.n	800f98c <__pow5mult+0x90>
 800f920:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f922:	b93c      	cbnz	r4, 800f934 <__pow5mult+0x38>
 800f924:	2010      	movs	r0, #16
 800f926:	f7fc fe3b 	bl	800c5a0 <malloc>
 800f92a:	6270      	str	r0, [r6, #36]	; 0x24
 800f92c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f930:	6004      	str	r4, [r0, #0]
 800f932:	60c4      	str	r4, [r0, #12]
 800f934:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f93c:	b94c      	cbnz	r4, 800f952 <__pow5mult+0x56>
 800f93e:	f240 2171 	movw	r1, #625	; 0x271
 800f942:	4630      	mov	r0, r6
 800f944:	f7ff ff3a 	bl	800f7bc <__i2b>
 800f948:	2300      	movs	r3, #0
 800f94a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f94e:	4604      	mov	r4, r0
 800f950:	6003      	str	r3, [r0, #0]
 800f952:	f04f 0800 	mov.w	r8, #0
 800f956:	07eb      	lsls	r3, r5, #31
 800f958:	d50a      	bpl.n	800f970 <__pow5mult+0x74>
 800f95a:	4639      	mov	r1, r7
 800f95c:	4622      	mov	r2, r4
 800f95e:	4630      	mov	r0, r6
 800f960:	f7ff ff35 	bl	800f7ce <__multiply>
 800f964:	4639      	mov	r1, r7
 800f966:	4681      	mov	r9, r0
 800f968:	4630      	mov	r0, r6
 800f96a:	f7ff fe49 	bl	800f600 <_Bfree>
 800f96e:	464f      	mov	r7, r9
 800f970:	106d      	asrs	r5, r5, #1
 800f972:	d00b      	beq.n	800f98c <__pow5mult+0x90>
 800f974:	6820      	ldr	r0, [r4, #0]
 800f976:	b938      	cbnz	r0, 800f988 <__pow5mult+0x8c>
 800f978:	4622      	mov	r2, r4
 800f97a:	4621      	mov	r1, r4
 800f97c:	4630      	mov	r0, r6
 800f97e:	f7ff ff26 	bl	800f7ce <__multiply>
 800f982:	6020      	str	r0, [r4, #0]
 800f984:	f8c0 8000 	str.w	r8, [r0]
 800f988:	4604      	mov	r4, r0
 800f98a:	e7e4      	b.n	800f956 <__pow5mult+0x5a>
 800f98c:	4638      	mov	r0, r7
 800f98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f992:	bf00      	nop
 800f994:	08011848 	.word	0x08011848

0800f998 <__lshift>:
 800f998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	460c      	mov	r4, r1
 800f99e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9a2:	6923      	ldr	r3, [r4, #16]
 800f9a4:	6849      	ldr	r1, [r1, #4]
 800f9a6:	eb0a 0903 	add.w	r9, sl, r3
 800f9aa:	68a3      	ldr	r3, [r4, #8]
 800f9ac:	4607      	mov	r7, r0
 800f9ae:	4616      	mov	r6, r2
 800f9b0:	f109 0501 	add.w	r5, r9, #1
 800f9b4:	42ab      	cmp	r3, r5
 800f9b6:	db32      	blt.n	800fa1e <__lshift+0x86>
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f7ff fded 	bl	800f598 <_Balloc>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	4680      	mov	r8, r0
 800f9c2:	f100 0114 	add.w	r1, r0, #20
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	4553      	cmp	r3, sl
 800f9ca:	db2b      	blt.n	800fa24 <__lshift+0x8c>
 800f9cc:	6920      	ldr	r0, [r4, #16]
 800f9ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9d2:	f104 0314 	add.w	r3, r4, #20
 800f9d6:	f016 021f 	ands.w	r2, r6, #31
 800f9da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f9e2:	d025      	beq.n	800fa30 <__lshift+0x98>
 800f9e4:	f1c2 0e20 	rsb	lr, r2, #32
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	681e      	ldr	r6, [r3, #0]
 800f9ec:	468a      	mov	sl, r1
 800f9ee:	4096      	lsls	r6, r2
 800f9f0:	4330      	orrs	r0, r6
 800f9f2:	f84a 0b04 	str.w	r0, [sl], #4
 800f9f6:	f853 0b04 	ldr.w	r0, [r3], #4
 800f9fa:	459c      	cmp	ip, r3
 800f9fc:	fa20 f00e 	lsr.w	r0, r0, lr
 800fa00:	d814      	bhi.n	800fa2c <__lshift+0x94>
 800fa02:	6048      	str	r0, [r1, #4]
 800fa04:	b108      	cbz	r0, 800fa0a <__lshift+0x72>
 800fa06:	f109 0502 	add.w	r5, r9, #2
 800fa0a:	3d01      	subs	r5, #1
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	f8c8 5010 	str.w	r5, [r8, #16]
 800fa12:	4621      	mov	r1, r4
 800fa14:	f7ff fdf4 	bl	800f600 <_Bfree>
 800fa18:	4640      	mov	r0, r8
 800fa1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa1e:	3101      	adds	r1, #1
 800fa20:	005b      	lsls	r3, r3, #1
 800fa22:	e7c7      	b.n	800f9b4 <__lshift+0x1c>
 800fa24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	e7cd      	b.n	800f9c8 <__lshift+0x30>
 800fa2c:	4651      	mov	r1, sl
 800fa2e:	e7dc      	b.n	800f9ea <__lshift+0x52>
 800fa30:	3904      	subs	r1, #4
 800fa32:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa36:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa3a:	459c      	cmp	ip, r3
 800fa3c:	d8f9      	bhi.n	800fa32 <__lshift+0x9a>
 800fa3e:	e7e4      	b.n	800fa0a <__lshift+0x72>

0800fa40 <__mcmp>:
 800fa40:	6903      	ldr	r3, [r0, #16]
 800fa42:	690a      	ldr	r2, [r1, #16]
 800fa44:	1a9b      	subs	r3, r3, r2
 800fa46:	b530      	push	{r4, r5, lr}
 800fa48:	d10c      	bne.n	800fa64 <__mcmp+0x24>
 800fa4a:	0092      	lsls	r2, r2, #2
 800fa4c:	3014      	adds	r0, #20
 800fa4e:	3114      	adds	r1, #20
 800fa50:	1884      	adds	r4, r0, r2
 800fa52:	4411      	add	r1, r2
 800fa54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fa58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fa5c:	4295      	cmp	r5, r2
 800fa5e:	d003      	beq.n	800fa68 <__mcmp+0x28>
 800fa60:	d305      	bcc.n	800fa6e <__mcmp+0x2e>
 800fa62:	2301      	movs	r3, #1
 800fa64:	4618      	mov	r0, r3
 800fa66:	bd30      	pop	{r4, r5, pc}
 800fa68:	42a0      	cmp	r0, r4
 800fa6a:	d3f3      	bcc.n	800fa54 <__mcmp+0x14>
 800fa6c:	e7fa      	b.n	800fa64 <__mcmp+0x24>
 800fa6e:	f04f 33ff 	mov.w	r3, #4294967295
 800fa72:	e7f7      	b.n	800fa64 <__mcmp+0x24>

0800fa74 <__mdiff>:
 800fa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa78:	460d      	mov	r5, r1
 800fa7a:	4607      	mov	r7, r0
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	4628      	mov	r0, r5
 800fa80:	4614      	mov	r4, r2
 800fa82:	f7ff ffdd 	bl	800fa40 <__mcmp>
 800fa86:	1e06      	subs	r6, r0, #0
 800fa88:	d108      	bne.n	800fa9c <__mdiff+0x28>
 800fa8a:	4631      	mov	r1, r6
 800fa8c:	4638      	mov	r0, r7
 800fa8e:	f7ff fd83 	bl	800f598 <_Balloc>
 800fa92:	2301      	movs	r3, #1
 800fa94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fa98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa9c:	bfa4      	itt	ge
 800fa9e:	4623      	movge	r3, r4
 800faa0:	462c      	movge	r4, r5
 800faa2:	4638      	mov	r0, r7
 800faa4:	6861      	ldr	r1, [r4, #4]
 800faa6:	bfa6      	itte	ge
 800faa8:	461d      	movge	r5, r3
 800faaa:	2600      	movge	r6, #0
 800faac:	2601      	movlt	r6, #1
 800faae:	f7ff fd73 	bl	800f598 <_Balloc>
 800fab2:	692b      	ldr	r3, [r5, #16]
 800fab4:	60c6      	str	r6, [r0, #12]
 800fab6:	6926      	ldr	r6, [r4, #16]
 800fab8:	f105 0914 	add.w	r9, r5, #20
 800fabc:	f104 0214 	add.w	r2, r4, #20
 800fac0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fac4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fac8:	f100 0514 	add.w	r5, r0, #20
 800facc:	f04f 0e00 	mov.w	lr, #0
 800fad0:	f852 ab04 	ldr.w	sl, [r2], #4
 800fad4:	f859 4b04 	ldr.w	r4, [r9], #4
 800fad8:	fa1e f18a 	uxtah	r1, lr, sl
 800fadc:	b2a3      	uxth	r3, r4
 800fade:	1ac9      	subs	r1, r1, r3
 800fae0:	0c23      	lsrs	r3, r4, #16
 800fae2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fae6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800faea:	b289      	uxth	r1, r1
 800faec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800faf0:	45c8      	cmp	r8, r9
 800faf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800faf6:	4694      	mov	ip, r2
 800faf8:	f845 3b04 	str.w	r3, [r5], #4
 800fafc:	d8e8      	bhi.n	800fad0 <__mdiff+0x5c>
 800fafe:	45bc      	cmp	ip, r7
 800fb00:	d304      	bcc.n	800fb0c <__mdiff+0x98>
 800fb02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fb06:	b183      	cbz	r3, 800fb2a <__mdiff+0xb6>
 800fb08:	6106      	str	r6, [r0, #16]
 800fb0a:	e7c5      	b.n	800fa98 <__mdiff+0x24>
 800fb0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fb10:	fa1e f381 	uxtah	r3, lr, r1
 800fb14:	141a      	asrs	r2, r3, #16
 800fb16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fb24:	f845 3b04 	str.w	r3, [r5], #4
 800fb28:	e7e9      	b.n	800fafe <__mdiff+0x8a>
 800fb2a:	3e01      	subs	r6, #1
 800fb2c:	e7e9      	b.n	800fb02 <__mdiff+0x8e>
	...

0800fb30 <__ulp>:
 800fb30:	4b12      	ldr	r3, [pc, #72]	; (800fb7c <__ulp+0x4c>)
 800fb32:	ee10 2a90 	vmov	r2, s1
 800fb36:	401a      	ands	r2, r3
 800fb38:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	dd04      	ble.n	800fb4a <__ulp+0x1a>
 800fb40:	2000      	movs	r0, #0
 800fb42:	4619      	mov	r1, r3
 800fb44:	ec41 0b10 	vmov	d0, r0, r1
 800fb48:	4770      	bx	lr
 800fb4a:	425b      	negs	r3, r3
 800fb4c:	151b      	asrs	r3, r3, #20
 800fb4e:	2b13      	cmp	r3, #19
 800fb50:	f04f 0000 	mov.w	r0, #0
 800fb54:	f04f 0100 	mov.w	r1, #0
 800fb58:	dc04      	bgt.n	800fb64 <__ulp+0x34>
 800fb5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fb5e:	fa42 f103 	asr.w	r1, r2, r3
 800fb62:	e7ef      	b.n	800fb44 <__ulp+0x14>
 800fb64:	3b14      	subs	r3, #20
 800fb66:	2b1e      	cmp	r3, #30
 800fb68:	f04f 0201 	mov.w	r2, #1
 800fb6c:	bfda      	itte	le
 800fb6e:	f1c3 031f 	rsble	r3, r3, #31
 800fb72:	fa02 f303 	lslle.w	r3, r2, r3
 800fb76:	4613      	movgt	r3, r2
 800fb78:	4618      	mov	r0, r3
 800fb7a:	e7e3      	b.n	800fb44 <__ulp+0x14>
 800fb7c:	7ff00000 	.word	0x7ff00000

0800fb80 <__b2d>:
 800fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb82:	6905      	ldr	r5, [r0, #16]
 800fb84:	f100 0714 	add.w	r7, r0, #20
 800fb88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fb8c:	1f2e      	subs	r6, r5, #4
 800fb8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fb92:	4620      	mov	r0, r4
 800fb94:	f7ff fdc4 	bl	800f720 <__hi0bits>
 800fb98:	f1c0 0320 	rsb	r3, r0, #32
 800fb9c:	280a      	cmp	r0, #10
 800fb9e:	600b      	str	r3, [r1, #0]
 800fba0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800fc18 <__b2d+0x98>
 800fba4:	dc14      	bgt.n	800fbd0 <__b2d+0x50>
 800fba6:	f1c0 0e0b 	rsb	lr, r0, #11
 800fbaa:	fa24 f10e 	lsr.w	r1, r4, lr
 800fbae:	42b7      	cmp	r7, r6
 800fbb0:	ea41 030c 	orr.w	r3, r1, ip
 800fbb4:	bf34      	ite	cc
 800fbb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fbba:	2100      	movcs	r1, #0
 800fbbc:	3015      	adds	r0, #21
 800fbbe:	fa04 f000 	lsl.w	r0, r4, r0
 800fbc2:	fa21 f10e 	lsr.w	r1, r1, lr
 800fbc6:	ea40 0201 	orr.w	r2, r0, r1
 800fbca:	ec43 2b10 	vmov	d0, r2, r3
 800fbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbd0:	42b7      	cmp	r7, r6
 800fbd2:	bf3a      	itte	cc
 800fbd4:	f1a5 0608 	subcc.w	r6, r5, #8
 800fbd8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fbdc:	2100      	movcs	r1, #0
 800fbde:	380b      	subs	r0, #11
 800fbe0:	d015      	beq.n	800fc0e <__b2d+0x8e>
 800fbe2:	4084      	lsls	r4, r0
 800fbe4:	f1c0 0520 	rsb	r5, r0, #32
 800fbe8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800fbec:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800fbf0:	42be      	cmp	r6, r7
 800fbf2:	fa21 fc05 	lsr.w	ip, r1, r5
 800fbf6:	ea44 030c 	orr.w	r3, r4, ip
 800fbfa:	bf8c      	ite	hi
 800fbfc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fc00:	2400      	movls	r4, #0
 800fc02:	fa01 f000 	lsl.w	r0, r1, r0
 800fc06:	40ec      	lsrs	r4, r5
 800fc08:	ea40 0204 	orr.w	r2, r0, r4
 800fc0c:	e7dd      	b.n	800fbca <__b2d+0x4a>
 800fc0e:	ea44 030c 	orr.w	r3, r4, ip
 800fc12:	460a      	mov	r2, r1
 800fc14:	e7d9      	b.n	800fbca <__b2d+0x4a>
 800fc16:	bf00      	nop
 800fc18:	3ff00000 	.word	0x3ff00000

0800fc1c <__d2b>:
 800fc1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc20:	460e      	mov	r6, r1
 800fc22:	2101      	movs	r1, #1
 800fc24:	ec59 8b10 	vmov	r8, r9, d0
 800fc28:	4615      	mov	r5, r2
 800fc2a:	f7ff fcb5 	bl	800f598 <_Balloc>
 800fc2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fc32:	4607      	mov	r7, r0
 800fc34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc38:	bb34      	cbnz	r4, 800fc88 <__d2b+0x6c>
 800fc3a:	9301      	str	r3, [sp, #4]
 800fc3c:	f1b8 0300 	subs.w	r3, r8, #0
 800fc40:	d027      	beq.n	800fc92 <__d2b+0x76>
 800fc42:	a802      	add	r0, sp, #8
 800fc44:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fc48:	f7ff fd89 	bl	800f75e <__lo0bits>
 800fc4c:	9900      	ldr	r1, [sp, #0]
 800fc4e:	b1f0      	cbz	r0, 800fc8e <__d2b+0x72>
 800fc50:	9a01      	ldr	r2, [sp, #4]
 800fc52:	f1c0 0320 	rsb	r3, r0, #32
 800fc56:	fa02 f303 	lsl.w	r3, r2, r3
 800fc5a:	430b      	orrs	r3, r1
 800fc5c:	40c2      	lsrs	r2, r0
 800fc5e:	617b      	str	r3, [r7, #20]
 800fc60:	9201      	str	r2, [sp, #4]
 800fc62:	9b01      	ldr	r3, [sp, #4]
 800fc64:	61bb      	str	r3, [r7, #24]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	bf14      	ite	ne
 800fc6a:	2102      	movne	r1, #2
 800fc6c:	2101      	moveq	r1, #1
 800fc6e:	6139      	str	r1, [r7, #16]
 800fc70:	b1c4      	cbz	r4, 800fca4 <__d2b+0x88>
 800fc72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fc76:	4404      	add	r4, r0
 800fc78:	6034      	str	r4, [r6, #0]
 800fc7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc7e:	6028      	str	r0, [r5, #0]
 800fc80:	4638      	mov	r0, r7
 800fc82:	b003      	add	sp, #12
 800fc84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc8c:	e7d5      	b.n	800fc3a <__d2b+0x1e>
 800fc8e:	6179      	str	r1, [r7, #20]
 800fc90:	e7e7      	b.n	800fc62 <__d2b+0x46>
 800fc92:	a801      	add	r0, sp, #4
 800fc94:	f7ff fd63 	bl	800f75e <__lo0bits>
 800fc98:	9b01      	ldr	r3, [sp, #4]
 800fc9a:	617b      	str	r3, [r7, #20]
 800fc9c:	2101      	movs	r1, #1
 800fc9e:	6139      	str	r1, [r7, #16]
 800fca0:	3020      	adds	r0, #32
 800fca2:	e7e5      	b.n	800fc70 <__d2b+0x54>
 800fca4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fca8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fcac:	6030      	str	r0, [r6, #0]
 800fcae:	6918      	ldr	r0, [r3, #16]
 800fcb0:	f7ff fd36 	bl	800f720 <__hi0bits>
 800fcb4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fcb8:	e7e1      	b.n	800fc7e <__d2b+0x62>

0800fcba <__ratio>:
 800fcba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcbe:	4688      	mov	r8, r1
 800fcc0:	4669      	mov	r1, sp
 800fcc2:	4681      	mov	r9, r0
 800fcc4:	f7ff ff5c 	bl	800fb80 <__b2d>
 800fcc8:	a901      	add	r1, sp, #4
 800fcca:	4640      	mov	r0, r8
 800fccc:	ec57 6b10 	vmov	r6, r7, d0
 800fcd0:	f7ff ff56 	bl	800fb80 <__b2d>
 800fcd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fcd8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fcdc:	eba3 0c02 	sub.w	ip, r3, r2
 800fce0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fce4:	1a9b      	subs	r3, r3, r2
 800fce6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fcea:	ec5b ab10 	vmov	sl, fp, d0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	bfce      	itee	gt
 800fcf2:	463a      	movgt	r2, r7
 800fcf4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fcf8:	465a      	movle	r2, fp
 800fcfa:	4659      	mov	r1, fp
 800fcfc:	463d      	mov	r5, r7
 800fcfe:	bfd4      	ite	le
 800fd00:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800fd04:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800fd08:	4630      	mov	r0, r6
 800fd0a:	ee10 2a10 	vmov	r2, s0
 800fd0e:	460b      	mov	r3, r1
 800fd10:	4629      	mov	r1, r5
 800fd12:	f7f0 fdd3 	bl	80008bc <__aeabi_ddiv>
 800fd16:	ec41 0b10 	vmov	d0, r0, r1
 800fd1a:	b003      	add	sp, #12
 800fd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd20 <__copybits>:
 800fd20:	3901      	subs	r1, #1
 800fd22:	b510      	push	{r4, lr}
 800fd24:	1149      	asrs	r1, r1, #5
 800fd26:	6914      	ldr	r4, [r2, #16]
 800fd28:	3101      	adds	r1, #1
 800fd2a:	f102 0314 	add.w	r3, r2, #20
 800fd2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd36:	42a3      	cmp	r3, r4
 800fd38:	4602      	mov	r2, r0
 800fd3a:	d303      	bcc.n	800fd44 <__copybits+0x24>
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	428a      	cmp	r2, r1
 800fd40:	d305      	bcc.n	800fd4e <__copybits+0x2e>
 800fd42:	bd10      	pop	{r4, pc}
 800fd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd48:	f840 2b04 	str.w	r2, [r0], #4
 800fd4c:	e7f3      	b.n	800fd36 <__copybits+0x16>
 800fd4e:	f842 3b04 	str.w	r3, [r2], #4
 800fd52:	e7f4      	b.n	800fd3e <__copybits+0x1e>

0800fd54 <__any_on>:
 800fd54:	f100 0214 	add.w	r2, r0, #20
 800fd58:	6900      	ldr	r0, [r0, #16]
 800fd5a:	114b      	asrs	r3, r1, #5
 800fd5c:	4298      	cmp	r0, r3
 800fd5e:	b510      	push	{r4, lr}
 800fd60:	db11      	blt.n	800fd86 <__any_on+0x32>
 800fd62:	dd0a      	ble.n	800fd7a <__any_on+0x26>
 800fd64:	f011 011f 	ands.w	r1, r1, #31
 800fd68:	d007      	beq.n	800fd7a <__any_on+0x26>
 800fd6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd6e:	fa24 f001 	lsr.w	r0, r4, r1
 800fd72:	fa00 f101 	lsl.w	r1, r0, r1
 800fd76:	428c      	cmp	r4, r1
 800fd78:	d10b      	bne.n	800fd92 <__any_on+0x3e>
 800fd7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d803      	bhi.n	800fd8a <__any_on+0x36>
 800fd82:	2000      	movs	r0, #0
 800fd84:	bd10      	pop	{r4, pc}
 800fd86:	4603      	mov	r3, r0
 800fd88:	e7f7      	b.n	800fd7a <__any_on+0x26>
 800fd8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd8e:	2900      	cmp	r1, #0
 800fd90:	d0f5      	beq.n	800fd7e <__any_on+0x2a>
 800fd92:	2001      	movs	r0, #1
 800fd94:	e7f6      	b.n	800fd84 <__any_on+0x30>

0800fd96 <_calloc_r>:
 800fd96:	b538      	push	{r3, r4, r5, lr}
 800fd98:	fb02 f401 	mul.w	r4, r2, r1
 800fd9c:	4621      	mov	r1, r4
 800fd9e:	f7fc fc83 	bl	800c6a8 <_malloc_r>
 800fda2:	4605      	mov	r5, r0
 800fda4:	b118      	cbz	r0, 800fdae <_calloc_r+0x18>
 800fda6:	4622      	mov	r2, r4
 800fda8:	2100      	movs	r1, #0
 800fdaa:	f7fc fc26 	bl	800c5fa <memset>
 800fdae:	4628      	mov	r0, r5
 800fdb0:	bd38      	pop	{r3, r4, r5, pc}

0800fdb2 <_realloc_r>:
 800fdb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb4:	4607      	mov	r7, r0
 800fdb6:	4614      	mov	r4, r2
 800fdb8:	460e      	mov	r6, r1
 800fdba:	b921      	cbnz	r1, 800fdc6 <_realloc_r+0x14>
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fdc2:	f7fc bc71 	b.w	800c6a8 <_malloc_r>
 800fdc6:	b922      	cbnz	r2, 800fdd2 <_realloc_r+0x20>
 800fdc8:	f7fc fc20 	bl	800c60c <_free_r>
 800fdcc:	4625      	mov	r5, r4
 800fdce:	4628      	mov	r0, r5
 800fdd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdd2:	f000 fd7a 	bl	80108ca <_malloc_usable_size_r>
 800fdd6:	42a0      	cmp	r0, r4
 800fdd8:	d20f      	bcs.n	800fdfa <_realloc_r+0x48>
 800fdda:	4621      	mov	r1, r4
 800fddc:	4638      	mov	r0, r7
 800fdde:	f7fc fc63 	bl	800c6a8 <_malloc_r>
 800fde2:	4605      	mov	r5, r0
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d0f2      	beq.n	800fdce <_realloc_r+0x1c>
 800fde8:	4631      	mov	r1, r6
 800fdea:	4622      	mov	r2, r4
 800fdec:	f7fc fbfa 	bl	800c5e4 <memcpy>
 800fdf0:	4631      	mov	r1, r6
 800fdf2:	4638      	mov	r0, r7
 800fdf4:	f7fc fc0a 	bl	800c60c <_free_r>
 800fdf8:	e7e9      	b.n	800fdce <_realloc_r+0x1c>
 800fdfa:	4635      	mov	r5, r6
 800fdfc:	e7e7      	b.n	800fdce <_realloc_r+0x1c>

0800fdfe <__ssputs_r>:
 800fdfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe02:	688e      	ldr	r6, [r1, #8]
 800fe04:	429e      	cmp	r6, r3
 800fe06:	4682      	mov	sl, r0
 800fe08:	460c      	mov	r4, r1
 800fe0a:	4690      	mov	r8, r2
 800fe0c:	4699      	mov	r9, r3
 800fe0e:	d837      	bhi.n	800fe80 <__ssputs_r+0x82>
 800fe10:	898a      	ldrh	r2, [r1, #12]
 800fe12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe16:	d031      	beq.n	800fe7c <__ssputs_r+0x7e>
 800fe18:	6825      	ldr	r5, [r4, #0]
 800fe1a:	6909      	ldr	r1, [r1, #16]
 800fe1c:	1a6f      	subs	r7, r5, r1
 800fe1e:	6965      	ldr	r5, [r4, #20]
 800fe20:	2302      	movs	r3, #2
 800fe22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe26:	fb95 f5f3 	sdiv	r5, r5, r3
 800fe2a:	f109 0301 	add.w	r3, r9, #1
 800fe2e:	443b      	add	r3, r7
 800fe30:	429d      	cmp	r5, r3
 800fe32:	bf38      	it	cc
 800fe34:	461d      	movcc	r5, r3
 800fe36:	0553      	lsls	r3, r2, #21
 800fe38:	d530      	bpl.n	800fe9c <__ssputs_r+0x9e>
 800fe3a:	4629      	mov	r1, r5
 800fe3c:	f7fc fc34 	bl	800c6a8 <_malloc_r>
 800fe40:	4606      	mov	r6, r0
 800fe42:	b950      	cbnz	r0, 800fe5a <__ssputs_r+0x5c>
 800fe44:	230c      	movs	r3, #12
 800fe46:	f8ca 3000 	str.w	r3, [sl]
 800fe4a:	89a3      	ldrh	r3, [r4, #12]
 800fe4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe50:	81a3      	strh	r3, [r4, #12]
 800fe52:	f04f 30ff 	mov.w	r0, #4294967295
 800fe56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe5a:	463a      	mov	r2, r7
 800fe5c:	6921      	ldr	r1, [r4, #16]
 800fe5e:	f7fc fbc1 	bl	800c5e4 <memcpy>
 800fe62:	89a3      	ldrh	r3, [r4, #12]
 800fe64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe6c:	81a3      	strh	r3, [r4, #12]
 800fe6e:	6126      	str	r6, [r4, #16]
 800fe70:	6165      	str	r5, [r4, #20]
 800fe72:	443e      	add	r6, r7
 800fe74:	1bed      	subs	r5, r5, r7
 800fe76:	6026      	str	r6, [r4, #0]
 800fe78:	60a5      	str	r5, [r4, #8]
 800fe7a:	464e      	mov	r6, r9
 800fe7c:	454e      	cmp	r6, r9
 800fe7e:	d900      	bls.n	800fe82 <__ssputs_r+0x84>
 800fe80:	464e      	mov	r6, r9
 800fe82:	4632      	mov	r2, r6
 800fe84:	4641      	mov	r1, r8
 800fe86:	6820      	ldr	r0, [r4, #0]
 800fe88:	f000 fd06 	bl	8010898 <memmove>
 800fe8c:	68a3      	ldr	r3, [r4, #8]
 800fe8e:	1b9b      	subs	r3, r3, r6
 800fe90:	60a3      	str	r3, [r4, #8]
 800fe92:	6823      	ldr	r3, [r4, #0]
 800fe94:	441e      	add	r6, r3
 800fe96:	6026      	str	r6, [r4, #0]
 800fe98:	2000      	movs	r0, #0
 800fe9a:	e7dc      	b.n	800fe56 <__ssputs_r+0x58>
 800fe9c:	462a      	mov	r2, r5
 800fe9e:	f7ff ff88 	bl	800fdb2 <_realloc_r>
 800fea2:	4606      	mov	r6, r0
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d1e2      	bne.n	800fe6e <__ssputs_r+0x70>
 800fea8:	6921      	ldr	r1, [r4, #16]
 800feaa:	4650      	mov	r0, sl
 800feac:	f7fc fbae 	bl	800c60c <_free_r>
 800feb0:	e7c8      	b.n	800fe44 <__ssputs_r+0x46>
	...

0800feb4 <_svfiprintf_r>:
 800feb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb8:	461d      	mov	r5, r3
 800feba:	898b      	ldrh	r3, [r1, #12]
 800febc:	061f      	lsls	r7, r3, #24
 800febe:	b09d      	sub	sp, #116	; 0x74
 800fec0:	4680      	mov	r8, r0
 800fec2:	460c      	mov	r4, r1
 800fec4:	4616      	mov	r6, r2
 800fec6:	d50f      	bpl.n	800fee8 <_svfiprintf_r+0x34>
 800fec8:	690b      	ldr	r3, [r1, #16]
 800feca:	b96b      	cbnz	r3, 800fee8 <_svfiprintf_r+0x34>
 800fecc:	2140      	movs	r1, #64	; 0x40
 800fece:	f7fc fbeb 	bl	800c6a8 <_malloc_r>
 800fed2:	6020      	str	r0, [r4, #0]
 800fed4:	6120      	str	r0, [r4, #16]
 800fed6:	b928      	cbnz	r0, 800fee4 <_svfiprintf_r+0x30>
 800fed8:	230c      	movs	r3, #12
 800feda:	f8c8 3000 	str.w	r3, [r8]
 800fede:	f04f 30ff 	mov.w	r0, #4294967295
 800fee2:	e0c8      	b.n	8010076 <_svfiprintf_r+0x1c2>
 800fee4:	2340      	movs	r3, #64	; 0x40
 800fee6:	6163      	str	r3, [r4, #20]
 800fee8:	2300      	movs	r3, #0
 800feea:	9309      	str	r3, [sp, #36]	; 0x24
 800feec:	2320      	movs	r3, #32
 800feee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fef2:	2330      	movs	r3, #48	; 0x30
 800fef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fef8:	9503      	str	r5, [sp, #12]
 800fefa:	f04f 0b01 	mov.w	fp, #1
 800fefe:	4637      	mov	r7, r6
 800ff00:	463d      	mov	r5, r7
 800ff02:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ff06:	b10b      	cbz	r3, 800ff0c <_svfiprintf_r+0x58>
 800ff08:	2b25      	cmp	r3, #37	; 0x25
 800ff0a:	d13e      	bne.n	800ff8a <_svfiprintf_r+0xd6>
 800ff0c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ff10:	d00b      	beq.n	800ff2a <_svfiprintf_r+0x76>
 800ff12:	4653      	mov	r3, sl
 800ff14:	4632      	mov	r2, r6
 800ff16:	4621      	mov	r1, r4
 800ff18:	4640      	mov	r0, r8
 800ff1a:	f7ff ff70 	bl	800fdfe <__ssputs_r>
 800ff1e:	3001      	adds	r0, #1
 800ff20:	f000 80a4 	beq.w	801006c <_svfiprintf_r+0x1b8>
 800ff24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff26:	4453      	add	r3, sl
 800ff28:	9309      	str	r3, [sp, #36]	; 0x24
 800ff2a:	783b      	ldrb	r3, [r7, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f000 809d 	beq.w	801006c <_svfiprintf_r+0x1b8>
 800ff32:	2300      	movs	r3, #0
 800ff34:	f04f 32ff 	mov.w	r2, #4294967295
 800ff38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff3c:	9304      	str	r3, [sp, #16]
 800ff3e:	9307      	str	r3, [sp, #28]
 800ff40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff44:	931a      	str	r3, [sp, #104]	; 0x68
 800ff46:	462f      	mov	r7, r5
 800ff48:	2205      	movs	r2, #5
 800ff4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ff4e:	4850      	ldr	r0, [pc, #320]	; (8010090 <_svfiprintf_r+0x1dc>)
 800ff50:	f7f0 f97e 	bl	8000250 <memchr>
 800ff54:	9b04      	ldr	r3, [sp, #16]
 800ff56:	b9d0      	cbnz	r0, 800ff8e <_svfiprintf_r+0xda>
 800ff58:	06d9      	lsls	r1, r3, #27
 800ff5a:	bf44      	itt	mi
 800ff5c:	2220      	movmi	r2, #32
 800ff5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff62:	071a      	lsls	r2, r3, #28
 800ff64:	bf44      	itt	mi
 800ff66:	222b      	movmi	r2, #43	; 0x2b
 800ff68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff6c:	782a      	ldrb	r2, [r5, #0]
 800ff6e:	2a2a      	cmp	r2, #42	; 0x2a
 800ff70:	d015      	beq.n	800ff9e <_svfiprintf_r+0xea>
 800ff72:	9a07      	ldr	r2, [sp, #28]
 800ff74:	462f      	mov	r7, r5
 800ff76:	2000      	movs	r0, #0
 800ff78:	250a      	movs	r5, #10
 800ff7a:	4639      	mov	r1, r7
 800ff7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff80:	3b30      	subs	r3, #48	; 0x30
 800ff82:	2b09      	cmp	r3, #9
 800ff84:	d94d      	bls.n	8010022 <_svfiprintf_r+0x16e>
 800ff86:	b1b8      	cbz	r0, 800ffb8 <_svfiprintf_r+0x104>
 800ff88:	e00f      	b.n	800ffaa <_svfiprintf_r+0xf6>
 800ff8a:	462f      	mov	r7, r5
 800ff8c:	e7b8      	b.n	800ff00 <_svfiprintf_r+0x4c>
 800ff8e:	4a40      	ldr	r2, [pc, #256]	; (8010090 <_svfiprintf_r+0x1dc>)
 800ff90:	1a80      	subs	r0, r0, r2
 800ff92:	fa0b f000 	lsl.w	r0, fp, r0
 800ff96:	4318      	orrs	r0, r3
 800ff98:	9004      	str	r0, [sp, #16]
 800ff9a:	463d      	mov	r5, r7
 800ff9c:	e7d3      	b.n	800ff46 <_svfiprintf_r+0x92>
 800ff9e:	9a03      	ldr	r2, [sp, #12]
 800ffa0:	1d11      	adds	r1, r2, #4
 800ffa2:	6812      	ldr	r2, [r2, #0]
 800ffa4:	9103      	str	r1, [sp, #12]
 800ffa6:	2a00      	cmp	r2, #0
 800ffa8:	db01      	blt.n	800ffae <_svfiprintf_r+0xfa>
 800ffaa:	9207      	str	r2, [sp, #28]
 800ffac:	e004      	b.n	800ffb8 <_svfiprintf_r+0x104>
 800ffae:	4252      	negs	r2, r2
 800ffb0:	f043 0302 	orr.w	r3, r3, #2
 800ffb4:	9207      	str	r2, [sp, #28]
 800ffb6:	9304      	str	r3, [sp, #16]
 800ffb8:	783b      	ldrb	r3, [r7, #0]
 800ffba:	2b2e      	cmp	r3, #46	; 0x2e
 800ffbc:	d10c      	bne.n	800ffd8 <_svfiprintf_r+0x124>
 800ffbe:	787b      	ldrb	r3, [r7, #1]
 800ffc0:	2b2a      	cmp	r3, #42	; 0x2a
 800ffc2:	d133      	bne.n	801002c <_svfiprintf_r+0x178>
 800ffc4:	9b03      	ldr	r3, [sp, #12]
 800ffc6:	1d1a      	adds	r2, r3, #4
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	9203      	str	r2, [sp, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	bfb8      	it	lt
 800ffd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffd4:	3702      	adds	r7, #2
 800ffd6:	9305      	str	r3, [sp, #20]
 800ffd8:	4d2e      	ldr	r5, [pc, #184]	; (8010094 <_svfiprintf_r+0x1e0>)
 800ffda:	7839      	ldrb	r1, [r7, #0]
 800ffdc:	2203      	movs	r2, #3
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f7f0 f936 	bl	8000250 <memchr>
 800ffe4:	b138      	cbz	r0, 800fff6 <_svfiprintf_r+0x142>
 800ffe6:	2340      	movs	r3, #64	; 0x40
 800ffe8:	1b40      	subs	r0, r0, r5
 800ffea:	fa03 f000 	lsl.w	r0, r3, r0
 800ffee:	9b04      	ldr	r3, [sp, #16]
 800fff0:	4303      	orrs	r3, r0
 800fff2:	3701      	adds	r7, #1
 800fff4:	9304      	str	r3, [sp, #16]
 800fff6:	7839      	ldrb	r1, [r7, #0]
 800fff8:	4827      	ldr	r0, [pc, #156]	; (8010098 <_svfiprintf_r+0x1e4>)
 800fffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fffe:	2206      	movs	r2, #6
 8010000:	1c7e      	adds	r6, r7, #1
 8010002:	f7f0 f925 	bl	8000250 <memchr>
 8010006:	2800      	cmp	r0, #0
 8010008:	d038      	beq.n	801007c <_svfiprintf_r+0x1c8>
 801000a:	4b24      	ldr	r3, [pc, #144]	; (801009c <_svfiprintf_r+0x1e8>)
 801000c:	bb13      	cbnz	r3, 8010054 <_svfiprintf_r+0x1a0>
 801000e:	9b03      	ldr	r3, [sp, #12]
 8010010:	3307      	adds	r3, #7
 8010012:	f023 0307 	bic.w	r3, r3, #7
 8010016:	3308      	adds	r3, #8
 8010018:	9303      	str	r3, [sp, #12]
 801001a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801001c:	444b      	add	r3, r9
 801001e:	9309      	str	r3, [sp, #36]	; 0x24
 8010020:	e76d      	b.n	800fefe <_svfiprintf_r+0x4a>
 8010022:	fb05 3202 	mla	r2, r5, r2, r3
 8010026:	2001      	movs	r0, #1
 8010028:	460f      	mov	r7, r1
 801002a:	e7a6      	b.n	800ff7a <_svfiprintf_r+0xc6>
 801002c:	2300      	movs	r3, #0
 801002e:	3701      	adds	r7, #1
 8010030:	9305      	str	r3, [sp, #20]
 8010032:	4619      	mov	r1, r3
 8010034:	250a      	movs	r5, #10
 8010036:	4638      	mov	r0, r7
 8010038:	f810 2b01 	ldrb.w	r2, [r0], #1
 801003c:	3a30      	subs	r2, #48	; 0x30
 801003e:	2a09      	cmp	r2, #9
 8010040:	d903      	bls.n	801004a <_svfiprintf_r+0x196>
 8010042:	2b00      	cmp	r3, #0
 8010044:	d0c8      	beq.n	800ffd8 <_svfiprintf_r+0x124>
 8010046:	9105      	str	r1, [sp, #20]
 8010048:	e7c6      	b.n	800ffd8 <_svfiprintf_r+0x124>
 801004a:	fb05 2101 	mla	r1, r5, r1, r2
 801004e:	2301      	movs	r3, #1
 8010050:	4607      	mov	r7, r0
 8010052:	e7f0      	b.n	8010036 <_svfiprintf_r+0x182>
 8010054:	ab03      	add	r3, sp, #12
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	4622      	mov	r2, r4
 801005a:	4b11      	ldr	r3, [pc, #68]	; (80100a0 <_svfiprintf_r+0x1ec>)
 801005c:	a904      	add	r1, sp, #16
 801005e:	4640      	mov	r0, r8
 8010060:	f7fc fc10 	bl	800c884 <_printf_float>
 8010064:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010068:	4681      	mov	r9, r0
 801006a:	d1d6      	bne.n	801001a <_svfiprintf_r+0x166>
 801006c:	89a3      	ldrh	r3, [r4, #12]
 801006e:	065b      	lsls	r3, r3, #25
 8010070:	f53f af35 	bmi.w	800fede <_svfiprintf_r+0x2a>
 8010074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010076:	b01d      	add	sp, #116	; 0x74
 8010078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801007c:	ab03      	add	r3, sp, #12
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	4622      	mov	r2, r4
 8010082:	4b07      	ldr	r3, [pc, #28]	; (80100a0 <_svfiprintf_r+0x1ec>)
 8010084:	a904      	add	r1, sp, #16
 8010086:	4640      	mov	r0, r8
 8010088:	f7fc feb2 	bl	800cdf0 <_printf_i>
 801008c:	e7ea      	b.n	8010064 <_svfiprintf_r+0x1b0>
 801008e:	bf00      	nop
 8010090:	08011854 	.word	0x08011854
 8010094:	0801185a 	.word	0x0801185a
 8010098:	0801185e 	.word	0x0801185e
 801009c:	0800c885 	.word	0x0800c885
 80100a0:	0800fdff 	.word	0x0800fdff

080100a4 <_sungetc_r>:
 80100a4:	b538      	push	{r3, r4, r5, lr}
 80100a6:	1c4b      	adds	r3, r1, #1
 80100a8:	4614      	mov	r4, r2
 80100aa:	d103      	bne.n	80100b4 <_sungetc_r+0x10>
 80100ac:	f04f 35ff 	mov.w	r5, #4294967295
 80100b0:	4628      	mov	r0, r5
 80100b2:	bd38      	pop	{r3, r4, r5, pc}
 80100b4:	8993      	ldrh	r3, [r2, #12]
 80100b6:	f023 0320 	bic.w	r3, r3, #32
 80100ba:	8193      	strh	r3, [r2, #12]
 80100bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80100be:	6852      	ldr	r2, [r2, #4]
 80100c0:	b2cd      	uxtb	r5, r1
 80100c2:	b18b      	cbz	r3, 80100e8 <_sungetc_r+0x44>
 80100c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80100c6:	4293      	cmp	r3, r2
 80100c8:	dd08      	ble.n	80100dc <_sungetc_r+0x38>
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	1e5a      	subs	r2, r3, #1
 80100ce:	6022      	str	r2, [r4, #0]
 80100d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80100d4:	6863      	ldr	r3, [r4, #4]
 80100d6:	3301      	adds	r3, #1
 80100d8:	6063      	str	r3, [r4, #4]
 80100da:	e7e9      	b.n	80100b0 <_sungetc_r+0xc>
 80100dc:	4621      	mov	r1, r4
 80100de:	f000 fba1 	bl	8010824 <__submore>
 80100e2:	2800      	cmp	r0, #0
 80100e4:	d0f1      	beq.n	80100ca <_sungetc_r+0x26>
 80100e6:	e7e1      	b.n	80100ac <_sungetc_r+0x8>
 80100e8:	6921      	ldr	r1, [r4, #16]
 80100ea:	6823      	ldr	r3, [r4, #0]
 80100ec:	b151      	cbz	r1, 8010104 <_sungetc_r+0x60>
 80100ee:	4299      	cmp	r1, r3
 80100f0:	d208      	bcs.n	8010104 <_sungetc_r+0x60>
 80100f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80100f6:	42a9      	cmp	r1, r5
 80100f8:	d104      	bne.n	8010104 <_sungetc_r+0x60>
 80100fa:	3b01      	subs	r3, #1
 80100fc:	3201      	adds	r2, #1
 80100fe:	6023      	str	r3, [r4, #0]
 8010100:	6062      	str	r2, [r4, #4]
 8010102:	e7d5      	b.n	80100b0 <_sungetc_r+0xc>
 8010104:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801010c:	6363      	str	r3, [r4, #52]	; 0x34
 801010e:	2303      	movs	r3, #3
 8010110:	63a3      	str	r3, [r4, #56]	; 0x38
 8010112:	4623      	mov	r3, r4
 8010114:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010118:	6023      	str	r3, [r4, #0]
 801011a:	2301      	movs	r3, #1
 801011c:	e7dc      	b.n	80100d8 <_sungetc_r+0x34>

0801011e <__ssrefill_r>:
 801011e:	b510      	push	{r4, lr}
 8010120:	460c      	mov	r4, r1
 8010122:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010124:	b169      	cbz	r1, 8010142 <__ssrefill_r+0x24>
 8010126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801012a:	4299      	cmp	r1, r3
 801012c:	d001      	beq.n	8010132 <__ssrefill_r+0x14>
 801012e:	f7fc fa6d 	bl	800c60c <_free_r>
 8010132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010134:	6063      	str	r3, [r4, #4]
 8010136:	2000      	movs	r0, #0
 8010138:	6360      	str	r0, [r4, #52]	; 0x34
 801013a:	b113      	cbz	r3, 8010142 <__ssrefill_r+0x24>
 801013c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801013e:	6023      	str	r3, [r4, #0]
 8010140:	bd10      	pop	{r4, pc}
 8010142:	6923      	ldr	r3, [r4, #16]
 8010144:	6023      	str	r3, [r4, #0]
 8010146:	2300      	movs	r3, #0
 8010148:	6063      	str	r3, [r4, #4]
 801014a:	89a3      	ldrh	r3, [r4, #12]
 801014c:	f043 0320 	orr.w	r3, r3, #32
 8010150:	81a3      	strh	r3, [r4, #12]
 8010152:	f04f 30ff 	mov.w	r0, #4294967295
 8010156:	e7f3      	b.n	8010140 <__ssrefill_r+0x22>

08010158 <__ssvfiscanf_r>:
 8010158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801015c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8010160:	460c      	mov	r4, r1
 8010162:	2100      	movs	r1, #0
 8010164:	9144      	str	r1, [sp, #272]	; 0x110
 8010166:	9145      	str	r1, [sp, #276]	; 0x114
 8010168:	499f      	ldr	r1, [pc, #636]	; (80103e8 <__ssvfiscanf_r+0x290>)
 801016a:	91a0      	str	r1, [sp, #640]	; 0x280
 801016c:	f10d 0804 	add.w	r8, sp, #4
 8010170:	499e      	ldr	r1, [pc, #632]	; (80103ec <__ssvfiscanf_r+0x294>)
 8010172:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80103f0 <__ssvfiscanf_r+0x298>
 8010176:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801017a:	4606      	mov	r6, r0
 801017c:	4692      	mov	sl, r2
 801017e:	91a1      	str	r1, [sp, #644]	; 0x284
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	270a      	movs	r7, #10
 8010184:	f89a 3000 	ldrb.w	r3, [sl]
 8010188:	2b00      	cmp	r3, #0
 801018a:	f000 812a 	beq.w	80103e2 <__ssvfiscanf_r+0x28a>
 801018e:	4655      	mov	r5, sl
 8010190:	f7fc f9f8 	bl	800c584 <__locale_ctype_ptr>
 8010194:	f815 bb01 	ldrb.w	fp, [r5], #1
 8010198:	4458      	add	r0, fp
 801019a:	7843      	ldrb	r3, [r0, #1]
 801019c:	f013 0308 	ands.w	r3, r3, #8
 80101a0:	d01c      	beq.n	80101dc <__ssvfiscanf_r+0x84>
 80101a2:	6863      	ldr	r3, [r4, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	dd12      	ble.n	80101ce <__ssvfiscanf_r+0x76>
 80101a8:	f7fc f9ec 	bl	800c584 <__locale_ctype_ptr>
 80101ac:	6823      	ldr	r3, [r4, #0]
 80101ae:	781a      	ldrb	r2, [r3, #0]
 80101b0:	4410      	add	r0, r2
 80101b2:	7842      	ldrb	r2, [r0, #1]
 80101b4:	0712      	lsls	r2, r2, #28
 80101b6:	d401      	bmi.n	80101bc <__ssvfiscanf_r+0x64>
 80101b8:	46aa      	mov	sl, r5
 80101ba:	e7e3      	b.n	8010184 <__ssvfiscanf_r+0x2c>
 80101bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80101be:	3201      	adds	r2, #1
 80101c0:	9245      	str	r2, [sp, #276]	; 0x114
 80101c2:	6862      	ldr	r2, [r4, #4]
 80101c4:	3301      	adds	r3, #1
 80101c6:	3a01      	subs	r2, #1
 80101c8:	6062      	str	r2, [r4, #4]
 80101ca:	6023      	str	r3, [r4, #0]
 80101cc:	e7e9      	b.n	80101a2 <__ssvfiscanf_r+0x4a>
 80101ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80101d0:	4621      	mov	r1, r4
 80101d2:	4630      	mov	r0, r6
 80101d4:	4798      	blx	r3
 80101d6:	2800      	cmp	r0, #0
 80101d8:	d0e6      	beq.n	80101a8 <__ssvfiscanf_r+0x50>
 80101da:	e7ed      	b.n	80101b8 <__ssvfiscanf_r+0x60>
 80101dc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80101e0:	f040 8082 	bne.w	80102e8 <__ssvfiscanf_r+0x190>
 80101e4:	9343      	str	r3, [sp, #268]	; 0x10c
 80101e6:	9341      	str	r3, [sp, #260]	; 0x104
 80101e8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80101ec:	2b2a      	cmp	r3, #42	; 0x2a
 80101ee:	d103      	bne.n	80101f8 <__ssvfiscanf_r+0xa0>
 80101f0:	2310      	movs	r3, #16
 80101f2:	9341      	str	r3, [sp, #260]	; 0x104
 80101f4:	f10a 0502 	add.w	r5, sl, #2
 80101f8:	46aa      	mov	sl, r5
 80101fa:	f815 1b01 	ldrb.w	r1, [r5], #1
 80101fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8010202:	2a09      	cmp	r2, #9
 8010204:	d922      	bls.n	801024c <__ssvfiscanf_r+0xf4>
 8010206:	2203      	movs	r2, #3
 8010208:	4879      	ldr	r0, [pc, #484]	; (80103f0 <__ssvfiscanf_r+0x298>)
 801020a:	f7f0 f821 	bl	8000250 <memchr>
 801020e:	b138      	cbz	r0, 8010220 <__ssvfiscanf_r+0xc8>
 8010210:	eba0 0309 	sub.w	r3, r0, r9
 8010214:	2001      	movs	r0, #1
 8010216:	4098      	lsls	r0, r3
 8010218:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801021a:	4318      	orrs	r0, r3
 801021c:	9041      	str	r0, [sp, #260]	; 0x104
 801021e:	46aa      	mov	sl, r5
 8010220:	f89a 3000 	ldrb.w	r3, [sl]
 8010224:	2b67      	cmp	r3, #103	; 0x67
 8010226:	f10a 0501 	add.w	r5, sl, #1
 801022a:	d82b      	bhi.n	8010284 <__ssvfiscanf_r+0x12c>
 801022c:	2b65      	cmp	r3, #101	; 0x65
 801022e:	f080 809f 	bcs.w	8010370 <__ssvfiscanf_r+0x218>
 8010232:	2b47      	cmp	r3, #71	; 0x47
 8010234:	d810      	bhi.n	8010258 <__ssvfiscanf_r+0x100>
 8010236:	2b45      	cmp	r3, #69	; 0x45
 8010238:	f080 809a 	bcs.w	8010370 <__ssvfiscanf_r+0x218>
 801023c:	2b00      	cmp	r3, #0
 801023e:	d06c      	beq.n	801031a <__ssvfiscanf_r+0x1c2>
 8010240:	2b25      	cmp	r3, #37	; 0x25
 8010242:	d051      	beq.n	80102e8 <__ssvfiscanf_r+0x190>
 8010244:	2303      	movs	r3, #3
 8010246:	9347      	str	r3, [sp, #284]	; 0x11c
 8010248:	9742      	str	r7, [sp, #264]	; 0x108
 801024a:	e027      	b.n	801029c <__ssvfiscanf_r+0x144>
 801024c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801024e:	fb07 1303 	mla	r3, r7, r3, r1
 8010252:	3b30      	subs	r3, #48	; 0x30
 8010254:	9343      	str	r3, [sp, #268]	; 0x10c
 8010256:	e7cf      	b.n	80101f8 <__ssvfiscanf_r+0xa0>
 8010258:	2b5b      	cmp	r3, #91	; 0x5b
 801025a:	d06a      	beq.n	8010332 <__ssvfiscanf_r+0x1da>
 801025c:	d80c      	bhi.n	8010278 <__ssvfiscanf_r+0x120>
 801025e:	2b58      	cmp	r3, #88	; 0x58
 8010260:	d1f0      	bne.n	8010244 <__ssvfiscanf_r+0xec>
 8010262:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010268:	9241      	str	r2, [sp, #260]	; 0x104
 801026a:	2210      	movs	r2, #16
 801026c:	9242      	str	r2, [sp, #264]	; 0x108
 801026e:	2b6e      	cmp	r3, #110	; 0x6e
 8010270:	bf8c      	ite	hi
 8010272:	2304      	movhi	r3, #4
 8010274:	2303      	movls	r3, #3
 8010276:	e010      	b.n	801029a <__ssvfiscanf_r+0x142>
 8010278:	2b63      	cmp	r3, #99	; 0x63
 801027a:	d065      	beq.n	8010348 <__ssvfiscanf_r+0x1f0>
 801027c:	2b64      	cmp	r3, #100	; 0x64
 801027e:	d1e1      	bne.n	8010244 <__ssvfiscanf_r+0xec>
 8010280:	9742      	str	r7, [sp, #264]	; 0x108
 8010282:	e7f4      	b.n	801026e <__ssvfiscanf_r+0x116>
 8010284:	2b70      	cmp	r3, #112	; 0x70
 8010286:	d04b      	beq.n	8010320 <__ssvfiscanf_r+0x1c8>
 8010288:	d826      	bhi.n	80102d8 <__ssvfiscanf_r+0x180>
 801028a:	2b6e      	cmp	r3, #110	; 0x6e
 801028c:	d062      	beq.n	8010354 <__ssvfiscanf_r+0x1fc>
 801028e:	d84c      	bhi.n	801032a <__ssvfiscanf_r+0x1d2>
 8010290:	2b69      	cmp	r3, #105	; 0x69
 8010292:	d1d7      	bne.n	8010244 <__ssvfiscanf_r+0xec>
 8010294:	2300      	movs	r3, #0
 8010296:	9342      	str	r3, [sp, #264]	; 0x108
 8010298:	2303      	movs	r3, #3
 801029a:	9347      	str	r3, [sp, #284]	; 0x11c
 801029c:	6863      	ldr	r3, [r4, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	dd68      	ble.n	8010374 <__ssvfiscanf_r+0x21c>
 80102a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80102a4:	0659      	lsls	r1, r3, #25
 80102a6:	d407      	bmi.n	80102b8 <__ssvfiscanf_r+0x160>
 80102a8:	f7fc f96c 	bl	800c584 <__locale_ctype_ptr>
 80102ac:	6823      	ldr	r3, [r4, #0]
 80102ae:	781a      	ldrb	r2, [r3, #0]
 80102b0:	4410      	add	r0, r2
 80102b2:	7842      	ldrb	r2, [r0, #1]
 80102b4:	0712      	lsls	r2, r2, #28
 80102b6:	d464      	bmi.n	8010382 <__ssvfiscanf_r+0x22a>
 80102b8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	dc73      	bgt.n	80103a6 <__ssvfiscanf_r+0x24e>
 80102be:	466b      	mov	r3, sp
 80102c0:	4622      	mov	r2, r4
 80102c2:	a941      	add	r1, sp, #260	; 0x104
 80102c4:	4630      	mov	r0, r6
 80102c6:	f000 f897 	bl	80103f8 <_scanf_chars>
 80102ca:	2801      	cmp	r0, #1
 80102cc:	f000 8089 	beq.w	80103e2 <__ssvfiscanf_r+0x28a>
 80102d0:	2802      	cmp	r0, #2
 80102d2:	f47f af71 	bne.w	80101b8 <__ssvfiscanf_r+0x60>
 80102d6:	e01d      	b.n	8010314 <__ssvfiscanf_r+0x1bc>
 80102d8:	2b75      	cmp	r3, #117	; 0x75
 80102da:	d0d1      	beq.n	8010280 <__ssvfiscanf_r+0x128>
 80102dc:	2b78      	cmp	r3, #120	; 0x78
 80102de:	d0c0      	beq.n	8010262 <__ssvfiscanf_r+0x10a>
 80102e0:	2b73      	cmp	r3, #115	; 0x73
 80102e2:	d1af      	bne.n	8010244 <__ssvfiscanf_r+0xec>
 80102e4:	2302      	movs	r3, #2
 80102e6:	e7d8      	b.n	801029a <__ssvfiscanf_r+0x142>
 80102e8:	6863      	ldr	r3, [r4, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	dd0c      	ble.n	8010308 <__ssvfiscanf_r+0x1b0>
 80102ee:	6823      	ldr	r3, [r4, #0]
 80102f0:	781a      	ldrb	r2, [r3, #0]
 80102f2:	455a      	cmp	r2, fp
 80102f4:	d175      	bne.n	80103e2 <__ssvfiscanf_r+0x28a>
 80102f6:	3301      	adds	r3, #1
 80102f8:	6862      	ldr	r2, [r4, #4]
 80102fa:	6023      	str	r3, [r4, #0]
 80102fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80102fe:	3a01      	subs	r2, #1
 8010300:	3301      	adds	r3, #1
 8010302:	6062      	str	r2, [r4, #4]
 8010304:	9345      	str	r3, [sp, #276]	; 0x114
 8010306:	e757      	b.n	80101b8 <__ssvfiscanf_r+0x60>
 8010308:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801030a:	4621      	mov	r1, r4
 801030c:	4630      	mov	r0, r6
 801030e:	4798      	blx	r3
 8010310:	2800      	cmp	r0, #0
 8010312:	d0ec      	beq.n	80102ee <__ssvfiscanf_r+0x196>
 8010314:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010316:	2800      	cmp	r0, #0
 8010318:	d159      	bne.n	80103ce <__ssvfiscanf_r+0x276>
 801031a:	f04f 30ff 	mov.w	r0, #4294967295
 801031e:	e05c      	b.n	80103da <__ssvfiscanf_r+0x282>
 8010320:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010322:	f042 0220 	orr.w	r2, r2, #32
 8010326:	9241      	str	r2, [sp, #260]	; 0x104
 8010328:	e79b      	b.n	8010262 <__ssvfiscanf_r+0x10a>
 801032a:	2308      	movs	r3, #8
 801032c:	9342      	str	r3, [sp, #264]	; 0x108
 801032e:	2304      	movs	r3, #4
 8010330:	e7b3      	b.n	801029a <__ssvfiscanf_r+0x142>
 8010332:	4629      	mov	r1, r5
 8010334:	4640      	mov	r0, r8
 8010336:	f000 f9b7 	bl	80106a8 <__sccl>
 801033a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010340:	9341      	str	r3, [sp, #260]	; 0x104
 8010342:	4605      	mov	r5, r0
 8010344:	2301      	movs	r3, #1
 8010346:	e7a8      	b.n	801029a <__ssvfiscanf_r+0x142>
 8010348:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801034a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801034e:	9341      	str	r3, [sp, #260]	; 0x104
 8010350:	2300      	movs	r3, #0
 8010352:	e7a2      	b.n	801029a <__ssvfiscanf_r+0x142>
 8010354:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010356:	06c3      	lsls	r3, r0, #27
 8010358:	f53f af2e 	bmi.w	80101b8 <__ssvfiscanf_r+0x60>
 801035c:	9b00      	ldr	r3, [sp, #0]
 801035e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010360:	1d19      	adds	r1, r3, #4
 8010362:	9100      	str	r1, [sp, #0]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	07c0      	lsls	r0, r0, #31
 8010368:	bf4c      	ite	mi
 801036a:	801a      	strhmi	r2, [r3, #0]
 801036c:	601a      	strpl	r2, [r3, #0]
 801036e:	e723      	b.n	80101b8 <__ssvfiscanf_r+0x60>
 8010370:	2305      	movs	r3, #5
 8010372:	e792      	b.n	801029a <__ssvfiscanf_r+0x142>
 8010374:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010376:	4621      	mov	r1, r4
 8010378:	4630      	mov	r0, r6
 801037a:	4798      	blx	r3
 801037c:	2800      	cmp	r0, #0
 801037e:	d090      	beq.n	80102a2 <__ssvfiscanf_r+0x14a>
 8010380:	e7c8      	b.n	8010314 <__ssvfiscanf_r+0x1bc>
 8010382:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010384:	3201      	adds	r2, #1
 8010386:	9245      	str	r2, [sp, #276]	; 0x114
 8010388:	6862      	ldr	r2, [r4, #4]
 801038a:	3a01      	subs	r2, #1
 801038c:	2a00      	cmp	r2, #0
 801038e:	6062      	str	r2, [r4, #4]
 8010390:	dd02      	ble.n	8010398 <__ssvfiscanf_r+0x240>
 8010392:	3301      	adds	r3, #1
 8010394:	6023      	str	r3, [r4, #0]
 8010396:	e787      	b.n	80102a8 <__ssvfiscanf_r+0x150>
 8010398:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801039a:	4621      	mov	r1, r4
 801039c:	4630      	mov	r0, r6
 801039e:	4798      	blx	r3
 80103a0:	2800      	cmp	r0, #0
 80103a2:	d081      	beq.n	80102a8 <__ssvfiscanf_r+0x150>
 80103a4:	e7b6      	b.n	8010314 <__ssvfiscanf_r+0x1bc>
 80103a6:	2b04      	cmp	r3, #4
 80103a8:	dc06      	bgt.n	80103b8 <__ssvfiscanf_r+0x260>
 80103aa:	466b      	mov	r3, sp
 80103ac:	4622      	mov	r2, r4
 80103ae:	a941      	add	r1, sp, #260	; 0x104
 80103b0:	4630      	mov	r0, r6
 80103b2:	f000 f885 	bl	80104c0 <_scanf_i>
 80103b6:	e788      	b.n	80102ca <__ssvfiscanf_r+0x172>
 80103b8:	4b0e      	ldr	r3, [pc, #56]	; (80103f4 <__ssvfiscanf_r+0x29c>)
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	f43f aefc 	beq.w	80101b8 <__ssvfiscanf_r+0x60>
 80103c0:	466b      	mov	r3, sp
 80103c2:	4622      	mov	r2, r4
 80103c4:	a941      	add	r1, sp, #260	; 0x104
 80103c6:	4630      	mov	r0, r6
 80103c8:	f7fc fe24 	bl	800d014 <_scanf_float>
 80103cc:	e77d      	b.n	80102ca <__ssvfiscanf_r+0x172>
 80103ce:	89a3      	ldrh	r3, [r4, #12]
 80103d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80103d4:	bf18      	it	ne
 80103d6:	f04f 30ff 	movne.w	r0, #4294967295
 80103da:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80103de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80103e4:	e7f9      	b.n	80103da <__ssvfiscanf_r+0x282>
 80103e6:	bf00      	nop
 80103e8:	080100a5 	.word	0x080100a5
 80103ec:	0801011f 	.word	0x0801011f
 80103f0:	0801185a 	.word	0x0801185a
 80103f4:	0800d015 	.word	0x0800d015

080103f8 <_scanf_chars>:
 80103f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103fc:	4615      	mov	r5, r2
 80103fe:	688a      	ldr	r2, [r1, #8]
 8010400:	4680      	mov	r8, r0
 8010402:	460c      	mov	r4, r1
 8010404:	b932      	cbnz	r2, 8010414 <_scanf_chars+0x1c>
 8010406:	698a      	ldr	r2, [r1, #24]
 8010408:	2a00      	cmp	r2, #0
 801040a:	bf14      	ite	ne
 801040c:	f04f 32ff 	movne.w	r2, #4294967295
 8010410:	2201      	moveq	r2, #1
 8010412:	608a      	str	r2, [r1, #8]
 8010414:	6822      	ldr	r2, [r4, #0]
 8010416:	06d1      	lsls	r1, r2, #27
 8010418:	bf5f      	itttt	pl
 801041a:	681a      	ldrpl	r2, [r3, #0]
 801041c:	1d11      	addpl	r1, r2, #4
 801041e:	6019      	strpl	r1, [r3, #0]
 8010420:	6817      	ldrpl	r7, [r2, #0]
 8010422:	2600      	movs	r6, #0
 8010424:	69a3      	ldr	r3, [r4, #24]
 8010426:	b1db      	cbz	r3, 8010460 <_scanf_chars+0x68>
 8010428:	2b01      	cmp	r3, #1
 801042a:	d107      	bne.n	801043c <_scanf_chars+0x44>
 801042c:	682b      	ldr	r3, [r5, #0]
 801042e:	6962      	ldr	r2, [r4, #20]
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	5cd3      	ldrb	r3, [r2, r3]
 8010434:	b9a3      	cbnz	r3, 8010460 <_scanf_chars+0x68>
 8010436:	2e00      	cmp	r6, #0
 8010438:	d132      	bne.n	80104a0 <_scanf_chars+0xa8>
 801043a:	e006      	b.n	801044a <_scanf_chars+0x52>
 801043c:	2b02      	cmp	r3, #2
 801043e:	d007      	beq.n	8010450 <_scanf_chars+0x58>
 8010440:	2e00      	cmp	r6, #0
 8010442:	d12d      	bne.n	80104a0 <_scanf_chars+0xa8>
 8010444:	69a3      	ldr	r3, [r4, #24]
 8010446:	2b01      	cmp	r3, #1
 8010448:	d12a      	bne.n	80104a0 <_scanf_chars+0xa8>
 801044a:	2001      	movs	r0, #1
 801044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010450:	f7fc f898 	bl	800c584 <__locale_ctype_ptr>
 8010454:	682b      	ldr	r3, [r5, #0]
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	4418      	add	r0, r3
 801045a:	7843      	ldrb	r3, [r0, #1]
 801045c:	071b      	lsls	r3, r3, #28
 801045e:	d4ef      	bmi.n	8010440 <_scanf_chars+0x48>
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	06da      	lsls	r2, r3, #27
 8010464:	bf5e      	ittt	pl
 8010466:	682b      	ldrpl	r3, [r5, #0]
 8010468:	781b      	ldrbpl	r3, [r3, #0]
 801046a:	703b      	strbpl	r3, [r7, #0]
 801046c:	682a      	ldr	r2, [r5, #0]
 801046e:	686b      	ldr	r3, [r5, #4]
 8010470:	f102 0201 	add.w	r2, r2, #1
 8010474:	602a      	str	r2, [r5, #0]
 8010476:	68a2      	ldr	r2, [r4, #8]
 8010478:	f103 33ff 	add.w	r3, r3, #4294967295
 801047c:	f102 32ff 	add.w	r2, r2, #4294967295
 8010480:	606b      	str	r3, [r5, #4]
 8010482:	f106 0601 	add.w	r6, r6, #1
 8010486:	bf58      	it	pl
 8010488:	3701      	addpl	r7, #1
 801048a:	60a2      	str	r2, [r4, #8]
 801048c:	b142      	cbz	r2, 80104a0 <_scanf_chars+0xa8>
 801048e:	2b00      	cmp	r3, #0
 8010490:	dcc8      	bgt.n	8010424 <_scanf_chars+0x2c>
 8010492:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010496:	4629      	mov	r1, r5
 8010498:	4640      	mov	r0, r8
 801049a:	4798      	blx	r3
 801049c:	2800      	cmp	r0, #0
 801049e:	d0c1      	beq.n	8010424 <_scanf_chars+0x2c>
 80104a0:	6823      	ldr	r3, [r4, #0]
 80104a2:	f013 0310 	ands.w	r3, r3, #16
 80104a6:	d105      	bne.n	80104b4 <_scanf_chars+0xbc>
 80104a8:	68e2      	ldr	r2, [r4, #12]
 80104aa:	3201      	adds	r2, #1
 80104ac:	60e2      	str	r2, [r4, #12]
 80104ae:	69a2      	ldr	r2, [r4, #24]
 80104b0:	b102      	cbz	r2, 80104b4 <_scanf_chars+0xbc>
 80104b2:	703b      	strb	r3, [r7, #0]
 80104b4:	6923      	ldr	r3, [r4, #16]
 80104b6:	441e      	add	r6, r3
 80104b8:	6126      	str	r6, [r4, #16]
 80104ba:	2000      	movs	r0, #0
 80104bc:	e7c6      	b.n	801044c <_scanf_chars+0x54>
	...

080104c0 <_scanf_i>:
 80104c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c4:	469a      	mov	sl, r3
 80104c6:	4b74      	ldr	r3, [pc, #464]	; (8010698 <_scanf_i+0x1d8>)
 80104c8:	460c      	mov	r4, r1
 80104ca:	4683      	mov	fp, r0
 80104cc:	4616      	mov	r6, r2
 80104ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80104d2:	b087      	sub	sp, #28
 80104d4:	ab03      	add	r3, sp, #12
 80104d6:	68a7      	ldr	r7, [r4, #8]
 80104d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80104dc:	4b6f      	ldr	r3, [pc, #444]	; (801069c <_scanf_i+0x1dc>)
 80104de:	69a1      	ldr	r1, [r4, #24]
 80104e0:	4a6f      	ldr	r2, [pc, #444]	; (80106a0 <_scanf_i+0x1e0>)
 80104e2:	2903      	cmp	r1, #3
 80104e4:	bf08      	it	eq
 80104e6:	461a      	moveq	r2, r3
 80104e8:	1e7b      	subs	r3, r7, #1
 80104ea:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80104ee:	bf84      	itt	hi
 80104f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80104f4:	60a3      	strhi	r3, [r4, #8]
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	9200      	str	r2, [sp, #0]
 80104fa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80104fe:	bf88      	it	hi
 8010500:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010504:	f104 091c 	add.w	r9, r4, #28
 8010508:	6023      	str	r3, [r4, #0]
 801050a:	bf8c      	ite	hi
 801050c:	197f      	addhi	r7, r7, r5
 801050e:	2700      	movls	r7, #0
 8010510:	464b      	mov	r3, r9
 8010512:	f04f 0800 	mov.w	r8, #0
 8010516:	9301      	str	r3, [sp, #4]
 8010518:	6831      	ldr	r1, [r6, #0]
 801051a:	ab03      	add	r3, sp, #12
 801051c:	2202      	movs	r2, #2
 801051e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010522:	7809      	ldrb	r1, [r1, #0]
 8010524:	f7ef fe94 	bl	8000250 <memchr>
 8010528:	9b01      	ldr	r3, [sp, #4]
 801052a:	b330      	cbz	r0, 801057a <_scanf_i+0xba>
 801052c:	f1b8 0f01 	cmp.w	r8, #1
 8010530:	d15a      	bne.n	80105e8 <_scanf_i+0x128>
 8010532:	6862      	ldr	r2, [r4, #4]
 8010534:	b92a      	cbnz	r2, 8010542 <_scanf_i+0x82>
 8010536:	6822      	ldr	r2, [r4, #0]
 8010538:	2108      	movs	r1, #8
 801053a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801053e:	6061      	str	r1, [r4, #4]
 8010540:	6022      	str	r2, [r4, #0]
 8010542:	6822      	ldr	r2, [r4, #0]
 8010544:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010548:	6022      	str	r2, [r4, #0]
 801054a:	68a2      	ldr	r2, [r4, #8]
 801054c:	1e51      	subs	r1, r2, #1
 801054e:	60a1      	str	r1, [r4, #8]
 8010550:	b19a      	cbz	r2, 801057a <_scanf_i+0xba>
 8010552:	6832      	ldr	r2, [r6, #0]
 8010554:	1c51      	adds	r1, r2, #1
 8010556:	6031      	str	r1, [r6, #0]
 8010558:	7812      	ldrb	r2, [r2, #0]
 801055a:	701a      	strb	r2, [r3, #0]
 801055c:	1c5d      	adds	r5, r3, #1
 801055e:	6873      	ldr	r3, [r6, #4]
 8010560:	3b01      	subs	r3, #1
 8010562:	2b00      	cmp	r3, #0
 8010564:	6073      	str	r3, [r6, #4]
 8010566:	dc07      	bgt.n	8010578 <_scanf_i+0xb8>
 8010568:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801056c:	4631      	mov	r1, r6
 801056e:	4658      	mov	r0, fp
 8010570:	4798      	blx	r3
 8010572:	2800      	cmp	r0, #0
 8010574:	f040 8086 	bne.w	8010684 <_scanf_i+0x1c4>
 8010578:	462b      	mov	r3, r5
 801057a:	f108 0801 	add.w	r8, r8, #1
 801057e:	f1b8 0f03 	cmp.w	r8, #3
 8010582:	d1c8      	bne.n	8010516 <_scanf_i+0x56>
 8010584:	6862      	ldr	r2, [r4, #4]
 8010586:	b90a      	cbnz	r2, 801058c <_scanf_i+0xcc>
 8010588:	220a      	movs	r2, #10
 801058a:	6062      	str	r2, [r4, #4]
 801058c:	6862      	ldr	r2, [r4, #4]
 801058e:	4945      	ldr	r1, [pc, #276]	; (80106a4 <_scanf_i+0x1e4>)
 8010590:	6960      	ldr	r0, [r4, #20]
 8010592:	9301      	str	r3, [sp, #4]
 8010594:	1a89      	subs	r1, r1, r2
 8010596:	f000 f887 	bl	80106a8 <__sccl>
 801059a:	9b01      	ldr	r3, [sp, #4]
 801059c:	f04f 0800 	mov.w	r8, #0
 80105a0:	461d      	mov	r5, r3
 80105a2:	68a3      	ldr	r3, [r4, #8]
 80105a4:	6822      	ldr	r2, [r4, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d03a      	beq.n	8010620 <_scanf_i+0x160>
 80105aa:	6831      	ldr	r1, [r6, #0]
 80105ac:	6960      	ldr	r0, [r4, #20]
 80105ae:	f891 c000 	ldrb.w	ip, [r1]
 80105b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d032      	beq.n	8010620 <_scanf_i+0x160>
 80105ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80105be:	d121      	bne.n	8010604 <_scanf_i+0x144>
 80105c0:	0510      	lsls	r0, r2, #20
 80105c2:	d51f      	bpl.n	8010604 <_scanf_i+0x144>
 80105c4:	f108 0801 	add.w	r8, r8, #1
 80105c8:	b117      	cbz	r7, 80105d0 <_scanf_i+0x110>
 80105ca:	3301      	adds	r3, #1
 80105cc:	3f01      	subs	r7, #1
 80105ce:	60a3      	str	r3, [r4, #8]
 80105d0:	6873      	ldr	r3, [r6, #4]
 80105d2:	3b01      	subs	r3, #1
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	6073      	str	r3, [r6, #4]
 80105d8:	dd1b      	ble.n	8010612 <_scanf_i+0x152>
 80105da:	6833      	ldr	r3, [r6, #0]
 80105dc:	3301      	adds	r3, #1
 80105de:	6033      	str	r3, [r6, #0]
 80105e0:	68a3      	ldr	r3, [r4, #8]
 80105e2:	3b01      	subs	r3, #1
 80105e4:	60a3      	str	r3, [r4, #8]
 80105e6:	e7dc      	b.n	80105a2 <_scanf_i+0xe2>
 80105e8:	f1b8 0f02 	cmp.w	r8, #2
 80105ec:	d1ad      	bne.n	801054a <_scanf_i+0x8a>
 80105ee:	6822      	ldr	r2, [r4, #0]
 80105f0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80105f4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80105f8:	d1bf      	bne.n	801057a <_scanf_i+0xba>
 80105fa:	2110      	movs	r1, #16
 80105fc:	6061      	str	r1, [r4, #4]
 80105fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010602:	e7a1      	b.n	8010548 <_scanf_i+0x88>
 8010604:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010608:	6022      	str	r2, [r4, #0]
 801060a:	780b      	ldrb	r3, [r1, #0]
 801060c:	702b      	strb	r3, [r5, #0]
 801060e:	3501      	adds	r5, #1
 8010610:	e7de      	b.n	80105d0 <_scanf_i+0x110>
 8010612:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010616:	4631      	mov	r1, r6
 8010618:	4658      	mov	r0, fp
 801061a:	4798      	blx	r3
 801061c:	2800      	cmp	r0, #0
 801061e:	d0df      	beq.n	80105e0 <_scanf_i+0x120>
 8010620:	6823      	ldr	r3, [r4, #0]
 8010622:	05d9      	lsls	r1, r3, #23
 8010624:	d50c      	bpl.n	8010640 <_scanf_i+0x180>
 8010626:	454d      	cmp	r5, r9
 8010628:	d908      	bls.n	801063c <_scanf_i+0x17c>
 801062a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801062e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010632:	4632      	mov	r2, r6
 8010634:	4658      	mov	r0, fp
 8010636:	4798      	blx	r3
 8010638:	1e6f      	subs	r7, r5, #1
 801063a:	463d      	mov	r5, r7
 801063c:	454d      	cmp	r5, r9
 801063e:	d029      	beq.n	8010694 <_scanf_i+0x1d4>
 8010640:	6822      	ldr	r2, [r4, #0]
 8010642:	f012 0210 	ands.w	r2, r2, #16
 8010646:	d113      	bne.n	8010670 <_scanf_i+0x1b0>
 8010648:	702a      	strb	r2, [r5, #0]
 801064a:	6863      	ldr	r3, [r4, #4]
 801064c:	9e00      	ldr	r6, [sp, #0]
 801064e:	4649      	mov	r1, r9
 8010650:	4658      	mov	r0, fp
 8010652:	47b0      	blx	r6
 8010654:	f8da 3000 	ldr.w	r3, [sl]
 8010658:	6821      	ldr	r1, [r4, #0]
 801065a:	1d1a      	adds	r2, r3, #4
 801065c:	f8ca 2000 	str.w	r2, [sl]
 8010660:	f011 0f20 	tst.w	r1, #32
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	d010      	beq.n	801068a <_scanf_i+0x1ca>
 8010668:	6018      	str	r0, [r3, #0]
 801066a:	68e3      	ldr	r3, [r4, #12]
 801066c:	3301      	adds	r3, #1
 801066e:	60e3      	str	r3, [r4, #12]
 8010670:	eba5 0509 	sub.w	r5, r5, r9
 8010674:	44a8      	add	r8, r5
 8010676:	6925      	ldr	r5, [r4, #16]
 8010678:	4445      	add	r5, r8
 801067a:	6125      	str	r5, [r4, #16]
 801067c:	2000      	movs	r0, #0
 801067e:	b007      	add	sp, #28
 8010680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010684:	f04f 0800 	mov.w	r8, #0
 8010688:	e7ca      	b.n	8010620 <_scanf_i+0x160>
 801068a:	07ca      	lsls	r2, r1, #31
 801068c:	bf4c      	ite	mi
 801068e:	8018      	strhmi	r0, [r3, #0]
 8010690:	6018      	strpl	r0, [r3, #0]
 8010692:	e7ea      	b.n	801066a <_scanf_i+0x1aa>
 8010694:	2001      	movs	r0, #1
 8010696:	e7f2      	b.n	801067e <_scanf_i+0x1be>
 8010698:	08010d88 	.word	0x08010d88
 801069c:	0800e231 	.word	0x0800e231
 80106a0:	08010801 	.word	0x08010801
 80106a4:	08011875 	.word	0x08011875

080106a8 <__sccl>:
 80106a8:	b570      	push	{r4, r5, r6, lr}
 80106aa:	780b      	ldrb	r3, [r1, #0]
 80106ac:	2b5e      	cmp	r3, #94	; 0x5e
 80106ae:	bf13      	iteet	ne
 80106b0:	1c4a      	addne	r2, r1, #1
 80106b2:	1c8a      	addeq	r2, r1, #2
 80106b4:	784b      	ldrbeq	r3, [r1, #1]
 80106b6:	2100      	movne	r1, #0
 80106b8:	bf08      	it	eq
 80106ba:	2101      	moveq	r1, #1
 80106bc:	1e44      	subs	r4, r0, #1
 80106be:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80106c2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80106c6:	42ac      	cmp	r4, r5
 80106c8:	d1fb      	bne.n	80106c2 <__sccl+0x1a>
 80106ca:	b913      	cbnz	r3, 80106d2 <__sccl+0x2a>
 80106cc:	3a01      	subs	r2, #1
 80106ce:	4610      	mov	r0, r2
 80106d0:	bd70      	pop	{r4, r5, r6, pc}
 80106d2:	f081 0401 	eor.w	r4, r1, #1
 80106d6:	54c4      	strb	r4, [r0, r3]
 80106d8:	1c51      	adds	r1, r2, #1
 80106da:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80106de:	2d2d      	cmp	r5, #45	; 0x2d
 80106e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80106e4:	460a      	mov	r2, r1
 80106e6:	d006      	beq.n	80106f6 <__sccl+0x4e>
 80106e8:	2d5d      	cmp	r5, #93	; 0x5d
 80106ea:	d0f0      	beq.n	80106ce <__sccl+0x26>
 80106ec:	b90d      	cbnz	r5, 80106f2 <__sccl+0x4a>
 80106ee:	4632      	mov	r2, r6
 80106f0:	e7ed      	b.n	80106ce <__sccl+0x26>
 80106f2:	462b      	mov	r3, r5
 80106f4:	e7ef      	b.n	80106d6 <__sccl+0x2e>
 80106f6:	780e      	ldrb	r6, [r1, #0]
 80106f8:	2e5d      	cmp	r6, #93	; 0x5d
 80106fa:	d0fa      	beq.n	80106f2 <__sccl+0x4a>
 80106fc:	42b3      	cmp	r3, r6
 80106fe:	dcf8      	bgt.n	80106f2 <__sccl+0x4a>
 8010700:	3301      	adds	r3, #1
 8010702:	429e      	cmp	r6, r3
 8010704:	54c4      	strb	r4, [r0, r3]
 8010706:	dcfb      	bgt.n	8010700 <__sccl+0x58>
 8010708:	3102      	adds	r1, #2
 801070a:	e7e6      	b.n	80106da <__sccl+0x32>

0801070c <_strtoul_l.isra.0>:
 801070c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010710:	4680      	mov	r8, r0
 8010712:	4689      	mov	r9, r1
 8010714:	4692      	mov	sl, r2
 8010716:	461e      	mov	r6, r3
 8010718:	460f      	mov	r7, r1
 801071a:	463d      	mov	r5, r7
 801071c:	9808      	ldr	r0, [sp, #32]
 801071e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010722:	f7fb ff2b 	bl	800c57c <__locale_ctype_ptr_l>
 8010726:	4420      	add	r0, r4
 8010728:	7843      	ldrb	r3, [r0, #1]
 801072a:	f013 0308 	ands.w	r3, r3, #8
 801072e:	d130      	bne.n	8010792 <_strtoul_l.isra.0+0x86>
 8010730:	2c2d      	cmp	r4, #45	; 0x2d
 8010732:	d130      	bne.n	8010796 <_strtoul_l.isra.0+0x8a>
 8010734:	787c      	ldrb	r4, [r7, #1]
 8010736:	1cbd      	adds	r5, r7, #2
 8010738:	2101      	movs	r1, #1
 801073a:	2e00      	cmp	r6, #0
 801073c:	d05c      	beq.n	80107f8 <_strtoul_l.isra.0+0xec>
 801073e:	2e10      	cmp	r6, #16
 8010740:	d109      	bne.n	8010756 <_strtoul_l.isra.0+0x4a>
 8010742:	2c30      	cmp	r4, #48	; 0x30
 8010744:	d107      	bne.n	8010756 <_strtoul_l.isra.0+0x4a>
 8010746:	782b      	ldrb	r3, [r5, #0]
 8010748:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801074c:	2b58      	cmp	r3, #88	; 0x58
 801074e:	d14e      	bne.n	80107ee <_strtoul_l.isra.0+0xe2>
 8010750:	786c      	ldrb	r4, [r5, #1]
 8010752:	2610      	movs	r6, #16
 8010754:	3502      	adds	r5, #2
 8010756:	f04f 32ff 	mov.w	r2, #4294967295
 801075a:	2300      	movs	r3, #0
 801075c:	fbb2 f2f6 	udiv	r2, r2, r6
 8010760:	fb06 fc02 	mul.w	ip, r6, r2
 8010764:	ea6f 0c0c 	mvn.w	ip, ip
 8010768:	4618      	mov	r0, r3
 801076a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801076e:	2f09      	cmp	r7, #9
 8010770:	d817      	bhi.n	80107a2 <_strtoul_l.isra.0+0x96>
 8010772:	463c      	mov	r4, r7
 8010774:	42a6      	cmp	r6, r4
 8010776:	dd23      	ble.n	80107c0 <_strtoul_l.isra.0+0xb4>
 8010778:	2b00      	cmp	r3, #0
 801077a:	db1e      	blt.n	80107ba <_strtoul_l.isra.0+0xae>
 801077c:	4282      	cmp	r2, r0
 801077e:	d31c      	bcc.n	80107ba <_strtoul_l.isra.0+0xae>
 8010780:	d101      	bne.n	8010786 <_strtoul_l.isra.0+0x7a>
 8010782:	45a4      	cmp	ip, r4
 8010784:	db19      	blt.n	80107ba <_strtoul_l.isra.0+0xae>
 8010786:	fb00 4006 	mla	r0, r0, r6, r4
 801078a:	2301      	movs	r3, #1
 801078c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010790:	e7eb      	b.n	801076a <_strtoul_l.isra.0+0x5e>
 8010792:	462f      	mov	r7, r5
 8010794:	e7c1      	b.n	801071a <_strtoul_l.isra.0+0xe>
 8010796:	2c2b      	cmp	r4, #43	; 0x2b
 8010798:	bf04      	itt	eq
 801079a:	1cbd      	addeq	r5, r7, #2
 801079c:	787c      	ldrbeq	r4, [r7, #1]
 801079e:	4619      	mov	r1, r3
 80107a0:	e7cb      	b.n	801073a <_strtoul_l.isra.0+0x2e>
 80107a2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80107a6:	2f19      	cmp	r7, #25
 80107a8:	d801      	bhi.n	80107ae <_strtoul_l.isra.0+0xa2>
 80107aa:	3c37      	subs	r4, #55	; 0x37
 80107ac:	e7e2      	b.n	8010774 <_strtoul_l.isra.0+0x68>
 80107ae:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80107b2:	2f19      	cmp	r7, #25
 80107b4:	d804      	bhi.n	80107c0 <_strtoul_l.isra.0+0xb4>
 80107b6:	3c57      	subs	r4, #87	; 0x57
 80107b8:	e7dc      	b.n	8010774 <_strtoul_l.isra.0+0x68>
 80107ba:	f04f 33ff 	mov.w	r3, #4294967295
 80107be:	e7e5      	b.n	801078c <_strtoul_l.isra.0+0x80>
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	da09      	bge.n	80107d8 <_strtoul_l.isra.0+0xcc>
 80107c4:	2322      	movs	r3, #34	; 0x22
 80107c6:	f8c8 3000 	str.w	r3, [r8]
 80107ca:	f04f 30ff 	mov.w	r0, #4294967295
 80107ce:	f1ba 0f00 	cmp.w	sl, #0
 80107d2:	d107      	bne.n	80107e4 <_strtoul_l.isra.0+0xd8>
 80107d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107d8:	b101      	cbz	r1, 80107dc <_strtoul_l.isra.0+0xd0>
 80107da:	4240      	negs	r0, r0
 80107dc:	f1ba 0f00 	cmp.w	sl, #0
 80107e0:	d0f8      	beq.n	80107d4 <_strtoul_l.isra.0+0xc8>
 80107e2:	b10b      	cbz	r3, 80107e8 <_strtoul_l.isra.0+0xdc>
 80107e4:	f105 39ff 	add.w	r9, r5, #4294967295
 80107e8:	f8ca 9000 	str.w	r9, [sl]
 80107ec:	e7f2      	b.n	80107d4 <_strtoul_l.isra.0+0xc8>
 80107ee:	2430      	movs	r4, #48	; 0x30
 80107f0:	2e00      	cmp	r6, #0
 80107f2:	d1b0      	bne.n	8010756 <_strtoul_l.isra.0+0x4a>
 80107f4:	2608      	movs	r6, #8
 80107f6:	e7ae      	b.n	8010756 <_strtoul_l.isra.0+0x4a>
 80107f8:	2c30      	cmp	r4, #48	; 0x30
 80107fa:	d0a4      	beq.n	8010746 <_strtoul_l.isra.0+0x3a>
 80107fc:	260a      	movs	r6, #10
 80107fe:	e7aa      	b.n	8010756 <_strtoul_l.isra.0+0x4a>

08010800 <_strtoul_r>:
 8010800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010802:	4c06      	ldr	r4, [pc, #24]	; (801081c <_strtoul_r+0x1c>)
 8010804:	4d06      	ldr	r5, [pc, #24]	; (8010820 <_strtoul_r+0x20>)
 8010806:	6824      	ldr	r4, [r4, #0]
 8010808:	6a24      	ldr	r4, [r4, #32]
 801080a:	2c00      	cmp	r4, #0
 801080c:	bf08      	it	eq
 801080e:	462c      	moveq	r4, r5
 8010810:	9400      	str	r4, [sp, #0]
 8010812:	f7ff ff7b 	bl	801070c <_strtoul_l.isra.0>
 8010816:	b003      	add	sp, #12
 8010818:	bd30      	pop	{r4, r5, pc}
 801081a:	bf00      	nop
 801081c:	20000018 	.word	0x20000018
 8010820:	2000007c 	.word	0x2000007c

08010824 <__submore>:
 8010824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010828:	460c      	mov	r4, r1
 801082a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801082c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010830:	4299      	cmp	r1, r3
 8010832:	d11d      	bne.n	8010870 <__submore+0x4c>
 8010834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010838:	f7fb ff36 	bl	800c6a8 <_malloc_r>
 801083c:	b918      	cbnz	r0, 8010846 <__submore+0x22>
 801083e:	f04f 30ff 	mov.w	r0, #4294967295
 8010842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801084a:	63a3      	str	r3, [r4, #56]	; 0x38
 801084c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010850:	6360      	str	r0, [r4, #52]	; 0x34
 8010852:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010856:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801085a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801085e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010862:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010866:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801086a:	6020      	str	r0, [r4, #0]
 801086c:	2000      	movs	r0, #0
 801086e:	e7e8      	b.n	8010842 <__submore+0x1e>
 8010870:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010872:	0077      	lsls	r7, r6, #1
 8010874:	463a      	mov	r2, r7
 8010876:	f7ff fa9c 	bl	800fdb2 <_realloc_r>
 801087a:	4605      	mov	r5, r0
 801087c:	2800      	cmp	r0, #0
 801087e:	d0de      	beq.n	801083e <__submore+0x1a>
 8010880:	eb00 0806 	add.w	r8, r0, r6
 8010884:	4601      	mov	r1, r0
 8010886:	4632      	mov	r2, r6
 8010888:	4640      	mov	r0, r8
 801088a:	f7fb feab 	bl	800c5e4 <memcpy>
 801088e:	f8c4 8000 	str.w	r8, [r4]
 8010892:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010896:	e7e9      	b.n	801086c <__submore+0x48>

08010898 <memmove>:
 8010898:	4288      	cmp	r0, r1
 801089a:	b510      	push	{r4, lr}
 801089c:	eb01 0302 	add.w	r3, r1, r2
 80108a0:	d807      	bhi.n	80108b2 <memmove+0x1a>
 80108a2:	1e42      	subs	r2, r0, #1
 80108a4:	4299      	cmp	r1, r3
 80108a6:	d00a      	beq.n	80108be <memmove+0x26>
 80108a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80108b0:	e7f8      	b.n	80108a4 <memmove+0xc>
 80108b2:	4283      	cmp	r3, r0
 80108b4:	d9f5      	bls.n	80108a2 <memmove+0xa>
 80108b6:	1881      	adds	r1, r0, r2
 80108b8:	1ad2      	subs	r2, r2, r3
 80108ba:	42d3      	cmn	r3, r2
 80108bc:	d100      	bne.n	80108c0 <memmove+0x28>
 80108be:	bd10      	pop	{r4, pc}
 80108c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80108c8:	e7f7      	b.n	80108ba <memmove+0x22>

080108ca <_malloc_usable_size_r>:
 80108ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108ce:	1f18      	subs	r0, r3, #4
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	bfbc      	itt	lt
 80108d4:	580b      	ldrlt	r3, [r1, r0]
 80108d6:	18c0      	addlt	r0, r0, r3
 80108d8:	4770      	bx	lr

080108da <atan2f>:
 80108da:	f000 b851 	b.w	8010980 <__ieee754_atan2f>
	...

080108e0 <sqrtf>:
 80108e0:	b510      	push	{r4, lr}
 80108e2:	ed2d 8b02 	vpush	{d8}
 80108e6:	b08a      	sub	sp, #40	; 0x28
 80108e8:	eeb0 8a40 	vmov.f32	s16, s0
 80108ec:	f000 f8f6 	bl	8010adc <__ieee754_sqrtf>
 80108f0:	4b21      	ldr	r3, [pc, #132]	; (8010978 <sqrtf+0x98>)
 80108f2:	f993 4000 	ldrsb.w	r4, [r3]
 80108f6:	1c63      	adds	r3, r4, #1
 80108f8:	d02c      	beq.n	8010954 <sqrtf+0x74>
 80108fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80108fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010902:	d627      	bvs.n	8010954 <sqrtf+0x74>
 8010904:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801090c:	d522      	bpl.n	8010954 <sqrtf+0x74>
 801090e:	2301      	movs	r3, #1
 8010910:	9300      	str	r3, [sp, #0]
 8010912:	4b1a      	ldr	r3, [pc, #104]	; (801097c <sqrtf+0x9c>)
 8010914:	9301      	str	r3, [sp, #4]
 8010916:	ee18 0a10 	vmov	r0, s16
 801091a:	2300      	movs	r3, #0
 801091c:	9308      	str	r3, [sp, #32]
 801091e:	f7ef fe4b 	bl	80005b8 <__aeabi_f2d>
 8010922:	2200      	movs	r2, #0
 8010924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801092c:	2300      	movs	r3, #0
 801092e:	b9ac      	cbnz	r4, 801095c <sqrtf+0x7c>
 8010930:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010934:	4668      	mov	r0, sp
 8010936:	f000 f8d4 	bl	8010ae2 <matherr>
 801093a:	b1b8      	cbz	r0, 801096c <sqrtf+0x8c>
 801093c:	9b08      	ldr	r3, [sp, #32]
 801093e:	b11b      	cbz	r3, 8010948 <sqrtf+0x68>
 8010940:	f7fb fdf2 	bl	800c528 <__errno>
 8010944:	9b08      	ldr	r3, [sp, #32]
 8010946:	6003      	str	r3, [r0, #0]
 8010948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801094c:	f7f0 f984 	bl	8000c58 <__aeabi_d2f>
 8010950:	ee00 0a10 	vmov	s0, r0
 8010954:	b00a      	add	sp, #40	; 0x28
 8010956:	ecbd 8b02 	vpop	{d8}
 801095a:	bd10      	pop	{r4, pc}
 801095c:	4610      	mov	r0, r2
 801095e:	4619      	mov	r1, r3
 8010960:	f7ef ffac 	bl	80008bc <__aeabi_ddiv>
 8010964:	2c02      	cmp	r4, #2
 8010966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801096a:	d1e3      	bne.n	8010934 <sqrtf+0x54>
 801096c:	f7fb fddc 	bl	800c528 <__errno>
 8010970:	2321      	movs	r3, #33	; 0x21
 8010972:	6003      	str	r3, [r0, #0]
 8010974:	e7e2      	b.n	801093c <sqrtf+0x5c>
 8010976:	bf00      	nop
 8010978:	200001e8 	.word	0x200001e8
 801097c:	080118e0 	.word	0x080118e0

08010980 <__ieee754_atan2f>:
 8010980:	ee10 2a90 	vmov	r2, s1
 8010984:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010988:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801098c:	b510      	push	{r4, lr}
 801098e:	eef0 7a40 	vmov.f32	s15, s0
 8010992:	dc06      	bgt.n	80109a2 <__ieee754_atan2f+0x22>
 8010994:	ee10 0a10 	vmov	r0, s0
 8010998:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801099c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80109a0:	dd04      	ble.n	80109ac <__ieee754_atan2f+0x2c>
 80109a2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80109a6:	eeb0 0a67 	vmov.f32	s0, s15
 80109aa:	bd10      	pop	{r4, pc}
 80109ac:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80109b0:	d103      	bne.n	80109ba <__ieee754_atan2f+0x3a>
 80109b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109b6:	f000 b897 	b.w	8010ae8 <atanf>
 80109ba:	1794      	asrs	r4, r2, #30
 80109bc:	f004 0402 	and.w	r4, r4, #2
 80109c0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80109c4:	b943      	cbnz	r3, 80109d8 <__ieee754_atan2f+0x58>
 80109c6:	2c02      	cmp	r4, #2
 80109c8:	d06e      	beq.n	8010aa8 <__ieee754_atan2f+0x128>
 80109ca:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8010ab0 <__ieee754_atan2f+0x130>
 80109ce:	2c03      	cmp	r4, #3
 80109d0:	bf08      	it	eq
 80109d2:	eef0 7a47 	vmoveq.f32	s15, s14
 80109d6:	e7e6      	b.n	80109a6 <__ieee754_atan2f+0x26>
 80109d8:	b941      	cbnz	r1, 80109ec <__ieee754_atan2f+0x6c>
 80109da:	eddf 7a36 	vldr	s15, [pc, #216]	; 8010ab4 <__ieee754_atan2f+0x134>
 80109de:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010ab8 <__ieee754_atan2f+0x138>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	bfb8      	it	lt
 80109e6:	eef0 7a47 	vmovlt.f32	s15, s14
 80109ea:	e7dc      	b.n	80109a6 <__ieee754_atan2f+0x26>
 80109ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80109f0:	d122      	bne.n	8010a38 <__ieee754_atan2f+0xb8>
 80109f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80109f6:	d112      	bne.n	8010a1e <__ieee754_atan2f+0x9e>
 80109f8:	2c02      	cmp	r4, #2
 80109fa:	d00a      	beq.n	8010a12 <__ieee754_atan2f+0x92>
 80109fc:	2c03      	cmp	r4, #3
 80109fe:	d00b      	beq.n	8010a18 <__ieee754_atan2f+0x98>
 8010a00:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8010abc <__ieee754_atan2f+0x13c>
 8010a04:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8010ac0 <__ieee754_atan2f+0x140>
 8010a08:	2c01      	cmp	r4, #1
 8010a0a:	bf18      	it	ne
 8010a0c:	eef0 7a47 	vmovne.f32	s15, s14
 8010a10:	e7c9      	b.n	80109a6 <__ieee754_atan2f+0x26>
 8010a12:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8010ac4 <__ieee754_atan2f+0x144>
 8010a16:	e7c6      	b.n	80109a6 <__ieee754_atan2f+0x26>
 8010a18:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010ac8 <__ieee754_atan2f+0x148>
 8010a1c:	e7c3      	b.n	80109a6 <__ieee754_atan2f+0x26>
 8010a1e:	2c02      	cmp	r4, #2
 8010a20:	d042      	beq.n	8010aa8 <__ieee754_atan2f+0x128>
 8010a22:	2c03      	cmp	r4, #3
 8010a24:	d005      	beq.n	8010a32 <__ieee754_atan2f+0xb2>
 8010a26:	2c01      	cmp	r4, #1
 8010a28:	eddf 7a28 	vldr	s15, [pc, #160]	; 8010acc <__ieee754_atan2f+0x14c>
 8010a2c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8010ad0 <__ieee754_atan2f+0x150>
 8010a30:	e7eb      	b.n	8010a0a <__ieee754_atan2f+0x8a>
 8010a32:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010ab0 <__ieee754_atan2f+0x130>
 8010a36:	e7b6      	b.n	80109a6 <__ieee754_atan2f+0x26>
 8010a38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010a3c:	d0cd      	beq.n	80109da <__ieee754_atan2f+0x5a>
 8010a3e:	1a5b      	subs	r3, r3, r1
 8010a40:	15db      	asrs	r3, r3, #23
 8010a42:	2b3c      	cmp	r3, #60	; 0x3c
 8010a44:	dc1a      	bgt.n	8010a7c <__ieee754_atan2f+0xfc>
 8010a46:	2a00      	cmp	r2, #0
 8010a48:	da01      	bge.n	8010a4e <__ieee754_atan2f+0xce>
 8010a4a:	333c      	adds	r3, #60	; 0x3c
 8010a4c:	db19      	blt.n	8010a82 <__ieee754_atan2f+0x102>
 8010a4e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010a52:	f000 f91d 	bl	8010c90 <fabsf>
 8010a56:	f000 f847 	bl	8010ae8 <atanf>
 8010a5a:	eef0 7a40 	vmov.f32	s15, s0
 8010a5e:	2c01      	cmp	r4, #1
 8010a60:	d012      	beq.n	8010a88 <__ieee754_atan2f+0x108>
 8010a62:	2c02      	cmp	r4, #2
 8010a64:	d017      	beq.n	8010a96 <__ieee754_atan2f+0x116>
 8010a66:	2c00      	cmp	r4, #0
 8010a68:	d09d      	beq.n	80109a6 <__ieee754_atan2f+0x26>
 8010a6a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8010ad4 <__ieee754_atan2f+0x154>
 8010a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a72:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8010ad8 <__ieee754_atan2f+0x158>
 8010a76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a7a:	e794      	b.n	80109a6 <__ieee754_atan2f+0x26>
 8010a7c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8010ab4 <__ieee754_atan2f+0x134>
 8010a80:	e7ed      	b.n	8010a5e <__ieee754_atan2f+0xde>
 8010a82:	eddf 7a13 	vldr	s15, [pc, #76]	; 8010ad0 <__ieee754_atan2f+0x150>
 8010a86:	e7ea      	b.n	8010a5e <__ieee754_atan2f+0xde>
 8010a88:	ee17 3a90 	vmov	r3, s15
 8010a8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010a90:	ee07 3a90 	vmov	s15, r3
 8010a94:	e787      	b.n	80109a6 <__ieee754_atan2f+0x26>
 8010a96:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8010ad4 <__ieee754_atan2f+0x154>
 8010a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a9e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8010ad8 <__ieee754_atan2f+0x158>
 8010aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010aa6:	e77e      	b.n	80109a6 <__ieee754_atan2f+0x26>
 8010aa8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010ad8 <__ieee754_atan2f+0x158>
 8010aac:	e77b      	b.n	80109a6 <__ieee754_atan2f+0x26>
 8010aae:	bf00      	nop
 8010ab0:	c0490fdb 	.word	0xc0490fdb
 8010ab4:	3fc90fdb 	.word	0x3fc90fdb
 8010ab8:	bfc90fdb 	.word	0xbfc90fdb
 8010abc:	bf490fdb 	.word	0xbf490fdb
 8010ac0:	3f490fdb 	.word	0x3f490fdb
 8010ac4:	4016cbe4 	.word	0x4016cbe4
 8010ac8:	c016cbe4 	.word	0xc016cbe4
 8010acc:	80000000 	.word	0x80000000
 8010ad0:	00000000 	.word	0x00000000
 8010ad4:	33bbbd2e 	.word	0x33bbbd2e
 8010ad8:	40490fdb 	.word	0x40490fdb

08010adc <__ieee754_sqrtf>:
 8010adc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010ae0:	4770      	bx	lr

08010ae2 <matherr>:
 8010ae2:	2000      	movs	r0, #0
 8010ae4:	4770      	bx	lr
	...

08010ae8 <atanf>:
 8010ae8:	b538      	push	{r3, r4, r5, lr}
 8010aea:	ee10 5a10 	vmov	r5, s0
 8010aee:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010af2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8010af6:	eef0 7a40 	vmov.f32	s15, s0
 8010afa:	db10      	blt.n	8010b1e <atanf+0x36>
 8010afc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010b00:	dd04      	ble.n	8010b0c <atanf+0x24>
 8010b02:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010b06:	eeb0 0a67 	vmov.f32	s0, s15
 8010b0a:	bd38      	pop	{r3, r4, r5, pc}
 8010b0c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8010c44 <atanf+0x15c>
 8010b10:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010c48 <atanf+0x160>
 8010b14:	2d00      	cmp	r5, #0
 8010b16:	bfd8      	it	le
 8010b18:	eef0 7a47 	vmovle.f32	s15, s14
 8010b1c:	e7f3      	b.n	8010b06 <atanf+0x1e>
 8010b1e:	4b4b      	ldr	r3, [pc, #300]	; (8010c4c <atanf+0x164>)
 8010b20:	429c      	cmp	r4, r3
 8010b22:	dc10      	bgt.n	8010b46 <atanf+0x5e>
 8010b24:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8010b28:	da0a      	bge.n	8010b40 <atanf+0x58>
 8010b2a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010c50 <atanf+0x168>
 8010b2e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b36:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3e:	dce2      	bgt.n	8010b06 <atanf+0x1e>
 8010b40:	f04f 33ff 	mov.w	r3, #4294967295
 8010b44:	e013      	b.n	8010b6e <atanf+0x86>
 8010b46:	f000 f8a3 	bl	8010c90 <fabsf>
 8010b4a:	4b42      	ldr	r3, [pc, #264]	; (8010c54 <atanf+0x16c>)
 8010b4c:	429c      	cmp	r4, r3
 8010b4e:	dc4f      	bgt.n	8010bf0 <atanf+0x108>
 8010b50:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010b54:	429c      	cmp	r4, r3
 8010b56:	dc41      	bgt.n	8010bdc <atanf+0xf4>
 8010b58:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010b5c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010b60:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010b64:	2300      	movs	r3, #0
 8010b66:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010b6e:	1c5a      	adds	r2, r3, #1
 8010b70:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010b74:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010c58 <atanf+0x170>
 8010b78:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010c5c <atanf+0x174>
 8010b7c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8010c60 <atanf+0x178>
 8010b80:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010b84:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010b88:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010c64 <atanf+0x17c>
 8010b8c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010b90:	eddf 5a35 	vldr	s11, [pc, #212]	; 8010c68 <atanf+0x180>
 8010b94:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010b98:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010c6c <atanf+0x184>
 8010b9c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010ba0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010c70 <atanf+0x188>
 8010ba4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010ba8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010c74 <atanf+0x18c>
 8010bac:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010bb0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010c78 <atanf+0x190>
 8010bb4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010bb8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010c7c <atanf+0x194>
 8010bbc:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010bc0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010c80 <atanf+0x198>
 8010bc4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010bc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010bcc:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010bd4:	d121      	bne.n	8010c1a <atanf+0x132>
 8010bd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010bda:	e794      	b.n	8010b06 <atanf+0x1e>
 8010bdc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010be0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010be4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010be8:	2301      	movs	r3, #1
 8010bea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010bee:	e7be      	b.n	8010b6e <atanf+0x86>
 8010bf0:	4b24      	ldr	r3, [pc, #144]	; (8010c84 <atanf+0x19c>)
 8010bf2:	429c      	cmp	r4, r3
 8010bf4:	dc0b      	bgt.n	8010c0e <atanf+0x126>
 8010bf6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010bfe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010c02:	2302      	movs	r3, #2
 8010c04:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c0c:	e7af      	b.n	8010b6e <atanf+0x86>
 8010c0e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010c12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c16:	2303      	movs	r3, #3
 8010c18:	e7a9      	b.n	8010b6e <atanf+0x86>
 8010c1a:	4a1b      	ldr	r2, [pc, #108]	; (8010c88 <atanf+0x1a0>)
 8010c1c:	491b      	ldr	r1, [pc, #108]	; (8010c8c <atanf+0x1a4>)
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	441a      	add	r2, r3
 8010c22:	440b      	add	r3, r1
 8010c24:	edd3 6a00 	vldr	s13, [r3]
 8010c28:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010c2c:	2d00      	cmp	r5, #0
 8010c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c32:	ed92 7a00 	vldr	s14, [r2]
 8010c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c3a:	bfb8      	it	lt
 8010c3c:	eef1 7a67 	vneglt.f32	s15, s15
 8010c40:	e761      	b.n	8010b06 <atanf+0x1e>
 8010c42:	bf00      	nop
 8010c44:	bfc90fdb 	.word	0xbfc90fdb
 8010c48:	3fc90fdb 	.word	0x3fc90fdb
 8010c4c:	3edfffff 	.word	0x3edfffff
 8010c50:	7149f2ca 	.word	0x7149f2ca
 8010c54:	3f97ffff 	.word	0x3f97ffff
 8010c58:	3c8569d7 	.word	0x3c8569d7
 8010c5c:	3d4bda59 	.word	0x3d4bda59
 8010c60:	bd6ef16b 	.word	0xbd6ef16b
 8010c64:	3d886b35 	.word	0x3d886b35
 8010c68:	3dba2e6e 	.word	0x3dba2e6e
 8010c6c:	3e124925 	.word	0x3e124925
 8010c70:	3eaaaaab 	.word	0x3eaaaaab
 8010c74:	bd15a221 	.word	0xbd15a221
 8010c78:	bd9d8795 	.word	0xbd9d8795
 8010c7c:	bde38e38 	.word	0xbde38e38
 8010c80:	be4ccccd 	.word	0xbe4ccccd
 8010c84:	401bffff 	.word	0x401bffff
 8010c88:	080118e8 	.word	0x080118e8
 8010c8c:	080118f8 	.word	0x080118f8

08010c90 <fabsf>:
 8010c90:	ee10 3a10 	vmov	r3, s0
 8010c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c98:	ee00 3a10 	vmov	s0, r3
 8010c9c:	4770      	bx	lr
	...

08010ca0 <_init>:
 8010ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca2:	bf00      	nop
 8010ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ca6:	bc08      	pop	{r3}
 8010ca8:	469e      	mov	lr, r3
 8010caa:	4770      	bx	lr

08010cac <_fini>:
 8010cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cae:	bf00      	nop
 8010cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cb2:	bc08      	pop	{r3}
 8010cb4:	469e      	mov	lr, r3
 8010cb6:	4770      	bx	lr
