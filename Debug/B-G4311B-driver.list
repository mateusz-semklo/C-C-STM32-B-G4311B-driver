
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c8  080065c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065d0  080065d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065d4  080065d4  000165d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080065d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  080065e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080065e4  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011567  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a0  00000000  00000000  000315a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00033848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  00034890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df10  00000000  00000000  000357b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc46  00000000  00000000  000536c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ee7  00000000  00000000  00061306  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001241ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  00124268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006588 	.word	0x08006588

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006588 	.word	0x08006588

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0xac>)
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_GPIO_Init+0xb0>)
 80005a4:	f001 f89a 	bl	80016dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f000 fffa 	bl	80015a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f001 f811 	bl	80015da <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10110000 	.word	0x10110000
 80005c8:	48000800 	.word	0x48000800

080005cc <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005dc:	d116      	bne.n	800060c <HAL_GPIO_EXTI_Callback+0x40>
	{

				 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 80005de:	2100      	movs	r1, #0
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <HAL_GPIO_EXTI_Callback+0x48>)
 80005e2:	f003 ff0b 	bl	80043fc <HAL_TIMEx_PWMN_Start_IT>
				 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 80005e6:	2104      	movs	r1, #4
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <HAL_GPIO_EXTI_Callback+0x48>)
 80005ea:	f003 ff07 	bl	80043fc <HAL_TIMEx_PWMN_Start_IT>
				 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 80005ee:	2108      	movs	r1, #8
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <HAL_GPIO_EXTI_Callback+0x48>)
 80005f2:	f003 ff03 	bl	80043fc <HAL_TIMEx_PWMN_Start_IT>

				 HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80005f6:	2100      	movs	r1, #0
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005fa:	f002 fb03 	bl	8002c04 <HAL_TIM_IC_Start>
				 HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80005fe:	2104      	movs	r1, #4
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000602:	f002 faff 	bl	8002c04 <HAL_TIM_IC_Start>

				 start_stop=1;
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_GPIO_EXTI_Callback+0x50>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]

	}
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000080 	.word	0x20000080
 8000618:	200000cc 	.word	0x200000cc
 800061c:	20000031 	.word	0x20000031

08000620 <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	{



	}
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		//  TIM1->CCR2=TIM2->CCR2;
		//  TIM1->CCR3=TIM2->CCR2;
		}
	}

}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fe5b 	bl	800130e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f9ae 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f7ff ff5c 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000660:	f000 faa8 	bl	8000bb4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000664:	f000 fc24 	bl	8000eb0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000668:	f000 fd90 	bl	800118c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800066c:	f000 fb86 	bl	8000d7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //////// konfiguracja Timer 2  ////////////
    TIM2->ARR=0xFFFE;
 8000670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000674:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->PSC=100;
 800067a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800067e:	2264      	movs	r2, #100	; 0x64
 8000680:	629a      	str	r2, [r3, #40]	; 0x28


    //////// konfiguracja Timer 1  ////////////
    TIM1->ARR=0;
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <main+0xa0>)
 8000684:	2200      	movs	r2, #0
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC=100;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <main+0xa0>)
 800068a:	2264      	movs	r2, #100	; 0x64
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->CCR1=0;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <main+0xa0>)
 8000690:	2200      	movs	r2, #0
 8000692:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2=0;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <main+0xa0>)
 8000696:	2200      	movs	r2, #0
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3=0;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <main+0xa0>)
 800069c:	2200      	movs	r2, #0
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80006a0:	2140      	movs	r1, #64	; 0x40
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <main+0xa4>)
 80006a4:	f001 f99c 	bl	80019e0 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d003      	beq.n	80006b6 <main+0x66>
	 		  a=1;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <main+0xa8>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	e002      	b.n	80006bc <main+0x6c>
	 	  else
	 		  a=0;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <main+0xa8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]

	 	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <main+0xa4>)
 80006c0:	f001 f98e 	bl	80019e0 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <main+0x82>
	 	  		  b=1;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <main+0xac>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e002      	b.n	80006d8 <main+0x88>
	 	  else
	 		  b=0;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <main+0xac>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]

	 	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80006d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <main+0xa4>)
 80006de:	f001 f97f 	bl	80019e0 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00d      	beq.n	8000704 <main+0xb4>
	 	  		  c=1;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <main+0xb0>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	e00c      	b.n	800070a <main+0xba>
 80006f0:	40012c00 	.word	0x40012c00
 80006f4:	48000400 	.word	0x48000400
 80006f8:	20000030 	.word	0x20000030
 80006fc:	20000028 	.word	0x20000028
 8000700:	2000002e 	.word	0x2000002e
	 	  else
	 		  c=0;
 8000704:	4b98      	ldr	r3, [pc, #608]	; (8000968 <main+0x318>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]

	 	  	  if(start_stop==1)
 800070a:	4b98      	ldr	r3, [pc, #608]	; (800096c <main+0x31c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b01      	cmp	r3, #1
 8000712:	f040 8141 	bne.w	8000998 <main+0x348>
	 	  	  {
	 											if( a==1 && b==0 && c==0)
 8000716:	4b96      	ldr	r3, [pc, #600]	; (8000970 <main+0x320>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d12b      	bne.n	8000776 <main+0x126>
 800071e:	4b95      	ldr	r3, [pc, #596]	; (8000974 <main+0x324>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d127      	bne.n	8000776 <main+0x126>
 8000726:	4b90      	ldr	r3, [pc, #576]	; (8000968 <main+0x318>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d123      	bne.n	8000776 <main+0x126>
	 											{
	 											SET_CC1_T1;
 800072e:	4b92      	ldr	r3, [pc, #584]	; (8000978 <main+0x328>)
 8000730:	6a1b      	ldr	r3, [r3, #32]
 8000732:	4a91      	ldr	r2, [pc, #580]	; (8000978 <main+0x328>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6213      	str	r3, [r2, #32]
	 											RESET_CC1N_T2;
 800073a:	4b8f      	ldr	r3, [pc, #572]	; (8000978 <main+0x328>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	4a8e      	ldr	r2, [pc, #568]	; (8000978 <main+0x328>)
 8000740:	f023 0304 	bic.w	r3, r3, #4
 8000744:	6213      	str	r3, [r2, #32]
	 											RESET_CC2_T3;
 8000746:	4b8c      	ldr	r3, [pc, #560]	; (8000978 <main+0x328>)
 8000748:	6a1b      	ldr	r3, [r3, #32]
 800074a:	4a8b      	ldr	r2, [pc, #556]	; (8000978 <main+0x328>)
 800074c:	f023 0310 	bic.w	r3, r3, #16
 8000750:	6213      	str	r3, [r2, #32]
	 											SET_CC2N_T4;
 8000752:	4b89      	ldr	r3, [pc, #548]	; (8000978 <main+0x328>)
 8000754:	6a1b      	ldr	r3, [r3, #32]
 8000756:	4a88      	ldr	r2, [pc, #544]	; (8000978 <main+0x328>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075c:	6213      	str	r3, [r2, #32]
	 											RESET_CC3_T5;
 800075e:	4b86      	ldr	r3, [pc, #536]	; (8000978 <main+0x328>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	4a85      	ldr	r2, [pc, #532]	; (8000978 <main+0x328>)
 8000764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000768:	6213      	str	r3, [r2, #32]
	 											RESET_CC3N_T6;
 800076a:	4b83      	ldr	r3, [pc, #524]	; (8000978 <main+0x328>)
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	4a82      	ldr	r2, [pc, #520]	; (8000978 <main+0x328>)
 8000770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000774:	6213      	str	r3, [r2, #32]
	 											}

	 											if( a==1 && b==1 && c==0)
 8000776:	4b7e      	ldr	r3, [pc, #504]	; (8000970 <main+0x320>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d12b      	bne.n	80007d6 <main+0x186>
 800077e:	4b7d      	ldr	r3, [pc, #500]	; (8000974 <main+0x324>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d127      	bne.n	80007d6 <main+0x186>
 8000786:	4b78      	ldr	r3, [pc, #480]	; (8000968 <main+0x318>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d123      	bne.n	80007d6 <main+0x186>
	 											{
	 											SET_CC1_T1;
 800078e:	4b7a      	ldr	r3, [pc, #488]	; (8000978 <main+0x328>)
 8000790:	6a1b      	ldr	r3, [r3, #32]
 8000792:	4a79      	ldr	r2, [pc, #484]	; (8000978 <main+0x328>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6213      	str	r3, [r2, #32]
	 											RESET_CC1N_T2;
 800079a:	4b77      	ldr	r3, [pc, #476]	; (8000978 <main+0x328>)
 800079c:	6a1b      	ldr	r3, [r3, #32]
 800079e:	4a76      	ldr	r2, [pc, #472]	; (8000978 <main+0x328>)
 80007a0:	f023 0304 	bic.w	r3, r3, #4
 80007a4:	6213      	str	r3, [r2, #32]
	 											RESET_CC2_T3;
 80007a6:	4b74      	ldr	r3, [pc, #464]	; (8000978 <main+0x328>)
 80007a8:	6a1b      	ldr	r3, [r3, #32]
 80007aa:	4a73      	ldr	r2, [pc, #460]	; (8000978 <main+0x328>)
 80007ac:	f023 0310 	bic.w	r3, r3, #16
 80007b0:	6213      	str	r3, [r2, #32]
	 											RESET_CC2N_T4;
 80007b2:	4b71      	ldr	r3, [pc, #452]	; (8000978 <main+0x328>)
 80007b4:	6a1b      	ldr	r3, [r3, #32]
 80007b6:	4a70      	ldr	r2, [pc, #448]	; (8000978 <main+0x328>)
 80007b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007bc:	6213      	str	r3, [r2, #32]
	 											RESET_CC3_T5;
 80007be:	4b6e      	ldr	r3, [pc, #440]	; (8000978 <main+0x328>)
 80007c0:	6a1b      	ldr	r3, [r3, #32]
 80007c2:	4a6d      	ldr	r2, [pc, #436]	; (8000978 <main+0x328>)
 80007c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007c8:	6213      	str	r3, [r2, #32]
	 											SET_CC3N_T6;
 80007ca:	4b6b      	ldr	r3, [pc, #428]	; (8000978 <main+0x328>)
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	4a6a      	ldr	r2, [pc, #424]	; (8000978 <main+0x328>)
 80007d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007d4:	6213      	str	r3, [r2, #32]
	 											}


	 											if( a==0 && b==1 && c==0)
 80007d6:	4b66      	ldr	r3, [pc, #408]	; (8000970 <main+0x320>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d12b      	bne.n	8000836 <main+0x1e6>
 80007de:	4b65      	ldr	r3, [pc, #404]	; (8000974 <main+0x324>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d127      	bne.n	8000836 <main+0x1e6>
 80007e6:	4b60      	ldr	r3, [pc, #384]	; (8000968 <main+0x318>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d123      	bne.n	8000836 <main+0x1e6>
	 											{
	 											RESET_CC1_T1;
 80007ee:	4b62      	ldr	r3, [pc, #392]	; (8000978 <main+0x328>)
 80007f0:	6a1b      	ldr	r3, [r3, #32]
 80007f2:	4a61      	ldr	r2, [pc, #388]	; (8000978 <main+0x328>)
 80007f4:	f023 0301 	bic.w	r3, r3, #1
 80007f8:	6213      	str	r3, [r2, #32]
	 											RESET_CC1N_T2;
 80007fa:	4b5f      	ldr	r3, [pc, #380]	; (8000978 <main+0x328>)
 80007fc:	6a1b      	ldr	r3, [r3, #32]
 80007fe:	4a5e      	ldr	r2, [pc, #376]	; (8000978 <main+0x328>)
 8000800:	f023 0304 	bic.w	r3, r3, #4
 8000804:	6213      	str	r3, [r2, #32]
	 											SET_CC2_T3;
 8000806:	4b5c      	ldr	r3, [pc, #368]	; (8000978 <main+0x328>)
 8000808:	6a1b      	ldr	r3, [r3, #32]
 800080a:	4a5b      	ldr	r2, [pc, #364]	; (8000978 <main+0x328>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6213      	str	r3, [r2, #32]
	 											RESET_CC2N_T4;
 8000812:	4b59      	ldr	r3, [pc, #356]	; (8000978 <main+0x328>)
 8000814:	6a1b      	ldr	r3, [r3, #32]
 8000816:	4a58      	ldr	r2, [pc, #352]	; (8000978 <main+0x328>)
 8000818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800081c:	6213      	str	r3, [r2, #32]
	 											RESET_CC3_T5;
 800081e:	4b56      	ldr	r3, [pc, #344]	; (8000978 <main+0x328>)
 8000820:	6a1b      	ldr	r3, [r3, #32]
 8000822:	4a55      	ldr	r2, [pc, #340]	; (8000978 <main+0x328>)
 8000824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000828:	6213      	str	r3, [r2, #32]
	 											SET_CC3N_T6;
 800082a:	4b53      	ldr	r3, [pc, #332]	; (8000978 <main+0x328>)
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	4a52      	ldr	r2, [pc, #328]	; (8000978 <main+0x328>)
 8000830:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000834:	6213      	str	r3, [r2, #32]
	 											}


	 											if( a==0 && b==1 && c==1)
 8000836:	4b4e      	ldr	r3, [pc, #312]	; (8000970 <main+0x320>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d12b      	bne.n	8000896 <main+0x246>
 800083e:	4b4d      	ldr	r3, [pc, #308]	; (8000974 <main+0x324>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d127      	bne.n	8000896 <main+0x246>
 8000846:	4b48      	ldr	r3, [pc, #288]	; (8000968 <main+0x318>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d123      	bne.n	8000896 <main+0x246>
	 											{
	 					    					RESET_CC1_T1;
 800084e:	4b4a      	ldr	r3, [pc, #296]	; (8000978 <main+0x328>)
 8000850:	6a1b      	ldr	r3, [r3, #32]
 8000852:	4a49      	ldr	r2, [pc, #292]	; (8000978 <main+0x328>)
 8000854:	f023 0301 	bic.w	r3, r3, #1
 8000858:	6213      	str	r3, [r2, #32]
	 					    					SET_CC1N_T2;
 800085a:	4b47      	ldr	r3, [pc, #284]	; (8000978 <main+0x328>)
 800085c:	6a1b      	ldr	r3, [r3, #32]
 800085e:	4a46      	ldr	r2, [pc, #280]	; (8000978 <main+0x328>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6213      	str	r3, [r2, #32]
	 					    					SET_CC2_T3;
 8000866:	4b44      	ldr	r3, [pc, #272]	; (8000978 <main+0x328>)
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	4a43      	ldr	r2, [pc, #268]	; (8000978 <main+0x328>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	6213      	str	r3, [r2, #32]
	 					    					RESET_CC2N_T4;
 8000872:	4b41      	ldr	r3, [pc, #260]	; (8000978 <main+0x328>)
 8000874:	6a1b      	ldr	r3, [r3, #32]
 8000876:	4a40      	ldr	r2, [pc, #256]	; (8000978 <main+0x328>)
 8000878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800087c:	6213      	str	r3, [r2, #32]
	 					    					RESET_CC3_T5;
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <main+0x328>)
 8000880:	6a1b      	ldr	r3, [r3, #32]
 8000882:	4a3d      	ldr	r2, [pc, #244]	; (8000978 <main+0x328>)
 8000884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000888:	6213      	str	r3, [r2, #32]
	 					    					RESET_CC3N_T6;
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <main+0x328>)
 800088c:	6a1b      	ldr	r3, [r3, #32]
 800088e:	4a3a      	ldr	r2, [pc, #232]	; (8000978 <main+0x328>)
 8000890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000894:	6213      	str	r3, [r2, #32]
	 											}


	 					    					if( a==0 && b==0 && c==1)
 8000896:	4b36      	ldr	r3, [pc, #216]	; (8000970 <main+0x320>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d12b      	bne.n	80008f6 <main+0x2a6>
 800089e:	4b35      	ldr	r3, [pc, #212]	; (8000974 <main+0x324>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d127      	bne.n	80008f6 <main+0x2a6>
 80008a6:	4b30      	ldr	r3, [pc, #192]	; (8000968 <main+0x318>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d123      	bne.n	80008f6 <main+0x2a6>
	 					    					{
	 					    					RESET_CC1_T1;
 80008ae:	4b32      	ldr	r3, [pc, #200]	; (8000978 <main+0x328>)
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	4a31      	ldr	r2, [pc, #196]	; (8000978 <main+0x328>)
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	6213      	str	r3, [r2, #32]
	 					    					SET_CC1N_T2;
 80008ba:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <main+0x328>)
 80008bc:	6a1b      	ldr	r3, [r3, #32]
 80008be:	4a2e      	ldr	r2, [pc, #184]	; (8000978 <main+0x328>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6213      	str	r3, [r2, #32]
	 					    					RESET_CC2_T3;
 80008c6:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <main+0x328>)
 80008c8:	6a1b      	ldr	r3, [r3, #32]
 80008ca:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <main+0x328>)
 80008cc:	f023 0310 	bic.w	r3, r3, #16
 80008d0:	6213      	str	r3, [r2, #32]
	 					    					RESET_CC2N_T4;
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <main+0x328>)
 80008d4:	6a1b      	ldr	r3, [r3, #32]
 80008d6:	4a28      	ldr	r2, [pc, #160]	; (8000978 <main+0x328>)
 80008d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008dc:	6213      	str	r3, [r2, #32]
	 					    					SET_CC3_T5;
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <main+0x328>)
 80008e0:	6a1b      	ldr	r3, [r3, #32]
 80008e2:	4a25      	ldr	r2, [pc, #148]	; (8000978 <main+0x328>)
 80008e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e8:	6213      	str	r3, [r2, #32]
	 					    					RESET_CC3N_T6;
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <main+0x328>)
 80008ec:	6a1b      	ldr	r3, [r3, #32]
 80008ee:	4a22      	ldr	r2, [pc, #136]	; (8000978 <main+0x328>)
 80008f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008f4:	6213      	str	r3, [r2, #32]
	 					    					}


	 					    					if( a==1 && b==0 && c==1)
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <main+0x320>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d12b      	bne.n	8000956 <main+0x306>
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <main+0x324>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d127      	bne.n	8000956 <main+0x306>
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <main+0x318>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d123      	bne.n	8000956 <main+0x306>
	 					    					{
	 					    					RESET_CC1_T1;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <main+0x328>)
 8000910:	6a1b      	ldr	r3, [r3, #32]
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <main+0x328>)
 8000914:	f023 0301 	bic.w	r3, r3, #1
 8000918:	6213      	str	r3, [r2, #32]
	 					    					RESET_CC1N_T2;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <main+0x328>)
 800091c:	6a1b      	ldr	r3, [r3, #32]
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <main+0x328>)
 8000920:	f023 0304 	bic.w	r3, r3, #4
 8000924:	6213      	str	r3, [r2, #32]
	 					    					RESET_CC2_T3;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <main+0x328>)
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <main+0x328>)
 800092c:	f023 0310 	bic.w	r3, r3, #16
 8000930:	6213      	str	r3, [r2, #32]
	 					    					SET_CC2N_T4;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0x328>)
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <main+0x328>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	6213      	str	r3, [r2, #32]
	 					    					SET_CC3_T5;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <main+0x328>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <main+0x328>)
 8000944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000948:	6213      	str	r3, [r2, #32]
	 					    					RESET_CC3N_T6;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <main+0x328>)
 800094c:	6a1b      	ldr	r3, [r3, #32]
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <main+0x328>)
 8000950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000954:	6213      	str	r3, [r2, #32]
	 					    					}

	 					    					TIM1->ARR=TIM2->CCR1;
 8000956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800095a:	4a07      	ldr	r2, [pc, #28]	; (8000978 <main+0x328>)
 800095c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095e:	62d3      	str	r3, [r2, #44]	; 0x2c
	 					    				    TIM1->CCR1=TIM2->CCR2;
 8000960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000964:	e00a      	b.n	800097c <main+0x32c>
 8000966:	bf00      	nop
 8000968:	2000002e 	.word	0x2000002e
 800096c:	20000031 	.word	0x20000031
 8000970:	20000030 	.word	0x20000030
 8000974:	20000028 	.word	0x20000028
 8000978:	40012c00 	.word	0x40012c00
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <main+0x364>)
 800097e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000980:	6353      	str	r3, [r2, #52]	; 0x34
	 					    					TIM1->CCR2=TIM2->CCR2;
 8000982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <main+0x364>)
 8000988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098a:	6393      	str	r3, [r2, #56]	; 0x38
	 					    					TIM1->CCR3=TIM2->CCR2;
 800098c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000990:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <main+0x364>)
 8000992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000994:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000996:	e683      	b.n	80006a0 <main+0x50>
	 	  	  	  }
	 	  	  	  else
	 	  	  	  {
					TIM1->ARR=0;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <main+0x364>)
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
					TIM1->CCR1=0;
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <main+0x364>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2=0;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <main+0x364>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	639a      	str	r2, [r3, #56]	; 0x38
					TIM1->CCR3=0;
 80009aa:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <main+0x364>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	63da      	str	r2, [r3, #60]	; 0x3c
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80009b0:	e676      	b.n	80006a0 <main+0x50>
 80009b2:	bf00      	nop
 80009b4:	40012c00 	.word	0x40012c00

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0a4      	sub	sp, #144	; 0x90
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009c2:	2238      	movs	r2, #56	; 0x38
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 fdd6 	bl	8006578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2244      	movs	r2, #68	; 0x44
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fdc8 	bl	8006578 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 f829 	bl	8001a40 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ee:	2301      	movs	r3, #1
 80009f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fc:	2303      	movs	r3, #3
 80009fe:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a04:	2350      	movs	r3, #80	; 0x50
 8000a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f8b1 	bl	8001b88 <HAL_RCC_OscConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a2c:	f000 f826 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a30:	230f      	movs	r3, #15
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a34:	2303      	movs	r3, #3
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a48:	2107      	movs	r1, #7
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fbb4 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a56:	f000 f811 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 fdc3 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000a70:	f000 f804 	bl	8000a7c <Error_Handler>
  }
}
 8000a74:	bf00      	nop
 8000a76:	3790      	adds	r7, #144	; 0x90
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6093      	str	r3, [r2, #8]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40007000 	.word	0x40007000

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6613      	str	r3, [r2, #96]	; 0x60
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000ae2:	f7ff ffd3 	bl	8000a8c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 fc34 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000b56:	f002 f917 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000080 	.word	0x20000080

08000b64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <USART2_IRQHandler+0x10>)
 8000b6a:	f003 fee9 	bl	8004940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000118 	.word	0x20000118

08000b78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000b7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b80:	f000 ff46 	bl	8001a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <SystemInit+0x28>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <SystemInit+0x28>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SystemInit+0x28>)
 8000b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ba2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0a0      	sub	sp, #128	; 0x80
 8000bb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
 8000bf6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2234      	movs	r2, #52	; 0x34
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f005 fcba 	bl	8006578 <memset>

  htim1.Instance = TIM1;
 8000c04:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c06:	4a5c      	ldr	r2, [pc, #368]	; (8000d78 <MX_TIM1_Init+0x1c4>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c0a:	4b5a      	ldr	r3, [pc, #360]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b58      	ldr	r3, [pc, #352]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000c16:	4b57      	ldr	r3, [pc, #348]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c22:	4b54      	ldr	r3, [pc, #336]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b52      	ldr	r3, [pc, #328]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c2e:	4851      	ldr	r0, [pc, #324]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c30:	f001 fece 	bl	80029d0 <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c3a:	f7ff ff1f 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c42:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c48:	4619      	mov	r1, r3
 8000c4a:	484a      	ldr	r0, [pc, #296]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c4c:	f002 fbc0 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c56:	f7ff ff11 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c5a:	4846      	ldr	r0, [pc, #280]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c5c:	f001 ff0f 	bl	8002a7e <HAL_TIM_PWM_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000c66:	f7ff ff09 	bl	8000a7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000c6e:	2330      	movs	r3, #48	; 0x30
 8000c70:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000c72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c76:	4619      	mov	r1, r3
 8000c78:	483e      	ldr	r0, [pc, #248]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c7a:	f002 fc87 	bl	800358c <HAL_TIM_SlaveConfigSynchro>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000c84:	f7ff fefa 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000c88:	2370      	movs	r3, #112	; 0x70
 8000c8a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4836      	ldr	r0, [pc, #216]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000c9c:	f003 fc7c 	bl	8004598 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ca6:	f7ff fee9 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000caa:	2360      	movs	r3, #96	; 0x60
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4829      	ldr	r0, [pc, #164]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000cd0:	f002 fa6e 	bl	80031b0 <HAL_TIM_PWM_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000cda:	f7ff fecf 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4822      	ldr	r0, [pc, #136]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000cec:	f002 fa60 	bl	80031b0 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000cf6:	f7ff fec1 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d02:	2208      	movs	r2, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	481b      	ldr	r0, [pc, #108]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000d08:	f002 fa52 	bl	80031b0 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000d12:	f7ff feb3 	bl	8000a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d1a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8000d26:	2344      	movs	r3, #68	; 0x44
 8000d28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000d58:	f003 fca0 	bl	800469c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8000d62:	f7ff fe8b 	bl	8000a7c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <MX_TIM1_Init+0x1c0>)
 8000d68:	f000 f99a 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 8000d6c:	bf00      	nop
 8000d6e:	3780      	adds	r7, #128	; 0x80
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000080 	.word	0x20000080
 8000d78:	40012c00 	.word	0x40012c00

08000d7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b090      	sub	sp, #64	; 0x40
 8000d80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000db8:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <MX_TIM2_Init+0x130>)
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dc0:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_TIM2_Init+0x130>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <MX_TIM2_Init+0x130>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000dcc:	4b37      	ldr	r3, [pc, #220]	; (8000eac <MX_TIM2_Init+0x130>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b36      	ldr	r3, [pc, #216]	; (8000eac <MX_TIM2_Init+0x130>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b34      	ldr	r3, [pc, #208]	; (8000eac <MX_TIM2_Init+0x130>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dde:	4833      	ldr	r0, [pc, #204]	; (8000eac <MX_TIM2_Init+0x130>)
 8000de0:	f001 fdf6 	bl	80029d0 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dea:	f7ff fe47 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df8:	4619      	mov	r1, r3
 8000dfa:	482c      	ldr	r0, [pc, #176]	; (8000eac <MX_TIM2_Init+0x130>)
 8000dfc:	f002 fae8 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e06:	f7ff fe39 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e0a:	4828      	ldr	r0, [pc, #160]	; (8000eac <MX_TIM2_Init+0x130>)
 8000e0c:	f001 fe98 	bl	8002b40 <HAL_TIM_IC_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e16:	f7ff fe31 	bl	8000a7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e1e:	2350      	movs	r3, #80	; 0x50
 8000e20:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <MX_TIM2_Init+0x130>)
 8000e32:	f002 fbab 	bl	800358c <HAL_TIM_SlaveConfigSynchro>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000e3c:	f7ff fe1e 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4817      	ldr	r0, [pc, #92]	; (8000eac <MX_TIM2_Init+0x130>)
 8000e50:	f003 fba2 	bl	8004598 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000e5a:	f7ff fe0f 	bl	8000a7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e62:	2301      	movs	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	4619      	mov	r1, r3
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_TIM2_Init+0x130>)
 8000e76:	f002 f906 	bl	8003086 <HAL_TIM_IC_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000e80:	f7ff fdfc 	bl	8000a7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e84:	2302      	movs	r3, #2
 8000e86:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2204      	movs	r2, #4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_TIM2_Init+0x130>)
 8000e94:	f002 f8f7 	bl	8003086 <HAL_TIM_IC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000e9e:	f7ff fded 	bl	8000a7c <Error_Handler>
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3740      	adds	r7, #64	; 0x40
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000cc 	.word	0x200000cc

08000eb0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000ede:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <MX_TIM4_Init+0xcc>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f00:	481d      	ldr	r0, [pc, #116]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000f02:	f001 fd65 	bl	80029d0 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000f0c:	f7ff fdb6 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f14:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4816      	ldr	r0, [pc, #88]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000f1e:	f002 fa57 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f28:	f7ff fda8 	bl	8000a7c <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000f44:	f003 f9a1 	bl	800428a <HAL_TIMEx_HallSensor_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000f4e:	f7ff fd95 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000f52:	2350      	movs	r3, #80	; 0x50
 8000f54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_TIM4_Init+0xc8>)
 8000f60:	f003 fb1a 	bl	8004598 <HAL_TIMEx_MasterConfigSynchronization>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000f6a:	f7ff fd87 	bl	8000a7c <Error_Handler>
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3730      	adds	r7, #48	; 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000034 	.word	0x20000034
 8000f7c:	40000800 	.word	0x40000800

08000f80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <HAL_TIM_Base_MspInit+0x110>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d114      	bne.n	8000fcc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa2:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8000fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fac:	6613      	str	r3, [r2, #96]	; 0x60
 8000fae:	4b39      	ldr	r3, [pc, #228]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	201a      	movs	r0, #26
 8000fc0:	f000 faf1 	bl	80015a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000fc4:	201a      	movs	r0, #26
 8000fc6:	f000 fb08 	bl	80015da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fca:	e05d      	b.n	8001088 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd4:	d12a      	bne.n	800102c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a28      	ldr	r2, [pc, #160]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8001006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001010:	2302      	movs	r3, #2
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001018:	2301      	movs	r3, #1
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f000 fb59 	bl	80016dc <HAL_GPIO_Init>
}
 800102a:	e02d      	b.n	8001088 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM4)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_TIM_Base_MspInit+0x118>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d128      	bne.n	8001088 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6593      	str	r3, [r2, #88]	; 0x58
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_TIM_Base_MspInit+0x114>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_W_TIM4_Pin|HALL_U_TIM4_Pin|HALL_V_TIM4_Pin;
 8001066:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001070:	2301      	movs	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	2302      	movs	r3, #2
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001078:	2302      	movs	r3, #2
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <HAL_TIM_Base_MspInit+0x11c>)
 8001084:	f000 fb2a 	bl	80016dc <HAL_GPIO_Init>
}
 8001088:	bf00      	nop
 800108a:	3730      	adds	r7, #48	; 0x30
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40012c00 	.word	0x40012c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40000800 	.word	0x40000800
 800109c:	48000400 	.word	0x48000400

080010a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a2f      	ldr	r2, [pc, #188]	; (800117c <HAL_TIM_MspPostInit+0xdc>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d157      	bne.n	8001172 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_TIM_MspPostInit+0xe0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a2e      	ldr	r2, [pc, #184]	; (8001180 <HAL_TIM_MspPostInit+0xe0>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <HAL_TIM_MspPostInit+0xe0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <HAL_TIM_MspPostInit+0xe0>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a28      	ldr	r2, [pc, #160]	; (8001180 <HAL_TIM_MspPostInit+0xe0>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_TIM_MspPostInit+0xe0>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_TIM_MspPostInit+0xe0>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a22      	ldr	r2, [pc, #136]	; (8001180 <HAL_TIM_MspPostInit+0xe0>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_TIM_MspPostInit+0xe0>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800110a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001114:	2302      	movs	r3, #2
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800111c:	2304      	movs	r3, #4
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4817      	ldr	r0, [pc, #92]	; (8001184 <HAL_TIM_MspPostInit+0xe4>)
 8001128:	f000 fad8 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800112c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001136:	2302      	movs	r3, #2
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800113e:	2304      	movs	r3, #4
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <HAL_TIM_MspPostInit+0xe8>)
 800114a:	f000 fac7 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800114e:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001158:	2302      	movs	r3, #2
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001160:	2306      	movs	r3, #6
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f000 fab5 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40012c00 	.word	0x40012c00
 8001180:	40021000 	.word	0x40021000
 8001184:	48000800 	.word	0x48000800
 8001188:	48000400 	.word	0x48000400

0800118c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <MX_USART2_UART_Init+0x90>)
 8001192:	4a23      	ldr	r2, [pc, #140]	; (8001220 <MX_USART2_UART_Init+0x94>)
 8001194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_USART2_UART_Init+0x90>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d4:	4811      	ldr	r0, [pc, #68]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011d6:	f003 fb62 	bl	800489e <HAL_UART_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011e0:	f7ff fc4c 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e4:	2100      	movs	r1, #0
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011e8:	f005 f8be 	bl	8006368 <HAL_UARTEx_SetTxFifoThreshold>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011f2:	f7ff fc43 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <MX_USART2_UART_Init+0x90>)
 80011fa:	f005 f8f3 	bl	80063e4 <HAL_UARTEx_SetRxFifoThreshold>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001204:	f7ff fc3a 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_USART2_UART_Init+0x90>)
 800120a:	f005 f874 	bl	80062f6 <HAL_UARTEx_DisableFifoMode>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001214:	f7ff fc32 	bl	8000a7c <Error_Handler>
  }

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000118 	.word	0x20000118
 8001220:	40004400 	.word	0x40004400

08001224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <HAL_UART_MspInit+0x8c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12f      	bne.n	80012a6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_UART_MspInit+0x90>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	4a1a      	ldr	r2, [pc, #104]	; (80012b4 <HAL_UART_MspInit+0x90>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6593      	str	r3, [r2, #88]	; 0x58
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_UART_MspInit+0x90>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_UART_MspInit+0x90>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_UART_MspInit+0x90>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_UART_MspInit+0x90>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001276:	2318      	movs	r3, #24
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001286:	2307      	movs	r3, #7
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <HAL_UART_MspInit+0x94>)
 8001292:	f000 fa23 	bl	80016dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2103      	movs	r1, #3
 800129a:	2026      	movs	r0, #38	; 0x26
 800129c:	f000 f983 	bl	80015a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012a0:	2026      	movs	r0, #38	; 0x26
 80012a2:	f000 f99a 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000400 	.word	0x48000400

080012bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490e      	ldr	r1, [pc, #56]	; (80012fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0b      	ldr	r4, [pc, #44]	; (8001308 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e6:	f7ff fc4f 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f005 f921 	bl	8006530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ee:	f7ff f9af 	bl	8000650 <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   r0, =_estack
 80012f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001300:	080065d8 	.word	0x080065d8
  ldr r2, =_sbss
 8001304:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001308:	200001a8 	.word	0x200001a8

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>

0800130e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f939 	bl	8001590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f80e 	bl	8001340 <HAL_InitTick>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e001      	b.n	8001334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001330:	f7ff fbbc 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001334:	79fb      	ldrb	r3, [r7, #7]

}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_InitTick+0x68>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d022      	beq.n	800139a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_InitTick+0x6c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_InitTick+0x68>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001360:	fbb1 f3f3 	udiv	r3, r1, r3
 8001364:	fbb2 f3f3 	udiv	r3, r2, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f944 	bl	80015f6 <HAL_SYSTICK_Config>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10f      	bne.n	8001394 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	d809      	bhi.n	800138e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137a:	2200      	movs	r2, #0
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	f04f 30ff 	mov.w	r0, #4294967295
 8001382:	f000 f910 	bl	80015a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_InitTick+0x70>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e007      	b.n	800139e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e004      	b.n	800139e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_IncTick+0x1c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x20>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_IncTick+0x1c>)
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	200001a4 	.word	0x200001a4
 80013d4:	20000008 	.word	0x20000008

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200001a4 	.word	0x200001a4

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <__NVIC_EnableIRQ+0x38>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800155c:	d301      	bcc.n	8001562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155e:	2301      	movs	r3, #1
 8001560:	e00f      	b.n	8001582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <SysTick_Config+0x40>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156a:	210f      	movs	r1, #15
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f7ff ff8e 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <SysTick_Config+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <SysTick_Config+0x40>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff29 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff40 	bl	8001438 <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff90 	bl	80014e4 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5f 	bl	8001490 <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff33 	bl	8001454 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa4 	bl	800154c <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d00d      	beq.n	8001642 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2204      	movs	r2, #4
 800162a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e047      	b.n	80016d2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 020e 	bic.w	r2, r2, #14
 8001650:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001670:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f003 021f 	and.w	r2, r3, #31
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800168e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00c      	beq.n	80016b2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
    }
  }
  return status;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ea:	e15a      	b.n	80019a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 814c 	beq.w	800199c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d00b      	beq.n	8001724 <HAL_GPIO_Init+0x48>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d007      	beq.n	8001724 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001718:	2b11      	cmp	r3, #17
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b12      	cmp	r3, #18
 8001722:	d130      	bne.n	8001786 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175a:	2201      	movs	r2, #1
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f003 0201 	and.w	r2, r3, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0xea>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	d123      	bne.n	800180e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	6939      	ldr	r1, [r7, #16]
 800180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0203 	and.w	r2, r3, #3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80a6 	beq.w	800199c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	4a5a      	ldr	r2, [pc, #360]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6613      	str	r3, [r2, #96]	; 0x60
 800185c:	4b58      	ldr	r3, [pc, #352]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001868:	4a56      	ldr	r2, [pc, #344]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001892:	d01f      	beq.n	80018d4 <HAL_GPIO_Init+0x1f8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a4c      	ldr	r2, [pc, #304]	; (80019c8 <HAL_GPIO_Init+0x2ec>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d019      	beq.n	80018d0 <HAL_GPIO_Init+0x1f4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4b      	ldr	r2, [pc, #300]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1f0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_GPIO_Init+0x2f4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1ec>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <HAL_GPIO_Init+0x2f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a48      	ldr	r2, [pc, #288]	; (80019d8 <HAL_GPIO_Init+0x2fc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e4>
 80018bc:	2305      	movs	r3, #5
 80018be:	e00a      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c0:	2306      	movs	r3, #6
 80018c2:	e008      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018d4:	2300      	movs	r3, #0
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e6:	4937      	ldr	r1, [pc, #220]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <HAL_GPIO_Init+0x300>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001918:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_GPIO_Init+0x300>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800191e:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001942:	4a26      	ldr	r2, [pc, #152]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_GPIO_Init+0x300>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_GPIO_Init+0x300>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f ae9d 	bne.w	80016ec <HAL_GPIO_Init+0x10>
  }
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000c00 	.word	0x48000c00
 80019d4:	48001000 	.word	0x48001000
 80019d8:	48001400 	.word	0x48001400
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e001      	b.n	8001a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fdcc 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d141      	bne.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d131      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a5c:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a62:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a74:	4a41      	ldr	r2, [pc, #260]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a7c:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2232      	movs	r2, #50	; 0x32
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4a3f      	ldr	r2, [pc, #252]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	0c9b      	lsrs	r3, r3, #18
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a92:	e002      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa6:	d102      	bne.n	8001aae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f2      	bne.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aae:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d158      	bne.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e057      	b.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac6:	4a2d      	ldr	r2, [pc, #180]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001acc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ad0:	e04d      	b.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad8:	d141      	bne.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae6:	d131      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aee:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b00:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2232      	movs	r2, #50	; 0x32
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	0c9b      	lsrs	r3, r3, #18
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1e:	e002      	b.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b32:	d102      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f2      	bne.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d112      	bne.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e011      	b.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b5c:	e007      	b.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	20000000 	.word	0x20000000
 8001b84:	431bde83 	.word	0x431bde83

08001b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e308      	b.n	80021ac <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d075      	beq.n	8001c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba6:	4ba3      	ldr	r3, [pc, #652]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb0:	4ba0      	ldr	r3, [pc, #640]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x3e>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d002      	beq.n	8001bcc <HAL_RCC_OscConfig+0x44>
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d10b      	bne.n	8001be4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	4b99      	ldr	r3, [pc, #612]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d05b      	beq.n	8001c90 <HAL_RCC_OscConfig+0x108>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d157      	bne.n	8001c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e2e3      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d106      	bne.n	8001bfc <HAL_RCC_OscConfig+0x74>
 8001bee:	4b91      	ldr	r3, [pc, #580]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a90      	ldr	r2, [pc, #576]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e01d      	b.n	8001c38 <HAL_RCC_OscConfig+0xb0>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x98>
 8001c06:	4b8b      	ldr	r3, [pc, #556]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a8a      	ldr	r2, [pc, #552]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b88      	ldr	r3, [pc, #544]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a87      	ldr	r2, [pc, #540]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0xb0>
 8001c20:	4b84      	ldr	r3, [pc, #528]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a83      	ldr	r2, [pc, #524]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b81      	ldr	r3, [pc, #516]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a80      	ldr	r2, [pc, #512]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fbca 	bl	80013d8 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fbc6 	bl	80013d8 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e2a8      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5a:	4b76      	ldr	r3, [pc, #472]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0xc0>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fbb6 	bl	80013d8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fbb2 	bl	80013d8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e294      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c82:	4b6c      	ldr	r3, [pc, #432]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0xe8>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d075      	beq.n	8001d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9e:	4b65      	ldr	r3, [pc, #404]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca8:	4b62      	ldr	r3, [pc, #392]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b0c      	cmp	r3, #12
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_OscConfig+0x136>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x13c>
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11f      	bne.n	8001d04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc4:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_OscConfig+0x154>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e267      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b55      	ldr	r3, [pc, #340]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	4952      	ldr	r1, [pc, #328]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cf0:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <HAL_RCC_OscConfig+0x2b0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fb23 	bl	8001340 <HAL_InitTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d043      	beq.n	8001d88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e253      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d023      	beq.n	8001d54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0c:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a48      	ldr	r2, [pc, #288]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff fb5e 	bl	80013d8 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fb5a 	bl	80013d8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e23c      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d32:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	061b      	lsls	r3, r3, #24
 8001d4c:	4939      	ldr	r1, [pc, #228]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
 8001d52:	e01a      	b.n	8001d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d54:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a36      	ldr	r2, [pc, #216]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff fb3a 	bl	80013d8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d68:	f7ff fb36 	bl	80013d8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e218      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1e0>
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d03c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9e:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da4:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff fb13 	bl	80013d8 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db6:	f7ff fb0f 	bl	80013d8 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e1f1      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ef      	beq.n	8001db6 <HAL_RCC_OscConfig+0x22e>
 8001dd6:	e01b      	b.n	8001e10 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff faf6 	bl	80013d8 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff faf2 	bl	80013d8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1d4      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ef      	bne.n	8001df0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80ab 	beq.w	8001f74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2b4>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e005      	b.n	8001e3e <HAL_RCC_OscConfig+0x2b6>
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4baf      	ldr	r3, [pc, #700]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4aae      	ldr	r2, [pc, #696]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4e:	4bac      	ldr	r3, [pc, #688]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5e:	4ba9      	ldr	r3, [pc, #676]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e6a:	4ba6      	ldr	r3, [pc, #664]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4aa5      	ldr	r2, [pc, #660]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7ff faaf 	bl	80013d8 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7ff faab 	bl	80013d8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e18d      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e90:	4b9c      	ldr	r3, [pc, #624]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d108      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x32e>
 8001ea4:	4b96      	ldr	r3, [pc, #600]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eaa:	4a95      	ldr	r2, [pc, #596]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb4:	e024      	b.n	8001f00 <HAL_RCC_OscConfig+0x378>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d110      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x358>
 8001ebe:	4b90      	ldr	r3, [pc, #576]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec4:	4a8e      	ldr	r2, [pc, #568]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ece:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed4:	4a8a      	ldr	r2, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ede:	e00f      	b.n	8001f00 <HAL_RCC_OscConfig+0x378>
 8001ee0:	4b87      	ldr	r3, [pc, #540]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	4a86      	ldr	r2, [pc, #536]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef0:	4b83      	ldr	r3, [pc, #524]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	4a82      	ldr	r2, [pc, #520]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d016      	beq.n	8001f36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff fa66 	bl	80013d8 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7ff fa62 	bl	80013d8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e142      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f26:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ed      	beq.n	8001f10 <HAL_RCC_OscConfig+0x388>
 8001f34:	e015      	b.n	8001f62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7ff fa4f 	bl	80013d8 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff fa4b 	bl	80013d8 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e12b      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f54:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ed      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f62:	7ffb      	ldrb	r3, [r7, #31]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f68:	4b65      	ldr	r3, [pc, #404]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	4a64      	ldr	r2, [pc, #400]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d03c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01c      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f88:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f8e:	4a5c      	ldr	r2, [pc, #368]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff fa1e 	bl	80013d8 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fa0:	f7ff fa1a 	bl	80013d8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0fc      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fb2:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ef      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x418>
 8001fc0:	e01b      	b.n	8001ffa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fc2:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc8:	4a4d      	ldr	r2, [pc, #308]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd2:	f7ff fa01 	bl	80013d8 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fda:	f7ff f9fd 	bl	80013d8 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0df      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fec:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ef      	bne.n	8001fda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80d3 	beq.w	80021aa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002004:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b0c      	cmp	r3, #12
 800200e:	f000 808d 	beq.w	800212c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d15a      	bne.n	80020d0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a38      	ldr	r2, [pc, #224]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff f9d7 	bl	80013d8 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff f9d3 	bl	80013d8 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0b5      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f0      	bne.n	800202e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_OscConfig+0x580>)
 8002052:	4013      	ands	r3, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6a11      	ldr	r1, [r2, #32]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800205c:	3a01      	subs	r2, #1
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800206e:	0852      	lsrs	r2, r2, #1
 8002070:	3a01      	subs	r2, #1
 8002072:	0552      	lsls	r2, r2, #21
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800207a:	0852      	lsrs	r2, r2, #1
 800207c:	3a01      	subs	r2, #1
 800207e:	0652      	lsls	r2, r2, #25
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002086:	06d2      	lsls	r2, r2, #27
 8002088:	430a      	orrs	r2, r1
 800208a:	491d      	ldr	r1, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7ff f996 	bl	80013d8 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff f992 	bl	80013d8 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e074      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x528>
 80020ce:	e06c      	b.n	80021aa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7ff f96e 	bl	80013d8 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fe:	e00e      	b.n	800211e <HAL_RCC_OscConfig+0x596>
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff f964 	bl	80013d8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e046      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_OscConfig+0x62c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x584>
 800212a:	e03e      	b.n	80021aa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e039      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002138:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_RCC_OscConfig+0x62c>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0203 	and.w	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d12c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	3b01      	subs	r3, #1
 8002158:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d123      	bne.n	80021a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d11b      	bne.n	80021a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d113      	bne.n	80021a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d109      	bne.n	80021a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	3b01      	subs	r3, #1
 80021a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e11e      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d0:	4b91      	ldr	r3, [pc, #580]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d910      	bls.n	8002200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b8e      	ldr	r3, [pc, #568]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 020f 	bic.w	r2, r3, #15
 80021e6:	498c      	ldr	r1, [pc, #560]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b8a      	ldr	r3, [pc, #552]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e106      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d073      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d129      	bne.n	8002268 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002214:	4b81      	ldr	r3, [pc, #516]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0f4      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002224:	f000 f99e 	bl	8002564 <RCC_GetSysClockFreqFromPLLSource>
 8002228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4a7c      	ldr	r2, [pc, #496]	; (8002420 <HAL_RCC_ClockConfig+0x268>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d93f      	bls.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002232:	4b7a      	ldr	r3, [pc, #488]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002246:	2b00      	cmp	r3, #0
 8002248:	d033      	beq.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d12f      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002252:	4b72      	ldr	r3, [pc, #456]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800225a:	4a70      	ldr	r2, [pc, #448]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 800225c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002260:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e024      	b.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d107      	bne.n	8002280 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002270:	4b6a      	ldr	r3, [pc, #424]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0c6      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0be      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002290:	f000 f8ce 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8002294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4a61      	ldr	r2, [pc, #388]	; (8002420 <HAL_RCC_ClockConfig+0x268>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d909      	bls.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a6:	4a5d      	ldr	r2, [pc, #372]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80022a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b5a      	ldr	r3, [pc, #360]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4957      	ldr	r1, [pc, #348]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7ff f888 	bl	80013d8 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7ff f884 	bl	80013d8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e095      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b4e      	ldr	r3, [pc, #312]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d023      	beq.n	8002348 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a42      	ldr	r2, [pc, #264]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002316:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002324:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800232c:	4a3b      	ldr	r2, [pc, #236]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 800232e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4936      	ldr	r1, [pc, #216]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
 8002346:	e008      	b.n	800235a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b80      	cmp	r3, #128	; 0x80
 800234c:	d105      	bne.n	800235a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800234e:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 8002354:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002358:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800235a:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d21d      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 020f 	bic.w	r2, r3, #15
 8002370:	4929      	ldr	r1, [pc, #164]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002378:	f7ff f82e 	bl	80013d8 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7ff f82a 	bl	80013d8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e03b      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d1ed      	bne.n	8002380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4917      	ldr	r1, [pc, #92]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	490f      	ldr	r1, [pc, #60]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e2:	f000 f825 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023e6:	4601      	mov	r1, r0
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCC_ClockConfig+0x264>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <HAL_RCC_ClockConfig+0x26c>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	fa21 f303 	lsr.w	r3, r1, r3
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_RCC_ClockConfig+0x270>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x274>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe ff9a 	bl	8001340 <HAL_InitTick>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	04c4b400 	.word	0x04c4b400
 8002424:	080065b0 	.word	0x080065b0
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002436:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d102      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	e047      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d102      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002454:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e03e      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d136      	bne.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3301      	adds	r3, #1
 800247c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d10c      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002484:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	4a16      	ldr	r2, [pc, #88]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248e:	68d2      	ldr	r2, [r2, #12]
 8002490:	0a12      	lsrs	r2, r2, #8
 8002492:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
      break;
 800249c:	e00c      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800249e:	4a13      	ldr	r2, [pc, #76]	; (80024ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4a10      	ldr	r2, [pc, #64]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a8:	68d2      	ldr	r2, [r2, #12]
 80024aa:	0a12      	lsrs	r2, r2, #8
 80024ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
      break;
 80024b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0e5b      	lsrs	r3, r3, #25
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	e001      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024d8:	693b      	ldr	r3, [r7, #16]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200

080024f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_GetHCLKFreq+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000000 	.word	0x20000000

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002510:	f7ff fff0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002514:	4601      	mov	r1, r0
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa21 f303 	lsr.w	r3, r1, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	080065c0 	.word	0x080065c0

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800253c:	f7ff ffda 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002540:	4601      	mov	r1, r0
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0adb      	lsrs	r3, r3, #11
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4a04      	ldr	r2, [pc, #16]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	080065c0 	.word	0x080065c0

08002564 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3301      	adds	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d10c      	bne.n	80025a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002588:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002592:	68d2      	ldr	r2, [r2, #12]
 8002594:	0a12      	lsrs	r2, r2, #8
 8002596:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
    break;
 80025a0:	e00c      	b.n	80025bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	0a12      	lsrs	r2, r2, #8
 80025b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
    break;
 80025ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0e5b      	lsrs	r3, r3, #25
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	3301      	adds	r3, #1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025d6:	687b      	ldr	r3, [r7, #4]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40021000 	.word	0x40021000
 80025e8:	007a1200 	.word	0x007a1200
 80025ec:	00f42400 	.word	0x00f42400

080025f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025f8:	2300      	movs	r3, #0
 80025fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025fc:	2300      	movs	r3, #0
 80025fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8098 	beq.w	800273e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002612:	4b43      	ldr	r3, [pc, #268]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10d      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b40      	ldr	r3, [pc, #256]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4a3f      	ldr	r2, [pc, #252]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800263a:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a39      	ldr	r2, [pc, #228]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002644:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002646:	f7fe fec7 	bl	80013d8 <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264c:	e009      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7fe fec3 	bl	80013d8 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d902      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	74fb      	strb	r3, [r7, #19]
        break;
 8002660:	e005      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002662:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ef      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d159      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01e      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d019      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ac:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fe83 	bl	80013d8 <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d4:	e00b      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fe7f 	bl	80013d8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d902      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	74fb      	strb	r3, [r7, #19]
            break;
 80026ec:	e006      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ec      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002718:	e008      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	74bb      	strb	r3, [r7, #18]
 800271e:	e005      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272c:	7c7b      	ldrb	r3, [r7, #17]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4ba6      	ldr	r3, [pc, #664]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	4aa5      	ldr	r2, [pc, #660]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274a:	4ba0      	ldr	r3, [pc, #640]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f023 0203 	bic.w	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	499c      	ldr	r1, [pc, #624]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800276c:	4b97      	ldr	r3, [pc, #604]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 020c 	bic.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4994      	ldr	r1, [pc, #592]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800278e:	4b8f      	ldr	r3, [pc, #572]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	498b      	ldr	r1, [pc, #556]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b0:	4b86      	ldr	r3, [pc, #536]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	4983      	ldr	r1, [pc, #524]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d2:	4b7e      	ldr	r3, [pc, #504]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	497a      	ldr	r1, [pc, #488]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f4:	4b75      	ldr	r3, [pc, #468]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	4972      	ldr	r1, [pc, #456]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002816:	4b6d      	ldr	r3, [pc, #436]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	4969      	ldr	r1, [pc, #420]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002838:	4b64      	ldr	r3, [pc, #400]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4961      	ldr	r1, [pc, #388]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285a:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	4958      	ldr	r1, [pc, #352]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d015      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	4950      	ldr	r1, [pc, #320]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289a:	d105      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a4a      	ldr	r2, [pc, #296]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d015      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028b4:	4b45      	ldr	r3, [pc, #276]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	4942      	ldr	r1, [pc, #264]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d2:	d105      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d4:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a3c      	ldr	r2, [pc, #240]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d015      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028ec:	4b37      	ldr	r3, [pc, #220]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4934      	ldr	r1, [pc, #208]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290a:	d105      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a2e      	ldr	r2, [pc, #184]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002916:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	4926      	ldr	r1, [pc, #152]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002942:	d105      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	4918      	ldr	r1, [pc, #96]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297a:	d105      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002986:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	490a      	ldr	r1, [pc, #40]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029b2:	d105      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000

080029d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e049      	b.n	8002a76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fac2 	bl	8000f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f000 fe26 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e049      	b.n	8002b24 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f841 	bl	8002b2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f000 fdcf 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e049      	b.n	8002be6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f841 	bl	8002bee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4610      	mov	r0, r2
 8002b80:	f000 fd6e 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_IC_Start+0x1a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e023      	b.n	8002c66 <HAL_TIM_IC_Start+0x62>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_IC_Start+0x2a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e01b      	b.n	8002c66 <HAL_TIM_IC_Start+0x62>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d104      	bne.n	8002c3e <HAL_TIM_IC_Start+0x3a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e013      	b.n	8002c66 <HAL_TIM_IC_Start+0x62>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d104      	bne.n	8002c4e <HAL_TIM_IC_Start+0x4a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	e00b      	b.n	8002c66 <HAL_TIM_IC_Start+0x62>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_IC_Start+0x5a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e003      	b.n	8002c66 <HAL_TIM_IC_Start+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <HAL_TIM_IC_Start+0x74>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e013      	b.n	8002ca0 <HAL_TIM_IC_Start+0x9c>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d104      	bne.n	8002c88 <HAL_TIM_IC_Start+0x84>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e00b      	b.n	8002ca0 <HAL_TIM_IC_Start+0x9c>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d104      	bne.n	8002c98 <HAL_TIM_IC_Start+0x94>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e003      	b.n	8002ca0 <HAL_TIM_IC_Start+0x9c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ca8:	7bbb      	ldrb	r3, [r7, #14]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e064      	b.n	8002d7c <HAL_TIM_IC_Start+0x178>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_IC_Start+0xbe>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc0:	e023      	b.n	8002d0a <HAL_TIM_IC_Start+0x106>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d104      	bne.n	8002cd2 <HAL_TIM_IC_Start+0xce>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd0:	e01b      	b.n	8002d0a <HAL_TIM_IC_Start+0x106>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d104      	bne.n	8002ce2 <HAL_TIM_IC_Start+0xde>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce0:	e013      	b.n	8002d0a <HAL_TIM_IC_Start+0x106>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d104      	bne.n	8002cf2 <HAL_TIM_IC_Start+0xee>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf0:	e00b      	b.n	8002d0a <HAL_TIM_IC_Start+0x106>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_IC_Start+0xfe>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d00:	e003      	b.n	8002d0a <HAL_TIM_IC_Start+0x106>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_IC_Start+0x116>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	e013      	b.n	8002d42 <HAL_TIM_IC_Start+0x13e>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_IC_Start+0x126>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d28:	e00b      	b.n	8002d42 <HAL_TIM_IC_Start+0x13e>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_IC_Start+0x136>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d38:	e003      	b.n	8002d42 <HAL_TIM_IC_Start+0x13e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2201      	movs	r2, #1
 8002d48:	6839      	ldr	r1, [r7, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fa78 	bl	8004240 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_TIM_IC_Start+0x180>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d00b      	beq.n	8002d7a <HAL_TIM_IC_Start+0x176>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d68:	d007      	beq.n	8002d7a <HAL_TIM_IC_Start+0x176>
  {
    __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	00010007 	.word	0x00010007

08002d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d122      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d11b      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0202 	mvn.w	r2, #2
 8002db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd fc32 	bl	8000634 <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fc26 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fc2d 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d122      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d11b      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0204 	mvn.w	r2, #4
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd fc08 	bl	8000634 <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fbfc 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fc03 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d122      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11b      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0208 	mvn.w	r2, #8
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd fbde 	bl	8000634 <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fbd2 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fbd9 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d122      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0210 	mvn.w	r2, #16
 8002eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fbb4 	bl	8000634 <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fba8 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fbaf 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0201 	mvn.w	r2, #1
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fb82 	bl	8003610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b80      	cmp	r3, #128	; 0x80
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f001 fc52 	bl	80047dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f46:	d10e      	bne.n	8002f66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d107      	bne.n	8002f66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f001 fc45 	bl	80047f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d10e      	bne.n	8002f92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d107      	bne.n	8002f92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fb5d 	bl	800364c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d10e      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d107      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f06f 0220 	mvn.w	r2, #32
 8002fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fd fb31 	bl	8000620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fcc:	d10f      	bne.n	8002fee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fdc:	d107      	bne.n	8002fee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f001 fc0b 	bl	8004804 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ffc:	d10f      	bne.n	800301e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800300c:	d107      	bne.n	800301e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f001 fbfd 	bl	8004818 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302c:	d10f      	bne.n	800304e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800303c:	d107      	bne.n	800304e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f001 fbef 	bl	800482c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800305c:	d10f      	bne.n	800307e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800306c:	d107      	bne.n	800307e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f001 fbe1 	bl	8004840 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_TIM_IC_ConfigChannel+0x1a>
 800309c:	2302      	movs	r3, #2
 800309e:	e082      	b.n	80031a6 <HAL_TIM_IC_ConfigChannel+0x120>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11b      	bne.n	80030e6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f000 ff05 	bl	8003ecc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 020c 	bic.w	r2, r2, #12
 80030d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6999      	ldr	r1, [r3, #24]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	619a      	str	r2, [r3, #24]
 80030e4:	e05a      	b.n	800319c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d11c      	bne.n	8003126 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	6819      	ldr	r1, [r3, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f000 ff7d 	bl	8003ffa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800310e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6999      	ldr	r1, [r3, #24]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	021a      	lsls	r2, r3, #8
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	619a      	str	r2, [r3, #24]
 8003124:	e03a      	b.n	800319c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f000 ffca 	bl	80040d4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69da      	ldr	r2, [r3, #28]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 020c 	bic.w	r2, r2, #12
 800314e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69d9      	ldr	r1, [r3, #28]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	61da      	str	r2, [r3, #28]
 8003162:	e01b      	b.n	800319c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f000 ffea 	bl	800414c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003186:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69d9      	ldr	r1, [r3, #28]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	021a      	lsls	r2, r3, #8
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0fd      	b.n	80033c6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b14      	cmp	r3, #20
 80031d6:	f200 80f0 	bhi.w	80033ba <HAL_TIM_PWM_ConfigChannel+0x20a>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	08003235 	.word	0x08003235
 80031e4:	080033bb 	.word	0x080033bb
 80031e8:	080033bb 	.word	0x080033bb
 80031ec:	080033bb 	.word	0x080033bb
 80031f0:	08003275 	.word	0x08003275
 80031f4:	080033bb 	.word	0x080033bb
 80031f8:	080033bb 	.word	0x080033bb
 80031fc:	080033bb 	.word	0x080033bb
 8003200:	080032b7 	.word	0x080032b7
 8003204:	080033bb 	.word	0x080033bb
 8003208:	080033bb 	.word	0x080033bb
 800320c:	080033bb 	.word	0x080033bb
 8003210:	080032f7 	.word	0x080032f7
 8003214:	080033bb 	.word	0x080033bb
 8003218:	080033bb 	.word	0x080033bb
 800321c:	080033bb 	.word	0x080033bb
 8003220:	08003339 	.word	0x08003339
 8003224:	080033bb 	.word	0x080033bb
 8003228:	080033bb 	.word	0x080033bb
 800322c:	080033bb 	.word	0x080033bb
 8003230:	08003379 	.word	0x08003379
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 faa0 	bl	8003780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0208 	orr.w	r2, r2, #8
 800324e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6999      	ldr	r1, [r3, #24]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	619a      	str	r2, [r3, #24]
      break;
 8003272:	e0a3      	b.n	80033bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fb10 	bl	80038a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800328e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6999      	ldr	r1, [r3, #24]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	021a      	lsls	r2, r3, #8
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	619a      	str	r2, [r3, #24]
      break;
 80032b4:	e082      	b.n	80033bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fb79 	bl	80039b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0208 	orr.w	r2, r2, #8
 80032d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0204 	bic.w	r2, r2, #4
 80032e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69d9      	ldr	r1, [r3, #28]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	61da      	str	r2, [r3, #28]
      break;
 80032f4:	e062      	b.n	80033bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fbe1 	bl	8003ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69d9      	ldr	r1, [r3, #28]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	61da      	str	r2, [r3, #28]
      break;
 8003336:	e041      	b.n	80033bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fc4a 	bl	8003bd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0208 	orr.w	r2, r2, #8
 8003352:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0204 	bic.w	r2, r2, #4
 8003362:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003376:	e021      	b.n	80033bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fc8e 	bl	8003ca0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003392:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	021a      	lsls	r2, r3, #8
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033b8:	e000      	b.n	80033bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80033ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop

080033d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIM_ConfigClockSource+0x18>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0c3      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x1a0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800340a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003412:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b70      	cmp	r3, #112	; 0x70
 8003422:	d038      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0xc6>
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d815      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x84>
 8003428:	2b30      	cmp	r3, #48	; 0x30
 800342a:	f000 808e 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x17a>
 800342e:	2b30      	cmp	r3, #48	; 0x30
 8003430:	d809      	bhi.n	8003446 <HAL_TIM_ConfigClockSource+0x76>
 8003432:	2b10      	cmp	r3, #16
 8003434:	f000 8089 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x17a>
 8003438:	2b20      	cmp	r3, #32
 800343a:	f000 8086 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x17a>
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8083 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003444:	e08b      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003446:	2b50      	cmp	r3, #80	; 0x50
 8003448:	d04f      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x11a>
 800344a:	2b60      	cmp	r3, #96	; 0x60
 800344c:	d05d      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x13a>
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d06b      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8003452:	e084      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003454:	4a48      	ldr	r2, [pc, #288]	; (8003578 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d077      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x17a>
 800345a:	4a47      	ldr	r2, [pc, #284]	; (8003578 <HAL_TIM_ConfigClockSource+0x1a8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d809      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0xa4>
 8003460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003464:	d02e      	beq.n	80034c4 <HAL_TIM_ConfigClockSource+0xf4>
 8003466:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800346a:	d06e      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x17a>
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d074      	beq.n	800355c <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8003472:	e074      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003474:	4a41      	ldr	r2, [pc, #260]	; (800357c <HAL_TIM_ConfigClockSource+0x1ac>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d067      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x17a>
 800347a:	4a40      	ldr	r2, [pc, #256]	; (800357c <HAL_TIM_ConfigClockSource+0x1ac>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d803      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0xb8>
 8003480:	4a3f      	ldr	r2, [pc, #252]	; (8003580 <HAL_TIM_ConfigClockSource+0x1b0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d061      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003486:	e06a      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003488:	4a3e      	ldr	r2, [pc, #248]	; (8003584 <HAL_TIM_ConfigClockSource+0x1b4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d05d      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x17a>
 800348e:	4a3e      	ldr	r2, [pc, #248]	; (8003588 <HAL_TIM_ConfigClockSource+0x1b8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d05a      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003494:	e063      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6899      	ldr	r1, [r3, #8]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f000 feab 	bl	8004200 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	609a      	str	r2, [r3, #8]
      break;
 80034c2:	e04c      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6899      	ldr	r1, [r3, #8]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f000 fe94 	bl	8004200 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e6:	609a      	str	r2, [r3, #8]
      break;
 80034e8:	e039      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 fd50 	bl	8003f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2150      	movs	r1, #80	; 0x50
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fe5f 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003508:	e029      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	461a      	mov	r2, r3
 8003518:	f000 fdac 	bl	8004074 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2160      	movs	r1, #96	; 0x60
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fe4f 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003528:	e019      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 fd30 	bl	8003f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2140      	movs	r1, #64	; 0x40
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fe3f 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003548:	e009      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f000 fe36 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 800355a:	e000      	b.n	800355e <HAL_TIM_ConfigClockSource+0x18e>
      break;
 800355c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	00100020 	.word	0x00100020
 800357c:	00100040 	.word	0x00100040
 8003580:	00100030 	.word	0x00100030
 8003584:	00100060 	.word	0x00100060
 8003588:	00100070 	.word	0x00100070

0800358c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e031      	b.n	8003608 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035b4:	6839      	ldr	r1, [r7, #0]
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fbd8 	bl	8003d6c <TIM_SlaveTimer_SetConfig>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e018      	b.n	8003608 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a3c      	ldr	r2, [pc, #240]	; (8003764 <TIM_Base_SetConfig+0x104>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00f      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d00b      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a39      	ldr	r2, [pc, #228]	; (8003768 <TIM_Base_SetConfig+0x108>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a38      	ldr	r2, [pc, #224]	; (800376c <TIM_Base_SetConfig+0x10c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a37      	ldr	r2, [pc, #220]	; (8003770 <TIM_Base_SetConfig+0x110>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d108      	bne.n	80036aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a2d      	ldr	r2, [pc, #180]	; (8003764 <TIM_Base_SetConfig+0x104>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01b      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d017      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <TIM_Base_SetConfig+0x108>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a29      	ldr	r2, [pc, #164]	; (800376c <TIM_Base_SetConfig+0x10c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a28      	ldr	r2, [pc, #160]	; (8003770 <TIM_Base_SetConfig+0x110>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a27      	ldr	r2, [pc, #156]	; (8003774 <TIM_Base_SetConfig+0x114>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a26      	ldr	r2, [pc, #152]	; (8003778 <TIM_Base_SetConfig+0x118>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a25      	ldr	r2, [pc, #148]	; (800377c <TIM_Base_SetConfig+0x11c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d108      	bne.n	80036fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a10      	ldr	r2, [pc, #64]	; (8003764 <TIM_Base_SetConfig+0x104>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00f      	beq.n	8003748 <TIM_Base_SetConfig+0xe8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a11      	ldr	r2, [pc, #68]	; (8003770 <TIM_Base_SetConfig+0x110>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00b      	beq.n	8003748 <TIM_Base_SetConfig+0xe8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <TIM_Base_SetConfig+0x114>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <TIM_Base_SetConfig+0xe8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <TIM_Base_SetConfig+0x118>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0xe8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a0e      	ldr	r2, [pc, #56]	; (800377c <TIM_Base_SetConfig+0x11c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d103      	bne.n	8003750 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	615a      	str	r2, [r3, #20]
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800
 8003770:	40013400 	.word	0x40013400
 8003774:	40014000 	.word	0x40014000
 8003778:	40014400 	.word	0x40014400
 800377c:	40014800 	.word	0x40014800

08003780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f023 0201 	bic.w	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f023 0302 	bic.w	r3, r3, #2
 80037cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a2c      	ldr	r2, [pc, #176]	; (800388c <TIM_OC1_SetConfig+0x10c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00f      	beq.n	8003800 <TIM_OC1_SetConfig+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a2b      	ldr	r2, [pc, #172]	; (8003890 <TIM_OC1_SetConfig+0x110>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00b      	beq.n	8003800 <TIM_OC1_SetConfig+0x80>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a2a      	ldr	r2, [pc, #168]	; (8003894 <TIM_OC1_SetConfig+0x114>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_OC1_SetConfig+0x80>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a29      	ldr	r2, [pc, #164]	; (8003898 <TIM_OC1_SetConfig+0x118>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_OC1_SetConfig+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a28      	ldr	r2, [pc, #160]	; (800389c <TIM_OC1_SetConfig+0x11c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10c      	bne.n	800381a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0308 	bic.w	r3, r3, #8
 8003806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <TIM_OC1_SetConfig+0x10c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00f      	beq.n	8003842 <TIM_OC1_SetConfig+0xc2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <TIM_OC1_SetConfig+0x110>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00b      	beq.n	8003842 <TIM_OC1_SetConfig+0xc2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <TIM_OC1_SetConfig+0x114>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <TIM_OC1_SetConfig+0xc2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a18      	ldr	r2, [pc, #96]	; (8003898 <TIM_OC1_SetConfig+0x118>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_OC1_SetConfig+0xc2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a17      	ldr	r2, [pc, #92]	; (800389c <TIM_OC1_SetConfig+0x11c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d111      	bne.n	8003866 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0210 	bic.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0320 	bic.w	r3, r3, #32
 80038ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <TIM_OC2_SetConfig+0x100>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_OC2_SetConfig+0x6c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <TIM_OC2_SetConfig+0x104>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10d      	bne.n	8003928 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <TIM_OC2_SetConfig+0x100>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00f      	beq.n	8003950 <TIM_OC2_SetConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <TIM_OC2_SetConfig+0x104>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_OC2_SetConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <TIM_OC2_SetConfig+0x108>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_OC2_SetConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <TIM_OC2_SetConfig+0x10c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_OC2_SetConfig+0xb0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <TIM_OC2_SetConfig+0x110>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d113      	bne.n	8003978 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800395e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40013400 	.word	0x40013400
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800

080039b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a27      	ldr	r2, [pc, #156]	; (8003ab0 <TIM_OC3_SetConfig+0xfc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_OC3_SetConfig+0x6a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <TIM_OC3_SetConfig+0x100>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10d      	bne.n	8003a3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <TIM_OC3_SetConfig+0xfc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00f      	beq.n	8003a62 <TIM_OC3_SetConfig+0xae>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <TIM_OC3_SetConfig+0x100>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <TIM_OC3_SetConfig+0xae>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <TIM_OC3_SetConfig+0x104>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <TIM_OC3_SetConfig+0xae>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <TIM_OC3_SetConfig+0x108>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_OC3_SetConfig+0xae>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <TIM_OC3_SetConfig+0x10c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d113      	bne.n	8003a8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	621a      	str	r2, [r3, #32]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	031b      	lsls	r3, r3, #12
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a28      	ldr	r2, [pc, #160]	; (8003bc4 <TIM_OC4_SetConfig+0x100>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC4_SetConfig+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <TIM_OC4_SetConfig+0x104>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10d      	bne.n	8003b4c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	031b      	lsls	r3, r3, #12
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <TIM_OC4_SetConfig+0x100>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00f      	beq.n	8003b74 <TIM_OC4_SetConfig+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <TIM_OC4_SetConfig+0x104>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_OC4_SetConfig+0xb0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <TIM_OC4_SetConfig+0x108>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <TIM_OC4_SetConfig+0xb0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <TIM_OC4_SetConfig+0x10c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_OC4_SetConfig+0xb0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <TIM_OC4_SetConfig+0x110>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d113      	bne.n	8003b9c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40013400 	.word	0x40013400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800

08003bd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <TIM_OC5_SetConfig+0xb4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <TIM_OC5_SetConfig+0xb8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <TIM_OC5_SetConfig+0xbc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <TIM_OC5_SetConfig+0xc0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <TIM_OC5_SetConfig+0xc4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d109      	bne.n	8003c66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	051b      	lsls	r3, r3, #20
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <TIM_OC6_SetConfig+0xb8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00f      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <TIM_OC6_SetConfig+0xbc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <TIM_OC6_SetConfig+0xc0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <TIM_OC6_SetConfig+0xc4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <TIM_OC6_SetConfig+0xc8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d109      	bne.n	8003d30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	029b      	lsls	r3, r3, #10
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40013400 	.word	0x40013400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d88:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9a:	f023 0307 	bic.w	r3, r3, #7
 8003d9e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b60      	cmp	r3, #96	; 0x60
 8003db8:	d06d      	beq.n	8003e96 <TIM_SlaveTimer_SetConfig+0x12a>
 8003dba:	2b60      	cmp	r3, #96	; 0x60
 8003dbc:	d80f      	bhi.n	8003dde <TIM_SlaveTimer_SetConfig+0x72>
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d073      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d804      	bhi.n	8003dd0 <TIM_SlaveTimer_SetConfig+0x64>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d06f      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d06d      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8003dce:	e06d      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d028      	beq.n	8003e26 <TIM_SlaveTimer_SetConfig+0xba>
 8003dd4:	2b50      	cmp	r3, #80	; 0x50
 8003dd6:	d054      	beq.n	8003e82 <TIM_SlaveTimer_SetConfig+0x116>
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d066      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003ddc:	e066      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003dde:	4a36      	ldr	r2, [pc, #216]	; (8003eb8 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d062      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
 8003de4:	4a34      	ldr	r2, [pc, #208]	; (8003eb8 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d808      	bhi.n	8003dfc <TIM_SlaveTimer_SetConfig+0x90>
 8003dea:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003dee:	d05c      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
 8003df0:	4a32      	ldr	r2, [pc, #200]	; (8003ebc <TIM_SlaveTimer_SetConfig+0x150>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d059      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
 8003df6:	2b70      	cmp	r3, #112	; 0x70
 8003df8:	d00a      	beq.n	8003e10 <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8003dfa:	e057      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003dfc:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <TIM_SlaveTimer_SetConfig+0x154>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d053      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
 8003e02:	4a30      	ldr	r2, [pc, #192]	; (8003ec4 <TIM_SlaveTimer_SetConfig+0x158>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d050      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
 8003e08:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <TIM_SlaveTimer_SetConfig+0x15c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04d      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003e0e:	e04d      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f000 f9ee 	bl	8004200 <TIM_ETR_SetConfig>
      break;
 8003e24:	e042      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d004      	beq.n	8003e38 <TIM_SlaveTimer_SetConfig+0xcc>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003e36:	d101      	bne.n	8003e3c <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e038      	b.n	8003eae <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e62:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	621a      	str	r2, [r3, #32]
      break;
 8003e80:	e014      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6899      	ldr	r1, [r3, #8]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f000 f884 	bl	8003f9c <TIM_TI1_ConfigInputStage>
      break;
 8003e94:	e00a      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6899      	ldr	r1, [r3, #8]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f000 f8e6 	bl	8004074 <TIM_TI2_ConfigInputStage>
      break;
 8003ea8:	e000      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8003eaa:	bf00      	nop
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	00100030 	.word	0x00100030
 8003ebc:	00100020 	.word	0x00100020
 8003ec0:	00100060 	.word	0x00100060
 8003ec4:	00100070 	.word	0x00100070
 8003ec8:	00100040 	.word	0x00100040

08003ecc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a24      	ldr	r2, [pc, #144]	; (8003f88 <TIM_TI1_SetConfig+0xbc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <TIM_TI1_SetConfig+0x56>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d00f      	beq.n	8003f22 <TIM_TI1_SetConfig+0x56>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a21      	ldr	r2, [pc, #132]	; (8003f8c <TIM_TI1_SetConfig+0xc0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <TIM_TI1_SetConfig+0x56>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4a20      	ldr	r2, [pc, #128]	; (8003f90 <TIM_TI1_SetConfig+0xc4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_TI1_SetConfig+0x56>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <TIM_TI1_SetConfig+0xc8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_TI1_SetConfig+0x56>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <TIM_TI1_SetConfig+0xcc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <TIM_TI1_SetConfig+0x5a>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <TIM_TI1_SetConfig+0x5c>
 8003f26:	2300      	movs	r3, #0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0303 	bic.w	r3, r3, #3
 8003f32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e003      	b.n	8003f46 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f023 030a 	bic.w	r3, r3, #10
 8003f60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f003 030a 	and.w	r3, r3, #10
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40014000 	.word	0x40014000

08003f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f023 0201 	bic.w	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 030a 	bic.w	r3, r3, #10
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b087      	sub	sp, #28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f023 0210 	bic.w	r2, r3, #16
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	b29b      	uxth	r3, r3
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800404c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f023 0210 	bic.w	r2, r3, #16
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800409e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	031b      	lsls	r3, r3, #12
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	621a      	str	r2, [r3, #32]
}
 80040c8:	bf00      	nop
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 0303 	bic.w	r3, r3, #3
 8004100:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004110:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	b2db      	uxtb	r3, r3
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004124:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	621a      	str	r2, [r3, #32]
}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004178:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800418a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	031b      	lsls	r3, r3, #12
 8004190:	b29b      	uxth	r3, r3
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800419e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	031b      	lsls	r3, r3, #12
 80041a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f043 0307 	orr.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2201      	movs	r2, #1
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1a      	ldr	r2, [r3, #32]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	43db      	mvns	r3, r3
 8004262:	401a      	ands	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	431a      	orrs	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b08a      	sub	sp, #40	; 0x28
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e0a0      	b.n	80043e0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f898 	bl	80043e8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	4619      	mov	r1, r3
 80042ca:	4610      	mov	r0, r2
 80042cc:	f7ff f9c8 	bl	8003660 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6818      	ldr	r0, [r3, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6819      	ldr	r1, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2203      	movs	r2, #3
 80042de:	f7ff fdf5 	bl	8003ecc <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699a      	ldr	r2, [r3, #24]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 020c 	bic.w	r2, r2, #12
 80042f0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6999      	ldr	r1, [r3, #24]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004312:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004336:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0204 	orr.w	r2, r2, #4
 800435a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004360:	2300      	movs	r3, #0
 8004362:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004364:	2370      	movs	r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f107 020c 	add.w	r2, r7, #12
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fa8b 	bl	80038a0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80043ac:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3728      	adds	r7, #40	; 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <HAL_TIMEx_PWMN_Start_IT+0x24>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e022      	b.n	8004466 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b04      	cmp	r3, #4
 8004424:	d109      	bne.n	800443a <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	e015      	b.n	8004466 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d109      	bne.n	8004454 <HAL_TIMEx_PWMN_Start_IT+0x58>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e008      	b.n	8004466 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e08e      	b.n	800458c <HAL_TIMEx_PWMN_Start_IT+0x190>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <HAL_TIMEx_PWMN_Start_IT+0x82>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447c:	e013      	b.n	80044a6 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d104      	bne.n	800448e <HAL_TIMEx_PWMN_Start_IT+0x92>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800448c:	e00b      	b.n	80044a6 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d104      	bne.n	800449e <HAL_TIMEx_PWMN_Start_IT+0xa2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800449c:	e003      	b.n	80044a6 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	d841      	bhi.n	8004530 <HAL_TIMEx_PWMN_Start_IT+0x134>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <HAL_TIMEx_PWMN_Start_IT+0xb8>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044e9 	.word	0x080044e9
 80044b8:	08004531 	.word	0x08004531
 80044bc:	08004531 	.word	0x08004531
 80044c0:	08004531 	.word	0x08004531
 80044c4:	080044fb 	.word	0x080044fb
 80044c8:	08004531 	.word	0x08004531
 80044cc:	08004531 	.word	0x08004531
 80044d0:	08004531 	.word	0x08004531
 80044d4:	0800450d 	.word	0x0800450d
 80044d8:	08004531 	.word	0x08004531
 80044dc:	08004531 	.word	0x08004531
 80044e0:	08004531 	.word	0x08004531
 80044e4:	0800451f 	.word	0x0800451f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0202 	orr.w	r2, r2, #2
 80044f6:	60da      	str	r2, [r3, #12]
      break;
 80044f8:	e01b      	b.n	8004532 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0204 	orr.w	r2, r2, #4
 8004508:	60da      	str	r2, [r3, #12]
      break;
 800450a:	e012      	b.n	8004532 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0208 	orr.w	r2, r2, #8
 800451a:	60da      	str	r2, [r3, #12]
      break;
 800451c:	e009      	b.n	8004532 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0210 	orr.w	r2, r2, #16
 800452c:	60da      	str	r2, [r3, #12]
      break;
 800452e:	e000      	b.n	8004532 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    default:
      break;
 8004530:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004540:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2204      	movs	r2, #4
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f982 	bl	8004854 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800455e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_TIMEx_PWMN_Start_IT+0x198>)
 8004568:	4013      	ands	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b06      	cmp	r3, #6
 8004570:	d00b      	beq.n	800458a <HAL_TIMEx_PWMN_Start_IT+0x18e>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d007      	beq.n	800458a <HAL_TIMEx_PWMN_Start_IT+0x18e>
  {
    __HAL_TIM_ENABLE(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	00010007 	.word	0x00010007

08004598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e065      	b.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2c      	ldr	r2, [pc, #176]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a2b      	ldr	r2, [pc, #172]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d108      	bne.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d018      	beq.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004626:	d013      	beq.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00e      	beq.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a17      	ldr	r2, [pc, #92]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d009      	beq.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a12      	ldr	r2, [pc, #72]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a13      	ldr	r2, [pc, #76]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10c      	bne.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004656:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4313      	orrs	r3, r2
 8004660:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40013400 	.word	0x40013400
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40014000 	.word	0x40014000

0800469c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e087      	b.n	80047c8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a25      	ldr	r2, [pc, #148]	; (80047d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d106      	bne.n	8004754 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d126      	bne.n	80047b6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	051b      	lsls	r3, r3, #20
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a0d      	ldr	r2, [pc, #52]	; (80047d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d106      	bne.n	80047b6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40013400 	.word	0x40013400

080047dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2204      	movs	r2, #4
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1a      	ldr	r2, [r3, #32]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	43db      	mvns	r3, r3
 8004876:	401a      	ands	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1a      	ldr	r2, [r3, #32]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e042      	b.n	8004936 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc fcae 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f9a9 	bl	8004c38 <UART_SetConfig>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e022      	b.n	8004936 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 fb57 	bl	8005fac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800490c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800491c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0201 	orr.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f001 fbde 	bl	80060f0 <UART_CheckIdleState>
 8004934:	4603      	mov	r3, r0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d118      	bne.n	80049a0 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d009      	beq.n	80049a0 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 812e 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
      }
      return;
 800499e:	e128      	b.n	8004bf2 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80d1 	beq.w	8004b4a <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4b96      	ldr	r3, [pc, #600]	; (8004c04 <HAL_UART_IRQHandler+0x2c4>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80c6 	beq.w	8004b4a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d010      	beq.n	80049ea <HAL_UART_IRQHandler+0xaa>
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2201      	movs	r2, #1
 80049d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f043 0201 	orr.w	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d010      	beq.n	8004a16 <HAL_UART_IRQHandler+0xd6>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2202      	movs	r2, #2
 8004a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f043 0204 	orr.w	r2, r3, #4
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <HAL_UART_IRQHandler+0x102>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f043 0202 	orr.w	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d015      	beq.n	8004a78 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4b6a      	ldr	r3, [pc, #424]	; (8004c04 <HAL_UART_IRQHandler+0x2c4>)
 8004a5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2208      	movs	r2, #8
 8004a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f043 0208 	orr.w	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80b9 	beq.w	8004bf6 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d011      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d104      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d004      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d031      	beq.n	8004b36 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f001 fb9e 	bl	8006214 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d123      	bne.n	8004b2e <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d013      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b02:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <HAL_UART_IRQHandler+0x2c8>)
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fc fd7f 	bl	800160e <HAL_DMA_Abort_IT>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d017      	beq.n	8004b46 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004b20:	4610      	mov	r0, r2
 8004b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	e00f      	b.n	8004b46 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f87a 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2c:	e00b      	b.n	8004b46 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f876 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b34:	e007      	b.n	8004b46 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f872 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004b44:	e057      	b.n	8004bf6 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b46:	bf00      	nop
    return;
 8004b48:	e055      	b.n	8004bf6 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <HAL_UART_IRQHandler+0x230>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f001 fba6 	bl	80062ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b6e:	e045      	b.n	8004bfc <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d031      	beq.n	8004bfa <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
    }
    return;
 8004b9e:	e02c      	b.n	8004bfa <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_UART_IRQHandler+0x27c>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f001 fb66 	bl	8006286 <UART_EndTransmit_IT>
    return;
 8004bba:	e01f      	b.n	8004bfc <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d008      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x298>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f001 fb86 	bl	80062e2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bd6:	e011      	b.n	8004bfc <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <HAL_UART_IRQHandler+0x2bc>
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	da09      	bge.n	8004bfc <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f001 fb70 	bl	80062ce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bee:	bf00      	nop
 8004bf0:	e004      	b.n	8004bfc <HAL_UART_IRQHandler+0x2bc>
      return;
 8004bf2:	bf00      	nop
 8004bf4:	e002      	b.n	8004bfc <HAL_UART_IRQHandler+0x2bc>
    return;
 8004bf6:	bf00      	nop
 8004bf8:	e000      	b.n	8004bfc <HAL_UART_IRQHandler+0x2bc>
    return;
 8004bfa:	bf00      	nop
  }
}
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	10000001 	.word	0x10000001
 8004c08:	0800625b 	.word	0x0800625b

08004c0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	0000      	movs	r0, r0
	...

08004c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c38:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c3c:	b08a      	sub	sp, #40	; 0x28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4ba4      	ldr	r3, [pc, #656]	; (8004f08 <UART_SetConfig+0x2d0>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a99      	ldr	r2, [pc, #612]	; (8004f0c <UART_SetConfig+0x2d4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	f023 010f 	bic.w	r1, r3, #15
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a8a      	ldr	r2, [pc, #552]	; (8004f10 <UART_SetConfig+0x2d8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d126      	bne.n	8004d3a <UART_SetConfig+0x102>
 8004cec:	4b89      	ldr	r3, [pc, #548]	; (8004f14 <UART_SetConfig+0x2dc>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d81a      	bhi.n	8004d30 <UART_SetConfig+0xf8>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <UART_SetConfig+0xc8>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004d29 	.word	0x08004d29
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e0d6      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e0d2      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004d20:	2304      	movs	r3, #4
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d26:	e0ce      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e0ca      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004d30:	2310      	movs	r3, #16
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	bf00      	nop
 8004d38:	e0c5      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a76      	ldr	r2, [pc, #472]	; (8004f18 <UART_SetConfig+0x2e0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d138      	bne.n	8004db6 <UART_SetConfig+0x17e>
 8004d44:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <UART_SetConfig+0x2dc>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b0c      	cmp	r3, #12
 8004d50:	d82c      	bhi.n	8004dac <UART_SetConfig+0x174>
 8004d52:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x120>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004dad 	.word	0x08004dad
 8004d60:	08004dad 	.word	0x08004dad
 8004d64:	08004dad 	.word	0x08004dad
 8004d68:	08004d9d 	.word	0x08004d9d
 8004d6c:	08004dad 	.word	0x08004dad
 8004d70:	08004dad 	.word	0x08004dad
 8004d74:	08004dad 	.word	0x08004dad
 8004d78:	08004d95 	.word	0x08004d95
 8004d7c:	08004dad 	.word	0x08004dad
 8004d80:	08004dad 	.word	0x08004dad
 8004d84:	08004dad 	.word	0x08004dad
 8004d88:	08004da5 	.word	0x08004da5
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e098      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e094      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e090      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e08c      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	bf00      	nop
 8004db4:	e087      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a58      	ldr	r2, [pc, #352]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d125      	bne.n	8004e0c <UART_SetConfig+0x1d4>
 8004dc0:	4b54      	ldr	r3, [pc, #336]	; (8004f14 <UART_SetConfig+0x2dc>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d011      	beq.n	8004df2 <UART_SetConfig+0x1ba>
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d802      	bhi.n	8004dd8 <UART_SetConfig+0x1a0>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <UART_SetConfig+0x1aa>
 8004dd6:	e014      	b.n	8004e02 <UART_SetConfig+0x1ca>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d006      	beq.n	8004dea <UART_SetConfig+0x1b2>
 8004ddc:	2b30      	cmp	r3, #48	; 0x30
 8004dde:	d00c      	beq.n	8004dfa <UART_SetConfig+0x1c2>
 8004de0:	e00f      	b.n	8004e02 <UART_SetConfig+0x1ca>
 8004de2:	2300      	movs	r3, #0
 8004de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de8:	e06d      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004dea:	2302      	movs	r3, #2
 8004dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df0:	e069      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004df2:	2304      	movs	r3, #4
 8004df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df8:	e065      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e00:	e061      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004e02:	2310      	movs	r3, #16
 8004e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e08:	bf00      	nop
 8004e0a:	e05c      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a43      	ldr	r2, [pc, #268]	; (8004f20 <UART_SetConfig+0x2e8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d125      	bne.n	8004e62 <UART_SetConfig+0x22a>
 8004e16:	4b3f      	ldr	r3, [pc, #252]	; (8004f14 <UART_SetConfig+0x2dc>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d011      	beq.n	8004e48 <UART_SetConfig+0x210>
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d802      	bhi.n	8004e2e <UART_SetConfig+0x1f6>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <UART_SetConfig+0x200>
 8004e2c:	e014      	b.n	8004e58 <UART_SetConfig+0x220>
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	d006      	beq.n	8004e40 <UART_SetConfig+0x208>
 8004e32:	2bc0      	cmp	r3, #192	; 0xc0
 8004e34:	d00c      	beq.n	8004e50 <UART_SetConfig+0x218>
 8004e36:	e00f      	b.n	8004e58 <UART_SetConfig+0x220>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e042      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004e40:	2302      	movs	r3, #2
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e03e      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e03a      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004e50:	2308      	movs	r3, #8
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e036      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	bf00      	nop
 8004e60:	e031      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a29      	ldr	r2, [pc, #164]	; (8004f0c <UART_SetConfig+0x2d4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d129      	bne.n	8004ec0 <UART_SetConfig+0x288>
 8004e6c:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <UART_SetConfig+0x2dc>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7a:	d014      	beq.n	8004ea6 <UART_SetConfig+0x26e>
 8004e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e80:	d802      	bhi.n	8004e88 <UART_SetConfig+0x250>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <UART_SetConfig+0x25e>
 8004e86:	e016      	b.n	8004eb6 <UART_SetConfig+0x27e>
 8004e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8c:	d007      	beq.n	8004e9e <UART_SetConfig+0x266>
 8004e8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e92:	d00c      	beq.n	8004eae <UART_SetConfig+0x276>
 8004e94:	e00f      	b.n	8004eb6 <UART_SetConfig+0x27e>
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9c:	e013      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea4:	e00f      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004ea6:	2304      	movs	r3, #4
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eac:	e00b      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004eae:	2308      	movs	r3, #8
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb4:	e007      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004eb6:	2310      	movs	r3, #16
 8004eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ebc:	bf00      	nop
 8004ebe:	e002      	b.n	8004ec6 <UART_SetConfig+0x28e>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <UART_SetConfig+0x2d4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	f040 842e 	bne.w	800572e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	f200 8169 	bhi.w	80051ae <UART_SetConfig+0x576>
 8004edc:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <UART_SetConfig+0x2ac>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004f25 	.word	0x08004f25
 8004ee8:	080051af 	.word	0x080051af
 8004eec:	08004fc7 	.word	0x08004fc7
 8004ef0:	080051af 	.word	0x080051af
 8004ef4:	0800505f 	.word	0x0800505f
 8004ef8:	080051af 	.word	0x080051af
 8004efc:	080051af 	.word	0x080051af
 8004f00:	080051af 	.word	0x080051af
 8004f04:	08005101 	.word	0x08005101
 8004f08:	cfff69f3 	.word	0xcfff69f3
 8004f0c:	40008000 	.word	0x40008000
 8004f10:	40013800 	.word	0x40013800
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40004400 	.word	0x40004400
 8004f1c:	40004800 	.word	0x40004800
 8004f20:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f24:	f7fd faf2 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d044      	beq.n	8004fbc <UART_SetConfig+0x384>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d03e      	beq.n	8004fb8 <UART_SetConfig+0x380>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d038      	beq.n	8004fb4 <UART_SetConfig+0x37c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d032      	beq.n	8004fb0 <UART_SetConfig+0x378>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d02c      	beq.n	8004fac <UART_SetConfig+0x374>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	d026      	beq.n	8004fa8 <UART_SetConfig+0x370>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d020      	beq.n	8004fa4 <UART_SetConfig+0x36c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b07      	cmp	r3, #7
 8004f68:	d01a      	beq.n	8004fa0 <UART_SetConfig+0x368>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d014      	beq.n	8004f9c <UART_SetConfig+0x364>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b09      	cmp	r3, #9
 8004f78:	d00e      	beq.n	8004f98 <UART_SetConfig+0x360>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b0a      	cmp	r3, #10
 8004f80:	d008      	beq.n	8004f94 <UART_SetConfig+0x35c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b0b      	cmp	r3, #11
 8004f88:	d102      	bne.n	8004f90 <UART_SetConfig+0x358>
 8004f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f8e:	e016      	b.n	8004fbe <UART_SetConfig+0x386>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e014      	b.n	8004fbe <UART_SetConfig+0x386>
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	e012      	b.n	8004fbe <UART_SetConfig+0x386>
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	e010      	b.n	8004fbe <UART_SetConfig+0x386>
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e00e      	b.n	8004fbe <UART_SetConfig+0x386>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	e00c      	b.n	8004fbe <UART_SetConfig+0x386>
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	e00a      	b.n	8004fbe <UART_SetConfig+0x386>
 8004fa8:	230a      	movs	r3, #10
 8004faa:	e008      	b.n	8004fbe <UART_SetConfig+0x386>
 8004fac:	2308      	movs	r3, #8
 8004fae:	e006      	b.n	8004fbe <UART_SetConfig+0x386>
 8004fb0:	2306      	movs	r3, #6
 8004fb2:	e004      	b.n	8004fbe <UART_SetConfig+0x386>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	e002      	b.n	8004fbe <UART_SetConfig+0x386>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e000      	b.n	8004fbe <UART_SetConfig+0x386>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	617b      	str	r3, [r7, #20]
        break;
 8004fc4:	e0f6      	b.n	80051b4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d044      	beq.n	8005058 <UART_SetConfig+0x420>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d03e      	beq.n	8005054 <UART_SetConfig+0x41c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d038      	beq.n	8005050 <UART_SetConfig+0x418>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d032      	beq.n	800504c <UART_SetConfig+0x414>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d02c      	beq.n	8005048 <UART_SetConfig+0x410>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d026      	beq.n	8005044 <UART_SetConfig+0x40c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d020      	beq.n	8005040 <UART_SetConfig+0x408>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	2b07      	cmp	r3, #7
 8005004:	d01a      	beq.n	800503c <UART_SetConfig+0x404>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2b08      	cmp	r3, #8
 800500c:	d014      	beq.n	8005038 <UART_SetConfig+0x400>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	2b09      	cmp	r3, #9
 8005014:	d00e      	beq.n	8005034 <UART_SetConfig+0x3fc>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b0a      	cmp	r3, #10
 800501c:	d008      	beq.n	8005030 <UART_SetConfig+0x3f8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	2b0b      	cmp	r3, #11
 8005024:	d102      	bne.n	800502c <UART_SetConfig+0x3f4>
 8005026:	f24f 4324 	movw	r3, #62500	; 0xf424
 800502a:	e016      	b.n	800505a <UART_SetConfig+0x422>
 800502c:	4ba1      	ldr	r3, [pc, #644]	; (80052b4 <UART_SetConfig+0x67c>)
 800502e:	e014      	b.n	800505a <UART_SetConfig+0x422>
 8005030:	4ba1      	ldr	r3, [pc, #644]	; (80052b8 <UART_SetConfig+0x680>)
 8005032:	e012      	b.n	800505a <UART_SetConfig+0x422>
 8005034:	4ba1      	ldr	r3, [pc, #644]	; (80052bc <UART_SetConfig+0x684>)
 8005036:	e010      	b.n	800505a <UART_SetConfig+0x422>
 8005038:	4ba1      	ldr	r3, [pc, #644]	; (80052c0 <UART_SetConfig+0x688>)
 800503a:	e00e      	b.n	800505a <UART_SetConfig+0x422>
 800503c:	4ba1      	ldr	r3, [pc, #644]	; (80052c4 <UART_SetConfig+0x68c>)
 800503e:	e00c      	b.n	800505a <UART_SetConfig+0x422>
 8005040:	4ba1      	ldr	r3, [pc, #644]	; (80052c8 <UART_SetConfig+0x690>)
 8005042:	e00a      	b.n	800505a <UART_SetConfig+0x422>
 8005044:	4ba1      	ldr	r3, [pc, #644]	; (80052cc <UART_SetConfig+0x694>)
 8005046:	e008      	b.n	800505a <UART_SetConfig+0x422>
 8005048:	4ba1      	ldr	r3, [pc, #644]	; (80052d0 <UART_SetConfig+0x698>)
 800504a:	e006      	b.n	800505a <UART_SetConfig+0x422>
 800504c:	4ba1      	ldr	r3, [pc, #644]	; (80052d4 <UART_SetConfig+0x69c>)
 800504e:	e004      	b.n	800505a <UART_SetConfig+0x422>
 8005050:	4ba1      	ldr	r3, [pc, #644]	; (80052d8 <UART_SetConfig+0x6a0>)
 8005052:	e002      	b.n	800505a <UART_SetConfig+0x422>
 8005054:	4ba1      	ldr	r3, [pc, #644]	; (80052dc <UART_SetConfig+0x6a4>)
 8005056:	e000      	b.n	800505a <UART_SetConfig+0x422>
 8005058:	4b96      	ldr	r3, [pc, #600]	; (80052b4 <UART_SetConfig+0x67c>)
 800505a:	617b      	str	r3, [r7, #20]
        break;
 800505c:	e0aa      	b.n	80051b4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800505e:	f7fd f9e7 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8005062:	4602      	mov	r2, r0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d044      	beq.n	80050f6 <UART_SetConfig+0x4be>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b01      	cmp	r3, #1
 8005072:	d03e      	beq.n	80050f2 <UART_SetConfig+0x4ba>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2b02      	cmp	r3, #2
 800507a:	d038      	beq.n	80050ee <UART_SetConfig+0x4b6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	2b03      	cmp	r3, #3
 8005082:	d032      	beq.n	80050ea <UART_SetConfig+0x4b2>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b04      	cmp	r3, #4
 800508a:	d02c      	beq.n	80050e6 <UART_SetConfig+0x4ae>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b05      	cmp	r3, #5
 8005092:	d026      	beq.n	80050e2 <UART_SetConfig+0x4aa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2b06      	cmp	r3, #6
 800509a:	d020      	beq.n	80050de <UART_SetConfig+0x4a6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	2b07      	cmp	r3, #7
 80050a2:	d01a      	beq.n	80050da <UART_SetConfig+0x4a2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d014      	beq.n	80050d6 <UART_SetConfig+0x49e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	2b09      	cmp	r3, #9
 80050b2:	d00e      	beq.n	80050d2 <UART_SetConfig+0x49a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	2b0a      	cmp	r3, #10
 80050ba:	d008      	beq.n	80050ce <UART_SetConfig+0x496>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b0b      	cmp	r3, #11
 80050c2:	d102      	bne.n	80050ca <UART_SetConfig+0x492>
 80050c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050c8:	e016      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e014      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	e012      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050d2:	2340      	movs	r3, #64	; 0x40
 80050d4:	e010      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050d6:	2320      	movs	r3, #32
 80050d8:	e00e      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050da:	2310      	movs	r3, #16
 80050dc:	e00c      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050de:	230c      	movs	r3, #12
 80050e0:	e00a      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050e2:	230a      	movs	r3, #10
 80050e4:	e008      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050e6:	2308      	movs	r3, #8
 80050e8:	e006      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050ea:	2306      	movs	r3, #6
 80050ec:	e004      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050ee:	2304      	movs	r3, #4
 80050f0:	e002      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e000      	b.n	80050f8 <UART_SetConfig+0x4c0>
 80050f6:	2301      	movs	r3, #1
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]
        break;
 80050fe:	e059      	b.n	80051b4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d04e      	beq.n	80051a6 <UART_SetConfig+0x56e>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b01      	cmp	r3, #1
 800510e:	d047      	beq.n	80051a0 <UART_SetConfig+0x568>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	2b02      	cmp	r3, #2
 8005116:	d040      	beq.n	800519a <UART_SetConfig+0x562>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2b03      	cmp	r3, #3
 800511e:	d039      	beq.n	8005194 <UART_SetConfig+0x55c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b04      	cmp	r3, #4
 8005126:	d032      	beq.n	800518e <UART_SetConfig+0x556>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b05      	cmp	r3, #5
 800512e:	d02b      	beq.n	8005188 <UART_SetConfig+0x550>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	2b06      	cmp	r3, #6
 8005136:	d024      	beq.n	8005182 <UART_SetConfig+0x54a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	2b07      	cmp	r3, #7
 800513e:	d01d      	beq.n	800517c <UART_SetConfig+0x544>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2b08      	cmp	r3, #8
 8005146:	d016      	beq.n	8005176 <UART_SetConfig+0x53e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	2b09      	cmp	r3, #9
 800514e:	d00f      	beq.n	8005170 <UART_SetConfig+0x538>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b0a      	cmp	r3, #10
 8005156:	d008      	beq.n	800516a <UART_SetConfig+0x532>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	2b0b      	cmp	r3, #11
 800515e:	d101      	bne.n	8005164 <UART_SetConfig+0x52c>
 8005160:	2380      	movs	r3, #128	; 0x80
 8005162:	e022      	b.n	80051aa <UART_SetConfig+0x572>
 8005164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005168:	e01f      	b.n	80051aa <UART_SetConfig+0x572>
 800516a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800516e:	e01c      	b.n	80051aa <UART_SetConfig+0x572>
 8005170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005174:	e019      	b.n	80051aa <UART_SetConfig+0x572>
 8005176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517a:	e016      	b.n	80051aa <UART_SetConfig+0x572>
 800517c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005180:	e013      	b.n	80051aa <UART_SetConfig+0x572>
 8005182:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005186:	e010      	b.n	80051aa <UART_SetConfig+0x572>
 8005188:	f640 43cc 	movw	r3, #3276	; 0xccc
 800518c:	e00d      	b.n	80051aa <UART_SetConfig+0x572>
 800518e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005192:	e00a      	b.n	80051aa <UART_SetConfig+0x572>
 8005194:	f241 5355 	movw	r3, #5461	; 0x1555
 8005198:	e007      	b.n	80051aa <UART_SetConfig+0x572>
 800519a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800519e:	e004      	b.n	80051aa <UART_SetConfig+0x572>
 80051a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051a4:	e001      	b.n	80051aa <UART_SetConfig+0x572>
 80051a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051aa:	617b      	str	r3, [r7, #20]
        break;
 80051ac:	e002      	b.n	80051b4 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	76fb      	strb	r3, [r7, #27]
        break;
 80051b2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 86cd 	beq.w	8005f56 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d305      	bcc.n	80051d8 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d903      	bls.n	80051e0 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	76fb      	strb	r3, [r7, #27]
 80051dc:	f000 bebb 	b.w	8005f56 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80051e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	f200 828d 	bhi.w	8005704 <UART_SetConfig+0xacc>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x5b8>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005215 	.word	0x08005215
 80051f4:	08005705 	.word	0x08005705
 80051f8:	0800537f 	.word	0x0800537f
 80051fc:	08005705 	.word	0x08005705
 8005200:	08005475 	.word	0x08005475
 8005204:	08005705 	.word	0x08005705
 8005208:	08005705 	.word	0x08005705
 800520c:	08005705 	.word	0x08005705
 8005210:	080055b3 	.word	0x080055b3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fd f97a 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8005218:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4618      	mov	r0, r3
 800521e:	f04f 0100 	mov.w	r1, #0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	2b00      	cmp	r3, #0
 8005228:	d07d      	beq.n	8005326 <UART_SetConfig+0x6ee>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2b01      	cmp	r3, #1
 8005230:	d074      	beq.n	800531c <UART_SetConfig+0x6e4>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	2b02      	cmp	r3, #2
 8005238:	d06b      	beq.n	8005312 <UART_SetConfig+0x6da>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b03      	cmp	r3, #3
 8005240:	d062      	beq.n	8005308 <UART_SetConfig+0x6d0>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b04      	cmp	r3, #4
 8005248:	d059      	beq.n	80052fe <UART_SetConfig+0x6c6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b05      	cmp	r3, #5
 8005250:	d050      	beq.n	80052f4 <UART_SetConfig+0x6bc>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b06      	cmp	r3, #6
 8005258:	d047      	beq.n	80052ea <UART_SetConfig+0x6b2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	2b07      	cmp	r3, #7
 8005260:	d03e      	beq.n	80052e0 <UART_SetConfig+0x6a8>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	2b08      	cmp	r3, #8
 8005268:	d01f      	beq.n	80052aa <UART_SetConfig+0x672>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b09      	cmp	r3, #9
 8005270:	d016      	beq.n	80052a0 <UART_SetConfig+0x668>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b0a      	cmp	r3, #10
 8005278:	d00d      	beq.n	8005296 <UART_SetConfig+0x65e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b0b      	cmp	r3, #11
 8005280:	d104      	bne.n	800528c <UART_SetConfig+0x654>
 8005282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005286:	f04f 0400 	mov.w	r4, #0
 800528a:	e050      	b.n	800532e <UART_SetConfig+0x6f6>
 800528c:	f04f 0301 	mov.w	r3, #1
 8005290:	f04f 0400 	mov.w	r4, #0
 8005294:	e04b      	b.n	800532e <UART_SetConfig+0x6f6>
 8005296:	f04f 0380 	mov.w	r3, #128	; 0x80
 800529a:	f04f 0400 	mov.w	r4, #0
 800529e:	e046      	b.n	800532e <UART_SetConfig+0x6f6>
 80052a0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80052a4:	f04f 0400 	mov.w	r4, #0
 80052a8:	e041      	b.n	800532e <UART_SetConfig+0x6f6>
 80052aa:	f04f 0320 	mov.w	r3, #32
 80052ae:	f04f 0400 	mov.w	r4, #0
 80052b2:	e03c      	b.n	800532e <UART_SetConfig+0x6f6>
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	0001e848 	.word	0x0001e848
 80052bc:	0003d090 	.word	0x0003d090
 80052c0:	0007a120 	.word	0x0007a120
 80052c4:	000f4240 	.word	0x000f4240
 80052c8:	00145855 	.word	0x00145855
 80052cc:	00186a00 	.word	0x00186a00
 80052d0:	001e8480 	.word	0x001e8480
 80052d4:	0028b0aa 	.word	0x0028b0aa
 80052d8:	003d0900 	.word	0x003d0900
 80052dc:	007a1200 	.word	0x007a1200
 80052e0:	f04f 0310 	mov.w	r3, #16
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	e021      	b.n	800532e <UART_SetConfig+0x6f6>
 80052ea:	f04f 030c 	mov.w	r3, #12
 80052ee:	f04f 0400 	mov.w	r4, #0
 80052f2:	e01c      	b.n	800532e <UART_SetConfig+0x6f6>
 80052f4:	f04f 030a 	mov.w	r3, #10
 80052f8:	f04f 0400 	mov.w	r4, #0
 80052fc:	e017      	b.n	800532e <UART_SetConfig+0x6f6>
 80052fe:	f04f 0308 	mov.w	r3, #8
 8005302:	f04f 0400 	mov.w	r4, #0
 8005306:	e012      	b.n	800532e <UART_SetConfig+0x6f6>
 8005308:	f04f 0306 	mov.w	r3, #6
 800530c:	f04f 0400 	mov.w	r4, #0
 8005310:	e00d      	b.n	800532e <UART_SetConfig+0x6f6>
 8005312:	f04f 0304 	mov.w	r3, #4
 8005316:	f04f 0400 	mov.w	r4, #0
 800531a:	e008      	b.n	800532e <UART_SetConfig+0x6f6>
 800531c:	f04f 0302 	mov.w	r3, #2
 8005320:	f04f 0400 	mov.w	r4, #0
 8005324:	e003      	b.n	800532e <UART_SetConfig+0x6f6>
 8005326:	f04f 0301 	mov.w	r3, #1
 800532a:	f04f 0400 	mov.w	r4, #0
 800532e:	461a      	mov	r2, r3
 8005330:	4623      	mov	r3, r4
 8005332:	f7fa ff71 	bl	8000218 <__aeabi_uldivmod>
 8005336:	4603      	mov	r3, r0
 8005338:	460c      	mov	r4, r1
 800533a:	4619      	mov	r1, r3
 800533c:	4622      	mov	r2, r4
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	f04f 0400 	mov.w	r4, #0
 8005346:	0214      	lsls	r4, r2, #8
 8005348:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800534c:	020b      	lsls	r3, r1, #8
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6852      	ldr	r2, [r2, #4]
 8005352:	0852      	lsrs	r2, r2, #1
 8005354:	4611      	mov	r1, r2
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	eb13 0b01 	adds.w	fp, r3, r1
 800535e:	eb44 0c02 	adc.w	ip, r4, r2
 8005362:	4658      	mov	r0, fp
 8005364:	4661      	mov	r1, ip
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f04f 0400 	mov.w	r4, #0
 800536e:	461a      	mov	r2, r3
 8005370:	4623      	mov	r3, r4
 8005372:	f7fa ff51 	bl	8000218 <__aeabi_uldivmod>
 8005376:	4603      	mov	r3, r0
 8005378:	460c      	mov	r4, r1
 800537a:	61fb      	str	r3, [r7, #28]
            break;
 800537c:	e1c5      	b.n	800570a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	2b00      	cmp	r3, #0
 8005384:	d05b      	beq.n	800543e <UART_SetConfig+0x806>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2b01      	cmp	r3, #1
 800538c:	d053      	beq.n	8005436 <UART_SetConfig+0x7fe>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b02      	cmp	r3, #2
 8005394:	d04b      	beq.n	800542e <UART_SetConfig+0x7f6>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b03      	cmp	r3, #3
 800539c:	d043      	beq.n	8005426 <UART_SetConfig+0x7ee>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d03b      	beq.n	800541e <UART_SetConfig+0x7e6>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d033      	beq.n	8005416 <UART_SetConfig+0x7de>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	2b06      	cmp	r3, #6
 80053b4:	d02b      	beq.n	800540e <UART_SetConfig+0x7d6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b07      	cmp	r3, #7
 80053bc:	d023      	beq.n	8005406 <UART_SetConfig+0x7ce>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d01b      	beq.n	80053fe <UART_SetConfig+0x7c6>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b09      	cmp	r3, #9
 80053cc:	d013      	beq.n	80053f6 <UART_SetConfig+0x7be>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b0a      	cmp	r3, #10
 80053d4:	d00b      	beq.n	80053ee <UART_SetConfig+0x7b6>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b0b      	cmp	r3, #11
 80053dc:	d103      	bne.n	80053e6 <UART_SetConfig+0x7ae>
 80053de:	4bae      	ldr	r3, [pc, #696]	; (8005698 <UART_SetConfig+0xa60>)
 80053e0:	f04f 0400 	mov.w	r4, #0
 80053e4:	e02e      	b.n	8005444 <UART_SetConfig+0x80c>
 80053e6:	4bad      	ldr	r3, [pc, #692]	; (800569c <UART_SetConfig+0xa64>)
 80053e8:	f04f 0400 	mov.w	r4, #0
 80053ec:	e02a      	b.n	8005444 <UART_SetConfig+0x80c>
 80053ee:	4bac      	ldr	r3, [pc, #688]	; (80056a0 <UART_SetConfig+0xa68>)
 80053f0:	f04f 0400 	mov.w	r4, #0
 80053f4:	e026      	b.n	8005444 <UART_SetConfig+0x80c>
 80053f6:	4bab      	ldr	r3, [pc, #684]	; (80056a4 <UART_SetConfig+0xa6c>)
 80053f8:	f04f 0400 	mov.w	r4, #0
 80053fc:	e022      	b.n	8005444 <UART_SetConfig+0x80c>
 80053fe:	4baa      	ldr	r3, [pc, #680]	; (80056a8 <UART_SetConfig+0xa70>)
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	e01e      	b.n	8005444 <UART_SetConfig+0x80c>
 8005406:	4ba9      	ldr	r3, [pc, #676]	; (80056ac <UART_SetConfig+0xa74>)
 8005408:	f04f 0400 	mov.w	r4, #0
 800540c:	e01a      	b.n	8005444 <UART_SetConfig+0x80c>
 800540e:	a49e      	add	r4, pc, #632	; (adr r4, 8005688 <UART_SetConfig+0xa50>)
 8005410:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005414:	e016      	b.n	8005444 <UART_SetConfig+0x80c>
 8005416:	4ba6      	ldr	r3, [pc, #664]	; (80056b0 <UART_SetConfig+0xa78>)
 8005418:	f04f 0400 	mov.w	r4, #0
 800541c:	e012      	b.n	8005444 <UART_SetConfig+0x80c>
 800541e:	4ba5      	ldr	r3, [pc, #660]	; (80056b4 <UART_SetConfig+0xa7c>)
 8005420:	f04f 0400 	mov.w	r4, #0
 8005424:	e00e      	b.n	8005444 <UART_SetConfig+0x80c>
 8005426:	a49a      	add	r4, pc, #616	; (adr r4, 8005690 <UART_SetConfig+0xa58>)
 8005428:	e9d4 3400 	ldrd	r3, r4, [r4]
 800542c:	e00a      	b.n	8005444 <UART_SetConfig+0x80c>
 800542e:	4ba2      	ldr	r3, [pc, #648]	; (80056b8 <UART_SetConfig+0xa80>)
 8005430:	f04f 0400 	mov.w	r4, #0
 8005434:	e006      	b.n	8005444 <UART_SetConfig+0x80c>
 8005436:	4ba1      	ldr	r3, [pc, #644]	; (80056bc <UART_SetConfig+0xa84>)
 8005438:	f04f 0400 	mov.w	r4, #0
 800543c:	e002      	b.n	8005444 <UART_SetConfig+0x80c>
 800543e:	4b97      	ldr	r3, [pc, #604]	; (800569c <UART_SetConfig+0xa64>)
 8005440:	f04f 0400 	mov.w	r4, #0
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6852      	ldr	r2, [r2, #4]
 8005448:	0852      	lsrs	r2, r2, #1
 800544a:	4611      	mov	r1, r2
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	eb13 0b01 	adds.w	fp, r3, r1
 8005454:	eb44 0c02 	adc.w	ip, r4, r2
 8005458:	4658      	mov	r0, fp
 800545a:	4661      	mov	r1, ip
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f04f 0400 	mov.w	r4, #0
 8005464:	461a      	mov	r2, r3
 8005466:	4623      	mov	r3, r4
 8005468:	f7fa fed6 	bl	8000218 <__aeabi_uldivmod>
 800546c:	4603      	mov	r3, r0
 800546e:	460c      	mov	r4, r1
 8005470:	61fb      	str	r3, [r7, #28]
            break;
 8005472:	e14a      	b.n	800570a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005474:	f7fc ffdc 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8005478:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4618      	mov	r0, r3
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d067      	beq.n	800555a <UART_SetConfig+0x922>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b01      	cmp	r3, #1
 8005490:	d05e      	beq.n	8005550 <UART_SetConfig+0x918>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b02      	cmp	r3, #2
 8005498:	d055      	beq.n	8005546 <UART_SetConfig+0x90e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d04c      	beq.n	800553c <UART_SetConfig+0x904>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d043      	beq.n	8005532 <UART_SetConfig+0x8fa>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d03a      	beq.n	8005528 <UART_SetConfig+0x8f0>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d031      	beq.n	800551e <UART_SetConfig+0x8e6>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	2b07      	cmp	r3, #7
 80054c0:	d028      	beq.n	8005514 <UART_SetConfig+0x8dc>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d01f      	beq.n	800550a <UART_SetConfig+0x8d2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b09      	cmp	r3, #9
 80054d0:	d016      	beq.n	8005500 <UART_SetConfig+0x8c8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b0a      	cmp	r3, #10
 80054d8:	d00d      	beq.n	80054f6 <UART_SetConfig+0x8be>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b0b      	cmp	r3, #11
 80054e0:	d104      	bne.n	80054ec <UART_SetConfig+0x8b4>
 80054e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054e6:	f04f 0400 	mov.w	r4, #0
 80054ea:	e03a      	b.n	8005562 <UART_SetConfig+0x92a>
 80054ec:	f04f 0301 	mov.w	r3, #1
 80054f0:	f04f 0400 	mov.w	r4, #0
 80054f4:	e035      	b.n	8005562 <UART_SetConfig+0x92a>
 80054f6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054fa:	f04f 0400 	mov.w	r4, #0
 80054fe:	e030      	b.n	8005562 <UART_SetConfig+0x92a>
 8005500:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005504:	f04f 0400 	mov.w	r4, #0
 8005508:	e02b      	b.n	8005562 <UART_SetConfig+0x92a>
 800550a:	f04f 0320 	mov.w	r3, #32
 800550e:	f04f 0400 	mov.w	r4, #0
 8005512:	e026      	b.n	8005562 <UART_SetConfig+0x92a>
 8005514:	f04f 0310 	mov.w	r3, #16
 8005518:	f04f 0400 	mov.w	r4, #0
 800551c:	e021      	b.n	8005562 <UART_SetConfig+0x92a>
 800551e:	f04f 030c 	mov.w	r3, #12
 8005522:	f04f 0400 	mov.w	r4, #0
 8005526:	e01c      	b.n	8005562 <UART_SetConfig+0x92a>
 8005528:	f04f 030a 	mov.w	r3, #10
 800552c:	f04f 0400 	mov.w	r4, #0
 8005530:	e017      	b.n	8005562 <UART_SetConfig+0x92a>
 8005532:	f04f 0308 	mov.w	r3, #8
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	e012      	b.n	8005562 <UART_SetConfig+0x92a>
 800553c:	f04f 0306 	mov.w	r3, #6
 8005540:	f04f 0400 	mov.w	r4, #0
 8005544:	e00d      	b.n	8005562 <UART_SetConfig+0x92a>
 8005546:	f04f 0304 	mov.w	r3, #4
 800554a:	f04f 0400 	mov.w	r4, #0
 800554e:	e008      	b.n	8005562 <UART_SetConfig+0x92a>
 8005550:	f04f 0302 	mov.w	r3, #2
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	e003      	b.n	8005562 <UART_SetConfig+0x92a>
 800555a:	f04f 0301 	mov.w	r3, #1
 800555e:	f04f 0400 	mov.w	r4, #0
 8005562:	461a      	mov	r2, r3
 8005564:	4623      	mov	r3, r4
 8005566:	f7fa fe57 	bl	8000218 <__aeabi_uldivmod>
 800556a:	4603      	mov	r3, r0
 800556c:	460c      	mov	r4, r1
 800556e:	4619      	mov	r1, r3
 8005570:	4622      	mov	r2, r4
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	f04f 0400 	mov.w	r4, #0
 800557a:	0214      	lsls	r4, r2, #8
 800557c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005580:	020b      	lsls	r3, r1, #8
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6852      	ldr	r2, [r2, #4]
 8005586:	0852      	lsrs	r2, r2, #1
 8005588:	4611      	mov	r1, r2
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	eb13 0b01 	adds.w	fp, r3, r1
 8005592:	eb44 0c02 	adc.w	ip, r4, r2
 8005596:	4658      	mov	r0, fp
 8005598:	4661      	mov	r1, ip
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f04f 0400 	mov.w	r4, #0
 80055a2:	461a      	mov	r2, r3
 80055a4:	4623      	mov	r3, r4
 80055a6:	f7fa fe37 	bl	8000218 <__aeabi_uldivmod>
 80055aa:	4603      	mov	r3, r0
 80055ac:	460c      	mov	r4, r1
 80055ae:	61fb      	str	r3, [r7, #28]
            break;
 80055b0:	e0ab      	b.n	800570a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8088 	beq.w	80056cc <UART_SetConfig+0xa94>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d05b      	beq.n	800567c <UART_SetConfig+0xa44>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d052      	beq.n	8005672 <UART_SetConfig+0xa3a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d04a      	beq.n	800566a <UART_SetConfig+0xa32>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d041      	beq.n	8005660 <UART_SetConfig+0xa28>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d039      	beq.n	8005658 <UART_SetConfig+0xa20>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b06      	cmp	r3, #6
 80055ea:	d031      	beq.n	8005650 <UART_SetConfig+0xa18>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	2b07      	cmp	r3, #7
 80055f2:	d028      	beq.n	8005646 <UART_SetConfig+0xa0e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d01f      	beq.n	800563c <UART_SetConfig+0xa04>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	2b09      	cmp	r3, #9
 8005602:	d016      	beq.n	8005632 <UART_SetConfig+0x9fa>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2b0a      	cmp	r3, #10
 800560a:	d00d      	beq.n	8005628 <UART_SetConfig+0x9f0>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	2b0b      	cmp	r3, #11
 8005612:	d104      	bne.n	800561e <UART_SetConfig+0x9e6>
 8005614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	e05a      	b.n	80056d4 <UART_SetConfig+0xa9c>
 800561e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005622:	f04f 0400 	mov.w	r4, #0
 8005626:	e055      	b.n	80056d4 <UART_SetConfig+0xa9c>
 8005628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800562c:	f04f 0400 	mov.w	r4, #0
 8005630:	e050      	b.n	80056d4 <UART_SetConfig+0xa9c>
 8005632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005636:	f04f 0400 	mov.w	r4, #0
 800563a:	e04b      	b.n	80056d4 <UART_SetConfig+0xa9c>
 800563c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005640:	f04f 0400 	mov.w	r4, #0
 8005644:	e046      	b.n	80056d4 <UART_SetConfig+0xa9c>
 8005646:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800564a:	f04f 0400 	mov.w	r4, #0
 800564e:	e041      	b.n	80056d4 <UART_SetConfig+0xa9c>
 8005650:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <UART_SetConfig+0xa88>)
 8005652:	f04f 0400 	mov.w	r4, #0
 8005656:	e03d      	b.n	80056d4 <UART_SetConfig+0xa9c>
 8005658:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <UART_SetConfig+0xa8c>)
 800565a:	f04f 0400 	mov.w	r4, #0
 800565e:	e039      	b.n	80056d4 <UART_SetConfig+0xa9c>
 8005660:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005664:	f04f 0400 	mov.w	r4, #0
 8005668:	e034      	b.n	80056d4 <UART_SetConfig+0xa9c>
 800566a:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <UART_SetConfig+0xa90>)
 800566c:	f04f 0400 	mov.w	r4, #0
 8005670:	e030      	b.n	80056d4 <UART_SetConfig+0xa9c>
 8005672:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005676:	f04f 0400 	mov.w	r4, #0
 800567a:	e02b      	b.n	80056d4 <UART_SetConfig+0xa9c>
 800567c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005680:	f04f 0400 	mov.w	r4, #0
 8005684:	e026      	b.n	80056d4 <UART_SetConfig+0xa9c>
 8005686:	bf00      	nop
 8005688:	14585500 	.word	0x14585500
 800568c:	00000000 	.word	0x00000000
 8005690:	28b0aa00 	.word	0x28b0aa00
 8005694:	00000000 	.word	0x00000000
 8005698:	00f42400 	.word	0x00f42400
 800569c:	f4240000 	.word	0xf4240000
 80056a0:	01e84800 	.word	0x01e84800
 80056a4:	03d09000 	.word	0x03d09000
 80056a8:	07a12000 	.word	0x07a12000
 80056ac:	0f424000 	.word	0x0f424000
 80056b0:	186a0000 	.word	0x186a0000
 80056b4:	1e848000 	.word	0x1e848000
 80056b8:	3d090000 	.word	0x3d090000
 80056bc:	7a120000 	.word	0x7a120000
 80056c0:	000aaa00 	.word	0x000aaa00
 80056c4:	000ccc00 	.word	0x000ccc00
 80056c8:	00155500 	.word	0x00155500
 80056cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056d0:	f04f 0400 	mov.w	r4, #0
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6852      	ldr	r2, [r2, #4]
 80056d8:	0852      	lsrs	r2, r2, #1
 80056da:	4611      	mov	r1, r2
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	eb13 0b01 	adds.w	fp, r3, r1
 80056e4:	eb44 0c02 	adc.w	ip, r4, r2
 80056e8:	4658      	mov	r0, fp
 80056ea:	4661      	mov	r1, ip
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f04f 0400 	mov.w	r4, #0
 80056f4:	461a      	mov	r2, r3
 80056f6:	4623      	mov	r3, r4
 80056f8:	f7fa fd8e 	bl	8000218 <__aeabi_uldivmod>
 80056fc:	4603      	mov	r3, r0
 80056fe:	460c      	mov	r4, r1
 8005700:	61fb      	str	r3, [r7, #28]
            break;
 8005702:	e002      	b.n	800570a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	76fb      	strb	r3, [r7, #27]
            break;
 8005708:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005710:	d309      	bcc.n	8005726 <UART_SetConfig+0xaee>
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005718:	d205      	bcs.n	8005726 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	60da      	str	r2, [r3, #12]
 8005722:	f000 bc18 	b.w	8005f56 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	76fb      	strb	r3, [r7, #27]
 800572a:	f000 bc14 	b.w	8005f56 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005736:	f040 8204 	bne.w	8005b42 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800573a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800573e:	2b08      	cmp	r3, #8
 8005740:	f200 81df 	bhi.w	8005b02 <UART_SetConfig+0xeca>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <UART_SetConfig+0xb14>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	08005771 	.word	0x08005771
 8005750:	08005829 	.word	0x08005829
 8005754:	080058e1 	.word	0x080058e1
 8005758:	08005b03 	.word	0x08005b03
 800575c:	08005989 	.word	0x08005989
 8005760:	08005b03 	.word	0x08005b03
 8005764:	08005b03 	.word	0x08005b03
 8005768:	08005b03 	.word	0x08005b03
 800576c:	08005a41 	.word	0x08005a41
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005770:	f7fc fecc 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8005774:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	d044      	beq.n	8005808 <UART_SetConfig+0xbd0>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b01      	cmp	r3, #1
 8005784:	d03e      	beq.n	8005804 <UART_SetConfig+0xbcc>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b02      	cmp	r3, #2
 800578c:	d038      	beq.n	8005800 <UART_SetConfig+0xbc8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	2b03      	cmp	r3, #3
 8005794:	d032      	beq.n	80057fc <UART_SetConfig+0xbc4>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b04      	cmp	r3, #4
 800579c:	d02c      	beq.n	80057f8 <UART_SetConfig+0xbc0>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2b05      	cmp	r3, #5
 80057a4:	d026      	beq.n	80057f4 <UART_SetConfig+0xbbc>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d020      	beq.n	80057f0 <UART_SetConfig+0xbb8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	2b07      	cmp	r3, #7
 80057b4:	d01a      	beq.n	80057ec <UART_SetConfig+0xbb4>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d014      	beq.n	80057e8 <UART_SetConfig+0xbb0>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	2b09      	cmp	r3, #9
 80057c4:	d00e      	beq.n	80057e4 <UART_SetConfig+0xbac>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b0a      	cmp	r3, #10
 80057cc:	d008      	beq.n	80057e0 <UART_SetConfig+0xba8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	2b0b      	cmp	r3, #11
 80057d4:	d102      	bne.n	80057dc <UART_SetConfig+0xba4>
 80057d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057da:	e016      	b.n	800580a <UART_SetConfig+0xbd2>
 80057dc:	2301      	movs	r3, #1
 80057de:	e014      	b.n	800580a <UART_SetConfig+0xbd2>
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	e012      	b.n	800580a <UART_SetConfig+0xbd2>
 80057e4:	2340      	movs	r3, #64	; 0x40
 80057e6:	e010      	b.n	800580a <UART_SetConfig+0xbd2>
 80057e8:	2320      	movs	r3, #32
 80057ea:	e00e      	b.n	800580a <UART_SetConfig+0xbd2>
 80057ec:	2310      	movs	r3, #16
 80057ee:	e00c      	b.n	800580a <UART_SetConfig+0xbd2>
 80057f0:	230c      	movs	r3, #12
 80057f2:	e00a      	b.n	800580a <UART_SetConfig+0xbd2>
 80057f4:	230a      	movs	r3, #10
 80057f6:	e008      	b.n	800580a <UART_SetConfig+0xbd2>
 80057f8:	2308      	movs	r3, #8
 80057fa:	e006      	b.n	800580a <UART_SetConfig+0xbd2>
 80057fc:	2306      	movs	r3, #6
 80057fe:	e004      	b.n	800580a <UART_SetConfig+0xbd2>
 8005800:	2304      	movs	r3, #4
 8005802:	e002      	b.n	800580a <UART_SetConfig+0xbd2>
 8005804:	2302      	movs	r3, #2
 8005806:	e000      	b.n	800580a <UART_SetConfig+0xbd2>
 8005808:	2301      	movs	r3, #1
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005810:	005a      	lsls	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	441a      	add	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005822:	b29b      	uxth	r3, r3
 8005824:	61fb      	str	r3, [r7, #28]
        break;
 8005826:	e16f      	b.n	8005b08 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005828:	f7fc fe86 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 800582c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b00      	cmp	r3, #0
 8005834:	d044      	beq.n	80058c0 <UART_SetConfig+0xc88>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b01      	cmp	r3, #1
 800583c:	d03e      	beq.n	80058bc <UART_SetConfig+0xc84>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b02      	cmp	r3, #2
 8005844:	d038      	beq.n	80058b8 <UART_SetConfig+0xc80>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b03      	cmp	r3, #3
 800584c:	d032      	beq.n	80058b4 <UART_SetConfig+0xc7c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b04      	cmp	r3, #4
 8005854:	d02c      	beq.n	80058b0 <UART_SetConfig+0xc78>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b05      	cmp	r3, #5
 800585c:	d026      	beq.n	80058ac <UART_SetConfig+0xc74>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b06      	cmp	r3, #6
 8005864:	d020      	beq.n	80058a8 <UART_SetConfig+0xc70>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b07      	cmp	r3, #7
 800586c:	d01a      	beq.n	80058a4 <UART_SetConfig+0xc6c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b08      	cmp	r3, #8
 8005874:	d014      	beq.n	80058a0 <UART_SetConfig+0xc68>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b09      	cmp	r3, #9
 800587c:	d00e      	beq.n	800589c <UART_SetConfig+0xc64>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b0a      	cmp	r3, #10
 8005884:	d008      	beq.n	8005898 <UART_SetConfig+0xc60>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b0b      	cmp	r3, #11
 800588c:	d102      	bne.n	8005894 <UART_SetConfig+0xc5c>
 800588e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005892:	e016      	b.n	80058c2 <UART_SetConfig+0xc8a>
 8005894:	2301      	movs	r3, #1
 8005896:	e014      	b.n	80058c2 <UART_SetConfig+0xc8a>
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	e012      	b.n	80058c2 <UART_SetConfig+0xc8a>
 800589c:	2340      	movs	r3, #64	; 0x40
 800589e:	e010      	b.n	80058c2 <UART_SetConfig+0xc8a>
 80058a0:	2320      	movs	r3, #32
 80058a2:	e00e      	b.n	80058c2 <UART_SetConfig+0xc8a>
 80058a4:	2310      	movs	r3, #16
 80058a6:	e00c      	b.n	80058c2 <UART_SetConfig+0xc8a>
 80058a8:	230c      	movs	r3, #12
 80058aa:	e00a      	b.n	80058c2 <UART_SetConfig+0xc8a>
 80058ac:	230a      	movs	r3, #10
 80058ae:	e008      	b.n	80058c2 <UART_SetConfig+0xc8a>
 80058b0:	2308      	movs	r3, #8
 80058b2:	e006      	b.n	80058c2 <UART_SetConfig+0xc8a>
 80058b4:	2306      	movs	r3, #6
 80058b6:	e004      	b.n	80058c2 <UART_SetConfig+0xc8a>
 80058b8:	2304      	movs	r3, #4
 80058ba:	e002      	b.n	80058c2 <UART_SetConfig+0xc8a>
 80058bc:	2302      	movs	r3, #2
 80058be:	e000      	b.n	80058c2 <UART_SetConfig+0xc8a>
 80058c0:	2301      	movs	r3, #1
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	005a      	lsls	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	441a      	add	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	b29b      	uxth	r3, r3
 80058dc:	61fb      	str	r3, [r7, #28]
        break;
 80058de:	e113      	b.n	8005b08 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d043      	beq.n	8005970 <UART_SetConfig+0xd38>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d03d      	beq.n	800596c <UART_SetConfig+0xd34>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d037      	beq.n	8005968 <UART_SetConfig+0xd30>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d031      	beq.n	8005964 <UART_SetConfig+0xd2c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b04      	cmp	r3, #4
 8005906:	d02b      	beq.n	8005960 <UART_SetConfig+0xd28>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b05      	cmp	r3, #5
 800590e:	d025      	beq.n	800595c <UART_SetConfig+0xd24>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b06      	cmp	r3, #6
 8005916:	d01f      	beq.n	8005958 <UART_SetConfig+0xd20>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b07      	cmp	r3, #7
 800591e:	d019      	beq.n	8005954 <UART_SetConfig+0xd1c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	2b08      	cmp	r3, #8
 8005926:	d013      	beq.n	8005950 <UART_SetConfig+0xd18>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b09      	cmp	r3, #9
 800592e:	d00d      	beq.n	800594c <UART_SetConfig+0xd14>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b0a      	cmp	r3, #10
 8005936:	d007      	beq.n	8005948 <UART_SetConfig+0xd10>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b0b      	cmp	r3, #11
 800593e:	d101      	bne.n	8005944 <UART_SetConfig+0xd0c>
 8005940:	4b8d      	ldr	r3, [pc, #564]	; (8005b78 <UART_SetConfig+0xf40>)
 8005942:	e016      	b.n	8005972 <UART_SetConfig+0xd3a>
 8005944:	4b8d      	ldr	r3, [pc, #564]	; (8005b7c <UART_SetConfig+0xf44>)
 8005946:	e014      	b.n	8005972 <UART_SetConfig+0xd3a>
 8005948:	4b8d      	ldr	r3, [pc, #564]	; (8005b80 <UART_SetConfig+0xf48>)
 800594a:	e012      	b.n	8005972 <UART_SetConfig+0xd3a>
 800594c:	4b8d      	ldr	r3, [pc, #564]	; (8005b84 <UART_SetConfig+0xf4c>)
 800594e:	e010      	b.n	8005972 <UART_SetConfig+0xd3a>
 8005950:	4b8d      	ldr	r3, [pc, #564]	; (8005b88 <UART_SetConfig+0xf50>)
 8005952:	e00e      	b.n	8005972 <UART_SetConfig+0xd3a>
 8005954:	4b8d      	ldr	r3, [pc, #564]	; (8005b8c <UART_SetConfig+0xf54>)
 8005956:	e00c      	b.n	8005972 <UART_SetConfig+0xd3a>
 8005958:	4b8d      	ldr	r3, [pc, #564]	; (8005b90 <UART_SetConfig+0xf58>)
 800595a:	e00a      	b.n	8005972 <UART_SetConfig+0xd3a>
 800595c:	4b8d      	ldr	r3, [pc, #564]	; (8005b94 <UART_SetConfig+0xf5c>)
 800595e:	e008      	b.n	8005972 <UART_SetConfig+0xd3a>
 8005960:	4b8d      	ldr	r3, [pc, #564]	; (8005b98 <UART_SetConfig+0xf60>)
 8005962:	e006      	b.n	8005972 <UART_SetConfig+0xd3a>
 8005964:	4b8d      	ldr	r3, [pc, #564]	; (8005b9c <UART_SetConfig+0xf64>)
 8005966:	e004      	b.n	8005972 <UART_SetConfig+0xd3a>
 8005968:	4b8d      	ldr	r3, [pc, #564]	; (8005ba0 <UART_SetConfig+0xf68>)
 800596a:	e002      	b.n	8005972 <UART_SetConfig+0xd3a>
 800596c:	4b8d      	ldr	r3, [pc, #564]	; (8005ba4 <UART_SetConfig+0xf6c>)
 800596e:	e000      	b.n	8005972 <UART_SetConfig+0xd3a>
 8005970:	4b82      	ldr	r3, [pc, #520]	; (8005b7c <UART_SetConfig+0xf44>)
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6852      	ldr	r2, [r2, #4]
 8005976:	0852      	lsrs	r2, r2, #1
 8005978:	441a      	add	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	b29b      	uxth	r3, r3
 8005984:	61fb      	str	r3, [r7, #28]
        break;
 8005986:	e0bf      	b.n	8005b08 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005988:	f7fc fd52 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 800598c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b00      	cmp	r3, #0
 8005994:	d044      	beq.n	8005a20 <UART_SetConfig+0xde8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b01      	cmp	r3, #1
 800599c:	d03e      	beq.n	8005a1c <UART_SetConfig+0xde4>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d038      	beq.n	8005a18 <UART_SetConfig+0xde0>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d032      	beq.n	8005a14 <UART_SetConfig+0xddc>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d02c      	beq.n	8005a10 <UART_SetConfig+0xdd8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2b05      	cmp	r3, #5
 80059bc:	d026      	beq.n	8005a0c <UART_SetConfig+0xdd4>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d020      	beq.n	8005a08 <UART_SetConfig+0xdd0>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b07      	cmp	r3, #7
 80059cc:	d01a      	beq.n	8005a04 <UART_SetConfig+0xdcc>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d014      	beq.n	8005a00 <UART_SetConfig+0xdc8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b09      	cmp	r3, #9
 80059dc:	d00e      	beq.n	80059fc <UART_SetConfig+0xdc4>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	2b0a      	cmp	r3, #10
 80059e4:	d008      	beq.n	80059f8 <UART_SetConfig+0xdc0>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b0b      	cmp	r3, #11
 80059ec:	d102      	bne.n	80059f4 <UART_SetConfig+0xdbc>
 80059ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f2:	e016      	b.n	8005a22 <UART_SetConfig+0xdea>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e014      	b.n	8005a22 <UART_SetConfig+0xdea>
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	e012      	b.n	8005a22 <UART_SetConfig+0xdea>
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	e010      	b.n	8005a22 <UART_SetConfig+0xdea>
 8005a00:	2320      	movs	r3, #32
 8005a02:	e00e      	b.n	8005a22 <UART_SetConfig+0xdea>
 8005a04:	2310      	movs	r3, #16
 8005a06:	e00c      	b.n	8005a22 <UART_SetConfig+0xdea>
 8005a08:	230c      	movs	r3, #12
 8005a0a:	e00a      	b.n	8005a22 <UART_SetConfig+0xdea>
 8005a0c:	230a      	movs	r3, #10
 8005a0e:	e008      	b.n	8005a22 <UART_SetConfig+0xdea>
 8005a10:	2308      	movs	r3, #8
 8005a12:	e006      	b.n	8005a22 <UART_SetConfig+0xdea>
 8005a14:	2306      	movs	r3, #6
 8005a16:	e004      	b.n	8005a22 <UART_SetConfig+0xdea>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	e002      	b.n	8005a22 <UART_SetConfig+0xdea>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e000      	b.n	8005a22 <UART_SetConfig+0xdea>
 8005a20:	2301      	movs	r3, #1
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	005a      	lsls	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	441a      	add	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	61fb      	str	r3, [r7, #28]
        break;
 8005a3e:	e063      	b.n	8005b08 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d04f      	beq.n	8005ae8 <UART_SetConfig+0xeb0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d048      	beq.n	8005ae2 <UART_SetConfig+0xeaa>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d041      	beq.n	8005adc <UART_SetConfig+0xea4>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d03a      	beq.n	8005ad6 <UART_SetConfig+0xe9e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d033      	beq.n	8005ad0 <UART_SetConfig+0xe98>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d02c      	beq.n	8005aca <UART_SetConfig+0xe92>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b06      	cmp	r3, #6
 8005a76:	d025      	beq.n	8005ac4 <UART_SetConfig+0xe8c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2b07      	cmp	r3, #7
 8005a7e:	d01e      	beq.n	8005abe <UART_SetConfig+0xe86>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d017      	beq.n	8005ab8 <UART_SetConfig+0xe80>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b09      	cmp	r3, #9
 8005a8e:	d010      	beq.n	8005ab2 <UART_SetConfig+0xe7a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b0a      	cmp	r3, #10
 8005a96:	d009      	beq.n	8005aac <UART_SetConfig+0xe74>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	2b0b      	cmp	r3, #11
 8005a9e:	d102      	bne.n	8005aa6 <UART_SetConfig+0xe6e>
 8005aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aa4:	e022      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aaa:	e01f      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab0:	e01c      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ab6:	e019      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005abc:	e016      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ac2:	e013      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005ac4:	f241 5354 	movw	r3, #5460	; 0x1554
 8005ac8:	e010      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005aca:	f641 1398 	movw	r3, #6552	; 0x1998
 8005ace:	e00d      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ad4:	e00a      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005ad6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005ada:	e007      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005adc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ae0:	e004      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae6:	e001      	b.n	8005aec <UART_SetConfig+0xeb4>
 8005ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6852      	ldr	r2, [r2, #4]
 8005af0:	0852      	lsrs	r2, r2, #1
 8005af2:	441a      	add	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	61fb      	str	r3, [r7, #28]
        break;
 8005b00:	e002      	b.n	8005b08 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	76fb      	strb	r3, [r7, #27]
        break;
 8005b06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	d916      	bls.n	8005b3c <UART_SetConfig+0xf04>
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b14:	d212      	bcs.n	8005b3c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f023 030f 	bic.w	r3, r3, #15
 8005b1e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	89fb      	ldrh	r3, [r7, #14]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	89fa      	ldrh	r2, [r7, #14]
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	e20c      	b.n	8005f56 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	76fb      	strb	r3, [r7, #27]
 8005b40:	e209      	b.n	8005f56 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8005b42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	f200 81f4 	bhi.w	8005f34 <UART_SetConfig+0x12fc>
 8005b4c:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <UART_SetConfig+0xf1c>)
 8005b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b52:	bf00      	nop
 8005b54:	08005ba9 	.word	0x08005ba9
 8005b58:	08005c5f 	.word	0x08005c5f
 8005b5c:	08005d15 	.word	0x08005d15
 8005b60:	08005f35 	.word	0x08005f35
 8005b64:	08005dbf 	.word	0x08005dbf
 8005b68:	08005f35 	.word	0x08005f35
 8005b6c:	08005f35 	.word	0x08005f35
 8005b70:	08005f35 	.word	0x08005f35
 8005b74:	08005e75 	.word	0x08005e75
 8005b78:	0001e848 	.word	0x0001e848
 8005b7c:	01e84800 	.word	0x01e84800
 8005b80:	0003d090 	.word	0x0003d090
 8005b84:	0007a120 	.word	0x0007a120
 8005b88:	000f4240 	.word	0x000f4240
 8005b8c:	001e8480 	.word	0x001e8480
 8005b90:	0028b0aa 	.word	0x0028b0aa
 8005b94:	0030d400 	.word	0x0030d400
 8005b98:	003d0900 	.word	0x003d0900
 8005b9c:	00516154 	.word	0x00516154
 8005ba0:	007a1200 	.word	0x007a1200
 8005ba4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba8:	f7fc fcb0 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8005bac:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d044      	beq.n	8005c40 <UART_SetConfig+0x1008>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d03e      	beq.n	8005c3c <UART_SetConfig+0x1004>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d038      	beq.n	8005c38 <UART_SetConfig+0x1000>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d032      	beq.n	8005c34 <UART_SetConfig+0xffc>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d02c      	beq.n	8005c30 <UART_SetConfig+0xff8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	d026      	beq.n	8005c2c <UART_SetConfig+0xff4>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b06      	cmp	r3, #6
 8005be4:	d020      	beq.n	8005c28 <UART_SetConfig+0xff0>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b07      	cmp	r3, #7
 8005bec:	d01a      	beq.n	8005c24 <UART_SetConfig+0xfec>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d014      	beq.n	8005c20 <UART_SetConfig+0xfe8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b09      	cmp	r3, #9
 8005bfc:	d00e      	beq.n	8005c1c <UART_SetConfig+0xfe4>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b0a      	cmp	r3, #10
 8005c04:	d008      	beq.n	8005c18 <UART_SetConfig+0xfe0>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b0b      	cmp	r3, #11
 8005c0c:	d102      	bne.n	8005c14 <UART_SetConfig+0xfdc>
 8005c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c12:	e016      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e014      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	e012      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	e010      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c20:	2320      	movs	r3, #32
 8005c22:	e00e      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c24:	2310      	movs	r3, #16
 8005c26:	e00c      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c28:	230c      	movs	r3, #12
 8005c2a:	e00a      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c2c:	230a      	movs	r3, #10
 8005c2e:	e008      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c30:	2308      	movs	r3, #8
 8005c32:	e006      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c34:	2306      	movs	r3, #6
 8005c36:	e004      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	e002      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e000      	b.n	8005c42 <UART_SetConfig+0x100a>
 8005c40:	2301      	movs	r3, #1
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	441a      	add	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	61fb      	str	r3, [r7, #28]
        break;
 8005c5c:	e16d      	b.n	8005f3a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c5e:	f7fc fc6b 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8005c62:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d044      	beq.n	8005cf6 <UART_SetConfig+0x10be>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d03e      	beq.n	8005cf2 <UART_SetConfig+0x10ba>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d038      	beq.n	8005cee <UART_SetConfig+0x10b6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d032      	beq.n	8005cea <UART_SetConfig+0x10b2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d02c      	beq.n	8005ce6 <UART_SetConfig+0x10ae>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d026      	beq.n	8005ce2 <UART_SetConfig+0x10aa>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b06      	cmp	r3, #6
 8005c9a:	d020      	beq.n	8005cde <UART_SetConfig+0x10a6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b07      	cmp	r3, #7
 8005ca2:	d01a      	beq.n	8005cda <UART_SetConfig+0x10a2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d014      	beq.n	8005cd6 <UART_SetConfig+0x109e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d00e      	beq.n	8005cd2 <UART_SetConfig+0x109a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b0a      	cmp	r3, #10
 8005cba:	d008      	beq.n	8005cce <UART_SetConfig+0x1096>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b0b      	cmp	r3, #11
 8005cc2:	d102      	bne.n	8005cca <UART_SetConfig+0x1092>
 8005cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cc8:	e016      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e014      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	e012      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cd2:	2340      	movs	r3, #64	; 0x40
 8005cd4:	e010      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	e00e      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cda:	2310      	movs	r3, #16
 8005cdc:	e00c      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	e00a      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005ce2:	230a      	movs	r3, #10
 8005ce4:	e008      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	e006      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cea:	2306      	movs	r3, #6
 8005cec:	e004      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cee:	2304      	movs	r3, #4
 8005cf0:	e002      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e000      	b.n	8005cf8 <UART_SetConfig+0x10c0>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	61fb      	str	r3, [r7, #28]
        break;
 8005d12:	e112      	b.n	8005f3a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d044      	beq.n	8005da6 <UART_SetConfig+0x116e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d03e      	beq.n	8005da2 <UART_SetConfig+0x116a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d038      	beq.n	8005d9e <UART_SetConfig+0x1166>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d032      	beq.n	8005d9a <UART_SetConfig+0x1162>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d02c      	beq.n	8005d96 <UART_SetConfig+0x115e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	d026      	beq.n	8005d92 <UART_SetConfig+0x115a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b06      	cmp	r3, #6
 8005d4a:	d020      	beq.n	8005d8e <UART_SetConfig+0x1156>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b07      	cmp	r3, #7
 8005d52:	d01a      	beq.n	8005d8a <UART_SetConfig+0x1152>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d014      	beq.n	8005d86 <UART_SetConfig+0x114e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	d00e      	beq.n	8005d82 <UART_SetConfig+0x114a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b0a      	cmp	r3, #10
 8005d6a:	d008      	beq.n	8005d7e <UART_SetConfig+0x1146>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	2b0b      	cmp	r3, #11
 8005d72:	d102      	bne.n	8005d7a <UART_SetConfig+0x1142>
 8005d74:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005d78:	e016      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d7a:	4b81      	ldr	r3, [pc, #516]	; (8005f80 <UART_SetConfig+0x1348>)
 8005d7c:	e014      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d7e:	4b81      	ldr	r3, [pc, #516]	; (8005f84 <UART_SetConfig+0x134c>)
 8005d80:	e012      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d82:	4b81      	ldr	r3, [pc, #516]	; (8005f88 <UART_SetConfig+0x1350>)
 8005d84:	e010      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d86:	4b81      	ldr	r3, [pc, #516]	; (8005f8c <UART_SetConfig+0x1354>)
 8005d88:	e00e      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d8a:	4b81      	ldr	r3, [pc, #516]	; (8005f90 <UART_SetConfig+0x1358>)
 8005d8c:	e00c      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d8e:	4b81      	ldr	r3, [pc, #516]	; (8005f94 <UART_SetConfig+0x135c>)
 8005d90:	e00a      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d92:	4b81      	ldr	r3, [pc, #516]	; (8005f98 <UART_SetConfig+0x1360>)
 8005d94:	e008      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d96:	4b81      	ldr	r3, [pc, #516]	; (8005f9c <UART_SetConfig+0x1364>)
 8005d98:	e006      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d9a:	4b81      	ldr	r3, [pc, #516]	; (8005fa0 <UART_SetConfig+0x1368>)
 8005d9c:	e004      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005d9e:	4b81      	ldr	r3, [pc, #516]	; (8005fa4 <UART_SetConfig+0x136c>)
 8005da0:	e002      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005da2:	4b81      	ldr	r3, [pc, #516]	; (8005fa8 <UART_SetConfig+0x1370>)
 8005da4:	e000      	b.n	8005da8 <UART_SetConfig+0x1170>
 8005da6:	4b76      	ldr	r3, [pc, #472]	; (8005f80 <UART_SetConfig+0x1348>)
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6852      	ldr	r2, [r2, #4]
 8005dac:	0852      	lsrs	r2, r2, #1
 8005dae:	441a      	add	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	61fb      	str	r3, [r7, #28]
        break;
 8005dbc:	e0bd      	b.n	8005f3a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dbe:	f7fc fb37 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8005dc2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d044      	beq.n	8005e56 <UART_SetConfig+0x121e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d03e      	beq.n	8005e52 <UART_SetConfig+0x121a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d038      	beq.n	8005e4e <UART_SetConfig+0x1216>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d032      	beq.n	8005e4a <UART_SetConfig+0x1212>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d02c      	beq.n	8005e46 <UART_SetConfig+0x120e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d026      	beq.n	8005e42 <UART_SetConfig+0x120a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b06      	cmp	r3, #6
 8005dfa:	d020      	beq.n	8005e3e <UART_SetConfig+0x1206>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b07      	cmp	r3, #7
 8005e02:	d01a      	beq.n	8005e3a <UART_SetConfig+0x1202>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d014      	beq.n	8005e36 <UART_SetConfig+0x11fe>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b09      	cmp	r3, #9
 8005e12:	d00e      	beq.n	8005e32 <UART_SetConfig+0x11fa>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b0a      	cmp	r3, #10
 8005e1a:	d008      	beq.n	8005e2e <UART_SetConfig+0x11f6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2b0b      	cmp	r3, #11
 8005e22:	d102      	bne.n	8005e2a <UART_SetConfig+0x11f2>
 8005e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e28:	e016      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e014      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	e012      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e32:	2340      	movs	r3, #64	; 0x40
 8005e34:	e010      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e36:	2320      	movs	r3, #32
 8005e38:	e00e      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	e00c      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e3e:	230c      	movs	r3, #12
 8005e40:	e00a      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e42:	230a      	movs	r3, #10
 8005e44:	e008      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e46:	2308      	movs	r3, #8
 8005e48:	e006      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e4a:	2306      	movs	r3, #6
 8005e4c:	e004      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e4e:	2304      	movs	r3, #4
 8005e50:	e002      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e000      	b.n	8005e58 <UART_SetConfig+0x1220>
 8005e56:	2301      	movs	r3, #1
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	441a      	add	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	61fb      	str	r3, [r7, #28]
        break;
 8005e72:	e062      	b.n	8005f3a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d04e      	beq.n	8005f1a <UART_SetConfig+0x12e2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d047      	beq.n	8005f14 <UART_SetConfig+0x12dc>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d040      	beq.n	8005f0e <UART_SetConfig+0x12d6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d039      	beq.n	8005f08 <UART_SetConfig+0x12d0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d032      	beq.n	8005f02 <UART_SetConfig+0x12ca>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b05      	cmp	r3, #5
 8005ea2:	d02b      	beq.n	8005efc <UART_SetConfig+0x12c4>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2b06      	cmp	r3, #6
 8005eaa:	d024      	beq.n	8005ef6 <UART_SetConfig+0x12be>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b07      	cmp	r3, #7
 8005eb2:	d01d      	beq.n	8005ef0 <UART_SetConfig+0x12b8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d016      	beq.n	8005eea <UART_SetConfig+0x12b2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	2b09      	cmp	r3, #9
 8005ec2:	d00f      	beq.n	8005ee4 <UART_SetConfig+0x12ac>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	2b0a      	cmp	r3, #10
 8005eca:	d008      	beq.n	8005ede <UART_SetConfig+0x12a6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	2b0b      	cmp	r3, #11
 8005ed2:	d101      	bne.n	8005ed8 <UART_SetConfig+0x12a0>
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	e022      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005edc:	e01f      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ee2:	e01c      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee8:	e019      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eee:	e016      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ef4:	e013      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005ef6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005efa:	e010      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005efc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005f00:	e00d      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f06:	e00a      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005f08:	f241 5355 	movw	r3, #5461	; 0x1555
 8005f0c:	e007      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005f0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f12:	e004      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005f14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f18:	e001      	b.n	8005f1e <UART_SetConfig+0x12e6>
 8005f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6852      	ldr	r2, [r2, #4]
 8005f22:	0852      	lsrs	r2, r2, #1
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	61fb      	str	r3, [r7, #28]
        break;
 8005f32:	e002      	b.n	8005f3a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	76fb      	strb	r3, [r7, #27]
        break;
 8005f38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b0f      	cmp	r3, #15
 8005f3e:	d908      	bls.n	8005f52 <UART_SetConfig+0x131a>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f46:	d204      	bcs.n	8005f52 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	e001      	b.n	8005f56 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005f72:	7efb      	ldrb	r3, [r7, #27]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3728      	adds	r7, #40	; 0x28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005f7e:	bf00      	nop
 8005f80:	00f42400 	.word	0x00f42400
 8005f84:	0001e848 	.word	0x0001e848
 8005f88:	0003d090 	.word	0x0003d090
 8005f8c:	0007a120 	.word	0x0007a120
 8005f90:	000f4240 	.word	0x000f4240
 8005f94:	00145855 	.word	0x00145855
 8005f98:	00186a00 	.word	0x00186a00
 8005f9c:	001e8480 	.word	0x001e8480
 8005fa0:	0028b0aa 	.word	0x0028b0aa
 8005fa4:	003d0900 	.word	0x003d0900
 8005fa8:	007a1200 	.word	0x007a1200

08005fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060aa:	d10a      	bne.n	80060c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006100:	f7fb f96a 	bl	80013d8 <HAL_GetTick>
 8006104:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b08      	cmp	r3, #8
 8006112:	d10e      	bne.n	8006132 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f82c 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e022      	b.n	8006178 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b04      	cmp	r3, #4
 800613e:	d10e      	bne.n	800615e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f816 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e00c      	b.n	8006178 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006190:	e02c      	b.n	80061ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d028      	beq.n	80061ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619a:	f7fb f91d 	bl	80013d8 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d11d      	bne.n	80061ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e00f      	b.n	800620c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69da      	ldr	r2, [r3, #28]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4013      	ands	r3, r2
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	bf0c      	ite	eq
 80061fc:	2301      	moveq	r3, #1
 80061fe:	2300      	movne	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	429a      	cmp	r2, r3
 8006208:	d0c3      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800622a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7fe fcd1 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7fe fcad 	bl	8004c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_UARTEx_DisableFifoMode+0x16>
 8006308:	2302      	movs	r3, #2
 800630a:	e027      	b.n	800635c <HAL_UARTEx_DisableFifoMode+0x66>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	; 0x24
 8006318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800633a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800637c:	2302      	movs	r3, #2
 800637e:	e02d      	b.n	80063dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2224      	movs	r2, #36	; 0x24
 800638c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f84f 	bl	8006460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e02d      	b.n	8006458 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2224      	movs	r2, #36	; 0x24
 8006408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f811 	bl	8006460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b089      	sub	sp, #36	; 0x24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006468:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <UARTEx_SetNbDataToProcess+0xc8>)
 800646a:	f107 0314 	add.w	r3, r7, #20
 800646e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006472:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006476:	4a2d      	ldr	r2, [pc, #180]	; (800652c <UARTEx_SetNbDataToProcess+0xcc>)
 8006478:	f107 030c 	add.w	r3, r7, #12
 800647c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006480:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006488:	2b00      	cmp	r3, #0
 800648a:	d108      	bne.n	800649e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800649c:	e03d      	b.n	800651a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800649e:	2308      	movs	r3, #8
 80064a0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064a2:	2308      	movs	r3, #8
 80064a4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	0e5b      	lsrs	r3, r3, #25
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	0f5b      	lsrs	r3, r3, #29
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80064c6:	7fbb      	ldrb	r3, [r7, #30]
 80064c8:	7f3a      	ldrb	r2, [r7, #28]
 80064ca:	f107 0120 	add.w	r1, r7, #32
 80064ce:	440a      	add	r2, r1
 80064d0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
 80064d8:	7f3a      	ldrb	r2, [r7, #28]
 80064da:	f107 0120 	add.w	r1, r7, #32
 80064de:	440a      	add	r2, r1
 80064e0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80064e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80064f0:	7ffb      	ldrb	r3, [r7, #31]
 80064f2:	7f7a      	ldrb	r2, [r7, #29]
 80064f4:	f107 0120 	add.w	r1, r7, #32
 80064f8:	440a      	add	r2, r1
 80064fa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80064fe:	fb02 f303 	mul.w	r3, r2, r3
 8006502:	7f7a      	ldrb	r2, [r7, #29]
 8006504:	f107 0120 	add.w	r1, r7, #32
 8006508:	440a      	add	r2, r1
 800650a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800650e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006512:	b29a      	uxth	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800651a:	bf00      	nop
 800651c:	3724      	adds	r7, #36	; 0x24
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	080065a0 	.word	0x080065a0
 800652c:	080065a8 	.word	0x080065a8

08006530 <__libc_init_array>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4e0d      	ldr	r6, [pc, #52]	; (8006568 <__libc_init_array+0x38>)
 8006534:	4c0d      	ldr	r4, [pc, #52]	; (800656c <__libc_init_array+0x3c>)
 8006536:	1ba4      	subs	r4, r4, r6
 8006538:	10a4      	asrs	r4, r4, #2
 800653a:	2500      	movs	r5, #0
 800653c:	42a5      	cmp	r5, r4
 800653e:	d109      	bne.n	8006554 <__libc_init_array+0x24>
 8006540:	4e0b      	ldr	r6, [pc, #44]	; (8006570 <__libc_init_array+0x40>)
 8006542:	4c0c      	ldr	r4, [pc, #48]	; (8006574 <__libc_init_array+0x44>)
 8006544:	f000 f820 	bl	8006588 <_init>
 8006548:	1ba4      	subs	r4, r4, r6
 800654a:	10a4      	asrs	r4, r4, #2
 800654c:	2500      	movs	r5, #0
 800654e:	42a5      	cmp	r5, r4
 8006550:	d105      	bne.n	800655e <__libc_init_array+0x2e>
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006558:	4798      	blx	r3
 800655a:	3501      	adds	r5, #1
 800655c:	e7ee      	b.n	800653c <__libc_init_array+0xc>
 800655e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006562:	4798      	blx	r3
 8006564:	3501      	adds	r5, #1
 8006566:	e7f2      	b.n	800654e <__libc_init_array+0x1e>
 8006568:	080065d0 	.word	0x080065d0
 800656c:	080065d0 	.word	0x080065d0
 8006570:	080065d0 	.word	0x080065d0
 8006574:	080065d4 	.word	0x080065d4

08006578 <memset>:
 8006578:	4402      	add	r2, r0
 800657a:	4603      	mov	r3, r0
 800657c:	4293      	cmp	r3, r2
 800657e:	d100      	bne.n	8006582 <memset+0xa>
 8006580:	4770      	bx	lr
 8006582:	f803 1b01 	strb.w	r1, [r3], #1
 8006586:	e7f9      	b.n	800657c <memset+0x4>

08006588 <_init>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	bf00      	nop
 800658c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658e:	bc08      	pop	{r3}
 8006590:	469e      	mov	lr, r3
 8006592:	4770      	bx	lr

08006594 <_fini>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr
