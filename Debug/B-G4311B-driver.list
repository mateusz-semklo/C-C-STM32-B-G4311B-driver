
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800a680  0800a680  0001a680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aed4  0800aed4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800aed4  0800aed4  0001aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aedc  0800aedc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aedc  0800aedc  0001aedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aee0  0800aee0  0001aee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800aee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000074  0800af58  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800af58  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9e5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000354b  00000000  00000000  0003ca89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  0003ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  000415e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022043  00000000  00000000  00042a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000146f7  00000000  00000000  00064a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000debac  00000000  00000000  00079152  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00157cfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f28  00000000  00000000  00157d7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a668 	.word	0x0800a668

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	0800a668 	.word	0x0800a668

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b092      	sub	sp, #72	; 0x48
 8000e68:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	223c      	movs	r2, #60	; 0x3c
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f009 fa09 	bl	800a294 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e82:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000e8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e92:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb6:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	482b      	ldr	r0, [pc, #172]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000ee2:	f001 ff7f 	bl	8002de4 <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f001 f93d 	bl	800216a <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4825      	ldr	r0, [pc, #148]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000efc:	f003 fb74 	bl	80045e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f06:	f001 f930 	bl	800216a <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_ADC1_Init+0x130>)
 8000f0c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000f38:	2384      	movs	r3, #132	; 0x84
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000f4c:	f002 fef4 	bl	8003d38 <HAL_ADCEx_InjectedConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f56:	f001 f908 	bl	800216a <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC1_Init+0x134>)
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f5e:	f240 130f 	movw	r3, #271	; 0x10f
 8000f62:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8000f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f6c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	773b      	strb	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <MX_ADC1_Init+0x12c>)
 8000f78:	f002 fede 	bl	8003d38 <HAL_ADCEx_InjectedConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000f82:	f001 f8f2 	bl	800216a <Error_Handler>
  }

}
 8000f86:	bf00      	nop
 8000f88:	3748      	adds	r7, #72	; 0x48
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000100 	.word	0x20000100
 8000f94:	0c900008 	.word	0x0c900008
 8000f98:	32601000 	.word	0x32601000

08000f9c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b090      	sub	sp, #64	; 0x40
 8000fa0:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	223c      	movs	r2, #60	; 0x3c
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f009 f973 	bl	800a294 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000fae:	4b34      	ldr	r3, [pc, #208]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fb0:	4a34      	ldr	r2, [pc, #208]	; (8001084 <MX_ADC2_Init+0xe8>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b30      	ldr	r3, [pc, #192]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <MX_ADC2_Init+0xe4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_ADC2_Init+0xe4>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800100a:	481d      	ldr	r0, [pc, #116]	; (8001080 <MX_ADC2_Init+0xe4>)
 800100c:	f001 feea 	bl	8002de4 <HAL_ADC_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001016:	f001 f8a8 	bl	800216a <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_ADC2_Init+0xec>)
 800101c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800101e:	2309      	movs	r3, #9
 8001020:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001022:	2301      	movs	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001026:	237f      	movs	r3, #127	; 0x7f
 8001028:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001036:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8001038:	2301      	movs	r3, #1
 800103a:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001054:	2384      	movs	r3, #132	; 0x84
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_ADC2_Init+0xe4>)
 8001068:	f002 fe66 	bl	8003d38 <HAL_ADCEx_InjectedConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8001072:	f001 f87a 	bl	800216a <Error_Handler>
  }

}
 8001076:	bf00      	nop
 8001078:	3740      	adds	r7, #64	; 0x40
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000094 	.word	0x20000094
 8001084:	50000100 	.word	0x50000100
 8001088:	0c900008 	.word	0x0c900008

0800108c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ac:	d14e      	bne.n	800114c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80010ae:	4b47      	ldr	r3, [pc, #284]	; (80011cc <HAL_ADC_MspInit+0x140>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_ADC_MspInit+0x140>)
 80010b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010b8:	4b44      	ldr	r3, [pc, #272]	; (80011cc <HAL_ADC_MspInit+0x140>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10b      	bne.n	80010d8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010c0:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	4a42      	ldr	r2, [pc, #264]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010cc:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	4a3c      	ldr	r2, [pc, #240]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e4:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	4a36      	ldr	r2, [pc, #216]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001108:	2305      	movs	r3, #5
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f003 fc79 	bl	8004a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001122:	2302      	movs	r3, #2
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4827      	ldr	r0, [pc, #156]	; (80011d4 <HAL_ADC_MspInit+0x148>)
 8001136:	f003 fc6d 	bl	8004a14 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	2012      	movs	r0, #18
 8001140:	f003 fbcd 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001144:	2012      	movs	r0, #18
 8001146:	f003 fbe4 	bl	8004912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800114a:	e03a      	b.n	80011c2 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_ADC_MspInit+0x14c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d135      	bne.n	80011c2 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_ADC_MspInit+0x140>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_ADC_MspInit+0x140>)
 800115e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_ADC_MspInit+0x140>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d10b      	bne.n	8001180 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 800116e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_ADC_MspInit+0x144>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001198:	2340      	movs	r3, #64	; 0x40
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f003 fc31 	bl	8004a14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	2012      	movs	r0, #18
 80011b8:	f003 fb91 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011bc:	2012      	movs	r0, #18
 80011be:	f003 fba8 	bl	8004912 <HAL_NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000090 	.word	0x20000090
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	50000100 	.word	0x50000100

080011dc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <MX_GPIO_Init+0xcc>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <MX_GPIO_Init+0xcc>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xcc>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_GPIO_Init+0xcc>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8001252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125c:	2302      	movs	r3, #2
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001264:	2301      	movs	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f003 fbcf 	bl	8004a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_GPIO_Init+0xd0>)
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <MX_GPIO_Init+0xd4>)
 800128c:	f003 fbc2 	bl	8004a14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	210f      	movs	r1, #15
 8001294:	2028      	movs	r0, #40	; 0x28
 8001296:	f003 fb22 	bl	80048de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129a:	2028      	movs	r0, #40	; 0x28
 800129c:	f003 fb39 	bl	8004912 <HAL_NVIC_EnableIRQ>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	10110000 	.word	0x10110000
 80012b0:	48000800 	.word	0x48000800

080012b4 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 80012b8:	217f      	movs	r1, #127	; 0x7f
 80012ba:	4858      	ldr	r0, [pc, #352]	; (800141c <start_up+0x168>)
 80012bc:	f002 fb9a 	bl	80039f4 <HAL_ADCEx_Calibration_Start>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d008      	beq.n	80012d8 <start_up+0x24>
 80012c6:	217f      	movs	r1, #127	; 0x7f
 80012c8:	4855      	ldr	r0, [pc, #340]	; (8001420 <start_up+0x16c>)
 80012ca:	f002 fb93 	bl	80039f4 <HAL_ADCEx_Calibration_Start>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <start_up+0x24>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <start_up+0x26>
 80012d8:	2300      	movs	r3, #0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 809b 	bne.w	8001416 <start_up+0x162>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)))
 80012e0:	4a50      	ldr	r2, [pc, #320]	; (8001424 <start_up+0x170>)
 80012e2:	4951      	ldr	r1, [pc, #324]	; (8001428 <start_up+0x174>)
 80012e4:	4851      	ldr	r0, [pc, #324]	; (800142c <start_up+0x178>)
 80012e6:	f003 fe30 	bl	8004f4a <HAL_OPAMPEx_SelfCalibrateAll>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 8092 	bne.w	8001416 <start_up+0x162>
		{


			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 80012f2:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <start_up+0x17c>)
 80012f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 80012fa:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <start_up+0x17c>)
 80012fc:	220f      	movs	r2, #15
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR1=(TIM1->ARR/10);
 8001300:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <start_up+0x17c>)
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <start_up+0x17c>)
 8001306:	494b      	ldr	r1, [pc, #300]	; (8001434 <start_up+0x180>)
 8001308:	fba1 1303 	umull	r1, r3, r1, r3
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=0;
 8001310:	4b47      	ldr	r3, [pc, #284]	; (8001430 <start_up+0x17c>)
 8001312:	2200      	movs	r2, #0
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8001316:	4b46      	ldr	r3, [pc, #280]	; (8001430 <start_up+0x17c>)
 8001318:	2200      	movs	r2, #0
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4=TIM1_CCR4;
 800131c:	4b44      	ldr	r3, [pc, #272]	; (8001430 <start_up+0x17c>)
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	4a43      	ldr	r2, [pc, #268]	; (8001430 <start_up+0x17c>)
 8001322:	3b0a      	subs	r3, #10
 8001324:	6413      	str	r3, [r2, #64]	; 0x40

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001326:	2100      	movs	r1, #0
 8001328:	4843      	ldr	r0, [pc, #268]	; (8001438 <start_up+0x184>)
 800132a:	f005 f983 	bl	8006634 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800132e:	2100      	movs	r1, #0
 8001330:	4841      	ldr	r0, [pc, #260]	; (8001438 <start_up+0x184>)
 8001332:	f006 fa51 	bl	80077d8 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001336:	2104      	movs	r1, #4
 8001338:	483f      	ldr	r0, [pc, #252]	; (8001438 <start_up+0x184>)
 800133a:	f005 f97b 	bl	8006634 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800133e:	2104      	movs	r1, #4
 8001340:	483d      	ldr	r0, [pc, #244]	; (8001438 <start_up+0x184>)
 8001342:	f006 fa49 	bl	80077d8 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001346:	2108      	movs	r1, #8
 8001348:	483b      	ldr	r0, [pc, #236]	; (8001438 <start_up+0x184>)
 800134a:	f005 f973 	bl	8006634 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800134e:	2108      	movs	r1, #8
 8001350:	4839      	ldr	r0, [pc, #228]	; (8001438 <start_up+0x184>)
 8001352:	f006 fa41 	bl	80077d8 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001356:	210c      	movs	r1, #12
 8001358:	4837      	ldr	r0, [pc, #220]	; (8001438 <start_up+0x184>)
 800135a:	f005 f96b 	bl	8006634 <HAL_TIM_PWM_Start>


			HAL_Delay(800);
 800135e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001362:	f001 fc05 	bl	8002b70 <HAL_Delay>

			//////// konfiguracja Timer 4 - encoder ///////////////////
			TIM4->ARR= TIM4_ARR;
 8001366:	4b35      	ldr	r3, [pc, #212]	; (800143c <start_up+0x188>)
 8001368:	f240 1267 	movw	r2, #359	; 0x167
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC= TIM4_PSC;
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <start_up+0x188>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001374:	2100      	movs	r1, #0
 8001376:	4832      	ldr	r0, [pc, #200]	; (8001440 <start_up+0x18c>)
 8001378:	f005 fb6a 	bl	8006a50 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 800137c:	2104      	movs	r1, #4
 800137e:	4830      	ldr	r0, [pc, #192]	; (8001440 <start_up+0x18c>)
 8001380:	f005 fb66 	bl	8006a50 <HAL_TIM_Encoder_Start>

			HAL_Delay(400);
 8001384:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001388:	f001 fbf2 	bl	8002b70 <HAL_Delay>

			TIM1->CCR1=0;
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <start_up+0x17c>)
 800138e:	2200      	movs	r2, #0
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 8001392:	4b27      	ldr	r3, [pc, #156]	; (8001430 <start_up+0x17c>)
 8001394:	2200      	movs	r2, #0
 8001396:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <start_up+0x17c>)
 800139a:	2200      	movs	r2, #0
 800139c:	63da      	str	r2, [r3, #60]	; 0x3c

			HAL_Delay(200);
 800139e:	20c8      	movs	r0, #200	; 0xc8
 80013a0:	f001 fbe6 	bl	8002b70 <HAL_Delay>



			//////// start ADC 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 80013a4:	4821      	ldr	r0, [pc, #132]	; (800142c <start_up+0x178>)
 80013a6:	f003 fd9f 	bl	8004ee8 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 80013aa:	481f      	ldr	r0, [pc, #124]	; (8001428 <start_up+0x174>)
 80013ac:	f003 fd9c 	bl	8004ee8 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp3);
 80013b0:	481c      	ldr	r0, [pc, #112]	; (8001424 <start_up+0x170>)
 80013b2:	f003 fd99 	bl	8004ee8 <HAL_OPAMP_Start>

			//////// start ADC 1 2 ///////////////////////////////////
			HAL_ADCEx_InjectedStart_IT(&hadc1);
 80013b6:	4819      	ldr	r0, [pc, #100]	; (800141c <start_up+0x168>)
 80013b8:	f002 fb7e 	bl	8003ab8 <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 80013bc:	4818      	ldr	r0, [pc, #96]	; (8001420 <start_up+0x16c>)
 80013be:	f002 fb7b 	bl	8003ab8 <HAL_ADCEx_InjectedStart_IT>


			////////  UASRT 2 /////////////////////////////////////////
			HAL_UART_Receive_IT(&huart2, &recive, 1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	491f      	ldr	r1, [pc, #124]	; (8001444 <start_up+0x190>)
 80013c6:	4820      	ldr	r0, [pc, #128]	; (8001448 <start_up+0x194>)
 80013c8:	f006 fc7c 	bl	8007cc4 <HAL_UART_Receive_IT>


			/////////// inicjalizacja pid_d ////////////////
			set_d=0;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <start_up+0x198>)
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
			pid_d.Kp=1;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <start_up+0x19c>)
 80013d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013da:	619a      	str	r2, [r3, #24]
			pid_d.Ki=100;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <start_up+0x19c>)
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <start_up+0x1a0>)
 80013e0:	61da      	str	r2, [r3, #28]
			pid_d.Kd=0;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <start_up+0x19c>)
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_d, 1);
 80013ea:	2101      	movs	r1, #1
 80013ec:	4818      	ldr	r0, [pc, #96]	; (8001450 <start_up+0x19c>)
 80013ee:	f008 fceb 	bl	8009dc8 <arm_pid_init_f32>

			/////////// inicjalizacja pid_q ////////////////
			set_q=0.01;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <start_up+0x1a4>)
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <start_up+0x1a8>)
 80013f6:	601a      	str	r2, [r3, #0]
			pid_q.Kp=1000;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <start_up+0x1ac>)
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <start_up+0x1b0>)
 80013fc:	619a      	str	r2, [r3, #24]
			pid_q.Ki=1;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <start_up+0x1ac>)
 8001400:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001404:	61da      	str	r2, [r3, #28]
			pid_q.Kd=0;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <start_up+0x1ac>)
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_q, 1);
 800140e:	2101      	movs	r1, #1
 8001410:	4813      	ldr	r0, [pc, #76]	; (8001460 <start_up+0x1ac>)
 8001412:	f008 fcd9 	bl	8009dc8 <arm_pid_init_f32>
		}


	   }

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000100 	.word	0x20000100
 8001420:	20000094 	.word	0x20000094
 8001424:	200002e8 	.word	0x200002e8
 8001428:	200002ac 	.word	0x200002ac
 800142c:	20000324 	.word	0x20000324
 8001430:	40012c00 	.word	0x40012c00
 8001434:	cccccccd 	.word	0xcccccccd
 8001438:	200003ac 	.word	0x200003ac
 800143c:	40000800 	.word	0x40000800
 8001440:	20000360 	.word	0x20000360
 8001444:	20000248 	.word	0x20000248
 8001448:	200003f8 	.word	0x200003f8
 800144c:	2000019c 	.word	0x2000019c
 8001450:	200001a0 	.word	0x200001a0
 8001454:	42c80000 	.word	0x42c80000
 8001458:	2000028c 	.word	0x2000028c
 800145c:	3c23d70a 	.word	0x3c23d70a
 8001460:	2000021c 	.word	0x2000021c
 8001464:	447a0000 	.word	0x447a0000

08001468 <AlphaBeta_To_Angle_Vref>:

void AlphaBeta_To_Angle_Vref(float32_t alpha,float32_t beta,float32_t *angle_current_rad,float32_t *Vref)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001472:	edc7 0a02 	vstr	s1, [r7, #8]
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	*angle_current_rad = atan2f(beta,alpha);
 800147a:	edd7 0a03 	vldr	s1, [r7, #12]
 800147e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001482:	f008 ff0f 	bl	800a2a4 <atan2f>
 8001486:	eef0 7a40 	vmov.f32	s15, s0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32( ((alpha*alpha)+(beta*beta)), Vref);
 8001490:	ed97 7a03 	vldr	s14, [r7, #12]
 8001494:	edd7 7a03 	vldr	s15, [r7, #12]
 8001498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149c:	edd7 6a02 	vldr	s13, [r7, #8]
 80014a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ac:	edc7 7a05 	vstr	s15, [r7, #20]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80014b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	db09      	blt.n	80014d6 <AlphaBeta_To_Angle_Vref+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80014c2:	ed97 0a05 	vldr	s0, [r7, #20]
 80014c6:	f008 feef 	bl	800a2a8 <sqrtf>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	edc3 7a00 	vstr	s15, [r3]
 80014d4:	e003      	b.n	80014de <AlphaBeta_To_Angle_Vref+0x76>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

	 if(*Vref>=sv_Vdc_limit)  // saturacja Vref
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe fffc 	bl	80004e0 <__aeabi_f2d>
 80014e8:	a308      	add	r3, pc, #32	; (adr r3, 800150c <AlphaBeta_To_Angle_Vref+0xa4>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff fad5 	bl	8000a9c <__aeabi_dcmpge>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d100      	bne.n	80014fa <AlphaBeta_To_Angle_Vref+0x92>
	    	*Vref=sv_Vdc_limit;
}
 80014f8:	e002      	b.n	8001500 <AlphaBeta_To_Angle_Vref+0x98>
	    	*Vref=sv_Vdc_limit;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	4a02      	ldr	r2, [pc, #8]	; (8001508 <AlphaBeta_To_Angle_Vref+0xa0>)
 80014fe:	601a      	str	r2, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	415db3d0 	.word	0x415db3d0
 800150c:	0f9096bc 	.word	0x0f9096bc
 8001510:	402bb67a 	.word	0x402bb67a
 8001514:	00000000 	.word	0x00000000

08001518 <Angle_To_Sector>:


void Angle_To_Sector(float32_t angle_current_rad,uint8_t *sector)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001522:	6038      	str	r0, [r7, #0]

	if((angle_current_rad>0) && (angle_current_rad<=1.047197)) // pi/3
 8001524:	edd7 7a01 	vldr	s15, [r7, #4]
 8001528:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001530:	dd0e      	ble.n	8001550 <Angle_To_Sector+0x38>
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7fe ffd4 	bl	80004e0 <__aeabi_f2d>
 8001538:	a347      	add	r3, pc, #284	; (adr r3, 8001658 <Angle_To_Sector+0x140>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7ff faa3 	bl	8000a88 <__aeabi_dcmple>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <Angle_To_Sector+0x38>
		*sector=1;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e07f      	b.n	8001650 <Angle_To_Sector+0x138>
	else if((angle_current_rad>1.047197) && (angle_current_rad<=2.094395)) //2/3*pi
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7fe ffc5 	bl	80004e0 <__aeabi_f2d>
 8001556:	a340      	add	r3, pc, #256	; (adr r3, 8001658 <Angle_To_Sector+0x140>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff faa8 	bl	8000ab0 <__aeabi_dcmpgt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00e      	beq.n	8001584 <Angle_To_Sector+0x6c>
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7fe ffba 	bl	80004e0 <__aeabi_f2d>
 800156c:	a33c      	add	r3, pc, #240	; (adr r3, 8001660 <Angle_To_Sector+0x148>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff fa89 	bl	8000a88 <__aeabi_dcmple>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <Angle_To_Sector+0x6c>
		*sector=2;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2202      	movs	r2, #2
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e065      	b.n	8001650 <Angle_To_Sector+0x138>
	else if((angle_current_rad>2.094395) && (angle_current_rad<=3.141593))
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7fe ffab 	bl	80004e0 <__aeabi_f2d>
 800158a:	a335      	add	r3, pc, #212	; (adr r3, 8001660 <Angle_To_Sector+0x148>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff fa8e 	bl	8000ab0 <__aeabi_dcmpgt>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00e      	beq.n	80015b8 <Angle_To_Sector+0xa0>
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7fe ffa0 	bl	80004e0 <__aeabi_f2d>
 80015a0:	a331      	add	r3, pc, #196	; (adr r3, 8001668 <Angle_To_Sector+0x150>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff fa6f 	bl	8000a88 <__aeabi_dcmple>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <Angle_To_Sector+0xa0>
		*sector=3;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2203      	movs	r2, #3
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	e04b      	b.n	8001650 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-3.141593) && (angle_current_rad<=-2.094395))
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7fe ff91 	bl	80004e0 <__aeabi_f2d>
 80015be:	a32c      	add	r3, pc, #176	; (adr r3, 8001670 <Angle_To_Sector+0x158>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7ff fa74 	bl	8000ab0 <__aeabi_dcmpgt>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00e      	beq.n	80015ec <Angle_To_Sector+0xd4>
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe ff86 	bl	80004e0 <__aeabi_f2d>
 80015d4:	a328      	add	r3, pc, #160	; (adr r3, 8001678 <Angle_To_Sector+0x160>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff fa55 	bl	8000a88 <__aeabi_dcmple>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <Angle_To_Sector+0xd4>
		*sector=4;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2204      	movs	r2, #4
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	e031      	b.n	8001650 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-2.094395) && (angle_current_rad<=-1.047197))
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7fe ff77 	bl	80004e0 <__aeabi_f2d>
 80015f2:	a321      	add	r3, pc, #132	; (adr r3, 8001678 <Angle_To_Sector+0x160>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff fa5a 	bl	8000ab0 <__aeabi_dcmpgt>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00e      	beq.n	8001620 <Angle_To_Sector+0x108>
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7fe ff6c 	bl	80004e0 <__aeabi_f2d>
 8001608:	a31d      	add	r3, pc, #116	; (adr r3, 8001680 <Angle_To_Sector+0x168>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7ff fa3b 	bl	8000a88 <__aeabi_dcmple>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <Angle_To_Sector+0x108>
		*sector=5;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2205      	movs	r2, #5
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e017      	b.n	8001650 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7fe ff5d 	bl	80004e0 <__aeabi_f2d>
 8001626:	a316      	add	r3, pc, #88	; (adr r3, 8001680 <Angle_To_Sector+0x168>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7ff fa40 	bl	8000ab0 <__aeabi_dcmpgt>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d100      	bne.n	8001638 <Angle_To_Sector+0x120>
		*sector=6;
	else{}

}
 8001636:	e00b      	b.n	8001650 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8001638:	edd7 7a01 	vldr	s15, [r7, #4]
 800163c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	d900      	bls.n	8001648 <Angle_To_Sector+0x130>
}
 8001646:	e003      	b.n	8001650 <Angle_To_Sector+0x138>
		*sector=6;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2206      	movs	r2, #6
 800164c:	701a      	strb	r2, [r3, #0]
}
 800164e:	e7ff      	b.n	8001650 <Angle_To_Sector+0x138>
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	a437824d 	.word	0xa437824d
 800165c:	3ff0c151 	.word	0x3ff0c151
 8001660:	2a6f3f53 	.word	0x2a6f3f53
 8001664:	4000c152 	.word	0x4000c152
 8001668:	82c2bd7f 	.word	0x82c2bd7f
 800166c:	400921fb 	.word	0x400921fb
 8001670:	82c2bd7f 	.word	0x82c2bd7f
 8001674:	c00921fb 	.word	0xc00921fb
 8001678:	2a6f3f53 	.word	0x2a6f3f53
 800167c:	c000c152 	.word	0xc000c152
 8001680:	a437824d 	.word	0xa437824d
 8001684:	bff0c151 	.word	0xbff0c151

08001688 <SVPWM>:


void SVPWM(uint8_t sector,float32_t angle_current_rad,float32_t Vref, float32_t T[], float32_t T_gate[], float32_t *S1,float32_t *S2,float32_t *S3)
{
 8001688:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	ed87 0a04 	vstr	s0, [r7, #16]
 8001694:	edc7 0a03 	vstr	s1, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4603      	mov	r3, r0
 80016a0:	75fb      	strb	r3, [r7, #23]

	T[1]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((sector * 1.047197) - (angle_current_rad)); /// pi/3 = 1,0472
 80016a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a6:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8001980 <SVPWM+0x2f8>
 80016aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ae:	ee17 0a90 	vmov	r0, s15
 80016b2:	f7fe ff15 	bl	80004e0 <__aeabi_f2d>
 80016b6:	a3ac      	add	r3, pc, #688	; (adr r3, 8001968 <SVPWM+0x2e0>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7ff f892 	bl	80007e4 <__aeabi_ddiv>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	4618      	mov	r0, r3
 80016c6:	4621      	mov	r1, r4
 80016c8:	a3a9      	add	r3, pc, #676	; (adr r3, 8001970 <SVPWM+0x2e8>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe ff5f 	bl	8000590 <__aeabi_dmul>
 80016d2:	4603      	mov	r3, r0
 80016d4:	460c      	mov	r4, r1
 80016d6:	4625      	mov	r5, r4
 80016d8:	461c      	mov	r4, r3
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe feed 	bl	80004bc <__aeabi_i2d>
 80016e2:	a3a5      	add	r3, pc, #660	; (adr r3, 8001978 <SVPWM+0x2f0>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ff52 	bl	8000590 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4690      	mov	r8, r2
 80016f2:	4699      	mov	r9, r3
 80016f4:	6938      	ldr	r0, [r7, #16]
 80016f6:	f7fe fef3 	bl	80004e0 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4640      	mov	r0, r8
 8001700:	4649      	mov	r1, r9
 8001702:	f7fe fd8d 	bl	8000220 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff f9d9 	bl	8000ac4 <__aeabi_d2f>
 8001712:	4603      	mov	r3, r0
 8001714:	ee00 3a10 	vmov	s0, r3
 8001718:	f008 fd06 	bl	800a128 <arm_sin_f32>
 800171c:	ee10 3a10 	vmov	r3, s0
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fedd 	bl	80004e0 <__aeabi_f2d>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f7fe ff2f 	bl	8000590 <__aeabi_dmul>
 8001732:	4603      	mov	r3, r0
 8001734:	460c      	mov	r4, r1
 8001736:	4619      	mov	r1, r3
 8001738:	4622      	mov	r2, r4
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1d1c      	adds	r4, r3, #4
 800173e:	4608      	mov	r0, r1
 8001740:	4611      	mov	r1, r2
 8001742:	f7ff f9bf 	bl	8000ac4 <__aeabi_d2f>
 8001746:	4603      	mov	r3, r0
 8001748:	6023      	str	r3, [r4, #0]
	T[2]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((-(sector-1) * 1.047197) +  angle_current_rad) ;
 800174a:	edd7 7a03 	vldr	s15, [r7, #12]
 800174e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001980 <SVPWM+0x2f8>
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	ee17 0a90 	vmov	r0, s15
 800175a:	f7fe fec1 	bl	80004e0 <__aeabi_f2d>
 800175e:	a382      	add	r3, pc, #520	; (adr r3, 8001968 <SVPWM+0x2e0>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f83e 	bl	80007e4 <__aeabi_ddiv>
 8001768:	4603      	mov	r3, r0
 800176a:	460c      	mov	r4, r1
 800176c:	4618      	mov	r0, r3
 800176e:	4621      	mov	r1, r4
 8001770:	a37f      	add	r3, pc, #508	; (adr r3, 8001970 <SVPWM+0x2e8>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe ff0b 	bl	8000590 <__aeabi_dmul>
 800177a:	4603      	mov	r3, r0
 800177c:	460c      	mov	r4, r1
 800177e:	4625      	mov	r5, r4
 8001780:	461c      	mov	r4, r3
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	f1c3 0301 	rsb	r3, r3, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fe97 	bl	80004bc <__aeabi_i2d>
 800178e:	a37a      	add	r3, pc, #488	; (adr r3, 8001978 <SVPWM+0x2f0>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fefc 	bl	8000590 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4690      	mov	r8, r2
 800179e:	4699      	mov	r9, r3
 80017a0:	6938      	ldr	r0, [r7, #16]
 80017a2:	f7fe fe9d 	bl	80004e0 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4640      	mov	r0, r8
 80017ac:	4649      	mov	r1, r9
 80017ae:	f7fe fd39 	bl	8000224 <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f983 	bl	8000ac4 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	ee00 3a10 	vmov	s0, r3
 80017c4:	f008 fcb0 	bl	800a128 <arm_sin_f32>
 80017c8:	ee10 3a10 	vmov	r3, s0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe87 	bl	80004e0 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe fed9 	bl	8000590 <__aeabi_dmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4619      	mov	r1, r3
 80017e4:	4622      	mov	r2, r4
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f103 0408 	add.w	r4, r3, #8
 80017ec:	4608      	mov	r0, r1
 80017ee:	4611      	mov	r1, r2
 80017f0:	f7ff f968 	bl	8000ac4 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	6023      	str	r3, [r4, #0]
	T[0]=sv_Tz-T[1]-T[2];
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	3304      	adds	r3, #4
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001980 <SVPWM+0x2f8>
 8001804:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3308      	adds	r3, #8
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	edc3 7a00 	vstr	s15, [r3]

	t1=T[1];
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a59      	ldr	r2, [pc, #356]	; (8001984 <SVPWM+0x2fc>)
 8001820:	6013      	str	r3, [r2, #0]
	t2=T[2];
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	4a58      	ldr	r2, [pc, #352]	; (8001988 <SVPWM+0x300>)
 8001828:	6013      	str	r3, [r2, #0]
	t3=T[0];
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a57      	ldr	r2, [pc, #348]	; (800198c <SVPWM+0x304>)
 8001830:	6013      	str	r3, [r2, #0]

	T_gate[0]= (T[0]/2);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	ed93 7a00 	vldr	s14, [r3]
 8001838:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800183c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	edc3 7a00 	vstr	s15, [r3]
	T_gate[1]= T[1]+(T_gate[0]);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3304      	adds	r3, #4
 800184a:	ed93 7a00 	vldr	s14, [r3]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3304      	adds	r3, #4
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	edc3 7a00 	vstr	s15, [r3]
	T_gate[2]= T[2]+(T_gate[0]);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	3308      	adds	r3, #8
 8001864:	ed93 7a00 	vldr	s14, [r3]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3308      	adds	r3, #8
 8001872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001876:	edc3 7a00 	vstr	s15, [r3]
	T_gate[3]= T[1]+T[2]+(T_gate[0]);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3304      	adds	r3, #4
 800187e:	ed93 7a00 	vldr	s14, [r3]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3308      	adds	r3, #8
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	330c      	adds	r3, #12
 8001898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189c:	edc3 7a00 	vstr	s15, [r3]


	if(sector == 1)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10c      	bne.n	80018c0 <SVPWM+0x238>
	{
		*S1=T_gate[3];
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	601a      	str	r2, [r3, #0]
		*S2=T_gate[2];
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018bc:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
		*S3=T_gate[1];
	}
	else{}

}
 80018be:	e04e      	b.n	800195e <SVPWM+0x2d6>
	else if(sector == 2)
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d10c      	bne.n	80018e0 <SVPWM+0x258>
		*S1=T_gate[1];
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d4:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	e03e      	b.n	800195e <SVPWM+0x2d6>
	else if(sector == 3)
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d10c      	bne.n	8001900 <SVPWM+0x278>
		*S1=T_gate[0];
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f4:	601a      	str	r2, [r3, #0]
		*S3=T_gate[2];
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	e02e      	b.n	800195e <SVPWM+0x2d6>
	else if(sector == 4)
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	2b04      	cmp	r3, #4
 8001904:	d10c      	bne.n	8001920 <SVPWM+0x298>
		*S1=T_gate[0];
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[1];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001914:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	e01e      	b.n	800195e <SVPWM+0x2d6>
	else if(sector == 5)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b05      	cmp	r3, #5
 8001924:	d10c      	bne.n	8001940 <SVPWM+0x2b8>
		*S1=T_gate[2];
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	e00e      	b.n	800195e <SVPWM+0x2d6>
	else if(sector == 6)
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b06      	cmp	r3, #6
 8001944:	d10b      	bne.n	800195e <SVPWM+0x2d6>
		*S1=T_gate[3];
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001954:	601a      	str	r2, [r3, #0]
		*S3=T_gate[1];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195c:	601a      	str	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001968:	0f9096bc 	.word	0x0f9096bc
 800196c:	402bb67a 	.word	0x402bb67a
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fe99999 	.word	0x3fe99999
 8001978:	a437824d 	.word	0xa437824d
 800197c:	3ff0c151 	.word	0x3ff0c151
 8001980:	447a0000 	.word	0x447a0000
 8001984:	20000254 	.word	0x20000254
 8001988:	200001d0 	.word	0x200001d0
 800198c:	20000170 	.word	0x20000170

08001990 <HAL_ADCEx_InjectedConvCpltCallback>:


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b09b      	sub	sp, #108	; 0x6c
 8001994:	af02      	add	r7, sp, #8
 8001996:	6078      	str	r0, [r7, #4]


	index_event_adc++;
 8001998:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 80019a0:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80019a2:	2109      	movs	r1, #9
 80019a4:	482f      	ldr	r0, [pc, #188]	; (8001a64 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 80019a6:	f002 f96d 	bl	8003c84 <HAL_ADCEx_InjectedGetValue>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_ADCEx_InjectedConvCpltCallback+0xd8>)
 80019b0:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 80019b2:	bf00      	nop
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f5      	bne.n	80019b4 <HAL_ADCEx_InjectedConvCpltCallback+0x24>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80019c8:	f240 110f 	movw	r1, #271	; 0x10f
 80019cc:	4825      	ldr	r0, [pc, #148]	; (8001a64 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 80019ce:	f002 f959 	bl	8003c84 <HAL_ADCEx_InjectedGetValue>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 80019d8:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 80019da:	bf00      	nop
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f5      	bne.n	80019dc <HAL_ADCEx_InjectedConvCpltCallback+0x4c>
	adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80019f0:	2109      	movs	r1, #9
 80019f2:	481f      	ldr	r0, [pc, #124]	; (8001a70 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 80019f4:	f002 f946 	bl	8003c84 <HAL_ADCEx_InjectedGetValue>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 80019fe:	601a      	str	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8001a00:	bf00      	nop
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f5      	bne.n	8001a02 <HAL_ADCEx_InjectedConvCpltCallback+0x72>
	//adc_V =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
	//while((hadc2.Instance->ISR &= (0x1<<5))!=0){}

	if(index_event_adc<300)
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a1e:	d20c      	bcs.n	8001a3a <HAL_ADCEx_InjectedConvCpltCallback+0xaa>
	{
		Ia=0;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_ADCEx_InjectedConvCpltCallback+0xe8>)
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
		Ib=0;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
		Ic=0;
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_ADCEx_InjectedConvCpltCallback+0xf0>)
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e276      	b.n	8001f28 <HAL_ADCEx_InjectedConvCpltCallback+0x598>


	}
	else if(index_event_adc == 300)
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a42:	d125      	bne.n	8001a90 <HAL_ADCEx_InjectedConvCpltCallback+0x100>
	{

			   offset1=adc_Ia;
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_ADCEx_InjectedConvCpltCallback+0xd8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 8001a4a:	6013      	str	r3, [r2, #0]
			   offset2=adc_Ib;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_ADCEx_InjectedConvCpltCallback+0xf8>)
 8001a52:	6013      	str	r3, [r2, #0]
			   offset3=adc_Ic;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <HAL_ADCEx_InjectedConvCpltCallback+0xfc>)
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e264      	b.n	8001f28 <HAL_ADCEx_InjectedConvCpltCallback+0x598>
 8001a5e:	bf00      	nop
 8001a60:	2000027c 	.word	0x2000027c
 8001a64:	20000100 	.word	0x20000100
 8001a68:	20000210 	.word	0x20000210
 8001a6c:	20000288 	.word	0x20000288
 8001a70:	20000094 	.word	0x20000094
 8001a74:	20000198 	.word	0x20000198
 8001a78:	2000017c 	.word	0x2000017c
 8001a7c:	2000020c 	.word	0x2000020c
 8001a80:	2000025c 	.word	0x2000025c
 8001a84:	20000190 	.word	0x20000190
 8001a88:	200001d4 	.word	0x200001d4
 8001a8c:	20000298 	.word	0x20000298
	{

	 //   sum_currents=(adc_Ia-offset1)+(adc_Ic-offset3)+(adc_Ib-offset2);


	    adc_Ia=(adc_Ia-offset1);
 8001a90:	4bb1      	ldr	r3, [pc, #708]	; (8001d58 <HAL_ADCEx_InjectedConvCpltCallback+0x3c8>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4bb1      	ldr	r3, [pc, #708]	; (8001d5c <HAL_ADCEx_InjectedConvCpltCallback+0x3cc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	4aaf      	ldr	r2, [pc, #700]	; (8001d58 <HAL_ADCEx_InjectedConvCpltCallback+0x3c8>)
 8001a9c:	6013      	str	r3, [r2, #0]
	    adc_Ib=(adc_Ib-offset2);
 8001a9e:	4bb0      	ldr	r3, [pc, #704]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0x3d0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4bb0      	ldr	r3, [pc, #704]	; (8001d64 <HAL_ADCEx_InjectedConvCpltCallback+0x3d4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	4aad      	ldr	r2, [pc, #692]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0x3d0>)
 8001aaa:	6013      	str	r3, [r2, #0]
	    adc_Ic=(adc_Ic-offset3);
 8001aac:	4bae      	ldr	r3, [pc, #696]	; (8001d68 <HAL_ADCEx_InjectedConvCpltCallback+0x3d8>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4bae      	ldr	r3, [pc, #696]	; (8001d6c <HAL_ADCEx_InjectedConvCpltCallback+0x3dc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4aac      	ldr	r2, [pc, #688]	; (8001d68 <HAL_ADCEx_InjectedConvCpltCallback+0x3d8>)
 8001ab8:	6013      	str	r3, [r2, #0]

	    Ia=-adc_Ia/33.0;
 8001aba:	4ba7      	ldr	r3, [pc, #668]	; (8001d58 <HAL_ADCEx_InjectedConvCpltCallback+0x3c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	425b      	negs	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fcfb 	bl	80004bc <__aeabi_i2d>
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4ba9      	ldr	r3, [pc, #676]	; (8001d70 <HAL_ADCEx_InjectedConvCpltCallback+0x3e0>)
 8001acc:	f7fe fe8a 	bl	80007e4 <__aeabi_ddiv>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	f7fe fff4 	bl	8000ac4 <__aeabi_d2f>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4ba5      	ldr	r3, [pc, #660]	; (8001d74 <HAL_ADCEx_InjectedConvCpltCallback+0x3e4>)
 8001ae0:	601a      	str	r2, [r3, #0]
	    Ib=-adc_Ib/33.0;
 8001ae2:	4b9f      	ldr	r3, [pc, #636]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0x3d0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	425b      	negs	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fce7 	bl	80004bc <__aeabi_i2d>
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	4b9f      	ldr	r3, [pc, #636]	; (8001d70 <HAL_ADCEx_InjectedConvCpltCallback+0x3e0>)
 8001af4:	f7fe fe76 	bl	80007e4 <__aeabi_ddiv>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	4618      	mov	r0, r3
 8001afe:	4621      	mov	r1, r4
 8001b00:	f7fe ffe0 	bl	8000ac4 <__aeabi_d2f>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b9c      	ldr	r3, [pc, #624]	; (8001d78 <HAL_ADCEx_InjectedConvCpltCallback+0x3e8>)
 8001b08:	601a      	str	r2, [r3, #0]
	    Ic=-adc_Ic/33.0;
 8001b0a:	4b97      	ldr	r3, [pc, #604]	; (8001d68 <HAL_ADCEx_InjectedConvCpltCallback+0x3d8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	425b      	negs	r3, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fcd3 	bl	80004bc <__aeabi_i2d>
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b95      	ldr	r3, [pc, #596]	; (8001d70 <HAL_ADCEx_InjectedConvCpltCallback+0x3e0>)
 8001b1c:	f7fe fe62 	bl	80007e4 <__aeabi_ddiv>
 8001b20:	4603      	mov	r3, r0
 8001b22:	460c      	mov	r4, r1
 8001b24:	4618      	mov	r0, r3
 8001b26:	4621      	mov	r1, r4
 8001b28:	f7fe ffcc 	bl	8000ac4 <__aeabi_d2f>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b93      	ldr	r3, [pc, #588]	; (8001d7c <HAL_ADCEx_InjectedConvCpltCallback+0x3ec>)
 8001b30:	601a      	str	r2, [r3, #0]


	        arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 8001b32:	4b90      	ldr	r3, [pc, #576]	; (8001d74 <HAL_ADCEx_InjectedConvCpltCallback+0x3e4>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b90      	ldr	r3, [pc, #576]	; (8001d78 <HAL_ADCEx_InjectedConvCpltCallback+0x3e8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3e:	4b90      	ldr	r3, [pc, #576]	; (8001d80 <HAL_ADCEx_InjectedConvCpltCallback+0x3f0>)
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
 8001b42:	4b90      	ldr	r3, [pc, #576]	; (8001d84 <HAL_ADCEx_InjectedConvCpltCallback+0x3f4>)
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    *pIalpha = Ia;
 8001b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4a:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8001b4c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b50:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001d88 <HAL_ADCEx_InjectedConvCpltCallback+0x3f8>
 8001b54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b5c:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001d8c <HAL_ADCEx_InjectedConvCpltCallback+0x3fc>
 8001b60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
	    	angle_rotor_deg=TIM4->CCR1;
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_ADCEx_InjectedConvCpltCallback+0x400>)
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7a:	4b86      	ldr	r3, [pc, #536]	; (8001d94 <HAL_ADCEx_InjectedConvCpltCallback+0x404>)
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
	    	arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);
 8001b80:	4b84      	ldr	r3, [pc, #528]	; (8001d94 <HAL_ADCEx_InjectedConvCpltCallback+0x404>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	4984      	ldr	r1, [pc, #528]	; (8001d98 <HAL_ADCEx_InjectedConvCpltCallback+0x408>)
 8001b88:	4884      	ldr	r0, [pc, #528]	; (8001d9c <HAL_ADCEx_InjectedConvCpltCallback+0x40c>)
 8001b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8e:	f008 f951 	bl	8009e34 <arm_sin_cos_f32>
	    	arm_park_f32(Ialpha, Ibeta, &Id, &Iq, pSinVal, pCosVal);
 8001b92:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <HAL_ADCEx_InjectedConvCpltCallback+0x3f0>)
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	4b7b      	ldr	r3, [pc, #492]	; (8001d84 <HAL_ADCEx_InjectedConvCpltCallback+0x3f4>)
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <HAL_ADCEx_InjectedConvCpltCallback+0x40c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b7e      	ldr	r3, [pc, #504]	; (8001d98 <HAL_ADCEx_InjectedConvCpltCallback+0x408>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6538      	str	r0, [r7, #80]	; 0x50
 8001ba4:	64f9      	str	r1, [r7, #76]	; 0x4c
 8001ba6:	497e      	ldr	r1, [pc, #504]	; (8001da0 <HAL_ADCEx_InjectedConvCpltCallback+0x410>)
 8001ba8:	64b9      	str	r1, [r7, #72]	; 0x48
 8001baa:	497e      	ldr	r1, [pc, #504]	; (8001da4 <HAL_ADCEx_InjectedConvCpltCallback+0x414>)
 8001bac:	6479      	str	r1, [r7, #68]	; 0x44
 8001bae:	643a      	str	r2, [r7, #64]	; 0x40
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8001bb2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001bb6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bbe:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001bc2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8001bd4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001bd8:	eeb1 7a67 	vneg.f32	s14, s15
 8001bdc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001be8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf6:	edc3 7a00 	vstr	s15, [r3]

	    //	set_d=0;
	    //	set_q=1;

	    	// pid dla osi d
	    						ed=set_d-Id;
 8001bfa:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_ADCEx_InjectedConvCpltCallback+0x418>)
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <HAL_ADCEx_InjectedConvCpltCallback+0x410>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0a:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_ADCEx_InjectedConvCpltCallback+0x41c>)
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
	    						Vd_prev=pid_d.state[2];
 8001c10:	4b67      	ldr	r3, [pc, #412]	; (8001db0 <HAL_ADCEx_InjectedConvCpltCallback+0x420>)
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	4a67      	ldr	r2, [pc, #412]	; (8001db4 <HAL_ADCEx_InjectedConvCpltCallback+0x424>)
 8001c16:	6013      	str	r3, [r2, #0]
	    						Vd=arm_pid_f32(&pid_d, ed);
 8001c18:	4b64      	ldr	r3, [pc, #400]	; (8001dac <HAL_ADCEx_InjectedConvCpltCallback+0x41c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a64      	ldr	r2, [pc, #400]	; (8001db0 <HAL_ADCEx_InjectedConvCpltCallback+0x420>)
 8001c1e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c20:	65bb      	str	r3, [r7, #88]	; 0x58
    out = (S->A0 * in) +
 8001c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c24:	ed93 7a00 	vldr	s14, [r3]
 8001c28:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c2c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c38:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001c40:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c46:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    S->state[1] = S->state[0];
 8001c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c72:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c78:	615a      	str	r2, [r3, #20]
    return (out);
 8001c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7c:	4a4e      	ldr	r2, [pc, #312]	; (8001db8 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8001c7e:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(Vd>=sv_Vdc_limit)
 8001c80:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc2b 	bl	80004e0 <__aeabi_f2d>
 8001c8a:	a32f      	add	r3, pc, #188	; (adr r3, 8001d48 <HAL_ADCEx_InjectedConvCpltCallback+0x3b8>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	f7fe ff04 	bl	8000a9c <__aeabi_dcmpge>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_ADCEx_InjectedConvCpltCallback+0x318>
	    						{
	    							pid_d.state[2]=Vd_prev;
 8001c9a:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_ADCEx_InjectedConvCpltCallback+0x424>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a44      	ldr	r2, [pc, #272]	; (8001db0 <HAL_ADCEx_InjectedConvCpltCallback+0x420>)
 8001ca0:	6153      	str	r3, [r2, #20]
	    							Vd=sv_Vdc_limit;
 8001ca2:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8001ca4:	4a45      	ldr	r2, [pc, #276]	; (8001dbc <HAL_ADCEx_InjectedConvCpltCallback+0x42c>)
 8001ca6:	601a      	str	r2, [r3, #0]
	    						}

	    						if(Vd<=(-sv_Vdc_limit))
 8001ca8:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc17 	bl	80004e0 <__aeabi_f2d>
 8001cb2:	a327      	add	r3, pc, #156	; (adr r3, 8001d50 <HAL_ADCEx_InjectedConvCpltCallback+0x3c0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fee6 	bl	8000a88 <__aeabi_dcmple>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_ADCEx_InjectedConvCpltCallback+0x340>
	    						{
	    							pid_d.state[2]=Vd_prev;
 8001cc2:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <HAL_ADCEx_InjectedConvCpltCallback+0x424>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a3a      	ldr	r2, [pc, #232]	; (8001db0 <HAL_ADCEx_InjectedConvCpltCallback+0x420>)
 8001cc8:	6153      	str	r3, [r2, #20]
	    							Vd=(-sv_Vdc_limit);
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8001ccc:	4a3c      	ldr	r2, [pc, #240]	; (8001dc0 <HAL_ADCEx_InjectedConvCpltCallback+0x430>)
 8001cce:	601a      	str	r2, [r3, #0]
	    						}

	    	// pid dla osi q
	    						eq=set_q-Iq;
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <HAL_ADCEx_InjectedConvCpltCallback+0x434>)
 8001cd2:	ed93 7a00 	vldr	s14, [r3]
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_ADCEx_InjectedConvCpltCallback+0x414>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_ADCEx_InjectedConvCpltCallback+0x438>)
 8001ce2:	edc3 7a00 	vstr	s15, [r3]
	    						Vq_prev=pid_q.state[2];
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_ADCEx_InjectedConvCpltCallback+0x43c>)
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	4a39      	ldr	r2, [pc, #228]	; (8001dd0 <HAL_ADCEx_InjectedConvCpltCallback+0x440>)
 8001cec:	6013      	str	r3, [r2, #0]
	    						Vq=arm_pid_f32(&pid_q, eq);
 8001cee:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_ADCEx_InjectedConvCpltCallback+0x438>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a36      	ldr	r2, [pc, #216]	; (8001dcc <HAL_ADCEx_InjectedConvCpltCallback+0x43c>)
 8001cf4:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    out = (S->A0 * in) +
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	ed93 7a00 	vldr	s14, [r3]
 8001cfe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d02:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001d16:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d38:	edc7 7a08 	vstr	s15, [r7, #32]
    S->state[1] = S->state[0];
 8001d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	611a      	str	r2, [r3, #16]
 8001d44:	e046      	b.n	8001dd4 <HAL_ADCEx_InjectedConvCpltCallback+0x444>
 8001d46:	bf00      	nop
 8001d48:	0f9096bc 	.word	0x0f9096bc
 8001d4c:	402bb67a 	.word	0x402bb67a
 8001d50:	0f9096bc 	.word	0x0f9096bc
 8001d54:	c02bb67a 	.word	0xc02bb67a
 8001d58:	20000210 	.word	0x20000210
 8001d5c:	20000190 	.word	0x20000190
 8001d60:	20000198 	.word	0x20000198
 8001d64:	200001d4 	.word	0x200001d4
 8001d68:	20000288 	.word	0x20000288
 8001d6c:	20000298 	.word	0x20000298
 8001d70:	40408000 	.word	0x40408000
 8001d74:	2000017c 	.word	0x2000017c
 8001d78:	2000020c 	.word	0x2000020c
 8001d7c:	2000025c 	.word	0x2000025c
 8001d80:	20000258 	.word	0x20000258
 8001d84:	2000024c 	.word	0x2000024c
 8001d88:	3f13cd3a 	.word	0x3f13cd3a
 8001d8c:	3f93cd3a 	.word	0x3f93cd3a
 8001d90:	40000800 	.word	0x40000800
 8001d94:	20000178 	.word	0x20000178
 8001d98:	200002a4 	.word	0x200002a4
 8001d9c:	200001f8 	.word	0x200001f8
 8001da0:	200001d8 	.word	0x200001d8
 8001da4:	20000270 	.word	0x20000270
 8001da8:	2000019c 	.word	0x2000019c
 8001dac:	20000274 	.word	0x20000274
 8001db0:	200001a0 	.word	0x200001a0
 8001db4:	200001f0 	.word	0x200001f0
 8001db8:	200001c8 	.word	0x200001c8
 8001dbc:	415db3d0 	.word	0x415db3d0
 8001dc0:	c15db3d0 	.word	0xc15db3d0
 8001dc4:	2000028c 	.word	0x2000028c
 8001dc8:	200001c4 	.word	0x200001c4
 8001dcc:	2000021c 	.word	0x2000021c
 8001dd0:	200001fc 	.word	0x200001fc
    S->state[0] = in;
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	615a      	str	r2, [r3, #20]
    return (out);
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	4a5b      	ldr	r2, [pc, #364]	; (8001f50 <HAL_ADCEx_InjectedConvCpltCallback+0x5c0>)
 8001de4:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(Vq>=sv_Vdc_limit)
 8001de6:	4b5a      	ldr	r3, [pc, #360]	; (8001f50 <HAL_ADCEx_InjectedConvCpltCallback+0x5c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb78 	bl	80004e0 <__aeabi_f2d>
 8001df0:	a353      	add	r3, pc, #332	; (adr r3, 8001f40 <HAL_ADCEx_InjectedConvCpltCallback+0x5b0>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fe51 	bl	8000a9c <__aeabi_dcmpge>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_ADCEx_InjectedConvCpltCallback+0x47e>
	    						{
	    						pid_q.state[2]=Vq_prev;
 8001e00:	4b54      	ldr	r3, [pc, #336]	; (8001f54 <HAL_ADCEx_InjectedConvCpltCallback+0x5c4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a54      	ldr	r2, [pc, #336]	; (8001f58 <HAL_ADCEx_InjectedConvCpltCallback+0x5c8>)
 8001e06:	6153      	str	r3, [r2, #20]
	    						Vq=sv_Vdc_limit;
 8001e08:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_ADCEx_InjectedConvCpltCallback+0x5c0>)
 8001e0a:	4a54      	ldr	r2, [pc, #336]	; (8001f5c <HAL_ADCEx_InjectedConvCpltCallback+0x5cc>)
 8001e0c:	601a      	str	r2, [r3, #0]
	    						}

	    						if(Vq<=(-sv_Vdc_limit))
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_ADCEx_InjectedConvCpltCallback+0x5c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb64 	bl	80004e0 <__aeabi_f2d>
 8001e18:	a34b      	add	r3, pc, #300	; (adr r3, 8001f48 <HAL_ADCEx_InjectedConvCpltCallback+0x5b8>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fe33 	bl	8000a88 <__aeabi_dcmple>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_ADCEx_InjectedConvCpltCallback+0x4a6>
	    						{
	    						pid_q.state[2]=Vq_prev;
 8001e28:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <HAL_ADCEx_InjectedConvCpltCallback+0x5c4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <HAL_ADCEx_InjectedConvCpltCallback+0x5c8>)
 8001e2e:	6153      	str	r3, [r2, #20]
	    						Vq=(-sv_Vdc_limit);
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_ADCEx_InjectedConvCpltCallback+0x5c0>)
 8001e32:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_ADCEx_InjectedConvCpltCallback+0x5d0>)
 8001e34:	601a      	str	r2, [r3, #0]

	    	//angle_rotor_deg=TIM4->CCR1;
	    	//arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);


	    	arm_inv_park_f32(Vd, Vq, &Valpha, &Vbeta, pSinVal, pCosVal);
 8001e36:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <HAL_ADCEx_InjectedConvCpltCallback+0x5d4>)
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <HAL_ADCEx_InjectedConvCpltCallback+0x5c0>)
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_ADCEx_InjectedConvCpltCallback+0x5d8>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <HAL_ADCEx_InjectedConvCpltCallback+0x5dc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	61f8      	str	r0, [r7, #28]
 8001e48:	61b9      	str	r1, [r7, #24]
 8001e4a:	4949      	ldr	r1, [pc, #292]	; (8001f70 <HAL_ADCEx_InjectedConvCpltCallback+0x5e0>)
 8001e4c:	6179      	str	r1, [r7, #20]
 8001e4e:	4949      	ldr	r1, [pc, #292]	; (8001f74 <HAL_ADCEx_InjectedConvCpltCallback+0x5e4>)
 8001e50:	6139      	str	r1, [r7, #16]
 8001e52:	60fa      	str	r2, [r7, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
    *pIalpha = Id * cosVal - Iq * sinVal;
 8001e56:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e62:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e66:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	edc3 7a00 	vstr	s15, [r3]
    *pIbeta = Id * sinVal + Iq * cosVal;
 8001e78:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e84:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	edc3 7a00 	vstr	s15, [r3]

	    	AlphaBeta_To_Angle_Vref(Valpha, Vbeta, &angle_current_rad, &Vref);
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <HAL_ADCEx_InjectedConvCpltCallback+0x5e0>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <HAL_ADCEx_InjectedConvCpltCallback+0x5e4>)
 8001ea2:	ed93 7a00 	vldr	s14, [r3]
 8001ea6:	4934      	ldr	r1, [pc, #208]	; (8001f78 <HAL_ADCEx_InjectedConvCpltCallback+0x5e8>)
 8001ea8:	4834      	ldr	r0, [pc, #208]	; (8001f7c <HAL_ADCEx_InjectedConvCpltCallback+0x5ec>)
 8001eaa:	eef0 0a47 	vmov.f32	s1, s14
 8001eae:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb2:	f7ff fad9 	bl	8001468 <AlphaBeta_To_Angle_Vref>
	    	Angle_To_Sector(angle_current_rad, &sector);
 8001eb6:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_ADCEx_InjectedConvCpltCallback+0x5ec>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	4830      	ldr	r0, [pc, #192]	; (8001f80 <HAL_ADCEx_InjectedConvCpltCallback+0x5f0>)
 8001ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec2:	f7ff fb29 	bl	8001518 <Angle_To_Sector>
	    	SVPWM(sector, angle_current_rad , Vref, sv_T, sv_T_gate, &sv_S1, &sv_S2, &sv_S3);
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <HAL_ADCEx_InjectedConvCpltCallback+0x5f0>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b2d8      	uxtb	r0, r3
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_ADCEx_InjectedConvCpltCallback+0x5ec>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_ADCEx_InjectedConvCpltCallback+0x5e8>)
 8001ed4:	ed93 7a00 	vldr	s14, [r3]
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_ADCEx_InjectedConvCpltCallback+0x5f4>)
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <HAL_ADCEx_InjectedConvCpltCallback+0x5f8>)
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_ADCEx_InjectedConvCpltCallback+0x5fc>)
 8001ee2:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <HAL_ADCEx_InjectedConvCpltCallback+0x600>)
 8001ee4:	492b      	ldr	r1, [pc, #172]	; (8001f94 <HAL_ADCEx_InjectedConvCpltCallback+0x604>)
 8001ee6:	eef0 0a47 	vmov.f32	s1, s14
 8001eea:	eeb0 0a67 	vmov.f32	s0, s15
 8001eee:	f7ff fbcb 	bl	8001688 <SVPWM>

	    	TIM1->CCR1 = sv_S1;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_ADCEx_InjectedConvCpltCallback+0x5fc>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <HAL_ADCEx_InjectedConvCpltCallback+0x608>)
 8001efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001efe:	ee17 2a90 	vmov	r2, s15
 8001f02:	635a      	str	r2, [r3, #52]	; 0x34
	    	TIM1->CCR2 = sv_S2;
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_ADCEx_InjectedConvCpltCallback+0x5f8>)
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HAL_ADCEx_InjectedConvCpltCallback+0x608>)
 8001f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f10:	ee17 2a90 	vmov	r2, s15
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
	    	TIM1->CCR3 = sv_S3;
 8001f16:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_ADCEx_InjectedConvCpltCallback+0x5f4>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_ADCEx_InjectedConvCpltCallback+0x608>)
 8001f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f22:	ee17 2a90 	vmov	r2, s15
 8001f26:	63da      	str	r2, [r3, #60]	; 0x3c
	    	//Ic=0;
	}



	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001f28:	481c      	ldr	r0, [pc, #112]	; (8001f9c <HAL_ADCEx_InjectedConvCpltCallback+0x60c>)
 8001f2a:	f001 fdc5 	bl	8003ab8 <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001f2e:	481c      	ldr	r0, [pc, #112]	; (8001fa0 <HAL_ADCEx_InjectedConvCpltCallback+0x610>)
 8001f30:	f001 fdc2 	bl	8003ab8 <HAL_ADCEx_InjectedStart_IT>

}
 8001f34:	bf00      	nop
 8001f36:	3764      	adds	r7, #100	; 0x64
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	f3af 8000 	nop.w
 8001f40:	0f9096bc 	.word	0x0f9096bc
 8001f44:	402bb67a 	.word	0x402bb67a
 8001f48:	0f9096bc 	.word	0x0f9096bc
 8001f4c:	c02bb67a 	.word	0xc02bb67a
 8001f50:	200001dc 	.word	0x200001dc
 8001f54:	200001fc 	.word	0x200001fc
 8001f58:	2000021c 	.word	0x2000021c
 8001f5c:	415db3d0 	.word	0x415db3d0
 8001f60:	c15db3d0 	.word	0xc15db3d0
 8001f64:	200001c8 	.word	0x200001c8
 8001f68:	200001f8 	.word	0x200001f8
 8001f6c:	200002a4 	.word	0x200002a4
 8001f70:	2000029c 	.word	0x2000029c
 8001f74:	20000218 	.word	0x20000218
 8001f78:	20000244 	.word	0x20000244
 8001f7c:	20000208 	.word	0x20000208
 8001f80:	20000214 	.word	0x20000214
 8001f84:	20000194 	.word	0x20000194
 8001f88:	200001cc 	.word	0x200001cc
 8001f8c:	200001ec 	.word	0x200001ec
 8001f90:	20000180 	.word	0x20000180
 8001f94:	200001e0 	.word	0x200001e0
 8001f98:	40012c00 	.word	0x40012c00
 8001f9c:	20000100 	.word	0x20000100
 8001fa0:	20000094 	.word	0x20000094

08001fa4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb4:	d144      	bne.n	8002040 <HAL_GPIO_EXTI_Callback+0x9c>
	{
		if(start==0)
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_GPIO_EXTI_Callback+0x54>
		{
			start=1;
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4820      	ldr	r0, [pc, #128]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001fca:	f004 fb33 	bl	8006634 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	481e      	ldr	r0, [pc, #120]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001fd2:	f005 fc01 	bl	80077d8 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	481c      	ldr	r0, [pc, #112]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001fda:	f004 fb2b 	bl	8006634 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001fde:	2104      	movs	r1, #4
 8001fe0:	481a      	ldr	r0, [pc, #104]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001fe2:	f005 fbf9 	bl	80077d8 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001fe6:	2108      	movs	r1, #8
 8001fe8:	4818      	ldr	r0, [pc, #96]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001fea:	f004 fb23 	bl	8006634 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001fee:	2108      	movs	r1, #8
 8001ff0:	4816      	ldr	r0, [pc, #88]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001ff2:	f005 fbf1 	bl	80077d8 <HAL_TIMEx_PWMN_Start>




	}
}
 8001ff6:	e023      	b.n	8002040 <HAL_GPIO_EXTI_Callback+0x9c>
			start=0;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001ffe:	2100      	movs	r1, #0
 8002000:	4812      	ldr	r0, [pc, #72]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002002:	f004 fbe9 	bl	80067d8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002006:	2100      	movs	r1, #0
 8002008:	4810      	ldr	r0, [pc, #64]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 800200a:	f005 fc65 	bl	80078d8 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800200e:	2104      	movs	r1, #4
 8002010:	480e      	ldr	r0, [pc, #56]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002012:	f004 fbe1 	bl	80067d8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002016:	2104      	movs	r1, #4
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 800201a:	f005 fc5d 	bl	80078d8 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800201e:	2108      	movs	r1, #8
 8002020:	480a      	ldr	r0, [pc, #40]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002022:	f004 fbd9 	bl	80067d8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8002026:	2108      	movs	r1, #8
 8002028:	4808      	ldr	r0, [pc, #32]	; (800204c <HAL_GPIO_EXTI_Callback+0xa8>)
 800202a:	f005 fc55 	bl	80078d8 <HAL_TIMEx_PWMN_Stop>
			TIM1->CCR1=0;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_GPIO_EXTI_Callback+0xac>)
 8002030:	2200      	movs	r2, #0
 8002032:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_GPIO_EXTI_Callback+0xac>)
 8002036:	2200      	movs	r2, #0
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_GPIO_EXTI_Callback+0xac>)
 800203c:	2200      	movs	r2, #0
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000294 	.word	0x20000294
 800204c:	200003ac 	.word	0x200003ac
 8002050:	40012c00 	.word	0x40012c00

08002054 <HAL_UART_RxCpltCallback>:
	}

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
	{
		//HAL_UART_Receive_IT(&huart2, &recive, 1);

	}
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206c:	f000 fd0f 	bl	8002a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002070:	f000 f815 	bl	800209e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002074:	f7ff f8b2 	bl	80011dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8002078:	f000 fa16 	bl	80024a8 <MX_TIM1_Init>
  MX_TIM4_Init();
 800207c:	f000 faf4 	bl	8002668 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002080:	f000 fc44 	bl	800290c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002084:	f7fe feee 	bl	8000e64 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002088:	f7fe ff88 	bl	8000f9c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 800208c:	f000 f874 	bl	8002178 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8002090:	f000 f8a0 	bl	80021d4 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8002094:	f000 f8cc 	bl	8002230 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


    start_up();
 8002098:	f7ff f90c 	bl	80012b4 <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800209c:	e7fe      	b.n	800209c <main+0x34>

0800209e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b0a4      	sub	sp, #144	; 0x90
 80020a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020a8:	2238      	movs	r2, #56	; 0x38
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f008 f8f1 	bl	800a294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c2:	463b      	mov	r3, r7
 80020c4:	2244      	movs	r2, #68	; 0x44
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f008 f8e3 	bl	800a294 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f003 fa30 	bl	8005534 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020de:	2302      	movs	r3, #2
 80020e0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020e2:	2303      	movs	r3, #3
 80020e4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80020e6:	2302      	movs	r3, #2
 80020e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80020ea:	2350      	movs	r3, #80	; 0x50
 80020ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f0:	2302      	movs	r3, #2
 80020f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020fc:	2302      	movs	r3, #2
 80020fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002102:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fab8 	bl	800567c <HAL_RCC_OscConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002112:	f000 f82a 	bl	800216a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002116:	230f      	movs	r3, #15
 8002118:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800211a:	2303      	movs	r3, #3
 800211c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002126:	2300      	movs	r3, #0
 8002128:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800212a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800212e:	2107      	movs	r1, #7
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fdbb 	bl	8005cac <HAL_RCC_ClockConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800213c:	f000 f815 	bl	800216a <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8002140:	f248 0302 	movw	r3, #32770	; 0x8002
 8002144:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800214a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002150:	463b      	mov	r3, r7
 8002152:	4618      	mov	r0, r3
 8002154:	f003 ffc6 	bl	80060e4 <HAL_RCCEx_PeriphCLKConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800215e:	f000 f804 	bl	800216a <Error_Handler>
  }
}
 8002162:	bf00      	nop
 8002164:	3790      	adds	r7, #144	; 0x90
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <MX_OPAMP1_Init+0x54>)
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <MX_OPAMP1_Init+0x58>)
 8002180:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <MX_OPAMP1_Init+0x54>)
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <MX_OPAMP1_Init+0x54>)
 800218a:	2240      	movs	r2, #64	; 0x40
 800218c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <MX_OPAMP1_Init+0x54>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <MX_OPAMP1_Init+0x54>)
 8002196:	2200      	movs	r2, #0
 8002198:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <MX_OPAMP1_Init+0x54>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <MX_OPAMP1_Init+0x54>)
 80021a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <MX_OPAMP1_Init+0x54>)
 80021aa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_OPAMP1_Init+0x54>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_OPAMP1_Init+0x54>)
 80021b8:	f002 fdc6 	bl	8004d48 <HAL_OPAMP_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 80021c2:	f7ff ffd2 	bl	800216a <Error_Handler>
  }

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000324 	.word	0x20000324
 80021d0:	40010300 	.word	0x40010300

080021d4 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <MX_OPAMP2_Init+0x54>)
 80021da:	4a14      	ldr	r2, [pc, #80]	; (800222c <MX_OPAMP2_Init+0x58>)
 80021dc:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_OPAMP2_Init+0x54>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <MX_OPAMP2_Init+0x54>)
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_OPAMP2_Init+0x54>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <MX_OPAMP2_Init+0x54>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_OPAMP2_Init+0x54>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <MX_OPAMP2_Init+0x54>)
 80021fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <MX_OPAMP2_Init+0x54>)
 8002206:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_OPAMP2_Init+0x54>)
 800220e:	2200      	movs	r2, #0
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_OPAMP2_Init+0x54>)
 8002214:	f002 fd98 	bl	8004d48 <HAL_OPAMP_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 800221e:	f7ff ffa4 	bl	800216a <Error_Handler>
  }

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002ac 	.word	0x200002ac
 800222c:	40010304 	.word	0x40010304

08002230 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <MX_OPAMP3_Init+0x54>)
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <MX_OPAMP3_Init+0x58>)
 8002238:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <MX_OPAMP3_Init+0x54>)
 800223c:	2200      	movs	r2, #0
 800223e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <MX_OPAMP3_Init+0x54>)
 8002242:	2240      	movs	r2, #64	; 0x40
 8002244:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <MX_OPAMP3_Init+0x54>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <MX_OPAMP3_Init+0x54>)
 800224e:	2200      	movs	r2, #0
 8002250:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_OPAMP3_Init+0x54>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <MX_OPAMP3_Init+0x54>)
 800225a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800225e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <MX_OPAMP3_Init+0x54>)
 8002262:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_OPAMP3_Init+0x54>)
 800226a:	2200      	movs	r2, #0
 800226c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_OPAMP3_Init+0x54>)
 8002270:	f002 fd6a 	bl	8004d48 <HAL_OPAMP_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 800227a:	f7ff ff76 	bl	800216a <Error_Handler>
  }

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200002e8 	.word	0x200002e8
 8002288:	40010308 	.word	0x40010308

0800228c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2e      	ldr	r2, [pc, #184]	; (8002364 <HAL_OPAMP_MspInit+0xd8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d119      	bne.n	80022e2 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <HAL_OPAMP_MspInit+0xdc>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	4a2d      	ldr	r2, [pc, #180]	; (8002368 <HAL_OPAMP_MspInit+0xdc>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_OPAMP_MspInit+0xdc>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80022c6:	230e      	movs	r3, #14
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ca:	2303      	movs	r3, #3
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022dc:	f002 fb9a 	bl	8004a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 80022e0:	e03b      	b.n	800235a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_OPAMP_MspInit+0xe0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d119      	bne.n	8002320 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_OPAMP_MspInit+0xdc>)
 80022ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f0:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <HAL_OPAMP_MspInit+0xdc>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_OPAMP_MspInit+0xdc>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002304:	23e0      	movs	r3, #224	; 0xe0
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002308:	2303      	movs	r3, #3
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231a:	f002 fb7b 	bl	8004a14 <HAL_GPIO_Init>
}
 800231e:	e01c      	b.n	800235a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <HAL_OPAMP_MspInit+0xe4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d117      	bne.n	800235a <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_OPAMP_MspInit+0xdc>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <HAL_OPAMP_MspInit+0xdc>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_OPAMP_MspInit+0xdc>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002342:	2307      	movs	r3, #7
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002346:	2303      	movs	r3, #3
 8002348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <HAL_OPAMP_MspInit+0xe8>)
 8002356:	f002 fb5d 	bl	8004a14 <HAL_GPIO_Init>
}
 800235a:	bf00      	nop
 800235c:	3728      	adds	r7, #40	; 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40010300 	.word	0x40010300
 8002368:	40021000 	.word	0x40021000
 800236c:	40010304 	.word	0x40010304
 8002370:	40010308 	.word	0x40010308
 8002374:	48000400 	.word	0x48000400

08002378 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002386:	6093      	str	r3, [r2, #8]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40007000 	.word	0x40007000

08002398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_MspInit+0x44>)
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_MspInit+0x44>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6613      	str	r3, [r2, #96]	; 0x60
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_MspInit+0x44>)
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_MspInit+0x44>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_MspInit+0x44>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_MspInit+0x44>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80023ce:	f7ff ffd3 	bl	8002378 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000

080023e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <MemManage_Handler+0x4>

080023fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler+0x4>

08002406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 fb7e 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002440:	4803      	ldr	r0, [pc, #12]	; (8002450 <ADC1_2_IRQHandler+0x14>)
 8002442:	f000 fe57 	bl	80030f4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002446:	4803      	ldr	r0, [pc, #12]	; (8002454 <ADC1_2_IRQHandler+0x18>)
 8002448:	f000 fe54 	bl	80030f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000100 	.word	0x20000100
 8002454:	20000094 	.word	0x20000094

08002458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <USART2_IRQHandler+0x10>)
 800245e:	f005 fd09 	bl	8007e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200003f8 	.word	0x200003f8

0800246c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002470:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002474:	f002 fc50 	bl	8004d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <SystemInit+0x28>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <SystemInit+0x28>)
 8002488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SystemInit+0x28>)
 8002492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002496:	609a      	str	r2, [r3, #8]
#endif
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b09c      	sub	sp, #112	; 0x70
 80024ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2234      	movs	r2, #52	; 0x34
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f007 fed6 	bl	800a294 <memset>

  htim1.Instance = TIM1;
 80024e8:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <MX_TIM1_Init+0x1b8>)
 80024ea:	4a5e      	ldr	r2, [pc, #376]	; (8002664 <MX_TIM1_Init+0x1bc>)
 80024ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024ee:	4b5c      	ldr	r3, [pc, #368]	; (8002660 <MX_TIM1_Init+0x1b8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80024f4:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <MX_TIM1_Init+0x1b8>)
 80024f6:	2220      	movs	r2, #32
 80024f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80024fa:	4b59      	ldr	r3, [pc, #356]	; (8002660 <MX_TIM1_Init+0x1b8>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002500:	4b57      	ldr	r3, [pc, #348]	; (8002660 <MX_TIM1_Init+0x1b8>)
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002506:	4b56      	ldr	r3, [pc, #344]	; (8002660 <MX_TIM1_Init+0x1b8>)
 8002508:	2200      	movs	r2, #0
 800250a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250c:	4b54      	ldr	r3, [pc, #336]	; (8002660 <MX_TIM1_Init+0x1b8>)
 800250e:	2200      	movs	r2, #0
 8002510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002512:	4853      	ldr	r0, [pc, #332]	; (8002660 <MX_TIM1_Init+0x1b8>)
 8002514:	f003 ffd6 	bl	80064c4 <HAL_TIM_Base_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800251e:	f7ff fe24 	bl	800216a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002526:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002528:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800252c:	4619      	mov	r1, r3
 800252e:	484c      	ldr	r0, [pc, #304]	; (8002660 <MX_TIM1_Init+0x1b8>)
 8002530:	f004 fc2c 	bl	8006d8c <HAL_TIM_ConfigClockSource>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800253a:	f7ff fe16 	bl	800216a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800253e:	4848      	ldr	r0, [pc, #288]	; (8002660 <MX_TIM1_Init+0x1b8>)
 8002540:	f004 f817 	bl	8006572 <HAL_TIM_PWM_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800254a:	f7ff fe0e 	bl	800216a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800254e:	2370      	movs	r3, #112	; 0x70
 8002550:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800255a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800255e:	4619      	mov	r1, r3
 8002560:	483f      	ldr	r0, [pc, #252]	; (8002660 <MX_TIM1_Init+0x1b8>)
 8002562:	f005 fa17 	bl	8007994 <HAL_TIMEx_MasterConfigSynchronization>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800256c:	f7ff fdfd 	bl	800216a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002570:	2360      	movs	r3, #96	; 0x60
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002578:	2300      	movs	r3, #0
 800257a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800257c:	2300      	movs	r3, #0
 800257e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002588:	2300      	movs	r3, #0
 800258a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800258c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002590:	2200      	movs	r2, #0
 8002592:	4619      	mov	r1, r3
 8002594:	4832      	ldr	r0, [pc, #200]	; (8002660 <MX_TIM1_Init+0x1b8>)
 8002596:	f004 fae9 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80025a0:	f7ff fde3 	bl	800216a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025ac:	2204      	movs	r2, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	482b      	ldr	r0, [pc, #172]	; (8002660 <MX_TIM1_Init+0x1b8>)
 80025b2:	f004 fadb 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80025bc:	f7ff fdd5 	bl	800216a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025c8:	2208      	movs	r2, #8
 80025ca:	4619      	mov	r1, r3
 80025cc:	4824      	ldr	r0, [pc, #144]	; (8002660 <MX_TIM1_Init+0x1b8>)
 80025ce:	f004 facd 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80025d8:	f7ff fdc7 	bl	800216a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80025dc:	2370      	movs	r3, #112	; 0x70
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025e4:	2300      	movs	r3, #0
 80025e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025ec:	220c      	movs	r2, #12
 80025ee:	4619      	mov	r1, r3
 80025f0:	481b      	ldr	r0, [pc, #108]	; (8002660 <MX_TIM1_Init+0x1b8>)
 80025f2:	f004 fabb 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80025fc:	f7ff fdb5 	bl	800216a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002604:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8002610:	2344      	movs	r3, #68	; 0x44
 8002612:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800262a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 8002630:	2303      	movs	r3, #3
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002634:	2300      	movs	r3, #0
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4807      	ldr	r0, [pc, #28]	; (8002660 <MX_TIM1_Init+0x1b8>)
 8002642:	f005 fa29 	bl	8007a98 <HAL_TIMEx_ConfigBreakDeadTime>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 800264c:	f7ff fd8d 	bl	800216a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002650:	4803      	ldr	r0, [pc, #12]	; (8002660 <MX_TIM1_Init+0x1b8>)
 8002652:	f000 f8d3 	bl	80027fc <HAL_TIM_MspPostInit>

}
 8002656:	bf00      	nop
 8002658:	3770      	adds	r7, #112	; 0x70
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200003ac 	.word	0x200003ac
 8002664:	40012c00 	.word	0x40012c00

08002668 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f007 fe0c 	bl	800a294 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267c:	463b      	mov	r3, r7
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <MX_TIM4_Init+0xa0>)
 8002688:	4a20      	ldr	r2, [pc, #128]	; (800270c <MX_TIM4_Init+0xa4>)
 800268a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <MX_TIM4_Init+0xa0>)
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <MX_TIM4_Init+0xa0>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <MX_TIM4_Init+0xa0>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <MX_TIM4_Init+0xa0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <MX_TIM4_Init+0xa0>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 80026aa:	4b19      	ldr	r3, [pc, #100]	; (8002710 <MX_TIM4_Init+0xa8>)
 80026ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026b2:	2301      	movs	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026c2:	2301      	movs	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	4619      	mov	r1, r3
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <MX_TIM4_Init+0xa0>)
 80026d6:	f004 f915 	bl	8006904 <HAL_TIM_Encoder_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80026e0:	f7ff fd43 	bl	800216a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026ec:	463b      	mov	r3, r7
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_TIM4_Init+0xa0>)
 80026f2:	f005 f94f 	bl	8007994 <HAL_TIMEx_MasterConfigSynchronization>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80026fc:	f7ff fd35 	bl	800216a <Error_Handler>
  }

}
 8002700:	bf00      	nop
 8002702:	3730      	adds	r7, #48	; 0x30
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000360 	.word	0x20000360
 800270c:	40000800 	.word	0x40000800
 8002710:	00010006 	.word	0x00010006

08002714 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_TIM_Base_MspInit+0x38>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10b      	bne.n	800273e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_TIM_Base_MspInit+0x3c>)
 8002728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_TIM_Base_MspInit+0x3c>)
 800272c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002730:	6613      	str	r3, [r2, #96]	; 0x60
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_TIM_Base_MspInit+0x3c>)
 8002734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40021000 	.word	0x40021000

08002754 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d138      	bne.n	80027e8 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_TIM_Encoder_MspInit+0xa0>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <HAL_TIM_Encoder_MspInit+0xa0>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 80027a6:	23c0      	movs	r3, #192	; 0xc0
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027ae:	2302      	movs	r3, #2
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b2:	2302      	movs	r3, #2
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027b6:	2302      	movs	r3, #2
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	480d      	ldr	r0, [pc, #52]	; (80027f8 <HAL_TIM_Encoder_MspInit+0xa4>)
 80027c2:	f002 f927 	bl	8004a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 80027c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d4:	2302      	movs	r3, #2
 80027d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027d8:	2302      	movs	r3, #2
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	4805      	ldr	r0, [pc, #20]	; (80027f8 <HAL_TIM_Encoder_MspInit+0xa4>)
 80027e4:	f002 f916 	bl	8004a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027e8:	bf00      	nop
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40000800 	.word	0x40000800
 80027f4:	40021000 	.word	0x40021000
 80027f8:	48000400 	.word	0x48000400

080027fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a38      	ldr	r2, [pc, #224]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d169      	bne.n	80028f2 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	4a37      	ldr	r2, [pc, #220]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800286a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002870:	2302      	movs	r3, #2
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002878:	2304      	movs	r3, #4
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	4820      	ldr	r0, [pc, #128]	; (8002904 <HAL_TIM_MspPostInit+0x108>)
 8002884:	f002 f8c6 	bl	8004a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002892:	2302      	movs	r3, #2
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002896:	2302      	movs	r3, #2
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800289a:	2304      	movs	r3, #4
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	4818      	ldr	r0, [pc, #96]	; (8002908 <HAL_TIM_MspPostInit+0x10c>)
 80028a6:	f002 f8b5 	bl	8004a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80028aa:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028b4:	2302      	movs	r3, #2
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b8:	2302      	movs	r3, #2
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028bc:	2306      	movs	r3, #6
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ca:	f002 f8a3 	bl	8004a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80028e0:	230b      	movs	r3, #11
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f002 f891 	bl	8004a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028f2:	bf00      	nop
 80028f4:	3728      	adds	r7, #40	; 0x28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40021000 	.word	0x40021000
 8002904:	48000800 	.word	0x48000800
 8002908:	48000400 	.word	0x48000400

0800290c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002912:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800291c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <MX_USART2_UART_Init+0x90>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_USART2_UART_Init+0x90>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_USART2_UART_Init+0x90>)
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002950:	2200      	movs	r2, #0
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002954:	4811      	ldr	r0, [pc, #68]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002956:	f005 f964 	bl	8007c22 <HAL_UART_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002960:	f7ff fc03 	bl	800216a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002964:	2100      	movs	r1, #0
 8002966:	480d      	ldr	r0, [pc, #52]	; (800299c <MX_USART2_UART_Init+0x90>)
 8002968:	f007 f949 	bl	8009bfe <HAL_UARTEx_SetTxFifoThreshold>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002972:	f7ff fbfa 	bl	800216a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002976:	2100      	movs	r1, #0
 8002978:	4808      	ldr	r0, [pc, #32]	; (800299c <MX_USART2_UART_Init+0x90>)
 800297a:	f007 f97e 	bl	8009c7a <HAL_UARTEx_SetRxFifoThreshold>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002984:	f7ff fbf1 	bl	800216a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_USART2_UART_Init+0x90>)
 800298a:	f007 f8ff 	bl	8009b8c <HAL_UARTEx_DisableFifoMode>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002994:	f7ff fbe9 	bl	800216a <Error_Handler>
  }

}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200003f8 	.word	0x200003f8
 80029a0:	40004400 	.word	0x40004400

080029a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_UART_MspInit+0x8c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d12f      	bne.n	8002a26 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_UART_MspInit+0x90>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_UART_MspInit+0x90>)
 80029cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d0:	6593      	str	r3, [r2, #88]	; 0x58
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_UART_MspInit+0x90>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_UART_MspInit+0x90>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <HAL_UART_MspInit+0x90>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_UART_MspInit+0x90>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80029f6:	2318      	movs	r3, #24
 80029f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a06:	2307      	movs	r3, #7
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4809      	ldr	r0, [pc, #36]	; (8002a38 <HAL_UART_MspInit+0x94>)
 8002a12:	f001 ffff 	bl	8004a14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2108      	movs	r1, #8
 8002a1a:	2026      	movs	r0, #38	; 0x26
 8002a1c:	f001 ff5f 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a20:	2026      	movs	r0, #38	; 0x26
 8002a22:	f001 ff76 	bl	8004912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a26:	bf00      	nop
 8002a28:	3728      	adds	r7, #40	; 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40004400 	.word	0x40004400
 8002a34:	40021000 	.word	0x40021000
 8002a38:	48000400 	.word	0x48000400

08002a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a40:	480d      	ldr	r0, [pc, #52]	; (8002a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a42:	490e      	ldr	r1, [pc, #56]	; (8002a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <LoopForever+0xe>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a48:	e002      	b.n	8002a50 <LoopCopyDataInit>

08002a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4e:	3304      	adds	r3, #4

08002a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a54:	d3f9      	bcc.n	8002a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a56:	4a0b      	ldr	r2, [pc, #44]	; (8002a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a58:	4c0b      	ldr	r4, [pc, #44]	; (8002a88 <LoopForever+0x16>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a5c:	e001      	b.n	8002a62 <LoopFillZerobss>

08002a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a60:	3204      	adds	r2, #4

08002a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a64:	d3fb      	bcc.n	8002a5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a66:	f7ff fd09 	bl	800247c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a6a:	f007 fbef 	bl	800a24c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a6e:	f7ff fafb 	bl	8002068 <main>

08002a72 <LoopForever>:

LoopForever:
    b LoopForever
 8002a72:	e7fe      	b.n	8002a72 <LoopForever>
  ldr   r0, =_estack
 8002a74:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a7c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a80:	0800aee4 	.word	0x0800aee4
  ldr r2, =_sbss
 8002a84:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002a88:	20000488 	.word	0x20000488

08002a8c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a8c:	e7fe      	b.n	8002a8c <COMP1_2_3_IRQHandler>

08002a8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a98:	2003      	movs	r0, #3
 8002a9a:	f001 ff15 	bl	80048c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f000 f80e 	bl	8002ac0 <HAL_InitTick>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	71fb      	strb	r3, [r7, #7]
 8002aae:	e001      	b.n	8002ab4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ab0:	f7ff fc72 	bl	8002398 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ab4:	79fb      	ldrb	r3, [r7, #7]

}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_InitTick+0x68>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d022      	beq.n	8002b1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002ad4:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_InitTick+0x6c>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_InitTick+0x68>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 ff20 	bl	800492e <HAL_SYSTICK_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10f      	bne.n	8002b14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	d809      	bhi.n	8002b0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002afa:	2200      	movs	r2, #0
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	f04f 30ff 	mov.w	r0, #4294967295
 8002b02:	f001 feec 	bl	80048de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_InitTick+0x70>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	e007      	b.n	8002b1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	e004      	b.n	8002b1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e001      	b.n	8002b1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000008 	.word	0x20000008
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_IncTick+0x1c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_IncTick+0x20>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_IncTick+0x1c>)
 8002b44:	6013      	str	r3, [r2, #0]
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20000484 	.word	0x20000484
 8002b54:	20000008 	.word	0x20000008

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000484 	.word	0x20000484

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d004      	beq.n	8002b94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_Delay+0x40>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b94:	bf00      	nop
 8002b96:	f7ff ffdf 	bl	8002b58 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d8f7      	bhi.n	8002b96 <HAL_Delay+0x26>
  {
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000008 	.word	0x20000008

08002bb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 031f 	and.w	r3, r3, #31
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6093      	str	r3, [r2, #8]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c96:	d101      	bne.n	8002c9c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cbe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce6:	d101      	bne.n	8002cec <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d36:	f043 0202 	orr.w	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <LL_ADC_IsEnabled+0x18>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <LL_ADC_IsEnabled+0x1a>
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d101      	bne.n	8002d88 <LL_ADC_IsDisableOngoing+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_ADC_IsDisableOngoing+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d101      	bne.n	8002dae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d101      	bne.n	8002dd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e16b      	b.n	80030d6 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fe f93d 	bl	800108c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff2c 	bl	8002c82 <LL_ADC_IsDeepPowerDownEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff12 	bl	8002c5e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff47 	bl	8002cd2 <LL_ADC_IsInternalRegulatorEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d113      	bne.n	8002e72 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff2b 	bl	8002caa <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e54:	4ba2      	ldr	r3, [pc, #648]	; (80030e0 <HAL_ADC_Init+0x2fc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	4aa2      	ldr	r2, [pc, #648]	; (80030e4 <HAL_ADC_Init+0x300>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e64:	e002      	b.n	8002e6c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f9      	bne.n	8002e66 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff2b 	bl	8002cd2 <LL_ADC_IsInternalRegulatorEnabled>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10d      	bne.n	8002e9e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e86:	f043 0210 	orr.w	r2, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff77 	bl	8002d96 <LL_ADC_REG_IsConversionOngoing>
 8002ea8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 8106 	bne.w	80030c4 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 8102 	bne.w	80030c4 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ec8:	f043 0202 	orr.w	r2, r3, #2
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff38 	bl	8002d4a <LL_ADC_IsEnabled>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d111      	bne.n	8002f04 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ee4:	f7ff ff31 	bl	8002d4a <LL_ADC_IsEnabled>
 8002ee8:	4604      	mov	r4, r0
 8002eea:	487f      	ldr	r0, [pc, #508]	; (80030e8 <HAL_ADC_Init+0x304>)
 8002eec:	f7ff ff2d 	bl	8002d4a <LL_ADC_IsEnabled>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4323      	orrs	r3, r4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4619      	mov	r1, r3
 8002efe:	487b      	ldr	r0, [pc, #492]	; (80030ec <HAL_ADC_Init+0x308>)
 8002f00:	f7ff fe58 	bl	8002bb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7f5b      	ldrb	r3, [r3, #29]
 8002f08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d106      	bne.n	8002f40 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	3b01      	subs	r3, #1
 8002f38:	045b      	lsls	r3, r3, #17
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	4b63      	ldr	r3, [pc, #396]	; (80030f0 <HAL_ADC_Init+0x30c>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff03 	bl	8002d96 <LL_ADC_REG_IsConversionOngoing>
 8002f90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ff10 	bl	8002dbc <LL_ADC_INJ_IsConversionOngoing>
 8002f9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d16d      	bne.n	8003080 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d16a      	bne.n	8003080 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc6:	f023 0302 	bic.w	r3, r3, #2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	69b9      	ldr	r1, [r7, #24]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d017      	beq.n	800300c <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ff4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6911      	ldr	r1, [r2, #16]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	430b      	orrs	r3, r1
 8003006:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800300a:	e013      	b.n	8003034 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800301a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800302c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003030:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303a:	2b01      	cmp	r3, #1
 800303c:	d118      	bne.n	8003070 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003060:	430a      	orrs	r2, r1
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	611a      	str	r2, [r3, #16]
 800306e:	e007      	b.n	8003080 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d10c      	bne.n	80030a2 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f023 010f 	bic.w	r1, r3, #15
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	1e5a      	subs	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
 80030a0:	e007      	b.n	80030b2 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 020f 	bic.w	r2, r2, #15
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80030c2:	e007      	b.n	80030d4 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	f043 0210 	orr.w	r2, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	; 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd90      	pop	{r4, r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000
 80030e4:	053e2d63 	.word	0x053e2d63
 80030e8:	50000100 	.word	0x50000100
 80030ec:	50000300 	.word	0x50000300
 80030f0:	fff04007 	.word	0xfff04007

080030f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030fc:	2300      	movs	r3, #0
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003110:	4883      	ldr	r0, [pc, #524]	; (8003320 <HAL_ADC_IRQHandler+0x22c>)
 8003112:	f7ff fd88 	bl	8002c26 <LL_ADC_GetMultimode>
 8003116:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d017      	beq.n	8003152 <HAL_ADC_IRQHandler+0x5e>
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d012      	beq.n	8003152 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fded 	bl	8003d24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2202      	movs	r2, #2
 8003150:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d004      	beq.n	8003166 <HAL_ADC_IRQHandler+0x72>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8085 	beq.w	800327c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d07f      	beq.n	800327c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fd1e 	bl	8002bda <LL_ADC_REG_IsTriggerSourceSWStart>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d064      	beq.n	800326e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a5e      	ldr	r2, [pc, #376]	; (8003324 <HAL_ADC_IRQHandler+0x230>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d002      	beq.n	80031b4 <HAL_ADC_IRQHandler+0xc0>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	e001      	b.n	80031b8 <HAL_ADC_IRQHandler+0xc4>
 80031b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	4293      	cmp	r3, r2
 80031be:	d008      	beq.n	80031d2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d002      	beq.n	80031d2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b09      	cmp	r3, #9
 80031d0:	d104      	bne.n	80031dc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	e00d      	b.n	80031f8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a50      	ldr	r2, [pc, #320]	; (8003324 <HAL_ADC_IRQHandler+0x230>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d002      	beq.n	80031ec <HAL_ADC_IRQHandler+0xf8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	e001      	b.n	80031f0 <HAL_ADC_IRQHandler+0xfc>
 80031ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d135      	bne.n	800326e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b08      	cmp	r3, #8
 800320e:	d12e      	bne.n	800326e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fdbe 	bl	8002d96 <LL_ADC_REG_IsConversionOngoing>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11a      	bne.n	8003256 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 020c 	bic.w	r2, r2, #12
 800322e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d112      	bne.n	800326e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c
 8003254:	e00b      	b.n	800326e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	f043 0210 	orr.w	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f95a 	bl	8003528 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	220c      	movs	r2, #12
 800327a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d004      	beq.n	8003290 <HAL_ADC_IRQHandler+0x19c>
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 809e 	beq.w	80033d8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8098 	beq.w	80033d8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fc9b 	bl	8002c00 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fc82 	bl	8002bda <LL_ADC_REG_IsTriggerSourceSWStart>
 80032d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <HAL_ADC_IRQHandler+0x230>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d002      	beq.n	80032e8 <HAL_ADC_IRQHandler+0x1f4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	e001      	b.n	80032ec <HAL_ADC_IRQHandler+0x1f8>
 80032e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d008      	beq.n	8003306 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b06      	cmp	r3, #6
 80032fe:	d002      	beq.n	8003306 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b07      	cmp	r3, #7
 8003304:	d104      	bne.n	8003310 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	623b      	str	r3, [r7, #32]
 800330e:	e011      	b.n	8003334 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a03      	ldr	r2, [pc, #12]	; (8003324 <HAL_ADC_IRQHandler+0x230>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d006      	beq.n	8003328 <HAL_ADC_IRQHandler+0x234>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	e005      	b.n	800332c <HAL_ADC_IRQHandler+0x238>
 8003320:	50000300 	.word	0x50000300
 8003324:	50000100 	.word	0x50000100
 8003328:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800332c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10c      	bne.n	8003354 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003340:	2b00      	cmp	r3, #0
 8003342:	d142      	bne.n	80033ca <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d03f      	beq.n	80033ca <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003350:	2b00      	cmp	r3, #0
 8003352:	d13a      	bne.n	80033ca <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d133      	bne.n	80033ca <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d12e      	bne.n	80033ca <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fd23 	bl	8002dbc <LL_ADC_INJ_IsConversionOngoing>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11a      	bne.n	80033b2 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800338a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d112      	bne.n	80033ca <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80033b0:	e00b      	b.n	80033ca <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	f043 0210 	orr.w	r2, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c2:	f043 0201 	orr.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe fae0 	bl	8001990 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2260      	movs	r2, #96	; 0x60
 80033d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d011      	beq.n	8003406 <HAL_ADC_IRQHandler+0x312>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00c      	beq.n	8003406 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f89f 	bl	800353c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <HAL_ADC_IRQHandler+0x342>
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fc68 	bl	8003cfc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343c:	2b00      	cmp	r3, #0
 800343e:	d012      	beq.n	8003466 <HAL_ADC_IRQHandler+0x372>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fc5a 	bl	8003d10 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d036      	beq.n	80034de <HAL_ADC_IRQHandler+0x3ea>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	d031      	beq.n	80034de <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003482:	2301      	movs	r3, #1
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
 8003486:	e014      	b.n	80034b2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800348e:	4825      	ldr	r0, [pc, #148]	; (8003524 <HAL_ADC_IRQHandler+0x430>)
 8003490:	f7ff fbd7 	bl	8002c42 <LL_ADC_GetMultiDMATransfer>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800349a:	2301      	movs	r3, #1
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
 800349e:	e008      	b.n	80034b2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80034ae:	2301      	movs	r3, #1
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d10e      	bne.n	80034d6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c8:	f043 0202 	orr.w	r2, r3, #2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f83d 	bl	8003550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2210      	movs	r2, #16
 80034dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d018      	beq.n	800351a <HAL_ADC_IRQHandler+0x426>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d013      	beq.n	800351a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	f043 0208 	orr.w	r2, r3, #8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003512:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fbe7 	bl	8003ce8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800351a:	bf00      	nop
 800351c:	3728      	adds	r7, #40	; 0x28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	50000300 	.word	0x50000300

08003528 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fbea 	bl	8002d4a <LL_ADC_IsEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d146      	bne.n	800360a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <ADC_Enable+0xb0>)
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e032      	b.n	800360c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fba5 	bl	8002cfa <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035b0:	f7ff fad2 	bl	8002b58 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035b6:	e021      	b.n	80035fc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fbc4 	bl	8002d4a <LL_ADC_IsEnabled>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fb94 	bl	8002cfa <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035d2:	f7ff fac1 	bl	8002b58 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d90d      	bls.n	80035fc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e4:	f043 0210 	orr.w	r2, r3, #16
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e007      	b.n	800360c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d1d6      	bne.n	80035b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	8000003f 	.word	0x8000003f

08003618 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fba3 	bl	8002d70 <LL_ADC_IsDisableOngoing>
 800362a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fb8a 	bl	8002d4a <LL_ADC_IsEnabled>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d040      	beq.n	80036be <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d13d      	bne.n	80036be <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030d 	and.w	r3, r3, #13
 800364c:	2b01      	cmp	r3, #1
 800364e:	d10c      	bne.n	800366a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fb64 	bl	8002d22 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2203      	movs	r2, #3
 8003660:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003662:	f7ff fa79 	bl	8002b58 <HAL_GetTick>
 8003666:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003668:	e022      	b.n	80036b0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e01c      	b.n	80036c0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003686:	f7ff fa67 	bl	8002b58 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d90d      	bls.n	80036b0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	f043 0210 	orr.w	r2, r3, #16
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e007      	b.n	80036c0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e3      	bne.n	8003686 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <LL_ADC_SetCommonPathInternalCh>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	609a      	str	r2, [r3, #8]
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <LL_ADC_GetCommonPathInternalCh>:
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <LL_ADC_SetOffset>:
{
 800370c:	b490      	push	{r4, r7}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3360      	adds	r3, #96	; 0x60
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003728:	6822      	ldr	r2, [r4, #0]
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <LL_ADC_SetOffset+0x40>)
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800373e:	6023      	str	r3, [r4, #0]
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bc90      	pop	{r4, r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	03fff000 	.word	0x03fff000

08003750 <LL_ADC_GetOffsetChannel>:
{
 8003750:	b490      	push	{r4, r7}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3360      	adds	r3, #96	; 0x60
 800375e:	461a      	mov	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bc90      	pop	{r4, r7}
 8003776:	4770      	bx	lr

08003778 <LL_ADC_SetOffsetState>:
{
 8003778:	b490      	push	{r4, r7}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3360      	adds	r3, #96	; 0x60
 8003788:	461a      	mov	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4313      	orrs	r3, r2
 800379c:	6023      	str	r3, [r4, #0]
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc90      	pop	{r4, r7}
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_SetOffsetSign>:
{
 80037a8:	b490      	push	{r4, r7}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3360      	adds	r3, #96	; 0x60
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	6023      	str	r3, [r4, #0]
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc90      	pop	{r4, r7}
 80037d6:	4770      	bx	lr

080037d8 <LL_ADC_SetOffsetSaturation>:
{
 80037d8:	b490      	push	{r4, r7}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3360      	adds	r3, #96	; 0x60
 80037e8:	461a      	mov	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	6023      	str	r3, [r4, #0]
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bc90      	pop	{r4, r7}
 8003806:	4770      	bx	lr

08003808 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	615a      	str	r2, [r3, #20]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <LL_ADC_INJ_GetTrigAuto>:
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_ADC_SetChannelSamplingTime>:
{
 800384a:	b490      	push	{r4, r7}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3314      	adds	r3, #20
 800385a:	461a      	mov	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	0e5b      	lsrs	r3, r3, #25
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	4413      	add	r3, r2
 8003868:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	0d1b      	lsrs	r3, r3, #20
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2107      	movs	r1, #7
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	401a      	ands	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	0d1b      	lsrs	r3, r3, #20
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	4313      	orrs	r3, r2
 800388e:	6023      	str	r3, [r4, #0]
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bc90      	pop	{r4, r7}
 8003898:	4770      	bx	lr
	...

0800389c <LL_ADC_SetChannelSingleDiff>:
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f003 0318 	and.w	r3, r3, #24
 80038be:	4908      	ldr	r1, [pc, #32]	; (80038e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038c0:	40d9      	lsrs	r1, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	400b      	ands	r3, r1
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	431a      	orrs	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	0007ffff 	.word	0x0007ffff

080038e4 <LL_ADC_GetMultimode>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 031f 	and.w	r3, r3, #31
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_ADC_IsEnabled>:
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <LL_ADC_IsEnabled+0x18>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <LL_ADC_IsEnabled+0x1a>
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_ADC_StartCalibration>:
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003942:	4313      	orrs	r3, r2
 8003944:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	609a      	str	r2, [r3, #8]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_ADC_IsCalibrationOnGoing>:
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800396c:	d101      	bne.n	8003972 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_REG_IsConversionOngoing>:
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b04      	cmp	r3, #4
 8003992:	d101      	bne.n	8003998 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <LL_ADC_INJ_StartConversion>:
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039ba:	f043 0208 	orr.w	r2, r3, #8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <LL_ADC_INJ_IsConversionOngoing>:
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d101      	bne.n	80039e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_ADCEx_Calibration_Start+0x1c>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e04d      	b.n	8003aac <HAL_ADCEx_Calibration_Start+0xb8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fdfd 	bl	8003618 <ADC_Disable>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d136      	bne.n	8003a96 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a30:	f023 0302 	bic.w	r3, r3, #2
 8003a34:	f043 0202 	orr.w	r2, r3, #2
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6839      	ldr	r1, [r7, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ff6f 	bl	8003926 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a48:	e014      	b.n	8003a74 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d90d      	bls.n	8003a74 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5c:	f023 0312 	bic.w	r3, r3, #18
 8003a60:	f043 0210 	orr.w	r2, r3, #16
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e01b      	b.n	8003aac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff6d 	bl	8003958 <LL_ADC_IsCalibrationOnGoing>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e2      	bne.n	8003a4a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	f023 0303 	bic.w	r3, r3, #3
 8003a8c:	f043 0201 	orr.w	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a94:	e005      	b.n	8003aa2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	f043 0210 	orr.w	r2, r3, #16
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	0004de01 	.word	0x0004de01

08003ab8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ac0:	486e      	ldr	r0, [pc, #440]	; (8003c7c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8003ac2:	f7ff ff0f 	bl	80038e4 <LL_ADC_GetMultimode>
 8003ac6:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff7e 	bl	80039ce <LL_ADC_INJ_IsConversionOngoing>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e0ca      	b.n	8003c72 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ae6:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0b2      	b.n	8003c72 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_ADCEx_InjectedStart_IT+0x62>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e0ab      	b.n	8003c72 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fd1e 	bl	8003564 <ADC_Enable>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 809a 	bne.w	8003c68 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d006      	beq.n	8003b4e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b44:	f023 0208 	bic.w	r2, r3, #8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	661a      	str	r2, [r3, #96]	; 0x60
 8003b4c:	e002      	b.n	8003b54 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a44      	ldr	r2, [pc, #272]	; (8003c80 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d002      	beq.n	8003b78 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	e001      	b.n	8003b7c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8003b78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d002      	beq.n	8003b8a <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d105      	bne.n	8003b96 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2260      	movs	r2, #96	; 0x60
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bc2:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d110      	bne.n	8003bee <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0220 	bic.w	r2, r2, #32
 8003bda:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bea:	605a      	str	r2, [r3, #4]
          break;
 8003bec:	e010      	b.n	8003c10 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfc:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0220 	orr.w	r2, r2, #32
 8003c0c:	605a      	str	r2, [r3, #4]
          break;
 8003c0e:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d002      	beq.n	8003c20 <HAL_ADCEx_InjectedStart_IT+0x168>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	e001      	b.n	8003c24 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8003c20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d008      	beq.n	8003c3e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d002      	beq.n	8003c3e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	d10d      	bne.n	8003c5a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fdf3 	bl	800382e <LL_ADC_INJ_GetTrigAuto>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d110      	bne.n	8003c70 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fea7 	bl	80039a6 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003c58:	e00a      	b.n	8003c70 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c66:	e003      	b.n	8003c70 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	50000300 	.word	0x50000300
 8003c80:	50000100 	.word	0x50000100

08003c84 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	f240 2215 	movw	r2, #533	; 0x215
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_ADCEx_InjectedGetValue+0x32>
 8003c98:	f240 321b 	movw	r2, #795	; 0x31b
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_ADCEx_InjectedGetValue+0x26>
 8003ca0:	f240 120f 	movw	r2, #271	; 0x10f
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_ADCEx_InjectedGetValue+0x3e>
 8003ca8:	e011      	b.n	8003cce <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb2:	60fb      	str	r3, [r7, #12]
      break;
 8003cb4:	e011      	b.n	8003cda <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	60fb      	str	r3, [r7, #12]
      break;
 8003cc0:	e00b      	b.n	8003cda <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cca:	60fb      	str	r3, [r7, #12]
      break;
 8003ccc:	e005      	b.n	8003cda <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd6:	60fb      	str	r3, [r7, #12]
      break;
 8003cd8:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b0a8      	sub	sp, #160	; 0xa0
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d102      	bne.n	8003d62 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f000 bc39 	b.w	80045d4 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d130      	bne.n	8003ddc <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b09      	cmp	r3, #9
 8003d80:	d179      	bne.n	8003e76 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d010      	beq.n	8003dac <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	0e9b      	lsrs	r3, r3, #26
 8003d90:	025b      	lsls	r3, r3, #9
 8003d92:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003d9e:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003daa:	e007      	b.n	8003dbc <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	0e9b      	lsrs	r3, r3, #26
 8003db2:	025b      	lsls	r3, r3, #9
 8003db4:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dc2:	4ba3      	ldr	r3, [pc, #652]	; (8004050 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003dd8:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003dda:	e04c      	b.n	8003e76 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11d      	bne.n	8003e20 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6a1a      	ldr	r2, [r3, #32]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003e08:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e14:	e004      	b.n	8003e20 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	f003 021f 	and.w	r2, r3, #31
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e66:	4b7a      	ldr	r3, [pc, #488]	; (8004050 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	430b      	orrs	r3, r1
 8003e74:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fda7 	bl	80039ce <LL_ADC_INJ_IsConversionOngoing>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d124      	bne.n	8003ed0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d112      	bne.n	8003eb6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ea0:	055a      	lsls	r2, r3, #21
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ea8:	051b      	lsls	r3, r3, #20
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	60da      	str	r2, [r3, #12]
 8003eb4:	e00c      	b.n	8003ed0 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ec6:	055a      	lsls	r2, r3, #21
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fd53 	bl	8003980 <LL_ADC_REG_IsConversionOngoing>
 8003eda:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fd73 	bl	80039ce <LL_ADC_INJ_IsConversionOngoing>
 8003ee8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f040 81d4 	bne.w	800429e <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 81cf 	bne.w	800429e <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d116      	bne.n	8003f3e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d108      	bne.n	8003f2c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003f28:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f2a:	e01f      	b.n	8003f6c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003f3a:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f3c:	e016      	b.n	8003f6c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d109      	bne.n	8003f5c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003f5a:	e007      	b.n	8003f6c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003f6a:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d110      	bne.n	8003f98 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0202 	orr.w	r2, r2, #2
 8003f94:	611a      	str	r2, [r3, #16]
 8003f96:	e007      	b.n	8003fa8 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0202 	bic.w	r2, r2, #2
 8003fa6:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f7ff fc44 	bl	800384a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fc1c 	bl	8003808 <LL_ADC_SetSamplingTimeCommonConfig>
 8003fd0:	e00e      	b.n	8003ff0 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f7ff fc33 	bl	800384a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fc0c 	bl	8003808 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d025      	beq.n	800405e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6919      	ldr	r1, [r3, #16]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004022:	f7ff fb73 	bl	800370c <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6919      	ldr	r1, [r3, #16]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	461a      	mov	r2, r3
 8004034:	f7ff fbb8 	bl	80037a8 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800404c:	e003      	b.n	8004056 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800404e:	bf00      	nop
 8004050:	04104000 	.word	0x04104000
 8004054:	2300      	movs	r3, #0
 8004056:	461a      	mov	r2, r3
 8004058:	f7ff fbbe 	bl	80037d8 <LL_ADC_SetOffsetSaturation>
 800405c:	e11f      	b.n	800429e <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fb73 	bl	8003750 <LL_ADC_GetOffsetChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fb68 	bl	8003750 <LL_ADC_GetOffsetChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	0e9b      	lsrs	r3, r3, #26
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	e014      	b.n	80040b4 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fb5d 	bl	8003750 <LL_ADC_GetOffsetChannel>
 8004096:	4603      	mov	r3, r0
 8004098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040ac:	fab3 f383 	clz	r3, r3
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_ADCEx_InjectedConfigChannel+0x394>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	0e9b      	lsrs	r3, r3, #26
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	e00a      	b.n	80040e2 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040d4:	fa93 f3a3 	rbit	r3, r3
 80040d8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80040da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d106      	bne.n	80040f4 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fb42 	bl	8003778 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fb28 	bl	8003750 <LL_ADC_GetOffsetChannel>
 8004100:	4603      	mov	r3, r0
 8004102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fb1d 	bl	8003750 <LL_ADC_GetOffsetChannel>
 8004116:	4603      	mov	r3, r0
 8004118:	0e9b      	lsrs	r3, r3, #26
 800411a:	f003 021f 	and.w	r2, r3, #31
 800411e:	e010      	b.n	8004142 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2101      	movs	r1, #1
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fb12 	bl	8003750 <LL_ADC_GetOffsetChannel>
 800412c:	4603      	mov	r3, r0
 800412e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414a:	2b00      	cmp	r3, #0
 800414c:	d105      	bne.n	800415a <HAL_ADCEx_InjectedConfigChannel+0x422>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	0e9b      	lsrs	r3, r3, #26
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	e00a      	b.n	8004170 <HAL_ADCEx_InjectedConfigChannel+0x438>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8004168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	429a      	cmp	r2, r3
 8004172:	d106      	bne.n	8004182 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2200      	movs	r2, #0
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fafb 	bl	8003778 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2102      	movs	r1, #2
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fae1 	bl	8003750 <LL_ADC_GetOffsetChannel>
 800418e:	4603      	mov	r3, r0
 8004190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <HAL_ADCEx_InjectedConfigChannel+0x476>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2102      	movs	r1, #2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fad6 	bl	8003750 <LL_ADC_GetOffsetChannel>
 80041a4:	4603      	mov	r3, r0
 80041a6:	0e9b      	lsrs	r3, r3, #26
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	e010      	b.n	80041d0 <HAL_ADCEx_InjectedConfigChannel+0x498>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff facb 	bl	8003750 <LL_ADC_GetOffsetChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80041c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c8:	fab3 f383 	clz	r3, r3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0e9b      	lsrs	r3, r3, #26
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	e00a      	b.n	80041fe <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80041f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	429a      	cmp	r2, r3
 8004200:	d106      	bne.n	8004210 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	2102      	movs	r1, #2
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fab4 	bl	8003778 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2103      	movs	r1, #3
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fa9a 	bl	8003750 <LL_ADC_GetOffsetChannel>
 800421c:	4603      	mov	r3, r0
 800421e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_ADCEx_InjectedConfigChannel+0x504>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2103      	movs	r1, #3
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fa8f 	bl	8003750 <LL_ADC_GetOffsetChannel>
 8004232:	4603      	mov	r3, r0
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	f003 021f 	and.w	r2, r3, #31
 800423a:	e010      	b.n	800425e <HAL_ADCEx_InjectedConfigChannel+0x526>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2103      	movs	r1, #3
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fa84 	bl	8003750 <LL_ADC_GetOffsetChannel>
 8004248:	4603      	mov	r3, r0
 800424a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8004254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	0e9b      	lsrs	r3, r3, #26
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	e00a      	b.n	800428c <HAL_ADCEx_InjectedConfigChannel+0x554>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	429a      	cmp	r2, r3
 800428e:	d106      	bne.n	800429e <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2200      	movs	r2, #0
 8004296:	2103      	movs	r1, #3
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fa6d 	bl	8003778 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fb2c 	bl	8003900 <LL_ADC_IsEnabled>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 810c 	bne.w	80044c8 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	461a      	mov	r2, r3
 80042be:	f7ff faed 	bl	800389c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4aab      	ldr	r2, [pc, #684]	; (8004574 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	f040 80fd 	bne.w	80044c8 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <HAL_ADCEx_InjectedConfigChannel+0x5be>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	0e9b      	lsrs	r3, r3, #26
 80042e4:	3301      	adds	r3, #1
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2b09      	cmp	r3, #9
 80042ec:	bf94      	ite	ls
 80042ee:	2301      	movls	r3, #1
 80042f0:	2300      	movhi	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	e012      	b.n	800431c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3301      	adds	r3, #1
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2b09      	cmp	r3, #9
 8004314:	bf94      	ite	ls
 8004316:	2301      	movls	r3, #1
 8004318:	2300      	movhi	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d064      	beq.n	80043ea <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004328:	2b00      	cmp	r3, #0
 800432a:	d107      	bne.n	800433c <HAL_ADCEx_InjectedConfigChannel+0x604>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0e9b      	lsrs	r3, r3, #26
 8004332:	3301      	adds	r3, #1
 8004334:	069b      	lsls	r3, r3, #26
 8004336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800433a:	e00e      	b.n	800435a <HAL_ADCEx_InjectedConfigChannel+0x622>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004344:	fa93 f3a3 	rbit	r3, r3
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	3301      	adds	r3, #1
 8004354:	069b      	lsls	r3, r3, #26
 8004356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_ADCEx_InjectedConfigChannel+0x642>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0e9b      	lsrs	r3, r3, #26
 800436c:	3301      	adds	r3, #1
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2101      	movs	r1, #1
 8004374:	fa01 f303 	lsl.w	r3, r1, r3
 8004378:	e010      	b.n	800439c <HAL_ADCEx_InjectedConfigChannel+0x664>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	ea42 0103 	orr.w	r1, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	0e9b      	lsrs	r3, r3, #26
 80043b2:	3301      	adds	r3, #1
 80043b4:	f003 021f 	and.w	r2, r3, #31
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	051b      	lsls	r3, r3, #20
 80043c0:	e011      	b.n	80043e6 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	f003 021f 	and.w	r2, r3, #31
 80043de:	4613      	mov	r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4413      	add	r3, r2
 80043e4:	051b      	lsls	r3, r3, #20
 80043e6:	430b      	orrs	r3, r1
 80043e8:	e069      	b.n	80044be <HAL_ADCEx_InjectedConfigChannel+0x786>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	0e9b      	lsrs	r3, r3, #26
 80043fc:	3301      	adds	r3, #1
 80043fe:	069b      	lsls	r3, r3, #26
 8004400:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004404:	e00e      	b.n	8004424 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	fa93 f3a3 	rbit	r3, r3
 8004412:	623b      	str	r3, [r7, #32]
  return result;
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	069b      	lsls	r3, r3, #26
 8004420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0e9b      	lsrs	r3, r3, #26
 8004436:	3301      	adds	r3, #1
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	e010      	b.n	8004466 <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	61bb      	str	r3, [r7, #24]
  return result;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	fab3 f383 	clz	r3, r3
 8004458:	b2db      	uxtb	r3, r3
 800445a:	3301      	adds	r3, #1
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2101      	movs	r1, #1
 8004462:	fa01 f303 	lsl.w	r3, r1, r3
 8004466:	ea42 0103 	orr.w	r1, r2, r3
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10d      	bne.n	8004492 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	0e9b      	lsrs	r3, r3, #26
 800447c:	3301      	adds	r3, #1
 800447e:	f003 021f 	and.w	r2, r3, #31
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	3b1e      	subs	r3, #30
 800448a:	051b      	lsls	r3, r3, #20
 800448c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004490:	e014      	b.n	80044bc <HAL_ADCEx_InjectedConfigChannel+0x784>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	613b      	str	r3, [r7, #16]
  return result;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	3301      	adds	r3, #1
 80044aa:	f003 021f 	and.w	r2, r3, #31
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	3b1e      	subs	r3, #30
 80044b6:	051b      	lsls	r3, r3, #20
 80044b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044bc:	430b      	orrs	r3, r1
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	6892      	ldr	r2, [r2, #8]
 80044c2:	4619      	mov	r1, r3
 80044c4:	f7ff f9c1 	bl	800384a <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d079      	beq.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d4:	4829      	ldr	r0, [pc, #164]	; (800457c <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80044d6:	f7ff f90a 	bl	80036ee <LL_ADC_GetCommonPathInternalCh>
 80044da:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a27      	ldr	r2, [pc, #156]	; (8004580 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a25      	ldr	r2, [pc, #148]	; (8004584 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d126      	bne.n	8004540 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d120      	bne.n	8004540 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004506:	d15f      	bne.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004508:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800450c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004510:	4619      	mov	r1, r3
 8004512:	481a      	ldr	r0, [pc, #104]	; (800457c <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8004514:	f7ff f8d8 	bl	80036c8 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004518:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	4a1b      	ldr	r2, [pc, #108]	; (800458c <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	099a      	lsrs	r2, r3, #6
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8004530:	e002      	b.n	8004538 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3b01      	subs	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f9      	bne.n	8004532 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800453e:	e043      	b.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a12      	ldr	r2, [pc, #72]	; (8004590 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d126      	bne.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800454a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800454e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d120      	bne.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d033      	beq.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004568:	4619      	mov	r1, r3
 800456a:	4804      	ldr	r0, [pc, #16]	; (800457c <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800456c:	f7ff f8ac 	bl	80036c8 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004570:	e02a      	b.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
 8004572:	bf00      	nop
 8004574:	407f0000 	.word	0x407f0000
 8004578:	80080000 	.word	0x80080000
 800457c:	50000300 	.word	0x50000300
 8004580:	c3210000 	.word	0xc3210000
 8004584:	90c00010 	.word	0x90c00010
 8004588:	20000000 	.word	0x20000000
 800458c:	053e2d63 	.word	0x053e2d63
 8004590:	c7520000 	.word	0xc7520000
 8004594:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0f      	ldr	r2, [pc, #60]	; (80045dc <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d112      	bne.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10c      	bne.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a0b      	ldr	r2, [pc, #44]	; (80045e0 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045c0:	4619      	mov	r1, r3
 80045c2:	4808      	ldr	r0, [pc, #32]	; (80045e4 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 80045c4:	f7ff f880 	bl	80036c8 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045d0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	37a0      	adds	r7, #160	; 0xa0
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	cb840000 	.word	0xcb840000
 80045e0:	50000100 	.word	0x50000100
 80045e4:	50000300 	.word	0x50000300

080045e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b0a1      	sub	sp, #132	; 0x84
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004602:	2302      	movs	r3, #2
 8004604:	e087      	b.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004616:	d102      	bne.n	800461e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	e001      	b.n	8004622 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e06a      	b.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f99c 	bl	8003980 <LL_ADC_REG_IsConversionOngoing>
 8004648:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff f996 	bl	8003980 <LL_ADC_REG_IsConversionOngoing>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d14c      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800465a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800465c:	2b00      	cmp	r3, #0
 800465e:	d149      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004660:	4b30      	ldr	r3, [pc, #192]	; (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004662:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d028      	beq.n	80046be <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800466c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6859      	ldr	r1, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800467e:	035b      	lsls	r3, r3, #13
 8004680:	430b      	orrs	r3, r1
 8004682:	431a      	orrs	r2, r3
 8004684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004686:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004688:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800468c:	f7ff f938 	bl	8003900 <LL_ADC_IsEnabled>
 8004690:	4604      	mov	r4, r0
 8004692:	4823      	ldr	r0, [pc, #140]	; (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004694:	f7ff f934 	bl	8003900 <LL_ADC_IsEnabled>
 8004698:	4603      	mov	r3, r0
 800469a:	4323      	orrs	r3, r4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d133      	bne.n	8004708 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046a8:	f023 030f 	bic.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	6811      	ldr	r1, [r2, #0]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	6892      	ldr	r2, [r2, #8]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	431a      	orrs	r2, r3
 80046b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046bc:	e024      	b.n	8004708 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046ce:	f7ff f917 	bl	8003900 <LL_ADC_IsEnabled>
 80046d2:	4604      	mov	r4, r0
 80046d4:	4812      	ldr	r0, [pc, #72]	; (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80046d6:	f7ff f913 	bl	8003900 <LL_ADC_IsEnabled>
 80046da:	4603      	mov	r3, r0
 80046dc:	4323      	orrs	r3, r4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d112      	bne.n	8004708 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046ea:	f023 030f 	bic.w	r3, r3, #15
 80046ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046f2:	e009      	b.n	8004708 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004706:	e000      	b.n	800470a <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004708:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004712:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004716:	4618      	mov	r0, r3
 8004718:	3784      	adds	r7, #132	; 0x84
 800471a:	46bd      	mov	sp, r7
 800471c:	bd90      	pop	{r4, r7, pc}
 800471e:	bf00      	nop
 8004720:	50000100 	.word	0x50000100
 8004724:	50000300 	.word	0x50000300

08004728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <__NVIC_SetPriorityGrouping+0x44>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004744:	4013      	ands	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800475a:	4a04      	ldr	r2, [pc, #16]	; (800476c <__NVIC_SetPriorityGrouping+0x44>)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	60d3      	str	r3, [r2, #12]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <__NVIC_GetPriorityGrouping+0x18>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	0a1b      	lsrs	r3, r3, #8
 800477a:	f003 0307 	and.w	r3, r3, #7
}
 800477e:	4618      	mov	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479a:	2b00      	cmp	r3, #0
 800479c:	db0b      	blt.n	80047b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	f003 021f 	and.w	r2, r3, #31
 80047a4:	4907      	ldr	r1, [pc, #28]	; (80047c4 <__NVIC_EnableIRQ+0x38>)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2001      	movs	r0, #1
 80047ae:	fa00 f202 	lsl.w	r2, r0, r2
 80047b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	e000e100 	.word	0xe000e100

080047c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	6039      	str	r1, [r7, #0]
 80047d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	db0a      	blt.n	80047f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	490c      	ldr	r1, [pc, #48]	; (8004814 <__NVIC_SetPriority+0x4c>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	0112      	lsls	r2, r2, #4
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	440b      	add	r3, r1
 80047ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047f0:	e00a      	b.n	8004808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4908      	ldr	r1, [pc, #32]	; (8004818 <__NVIC_SetPriority+0x50>)
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	3b04      	subs	r3, #4
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	440b      	add	r3, r1
 8004806:	761a      	strb	r2, [r3, #24]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	e000e100 	.word	0xe000e100
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800481c:	b480      	push	{r7}
 800481e:	b089      	sub	sp, #36	; 0x24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f1c3 0307 	rsb	r3, r3, #7
 8004836:	2b04      	cmp	r3, #4
 8004838:	bf28      	it	cs
 800483a:	2304      	movcs	r3, #4
 800483c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3304      	adds	r3, #4
 8004842:	2b06      	cmp	r3, #6
 8004844:	d902      	bls.n	800484c <NVIC_EncodePriority+0x30>
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3b03      	subs	r3, #3
 800484a:	e000      	b.n	800484e <NVIC_EncodePriority+0x32>
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	f04f 32ff 	mov.w	r2, #4294967295
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43da      	mvns	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	401a      	ands	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004864:	f04f 31ff 	mov.w	r1, #4294967295
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	43d9      	mvns	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	4313      	orrs	r3, r2
         );
}
 8004876:	4618      	mov	r0, r3
 8004878:	3724      	adds	r7, #36	; 0x24
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3b01      	subs	r3, #1
 8004890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004894:	d301      	bcc.n	800489a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004896:	2301      	movs	r3, #1
 8004898:	e00f      	b.n	80048ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800489a:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <SysTick_Config+0x40>)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3b01      	subs	r3, #1
 80048a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048a2:	210f      	movs	r1, #15
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	f7ff ff8e 	bl	80047c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <SysTick_Config+0x40>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048b2:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <SysTick_Config+0x40>)
 80048b4:	2207      	movs	r2, #7
 80048b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	e000e010 	.word	0xe000e010

080048c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff ff29 	bl	8004728 <__NVIC_SetPriorityGrouping>
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	4603      	mov	r3, r0
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048ec:	f7ff ff40 	bl	8004770 <__NVIC_GetPriorityGrouping>
 80048f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	6978      	ldr	r0, [r7, #20]
 80048f8:	f7ff ff90 	bl	800481c <NVIC_EncodePriority>
 80048fc:	4602      	mov	r2, r0
 80048fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004902:	4611      	mov	r1, r2
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff5f 	bl	80047c8 <__NVIC_SetPriority>
}
 800490a:	bf00      	nop
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	4603      	mov	r3, r0
 800491a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800491c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff33 	bl	800478c <__NVIC_EnableIRQ>
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff ffa4 	bl	8004884 <SysTick_Config>
 800493c:	4603      	mov	r3, r0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d00d      	beq.n	800497a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2204      	movs	r2, #4
 8004962:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e047      	b.n	8004a0a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 020e 	bic.w	r2, r2, #14
 8004988:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f003 021f 	and.w	r2, r3, #31
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2101      	movs	r1, #1
 80049b8:	fa01 f202 	lsl.w	r2, r1, r2
 80049bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00c      	beq.n	80049ea <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
    }
  }
  return status;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a22:	e15a      	b.n	8004cda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2101      	movs	r1, #1
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	4013      	ands	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 814c 	beq.w	8004cd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d00b      	beq.n	8004a5c <HAL_GPIO_Init+0x48>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d007      	beq.n	8004a5c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a50:	2b11      	cmp	r3, #17
 8004a52:	d003      	beq.n	8004a5c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b12      	cmp	r3, #18
 8004a5a:	d130      	bne.n	8004abe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	2203      	movs	r2, #3
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4013      	ands	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a92:	2201      	movs	r2, #1
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 0201 	and.w	r2, r3, #1
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	2203      	movs	r2, #3
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d003      	beq.n	8004afe <HAL_GPIO_Init+0xea>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b12      	cmp	r3, #18
 8004afc:	d123      	bne.n	8004b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	08da      	lsrs	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3208      	adds	r2, #8
 8004b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	220f      	movs	r2, #15
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	08da      	lsrs	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3208      	adds	r2, #8
 8004b40:	6939      	ldr	r1, [r7, #16]
 8004b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	2203      	movs	r2, #3
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0203 	and.w	r2, r3, #3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80a6 	beq.w	8004cd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b88:	4b5b      	ldr	r3, [pc, #364]	; (8004cf8 <HAL_GPIO_Init+0x2e4>)
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8c:	4a5a      	ldr	r2, [pc, #360]	; (8004cf8 <HAL_GPIO_Init+0x2e4>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	6613      	str	r3, [r2, #96]	; 0x60
 8004b94:	4b58      	ldr	r3, [pc, #352]	; (8004cf8 <HAL_GPIO_Init+0x2e4>)
 8004b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ba0:	4a56      	ldr	r2, [pc, #344]	; (8004cfc <HAL_GPIO_Init+0x2e8>)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	220f      	movs	r2, #15
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bca:	d01f      	beq.n	8004c0c <HAL_GPIO_Init+0x1f8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a4c      	ldr	r2, [pc, #304]	; (8004d00 <HAL_GPIO_Init+0x2ec>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d019      	beq.n	8004c08 <HAL_GPIO_Init+0x1f4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a4b      	ldr	r2, [pc, #300]	; (8004d04 <HAL_GPIO_Init+0x2f0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <HAL_GPIO_Init+0x1f0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a4a      	ldr	r2, [pc, #296]	; (8004d08 <HAL_GPIO_Init+0x2f4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00d      	beq.n	8004c00 <HAL_GPIO_Init+0x1ec>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a49      	ldr	r2, [pc, #292]	; (8004d0c <HAL_GPIO_Init+0x2f8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <HAL_GPIO_Init+0x1e8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a48      	ldr	r2, [pc, #288]	; (8004d10 <HAL_GPIO_Init+0x2fc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_GPIO_Init+0x1e4>
 8004bf4:	2305      	movs	r3, #5
 8004bf6:	e00a      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004bf8:	2306      	movs	r3, #6
 8004bfa:	e008      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	e006      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004c00:	2303      	movs	r3, #3
 8004c02:	e004      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e002      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_GPIO_Init+0x1fa>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	f002 0203 	and.w	r2, r2, #3
 8004c14:	0092      	lsls	r2, r2, #2
 8004c16:	4093      	lsls	r3, r2
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c1e:	4937      	ldr	r1, [pc, #220]	; (8004cfc <HAL_GPIO_Init+0x2e8>)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	3302      	adds	r3, #2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c2c:	4b39      	ldr	r3, [pc, #228]	; (8004d14 <HAL_GPIO_Init+0x300>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c50:	4a30      	ldr	r2, [pc, #192]	; (8004d14 <HAL_GPIO_Init+0x300>)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004c56:	4b2f      	ldr	r3, [pc, #188]	; (8004d14 <HAL_GPIO_Init+0x300>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c7a:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <HAL_GPIO_Init+0x300>)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c80:	4b24      	ldr	r3, [pc, #144]	; (8004d14 <HAL_GPIO_Init+0x300>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ca4:	4a1b      	ldr	r2, [pc, #108]	; (8004d14 <HAL_GPIO_Init+0x300>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004caa:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <HAL_GPIO_Init+0x300>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cce:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <HAL_GPIO_Init+0x300>)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f ae9d 	bne.w	8004a24 <HAL_GPIO_Init+0x10>
  }
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	48000400 	.word	0x48000400
 8004d04:	48000800 	.word	0x48000800
 8004d08:	48000c00 	.word	0x48000c00
 8004d0c:	48001000 	.word	0x48001000
 8004d10:	48001400 	.word	0x48001400
 8004d14:	40010400 	.word	0x40010400

08004d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d006      	beq.n	8004d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d2e:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd f934 	bl	8001fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40010400 	.word	0x40010400

08004d48 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0bb      	b.n	8004ed6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	d101      	bne.n	8004d6e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0b3      	b.n	8004ed6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d101      	bne.n	8004d7e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e0ab      	b.n	8004ed6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d7e:	4b58      	ldr	r3, [pc, #352]	; (8004ee0 <HAL_OPAMP_Init+0x198>)
 8004d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d82:	4a57      	ldr	r2, [pc, #348]	; (8004ee0 <HAL_OPAMP_Init+0x198>)
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	6613      	str	r3, [r2, #96]	; 0x60
 8004d8a:	4b55      	ldr	r3, [pc, #340]	; (8004ee0 <HAL_OPAMP_Init+0x198>)
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fd fa6e 	bl	800228c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d003      	beq.n	8004dc0 <HAL_OPAMP_Init+0x78>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b60      	cmp	r3, #96	; 0x60
 8004dbe:	d133      	bne.n	8004e28 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 0110 	bic.w	r1, r3, #16
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_OPAMP_Init+0x19c>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6851      	ldr	r1, [r2, #4]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6892      	ldr	r2, [r2, #8]
 8004de8:	4311      	orrs	r1, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6912      	ldr	r2, [r2, #16]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	7d09      	ldrb	r1, [r1, #20]
 8004df4:	2901      	cmp	r1, #1
 8004df6:	d102      	bne.n	8004dfe <HAL_OPAMP_Init+0xb6>
 8004df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dfc:	e000      	b.n	8004e00 <HAL_OPAMP_Init+0xb8>
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4311      	orrs	r1, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e06:	4311      	orrs	r1, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e12:	04d2      	lsls	r2, r2, #19
 8004e14:	4311      	orrs	r1, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e1a:	0612      	lsls	r2, r2, #24
 8004e1c:	4311      	orrs	r1, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	430b      	orrs	r3, r1
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e035      	b.n	8004e94 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 0110 	bic.w	r1, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <HAL_OPAMP_Init+0x19c>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6851      	ldr	r1, [r2, #4]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6892      	ldr	r2, [r2, #8]
 8004e50:	4311      	orrs	r1, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68d2      	ldr	r2, [r2, #12]
 8004e56:	4311      	orrs	r1, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6912      	ldr	r2, [r2, #16]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	7d09      	ldrb	r1, [r1, #20]
 8004e62:	2901      	cmp	r1, #1
 8004e64:	d102      	bne.n	8004e6c <HAL_OPAMP_Init+0x124>
 8004e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e6a:	e000      	b.n	8004e6e <HAL_OPAMP_Init+0x126>
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e74:	4311      	orrs	r1, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e7a:	4311      	orrs	r1, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e80:	04d2      	lsls	r2, r2, #19
 8004e82:	4311      	orrs	r1, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e88:	0612      	lsls	r2, r2, #24
 8004e8a:	4311      	orrs	r1, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	db10      	blt.n	8004ec0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d103      	bne.n	8004ed4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	e0003e11 	.word	0xe0003e11

08004ee8 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
 8004efe:	e01d      	b.n	8004f3c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b05      	cmp	r3, #5
 8004f0a:	d102      	bne.n	8004f12 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
 8004f10:	e014      	b.n	8004f3c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d10c      	bne.n	8004f38 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2204      	movs	r2, #4
 8004f32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004f36:	e001      	b.n	8004f3c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b08c      	sub	sp, #48	; 0x30
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e2df      	b.n	800552c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d001      	beq.n	8004f7c <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e2d7      	b.n	800552c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d001      	beq.n	8004f8c <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e2cf      	b.n	800552c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d001      	beq.n	8004f9c <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e2c7      	b.n	800552c <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0202 	orr.w	r2, r2, #2
 8004faa:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0202 	orr.w	r2, r2, #2
 8004fba:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0202 	orr.w	r2, r2, #2
 8004fca:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0210 	orr.w	r2, r2, #16
 8004fda:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0210 	orr.w	r2, r2, #16
 8004fea:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0210 	orr.w	r2, r2, #16
 8004ffa:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800501a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800503a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800504a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800505a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 800508c:	2310      	movs	r3, #16
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 8005090:	2310      	movs	r3, #16
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 8005094:	2310      	movs	r3, #16
 8005096:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 8005098:	2308      	movs	r3, #8
 800509a:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 800509c:	e056      	b.n	800514c <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	061a      	lsls	r2, r3, #24
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	061a      	lsls	r2, r3, #24
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	061a      	lsls	r2, r3, #24
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 80050e0:	2002      	movs	r0, #2
 80050e2:	f7fd fd45 	bl	8002b70 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 80050f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	4413      	add	r3, r2
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fc:	e003      	b.n	8005106 <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 80050fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8005114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	4413      	add	r3, r2
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
 800511c:	e003      	b.n	8005126 <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 800511e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e003      	b.n	8005146 <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1a5      	bne.n	800509e <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	061a      	lsls	r2, r3, #24
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	061a      	lsls	r2, r3, #24
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	061a      	lsls	r2, r3, #24
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8005194:	2002      	movs	r0, #2
 8005196:	f7fd fceb 	bl	8002b70 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	3301      	adds	r3, #1
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	061a      	lsls	r2, r3, #24
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	3301      	adds	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	061a      	lsls	r2, r3, #24
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	3301      	adds	r3, #1
 8005200:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	061a      	lsls	r2, r3, #24
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800522a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800523e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005252:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 8005254:	2310      	movs	r3, #16
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 8005258:	2310      	movs	r3, #16
 800525a:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 800525c:	2310      	movs	r3, #16
 800525e:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 8005260:	2308      	movs	r3, #8
 8005262:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8005264:	e056      	b.n	8005314 <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	04da      	lsls	r2, r3, #19
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	04da      	lsls	r2, r3, #19
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	04da      	lsls	r2, r3, #19
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 80052a8:	2002      	movs	r0, #2
 80052aa:	f7fd fc61 	bl	8002b70 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 80052bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	4413      	add	r3, r2
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c4:	e003      	b.n	80052ce <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 80052c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 80052dc:	6a3a      	ldr	r2, [r7, #32]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	4413      	add	r3, r2
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	e003      	b.n	80052ee <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	4413      	add	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	e003      	b.n	800530e <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1a5      	bne.n	8005266 <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	04da      	lsls	r2, r3, #19
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	04da      	lsls	r2, r3, #19
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	04da      	lsls	r2, r3, #19
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 800535c:	2002      	movs	r0, #2
 800535e:	f7fd fc07 	bl	8002b70 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00d      	beq.n	800538c <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	3301      	adds	r3, #1
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	04da      	lsls	r2, r3, #19
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00d      	beq.n	80053b6 <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	3301      	adds	r3, #1
 800539e:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	04da      	lsls	r2, r3, #19
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	3301      	adds	r3, #1
 80053c8:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	04da      	lsls	r2, r3, #19
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ee:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800540e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0202 	bic.w	r2, r2, #2
 800544e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0202 	bic.w	r2, r2, #2
 800545e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0202 	bic.w	r2, r2, #2
 800546e:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005474:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547a:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6a3a      	ldr	r2, [r7, #32]
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2210      	movs	r2, #16
 8005498:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2210      	movs	r2, #16
 800549e:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2210      	movs	r2, #16
 80054a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	061a      	lsls	r2, r3, #24
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	061a      	lsls	r2, r3, #24
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	061a      	lsls	r2, r3, #24
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	04da      	lsls	r2, r3, #19
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	04da      	lsls	r2, r3, #19
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	04da      	lsls	r2, r3, #19
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3730      	adds	r7, #48	; 0x30
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d141      	bne.n	80055c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005542:	4b4b      	ldr	r3, [pc, #300]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800554a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554e:	d131      	bne.n	80055b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005550:	4b47      	ldr	r3, [pc, #284]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005556:	4a46      	ldr	r2, [pc, #280]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800555c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005560:	4b43      	ldr	r3, [pc, #268]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005568:	4a41      	ldr	r2, [pc, #260]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800556e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005570:	4b40      	ldr	r3, [pc, #256]	; (8005674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2232      	movs	r2, #50	; 0x32
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	4a3f      	ldr	r2, [pc, #252]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	0c9b      	lsrs	r3, r3, #18
 8005582:	3301      	adds	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005586:	e002      	b.n	800558e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b01      	subs	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800558e:	4b38      	ldr	r3, [pc, #224]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559a:	d102      	bne.n	80055a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f2      	bne.n	8005588 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055a2:	4b33      	ldr	r3, [pc, #204]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ae:	d158      	bne.n	8005662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e057      	b.n	8005664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055b4:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ba:	4a2d      	ldr	r2, [pc, #180]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80055c4:	e04d      	b.n	8005662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055cc:	d141      	bne.n	8005652 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055ce:	4b28      	ldr	r3, [pc, #160]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055da:	d131      	bne.n	8005640 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055dc:	4b24      	ldr	r3, [pc, #144]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e2:	4a23      	ldr	r2, [pc, #140]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055ec:	4b20      	ldr	r3, [pc, #128]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055f4:	4a1e      	ldr	r2, [pc, #120]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055fc:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2232      	movs	r2, #50	; 0x32
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	0c9b      	lsrs	r3, r3, #18
 800560e:	3301      	adds	r3, #1
 8005610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005612:	e002      	b.n	800561a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3b01      	subs	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005626:	d102      	bne.n	800562e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1f2      	bne.n	8005614 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800562e:	4b10      	ldr	r3, [pc, #64]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563a:	d112      	bne.n	8005662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e011      	b.n	8005664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005646:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005650:	e007      	b.n	8005662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005652:	4b07      	ldr	r3, [pc, #28]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800565a:	4a05      	ldr	r2, [pc, #20]	; (8005670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005660:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40007000 	.word	0x40007000
 8005674:	20000000 	.word	0x20000000
 8005678:	431bde83 	.word	0x431bde83

0800567c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e308      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d075      	beq.n	8005786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800569a:	4ba3      	ldr	r3, [pc, #652]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056a4:	4ba0      	ldr	r3, [pc, #640]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b0c      	cmp	r3, #12
 80056b2:	d102      	bne.n	80056ba <HAL_RCC_OscConfig+0x3e>
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d002      	beq.n	80056c0 <HAL_RCC_OscConfig+0x44>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d10b      	bne.n	80056d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c0:	4b99      	ldr	r3, [pc, #612]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d05b      	beq.n	8005784 <HAL_RCC_OscConfig+0x108>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d157      	bne.n	8005784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e2e3      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e0:	d106      	bne.n	80056f0 <HAL_RCC_OscConfig+0x74>
 80056e2:	4b91      	ldr	r3, [pc, #580]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a90      	ldr	r2, [pc, #576]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e01d      	b.n	800572c <HAL_RCC_OscConfig+0xb0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056f8:	d10c      	bne.n	8005714 <HAL_RCC_OscConfig+0x98>
 80056fa:	4b8b      	ldr	r3, [pc, #556]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a8a      	ldr	r2, [pc, #552]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	4b88      	ldr	r3, [pc, #544]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a87      	ldr	r2, [pc, #540]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 800570c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e00b      	b.n	800572c <HAL_RCC_OscConfig+0xb0>
 8005714:	4b84      	ldr	r3, [pc, #528]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a83      	ldr	r2, [pc, #524]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 800571a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4b81      	ldr	r3, [pc, #516]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a80      	ldr	r2, [pc, #512]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800572a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d013      	beq.n	800575c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fd fa10 	bl	8002b58 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800573c:	f7fd fa0c 	bl	8002b58 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b64      	cmp	r3, #100	; 0x64
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e2a8      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800574e:	4b76      	ldr	r3, [pc, #472]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0xc0>
 800575a:	e014      	b.n	8005786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fd f9fc 	bl	8002b58 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005764:	f7fd f9f8 	bl	8002b58 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b64      	cmp	r3, #100	; 0x64
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e294      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005776:	4b6c      	ldr	r3, [pc, #432]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0xe8>
 8005782:	e000      	b.n	8005786 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d075      	beq.n	800587e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005792:	4b65      	ldr	r3, [pc, #404]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 030c 	and.w	r3, r3, #12
 800579a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800579c:	4b62      	ldr	r3, [pc, #392]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	d102      	bne.n	80057b2 <HAL_RCC_OscConfig+0x136>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d002      	beq.n	80057b8 <HAL_RCC_OscConfig+0x13c>
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d11f      	bne.n	80057f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057b8:	4b5b      	ldr	r3, [pc, #364]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_OscConfig+0x154>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e267      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d0:	4b55      	ldr	r3, [pc, #340]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	061b      	lsls	r3, r3, #24
 80057de:	4952      	ldr	r1, [pc, #328]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057e4:	4b51      	ldr	r3, [pc, #324]	; (800592c <HAL_RCC_OscConfig+0x2b0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fd f969 	bl	8002ac0 <HAL_InitTick>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d043      	beq.n	800587c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e253      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d023      	beq.n	8005848 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005800:	4b49      	ldr	r3, [pc, #292]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a48      	ldr	r2, [pc, #288]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fd f9a4 	bl	8002b58 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005814:	f7fd f9a0 	bl	8002b58 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e23c      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005826:	4b40      	ldr	r3, [pc, #256]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005832:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	061b      	lsls	r3, r3, #24
 8005840:	4939      	ldr	r1, [pc, #228]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005842:	4313      	orrs	r3, r2
 8005844:	604b      	str	r3, [r1, #4]
 8005846:	e01a      	b.n	800587e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005848:	4b37      	ldr	r3, [pc, #220]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a36      	ldr	r2, [pc, #216]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 800584e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fd f980 	bl	8002b58 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800585c:	f7fd f97c 	bl	8002b58 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e218      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800586e:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x1e0>
 800587a:	e000      	b.n	800587e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800587c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d03c      	beq.n	8005904 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01c      	beq.n	80058cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005892:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005898:	4a23      	ldr	r2, [pc, #140]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a2:	f7fd f959 	bl	8002b58 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058aa:	f7fd f955 	bl	8002b58 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e1f1      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058bc:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80058be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0ef      	beq.n	80058aa <HAL_RCC_OscConfig+0x22e>
 80058ca:	e01b      	b.n	8005904 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058cc:	4b16      	ldr	r3, [pc, #88]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80058ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058dc:	f7fd f93c 	bl	8002b58 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e4:	f7fd f938 	bl	8002b58 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e1d4      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1ef      	bne.n	80058e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80ab 	beq.w	8005a68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005912:	2300      	movs	r3, #0
 8005914:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <HAL_RCC_OscConfig+0x2ac>)
 8005918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_RCC_OscConfig+0x2b4>
 8005922:	2301      	movs	r3, #1
 8005924:	e005      	b.n	8005932 <HAL_RCC_OscConfig+0x2b6>
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
 800592c:	20000004 	.word	0x20000004
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00d      	beq.n	8005952 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005936:	4baf      	ldr	r3, [pc, #700]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	4aae      	ldr	r2, [pc, #696]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 800593c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005940:	6593      	str	r3, [r2, #88]	; 0x58
 8005942:	4bac      	ldr	r3, [pc, #688]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800594e:	2301      	movs	r3, #1
 8005950:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005952:	4ba9      	ldr	r3, [pc, #676]	; (8005bf8 <HAL_RCC_OscConfig+0x57c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d118      	bne.n	8005990 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800595e:	4ba6      	ldr	r3, [pc, #664]	; (8005bf8 <HAL_RCC_OscConfig+0x57c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4aa5      	ldr	r2, [pc, #660]	; (8005bf8 <HAL_RCC_OscConfig+0x57c>)
 8005964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800596a:	f7fd f8f5 	bl	8002b58 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005972:	f7fd f8f1 	bl	8002b58 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e18d      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005984:	4b9c      	ldr	r3, [pc, #624]	; (8005bf8 <HAL_RCC_OscConfig+0x57c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d108      	bne.n	80059aa <HAL_RCC_OscConfig+0x32e>
 8005998:	4b96      	ldr	r3, [pc, #600]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	4a95      	ldr	r2, [pc, #596]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059a8:	e024      	b.n	80059f4 <HAL_RCC_OscConfig+0x378>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d110      	bne.n	80059d4 <HAL_RCC_OscConfig+0x358>
 80059b2:	4b90      	ldr	r3, [pc, #576]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b8:	4a8e      	ldr	r2, [pc, #568]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 80059ba:	f043 0304 	orr.w	r3, r3, #4
 80059be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059c2:	4b8c      	ldr	r3, [pc, #560]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c8:	4a8a      	ldr	r2, [pc, #552]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059d2:	e00f      	b.n	80059f4 <HAL_RCC_OscConfig+0x378>
 80059d4:	4b87      	ldr	r3, [pc, #540]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	4a86      	ldr	r2, [pc, #536]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059e4:	4b83      	ldr	r3, [pc, #524]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	4a82      	ldr	r2, [pc, #520]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 80059ec:	f023 0304 	bic.w	r3, r3, #4
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d016      	beq.n	8005a2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fd f8ac 	bl	8002b58 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7fd f8a8 	bl	8002b58 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e142      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a1a:	4b76      	ldr	r3, [pc, #472]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ed      	beq.n	8005a04 <HAL_RCC_OscConfig+0x388>
 8005a28:	e015      	b.n	8005a56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2a:	f7fd f895 	bl	8002b58 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a30:	e00a      	b.n	8005a48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7fd f891 	bl	8002b58 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e12b      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a48:	4b6a      	ldr	r3, [pc, #424]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1ed      	bne.n	8005a32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a56:	7ffb      	ldrb	r3, [r7, #31]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d105      	bne.n	8005a68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5c:	4b65      	ldr	r3, [pc, #404]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	4a64      	ldr	r2, [pc, #400]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d03c      	beq.n	8005aee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01c      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a7c:	4b5d      	ldr	r3, [pc, #372]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a82:	4a5c      	ldr	r2, [pc, #368]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8c:	f7fd f864 	bl	8002b58 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a94:	f7fd f860 	bl	8002b58 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e0fc      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aa6:	4b53      	ldr	r3, [pc, #332]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0ef      	beq.n	8005a94 <HAL_RCC_OscConfig+0x418>
 8005ab4:	e01b      	b.n	8005aee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ab6:	4b4f      	ldr	r3, [pc, #316]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005abc:	4a4d      	ldr	r2, [pc, #308]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac6:	f7fd f847 	bl	8002b58 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ace:	f7fd f843 	bl	8002b58 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e0df      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ae0:	4b44      	ldr	r3, [pc, #272]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1ef      	bne.n	8005ace <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80d3 	beq.w	8005c9e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005af8:	4b3e      	ldr	r3, [pc, #248]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 030c 	and.w	r3, r3, #12
 8005b00:	2b0c      	cmp	r3, #12
 8005b02:	f000 808d 	beq.w	8005c20 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d15a      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0e:	4b39      	ldr	r3, [pc, #228]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a38      	ldr	r2, [pc, #224]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fd f81d 	bl	8002b58 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fd f819 	bl	8002b58 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e0b5      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b34:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b40:	4b2c      	ldr	r3, [pc, #176]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	4b2d      	ldr	r3, [pc, #180]	; (8005bfc <HAL_RCC_OscConfig+0x580>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6a11      	ldr	r1, [r2, #32]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b50:	3a01      	subs	r2, #1
 8005b52:	0112      	lsls	r2, r2, #4
 8005b54:	4311      	orrs	r1, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b5a:	0212      	lsls	r2, r2, #8
 8005b5c:	4311      	orrs	r1, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b62:	0852      	lsrs	r2, r2, #1
 8005b64:	3a01      	subs	r2, #1
 8005b66:	0552      	lsls	r2, r2, #21
 8005b68:	4311      	orrs	r1, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b6e:	0852      	lsrs	r2, r2, #1
 8005b70:	3a01      	subs	r2, #1
 8005b72:	0652      	lsls	r2, r2, #25
 8005b74:	4311      	orrs	r1, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b7a:	06d2      	lsls	r2, r2, #27
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	491d      	ldr	r1, [pc, #116]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b84:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b90:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9c:	f7fc ffdc 	bl	8002b58 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba4:	f7fc ffd8 	bl	8002b58 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e074      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x528>
 8005bc2:	e06c      	b.n	8005c9e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005bd0:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4a04      	ldr	r2, [pc, #16]	; (8005bf4 <HAL_RCC_OscConfig+0x578>)
 8005be2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fc ffb4 	bl	8002b58 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf2:	e00e      	b.n	8005c12 <HAL_RCC_OscConfig+0x596>
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	40007000 	.word	0x40007000
 8005bfc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c00:	f7fc ffaa 	bl	8002b58 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e046      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c12:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <HAL_RCC_OscConfig+0x62c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x584>
 8005c1e:	e03e      	b.n	8005c9e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e039      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005c2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_RCC_OscConfig+0x62c>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f003 0203 	and.w	r2, r3, #3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d12c      	bne.n	8005c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d123      	bne.n	8005c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d11b      	bne.n	8005c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d113      	bne.n	8005c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d109      	bne.n	8005c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	3b01      	subs	r3, #1
 8005c94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d001      	beq.n	8005c9e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40021000 	.word	0x40021000

08005cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e11e      	b.n	8005f02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc4:	4b91      	ldr	r3, [pc, #580]	; (8005f0c <HAL_RCC_ClockConfig+0x260>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d910      	bls.n	8005cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd2:	4b8e      	ldr	r3, [pc, #568]	; (8005f0c <HAL_RCC_ClockConfig+0x260>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f023 020f 	bic.w	r2, r3, #15
 8005cda:	498c      	ldr	r1, [pc, #560]	; (8005f0c <HAL_RCC_ClockConfig+0x260>)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce2:	4b8a      	ldr	r3, [pc, #552]	; (8005f0c <HAL_RCC_ClockConfig+0x260>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e106      	b.n	8005f02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d073      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d129      	bne.n	8005d5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d08:	4b81      	ldr	r3, [pc, #516]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0f4      	b.n	8005f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d18:	f000 f99e 	bl	8006058 <RCC_GetSysClockFreqFromPLLSource>
 8005d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4a7c      	ldr	r2, [pc, #496]	; (8005f14 <HAL_RCC_ClockConfig+0x268>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d93f      	bls.n	8005da6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d26:	4b7a      	ldr	r3, [pc, #488]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d033      	beq.n	8005da6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d12f      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d46:	4b72      	ldr	r3, [pc, #456]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4e:	4a70      	ldr	r2, [pc, #448]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	e024      	b.n	8005da6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d107      	bne.n	8005d74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d64:	4b6a      	ldr	r3, [pc, #424]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d109      	bne.n	8005d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e0c6      	b.n	8005f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d74:	4b66      	ldr	r3, [pc, #408]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0be      	b.n	8005f02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005d84:	f000 f8ce 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8005d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4a61      	ldr	r2, [pc, #388]	; (8005f14 <HAL_RCC_ClockConfig+0x268>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d909      	bls.n	8005da6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d92:	4b5f      	ldr	r3, [pc, #380]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d9a:	4a5d      	ldr	r2, [pc, #372]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005da6:	4b5a      	ldr	r3, [pc, #360]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f023 0203 	bic.w	r2, r3, #3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4957      	ldr	r1, [pc, #348]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db8:	f7fc fece 	bl	8002b58 <HAL_GetTick>
 8005dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc0:	f7fc feca 	bl	8002b58 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e095      	b.n	8005f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd6:	4b4e      	ldr	r3, [pc, #312]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 020c 	and.w	r2, r3, #12
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d1eb      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d023      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e00:	4b43      	ldr	r3, [pc, #268]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	4a42      	ldr	r2, [pc, #264]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005e18:	4b3d      	ldr	r3, [pc, #244]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e20:	4a3b      	ldr	r2, [pc, #236]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005e22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e28:	4b39      	ldr	r3, [pc, #228]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4936      	ldr	r1, [pc, #216]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	608b      	str	r3, [r1, #8]
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b80      	cmp	r3, #128	; 0x80
 8005e40:	d105      	bne.n	8005e4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e42:	4b33      	ldr	r3, [pc, #204]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	4a32      	ldr	r2, [pc, #200]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005e48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e4e:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <HAL_RCC_ClockConfig+0x260>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d21d      	bcs.n	8005e98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <HAL_RCC_ClockConfig+0x260>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f023 020f 	bic.w	r2, r3, #15
 8005e64:	4929      	ldr	r1, [pc, #164]	; (8005f0c <HAL_RCC_ClockConfig+0x260>)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e6c:	f7fc fe74 	bl	8002b58 <HAL_GetTick>
 8005e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	e00a      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e74:	f7fc fe70 	bl	8002b58 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e03b      	b.n	8005f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8a:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <HAL_RCC_ClockConfig+0x260>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d1ed      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4917      	ldr	r1, [pc, #92]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ec2:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	490f      	ldr	r1, [pc, #60]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ed6:	f000 f825 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8005eda:	4601      	mov	r1, r0
 8005edc:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <HAL_RCC_ClockConfig+0x264>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	4a0c      	ldr	r2, [pc, #48]	; (8005f18 <HAL_RCC_ClockConfig+0x26c>)
 8005ee8:	5cd3      	ldrb	r3, [r2, r3]
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	fa21 f303 	lsr.w	r3, r1, r3
 8005ef2:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <HAL_RCC_ClockConfig+0x270>)
 8005ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ef6:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <HAL_RCC_ClockConfig+0x274>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fc fde0 	bl	8002ac0 <HAL_InitTick>
 8005f00:	4603      	mov	r3, r0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40022000 	.word	0x40022000
 8005f10:	40021000 	.word	0x40021000
 8005f14:	04c4b400 	.word	0x04c4b400
 8005f18:	0800a690 	.word	0x0800a690
 8005f1c:	20000000 	.word	0x20000000
 8005f20:	20000004 	.word	0x20000004

08005f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f2a:	4b2c      	ldr	r3, [pc, #176]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d102      	bne.n	8005f3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f36:	4b2a      	ldr	r3, [pc, #168]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	e047      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f3c:	4b27      	ldr	r3, [pc, #156]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 030c 	and.w	r3, r3, #12
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d102      	bne.n	8005f4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f48:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	e03e      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f4e:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 030c 	and.w	r3, r3, #12
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d136      	bne.n	8005fc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f5a:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f64:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d10c      	bne.n	8005f92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f78:	4a1a      	ldr	r2, [pc, #104]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f82:	68d2      	ldr	r2, [r2, #12]
 8005f84:	0a12      	lsrs	r2, r2, #8
 8005f86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	617b      	str	r3, [r7, #20]
      break;
 8005f90:	e00c      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9a:	4a10      	ldr	r2, [pc, #64]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f9c:	68d2      	ldr	r2, [r2, #12]
 8005f9e:	0a12      	lsrs	r2, r2, #8
 8005fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]
      break;
 8005faa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fac:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	0e5b      	lsrs	r3, r3, #25
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	e001      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fcc:	693b      	ldr	r3, [r7, #16]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	00f42400 	.word	0x00f42400
 8005fe4:	007a1200 	.word	0x007a1200

08005fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fec:	4b03      	ldr	r3, [pc, #12]	; (8005ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fee:	681b      	ldr	r3, [r3, #0]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000000 	.word	0x20000000

08006000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006004:	f7ff fff0 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006008:	4601      	mov	r1, r0
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0a1b      	lsrs	r3, r3, #8
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4a04      	ldr	r2, [pc, #16]	; (8006028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006016:	5cd3      	ldrb	r3, [r2, r3]
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40021000 	.word	0x40021000
 8006028:	0800a6a0 	.word	0x0800a6a0

0800602c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006030:	f7ff ffda 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006034:	4601      	mov	r1, r0
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	0adb      	lsrs	r3, r3, #11
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4a04      	ldr	r2, [pc, #16]	; (8006054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006042:	5cd3      	ldrb	r3, [r2, r3]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40021000 	.word	0x40021000
 8006054:	0800a6a0 	.word	0x0800a6a0

08006058 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800605e:	4b1e      	ldr	r3, [pc, #120]	; (80060d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006068:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	091b      	lsrs	r3, r3, #4
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b03      	cmp	r3, #3
 800607a:	d10c      	bne.n	8006096 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800607c:	4a17      	ldr	r2, [pc, #92]	; (80060dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006086:	68d2      	ldr	r2, [r2, #12]
 8006088:	0a12      	lsrs	r2, r2, #8
 800608a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	617b      	str	r3, [r7, #20]
    break;
 8006094:	e00c      	b.n	80060b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006096:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	4a0e      	ldr	r2, [pc, #56]	; (80060d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060a0:	68d2      	ldr	r2, [r2, #12]
 80060a2:	0a12      	lsrs	r2, r2, #8
 80060a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060a8:	fb02 f303 	mul.w	r3, r2, r3
 80060ac:	617b      	str	r3, [r7, #20]
    break;
 80060ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060b0:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	0e5b      	lsrs	r3, r3, #25
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	3301      	adds	r3, #1
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80060ca:	687b      	ldr	r3, [r7, #4]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	40021000 	.word	0x40021000
 80060dc:	007a1200 	.word	0x007a1200
 80060e0:	00f42400 	.word	0x00f42400

080060e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060ec:	2300      	movs	r3, #0
 80060ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060f0:	2300      	movs	r3, #0
 80060f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8098 	beq.w	8006232 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006102:	2300      	movs	r3, #0
 8006104:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006106:	4b43      	ldr	r3, [pc, #268]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10d      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006112:	4b40      	ldr	r3, [pc, #256]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	4a3f      	ldr	r2, [pc, #252]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611c:	6593      	str	r3, [r2, #88]	; 0x58
 800611e:	4b3d      	ldr	r3, [pc, #244]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006126:	60bb      	str	r3, [r7, #8]
 8006128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800612a:	2301      	movs	r3, #1
 800612c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800612e:	4b3a      	ldr	r3, [pc, #232]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a39      	ldr	r2, [pc, #228]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006138:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800613a:	f7fc fd0d 	bl	8002b58 <HAL_GetTick>
 800613e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006140:	e009      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006142:	f7fc fd09 	bl	8002b58 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d902      	bls.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	74fb      	strb	r3, [r7, #19]
        break;
 8006154:	e005      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006156:	4b30      	ldr	r3, [pc, #192]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0ef      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006162:	7cfb      	ldrb	r3, [r7, #19]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d159      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006168:	4b2a      	ldr	r3, [pc, #168]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d01e      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	429a      	cmp	r2, r3
 8006182:	d019      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006184:	4b23      	ldr	r3, [pc, #140]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006190:	4b20      	ldr	r3, [pc, #128]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061a0:	4b1c      	ldr	r3, [pc, #112]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	4a1b      	ldr	r2, [pc, #108]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061b0:	4a18      	ldr	r2, [pc, #96]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c2:	f7fc fcc9 	bl	8002b58 <HAL_GetTick>
 80061c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061c8:	e00b      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ca:	f7fc fcc5 	bl	8002b58 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d8:	4293      	cmp	r3, r2
 80061da:	d902      	bls.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	74fb      	strb	r3, [r7, #19]
            break;
 80061e0:	e006      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e2:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0ec      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80061f0:	7cfb      	ldrb	r3, [r7, #19]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061f6:	4b07      	ldr	r3, [pc, #28]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	4903      	ldr	r1, [pc, #12]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800620c:	e008      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	74bb      	strb	r3, [r7, #18]
 8006212:	e005      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006214:	40021000 	.word	0x40021000
 8006218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	7cfb      	ldrb	r3, [r7, #19]
 800621e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006220:	7c7b      	ldrb	r3, [r7, #17]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d105      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006226:	4ba6      	ldr	r3, [pc, #664]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	4aa5      	ldr	r2, [pc, #660]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800622c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800623e:	4ba0      	ldr	r3, [pc, #640]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	f023 0203 	bic.w	r2, r3, #3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	499c      	ldr	r1, [pc, #624]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006260:	4b97      	ldr	r3, [pc, #604]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006266:	f023 020c 	bic.w	r2, r3, #12
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	4994      	ldr	r1, [pc, #592]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006282:	4b8f      	ldr	r3, [pc, #572]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	498b      	ldr	r1, [pc, #556]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062a4:	4b86      	ldr	r3, [pc, #536]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	4983      	ldr	r1, [pc, #524]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062c6:	4b7e      	ldr	r3, [pc, #504]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	497a      	ldr	r1, [pc, #488]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062e8:	4b75      	ldr	r3, [pc, #468]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	4972      	ldr	r1, [pc, #456]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800630a:	4b6d      	ldr	r3, [pc, #436]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006310:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	4969      	ldr	r1, [pc, #420]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800632c:	4b64      	ldr	r3, [pc, #400]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	4961      	ldr	r1, [pc, #388]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800634e:	4b5c      	ldr	r3, [pc, #368]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	4958      	ldr	r1, [pc, #352]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636c:	2b00      	cmp	r3, #0
 800636e:	d015      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006370:	4b53      	ldr	r3, [pc, #332]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	4950      	ldr	r1, [pc, #320]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638e:	d105      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006390:	4b4b      	ldr	r3, [pc, #300]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4a4a      	ldr	r2, [pc, #296]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800639a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d015      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063a8:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	4942      	ldr	r1, [pc, #264]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063c6:	d105      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063c8:	4b3d      	ldr	r3, [pc, #244]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4a3c      	ldr	r2, [pc, #240]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d015      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063e0:	4b37      	ldr	r3, [pc, #220]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	4934      	ldr	r1, [pc, #208]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063fe:	d105      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006400:	4b2f      	ldr	r3, [pc, #188]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	4a2e      	ldr	r2, [pc, #184]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800640a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d015      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006418:	4b29      	ldr	r3, [pc, #164]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	4926      	ldr	r1, [pc, #152]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006436:	d105      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006438:	4b21      	ldr	r3, [pc, #132]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4a20      	ldr	r2, [pc, #128]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006442:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d015      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006450:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	4918      	ldr	r1, [pc, #96]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800646e:	d105      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006470:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	4a12      	ldr	r2, [pc, #72]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800647a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d015      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006488:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006496:	490a      	ldr	r1, [pc, #40]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a6:	d105      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80064b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40021000 	.word	0x40021000

080064c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e049      	b.n	800656a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fc f912 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f000 fd20 	bl	8006f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e049      	b.n	8006618 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f841 	bl	8006620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f000 fcc9 	bl	8006f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_TIM_PWM_Start+0x24>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e03c      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b04      	cmp	r3, #4
 800665c:	d109      	bne.n	8006672 <HAL_TIM_PWM_Start+0x3e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b01      	cmp	r3, #1
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	e02f      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b08      	cmp	r3, #8
 8006676:	d109      	bne.n	800668c <HAL_TIM_PWM_Start+0x58>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b01      	cmp	r3, #1
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	e022      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b0c      	cmp	r3, #12
 8006690:	d109      	bne.n	80066a6 <HAL_TIM_PWM_Start+0x72>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	bf14      	ite	ne
 800669e:	2301      	movne	r3, #1
 80066a0:	2300      	moveq	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	e015      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d109      	bne.n	80066c0 <HAL_TIM_PWM_Start+0x8c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e008      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	bf14      	ite	ne
 80066cc:	2301      	movne	r3, #1
 80066ce:	2300      	moveq	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e06e      	b.n	80067b8 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <HAL_TIM_PWM_Start+0xb6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066e8:	e023      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d104      	bne.n	80066fa <HAL_TIM_PWM_Start+0xc6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f8:	e01b      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d104      	bne.n	800670a <HAL_TIM_PWM_Start+0xd6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006708:	e013      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b0c      	cmp	r3, #12
 800670e:	d104      	bne.n	800671a <HAL_TIM_PWM_Start+0xe6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006718:	e00b      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b10      	cmp	r3, #16
 800671e:	d104      	bne.n	800672a <HAL_TIM_PWM_Start+0xf6>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006728:	e003      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2201      	movs	r2, #1
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f001 f826 	bl	800778c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <HAL_TIM_PWM_Start+0x18c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d013      	beq.n	8006772 <HAL_TIM_PWM_Start+0x13e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <HAL_TIM_PWM_Start+0x190>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00e      	beq.n	8006772 <HAL_TIM_PWM_Start+0x13e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1b      	ldr	r2, [pc, #108]	; (80067c8 <HAL_TIM_PWM_Start+0x194>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d009      	beq.n	8006772 <HAL_TIM_PWM_Start+0x13e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1a      	ldr	r2, [pc, #104]	; (80067cc <HAL_TIM_PWM_Start+0x198>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_TIM_PWM_Start+0x13e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a18      	ldr	r2, [pc, #96]	; (80067d0 <HAL_TIM_PWM_Start+0x19c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d101      	bne.n	8006776 <HAL_TIM_PWM_Start+0x142>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <HAL_TIM_PWM_Start+0x144>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d007      	beq.n	800678c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800678a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <HAL_TIM_PWM_Start+0x1a0>)
 8006794:	4013      	ands	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b06      	cmp	r3, #6
 800679c:	d00b      	beq.n	80067b6 <HAL_TIM_PWM_Start+0x182>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a4:	d007      	beq.n	80067b6 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0201 	orr.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40013400 	.word	0x40013400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800
 80067d4:	00010007 	.word	0x00010007

080067d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 ffce 	bl	800778c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a3e      	ldr	r2, [pc, #248]	; (80068f0 <HAL_TIM_PWM_Stop+0x118>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d013      	beq.n	8006822 <HAL_TIM_PWM_Stop+0x4a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a3d      	ldr	r2, [pc, #244]	; (80068f4 <HAL_TIM_PWM_Stop+0x11c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00e      	beq.n	8006822 <HAL_TIM_PWM_Stop+0x4a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a3b      	ldr	r2, [pc, #236]	; (80068f8 <HAL_TIM_PWM_Stop+0x120>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_TIM_PWM_Stop+0x4a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a3a      	ldr	r2, [pc, #232]	; (80068fc <HAL_TIM_PWM_Stop+0x124>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_TIM_PWM_Stop+0x4a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a38      	ldr	r2, [pc, #224]	; (8006900 <HAL_TIM_PWM_Stop+0x128>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d101      	bne.n	8006826 <HAL_TIM_PWM_Stop+0x4e>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_TIM_PWM_Stop+0x50>
 8006826:	2300      	movs	r3, #0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d017      	beq.n	800685c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6a1a      	ldr	r2, [r3, #32]
 8006832:	f241 1311 	movw	r3, #4369	; 0x1111
 8006836:	4013      	ands	r3, r2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10f      	bne.n	800685c <HAL_TIM_PWM_Stop+0x84>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6a1a      	ldr	r2, [r3, #32]
 8006842:	f244 4344 	movw	r3, #17476	; 0x4444
 8006846:	4013      	ands	r3, r2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d107      	bne.n	800685c <HAL_TIM_PWM_Stop+0x84>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800685a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	f241 1311 	movw	r3, #4369	; 0x1111
 8006866:	4013      	ands	r3, r2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10f      	bne.n	800688c <HAL_TIM_PWM_Stop+0xb4>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	f244 4344 	movw	r3, #17476	; 0x4444
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d107      	bne.n	800688c <HAL_TIM_PWM_Stop+0xb4>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d104      	bne.n	800689c <HAL_TIM_PWM_Stop+0xc4>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800689a:	e023      	b.n	80068e4 <HAL_TIM_PWM_Stop+0x10c>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d104      	bne.n	80068ac <HAL_TIM_PWM_Stop+0xd4>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068aa:	e01b      	b.n	80068e4 <HAL_TIM_PWM_Stop+0x10c>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d104      	bne.n	80068bc <HAL_TIM_PWM_Stop+0xe4>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ba:	e013      	b.n	80068e4 <HAL_TIM_PWM_Stop+0x10c>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b0c      	cmp	r3, #12
 80068c0:	d104      	bne.n	80068cc <HAL_TIM_PWM_Stop+0xf4>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068ca:	e00b      	b.n	80068e4 <HAL_TIM_PWM_Stop+0x10c>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d104      	bne.n	80068dc <HAL_TIM_PWM_Stop+0x104>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068da:	e003      	b.n	80068e4 <HAL_TIM_PWM_Stop+0x10c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40013400 	.word	0x40013400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800

08006904 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e097      	b.n	8006a48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7fb ff11 	bl	8002754 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006948:	f023 0307 	bic.w	r3, r3, #7
 800694c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	4619      	mov	r1, r3
 8006958:	4610      	mov	r0, r2
 800695a:	f000 faf5 	bl	8006f48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	4313      	orrs	r3, r2
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80069a4:	f023 030c 	bic.w	r3, r3, #12
 80069a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	4313      	orrs	r3, r2
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	011a      	lsls	r2, r3, #4
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	031b      	lsls	r3, r3, #12
 80069d4:	4313      	orrs	r3, r2
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	4313      	orrs	r3, r2
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d110      	bne.n	8006aa2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d102      	bne.n	8006a8c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a86:	7b7b      	ldrb	r3, [r7, #13]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d001      	beq.n	8006a90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e068      	b.n	8006b62 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa0:	e031      	b.n	8006b06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d110      	bne.n	8006aca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d102      	bne.n	8006ab4 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006aae:	7b3b      	ldrb	r3, [r7, #12]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d001      	beq.n	8006ab8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e054      	b.n	8006b62 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac8:	e01d      	b.n	8006b06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d108      	bne.n	8006ae2 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d105      	bne.n	8006ae2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ad6:	7b7b      	ldrb	r3, [r7, #13]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d102      	bne.n	8006ae2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006adc:	7b3b      	ldrb	r3, [r7, #12]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d001      	beq.n	8006ae6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e03d      	b.n	8006b62 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2202      	movs	r2, #2
 8006af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2202      	movs	r2, #2
 8006afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2202      	movs	r2, #2
 8006b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <HAL_TIM_Encoder_Start+0xc2>
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d008      	beq.n	8006b22 <HAL_TIM_Encoder_Start+0xd2>
 8006b10:	e00f      	b.n	8006b32 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fe36 	bl	800778c <TIM_CCxChannelCmd>
      break;
 8006b20:	e016      	b.n	8006b50 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2201      	movs	r2, #1
 8006b28:	2104      	movs	r1, #4
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fe2e 	bl	800778c <TIM_CCxChannelCmd>
      break;
 8006b30:	e00e      	b.n	8006b50 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2201      	movs	r2, #1
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fe26 	bl	800778c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	2104      	movs	r1, #4
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fe1f 	bl	800778c <TIM_CCxChannelCmd>
      break;
 8006b4e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e0fd      	b.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b14      	cmp	r3, #20
 8006b92:	f200 80f0 	bhi.w	8006d76 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006b96:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006bf1 	.word	0x08006bf1
 8006ba0:	08006d77 	.word	0x08006d77
 8006ba4:	08006d77 	.word	0x08006d77
 8006ba8:	08006d77 	.word	0x08006d77
 8006bac:	08006c31 	.word	0x08006c31
 8006bb0:	08006d77 	.word	0x08006d77
 8006bb4:	08006d77 	.word	0x08006d77
 8006bb8:	08006d77 	.word	0x08006d77
 8006bbc:	08006c73 	.word	0x08006c73
 8006bc0:	08006d77 	.word	0x08006d77
 8006bc4:	08006d77 	.word	0x08006d77
 8006bc8:	08006d77 	.word	0x08006d77
 8006bcc:	08006cb3 	.word	0x08006cb3
 8006bd0:	08006d77 	.word	0x08006d77
 8006bd4:	08006d77 	.word	0x08006d77
 8006bd8:	08006d77 	.word	0x08006d77
 8006bdc:	08006cf5 	.word	0x08006cf5
 8006be0:	08006d77 	.word	0x08006d77
 8006be4:	08006d77 	.word	0x08006d77
 8006be8:	08006d77 	.word	0x08006d77
 8006bec:	08006d35 	.word	0x08006d35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fa36 	bl	8007068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0208 	orr.w	r2, r2, #8
 8006c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0204 	bic.w	r2, r2, #4
 8006c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6999      	ldr	r1, [r3, #24]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	619a      	str	r2, [r3, #24]
      break;
 8006c2e:	e0a3      	b.n	8006d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 faa6 	bl	8007188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6999      	ldr	r1, [r3, #24]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	619a      	str	r2, [r3, #24]
      break;
 8006c70:	e082      	b.n	8006d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fb0f 	bl	800729c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0208 	orr.w	r2, r2, #8
 8006c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69da      	ldr	r2, [r3, #28]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0204 	bic.w	r2, r2, #4
 8006c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69d9      	ldr	r1, [r3, #28]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	61da      	str	r2, [r3, #28]
      break;
 8006cb0:	e062      	b.n	8006d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fb77 	bl	80073ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69d9      	ldr	r1, [r3, #28]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	021a      	lsls	r2, r3, #8
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	61da      	str	r2, [r3, #28]
      break;
 8006cf2:	e041      	b.n	8006d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fbe0 	bl	80074c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0208 	orr.w	r2, r2, #8
 8006d0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0204 	bic.w	r2, r2, #4
 8006d1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d32:	e021      	b.n	8006d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fc24 	bl	8007588 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	021a      	lsls	r2, r3, #8
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d74:	e000      	b.n	8006d78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006d76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop

08006d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIM_ConfigClockSource+0x18>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e0c3      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x1a0>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b70      	cmp	r3, #112	; 0x70
 8006dde:	d038      	beq.n	8006e52 <HAL_TIM_ConfigClockSource+0xc6>
 8006de0:	2b70      	cmp	r3, #112	; 0x70
 8006de2:	d815      	bhi.n	8006e10 <HAL_TIM_ConfigClockSource+0x84>
 8006de4:	2b30      	cmp	r3, #48	; 0x30
 8006de6:	f000 808e 	beq.w	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
 8006dea:	2b30      	cmp	r3, #48	; 0x30
 8006dec:	d809      	bhi.n	8006e02 <HAL_TIM_ConfigClockSource+0x76>
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	f000 8089 	beq.w	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	f000 8086 	beq.w	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 8083 	beq.w	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006e00:	e08b      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006e02:	2b50      	cmp	r3, #80	; 0x50
 8006e04:	d04f      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x11a>
 8006e06:	2b60      	cmp	r3, #96	; 0x60
 8006e08:	d05d      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x13a>
 8006e0a:	2b40      	cmp	r3, #64	; 0x40
 8006e0c:	d06b      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8006e0e:	e084      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006e10:	4a48      	ldr	r2, [pc, #288]	; (8006f34 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d077      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
 8006e16:	4a47      	ldr	r2, [pc, #284]	; (8006f34 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d809      	bhi.n	8006e30 <HAL_TIM_ConfigClockSource+0xa4>
 8006e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e20:	d02e      	beq.n	8006e80 <HAL_TIM_ConfigClockSource+0xf4>
 8006e22:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e26:	d06e      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2c:	d074      	beq.n	8006f18 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8006e2e:	e074      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006e30:	4a41      	ldr	r2, [pc, #260]	; (8006f38 <HAL_TIM_ConfigClockSource+0x1ac>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d067      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
 8006e36:	4a40      	ldr	r2, [pc, #256]	; (8006f38 <HAL_TIM_ConfigClockSource+0x1ac>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d803      	bhi.n	8006e44 <HAL_TIM_ConfigClockSource+0xb8>
 8006e3c:	4a3f      	ldr	r2, [pc, #252]	; (8006f3c <HAL_TIM_ConfigClockSource+0x1b0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d061      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8006e42:	e06a      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006e44:	4a3e      	ldr	r2, [pc, #248]	; (8006f40 <HAL_TIM_ConfigClockSource+0x1b4>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d05d      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
 8006e4a:	4a3e      	ldr	r2, [pc, #248]	; (8006f44 <HAL_TIM_ConfigClockSource+0x1b8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d05a      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8006e50:	e063      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6899      	ldr	r1, [r3, #8]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f000 fc73 	bl	800774c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	609a      	str	r2, [r3, #8]
      break;
 8006e7e:	e04c      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	6899      	ldr	r1, [r3, #8]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f000 fc5c 	bl	800774c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ea2:	609a      	str	r2, [r3, #8]
      break;
 8006ea4:	e039      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6859      	ldr	r1, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f000 fbce 	bl	8007654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2150      	movs	r1, #80	; 0x50
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fc27 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 8006ec4:	e029      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6859      	ldr	r1, [r3, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f000 fbed 	bl	80076b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2160      	movs	r1, #96	; 0x60
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fc17 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 8006ee4:	e019      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6859      	ldr	r1, [r3, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f000 fbae 	bl	8007654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2140      	movs	r1, #64	; 0x40
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fc07 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 8006f04:	e009      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f000 fbfe 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 8006f16:	e000      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8006f18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	00100020 	.word	0x00100020
 8006f38:	00100040 	.word	0x00100040
 8006f3c:	00100030 	.word	0x00100030
 8006f40:	00100060 	.word	0x00100060
 8006f44:	00100070 	.word	0x00100070

08006f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a3c      	ldr	r2, [pc, #240]	; (800704c <TIM_Base_SetConfig+0x104>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00f      	beq.n	8006f80 <TIM_Base_SetConfig+0x38>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f66:	d00b      	beq.n	8006f80 <TIM_Base_SetConfig+0x38>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a39      	ldr	r2, [pc, #228]	; (8007050 <TIM_Base_SetConfig+0x108>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d007      	beq.n	8006f80 <TIM_Base_SetConfig+0x38>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a38      	ldr	r2, [pc, #224]	; (8007054 <TIM_Base_SetConfig+0x10c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_Base_SetConfig+0x38>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a37      	ldr	r2, [pc, #220]	; (8007058 <TIM_Base_SetConfig+0x110>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d108      	bne.n	8006f92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a2d      	ldr	r2, [pc, #180]	; (800704c <TIM_Base_SetConfig+0x104>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d01b      	beq.n	8006fd2 <TIM_Base_SetConfig+0x8a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa0:	d017      	beq.n	8006fd2 <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a2a      	ldr	r2, [pc, #168]	; (8007050 <TIM_Base_SetConfig+0x108>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <TIM_Base_SetConfig+0x8a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a29      	ldr	r2, [pc, #164]	; (8007054 <TIM_Base_SetConfig+0x10c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00f      	beq.n	8006fd2 <TIM_Base_SetConfig+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a28      	ldr	r2, [pc, #160]	; (8007058 <TIM_Base_SetConfig+0x110>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00b      	beq.n	8006fd2 <TIM_Base_SetConfig+0x8a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a27      	ldr	r2, [pc, #156]	; (800705c <TIM_Base_SetConfig+0x114>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d007      	beq.n	8006fd2 <TIM_Base_SetConfig+0x8a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a26      	ldr	r2, [pc, #152]	; (8007060 <TIM_Base_SetConfig+0x118>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d003      	beq.n	8006fd2 <TIM_Base_SetConfig+0x8a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a25      	ldr	r2, [pc, #148]	; (8007064 <TIM_Base_SetConfig+0x11c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d108      	bne.n	8006fe4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a10      	ldr	r2, [pc, #64]	; (800704c <TIM_Base_SetConfig+0x104>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00f      	beq.n	8007030 <TIM_Base_SetConfig+0xe8>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a11      	ldr	r2, [pc, #68]	; (8007058 <TIM_Base_SetConfig+0x110>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00b      	beq.n	8007030 <TIM_Base_SetConfig+0xe8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a10      	ldr	r2, [pc, #64]	; (800705c <TIM_Base_SetConfig+0x114>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d007      	beq.n	8007030 <TIM_Base_SetConfig+0xe8>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a0f      	ldr	r2, [pc, #60]	; (8007060 <TIM_Base_SetConfig+0x118>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_Base_SetConfig+0xe8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a0e      	ldr	r2, [pc, #56]	; (8007064 <TIM_Base_SetConfig+0x11c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d103      	bne.n	8007038 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	615a      	str	r2, [r3, #20]
}
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40013400 	.word	0x40013400
 800705c:	40014000 	.word	0x40014000
 8007060:	40014400 	.word	0x40014400
 8007064:	40014800 	.word	0x40014800

08007068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 0302 	bic.w	r3, r3, #2
 80070b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a2c      	ldr	r2, [pc, #176]	; (8007174 <TIM_OC1_SetConfig+0x10c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00f      	beq.n	80070e8 <TIM_OC1_SetConfig+0x80>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a2b      	ldr	r2, [pc, #172]	; (8007178 <TIM_OC1_SetConfig+0x110>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00b      	beq.n	80070e8 <TIM_OC1_SetConfig+0x80>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a2a      	ldr	r2, [pc, #168]	; (800717c <TIM_OC1_SetConfig+0x114>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d007      	beq.n	80070e8 <TIM_OC1_SetConfig+0x80>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a29      	ldr	r2, [pc, #164]	; (8007180 <TIM_OC1_SetConfig+0x118>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_OC1_SetConfig+0x80>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a28      	ldr	r2, [pc, #160]	; (8007184 <TIM_OC1_SetConfig+0x11c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d10c      	bne.n	8007102 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f023 0308 	bic.w	r3, r3, #8
 80070ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 0304 	bic.w	r3, r3, #4
 8007100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a1b      	ldr	r2, [pc, #108]	; (8007174 <TIM_OC1_SetConfig+0x10c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00f      	beq.n	800712a <TIM_OC1_SetConfig+0xc2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a1a      	ldr	r2, [pc, #104]	; (8007178 <TIM_OC1_SetConfig+0x110>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00b      	beq.n	800712a <TIM_OC1_SetConfig+0xc2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a19      	ldr	r2, [pc, #100]	; (800717c <TIM_OC1_SetConfig+0x114>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d007      	beq.n	800712a <TIM_OC1_SetConfig+0xc2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a18      	ldr	r2, [pc, #96]	; (8007180 <TIM_OC1_SetConfig+0x118>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d003      	beq.n	800712a <TIM_OC1_SetConfig+0xc2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a17      	ldr	r2, [pc, #92]	; (8007184 <TIM_OC1_SetConfig+0x11c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d111      	bne.n	800714e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	621a      	str	r2, [r3, #32]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	40012c00 	.word	0x40012c00
 8007178:	40013400 	.word	0x40013400
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800

08007188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0210 	bic.w	r2, r3, #16
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f023 0320 	bic.w	r3, r3, #32
 80071d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a28      	ldr	r2, [pc, #160]	; (8007288 <TIM_OC2_SetConfig+0x100>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d003      	beq.n	80071f4 <TIM_OC2_SetConfig+0x6c>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a27      	ldr	r2, [pc, #156]	; (800728c <TIM_OC2_SetConfig+0x104>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d10d      	bne.n	8007210 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	4313      	orrs	r3, r2
 8007206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <TIM_OC2_SetConfig+0x100>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00f      	beq.n	8007238 <TIM_OC2_SetConfig+0xb0>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a1c      	ldr	r2, [pc, #112]	; (800728c <TIM_OC2_SetConfig+0x104>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00b      	beq.n	8007238 <TIM_OC2_SetConfig+0xb0>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a1b      	ldr	r2, [pc, #108]	; (8007290 <TIM_OC2_SetConfig+0x108>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d007      	beq.n	8007238 <TIM_OC2_SetConfig+0xb0>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a1a      	ldr	r2, [pc, #104]	; (8007294 <TIM_OC2_SetConfig+0x10c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d003      	beq.n	8007238 <TIM_OC2_SetConfig+0xb0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a19      	ldr	r2, [pc, #100]	; (8007298 <TIM_OC2_SetConfig+0x110>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d113      	bne.n	8007260 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800723e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	4313      	orrs	r3, r2
 8007252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4313      	orrs	r3, r2
 800725e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	621a      	str	r2, [r3, #32]
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	40012c00 	.word	0x40012c00
 800728c:	40013400 	.word	0x40013400
 8007290:	40014000 	.word	0x40014000
 8007294:	40014400 	.word	0x40014400
 8007298:	40014800 	.word	0x40014800

0800729c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0303 	bic.w	r3, r3, #3
 80072d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a27      	ldr	r2, [pc, #156]	; (8007398 <TIM_OC3_SetConfig+0xfc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d003      	beq.n	8007306 <TIM_OC3_SetConfig+0x6a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a26      	ldr	r2, [pc, #152]	; (800739c <TIM_OC3_SetConfig+0x100>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d10d      	bne.n	8007322 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800730c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a1c      	ldr	r2, [pc, #112]	; (8007398 <TIM_OC3_SetConfig+0xfc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00f      	beq.n	800734a <TIM_OC3_SetConfig+0xae>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a1b      	ldr	r2, [pc, #108]	; (800739c <TIM_OC3_SetConfig+0x100>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_OC3_SetConfig+0xae>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <TIM_OC3_SetConfig+0x104>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d007      	beq.n	800734a <TIM_OC3_SetConfig+0xae>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <TIM_OC3_SetConfig+0x108>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_OC3_SetConfig+0xae>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <TIM_OC3_SetConfig+0x10c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d113      	bne.n	8007372 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	621a      	str	r2, [r3, #32]
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	40012c00 	.word	0x40012c00
 800739c:	40013400 	.word	0x40013400
 80073a0:	40014000 	.word	0x40014000
 80073a4:	40014400 	.word	0x40014400
 80073a8:	40014800 	.word	0x40014800

080073ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	021b      	lsls	r3, r3, #8
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	031b      	lsls	r3, r3, #12
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a28      	ldr	r2, [pc, #160]	; (80074ac <TIM_OC4_SetConfig+0x100>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d003      	beq.n	8007418 <TIM_OC4_SetConfig+0x6c>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a27      	ldr	r2, [pc, #156]	; (80074b0 <TIM_OC4_SetConfig+0x104>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d10d      	bne.n	8007434 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800741e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	031b      	lsls	r3, r3, #12
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <TIM_OC4_SetConfig+0x100>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00f      	beq.n	800745c <TIM_OC4_SetConfig+0xb0>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a1c      	ldr	r2, [pc, #112]	; (80074b0 <TIM_OC4_SetConfig+0x104>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00b      	beq.n	800745c <TIM_OC4_SetConfig+0xb0>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a1b      	ldr	r2, [pc, #108]	; (80074b4 <TIM_OC4_SetConfig+0x108>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d007      	beq.n	800745c <TIM_OC4_SetConfig+0xb0>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a1a      	ldr	r2, [pc, #104]	; (80074b8 <TIM_OC4_SetConfig+0x10c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_OC4_SetConfig+0xb0>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a19      	ldr	r2, [pc, #100]	; (80074bc <TIM_OC4_SetConfig+0x110>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d113      	bne.n	8007484 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007462:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800746a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	019b      	lsls	r3, r3, #6
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	019b      	lsls	r3, r3, #6
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	621a      	str	r2, [r3, #32]
}
 800749e:	bf00      	nop
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	40012c00 	.word	0x40012c00
 80074b0:	40013400 	.word	0x40013400
 80074b4:	40014000 	.word	0x40014000
 80074b8:	40014400 	.word	0x40014400
 80074bc:	40014800 	.word	0x40014800

080074c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007504:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	041b      	lsls	r3, r3, #16
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a17      	ldr	r2, [pc, #92]	; (8007574 <TIM_OC5_SetConfig+0xb4>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00f      	beq.n	800753a <TIM_OC5_SetConfig+0x7a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a16      	ldr	r2, [pc, #88]	; (8007578 <TIM_OC5_SetConfig+0xb8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00b      	beq.n	800753a <TIM_OC5_SetConfig+0x7a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a15      	ldr	r2, [pc, #84]	; (800757c <TIM_OC5_SetConfig+0xbc>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d007      	beq.n	800753a <TIM_OC5_SetConfig+0x7a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a14      	ldr	r2, [pc, #80]	; (8007580 <TIM_OC5_SetConfig+0xc0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d003      	beq.n	800753a <TIM_OC5_SetConfig+0x7a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a13      	ldr	r2, [pc, #76]	; (8007584 <TIM_OC5_SetConfig+0xc4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d109      	bne.n	800754e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007540:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	621a      	str	r2, [r3, #32]
}
 8007568:	bf00      	nop
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40013400 	.word	0x40013400
 800757c:	40014000 	.word	0x40014000
 8007580:	40014400 	.word	0x40014400
 8007584:	40014800 	.word	0x40014800

08007588 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	051b      	lsls	r3, r3, #20
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a18      	ldr	r2, [pc, #96]	; (8007640 <TIM_OC6_SetConfig+0xb8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00f      	beq.n	8007604 <TIM_OC6_SetConfig+0x7c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a17      	ldr	r2, [pc, #92]	; (8007644 <TIM_OC6_SetConfig+0xbc>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00b      	beq.n	8007604 <TIM_OC6_SetConfig+0x7c>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a16      	ldr	r2, [pc, #88]	; (8007648 <TIM_OC6_SetConfig+0xc0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <TIM_OC6_SetConfig+0x7c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a15      	ldr	r2, [pc, #84]	; (800764c <TIM_OC6_SetConfig+0xc4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_OC6_SetConfig+0x7c>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a14      	ldr	r2, [pc, #80]	; (8007650 <TIM_OC6_SetConfig+0xc8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d109      	bne.n	8007618 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800760a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	029b      	lsls	r3, r3, #10
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40012c00 	.word	0x40012c00
 8007644:	40013400 	.word	0x40013400
 8007648:	40014000 	.word	0x40014000
 800764c:	40014400 	.word	0x40014400
 8007650:	40014800 	.word	0x40014800

08007654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	f023 0201 	bic.w	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800767e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	4313      	orrs	r3, r2
 8007688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f023 030a 	bic.w	r3, r3, #10
 8007690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b087      	sub	sp, #28
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f023 0210 	bic.w	r2, r3, #16
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	031b      	lsls	r3, r3, #12
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	621a      	str	r2, [r3, #32]
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	f043 0307 	orr.w	r3, r3, #7
 8007738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	609a      	str	r2, [r3, #8]
}
 8007740:	bf00      	nop
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	021a      	lsls	r2, r3, #8
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	431a      	orrs	r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4313      	orrs	r3, r2
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	609a      	str	r2, [r3, #8]
}
 8007780:	bf00      	nop
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	2201      	movs	r2, #1
 80077a0:	fa02 f303 	lsl.w	r3, r2, r3
 80077a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a1a      	ldr	r2, [r3, #32]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	43db      	mvns	r3, r3
 80077ae:	401a      	ands	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1a      	ldr	r2, [r3, #32]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	fa01 f303 	lsl.w	r3, r1, r3
 80077c4:	431a      	orrs	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <HAL_TIMEx_PWMN_Start+0x24>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	bf14      	ite	ne
 80077f4:	2301      	movne	r3, #1
 80077f6:	2300      	moveq	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	e022      	b.n	8007842 <HAL_TIMEx_PWMN_Start+0x6a>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d109      	bne.n	8007816 <HAL_TIMEx_PWMN_Start+0x3e>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	bf14      	ite	ne
 800780e:	2301      	movne	r3, #1
 8007810:	2300      	moveq	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	e015      	b.n	8007842 <HAL_TIMEx_PWMN_Start+0x6a>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b08      	cmp	r3, #8
 800781a:	d109      	bne.n	8007830 <HAL_TIMEx_PWMN_Start+0x58>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	bf14      	ite	ne
 8007828:	2301      	movne	r3, #1
 800782a:	2300      	moveq	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	e008      	b.n	8007842 <HAL_TIMEx_PWMN_Start+0x6a>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b01      	cmp	r3, #1
 800783a:	bf14      	ite	ne
 800783c:	2301      	movne	r3, #1
 800783e:	2300      	moveq	r3, #0
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e040      	b.n	80078cc <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d104      	bne.n	800785a <HAL_TIMEx_PWMN_Start+0x82>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007858:	e013      	b.n	8007882 <HAL_TIMEx_PWMN_Start+0xaa>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b04      	cmp	r3, #4
 800785e:	d104      	bne.n	800786a <HAL_TIMEx_PWMN_Start+0x92>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007868:	e00b      	b.n	8007882 <HAL_TIMEx_PWMN_Start+0xaa>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b08      	cmp	r3, #8
 800786e:	d104      	bne.n	800787a <HAL_TIMEx_PWMN_Start+0xa2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007878:	e003      	b.n	8007882 <HAL_TIMEx_PWMN_Start+0xaa>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2204      	movs	r2, #4
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f9a4 	bl	8007bd8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800789e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_TIMEx_PWMN_Start+0xfc>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d00b      	beq.n	80078ca <HAL_TIMEx_PWMN_Start+0xf2>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b8:	d007      	beq.n	80078ca <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0201 	orr.w	r2, r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	00010007 	.word	0x00010007

080078d8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2200      	movs	r2, #0
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f974 	bl	8007bd8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6a1a      	ldr	r2, [r3, #32]
 80078f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10f      	bne.n	8007920 <HAL_TIMEx_PWMN_Stop+0x48>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6a1a      	ldr	r2, [r3, #32]
 8007906:	f244 4344 	movw	r3, #17476	; 0x4444
 800790a:	4013      	ands	r3, r2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d107      	bne.n	8007920 <HAL_TIMEx_PWMN_Stop+0x48>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800791e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6a1a      	ldr	r2, [r3, #32]
 8007926:	f241 1311 	movw	r3, #4369	; 0x1111
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10f      	bne.n	8007950 <HAL_TIMEx_PWMN_Stop+0x78>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6a1a      	ldr	r2, [r3, #32]
 8007936:	f244 4344 	movw	r3, #17476	; 0x4444
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d107      	bne.n	8007950 <HAL_TIMEx_PWMN_Stop+0x78>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0201 	bic.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <HAL_TIMEx_PWMN_Stop+0x88>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800795e:	e013      	b.n	8007988 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b04      	cmp	r3, #4
 8007964:	d104      	bne.n	8007970 <HAL_TIMEx_PWMN_Stop+0x98>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800796e:	e00b      	b.n	8007988 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b08      	cmp	r3, #8
 8007974:	d104      	bne.n	8007980 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800797e:	e003      	b.n	8007988 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e065      	b.n	8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a2c      	ldr	r2, [pc, #176]	; (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d004      	beq.n	80079e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2b      	ldr	r2, [pc, #172]	; (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d108      	bne.n	80079f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80079f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a1b      	ldr	r2, [pc, #108]	; (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d018      	beq.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a22:	d013      	beq.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a18      	ldr	r2, [pc, #96]	; (8007a8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00e      	beq.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a17      	ldr	r2, [pc, #92]	; (8007a90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d009      	beq.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a12      	ldr	r2, [pc, #72]	; (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d004      	beq.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a13      	ldr	r2, [pc, #76]	; (8007a94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d10c      	bne.n	8007a66 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	40012c00 	.word	0x40012c00
 8007a88:	40013400 	.word	0x40013400
 8007a8c:	40000400 	.word	0x40000400
 8007a90:	40000800 	.word	0x40000800
 8007a94:	40014000 	.word	0x40014000

08007a98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e087      	b.n	8007bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a27      	ldr	r2, [pc, #156]	; (8007bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d004      	beq.n	8007b42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a25      	ldr	r2, [pc, #148]	; (8007bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d106      	bne.n	8007b50 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1e      	ldr	r2, [pc, #120]	; (8007bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d004      	beq.n	8007b64 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d126      	bne.n	8007bb2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	051b      	lsls	r3, r3, #20
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a0e      	ldr	r2, [pc, #56]	; (8007bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d004      	beq.n	8007ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a0d      	ldr	r2, [pc, #52]	; (8007bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d106      	bne.n	8007bb2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	40012c00 	.word	0x40012c00
 8007bd4:	40013400 	.word	0x40013400

08007bd8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f003 031f 	and.w	r3, r3, #31
 8007bea:	2204      	movs	r2, #4
 8007bec:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a1a      	ldr	r2, [r3, #32]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	401a      	ands	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a1a      	ldr	r2, [r3, #32]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	431a      	orrs	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e042      	b.n	8007cba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fa feac 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2224      	movs	r2, #36	; 0x24
 8007c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0201 	bic.w	r2, r2, #1
 8007c62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fa7f 	bl	8008168 <UART_SetConfig>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e022      	b.n	8007cba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 fc2d 	bl	80094dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ca0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0201 	orr.w	r2, r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fcb4 	bl	8009620 <UART_CheckIdleState>
 8007cb8:	4603      	mov	r3, r0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	f040 80bc 	bne.w	8007e56 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <HAL_UART_Receive_IT+0x26>
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e0b4      	b.n	8007e58 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_UART_Receive_IT+0x38>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e0ad      	b.n	8007e58 <HAL_UART_Receive_IT+0x194>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	88fa      	ldrh	r2, [r7, #6]
 8007d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	88fa      	ldrh	r2, [r7, #6]
 8007d16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d28:	d10e      	bne.n	8007d48 <HAL_UART_Receive_IT+0x84>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d105      	bne.n	8007d3e <HAL_UART_Receive_IT+0x7a>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d3c:	e02d      	b.n	8007d9a <HAL_UART_Receive_IT+0xd6>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	22ff      	movs	r2, #255	; 0xff
 8007d42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d46:	e028      	b.n	8007d9a <HAL_UART_Receive_IT+0xd6>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10d      	bne.n	8007d6c <HAL_UART_Receive_IT+0xa8>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <HAL_UART_Receive_IT+0x9e>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	22ff      	movs	r2, #255	; 0xff
 8007d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d60:	e01b      	b.n	8007d9a <HAL_UART_Receive_IT+0xd6>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	227f      	movs	r2, #127	; 0x7f
 8007d66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d6a:	e016      	b.n	8007d9a <HAL_UART_Receive_IT+0xd6>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d74:	d10d      	bne.n	8007d92 <HAL_UART_Receive_IT+0xce>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d104      	bne.n	8007d88 <HAL_UART_Receive_IT+0xc4>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	227f      	movs	r2, #127	; 0x7f
 8007d82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d86:	e008      	b.n	8007d9a <HAL_UART_Receive_IT+0xd6>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	223f      	movs	r2, #63	; 0x3f
 8007d8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d90:	e003      	b.n	8007d9a <HAL_UART_Receive_IT+0xd6>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2222      	movs	r2, #34	; 0x22
 8007da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f042 0201 	orr.w	r2, r2, #1
 8007db8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc2:	d12a      	bne.n	8007e1a <HAL_UART_Receive_IT+0x156>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007dca:	88fa      	ldrh	r2, [r7, #6]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d324      	bcc.n	8007e1a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd8:	d107      	bne.n	8007dea <HAL_UART_Receive_IT+0x126>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d103      	bne.n	8007dea <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4a1f      	ldr	r2, [pc, #124]	; (8007e64 <HAL_UART_Receive_IT+0x1a0>)
 8007de6:	66da      	str	r2, [r3, #108]	; 0x6c
 8007de8:	e002      	b.n	8007df0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <HAL_UART_Receive_IT+0x1a4>)
 8007dee:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e06:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e16:	609a      	str	r2, [r3, #8]
 8007e18:	e01b      	b.n	8007e52 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e22:	d107      	bne.n	8007e34 <HAL_UART_Receive_IT+0x170>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a0f      	ldr	r2, [pc, #60]	; (8007e6c <HAL_UART_Receive_IT+0x1a8>)
 8007e30:	66da      	str	r2, [r3, #108]	; 0x6c
 8007e32:	e002      	b.n	8007e3a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4a0e      	ldr	r2, [pc, #56]	; (8007e70 <HAL_UART_Receive_IT+0x1ac>)
 8007e38:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007e50:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	e000      	b.n	8007e58 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8007e56:	2302      	movs	r3, #2
  }
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	08009a49 	.word	0x08009a49
 8007e68:	08009941 	.word	0x08009941
 8007e6c:	08009895 	.word	0x08009895
 8007e70:	080097eb 	.word	0x080097eb

08007e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d118      	bne.n	8007ed4 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d013      	beq.n	8007ed4 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d104      	bne.n	8007ec0 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d009      	beq.n	8007ed4 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 812e 	beq.w	8008126 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	4798      	blx	r3
      }
      return;
 8007ed2:	e128      	b.n	8008126 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 80d1 	beq.w	800807e <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4b96      	ldr	r3, [pc, #600]	; (8008138 <HAL_UART_IRQHandler+0x2c4>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d105      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 80c6 	beq.w	800807e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d010      	beq.n	8007f1e <HAL_UART_IRQHandler+0xaa>
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f14:	f043 0201 	orr.w	r2, r3, #1
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d010      	beq.n	8007f4a <HAL_UART_IRQHandler+0xd6>
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2202      	movs	r2, #2
 8007f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f40:	f043 0204 	orr.w	r2, r3, #4
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d010      	beq.n	8007f76 <HAL_UART_IRQHandler+0x102>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00b      	beq.n	8007f76 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2204      	movs	r2, #4
 8007f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6c:	f043 0202 	orr.w	r2, r3, #2
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d015      	beq.n	8007fac <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d104      	bne.n	8007f94 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4b6a      	ldr	r3, [pc, #424]	; (8008138 <HAL_UART_IRQHandler+0x2c4>)
 8007f8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa2:	f043 0208 	orr.w	r2, r3, #8
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 80b9 	beq.w	800812a <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d011      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d104      	bne.n	8007fd6 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff8:	2b40      	cmp	r3, #64	; 0x40
 8007ffa:	d004      	beq.n	8008006 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008002:	2b00      	cmp	r3, #0
 8008004:	d031      	beq.n	800806a <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 fb9c 	bl	8009744 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d123      	bne.n	8008062 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008028:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800802e:	2b00      	cmp	r3, #0
 8008030:	d013      	beq.n	800805a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008036:	4a41      	ldr	r2, [pc, #260]	; (800813c <HAL_UART_IRQHandler+0x2c8>)
 8008038:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800803e:	4618      	mov	r0, r3
 8008040:	f7fc fc81 	bl	8004946 <HAL_DMA_Abort_IT>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d017      	beq.n	800807a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008058:	e00f      	b.n	800807a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f87a 	bl	8008154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008060:	e00b      	b.n	800807a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f876 	bl	8008154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008068:	e007      	b.n	800807a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f872 	bl	8008154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8008078:	e057      	b.n	800812a <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807a:	bf00      	nop
    return;
 800807c:	e055      	b.n	800812a <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00d      	beq.n	80080a4 <HAL_UART_IRQHandler+0x230>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d008      	beq.n	80080a4 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800809a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 fd57 	bl	8009b50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080a2:	e045      	b.n	8008130 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d012      	beq.n	80080d4 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d104      	bne.n	80080c2 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d008      	beq.n	80080d4 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d031      	beq.n	800812e <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
    }
    return;
 80080d2:	e02c      	b.n	800812e <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d008      	beq.n	80080f0 <HAL_UART_IRQHandler+0x27c>
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 fb64 	bl	80097b6 <UART_EndTransmit_IT>
    return;
 80080ee:	e01f      	b.n	8008130 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d008      	beq.n	800810c <HAL_UART_IRQHandler+0x298>
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 fd37 	bl	8009b78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800810a:	e011      	b.n	8008130 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00c      	beq.n	8008130 <HAL_UART_IRQHandler+0x2bc>
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	da09      	bge.n	8008130 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 fd21 	bl	8009b64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008122:	bf00      	nop
 8008124:	e004      	b.n	8008130 <HAL_UART_IRQHandler+0x2bc>
      return;
 8008126:	bf00      	nop
 8008128:	e002      	b.n	8008130 <HAL_UART_IRQHandler+0x2bc>
    return;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <HAL_UART_IRQHandler+0x2bc>
    return;
 800812e:	bf00      	nop
  }
}
 8008130:	3720      	adds	r7, #32
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	10000001 	.word	0x10000001
 800813c:	0800978b 	.word	0x0800978b

08008140 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008168:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800816c:	b08a      	sub	sp, #40	; 0x28
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008172:	2300      	movs	r3, #0
 8008174:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689a      	ldr	r2, [r3, #8]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	4313      	orrs	r3, r2
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800819a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819c:	4313      	orrs	r3, r2
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	4ba4      	ldr	r3, [pc, #656]	; (8008438 <UART_SetConfig+0x2d0>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6812      	ldr	r2, [r2, #0]
 80081ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081b0:	430b      	orrs	r3, r1
 80081b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a99      	ldr	r2, [pc, #612]	; (800843c <UART_SetConfig+0x2d4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d004      	beq.n	80081e4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e0:	4313      	orrs	r3, r2
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80081ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6812      	ldr	r2, [r2, #0]
 80081f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	f023 010f 	bic.w	r1, r3, #15
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a8a      	ldr	r2, [pc, #552]	; (8008440 <UART_SetConfig+0x2d8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d126      	bne.n	800826a <UART_SetConfig+0x102>
 800821c:	4b89      	ldr	r3, [pc, #548]	; (8008444 <UART_SetConfig+0x2dc>)
 800821e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	2b03      	cmp	r3, #3
 8008228:	d81a      	bhi.n	8008260 <UART_SetConfig+0xf8>
 800822a:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <UART_SetConfig+0xc8>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	08008241 	.word	0x08008241
 8008234:	08008251 	.word	0x08008251
 8008238:	08008249 	.word	0x08008249
 800823c:	08008259 	.word	0x08008259
 8008240:	2301      	movs	r3, #1
 8008242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008246:	e0d6      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008248:	2302      	movs	r3, #2
 800824a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800824e:	e0d2      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008250:	2304      	movs	r3, #4
 8008252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008256:	e0ce      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008258:	2308      	movs	r3, #8
 800825a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800825e:	e0ca      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008260:	2310      	movs	r3, #16
 8008262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008266:	bf00      	nop
 8008268:	e0c5      	b.n	80083f6 <UART_SetConfig+0x28e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a76      	ldr	r2, [pc, #472]	; (8008448 <UART_SetConfig+0x2e0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d138      	bne.n	80082e6 <UART_SetConfig+0x17e>
 8008274:	4b73      	ldr	r3, [pc, #460]	; (8008444 <UART_SetConfig+0x2dc>)
 8008276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827a:	f003 030c 	and.w	r3, r3, #12
 800827e:	2b0c      	cmp	r3, #12
 8008280:	d82c      	bhi.n	80082dc <UART_SetConfig+0x174>
 8008282:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <UART_SetConfig+0x120>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082bd 	.word	0x080082bd
 800828c:	080082dd 	.word	0x080082dd
 8008290:	080082dd 	.word	0x080082dd
 8008294:	080082dd 	.word	0x080082dd
 8008298:	080082cd 	.word	0x080082cd
 800829c:	080082dd 	.word	0x080082dd
 80082a0:	080082dd 	.word	0x080082dd
 80082a4:	080082dd 	.word	0x080082dd
 80082a8:	080082c5 	.word	0x080082c5
 80082ac:	080082dd 	.word	0x080082dd
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	2300      	movs	r3, #0
 80082be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082c2:	e098      	b.n	80083f6 <UART_SetConfig+0x28e>
 80082c4:	2302      	movs	r3, #2
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ca:	e094      	b.n	80083f6 <UART_SetConfig+0x28e>
 80082cc:	2304      	movs	r3, #4
 80082ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082d2:	e090      	b.n	80083f6 <UART_SetConfig+0x28e>
 80082d4:	2308      	movs	r3, #8
 80082d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082da:	e08c      	b.n	80083f6 <UART_SetConfig+0x28e>
 80082dc:	2310      	movs	r3, #16
 80082de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082e2:	bf00      	nop
 80082e4:	e087      	b.n	80083f6 <UART_SetConfig+0x28e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a58      	ldr	r2, [pc, #352]	; (800844c <UART_SetConfig+0x2e4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d125      	bne.n	800833c <UART_SetConfig+0x1d4>
 80082f0:	4b54      	ldr	r3, [pc, #336]	; (8008444 <UART_SetConfig+0x2dc>)
 80082f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082fa:	2b10      	cmp	r3, #16
 80082fc:	d011      	beq.n	8008322 <UART_SetConfig+0x1ba>
 80082fe:	2b10      	cmp	r3, #16
 8008300:	d802      	bhi.n	8008308 <UART_SetConfig+0x1a0>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <UART_SetConfig+0x1aa>
 8008306:	e014      	b.n	8008332 <UART_SetConfig+0x1ca>
 8008308:	2b20      	cmp	r3, #32
 800830a:	d006      	beq.n	800831a <UART_SetConfig+0x1b2>
 800830c:	2b30      	cmp	r3, #48	; 0x30
 800830e:	d00c      	beq.n	800832a <UART_SetConfig+0x1c2>
 8008310:	e00f      	b.n	8008332 <UART_SetConfig+0x1ca>
 8008312:	2300      	movs	r3, #0
 8008314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008318:	e06d      	b.n	80083f6 <UART_SetConfig+0x28e>
 800831a:	2302      	movs	r3, #2
 800831c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008320:	e069      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008322:	2304      	movs	r3, #4
 8008324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008328:	e065      	b.n	80083f6 <UART_SetConfig+0x28e>
 800832a:	2308      	movs	r3, #8
 800832c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008330:	e061      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008332:	2310      	movs	r3, #16
 8008334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008338:	bf00      	nop
 800833a:	e05c      	b.n	80083f6 <UART_SetConfig+0x28e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a43      	ldr	r2, [pc, #268]	; (8008450 <UART_SetConfig+0x2e8>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d125      	bne.n	8008392 <UART_SetConfig+0x22a>
 8008346:	4b3f      	ldr	r3, [pc, #252]	; (8008444 <UART_SetConfig+0x2dc>)
 8008348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008350:	2b40      	cmp	r3, #64	; 0x40
 8008352:	d011      	beq.n	8008378 <UART_SetConfig+0x210>
 8008354:	2b40      	cmp	r3, #64	; 0x40
 8008356:	d802      	bhi.n	800835e <UART_SetConfig+0x1f6>
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <UART_SetConfig+0x200>
 800835c:	e014      	b.n	8008388 <UART_SetConfig+0x220>
 800835e:	2b80      	cmp	r3, #128	; 0x80
 8008360:	d006      	beq.n	8008370 <UART_SetConfig+0x208>
 8008362:	2bc0      	cmp	r3, #192	; 0xc0
 8008364:	d00c      	beq.n	8008380 <UART_SetConfig+0x218>
 8008366:	e00f      	b.n	8008388 <UART_SetConfig+0x220>
 8008368:	2300      	movs	r3, #0
 800836a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800836e:	e042      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008370:	2302      	movs	r3, #2
 8008372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008376:	e03e      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008378:	2304      	movs	r3, #4
 800837a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800837e:	e03a      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008380:	2308      	movs	r3, #8
 8008382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008386:	e036      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008388:	2310      	movs	r3, #16
 800838a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800838e:	bf00      	nop
 8008390:	e031      	b.n	80083f6 <UART_SetConfig+0x28e>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a29      	ldr	r2, [pc, #164]	; (800843c <UART_SetConfig+0x2d4>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d129      	bne.n	80083f0 <UART_SetConfig+0x288>
 800839c:	4b29      	ldr	r3, [pc, #164]	; (8008444 <UART_SetConfig+0x2dc>)
 800839e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083aa:	d014      	beq.n	80083d6 <UART_SetConfig+0x26e>
 80083ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b0:	d802      	bhi.n	80083b8 <UART_SetConfig+0x250>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d007      	beq.n	80083c6 <UART_SetConfig+0x25e>
 80083b6:	e016      	b.n	80083e6 <UART_SetConfig+0x27e>
 80083b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083bc:	d007      	beq.n	80083ce <UART_SetConfig+0x266>
 80083be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083c2:	d00c      	beq.n	80083de <UART_SetConfig+0x276>
 80083c4:	e00f      	b.n	80083e6 <UART_SetConfig+0x27e>
 80083c6:	2300      	movs	r3, #0
 80083c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083cc:	e013      	b.n	80083f6 <UART_SetConfig+0x28e>
 80083ce:	2302      	movs	r3, #2
 80083d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083d4:	e00f      	b.n	80083f6 <UART_SetConfig+0x28e>
 80083d6:	2304      	movs	r3, #4
 80083d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083dc:	e00b      	b.n	80083f6 <UART_SetConfig+0x28e>
 80083de:	2308      	movs	r3, #8
 80083e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083e4:	e007      	b.n	80083f6 <UART_SetConfig+0x28e>
 80083e6:	2310      	movs	r3, #16
 80083e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ec:	bf00      	nop
 80083ee:	e002      	b.n	80083f6 <UART_SetConfig+0x28e>
 80083f0:	2310      	movs	r3, #16
 80083f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a10      	ldr	r2, [pc, #64]	; (800843c <UART_SetConfig+0x2d4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	f040 842e 	bne.w	8008c5e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008406:	2b08      	cmp	r3, #8
 8008408:	f200 8169 	bhi.w	80086de <UART_SetConfig+0x576>
 800840c:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <UART_SetConfig+0x2ac>)
 800840e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008412:	bf00      	nop
 8008414:	08008455 	.word	0x08008455
 8008418:	080086df 	.word	0x080086df
 800841c:	080084f7 	.word	0x080084f7
 8008420:	080086df 	.word	0x080086df
 8008424:	0800858f 	.word	0x0800858f
 8008428:	080086df 	.word	0x080086df
 800842c:	080086df 	.word	0x080086df
 8008430:	080086df 	.word	0x080086df
 8008434:	08008631 	.word	0x08008631
 8008438:	cfff69f3 	.word	0xcfff69f3
 800843c:	40008000 	.word	0x40008000
 8008440:	40013800 	.word	0x40013800
 8008444:	40021000 	.word	0x40021000
 8008448:	40004400 	.word	0x40004400
 800844c:	40004800 	.word	0x40004800
 8008450:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008454:	f7fd fdd4 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8008458:	4602      	mov	r2, r0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	d044      	beq.n	80084ec <UART_SetConfig+0x384>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b01      	cmp	r3, #1
 8008468:	d03e      	beq.n	80084e8 <UART_SetConfig+0x380>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	2b02      	cmp	r3, #2
 8008470:	d038      	beq.n	80084e4 <UART_SetConfig+0x37c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b03      	cmp	r3, #3
 8008478:	d032      	beq.n	80084e0 <UART_SetConfig+0x378>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b04      	cmp	r3, #4
 8008480:	d02c      	beq.n	80084dc <UART_SetConfig+0x374>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b05      	cmp	r3, #5
 8008488:	d026      	beq.n	80084d8 <UART_SetConfig+0x370>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2b06      	cmp	r3, #6
 8008490:	d020      	beq.n	80084d4 <UART_SetConfig+0x36c>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	2b07      	cmp	r3, #7
 8008498:	d01a      	beq.n	80084d0 <UART_SetConfig+0x368>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b08      	cmp	r3, #8
 80084a0:	d014      	beq.n	80084cc <UART_SetConfig+0x364>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b09      	cmp	r3, #9
 80084a8:	d00e      	beq.n	80084c8 <UART_SetConfig+0x360>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	2b0a      	cmp	r3, #10
 80084b0:	d008      	beq.n	80084c4 <UART_SetConfig+0x35c>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b0b      	cmp	r3, #11
 80084b8:	d102      	bne.n	80084c0 <UART_SetConfig+0x358>
 80084ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084be:	e016      	b.n	80084ee <UART_SetConfig+0x386>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e014      	b.n	80084ee <UART_SetConfig+0x386>
 80084c4:	2380      	movs	r3, #128	; 0x80
 80084c6:	e012      	b.n	80084ee <UART_SetConfig+0x386>
 80084c8:	2340      	movs	r3, #64	; 0x40
 80084ca:	e010      	b.n	80084ee <UART_SetConfig+0x386>
 80084cc:	2320      	movs	r3, #32
 80084ce:	e00e      	b.n	80084ee <UART_SetConfig+0x386>
 80084d0:	2310      	movs	r3, #16
 80084d2:	e00c      	b.n	80084ee <UART_SetConfig+0x386>
 80084d4:	230c      	movs	r3, #12
 80084d6:	e00a      	b.n	80084ee <UART_SetConfig+0x386>
 80084d8:	230a      	movs	r3, #10
 80084da:	e008      	b.n	80084ee <UART_SetConfig+0x386>
 80084dc:	2308      	movs	r3, #8
 80084de:	e006      	b.n	80084ee <UART_SetConfig+0x386>
 80084e0:	2306      	movs	r3, #6
 80084e2:	e004      	b.n	80084ee <UART_SetConfig+0x386>
 80084e4:	2304      	movs	r3, #4
 80084e6:	e002      	b.n	80084ee <UART_SetConfig+0x386>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e000      	b.n	80084ee <UART_SetConfig+0x386>
 80084ec:	2301      	movs	r3, #1
 80084ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f2:	617b      	str	r3, [r7, #20]
        break;
 80084f4:	e0f6      	b.n	80086e4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d044      	beq.n	8008588 <UART_SetConfig+0x420>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b01      	cmp	r3, #1
 8008504:	d03e      	beq.n	8008584 <UART_SetConfig+0x41c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2b02      	cmp	r3, #2
 800850c:	d038      	beq.n	8008580 <UART_SetConfig+0x418>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	2b03      	cmp	r3, #3
 8008514:	d032      	beq.n	800857c <UART_SetConfig+0x414>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	2b04      	cmp	r3, #4
 800851c:	d02c      	beq.n	8008578 <UART_SetConfig+0x410>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	2b05      	cmp	r3, #5
 8008524:	d026      	beq.n	8008574 <UART_SetConfig+0x40c>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	2b06      	cmp	r3, #6
 800852c:	d020      	beq.n	8008570 <UART_SetConfig+0x408>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b07      	cmp	r3, #7
 8008534:	d01a      	beq.n	800856c <UART_SetConfig+0x404>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	2b08      	cmp	r3, #8
 800853c:	d014      	beq.n	8008568 <UART_SetConfig+0x400>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008542:	2b09      	cmp	r3, #9
 8008544:	d00e      	beq.n	8008564 <UART_SetConfig+0x3fc>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	2b0a      	cmp	r3, #10
 800854c:	d008      	beq.n	8008560 <UART_SetConfig+0x3f8>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	2b0b      	cmp	r3, #11
 8008554:	d102      	bne.n	800855c <UART_SetConfig+0x3f4>
 8008556:	f24f 4324 	movw	r3, #62500	; 0xf424
 800855a:	e016      	b.n	800858a <UART_SetConfig+0x422>
 800855c:	4ba1      	ldr	r3, [pc, #644]	; (80087e4 <UART_SetConfig+0x67c>)
 800855e:	e014      	b.n	800858a <UART_SetConfig+0x422>
 8008560:	4ba1      	ldr	r3, [pc, #644]	; (80087e8 <UART_SetConfig+0x680>)
 8008562:	e012      	b.n	800858a <UART_SetConfig+0x422>
 8008564:	4ba1      	ldr	r3, [pc, #644]	; (80087ec <UART_SetConfig+0x684>)
 8008566:	e010      	b.n	800858a <UART_SetConfig+0x422>
 8008568:	4ba1      	ldr	r3, [pc, #644]	; (80087f0 <UART_SetConfig+0x688>)
 800856a:	e00e      	b.n	800858a <UART_SetConfig+0x422>
 800856c:	4ba1      	ldr	r3, [pc, #644]	; (80087f4 <UART_SetConfig+0x68c>)
 800856e:	e00c      	b.n	800858a <UART_SetConfig+0x422>
 8008570:	4ba1      	ldr	r3, [pc, #644]	; (80087f8 <UART_SetConfig+0x690>)
 8008572:	e00a      	b.n	800858a <UART_SetConfig+0x422>
 8008574:	4ba1      	ldr	r3, [pc, #644]	; (80087fc <UART_SetConfig+0x694>)
 8008576:	e008      	b.n	800858a <UART_SetConfig+0x422>
 8008578:	4ba1      	ldr	r3, [pc, #644]	; (8008800 <UART_SetConfig+0x698>)
 800857a:	e006      	b.n	800858a <UART_SetConfig+0x422>
 800857c:	4ba1      	ldr	r3, [pc, #644]	; (8008804 <UART_SetConfig+0x69c>)
 800857e:	e004      	b.n	800858a <UART_SetConfig+0x422>
 8008580:	4ba1      	ldr	r3, [pc, #644]	; (8008808 <UART_SetConfig+0x6a0>)
 8008582:	e002      	b.n	800858a <UART_SetConfig+0x422>
 8008584:	4ba1      	ldr	r3, [pc, #644]	; (800880c <UART_SetConfig+0x6a4>)
 8008586:	e000      	b.n	800858a <UART_SetConfig+0x422>
 8008588:	4b96      	ldr	r3, [pc, #600]	; (80087e4 <UART_SetConfig+0x67c>)
 800858a:	617b      	str	r3, [r7, #20]
        break;
 800858c:	e0aa      	b.n	80086e4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800858e:	f7fd fcc9 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8008592:	4602      	mov	r2, r0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d044      	beq.n	8008626 <UART_SetConfig+0x4be>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d03e      	beq.n	8008622 <UART_SetConfig+0x4ba>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d038      	beq.n	800861e <UART_SetConfig+0x4b6>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d032      	beq.n	800861a <UART_SetConfig+0x4b2>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d02c      	beq.n	8008616 <UART_SetConfig+0x4ae>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	d026      	beq.n	8008612 <UART_SetConfig+0x4aa>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b06      	cmp	r3, #6
 80085ca:	d020      	beq.n	800860e <UART_SetConfig+0x4a6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	2b07      	cmp	r3, #7
 80085d2:	d01a      	beq.n	800860a <UART_SetConfig+0x4a2>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d014      	beq.n	8008606 <UART_SetConfig+0x49e>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	2b09      	cmp	r3, #9
 80085e2:	d00e      	beq.n	8008602 <UART_SetConfig+0x49a>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	2b0a      	cmp	r3, #10
 80085ea:	d008      	beq.n	80085fe <UART_SetConfig+0x496>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	2b0b      	cmp	r3, #11
 80085f2:	d102      	bne.n	80085fa <UART_SetConfig+0x492>
 80085f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085f8:	e016      	b.n	8008628 <UART_SetConfig+0x4c0>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e014      	b.n	8008628 <UART_SetConfig+0x4c0>
 80085fe:	2380      	movs	r3, #128	; 0x80
 8008600:	e012      	b.n	8008628 <UART_SetConfig+0x4c0>
 8008602:	2340      	movs	r3, #64	; 0x40
 8008604:	e010      	b.n	8008628 <UART_SetConfig+0x4c0>
 8008606:	2320      	movs	r3, #32
 8008608:	e00e      	b.n	8008628 <UART_SetConfig+0x4c0>
 800860a:	2310      	movs	r3, #16
 800860c:	e00c      	b.n	8008628 <UART_SetConfig+0x4c0>
 800860e:	230c      	movs	r3, #12
 8008610:	e00a      	b.n	8008628 <UART_SetConfig+0x4c0>
 8008612:	230a      	movs	r3, #10
 8008614:	e008      	b.n	8008628 <UART_SetConfig+0x4c0>
 8008616:	2308      	movs	r3, #8
 8008618:	e006      	b.n	8008628 <UART_SetConfig+0x4c0>
 800861a:	2306      	movs	r3, #6
 800861c:	e004      	b.n	8008628 <UART_SetConfig+0x4c0>
 800861e:	2304      	movs	r3, #4
 8008620:	e002      	b.n	8008628 <UART_SetConfig+0x4c0>
 8008622:	2302      	movs	r3, #2
 8008624:	e000      	b.n	8008628 <UART_SetConfig+0x4c0>
 8008626:	2301      	movs	r3, #1
 8008628:	fbb2 f3f3 	udiv	r3, r2, r3
 800862c:	617b      	str	r3, [r7, #20]
        break;
 800862e:	e059      	b.n	80086e4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	d04e      	beq.n	80086d6 <UART_SetConfig+0x56e>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	2b01      	cmp	r3, #1
 800863e:	d047      	beq.n	80086d0 <UART_SetConfig+0x568>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	2b02      	cmp	r3, #2
 8008646:	d040      	beq.n	80086ca <UART_SetConfig+0x562>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	2b03      	cmp	r3, #3
 800864e:	d039      	beq.n	80086c4 <UART_SetConfig+0x55c>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2b04      	cmp	r3, #4
 8008656:	d032      	beq.n	80086be <UART_SetConfig+0x556>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	2b05      	cmp	r3, #5
 800865e:	d02b      	beq.n	80086b8 <UART_SetConfig+0x550>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b06      	cmp	r3, #6
 8008666:	d024      	beq.n	80086b2 <UART_SetConfig+0x54a>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	2b07      	cmp	r3, #7
 800866e:	d01d      	beq.n	80086ac <UART_SetConfig+0x544>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b08      	cmp	r3, #8
 8008676:	d016      	beq.n	80086a6 <UART_SetConfig+0x53e>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	2b09      	cmp	r3, #9
 800867e:	d00f      	beq.n	80086a0 <UART_SetConfig+0x538>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	2b0a      	cmp	r3, #10
 8008686:	d008      	beq.n	800869a <UART_SetConfig+0x532>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	2b0b      	cmp	r3, #11
 800868e:	d101      	bne.n	8008694 <UART_SetConfig+0x52c>
 8008690:	2380      	movs	r3, #128	; 0x80
 8008692:	e022      	b.n	80086da <UART_SetConfig+0x572>
 8008694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008698:	e01f      	b.n	80086da <UART_SetConfig+0x572>
 800869a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800869e:	e01c      	b.n	80086da <UART_SetConfig+0x572>
 80086a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086a4:	e019      	b.n	80086da <UART_SetConfig+0x572>
 80086a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086aa:	e016      	b.n	80086da <UART_SetConfig+0x572>
 80086ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086b0:	e013      	b.n	80086da <UART_SetConfig+0x572>
 80086b2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80086b6:	e010      	b.n	80086da <UART_SetConfig+0x572>
 80086b8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80086bc:	e00d      	b.n	80086da <UART_SetConfig+0x572>
 80086be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086c2:	e00a      	b.n	80086da <UART_SetConfig+0x572>
 80086c4:	f241 5355 	movw	r3, #5461	; 0x1555
 80086c8:	e007      	b.n	80086da <UART_SetConfig+0x572>
 80086ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086ce:	e004      	b.n	80086da <UART_SetConfig+0x572>
 80086d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086d4:	e001      	b.n	80086da <UART_SetConfig+0x572>
 80086d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086da:	617b      	str	r3, [r7, #20]
        break;
 80086dc:	e002      	b.n	80086e4 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	76fb      	strb	r3, [r7, #27]
        break;
 80086e2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 86cd 	beq.w	8009486 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	4413      	add	r3, r2
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d305      	bcc.n	8008708 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	429a      	cmp	r2, r3
 8008706:	d903      	bls.n	8008710 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	76fb      	strb	r3, [r7, #27]
 800870c:	f000 bebb 	b.w	8009486 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8008710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008714:	2b08      	cmp	r3, #8
 8008716:	f200 828d 	bhi.w	8008c34 <UART_SetConfig+0xacc>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x5b8>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008745 	.word	0x08008745
 8008724:	08008c35 	.word	0x08008c35
 8008728:	080088af 	.word	0x080088af
 800872c:	08008c35 	.word	0x08008c35
 8008730:	080089a5 	.word	0x080089a5
 8008734:	08008c35 	.word	0x08008c35
 8008738:	08008c35 	.word	0x08008c35
 800873c:	08008c35 	.word	0x08008c35
 8008740:	08008ae3 	.word	0x08008ae3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fd fc5c 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8008748:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	4618      	mov	r0, r3
 800874e:	f04f 0100 	mov.w	r1, #0
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	d07d      	beq.n	8008856 <UART_SetConfig+0x6ee>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	2b01      	cmp	r3, #1
 8008760:	d074      	beq.n	800884c <UART_SetConfig+0x6e4>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	2b02      	cmp	r3, #2
 8008768:	d06b      	beq.n	8008842 <UART_SetConfig+0x6da>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	2b03      	cmp	r3, #3
 8008770:	d062      	beq.n	8008838 <UART_SetConfig+0x6d0>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	2b04      	cmp	r3, #4
 8008778:	d059      	beq.n	800882e <UART_SetConfig+0x6c6>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877e:	2b05      	cmp	r3, #5
 8008780:	d050      	beq.n	8008824 <UART_SetConfig+0x6bc>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	2b06      	cmp	r3, #6
 8008788:	d047      	beq.n	800881a <UART_SetConfig+0x6b2>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	2b07      	cmp	r3, #7
 8008790:	d03e      	beq.n	8008810 <UART_SetConfig+0x6a8>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	2b08      	cmp	r3, #8
 8008798:	d01f      	beq.n	80087da <UART_SetConfig+0x672>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d016      	beq.n	80087d0 <UART_SetConfig+0x668>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	2b0a      	cmp	r3, #10
 80087a8:	d00d      	beq.n	80087c6 <UART_SetConfig+0x65e>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	2b0b      	cmp	r3, #11
 80087b0:	d104      	bne.n	80087bc <UART_SetConfig+0x654>
 80087b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087b6:	f04f 0400 	mov.w	r4, #0
 80087ba:	e050      	b.n	800885e <UART_SetConfig+0x6f6>
 80087bc:	f04f 0301 	mov.w	r3, #1
 80087c0:	f04f 0400 	mov.w	r4, #0
 80087c4:	e04b      	b.n	800885e <UART_SetConfig+0x6f6>
 80087c6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80087ca:	f04f 0400 	mov.w	r4, #0
 80087ce:	e046      	b.n	800885e <UART_SetConfig+0x6f6>
 80087d0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80087d4:	f04f 0400 	mov.w	r4, #0
 80087d8:	e041      	b.n	800885e <UART_SetConfig+0x6f6>
 80087da:	f04f 0320 	mov.w	r3, #32
 80087de:	f04f 0400 	mov.w	r4, #0
 80087e2:	e03c      	b.n	800885e <UART_SetConfig+0x6f6>
 80087e4:	00f42400 	.word	0x00f42400
 80087e8:	0001e848 	.word	0x0001e848
 80087ec:	0003d090 	.word	0x0003d090
 80087f0:	0007a120 	.word	0x0007a120
 80087f4:	000f4240 	.word	0x000f4240
 80087f8:	00145855 	.word	0x00145855
 80087fc:	00186a00 	.word	0x00186a00
 8008800:	001e8480 	.word	0x001e8480
 8008804:	0028b0aa 	.word	0x0028b0aa
 8008808:	003d0900 	.word	0x003d0900
 800880c:	007a1200 	.word	0x007a1200
 8008810:	f04f 0310 	mov.w	r3, #16
 8008814:	f04f 0400 	mov.w	r4, #0
 8008818:	e021      	b.n	800885e <UART_SetConfig+0x6f6>
 800881a:	f04f 030c 	mov.w	r3, #12
 800881e:	f04f 0400 	mov.w	r4, #0
 8008822:	e01c      	b.n	800885e <UART_SetConfig+0x6f6>
 8008824:	f04f 030a 	mov.w	r3, #10
 8008828:	f04f 0400 	mov.w	r4, #0
 800882c:	e017      	b.n	800885e <UART_SetConfig+0x6f6>
 800882e:	f04f 0308 	mov.w	r3, #8
 8008832:	f04f 0400 	mov.w	r4, #0
 8008836:	e012      	b.n	800885e <UART_SetConfig+0x6f6>
 8008838:	f04f 0306 	mov.w	r3, #6
 800883c:	f04f 0400 	mov.w	r4, #0
 8008840:	e00d      	b.n	800885e <UART_SetConfig+0x6f6>
 8008842:	f04f 0304 	mov.w	r3, #4
 8008846:	f04f 0400 	mov.w	r4, #0
 800884a:	e008      	b.n	800885e <UART_SetConfig+0x6f6>
 800884c:	f04f 0302 	mov.w	r3, #2
 8008850:	f04f 0400 	mov.w	r4, #0
 8008854:	e003      	b.n	800885e <UART_SetConfig+0x6f6>
 8008856:	f04f 0301 	mov.w	r3, #1
 800885a:	f04f 0400 	mov.w	r4, #0
 800885e:	461a      	mov	r2, r3
 8008860:	4623      	mov	r3, r4
 8008862:	f7f8 f97f 	bl	8000b64 <__aeabi_uldivmod>
 8008866:	4603      	mov	r3, r0
 8008868:	460c      	mov	r4, r1
 800886a:	4619      	mov	r1, r3
 800886c:	4622      	mov	r2, r4
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	f04f 0400 	mov.w	r4, #0
 8008876:	0214      	lsls	r4, r2, #8
 8008878:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800887c:	020b      	lsls	r3, r1, #8
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6852      	ldr	r2, [r2, #4]
 8008882:	0852      	lsrs	r2, r2, #1
 8008884:	4611      	mov	r1, r2
 8008886:	f04f 0200 	mov.w	r2, #0
 800888a:	eb13 0b01 	adds.w	fp, r3, r1
 800888e:	eb44 0c02 	adc.w	ip, r4, r2
 8008892:	4658      	mov	r0, fp
 8008894:	4661      	mov	r1, ip
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f04f 0400 	mov.w	r4, #0
 800889e:	461a      	mov	r2, r3
 80088a0:	4623      	mov	r3, r4
 80088a2:	f7f8 f95f 	bl	8000b64 <__aeabi_uldivmod>
 80088a6:	4603      	mov	r3, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	61fb      	str	r3, [r7, #28]
            break;
 80088ac:	e1c5      	b.n	8008c3a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d05b      	beq.n	800896e <UART_SetConfig+0x806>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d053      	beq.n	8008966 <UART_SetConfig+0x7fe>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d04b      	beq.n	800895e <UART_SetConfig+0x7f6>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d043      	beq.n	8008956 <UART_SetConfig+0x7ee>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d03b      	beq.n	800894e <UART_SetConfig+0x7e6>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	2b05      	cmp	r3, #5
 80088dc:	d033      	beq.n	8008946 <UART_SetConfig+0x7de>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	2b06      	cmp	r3, #6
 80088e4:	d02b      	beq.n	800893e <UART_SetConfig+0x7d6>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	d023      	beq.n	8008936 <UART_SetConfig+0x7ce>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d01b      	beq.n	800892e <UART_SetConfig+0x7c6>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	2b09      	cmp	r3, #9
 80088fc:	d013      	beq.n	8008926 <UART_SetConfig+0x7be>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	2b0a      	cmp	r3, #10
 8008904:	d00b      	beq.n	800891e <UART_SetConfig+0x7b6>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	2b0b      	cmp	r3, #11
 800890c:	d103      	bne.n	8008916 <UART_SetConfig+0x7ae>
 800890e:	4bae      	ldr	r3, [pc, #696]	; (8008bc8 <UART_SetConfig+0xa60>)
 8008910:	f04f 0400 	mov.w	r4, #0
 8008914:	e02e      	b.n	8008974 <UART_SetConfig+0x80c>
 8008916:	4bad      	ldr	r3, [pc, #692]	; (8008bcc <UART_SetConfig+0xa64>)
 8008918:	f04f 0400 	mov.w	r4, #0
 800891c:	e02a      	b.n	8008974 <UART_SetConfig+0x80c>
 800891e:	4bac      	ldr	r3, [pc, #688]	; (8008bd0 <UART_SetConfig+0xa68>)
 8008920:	f04f 0400 	mov.w	r4, #0
 8008924:	e026      	b.n	8008974 <UART_SetConfig+0x80c>
 8008926:	4bab      	ldr	r3, [pc, #684]	; (8008bd4 <UART_SetConfig+0xa6c>)
 8008928:	f04f 0400 	mov.w	r4, #0
 800892c:	e022      	b.n	8008974 <UART_SetConfig+0x80c>
 800892e:	4baa      	ldr	r3, [pc, #680]	; (8008bd8 <UART_SetConfig+0xa70>)
 8008930:	f04f 0400 	mov.w	r4, #0
 8008934:	e01e      	b.n	8008974 <UART_SetConfig+0x80c>
 8008936:	4ba9      	ldr	r3, [pc, #676]	; (8008bdc <UART_SetConfig+0xa74>)
 8008938:	f04f 0400 	mov.w	r4, #0
 800893c:	e01a      	b.n	8008974 <UART_SetConfig+0x80c>
 800893e:	a49e      	add	r4, pc, #632	; (adr r4, 8008bb8 <UART_SetConfig+0xa50>)
 8008940:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008944:	e016      	b.n	8008974 <UART_SetConfig+0x80c>
 8008946:	4ba6      	ldr	r3, [pc, #664]	; (8008be0 <UART_SetConfig+0xa78>)
 8008948:	f04f 0400 	mov.w	r4, #0
 800894c:	e012      	b.n	8008974 <UART_SetConfig+0x80c>
 800894e:	4ba5      	ldr	r3, [pc, #660]	; (8008be4 <UART_SetConfig+0xa7c>)
 8008950:	f04f 0400 	mov.w	r4, #0
 8008954:	e00e      	b.n	8008974 <UART_SetConfig+0x80c>
 8008956:	a49a      	add	r4, pc, #616	; (adr r4, 8008bc0 <UART_SetConfig+0xa58>)
 8008958:	e9d4 3400 	ldrd	r3, r4, [r4]
 800895c:	e00a      	b.n	8008974 <UART_SetConfig+0x80c>
 800895e:	4ba2      	ldr	r3, [pc, #648]	; (8008be8 <UART_SetConfig+0xa80>)
 8008960:	f04f 0400 	mov.w	r4, #0
 8008964:	e006      	b.n	8008974 <UART_SetConfig+0x80c>
 8008966:	4ba1      	ldr	r3, [pc, #644]	; (8008bec <UART_SetConfig+0xa84>)
 8008968:	f04f 0400 	mov.w	r4, #0
 800896c:	e002      	b.n	8008974 <UART_SetConfig+0x80c>
 800896e:	4b97      	ldr	r3, [pc, #604]	; (8008bcc <UART_SetConfig+0xa64>)
 8008970:	f04f 0400 	mov.w	r4, #0
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6852      	ldr	r2, [r2, #4]
 8008978:	0852      	lsrs	r2, r2, #1
 800897a:	4611      	mov	r1, r2
 800897c:	f04f 0200 	mov.w	r2, #0
 8008980:	eb13 0b01 	adds.w	fp, r3, r1
 8008984:	eb44 0c02 	adc.w	ip, r4, r2
 8008988:	4658      	mov	r0, fp
 800898a:	4661      	mov	r1, ip
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f04f 0400 	mov.w	r4, #0
 8008994:	461a      	mov	r2, r3
 8008996:	4623      	mov	r3, r4
 8008998:	f7f8 f8e4 	bl	8000b64 <__aeabi_uldivmod>
 800899c:	4603      	mov	r3, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	61fb      	str	r3, [r7, #28]
            break;
 80089a2:	e14a      	b.n	8008c3a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80089a4:	f7fd fabe 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 80089a8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f04f 0100 	mov.w	r1, #0
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d067      	beq.n	8008a8a <UART_SetConfig+0x922>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d05e      	beq.n	8008a80 <UART_SetConfig+0x918>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d055      	beq.n	8008a76 <UART_SetConfig+0x90e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d04c      	beq.n	8008a6c <UART_SetConfig+0x904>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d043      	beq.n	8008a62 <UART_SetConfig+0x8fa>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b05      	cmp	r3, #5
 80089e0:	d03a      	beq.n	8008a58 <UART_SetConfig+0x8f0>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2b06      	cmp	r3, #6
 80089e8:	d031      	beq.n	8008a4e <UART_SetConfig+0x8e6>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	2b07      	cmp	r3, #7
 80089f0:	d028      	beq.n	8008a44 <UART_SetConfig+0x8dc>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	2b08      	cmp	r3, #8
 80089f8:	d01f      	beq.n	8008a3a <UART_SetConfig+0x8d2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d016      	beq.n	8008a30 <UART_SetConfig+0x8c8>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b0a      	cmp	r3, #10
 8008a08:	d00d      	beq.n	8008a26 <UART_SetConfig+0x8be>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	2b0b      	cmp	r3, #11
 8008a10:	d104      	bne.n	8008a1c <UART_SetConfig+0x8b4>
 8008a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a16:	f04f 0400 	mov.w	r4, #0
 8008a1a:	e03a      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a1c:	f04f 0301 	mov.w	r3, #1
 8008a20:	f04f 0400 	mov.w	r4, #0
 8008a24:	e035      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a26:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008a2a:	f04f 0400 	mov.w	r4, #0
 8008a2e:	e030      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a30:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008a34:	f04f 0400 	mov.w	r4, #0
 8008a38:	e02b      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a3a:	f04f 0320 	mov.w	r3, #32
 8008a3e:	f04f 0400 	mov.w	r4, #0
 8008a42:	e026      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a44:	f04f 0310 	mov.w	r3, #16
 8008a48:	f04f 0400 	mov.w	r4, #0
 8008a4c:	e021      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a4e:	f04f 030c 	mov.w	r3, #12
 8008a52:	f04f 0400 	mov.w	r4, #0
 8008a56:	e01c      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a58:	f04f 030a 	mov.w	r3, #10
 8008a5c:	f04f 0400 	mov.w	r4, #0
 8008a60:	e017      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a62:	f04f 0308 	mov.w	r3, #8
 8008a66:	f04f 0400 	mov.w	r4, #0
 8008a6a:	e012      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a6c:	f04f 0306 	mov.w	r3, #6
 8008a70:	f04f 0400 	mov.w	r4, #0
 8008a74:	e00d      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a76:	f04f 0304 	mov.w	r3, #4
 8008a7a:	f04f 0400 	mov.w	r4, #0
 8008a7e:	e008      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a80:	f04f 0302 	mov.w	r3, #2
 8008a84:	f04f 0400 	mov.w	r4, #0
 8008a88:	e003      	b.n	8008a92 <UART_SetConfig+0x92a>
 8008a8a:	f04f 0301 	mov.w	r3, #1
 8008a8e:	f04f 0400 	mov.w	r4, #0
 8008a92:	461a      	mov	r2, r3
 8008a94:	4623      	mov	r3, r4
 8008a96:	f7f8 f865 	bl	8000b64 <__aeabi_uldivmod>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	f04f 0300 	mov.w	r3, #0
 8008aa6:	f04f 0400 	mov.w	r4, #0
 8008aaa:	0214      	lsls	r4, r2, #8
 8008aac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008ab0:	020b      	lsls	r3, r1, #8
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6852      	ldr	r2, [r2, #4]
 8008ab6:	0852      	lsrs	r2, r2, #1
 8008ab8:	4611      	mov	r1, r2
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	eb13 0b01 	adds.w	fp, r3, r1
 8008ac2:	eb44 0c02 	adc.w	ip, r4, r2
 8008ac6:	4658      	mov	r0, fp
 8008ac8:	4661      	mov	r1, ip
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f04f 0400 	mov.w	r4, #0
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	f7f8 f845 	bl	8000b64 <__aeabi_uldivmod>
 8008ada:	4603      	mov	r3, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	61fb      	str	r3, [r7, #28]
            break;
 8008ae0:	e0ab      	b.n	8008c3a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 8088 	beq.w	8008bfc <UART_SetConfig+0xa94>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d05b      	beq.n	8008bac <UART_SetConfig+0xa44>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d052      	beq.n	8008ba2 <UART_SetConfig+0xa3a>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d04a      	beq.n	8008b9a <UART_SetConfig+0xa32>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d041      	beq.n	8008b90 <UART_SetConfig+0xa28>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	2b05      	cmp	r3, #5
 8008b12:	d039      	beq.n	8008b88 <UART_SetConfig+0xa20>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	2b06      	cmp	r3, #6
 8008b1a:	d031      	beq.n	8008b80 <UART_SetConfig+0xa18>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	2b07      	cmp	r3, #7
 8008b22:	d028      	beq.n	8008b76 <UART_SetConfig+0xa0e>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d01f      	beq.n	8008b6c <UART_SetConfig+0xa04>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	d016      	beq.n	8008b62 <UART_SetConfig+0x9fa>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	2b0a      	cmp	r3, #10
 8008b3a:	d00d      	beq.n	8008b58 <UART_SetConfig+0x9f0>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b0b      	cmp	r3, #11
 8008b42:	d104      	bne.n	8008b4e <UART_SetConfig+0x9e6>
 8008b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b48:	f04f 0400 	mov.w	r4, #0
 8008b4c:	e05a      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008b4e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b52:	f04f 0400 	mov.w	r4, #0
 8008b56:	e055      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b5c:	f04f 0400 	mov.w	r4, #0
 8008b60:	e050      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b66:	f04f 0400 	mov.w	r4, #0
 8008b6a:	e04b      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008b6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b70:	f04f 0400 	mov.w	r4, #0
 8008b74:	e046      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008b76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b7a:	f04f 0400 	mov.w	r4, #0
 8008b7e:	e041      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008b80:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <UART_SetConfig+0xa88>)
 8008b82:	f04f 0400 	mov.w	r4, #0
 8008b86:	e03d      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008b88:	4b1a      	ldr	r3, [pc, #104]	; (8008bf4 <UART_SetConfig+0xa8c>)
 8008b8a:	f04f 0400 	mov.w	r4, #0
 8008b8e:	e039      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008b90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b94:	f04f 0400 	mov.w	r4, #0
 8008b98:	e034      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008b9a:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <UART_SetConfig+0xa90>)
 8008b9c:	f04f 0400 	mov.w	r4, #0
 8008ba0:	e030      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008ba2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ba6:	f04f 0400 	mov.w	r4, #0
 8008baa:	e02b      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008bac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bb0:	f04f 0400 	mov.w	r4, #0
 8008bb4:	e026      	b.n	8008c04 <UART_SetConfig+0xa9c>
 8008bb6:	bf00      	nop
 8008bb8:	14585500 	.word	0x14585500
 8008bbc:	00000000 	.word	0x00000000
 8008bc0:	28b0aa00 	.word	0x28b0aa00
 8008bc4:	00000000 	.word	0x00000000
 8008bc8:	00f42400 	.word	0x00f42400
 8008bcc:	f4240000 	.word	0xf4240000
 8008bd0:	01e84800 	.word	0x01e84800
 8008bd4:	03d09000 	.word	0x03d09000
 8008bd8:	07a12000 	.word	0x07a12000
 8008bdc:	0f424000 	.word	0x0f424000
 8008be0:	186a0000 	.word	0x186a0000
 8008be4:	1e848000 	.word	0x1e848000
 8008be8:	3d090000 	.word	0x3d090000
 8008bec:	7a120000 	.word	0x7a120000
 8008bf0:	000aaa00 	.word	0x000aaa00
 8008bf4:	000ccc00 	.word	0x000ccc00
 8008bf8:	00155500 	.word	0x00155500
 8008bfc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008c00:	f04f 0400 	mov.w	r4, #0
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	6852      	ldr	r2, [r2, #4]
 8008c08:	0852      	lsrs	r2, r2, #1
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	eb13 0b01 	adds.w	fp, r3, r1
 8008c14:	eb44 0c02 	adc.w	ip, r4, r2
 8008c18:	4658      	mov	r0, fp
 8008c1a:	4661      	mov	r1, ip
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f04f 0400 	mov.w	r4, #0
 8008c24:	461a      	mov	r2, r3
 8008c26:	4623      	mov	r3, r4
 8008c28:	f7f7 ff9c 	bl	8000b64 <__aeabi_uldivmod>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	61fb      	str	r3, [r7, #28]
            break;
 8008c32:	e002      	b.n	8008c3a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	76fb      	strb	r3, [r7, #27]
            break;
 8008c38:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c40:	d309      	bcc.n	8008c56 <UART_SetConfig+0xaee>
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c48:	d205      	bcs.n	8008c56 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	60da      	str	r2, [r3, #12]
 8008c52:	f000 bc18 	b.w	8009486 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	76fb      	strb	r3, [r7, #27]
 8008c5a:	f000 bc14 	b.w	8009486 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c66:	f040 8204 	bne.w	8009072 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8008c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	f200 81df 	bhi.w	8009032 <UART_SetConfig+0xeca>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <UART_SetConfig+0xb14>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008ca1 	.word	0x08008ca1
 8008c80:	08008d59 	.word	0x08008d59
 8008c84:	08008e11 	.word	0x08008e11
 8008c88:	08009033 	.word	0x08009033
 8008c8c:	08008eb9 	.word	0x08008eb9
 8008c90:	08009033 	.word	0x08009033
 8008c94:	08009033 	.word	0x08009033
 8008c98:	08009033 	.word	0x08009033
 8008c9c:	08008f71 	.word	0x08008f71
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca0:	f7fd f9ae 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8008ca4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d044      	beq.n	8008d38 <UART_SetConfig+0xbd0>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d03e      	beq.n	8008d34 <UART_SetConfig+0xbcc>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d038      	beq.n	8008d30 <UART_SetConfig+0xbc8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	d032      	beq.n	8008d2c <UART_SetConfig+0xbc4>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d02c      	beq.n	8008d28 <UART_SetConfig+0xbc0>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	2b05      	cmp	r3, #5
 8008cd4:	d026      	beq.n	8008d24 <UART_SetConfig+0xbbc>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	2b06      	cmp	r3, #6
 8008cdc:	d020      	beq.n	8008d20 <UART_SetConfig+0xbb8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	2b07      	cmp	r3, #7
 8008ce4:	d01a      	beq.n	8008d1c <UART_SetConfig+0xbb4>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	2b08      	cmp	r3, #8
 8008cec:	d014      	beq.n	8008d18 <UART_SetConfig+0xbb0>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b09      	cmp	r3, #9
 8008cf4:	d00e      	beq.n	8008d14 <UART_SetConfig+0xbac>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	2b0a      	cmp	r3, #10
 8008cfc:	d008      	beq.n	8008d10 <UART_SetConfig+0xba8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	2b0b      	cmp	r3, #11
 8008d04:	d102      	bne.n	8008d0c <UART_SetConfig+0xba4>
 8008d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d0a:	e016      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e014      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d10:	2380      	movs	r3, #128	; 0x80
 8008d12:	e012      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d14:	2340      	movs	r3, #64	; 0x40
 8008d16:	e010      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d18:	2320      	movs	r3, #32
 8008d1a:	e00e      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	e00c      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d20:	230c      	movs	r3, #12
 8008d22:	e00a      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d24:	230a      	movs	r3, #10
 8008d26:	e008      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d28:	2308      	movs	r3, #8
 8008d2a:	e006      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d2c:	2306      	movs	r3, #6
 8008d2e:	e004      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d30:	2304      	movs	r3, #4
 8008d32:	e002      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d34:	2302      	movs	r3, #2
 8008d36:	e000      	b.n	8008d3a <UART_SetConfig+0xbd2>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d40:	005a      	lsls	r2, r3, #1
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	085b      	lsrs	r3, r3, #1
 8008d48:	441a      	add	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	61fb      	str	r3, [r7, #28]
        break;
 8008d56:	e16f      	b.n	8009038 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d58:	f7fd f968 	bl	800602c <HAL_RCC_GetPCLK2Freq>
 8008d5c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d044      	beq.n	8008df0 <UART_SetConfig+0xc88>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d03e      	beq.n	8008dec <UART_SetConfig+0xc84>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d038      	beq.n	8008de8 <UART_SetConfig+0xc80>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d032      	beq.n	8008de4 <UART_SetConfig+0xc7c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d02c      	beq.n	8008de0 <UART_SetConfig+0xc78>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	d026      	beq.n	8008ddc <UART_SetConfig+0xc74>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	2b06      	cmp	r3, #6
 8008d94:	d020      	beq.n	8008dd8 <UART_SetConfig+0xc70>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	2b07      	cmp	r3, #7
 8008d9c:	d01a      	beq.n	8008dd4 <UART_SetConfig+0xc6c>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	2b08      	cmp	r3, #8
 8008da4:	d014      	beq.n	8008dd0 <UART_SetConfig+0xc68>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	2b09      	cmp	r3, #9
 8008dac:	d00e      	beq.n	8008dcc <UART_SetConfig+0xc64>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	2b0a      	cmp	r3, #10
 8008db4:	d008      	beq.n	8008dc8 <UART_SetConfig+0xc60>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dba:	2b0b      	cmp	r3, #11
 8008dbc:	d102      	bne.n	8008dc4 <UART_SetConfig+0xc5c>
 8008dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dc2:	e016      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e014      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008dc8:	2380      	movs	r3, #128	; 0x80
 8008dca:	e012      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008dcc:	2340      	movs	r3, #64	; 0x40
 8008dce:	e010      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008dd0:	2320      	movs	r3, #32
 8008dd2:	e00e      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008dd4:	2310      	movs	r3, #16
 8008dd6:	e00c      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008dd8:	230c      	movs	r3, #12
 8008dda:	e00a      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008ddc:	230a      	movs	r3, #10
 8008dde:	e008      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008de0:	2308      	movs	r3, #8
 8008de2:	e006      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008de4:	2306      	movs	r3, #6
 8008de6:	e004      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008de8:	2304      	movs	r3, #4
 8008dea:	e002      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008dec:	2302      	movs	r3, #2
 8008dee:	e000      	b.n	8008df2 <UART_SetConfig+0xc8a>
 8008df0:	2301      	movs	r3, #1
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df8:	005a      	lsls	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	085b      	lsrs	r3, r3, #1
 8008e00:	441a      	add	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	61fb      	str	r3, [r7, #28]
        break;
 8008e0e:	e113      	b.n	8009038 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d043      	beq.n	8008ea0 <UART_SetConfig+0xd38>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d03d      	beq.n	8008e9c <UART_SetConfig+0xd34>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d037      	beq.n	8008e98 <UART_SetConfig+0xd30>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d031      	beq.n	8008e94 <UART_SetConfig+0xd2c>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d02b      	beq.n	8008e90 <UART_SetConfig+0xd28>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b05      	cmp	r3, #5
 8008e3e:	d025      	beq.n	8008e8c <UART_SetConfig+0xd24>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	2b06      	cmp	r3, #6
 8008e46:	d01f      	beq.n	8008e88 <UART_SetConfig+0xd20>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	2b07      	cmp	r3, #7
 8008e4e:	d019      	beq.n	8008e84 <UART_SetConfig+0xd1c>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d013      	beq.n	8008e80 <UART_SetConfig+0xd18>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b09      	cmp	r3, #9
 8008e5e:	d00d      	beq.n	8008e7c <UART_SetConfig+0xd14>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2b0a      	cmp	r3, #10
 8008e66:	d007      	beq.n	8008e78 <UART_SetConfig+0xd10>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	2b0b      	cmp	r3, #11
 8008e6e:	d101      	bne.n	8008e74 <UART_SetConfig+0xd0c>
 8008e70:	4b8d      	ldr	r3, [pc, #564]	; (80090a8 <UART_SetConfig+0xf40>)
 8008e72:	e016      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e74:	4b8d      	ldr	r3, [pc, #564]	; (80090ac <UART_SetConfig+0xf44>)
 8008e76:	e014      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e78:	4b8d      	ldr	r3, [pc, #564]	; (80090b0 <UART_SetConfig+0xf48>)
 8008e7a:	e012      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e7c:	4b8d      	ldr	r3, [pc, #564]	; (80090b4 <UART_SetConfig+0xf4c>)
 8008e7e:	e010      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e80:	4b8d      	ldr	r3, [pc, #564]	; (80090b8 <UART_SetConfig+0xf50>)
 8008e82:	e00e      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e84:	4b8d      	ldr	r3, [pc, #564]	; (80090bc <UART_SetConfig+0xf54>)
 8008e86:	e00c      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e88:	4b8d      	ldr	r3, [pc, #564]	; (80090c0 <UART_SetConfig+0xf58>)
 8008e8a:	e00a      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e8c:	4b8d      	ldr	r3, [pc, #564]	; (80090c4 <UART_SetConfig+0xf5c>)
 8008e8e:	e008      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e90:	4b8d      	ldr	r3, [pc, #564]	; (80090c8 <UART_SetConfig+0xf60>)
 8008e92:	e006      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e94:	4b8d      	ldr	r3, [pc, #564]	; (80090cc <UART_SetConfig+0xf64>)
 8008e96:	e004      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e98:	4b8d      	ldr	r3, [pc, #564]	; (80090d0 <UART_SetConfig+0xf68>)
 8008e9a:	e002      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008e9c:	4b8d      	ldr	r3, [pc, #564]	; (80090d4 <UART_SetConfig+0xf6c>)
 8008e9e:	e000      	b.n	8008ea2 <UART_SetConfig+0xd3a>
 8008ea0:	4b82      	ldr	r3, [pc, #520]	; (80090ac <UART_SetConfig+0xf44>)
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	6852      	ldr	r2, [r2, #4]
 8008ea6:	0852      	lsrs	r2, r2, #1
 8008ea8:	441a      	add	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	61fb      	str	r3, [r7, #28]
        break;
 8008eb6:	e0bf      	b.n	8009038 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eb8:	f7fd f834 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8008ebc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d044      	beq.n	8008f50 <UART_SetConfig+0xde8>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d03e      	beq.n	8008f4c <UART_SetConfig+0xde4>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d038      	beq.n	8008f48 <UART_SetConfig+0xde0>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d032      	beq.n	8008f44 <UART_SetConfig+0xddc>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d02c      	beq.n	8008f40 <UART_SetConfig+0xdd8>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	d026      	beq.n	8008f3c <UART_SetConfig+0xdd4>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	2b06      	cmp	r3, #6
 8008ef4:	d020      	beq.n	8008f38 <UART_SetConfig+0xdd0>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	2b07      	cmp	r3, #7
 8008efc:	d01a      	beq.n	8008f34 <UART_SetConfig+0xdcc>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	2b08      	cmp	r3, #8
 8008f04:	d014      	beq.n	8008f30 <UART_SetConfig+0xdc8>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	2b09      	cmp	r3, #9
 8008f0c:	d00e      	beq.n	8008f2c <UART_SetConfig+0xdc4>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2b0a      	cmp	r3, #10
 8008f14:	d008      	beq.n	8008f28 <UART_SetConfig+0xdc0>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	2b0b      	cmp	r3, #11
 8008f1c:	d102      	bne.n	8008f24 <UART_SetConfig+0xdbc>
 8008f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f22:	e016      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e014      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f28:	2380      	movs	r3, #128	; 0x80
 8008f2a:	e012      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f2c:	2340      	movs	r3, #64	; 0x40
 8008f2e:	e010      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f30:	2320      	movs	r3, #32
 8008f32:	e00e      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f34:	2310      	movs	r3, #16
 8008f36:	e00c      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f38:	230c      	movs	r3, #12
 8008f3a:	e00a      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f3c:	230a      	movs	r3, #10
 8008f3e:	e008      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f40:	2308      	movs	r3, #8
 8008f42:	e006      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f44:	2306      	movs	r3, #6
 8008f46:	e004      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f48:	2304      	movs	r3, #4
 8008f4a:	e002      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e000      	b.n	8008f52 <UART_SetConfig+0xdea>
 8008f50:	2301      	movs	r3, #1
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f58:	005a      	lsls	r2, r3, #1
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	085b      	lsrs	r3, r3, #1
 8008f60:	441a      	add	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	61fb      	str	r3, [r7, #28]
        break;
 8008f6e:	e063      	b.n	8009038 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d04f      	beq.n	8009018 <UART_SetConfig+0xeb0>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d048      	beq.n	8009012 <UART_SetConfig+0xeaa>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d041      	beq.n	800900c <UART_SetConfig+0xea4>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d03a      	beq.n	8009006 <UART_SetConfig+0xe9e>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d033      	beq.n	8009000 <UART_SetConfig+0xe98>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b05      	cmp	r3, #5
 8008f9e:	d02c      	beq.n	8008ffa <UART_SetConfig+0xe92>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	2b06      	cmp	r3, #6
 8008fa6:	d025      	beq.n	8008ff4 <UART_SetConfig+0xe8c>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	2b07      	cmp	r3, #7
 8008fae:	d01e      	beq.n	8008fee <UART_SetConfig+0xe86>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	d017      	beq.n	8008fe8 <UART_SetConfig+0xe80>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	2b09      	cmp	r3, #9
 8008fbe:	d010      	beq.n	8008fe2 <UART_SetConfig+0xe7a>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	2b0a      	cmp	r3, #10
 8008fc6:	d009      	beq.n	8008fdc <UART_SetConfig+0xe74>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	2b0b      	cmp	r3, #11
 8008fce:	d102      	bne.n	8008fd6 <UART_SetConfig+0xe6e>
 8008fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fd4:	e022      	b.n	800901c <UART_SetConfig+0xeb4>
 8008fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fda:	e01f      	b.n	800901c <UART_SetConfig+0xeb4>
 8008fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fe0:	e01c      	b.n	800901c <UART_SetConfig+0xeb4>
 8008fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe6:	e019      	b.n	800901c <UART_SetConfig+0xeb4>
 8008fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fec:	e016      	b.n	800901c <UART_SetConfig+0xeb4>
 8008fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ff2:	e013      	b.n	800901c <UART_SetConfig+0xeb4>
 8008ff4:	f241 5354 	movw	r3, #5460	; 0x1554
 8008ff8:	e010      	b.n	800901c <UART_SetConfig+0xeb4>
 8008ffa:	f641 1398 	movw	r3, #6552	; 0x1998
 8008ffe:	e00d      	b.n	800901c <UART_SetConfig+0xeb4>
 8009000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009004:	e00a      	b.n	800901c <UART_SetConfig+0xeb4>
 8009006:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800900a:	e007      	b.n	800901c <UART_SetConfig+0xeb4>
 800900c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009010:	e004      	b.n	800901c <UART_SetConfig+0xeb4>
 8009012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009016:	e001      	b.n	800901c <UART_SetConfig+0xeb4>
 8009018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	6852      	ldr	r2, [r2, #4]
 8009020:	0852      	lsrs	r2, r2, #1
 8009022:	441a      	add	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	fbb2 f3f3 	udiv	r3, r2, r3
 800902c:	b29b      	uxth	r3, r3
 800902e:	61fb      	str	r3, [r7, #28]
        break;
 8009030:	e002      	b.n	8009038 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	76fb      	strb	r3, [r7, #27]
        break;
 8009036:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	2b0f      	cmp	r3, #15
 800903c:	d916      	bls.n	800906c <UART_SetConfig+0xf04>
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009044:	d212      	bcs.n	800906c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	b29b      	uxth	r3, r3
 800904a:	f023 030f 	bic.w	r3, r3, #15
 800904e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	085b      	lsrs	r3, r3, #1
 8009054:	b29b      	uxth	r3, r3
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	b29a      	uxth	r2, r3
 800905c:	89fb      	ldrh	r3, [r7, #14]
 800905e:	4313      	orrs	r3, r2
 8009060:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	89fa      	ldrh	r2, [r7, #14]
 8009068:	60da      	str	r2, [r3, #12]
 800906a:	e20c      	b.n	8009486 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	76fb      	strb	r3, [r7, #27]
 8009070:	e209      	b.n	8009486 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8009072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009076:	2b08      	cmp	r3, #8
 8009078:	f200 81f4 	bhi.w	8009464 <UART_SetConfig+0x12fc>
 800907c:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <UART_SetConfig+0xf1c>)
 800907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009082:	bf00      	nop
 8009084:	080090d9 	.word	0x080090d9
 8009088:	0800918f 	.word	0x0800918f
 800908c:	08009245 	.word	0x08009245
 8009090:	08009465 	.word	0x08009465
 8009094:	080092ef 	.word	0x080092ef
 8009098:	08009465 	.word	0x08009465
 800909c:	08009465 	.word	0x08009465
 80090a0:	08009465 	.word	0x08009465
 80090a4:	080093a5 	.word	0x080093a5
 80090a8:	0001e848 	.word	0x0001e848
 80090ac:	01e84800 	.word	0x01e84800
 80090b0:	0003d090 	.word	0x0003d090
 80090b4:	0007a120 	.word	0x0007a120
 80090b8:	000f4240 	.word	0x000f4240
 80090bc:	001e8480 	.word	0x001e8480
 80090c0:	0028b0aa 	.word	0x0028b0aa
 80090c4:	0030d400 	.word	0x0030d400
 80090c8:	003d0900 	.word	0x003d0900
 80090cc:	00516154 	.word	0x00516154
 80090d0:	007a1200 	.word	0x007a1200
 80090d4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090d8:	f7fc ff92 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 80090dc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d044      	beq.n	8009170 <UART_SetConfig+0x1008>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d03e      	beq.n	800916c <UART_SetConfig+0x1004>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d038      	beq.n	8009168 <UART_SetConfig+0x1000>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d032      	beq.n	8009164 <UART_SetConfig+0xffc>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	2b04      	cmp	r3, #4
 8009104:	d02c      	beq.n	8009160 <UART_SetConfig+0xff8>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	2b05      	cmp	r3, #5
 800910c:	d026      	beq.n	800915c <UART_SetConfig+0xff4>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b06      	cmp	r3, #6
 8009114:	d020      	beq.n	8009158 <UART_SetConfig+0xff0>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	2b07      	cmp	r3, #7
 800911c:	d01a      	beq.n	8009154 <UART_SetConfig+0xfec>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009122:	2b08      	cmp	r3, #8
 8009124:	d014      	beq.n	8009150 <UART_SetConfig+0xfe8>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	2b09      	cmp	r3, #9
 800912c:	d00e      	beq.n	800914c <UART_SetConfig+0xfe4>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b0a      	cmp	r3, #10
 8009134:	d008      	beq.n	8009148 <UART_SetConfig+0xfe0>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	2b0b      	cmp	r3, #11
 800913c:	d102      	bne.n	8009144 <UART_SetConfig+0xfdc>
 800913e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009142:	e016      	b.n	8009172 <UART_SetConfig+0x100a>
 8009144:	2301      	movs	r3, #1
 8009146:	e014      	b.n	8009172 <UART_SetConfig+0x100a>
 8009148:	2380      	movs	r3, #128	; 0x80
 800914a:	e012      	b.n	8009172 <UART_SetConfig+0x100a>
 800914c:	2340      	movs	r3, #64	; 0x40
 800914e:	e010      	b.n	8009172 <UART_SetConfig+0x100a>
 8009150:	2320      	movs	r3, #32
 8009152:	e00e      	b.n	8009172 <UART_SetConfig+0x100a>
 8009154:	2310      	movs	r3, #16
 8009156:	e00c      	b.n	8009172 <UART_SetConfig+0x100a>
 8009158:	230c      	movs	r3, #12
 800915a:	e00a      	b.n	8009172 <UART_SetConfig+0x100a>
 800915c:	230a      	movs	r3, #10
 800915e:	e008      	b.n	8009172 <UART_SetConfig+0x100a>
 8009160:	2308      	movs	r3, #8
 8009162:	e006      	b.n	8009172 <UART_SetConfig+0x100a>
 8009164:	2306      	movs	r3, #6
 8009166:	e004      	b.n	8009172 <UART_SetConfig+0x100a>
 8009168:	2304      	movs	r3, #4
 800916a:	e002      	b.n	8009172 <UART_SetConfig+0x100a>
 800916c:	2302      	movs	r3, #2
 800916e:	e000      	b.n	8009172 <UART_SetConfig+0x100a>
 8009170:	2301      	movs	r3, #1
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	fbb2 f2f3 	udiv	r2, r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	085b      	lsrs	r3, r3, #1
 800917e:	441a      	add	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	fbb2 f3f3 	udiv	r3, r2, r3
 8009188:	b29b      	uxth	r3, r3
 800918a:	61fb      	str	r3, [r7, #28]
        break;
 800918c:	e16d      	b.n	800946a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800918e:	f7fc ff4d 	bl	800602c <HAL_RCC_GetPCLK2Freq>
 8009192:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	2b00      	cmp	r3, #0
 800919a:	d044      	beq.n	8009226 <UART_SetConfig+0x10be>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d03e      	beq.n	8009222 <UART_SetConfig+0x10ba>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d038      	beq.n	800921e <UART_SetConfig+0x10b6>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b0:	2b03      	cmp	r3, #3
 80091b2:	d032      	beq.n	800921a <UART_SetConfig+0x10b2>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d02c      	beq.n	8009216 <UART_SetConfig+0x10ae>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	2b05      	cmp	r3, #5
 80091c2:	d026      	beq.n	8009212 <UART_SetConfig+0x10aa>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	2b06      	cmp	r3, #6
 80091ca:	d020      	beq.n	800920e <UART_SetConfig+0x10a6>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	2b07      	cmp	r3, #7
 80091d2:	d01a      	beq.n	800920a <UART_SetConfig+0x10a2>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	2b08      	cmp	r3, #8
 80091da:	d014      	beq.n	8009206 <UART_SetConfig+0x109e>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	2b09      	cmp	r3, #9
 80091e2:	d00e      	beq.n	8009202 <UART_SetConfig+0x109a>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b0a      	cmp	r3, #10
 80091ea:	d008      	beq.n	80091fe <UART_SetConfig+0x1096>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b0b      	cmp	r3, #11
 80091f2:	d102      	bne.n	80091fa <UART_SetConfig+0x1092>
 80091f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091f8:	e016      	b.n	8009228 <UART_SetConfig+0x10c0>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e014      	b.n	8009228 <UART_SetConfig+0x10c0>
 80091fe:	2380      	movs	r3, #128	; 0x80
 8009200:	e012      	b.n	8009228 <UART_SetConfig+0x10c0>
 8009202:	2340      	movs	r3, #64	; 0x40
 8009204:	e010      	b.n	8009228 <UART_SetConfig+0x10c0>
 8009206:	2320      	movs	r3, #32
 8009208:	e00e      	b.n	8009228 <UART_SetConfig+0x10c0>
 800920a:	2310      	movs	r3, #16
 800920c:	e00c      	b.n	8009228 <UART_SetConfig+0x10c0>
 800920e:	230c      	movs	r3, #12
 8009210:	e00a      	b.n	8009228 <UART_SetConfig+0x10c0>
 8009212:	230a      	movs	r3, #10
 8009214:	e008      	b.n	8009228 <UART_SetConfig+0x10c0>
 8009216:	2308      	movs	r3, #8
 8009218:	e006      	b.n	8009228 <UART_SetConfig+0x10c0>
 800921a:	2306      	movs	r3, #6
 800921c:	e004      	b.n	8009228 <UART_SetConfig+0x10c0>
 800921e:	2304      	movs	r3, #4
 8009220:	e002      	b.n	8009228 <UART_SetConfig+0x10c0>
 8009222:	2302      	movs	r3, #2
 8009224:	e000      	b.n	8009228 <UART_SetConfig+0x10c0>
 8009226:	2301      	movs	r3, #1
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	fbb2 f2f3 	udiv	r2, r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	085b      	lsrs	r3, r3, #1
 8009234:	441a      	add	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	fbb2 f3f3 	udiv	r3, r2, r3
 800923e:	b29b      	uxth	r3, r3
 8009240:	61fb      	str	r3, [r7, #28]
        break;
 8009242:	e112      	b.n	800946a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	2b00      	cmp	r3, #0
 800924a:	d044      	beq.n	80092d6 <UART_SetConfig+0x116e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	2b01      	cmp	r3, #1
 8009252:	d03e      	beq.n	80092d2 <UART_SetConfig+0x116a>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	2b02      	cmp	r3, #2
 800925a:	d038      	beq.n	80092ce <UART_SetConfig+0x1166>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	2b03      	cmp	r3, #3
 8009262:	d032      	beq.n	80092ca <UART_SetConfig+0x1162>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	2b04      	cmp	r3, #4
 800926a:	d02c      	beq.n	80092c6 <UART_SetConfig+0x115e>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	2b05      	cmp	r3, #5
 8009272:	d026      	beq.n	80092c2 <UART_SetConfig+0x115a>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	2b06      	cmp	r3, #6
 800927a:	d020      	beq.n	80092be <UART_SetConfig+0x1156>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	2b07      	cmp	r3, #7
 8009282:	d01a      	beq.n	80092ba <UART_SetConfig+0x1152>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009288:	2b08      	cmp	r3, #8
 800928a:	d014      	beq.n	80092b6 <UART_SetConfig+0x114e>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009290:	2b09      	cmp	r3, #9
 8009292:	d00e      	beq.n	80092b2 <UART_SetConfig+0x114a>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2b0a      	cmp	r3, #10
 800929a:	d008      	beq.n	80092ae <UART_SetConfig+0x1146>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	2b0b      	cmp	r3, #11
 80092a2:	d102      	bne.n	80092aa <UART_SetConfig+0x1142>
 80092a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80092a8:	e016      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092aa:	4b81      	ldr	r3, [pc, #516]	; (80094b0 <UART_SetConfig+0x1348>)
 80092ac:	e014      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092ae:	4b81      	ldr	r3, [pc, #516]	; (80094b4 <UART_SetConfig+0x134c>)
 80092b0:	e012      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092b2:	4b81      	ldr	r3, [pc, #516]	; (80094b8 <UART_SetConfig+0x1350>)
 80092b4:	e010      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092b6:	4b81      	ldr	r3, [pc, #516]	; (80094bc <UART_SetConfig+0x1354>)
 80092b8:	e00e      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092ba:	4b81      	ldr	r3, [pc, #516]	; (80094c0 <UART_SetConfig+0x1358>)
 80092bc:	e00c      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092be:	4b81      	ldr	r3, [pc, #516]	; (80094c4 <UART_SetConfig+0x135c>)
 80092c0:	e00a      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092c2:	4b81      	ldr	r3, [pc, #516]	; (80094c8 <UART_SetConfig+0x1360>)
 80092c4:	e008      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092c6:	4b81      	ldr	r3, [pc, #516]	; (80094cc <UART_SetConfig+0x1364>)
 80092c8:	e006      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092ca:	4b81      	ldr	r3, [pc, #516]	; (80094d0 <UART_SetConfig+0x1368>)
 80092cc:	e004      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092ce:	4b81      	ldr	r3, [pc, #516]	; (80094d4 <UART_SetConfig+0x136c>)
 80092d0:	e002      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092d2:	4b81      	ldr	r3, [pc, #516]	; (80094d8 <UART_SetConfig+0x1370>)
 80092d4:	e000      	b.n	80092d8 <UART_SetConfig+0x1170>
 80092d6:	4b76      	ldr	r3, [pc, #472]	; (80094b0 <UART_SetConfig+0x1348>)
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6852      	ldr	r2, [r2, #4]
 80092dc:	0852      	lsrs	r2, r2, #1
 80092de:	441a      	add	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	61fb      	str	r3, [r7, #28]
        break;
 80092ec:	e0bd      	b.n	800946a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ee:	f7fc fe19 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 80092f2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d044      	beq.n	8009386 <UART_SetConfig+0x121e>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b01      	cmp	r3, #1
 8009302:	d03e      	beq.n	8009382 <UART_SetConfig+0x121a>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	2b02      	cmp	r3, #2
 800930a:	d038      	beq.n	800937e <UART_SetConfig+0x1216>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b03      	cmp	r3, #3
 8009312:	d032      	beq.n	800937a <UART_SetConfig+0x1212>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	2b04      	cmp	r3, #4
 800931a:	d02c      	beq.n	8009376 <UART_SetConfig+0x120e>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	2b05      	cmp	r3, #5
 8009322:	d026      	beq.n	8009372 <UART_SetConfig+0x120a>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	2b06      	cmp	r3, #6
 800932a:	d020      	beq.n	800936e <UART_SetConfig+0x1206>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	2b07      	cmp	r3, #7
 8009332:	d01a      	beq.n	800936a <UART_SetConfig+0x1202>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	2b08      	cmp	r3, #8
 800933a:	d014      	beq.n	8009366 <UART_SetConfig+0x11fe>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b09      	cmp	r3, #9
 8009342:	d00e      	beq.n	8009362 <UART_SetConfig+0x11fa>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b0a      	cmp	r3, #10
 800934a:	d008      	beq.n	800935e <UART_SetConfig+0x11f6>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b0b      	cmp	r3, #11
 8009352:	d102      	bne.n	800935a <UART_SetConfig+0x11f2>
 8009354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009358:	e016      	b.n	8009388 <UART_SetConfig+0x1220>
 800935a:	2301      	movs	r3, #1
 800935c:	e014      	b.n	8009388 <UART_SetConfig+0x1220>
 800935e:	2380      	movs	r3, #128	; 0x80
 8009360:	e012      	b.n	8009388 <UART_SetConfig+0x1220>
 8009362:	2340      	movs	r3, #64	; 0x40
 8009364:	e010      	b.n	8009388 <UART_SetConfig+0x1220>
 8009366:	2320      	movs	r3, #32
 8009368:	e00e      	b.n	8009388 <UART_SetConfig+0x1220>
 800936a:	2310      	movs	r3, #16
 800936c:	e00c      	b.n	8009388 <UART_SetConfig+0x1220>
 800936e:	230c      	movs	r3, #12
 8009370:	e00a      	b.n	8009388 <UART_SetConfig+0x1220>
 8009372:	230a      	movs	r3, #10
 8009374:	e008      	b.n	8009388 <UART_SetConfig+0x1220>
 8009376:	2308      	movs	r3, #8
 8009378:	e006      	b.n	8009388 <UART_SetConfig+0x1220>
 800937a:	2306      	movs	r3, #6
 800937c:	e004      	b.n	8009388 <UART_SetConfig+0x1220>
 800937e:	2304      	movs	r3, #4
 8009380:	e002      	b.n	8009388 <UART_SetConfig+0x1220>
 8009382:	2302      	movs	r3, #2
 8009384:	e000      	b.n	8009388 <UART_SetConfig+0x1220>
 8009386:	2301      	movs	r3, #1
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	fbb2 f2f3 	udiv	r2, r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	085b      	lsrs	r3, r3, #1
 8009394:	441a      	add	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	fbb2 f3f3 	udiv	r3, r2, r3
 800939e:	b29b      	uxth	r3, r3
 80093a0:	61fb      	str	r3, [r7, #28]
        break;
 80093a2:	e062      	b.n	800946a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d04e      	beq.n	800944a <UART_SetConfig+0x12e2>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d047      	beq.n	8009444 <UART_SetConfig+0x12dc>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d040      	beq.n	800943e <UART_SetConfig+0x12d6>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d039      	beq.n	8009438 <UART_SetConfig+0x12d0>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d032      	beq.n	8009432 <UART_SetConfig+0x12ca>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d02b      	beq.n	800942c <UART_SetConfig+0x12c4>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	2b06      	cmp	r3, #6
 80093da:	d024      	beq.n	8009426 <UART_SetConfig+0x12be>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	2b07      	cmp	r3, #7
 80093e2:	d01d      	beq.n	8009420 <UART_SetConfig+0x12b8>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d016      	beq.n	800941a <UART_SetConfig+0x12b2>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	2b09      	cmp	r3, #9
 80093f2:	d00f      	beq.n	8009414 <UART_SetConfig+0x12ac>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	2b0a      	cmp	r3, #10
 80093fa:	d008      	beq.n	800940e <UART_SetConfig+0x12a6>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	2b0b      	cmp	r3, #11
 8009402:	d101      	bne.n	8009408 <UART_SetConfig+0x12a0>
 8009404:	2380      	movs	r3, #128	; 0x80
 8009406:	e022      	b.n	800944e <UART_SetConfig+0x12e6>
 8009408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800940c:	e01f      	b.n	800944e <UART_SetConfig+0x12e6>
 800940e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009412:	e01c      	b.n	800944e <UART_SetConfig+0x12e6>
 8009414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009418:	e019      	b.n	800944e <UART_SetConfig+0x12e6>
 800941a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800941e:	e016      	b.n	800944e <UART_SetConfig+0x12e6>
 8009420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009424:	e013      	b.n	800944e <UART_SetConfig+0x12e6>
 8009426:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800942a:	e010      	b.n	800944e <UART_SetConfig+0x12e6>
 800942c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009430:	e00d      	b.n	800944e <UART_SetConfig+0x12e6>
 8009432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009436:	e00a      	b.n	800944e <UART_SetConfig+0x12e6>
 8009438:	f241 5355 	movw	r3, #5461	; 0x1555
 800943c:	e007      	b.n	800944e <UART_SetConfig+0x12e6>
 800943e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009442:	e004      	b.n	800944e <UART_SetConfig+0x12e6>
 8009444:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009448:	e001      	b.n	800944e <UART_SetConfig+0x12e6>
 800944a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	6852      	ldr	r2, [r2, #4]
 8009452:	0852      	lsrs	r2, r2, #1
 8009454:	441a      	add	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	fbb2 f3f3 	udiv	r3, r2, r3
 800945e:	b29b      	uxth	r3, r3
 8009460:	61fb      	str	r3, [r7, #28]
        break;
 8009462:	e002      	b.n	800946a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	76fb      	strb	r3, [r7, #27]
        break;
 8009468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	2b0f      	cmp	r3, #15
 800946e:	d908      	bls.n	8009482 <UART_SetConfig+0x131a>
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009476:	d204      	bcs.n	8009482 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	69fa      	ldr	r2, [r7, #28]
 800947e:	60da      	str	r2, [r3, #12]
 8009480:	e001      	b.n	8009486 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80094a2:	7efb      	ldrb	r3, [r7, #27]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3728      	adds	r7, #40	; 0x28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80094ae:	bf00      	nop
 80094b0:	00f42400 	.word	0x00f42400
 80094b4:	0001e848 	.word	0x0001e848
 80094b8:	0003d090 	.word	0x0003d090
 80094bc:	0007a120 	.word	0x0007a120
 80094c0:	000f4240 	.word	0x000f4240
 80094c4:	00145855 	.word	0x00145855
 80094c8:	00186a00 	.word	0x00186a00
 80094cc:	001e8480 	.word	0x001e8480
 80094d0:	0028b0aa 	.word	0x0028b0aa
 80094d4:	003d0900 	.word	0x003d0900
 80094d8:	007a1200 	.word	0x007a1200

080094dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00a      	beq.n	8009506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	430a      	orrs	r2, r1
 8009504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	430a      	orrs	r2, r1
 8009526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00a      	beq.n	800954a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	430a      	orrs	r2, r1
 800956a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009570:	f003 0310 	and.w	r3, r3, #16
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00a      	beq.n	800958e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d01a      	beq.n	80095f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095da:	d10a      	bne.n	80095f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00a      	beq.n	8009614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	430a      	orrs	r2, r1
 8009612:	605a      	str	r2, [r3, #4]
  }
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af02      	add	r7, sp, #8
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009630:	f7f9 fa92 	bl	8002b58 <HAL_GetTick>
 8009634:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0308 	and.w	r3, r3, #8
 8009640:	2b08      	cmp	r3, #8
 8009642:	d10e      	bne.n	8009662 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f82c 	bl	80096b0 <UART_WaitOnFlagUntilTimeout>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e022      	b.n	80096a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0304 	and.w	r3, r3, #4
 800966c:	2b04      	cmp	r3, #4
 800966e:	d10e      	bne.n	800968e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f816 	bl	80096b0 <UART_WaitOnFlagUntilTimeout>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e00c      	b.n	80096a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	4613      	mov	r3, r2
 80096be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096c0:	e02c      	b.n	800971c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c8:	d028      	beq.n	800971c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ca:	f7f9 fa45 	bl	8002b58 <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	69ba      	ldr	r2, [r7, #24]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d302      	bcc.n	80096e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d11d      	bne.n	800971c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2220      	movs	r2, #32
 8009704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2220      	movs	r2, #32
 800970c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e00f      	b.n	800973c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69da      	ldr	r2, [r3, #28]
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	4013      	ands	r3, r2
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	429a      	cmp	r2, r3
 800972a:	bf0c      	ite	eq
 800972c:	2301      	moveq	r3, #1
 800972e:	2300      	movne	r3, #0
 8009730:	b2db      	uxtb	r3, r3
 8009732:	461a      	mov	r2, r3
 8009734:	79fb      	ldrb	r3, [r7, #7]
 8009736:	429a      	cmp	r2, r3
 8009738:	d0c3      	beq.n	80096c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800975a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6812      	ldr	r2, [r2, #0]
 8009766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800976a:	f023 0301 	bic.w	r3, r3, #1
 800976e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2220      	movs	r2, #32
 8009774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800977e:	bf00      	nop
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7fe fcd3 	bl	8008154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097ae:	bf00      	nop
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097cc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2220      	movs	r2, #32
 80097d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7fe fcaf 	bl	8008140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097f8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009800:	2b22      	cmp	r3, #34	; 0x22
 8009802:	d13b      	bne.n	800987c <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800980c:	89bb      	ldrh	r3, [r7, #12]
 800980e:	b2d9      	uxtb	r1, r3
 8009810:	89fb      	ldrh	r3, [r7, #14]
 8009812:	b2da      	uxtb	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009818:	400a      	ands	r2, r1
 800981a:	b2d2      	uxtb	r2, r2
 800981c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800982e:	b29b      	uxth	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009840:	b29b      	uxth	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d122      	bne.n	800988c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009854:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0201 	bic.w	r2, r2, #1
 8009864:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7f8 fbed 	bl	8002054 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800987a:	e007      	b.n	800988c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699a      	ldr	r2, [r3, #24]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f042 0208 	orr.w	r2, r2, #8
 800988a:	619a      	str	r2, [r3, #24]
}
 800988c:	bf00      	nop
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098aa:	2b22      	cmp	r3, #34	; 0x22
 80098ac:	d13b      	bne.n	8009926 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ba:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80098bc:	89ba      	ldrh	r2, [r7, #12]
 80098be:	89fb      	ldrh	r3, [r7, #14]
 80098c0:	4013      	ands	r3, r2
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098cc:	1c9a      	adds	r2, r3, #2
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098d8:	b29b      	uxth	r3, r3
 80098da:	3b01      	subs	r3, #1
 80098dc:	b29a      	uxth	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d122      	bne.n	8009936 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098fe:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689a      	ldr	r2, [r3, #8]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 0201 	bic.w	r2, r2, #1
 800990e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2220      	movs	r2, #32
 8009914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7f8 fb98 	bl	8002054 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009924:	e007      	b.n	8009936 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	699a      	ldr	r2, [r3, #24]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0208 	orr.w	r2, r2, #8
 8009934:	619a      	str	r2, [r3, #24]
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800994e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009956:	2b22      	cmp	r3, #34	; 0x22
 8009958:	d168      	bne.n	8009a2c <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009960:	81fb      	strh	r3, [r7, #14]
 8009962:	e03f      	b.n	80099e4 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800996c:	893b      	ldrh	r3, [r7, #8]
 800996e:	b2d9      	uxtb	r1, r3
 8009970:	89bb      	ldrh	r3, [r7, #12]
 8009972:	b2da      	uxtb	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009978:	400a      	ands	r2, r1
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b01      	subs	r3, #1
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d11b      	bne.n	80099de <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099b4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099c4:	f023 0301 	bic.w	r3, r3, #1
 80099c8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7f8 fb3b 	bl	8002054 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80099de:	89fb      	ldrh	r3, [r7, #14]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	81fb      	strh	r3, [r7, #14]
 80099e4:	89fb      	ldrh	r3, [r7, #14]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1bc      	bne.n	8009964 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099f0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099f2:	897b      	ldrh	r3, [r7, #10]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d021      	beq.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0xfc>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099fe:	897a      	ldrh	r2, [r7, #10]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d21b      	bcs.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009a12:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a0b      	ldr	r2, [pc, #44]	; (8009a44 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8009a18:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0220 	orr.w	r2, r2, #32
 8009a28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a2a:	e007      	b.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0208 	orr.w	r2, r2, #8
 8009a3a:	619a      	str	r2, [r3, #24]
}
 8009a3c:	bf00      	nop
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	080097eb 	.word	0x080097eb

08009a48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a56:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a5e:	2b22      	cmp	r3, #34	; 0x22
 8009a60:	d168      	bne.n	8009b34 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a68:	82fb      	strh	r3, [r7, #22]
 8009a6a:	e03f      	b.n	8009aec <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a78:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a7a:	8a3a      	ldrh	r2, [r7, #16]
 8009a7c:	8abb      	ldrh	r3, [r7, #20]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8a:	1c9a      	adds	r2, r3, #2
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d11b      	bne.n	8009ae6 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009abc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	6812      	ldr	r2, [r2, #0]
 8009ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009acc:	f023 0301 	bic.w	r3, r3, #1
 8009ad0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7f8 fab7 	bl	8002054 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009ae6:	8afb      	ldrh	r3, [r7, #22]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	82fb      	strh	r3, [r7, #22]
 8009aec:	8afb      	ldrh	r3, [r7, #22]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1bc      	bne.n	8009a6c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009af8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009afa:	8a7b      	ldrh	r3, [r7, #18]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d021      	beq.n	8009b44 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b06:	8a7a      	ldrh	r2, [r7, #18]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d21b      	bcs.n	8009b44 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689a      	ldr	r2, [r3, #8]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009b1a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a0b      	ldr	r2, [pc, #44]	; (8009b4c <UART_RxISR_16BIT_FIFOEN+0x104>)
 8009b20:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f042 0220 	orr.w	r2, r2, #32
 8009b30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b32:	e007      	b.n	8009b44 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	699a      	ldr	r2, [r3, #24]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0208 	orr.w	r2, r2, #8
 8009b42:	619a      	str	r2, [r3, #24]
}
 8009b44:	bf00      	nop
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	08009895 	.word	0x08009895

08009b50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d101      	bne.n	8009ba2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	e027      	b.n	8009bf2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2224      	movs	r2, #36	; 0x24
 8009bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f022 0201 	bic.w	r2, r2, #1
 8009bc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009bd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c12:	2302      	movs	r3, #2
 8009c14:	e02d      	b.n	8009c72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2224      	movs	r2, #36	; 0x24
 8009c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0201 	bic.w	r2, r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f850 	bl	8009cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d101      	bne.n	8009c92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e02d      	b.n	8009cee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2224      	movs	r2, #36	; 0x24
 8009c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f022 0201 	bic.w	r2, r2, #1
 8009cb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	430a      	orrs	r2, r1
 8009ccc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f812 	bl	8009cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b089      	sub	sp, #36	; 0x24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009d00:	4a2f      	ldr	r2, [pc, #188]	; (8009dc0 <UARTEx_SetNbDataToProcess+0xc8>)
 8009d02:	f107 0314 	add.w	r3, r7, #20
 8009d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d0a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009d0e:	4a2d      	ldr	r2, [pc, #180]	; (8009dc4 <UARTEx_SetNbDataToProcess+0xcc>)
 8009d10:	f107 030c 	add.w	r3, r7, #12
 8009d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d18:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d108      	bne.n	8009d36 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d34:	e03d      	b.n	8009db2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d36:	2308      	movs	r3, #8
 8009d38:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d3a:	2308      	movs	r3, #8
 8009d3c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	0e5b      	lsrs	r3, r3, #25
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 0307 	and.w	r3, r3, #7
 8009d4c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	0f5b      	lsrs	r3, r3, #29
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f003 0307 	and.w	r3, r3, #7
 8009d5c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d5e:	7fbb      	ldrb	r3, [r7, #30]
 8009d60:	7f3a      	ldrb	r2, [r7, #28]
 8009d62:	f107 0120 	add.w	r1, r7, #32
 8009d66:	440a      	add	r2, r1
 8009d68:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d6c:	fb02 f303 	mul.w	r3, r2, r3
 8009d70:	7f3a      	ldrb	r2, [r7, #28]
 8009d72:	f107 0120 	add.w	r1, r7, #32
 8009d76:	440a      	add	r2, r1
 8009d78:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009d7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d88:	7ffb      	ldrb	r3, [r7, #31]
 8009d8a:	7f7a      	ldrb	r2, [r7, #29]
 8009d8c:	f107 0120 	add.w	r1, r7, #32
 8009d90:	440a      	add	r2, r1
 8009d92:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d96:	fb02 f303 	mul.w	r3, r2, r3
 8009d9a:	7f7a      	ldrb	r2, [r7, #29]
 8009d9c:	f107 0120 	add.w	r1, r7, #32
 8009da0:	440a      	add	r2, r1
 8009da2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009da6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009db2:	bf00      	nop
 8009db4:	3724      	adds	r7, #36	; 0x24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	0800a680 	.word	0x0800a680
 8009dc4:	0800a688 	.word	0x0800a688

08009dc8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	ed93 7a06 	vldr	s14, [r3, #24]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	edd3 7a07 	vldr	s15, [r3, #28]
 8009dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	edd3 7a08 	vldr	s15, [r3, #32]
 8009de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	edd3 7a06 	vldr	s15, [r3, #24]
 8009df8:	eeb1 7a67 	vneg.f32	s14, s15
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	edd3 7a08 	vldr	s15, [r3, #32]
 8009e02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a1a      	ldr	r2, [r3, #32]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d006      	beq.n	8009e2c <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	330c      	adds	r3, #12
 8009e22:	220c      	movs	r2, #12
 8009e24:	2100      	movs	r1, #0
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 fa34 	bl	800a294 <memset>
  }

}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <arm_sin_cos_f32>:

void arm_sin_cos_f32(
                      float32_t theta,
                      float32_t * pSinVal,
                      float32_t * pCosVal)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b091      	sub	sp, #68	; 0x44
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8009e3e:	60b8      	str	r0, [r7, #8]
 8009e40:	6079      	str	r1, [r7, #4]
    float32_t f1, f2, d1, d2;                        /* Two nearest output values */
    float32_t findex, Dn, Df, temp;

    /* input x is in degrees */
    /* Scale the input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
    in = theta * 0.00277777777778f;
 8009e42:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e46:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800a118 <arm_sin_cos_f32+0x2e4>
 8009e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e4e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if (in < 0.0f)
 8009e52:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009e56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5e:	d505      	bpl.n	8009e6c <arm_sin_cos_f32+0x38>
    {
        in = -in;
 8009e60:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009e64:	eef1 7a67 	vneg.f32	s15, s15
 8009e68:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    in = in - (int32_t)in;
 8009e6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculation of index of the table */
    findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8009e84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009e88:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800a11c <arm_sin_cos_f32+0x2e8>
 8009e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e90:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    indexS = ((uint16_t)findex) & 0x1ff;
 8009e94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e9c:	ee17 3a90 	vmov	r3, s15
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea6:	86fb      	strh	r3, [r7, #54]	; 0x36
    indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
 8009ea8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009eaa:	3380      	adds	r3, #128	; 0x80
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb2:	86bb      	strh	r3, [r7, #52]	; 0x34

    /* fractional value calculation */
    fract = findex - (float32_t) indexS;
 8009eb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ebe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ec6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexC+0];
 8009eca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009ecc:	4a94      	ldr	r2, [pc, #592]	; (800a120 <arm_sin_cos_f32+0x2ec>)
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexC+1];
 8009ed6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009ed8:	3301      	adds	r3, #1
 8009eda:	4a91      	ldr	r2, [pc, #580]	; (800a120 <arm_sin_cos_f32+0x2ec>)
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = -sinTable_f32[indexS+0];
 8009ee4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ee6:	4a8e      	ldr	r2, [pc, #568]	; (800a120 <arm_sin_cos_f32+0x2ec>)
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	edd3 7a00 	vldr	s15, [r3]
 8009ef0:	eef1 7a67 	vneg.f32	s15, s15
 8009ef4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    d2 = -sinTable_f32[indexS+1];
 8009ef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009efa:	3301      	adds	r3, #1
 8009efc:	4a88      	ldr	r2, [pc, #544]	; (800a120 <arm_sin_cos_f32+0x2ec>)
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	edd3 7a00 	vldr	s15, [r3]
 8009f06:	eef1 7a67 	vneg.f32	s15, s15
 8009f0a:	edc7 7a08 	vstr	s15, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 8009f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009f16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f22:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009f26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f32:	edc7 7a07 	vstr	s15, [r7, #28]

    Dn = 0.0122718463030f; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
 8009f36:	4b7b      	ldr	r3, [pc, #492]	; (800a124 <arm_sin_cos_f32+0x2f0>)
 8009f38:	61bb      	str	r3, [r7, #24]
    Df = f2 - f1;          // delta between the values of the functions
 8009f3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f3e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f46:	edc7 7a05 	vstr	s15, [r7, #20]

    temp = Dn *(d1 + d2) - 2 * Df;
 8009f4a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009f4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f56:	edd7 7a06 	vldr	s15, [r7, #24]
 8009f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f6a:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 8009f6e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009f72:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f7e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8009f82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009f86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009f8a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8009f8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f92:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009f96:	edd7 7a06 	vldr	s15, [r7, #24]
 8009f9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009f9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fa6:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + d1 * Dn;
 8009faa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009fae:	edd7 7a07 	vldr	s15, [r7, #28]
 8009fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fb6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009fba:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fc6:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of cosine value */
    *pCosVal = fract * temp + f1;
 8009fca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009fce:	edd7 7a07 	vldr	s15, [r7, #28]
 8009fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fd6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	edc3 7a00 	vstr	s15, [r3]

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexS+0];
 8009fe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009fe6:	4a4e      	ldr	r2, [pc, #312]	; (800a120 <arm_sin_cos_f32+0x2ec>)
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexS+1];
 8009ff0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	4a4a      	ldr	r2, [pc, #296]	; (800a120 <arm_sin_cos_f32+0x2ec>)
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4413      	add	r3, r2
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = sinTable_f32[indexC+0];
 8009ffe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a000:	4a47      	ldr	r2, [pc, #284]	; (800a120 <arm_sin_cos_f32+0x2ec>)
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	627b      	str	r3, [r7, #36]	; 0x24
    d2 = sinTable_f32[indexC+1];
 800a00a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a00c:	3301      	adds	r3, #1
 800a00e:	4a44      	ldr	r2, [pc, #272]	; (800a120 <arm_sin_cos_f32+0x2ec>)
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	623b      	str	r3, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 800a018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a01c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a020:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a024:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a02c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a030:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a03c:	edc7 7a07 	vstr	s15, [r7, #28]

    Df = f2 - f1; // delta between the values of the functions
 800a040:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a044:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a04c:	edc7 7a05 	vstr	s15, [r7, #20]
    temp = Dn*(d1 + d2) - 2*Df;
 800a050:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a054:	edd7 7a08 	vldr	s15, [r7, #32]
 800a058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a05c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a060:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a064:	edd7 7a05 	vldr	s15, [r7, #20]
 800a068:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a06c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a070:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + (3*Df - (d2 + 2*d1)*Dn);
 800a074:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a078:	edd7 7a07 	vldr	s15, [r7, #28]
 800a07c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a080:	edd7 7a05 	vldr	s15, [r7, #20]
 800a084:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800a088:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a08c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a090:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800a094:	edd7 7a08 	vldr	s15, [r7, #32]
 800a098:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a09c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a0a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a0a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0ac:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + d1*Dn;
 800a0b0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a0b4:	edd7 7a07 	vldr	s15, [r7, #28]
 800a0b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0bc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a0c0:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0cc:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of sine value */
    *pSinVal = fract*temp + f1;
 800a0d0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a0d4:	edd7 7a07 	vldr	s15, [r7, #28]
 800a0d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a0e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	edc3 7a00 	vstr	s15, [r3]

    if (theta < 0.0f)
 800a0ea:	edd7 7a03 	vldr	s15, [r7, #12]
 800a0ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f6:	d400      	bmi.n	800a0fa <arm_sin_cos_f32+0x2c6>
    {
        *pSinVal = -*pSinVal;
    }
}
 800a0f8:	e007      	b.n	800a10a <arm_sin_cos_f32+0x2d6>
        *pSinVal = -*pSinVal;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	edd3 7a00 	vldr	s15, [r3]
 800a100:	eef1 7a67 	vneg.f32	s15, s15
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	edc3 7a00 	vstr	s15, [r3]
}
 800a10a:	bf00      	nop
 800a10c:	3744      	adds	r7, #68	; 0x44
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	3b360b61 	.word	0x3b360b61
 800a11c:	44000000 	.word	0x44000000
 800a120:	0800a6a8 	.word	0x0800a6a8
 800a124:	3c490fdb 	.word	0x3c490fdb

0800a128 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800a128:	b480      	push	{r7}
 800a12a:	b08b      	sub	sp, #44	; 0x2c
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 800a132:	edd7 7a01 	vldr	s15, [r7, #4]
 800a136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13e:	d50a      	bpl.n	800a156 <arm_sin_f32+0x2e>
 800a140:	edd7 7a01 	vldr	s15, [r7, #4]
 800a144:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800a230 <arm_sin_f32+0x108>
 800a148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a150:	db01      	blt.n	800a156 <arm_sin_f32+0x2e>
     return x;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	e062      	b.n	800a21c <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800a156:	edd7 7a01 	vldr	s15, [r7, #4]
 800a15a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a234 <arm_sin_f32+0x10c>
 800a15e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a162:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800a166:	edd7 7a08 	vldr	s15, [r7, #32]
 800a16a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a16e:	ee17 3a90 	vmov	r3, s15
 800a172:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 800a174:	edd7 7a01 	vldr	s15, [r7, #4]
 800a178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a180:	d502      	bpl.n	800a188 <arm_sin_f32+0x60>
  {
    n--;
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	3b01      	subs	r3, #1
 800a186:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a192:	ed97 7a08 	vldr	s14, [r7, #32]
 800a196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a19a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800a19e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a1a2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a238 <arm_sin_f32+0x110>
 800a1a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1aa:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 800a1ae:	edd7 7a07 	vldr	s15, [r7, #28]
 800a1b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1b6:	ee17 3a90 	vmov	r3, s15
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c0:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800a1c2:	8b7b      	ldrh	r3, [r7, #26]
 800a1c4:	ee07 3a90 	vmov	s15, r3
 800a1c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1cc:	ed97 7a07 	vldr	s14, [r7, #28]
 800a1d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1d4:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800a1d8:	8b7b      	ldrh	r3, [r7, #26]
 800a1da:	4a18      	ldr	r2, [pc, #96]	; (800a23c <arm_sin_f32+0x114>)
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800a1e4:	8b7b      	ldrh	r3, [r7, #26]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	4a14      	ldr	r2, [pc, #80]	; (800a23c <arm_sin_f32+0x114>)
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800a1f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1f6:	edd7 7a05 	vldr	s15, [r7, #20]
 800a1fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800a202:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a206:	edd7 6a05 	vldr	s13, [r7, #20]
 800a20a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a20e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a212:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a216:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	ee07 3a90 	vmov	s15, r3
}
 800a220:	eeb0 0a67 	vmov.f32	s0, s15
 800a224:	372c      	adds	r7, #44	; 0x2c
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	b44c02cd 	.word	0xb44c02cd
 800a234:	3e22f983 	.word	0x3e22f983
 800a238:	44000000 	.word	0x44000000
 800a23c:	0800a6a8 	.word	0x0800a6a8

0800a240 <__errno>:
 800a240:	4b01      	ldr	r3, [pc, #4]	; (800a248 <__errno+0x8>)
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	2000000c 	.word	0x2000000c

0800a24c <__libc_init_array>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	4e0d      	ldr	r6, [pc, #52]	; (800a284 <__libc_init_array+0x38>)
 800a250:	4c0d      	ldr	r4, [pc, #52]	; (800a288 <__libc_init_array+0x3c>)
 800a252:	1ba4      	subs	r4, r4, r6
 800a254:	10a4      	asrs	r4, r4, #2
 800a256:	2500      	movs	r5, #0
 800a258:	42a5      	cmp	r5, r4
 800a25a:	d109      	bne.n	800a270 <__libc_init_array+0x24>
 800a25c:	4e0b      	ldr	r6, [pc, #44]	; (800a28c <__libc_init_array+0x40>)
 800a25e:	4c0c      	ldr	r4, [pc, #48]	; (800a290 <__libc_init_array+0x44>)
 800a260:	f000 fa02 	bl	800a668 <_init>
 800a264:	1ba4      	subs	r4, r4, r6
 800a266:	10a4      	asrs	r4, r4, #2
 800a268:	2500      	movs	r5, #0
 800a26a:	42a5      	cmp	r5, r4
 800a26c:	d105      	bne.n	800a27a <__libc_init_array+0x2e>
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a274:	4798      	blx	r3
 800a276:	3501      	adds	r5, #1
 800a278:	e7ee      	b.n	800a258 <__libc_init_array+0xc>
 800a27a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a27e:	4798      	blx	r3
 800a280:	3501      	adds	r5, #1
 800a282:	e7f2      	b.n	800a26a <__libc_init_array+0x1e>
 800a284:	0800aedc 	.word	0x0800aedc
 800a288:	0800aedc 	.word	0x0800aedc
 800a28c:	0800aedc 	.word	0x0800aedc
 800a290:	0800aee0 	.word	0x0800aee0

0800a294 <memset>:
 800a294:	4402      	add	r2, r0
 800a296:	4603      	mov	r3, r0
 800a298:	4293      	cmp	r3, r2
 800a29a:	d100      	bne.n	800a29e <memset+0xa>
 800a29c:	4770      	bx	lr
 800a29e:	f803 1b01 	strb.w	r1, [r3], #1
 800a2a2:	e7f9      	b.n	800a298 <memset+0x4>

0800a2a4 <atan2f>:
 800a2a4:	f000 b850 	b.w	800a348 <__ieee754_atan2f>

0800a2a8 <sqrtf>:
 800a2a8:	b510      	push	{r4, lr}
 800a2aa:	ed2d 8b02 	vpush	{d8}
 800a2ae:	b08a      	sub	sp, #40	; 0x28
 800a2b0:	eeb0 8a40 	vmov.f32	s16, s0
 800a2b4:	f000 f8f6 	bl	800a4a4 <__ieee754_sqrtf>
 800a2b8:	4b21      	ldr	r3, [pc, #132]	; (800a340 <sqrtf+0x98>)
 800a2ba:	f993 4000 	ldrsb.w	r4, [r3]
 800a2be:	1c63      	adds	r3, r4, #1
 800a2c0:	d02c      	beq.n	800a31c <sqrtf+0x74>
 800a2c2:	eeb4 8a48 	vcmp.f32	s16, s16
 800a2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ca:	d627      	bvs.n	800a31c <sqrtf+0x74>
 800a2cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d4:	d522      	bpl.n	800a31c <sqrtf+0x74>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	4b1a      	ldr	r3, [pc, #104]	; (800a344 <sqrtf+0x9c>)
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	ee18 0a10 	vmov	r0, s16
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	9308      	str	r3, [sp, #32]
 800a2e6:	f7f6 f8fb 	bl	80004e0 <__aeabi_f2d>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	b9ac      	cbnz	r4, 800a324 <sqrtf+0x7c>
 800a2f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a2fc:	4668      	mov	r0, sp
 800a2fe:	f000 f8d4 	bl	800a4aa <matherr>
 800a302:	b1b8      	cbz	r0, 800a334 <sqrtf+0x8c>
 800a304:	9b08      	ldr	r3, [sp, #32]
 800a306:	b11b      	cbz	r3, 800a310 <sqrtf+0x68>
 800a308:	f7ff ff9a 	bl	800a240 <__errno>
 800a30c:	9b08      	ldr	r3, [sp, #32]
 800a30e:	6003      	str	r3, [r0, #0]
 800a310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a314:	f7f6 fbd6 	bl	8000ac4 <__aeabi_d2f>
 800a318:	ee00 0a10 	vmov	s0, r0
 800a31c:	b00a      	add	sp, #40	; 0x28
 800a31e:	ecbd 8b02 	vpop	{d8}
 800a322:	bd10      	pop	{r4, pc}
 800a324:	4610      	mov	r0, r2
 800a326:	4619      	mov	r1, r3
 800a328:	f7f6 fa5c 	bl	80007e4 <__aeabi_ddiv>
 800a32c:	2c02      	cmp	r4, #2
 800a32e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a332:	d1e3      	bne.n	800a2fc <sqrtf+0x54>
 800a334:	f7ff ff84 	bl	800a240 <__errno>
 800a338:	2321      	movs	r3, #33	; 0x21
 800a33a:	6003      	str	r3, [r0, #0]
 800a33c:	e7e2      	b.n	800a304 <sqrtf+0x5c>
 800a33e:	bf00      	nop
 800a340:	20000070 	.word	0x20000070
 800a344:	0800aeac 	.word	0x0800aeac

0800a348 <__ieee754_atan2f>:
 800a348:	ee10 2a90 	vmov	r2, s1
 800a34c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a350:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a354:	b510      	push	{r4, lr}
 800a356:	eef0 7a40 	vmov.f32	s15, s0
 800a35a:	dc06      	bgt.n	800a36a <__ieee754_atan2f+0x22>
 800a35c:	ee10 0a10 	vmov	r0, s0
 800a360:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a364:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a368:	dd04      	ble.n	800a374 <__ieee754_atan2f+0x2c>
 800a36a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a36e:	eeb0 0a67 	vmov.f32	s0, s15
 800a372:	bd10      	pop	{r4, pc}
 800a374:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a378:	d103      	bne.n	800a382 <__ieee754_atan2f+0x3a>
 800a37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a37e:	f000 b897 	b.w	800a4b0 <atanf>
 800a382:	1794      	asrs	r4, r2, #30
 800a384:	f004 0402 	and.w	r4, r4, #2
 800a388:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a38c:	b943      	cbnz	r3, 800a3a0 <__ieee754_atan2f+0x58>
 800a38e:	2c02      	cmp	r4, #2
 800a390:	d06e      	beq.n	800a470 <__ieee754_atan2f+0x128>
 800a392:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a478 <__ieee754_atan2f+0x130>
 800a396:	2c03      	cmp	r4, #3
 800a398:	bf08      	it	eq
 800a39a:	eef0 7a47 	vmoveq.f32	s15, s14
 800a39e:	e7e6      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a3a0:	b941      	cbnz	r1, 800a3b4 <__ieee754_atan2f+0x6c>
 800a3a2:	eddf 7a36 	vldr	s15, [pc, #216]	; 800a47c <__ieee754_atan2f+0x134>
 800a3a6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a480 <__ieee754_atan2f+0x138>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	bfb8      	it	lt
 800a3ae:	eef0 7a47 	vmovlt.f32	s15, s14
 800a3b2:	e7dc      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a3b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a3b8:	d122      	bne.n	800a400 <__ieee754_atan2f+0xb8>
 800a3ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a3be:	d112      	bne.n	800a3e6 <__ieee754_atan2f+0x9e>
 800a3c0:	2c02      	cmp	r4, #2
 800a3c2:	d00a      	beq.n	800a3da <__ieee754_atan2f+0x92>
 800a3c4:	2c03      	cmp	r4, #3
 800a3c6:	d00b      	beq.n	800a3e0 <__ieee754_atan2f+0x98>
 800a3c8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800a484 <__ieee754_atan2f+0x13c>
 800a3cc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800a488 <__ieee754_atan2f+0x140>
 800a3d0:	2c01      	cmp	r4, #1
 800a3d2:	bf18      	it	ne
 800a3d4:	eef0 7a47 	vmovne.f32	s15, s14
 800a3d8:	e7c9      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a3da:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800a48c <__ieee754_atan2f+0x144>
 800a3de:	e7c6      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a3e0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a490 <__ieee754_atan2f+0x148>
 800a3e4:	e7c3      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a3e6:	2c02      	cmp	r4, #2
 800a3e8:	d042      	beq.n	800a470 <__ieee754_atan2f+0x128>
 800a3ea:	2c03      	cmp	r4, #3
 800a3ec:	d005      	beq.n	800a3fa <__ieee754_atan2f+0xb2>
 800a3ee:	2c01      	cmp	r4, #1
 800a3f0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a494 <__ieee754_atan2f+0x14c>
 800a3f4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a498 <__ieee754_atan2f+0x150>
 800a3f8:	e7eb      	b.n	800a3d2 <__ieee754_atan2f+0x8a>
 800a3fa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a478 <__ieee754_atan2f+0x130>
 800a3fe:	e7b6      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a400:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a404:	d0cd      	beq.n	800a3a2 <__ieee754_atan2f+0x5a>
 800a406:	1a5b      	subs	r3, r3, r1
 800a408:	15db      	asrs	r3, r3, #23
 800a40a:	2b3c      	cmp	r3, #60	; 0x3c
 800a40c:	dc1a      	bgt.n	800a444 <__ieee754_atan2f+0xfc>
 800a40e:	2a00      	cmp	r2, #0
 800a410:	da01      	bge.n	800a416 <__ieee754_atan2f+0xce>
 800a412:	333c      	adds	r3, #60	; 0x3c
 800a414:	db19      	blt.n	800a44a <__ieee754_atan2f+0x102>
 800a416:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a41a:	f000 f91d 	bl	800a658 <fabsf>
 800a41e:	f000 f847 	bl	800a4b0 <atanf>
 800a422:	eef0 7a40 	vmov.f32	s15, s0
 800a426:	2c01      	cmp	r4, #1
 800a428:	d012      	beq.n	800a450 <__ieee754_atan2f+0x108>
 800a42a:	2c02      	cmp	r4, #2
 800a42c:	d017      	beq.n	800a45e <__ieee754_atan2f+0x116>
 800a42e:	2c00      	cmp	r4, #0
 800a430:	d09d      	beq.n	800a36e <__ieee754_atan2f+0x26>
 800a432:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a49c <__ieee754_atan2f+0x154>
 800a436:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a43a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a4a0 <__ieee754_atan2f+0x158>
 800a43e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a442:	e794      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a444:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a47c <__ieee754_atan2f+0x134>
 800a448:	e7ed      	b.n	800a426 <__ieee754_atan2f+0xde>
 800a44a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800a498 <__ieee754_atan2f+0x150>
 800a44e:	e7ea      	b.n	800a426 <__ieee754_atan2f+0xde>
 800a450:	ee17 3a90 	vmov	r3, s15
 800a454:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a458:	ee07 3a90 	vmov	s15, r3
 800a45c:	e787      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a45e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a49c <__ieee754_atan2f+0x154>
 800a462:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a466:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a4a0 <__ieee754_atan2f+0x158>
 800a46a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a46e:	e77e      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a470:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a4a0 <__ieee754_atan2f+0x158>
 800a474:	e77b      	b.n	800a36e <__ieee754_atan2f+0x26>
 800a476:	bf00      	nop
 800a478:	c0490fdb 	.word	0xc0490fdb
 800a47c:	3fc90fdb 	.word	0x3fc90fdb
 800a480:	bfc90fdb 	.word	0xbfc90fdb
 800a484:	bf490fdb 	.word	0xbf490fdb
 800a488:	3f490fdb 	.word	0x3f490fdb
 800a48c:	4016cbe4 	.word	0x4016cbe4
 800a490:	c016cbe4 	.word	0xc016cbe4
 800a494:	80000000 	.word	0x80000000
 800a498:	00000000 	.word	0x00000000
 800a49c:	33bbbd2e 	.word	0x33bbbd2e
 800a4a0:	40490fdb 	.word	0x40490fdb

0800a4a4 <__ieee754_sqrtf>:
 800a4a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a4a8:	4770      	bx	lr

0800a4aa <matherr>:
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	4770      	bx	lr
	...

0800a4b0 <atanf>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	ee10 5a10 	vmov	r5, s0
 800a4b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a4ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a4be:	eef0 7a40 	vmov.f32	s15, s0
 800a4c2:	db10      	blt.n	800a4e6 <atanf+0x36>
 800a4c4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a4c8:	dd04      	ble.n	800a4d4 <atanf+0x24>
 800a4ca:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a4ce:	eeb0 0a67 	vmov.f32	s0, s15
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a60c <atanf+0x15c>
 800a4d8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a610 <atanf+0x160>
 800a4dc:	2d00      	cmp	r5, #0
 800a4de:	bfd8      	it	le
 800a4e0:	eef0 7a47 	vmovle.f32	s15, s14
 800a4e4:	e7f3      	b.n	800a4ce <atanf+0x1e>
 800a4e6:	4b4b      	ldr	r3, [pc, #300]	; (800a614 <atanf+0x164>)
 800a4e8:	429c      	cmp	r4, r3
 800a4ea:	dc10      	bgt.n	800a50e <atanf+0x5e>
 800a4ec:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a4f0:	da0a      	bge.n	800a508 <atanf+0x58>
 800a4f2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a618 <atanf+0x168>
 800a4f6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4fe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a506:	dce2      	bgt.n	800a4ce <atanf+0x1e>
 800a508:	f04f 33ff 	mov.w	r3, #4294967295
 800a50c:	e013      	b.n	800a536 <atanf+0x86>
 800a50e:	f000 f8a3 	bl	800a658 <fabsf>
 800a512:	4b42      	ldr	r3, [pc, #264]	; (800a61c <atanf+0x16c>)
 800a514:	429c      	cmp	r4, r3
 800a516:	dc4f      	bgt.n	800a5b8 <atanf+0x108>
 800a518:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a51c:	429c      	cmp	r4, r3
 800a51e:	dc41      	bgt.n	800a5a4 <atanf+0xf4>
 800a520:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a524:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a528:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a52c:	2300      	movs	r3, #0
 800a52e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a532:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a53c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a620 <atanf+0x170>
 800a540:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a624 <atanf+0x174>
 800a544:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a628 <atanf+0x178>
 800a548:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a54c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a550:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a62c <atanf+0x17c>
 800a554:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a558:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a630 <atanf+0x180>
 800a55c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a560:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a634 <atanf+0x184>
 800a564:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a568:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a638 <atanf+0x188>
 800a56c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a570:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a63c <atanf+0x18c>
 800a574:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a578:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a640 <atanf+0x190>
 800a57c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a580:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a644 <atanf+0x194>
 800a584:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a588:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a648 <atanf+0x198>
 800a58c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a590:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a594:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a59c:	d121      	bne.n	800a5e2 <atanf+0x132>
 800a59e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5a2:	e794      	b.n	800a4ce <atanf+0x1e>
 800a5a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a5a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a5ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a5b6:	e7be      	b.n	800a536 <atanf+0x86>
 800a5b8:	4b24      	ldr	r3, [pc, #144]	; (800a64c <atanf+0x19c>)
 800a5ba:	429c      	cmp	r4, r3
 800a5bc:	dc0b      	bgt.n	800a5d6 <atanf+0x126>
 800a5be:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a5c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5c6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a5d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5d4:	e7af      	b.n	800a536 <atanf+0x86>
 800a5d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a5da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e7a9      	b.n	800a536 <atanf+0x86>
 800a5e2:	4a1b      	ldr	r2, [pc, #108]	; (800a650 <atanf+0x1a0>)
 800a5e4:	491b      	ldr	r1, [pc, #108]	; (800a654 <atanf+0x1a4>)
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	441a      	add	r2, r3
 800a5ea:	440b      	add	r3, r1
 800a5ec:	edd3 6a00 	vldr	s13, [r3]
 800a5f0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a5f4:	2d00      	cmp	r5, #0
 800a5f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5fa:	ed92 7a00 	vldr	s14, [r2]
 800a5fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a602:	bfb8      	it	lt
 800a604:	eef1 7a67 	vneglt.f32	s15, s15
 800a608:	e761      	b.n	800a4ce <atanf+0x1e>
 800a60a:	bf00      	nop
 800a60c:	bfc90fdb 	.word	0xbfc90fdb
 800a610:	3fc90fdb 	.word	0x3fc90fdb
 800a614:	3edfffff 	.word	0x3edfffff
 800a618:	7149f2ca 	.word	0x7149f2ca
 800a61c:	3f97ffff 	.word	0x3f97ffff
 800a620:	3c8569d7 	.word	0x3c8569d7
 800a624:	3d4bda59 	.word	0x3d4bda59
 800a628:	bd6ef16b 	.word	0xbd6ef16b
 800a62c:	3d886b35 	.word	0x3d886b35
 800a630:	3dba2e6e 	.word	0x3dba2e6e
 800a634:	3e124925 	.word	0x3e124925
 800a638:	3eaaaaab 	.word	0x3eaaaaab
 800a63c:	bd15a221 	.word	0xbd15a221
 800a640:	bd9d8795 	.word	0xbd9d8795
 800a644:	bde38e38 	.word	0xbde38e38
 800a648:	be4ccccd 	.word	0xbe4ccccd
 800a64c:	401bffff 	.word	0x401bffff
 800a650:	0800aeb4 	.word	0x0800aeb4
 800a654:	0800aec4 	.word	0x0800aec4

0800a658 <fabsf>:
 800a658:	ee10 3a10 	vmov	r3, s0
 800a65c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a660:	ee00 3a10 	vmov	s0, r3
 800a664:	4770      	bx	lr
	...

0800a668 <_init>:
 800a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66a:	bf00      	nop
 800a66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a66e:	bc08      	pop	{r3}
 800a670:	469e      	mov	lr, r3
 800a672:	4770      	bx	lr

0800a674 <_fini>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	bf00      	nop
 800a678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67a:	bc08      	pop	{r3}
 800a67c:	469e      	mov	lr, r3
 800a67e:	4770      	bx	lr
