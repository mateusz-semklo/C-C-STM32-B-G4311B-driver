
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a314  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad40  0800ad40  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad40  0800ad40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad48  0800ad48  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad48  0800ad48  0001ad48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad4c  0800ad4c  0001ad4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ad50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000074  0800adc4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800adc4  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd1e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003382  00000000  00000000  0003bdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001600  00000000  00000000  0003f148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001440  00000000  00000000  00040748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ec8  00000000  00000000  00041b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014141  00000000  00000000  00063a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000deb04  00000000  00000000  00077b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156695  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f44  00000000  00000000  00156710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a4d4 	.word	0x0800a4d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	0800a4d4 	.word	0x0800a4d4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b092      	sub	sp, #72	; 0x48
 8000e68:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	223c      	movs	r2, #60	; 0x3c
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f009 f93f 	bl	800a100 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e82:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e92:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb0:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4827      	ldr	r0, [pc, #156]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000ee2:	f001 fed9 	bl	8002c98 <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f000 fff1 	bl	8001ed2 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4821      	ldr	r0, [pc, #132]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000efc:	f003 face 	bl	800449c <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f06:	f000 ffe4 	bl	8001ed2 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_ADC1_Init+0x120>)
 8000f0c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f16:	237f      	movs	r3, #127	; 0x7f
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000f38:	2384      	movs	r3, #132	; 0x84
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000f4c:	f002 fe4e 	bl	8003bec <HAL_ADCEx_InjectedConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f56:	f000 ffbc 	bl	8001ed2 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_ADC1_Init+0x124>)
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f5e:	f240 130f 	movw	r3, #271	; 0x10f
 8000f62:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_ADC1_Init+0x11c>)
 8000f6a:	f002 fe3f 	bl	8003bec <HAL_ADCEx_InjectedConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000f74:	f000 ffad 	bl	8001ed2 <Error_Handler>
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3748      	adds	r7, #72	; 0x48
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000100 	.word	0x20000100
 8000f84:	0c900008 	.word	0x0c900008
 8000f88:	32601000 	.word	0x32601000

08000f8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	223c      	movs	r2, #60	; 0x3c
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f009 f8b1 	bl	800a100 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000f9e:	4b31      	ldr	r3, [pc, #196]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fa0:	4a31      	ldr	r2, [pc, #196]	; (8001068 <MX_ADC2_Init+0xdc>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fa6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000faa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <MX_ADC2_Init+0xd8>)
 8000ffc:	f001 fe4c 	bl	8002c98 <HAL_ADC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001006:	f000 ff64 	bl	8001ed2 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_ADC2_Init+0xe0>)
 800100c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800100e:	2309      	movs	r3, #9
 8001010:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001012:	2301      	movs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001016:	237f      	movs	r3, #127	; 0x7f
 8001018:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800101a:	2304      	movs	r3, #4
 800101c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001038:	2384      	movs	r3, #132	; 0x84
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_ADC2_Init+0xd8>)
 800104c:	f002 fdce 	bl	8003bec <HAL_ADCEx_InjectedConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001056:	f000 ff3c 	bl	8001ed2 <Error_Handler>
  }

}
 800105a:	bf00      	nop
 800105c:	3740      	adds	r7, #64	; 0x40
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000094 	.word	0x20000094
 8001068:	50000100 	.word	0x50000100
 800106c:	0c900008 	.word	0x0c900008

08001070 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001090:	d14e      	bne.n	8001130 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a45      	ldr	r2, [pc, #276]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 800109a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800109c:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10b      	bne.n	80010bc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b0:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	4a3c      	ldr	r2, [pc, #240]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a36      	ldr	r2, [pc, #216]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80010ec:	2305      	movs	r3, #5
 80010ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f0:	2303      	movs	r3, #3
 80010f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f003 fbe1 	bl	80048c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4827      	ldr	r0, [pc, #156]	; (80011b8 <HAL_ADC_MspInit+0x148>)
 800111a:	f003 fbd5 	bl	80048c8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2101      	movs	r1, #1
 8001122:	2012      	movs	r0, #18
 8001124:	f003 fb35 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001128:	2012      	movs	r0, #18
 800112a:	f003 fb4c 	bl	80047c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800112e:	e03a      	b.n	80011a6 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <HAL_ADC_MspInit+0x14c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d135      	bne.n	80011a6 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 8001142:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_ADC_MspInit+0x140>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10b      	bne.n	8001164 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 8001152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_ADC_MspInit+0x144>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800117c:	2340      	movs	r3, #64	; 0x40
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f003 fb99 	bl	80048c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2101      	movs	r1, #1
 800119a:	2012      	movs	r0, #18
 800119c:	f003 faf9 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011a0:	2012      	movs	r0, #18
 80011a2:	f003 fb10 	bl	80047c6 <HAL_NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3730      	adds	r7, #48	; 0x30
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000090 	.word	0x20000090
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	50000100 	.word	0x50000100

080011c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a23      	ldr	r2, [pc, #140]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011f4:	f043 0320 	orr.w	r3, r3, #32
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_GPIO_Init+0xa8>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_GPIO_Init+0xa8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <MX_GPIO_Init+0xa8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_GPIO_Init+0xa8>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_GPIO_Init+0xa8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <MX_GPIO_Init+0xa8>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_GPIO_Init+0xa8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_GPIO_Init+0xac>)
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <MX_GPIO_Init+0xb0>)
 800124c:	f003 fb3c 	bl	80048c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	210f      	movs	r1, #15
 8001254:	2028      	movs	r0, #40	; 0x28
 8001256:	f003 fa9c 	bl	8004792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125a:	2028      	movs	r0, #40	; 0x28
 800125c:	f003 fab3 	bl	80047c6 <HAL_NVIC_EnableIRQ>

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	10110000 	.word	0x10110000
 8001270:	48000800 	.word	0x48000800

08001274 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 8001278:	217f      	movs	r1, #127	; 0x7f
 800127a:	485d      	ldr	r0, [pc, #372]	; (80013f0 <start_up+0x17c>)
 800127c:	f002 fb14 	bl	80038a8 <HAL_ADCEx_Calibration_Start>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <start_up+0x24>
 8001286:	217f      	movs	r1, #127	; 0x7f
 8001288:	485a      	ldr	r0, [pc, #360]	; (80013f4 <start_up+0x180>)
 800128a:	f002 fb0d 	bl	80038a8 <HAL_ADCEx_Calibration_Start>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <start_up+0x24>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <start_up+0x26>
 8001298:	2300      	movs	r3, #0
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 80a5 	bne.w	80013ea <start_up+0x176>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)))
 80012a0:	4a55      	ldr	r2, [pc, #340]	; (80013f8 <start_up+0x184>)
 80012a2:	4956      	ldr	r1, [pc, #344]	; (80013fc <start_up+0x188>)
 80012a4:	4856      	ldr	r0, [pc, #344]	; (8001400 <start_up+0x18c>)
 80012a6:	f003 fdaa 	bl	8004dfe <HAL_OPAMPEx_SelfCalibrateAll>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f040 809c 	bne.w	80013ea <start_up+0x176>
		{


			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 80012b2:	4b54      	ldr	r3, [pc, #336]	; (8001404 <start_up+0x190>)
 80012b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <start_up+0x190>)
 80012bc:	229f      	movs	r2, #159	; 0x9f
 80012be:	629a      	str	r2, [r3, #40]	; 0x28

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012c0:	2100      	movs	r1, #0
 80012c2:	4851      	ldr	r0, [pc, #324]	; (8001408 <start_up+0x194>)
 80012c4:	f005 f976 	bl	80065b4 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80012c8:	2100      	movs	r1, #0
 80012ca:	484f      	ldr	r0, [pc, #316]	; (8001408 <start_up+0x194>)
 80012cc:	f006 fb4a 	bl	8007964 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012d0:	2104      	movs	r1, #4
 80012d2:	484d      	ldr	r0, [pc, #308]	; (8001408 <start_up+0x194>)
 80012d4:	f005 f96e 	bl	80065b4 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80012d8:	2104      	movs	r1, #4
 80012da:	484b      	ldr	r0, [pc, #300]	; (8001408 <start_up+0x194>)
 80012dc:	f006 fb42 	bl	8007964 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012e0:	2108      	movs	r1, #8
 80012e2:	4849      	ldr	r0, [pc, #292]	; (8001408 <start_up+0x194>)
 80012e4:	f005 f966 	bl	80065b4 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80012e8:	2108      	movs	r1, #8
 80012ea:	4847      	ldr	r0, [pc, #284]	; (8001408 <start_up+0x194>)
 80012ec:	f006 fb3a 	bl	8007964 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80012f0:	210c      	movs	r1, #12
 80012f2:	4845      	ldr	r0, [pc, #276]	; (8001408 <start_up+0x194>)
 80012f4:	f005 f95e 	bl	80065b4 <HAL_TIM_PWM_Start>

			TIM1->CCR1=(TIM1->ARR/15);
 80012f8:	4b42      	ldr	r3, [pc, #264]	; (8001404 <start_up+0x190>)
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	4a41      	ldr	r2, [pc, #260]	; (8001404 <start_up+0x190>)
 80012fe:	4943      	ldr	r1, [pc, #268]	; (800140c <start_up+0x198>)
 8001300:	fba1 1303 	umull	r1, r3, r1, r3
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=0;
 8001308:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <start_up+0x190>)
 800130a:	2200      	movs	r2, #0
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 800130e:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <start_up+0x190>)
 8001310:	2200      	movs	r2, #0
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4=(TIM1->ARR-10);
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <start_up+0x190>)
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	4a3a      	ldr	r2, [pc, #232]	; (8001404 <start_up+0x190>)
 800131a:	3b0a      	subs	r3, #10
 800131c:	6413      	str	r3, [r2, #64]	; 0x40

			HAL_Delay(500);
 800131e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001322:	f001 fb7f 	bl	8002a24 <HAL_Delay>

			//////// konfiguracja Timer 4 - encoder ///////////////////
			TIM4->ARR= TIM4_ARR;
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <start_up+0x19c>)
 8001328:	f240 1267 	movw	r2, #359	; 0x167
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC= TIM4_PSC;
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <start_up+0x19c>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001334:	2100      	movs	r1, #0
 8001336:	4837      	ldr	r0, [pc, #220]	; (8001414 <start_up+0x1a0>)
 8001338:	f005 fab4 	bl	80068a4 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 800133c:	2104      	movs	r1, #4
 800133e:	4835      	ldr	r0, [pc, #212]	; (8001414 <start_up+0x1a0>)
 8001340:	f005 fab0 	bl	80068a4 <HAL_TIM_Encoder_Start>

			HAL_Delay(100);
 8001344:	2064      	movs	r0, #100	; 0x64
 8001346:	f001 fb6d 	bl	8002a24 <HAL_Delay>

			TIM1->CCR1=0;
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <start_up+0x190>)
 800134c:	2200      	movs	r2, #0
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <start_up+0x190>)
 8001352:	2200      	movs	r2, #0
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <start_up+0x190>)
 8001358:	2200      	movs	r2, #0
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c

			HAL_Delay(200);
 800135c:	20c8      	movs	r0, #200	; 0xc8
 800135e:	f001 fb61 	bl	8002a24 <HAL_Delay>


			//////// konfiguracja Timer 2 ////////// ///////////////////
			TIM2->ARR= TIM2_ARR;
 8001362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001366:	f240 128f 	movw	r2, #399	; 0x18f
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->PSC= TIM2_PSC;
 800136c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001370:	f240 128f 	movw	r2, #399	; 0x18f
 8001374:	629a      	str	r2, [r3, #40]	; 0x28

			//////// start ADC 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 8001376:	4822      	ldr	r0, [pc, #136]	; (8001400 <start_up+0x18c>)
 8001378:	f003 fd10 	bl	8004d9c <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 800137c:	481f      	ldr	r0, [pc, #124]	; (80013fc <start_up+0x188>)
 800137e:	f003 fd0d 	bl	8004d9c <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp3);
 8001382:	481d      	ldr	r0, [pc, #116]	; (80013f8 <start_up+0x184>)
 8001384:	f003 fd0a 	bl	8004d9c <HAL_OPAMP_Start>

			//////// start ADC 1 2 ///////////////////////////////////
			HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001388:	4819      	ldr	r0, [pc, #100]	; (80013f0 <start_up+0x17c>)
 800138a:	f002 faef 	bl	800396c <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 800138e:	4819      	ldr	r0, [pc, #100]	; (80013f4 <start_up+0x180>)
 8001390:	f002 faec 	bl	800396c <HAL_ADCEx_InjectedStart_IT>


			////////  UASRT 2 /////////////////////////////////////////
			HAL_UART_Receive_IT(&huart2, &recive, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	4920      	ldr	r1, [pc, #128]	; (8001418 <start_up+0x1a4>)
 8001398:	4820      	ldr	r0, [pc, #128]	; (800141c <start_up+0x1a8>)
 800139a:	f006 fd41 	bl	8007e20 <HAL_UART_Receive_IT>


			/////////// inicjalizacja pid_d ////////////////
			set_d=0;
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <start_up+0x1ac>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
			pid_d.Kp=1;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <start_up+0x1b0>)
 80013a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013ac:	619a      	str	r2, [r3, #24]
			pid_d.Ki=100;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <start_up+0x1b0>)
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <start_up+0x1b4>)
 80013b2:	61da      	str	r2, [r3, #28]
			pid_d.Kd=0;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <start_up+0x1b0>)
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_d, 1);
 80013bc:	2101      	movs	r1, #1
 80013be:	4819      	ldr	r0, [pc, #100]	; (8001424 <start_up+0x1b0>)
 80013c0:	f008 fdb2 	bl	8009f28 <arm_pid_init_f32>

			/////////// inicjalizacja pid_q ////////////////
			set_q=1;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <start_up+0x1b8>)
 80013c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013ca:	601a      	str	r2, [r3, #0]
			pid_q.Kp=100;
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <start_up+0x1bc>)
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <start_up+0x1b4>)
 80013d0:	619a      	str	r2, [r3, #24]
			pid_q.Ki=1;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <start_up+0x1bc>)
 80013d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013d8:	61da      	str	r2, [r3, #28]
			pid_q.Kd=0;
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <start_up+0x1bc>)
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_q, 1);
 80013e2:	2101      	movs	r1, #1
 80013e4:	4812      	ldr	r0, [pc, #72]	; (8001430 <start_up+0x1bc>)
 80013e6:	f008 fd9f 	bl	8009f28 <arm_pid_init_f32>
		}


	   }

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000100 	.word	0x20000100
 80013f4:	20000094 	.word	0x20000094
 80013f8:	200002b8 	.word	0x200002b8
 80013fc:	2000027c 	.word	0x2000027c
 8001400:	200002f4 	.word	0x200002f4
 8001404:	40012c00 	.word	0x40012c00
 8001408:	2000037c 	.word	0x2000037c
 800140c:	88888889 	.word	0x88888889
 8001410:	40000800 	.word	0x40000800
 8001414:	20000330 	.word	0x20000330
 8001418:	2000022c 	.word	0x2000022c
 800141c:	20000414 	.word	0x20000414
 8001420:	20000198 	.word	0x20000198
 8001424:	2000019c 	.word	0x2000019c
 8001428:	42c80000 	.word	0x42c80000
 800142c:	20000268 	.word	0x20000268
 8001430:	20000200 	.word	0x20000200
 8001434:	00000000 	.word	0x00000000

08001438 <AlphaBeta_To_Angle_Vref>:

void AlphaBeta_To_Angle_Vref(float32_t Valpha,float32_t Vbeta,float32_t *angle_current_rad,float32_t *Vref)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001442:	edc7 0a02 	vstr	s1, [r7, #8]
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
	*angle_current_rad = atan2f(Vbeta,Valpha);
 800144a:	edd7 0a03 	vldr	s1, [r7, #12]
 800144e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001452:	f008 fe5d 	bl	800a110 <atan2f>
 8001456:	eef0 7a40 	vmov.f32	s15, s0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32( ((Valpha*Valpha)+(Vbeta*Vbeta)), Vref);
 8001460:	ed97 7a03 	vldr	s14, [r7, #12]
 8001464:	edd7 7a03 	vldr	s15, [r7, #12]
 8001468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001470:	edd7 7a02 	vldr	s15, [r7, #8]
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001484:	edd7 7a05 	vldr	s15, [r7, #20]
 8001488:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001490:	db09      	blt.n	80014a6 <AlphaBeta_To_Angle_Vref+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001492:	ed97 0a05 	vldr	s0, [r7, #20]
 8001496:	f008 fe3d 	bl	800a114 <sqrtf>
 800149a:	eef0 7a40 	vmov.f32	s15, s0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	edc3 7a00 	vstr	s15, [r3]
 80014a4:	e003      	b.n	80014ae <AlphaBeta_To_Angle_Vref+0x76>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

	 if(*Vref>=sv_Vdc_limit)  // saturacja Vref
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f814 	bl	80004e0 <__aeabi_f2d>
 80014b8:	a308      	add	r3, pc, #32	; (adr r3, 80014dc <AlphaBeta_To_Angle_Vref+0xa4>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7ff faed 	bl	8000a9c <__aeabi_dcmpge>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d100      	bne.n	80014ca <AlphaBeta_To_Angle_Vref+0x92>
	    	*Vref=sv_Vdc_limit;
}
 80014c8:	e002      	b.n	80014d0 <AlphaBeta_To_Angle_Vref+0x98>
	    	*Vref=sv_Vdc_limit;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	4a02      	ldr	r2, [pc, #8]	; (80014d8 <AlphaBeta_To_Angle_Vref+0xa0>)
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	415db3d0 	.word	0x415db3d0
 80014dc:	0f9096bc 	.word	0x0f9096bc
 80014e0:	402bb67a 	.word	0x402bb67a
 80014e4:	00000000 	.word	0x00000000

080014e8 <Angle_To_Sector>:


void Angle_To_Sector(float32_t angle_current_rad,uint8_t *sector)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80014f2:	6038      	str	r0, [r7, #0]

	if((angle_current_rad>0) && (angle_current_rad<=1.047197)) // pi/3
 80014f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	dd0e      	ble.n	8001520 <Angle_To_Sector+0x38>
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7fe ffec 	bl	80004e0 <__aeabi_f2d>
 8001508:	a347      	add	r3, pc, #284	; (adr r3, 8001628 <Angle_To_Sector+0x140>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff fabb 	bl	8000a88 <__aeabi_dcmple>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <Angle_To_Sector+0x38>
		*sector=1;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e07f      	b.n	8001620 <Angle_To_Sector+0x138>
	else if((angle_current_rad>1.047197) && (angle_current_rad<=2.094395)) //2/3*pi
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7fe ffdd 	bl	80004e0 <__aeabi_f2d>
 8001526:	a340      	add	r3, pc, #256	; (adr r3, 8001628 <Angle_To_Sector+0x140>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff fac0 	bl	8000ab0 <__aeabi_dcmpgt>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00e      	beq.n	8001554 <Angle_To_Sector+0x6c>
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7fe ffd2 	bl	80004e0 <__aeabi_f2d>
 800153c:	a33c      	add	r3, pc, #240	; (adr r3, 8001630 <Angle_To_Sector+0x148>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff faa1 	bl	8000a88 <__aeabi_dcmple>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <Angle_To_Sector+0x6c>
		*sector=2;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2202      	movs	r2, #2
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e065      	b.n	8001620 <Angle_To_Sector+0x138>
	else if((angle_current_rad>2.094395) && (angle_current_rad<=3.141593))
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7fe ffc3 	bl	80004e0 <__aeabi_f2d>
 800155a:	a335      	add	r3, pc, #212	; (adr r3, 8001630 <Angle_To_Sector+0x148>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff faa6 	bl	8000ab0 <__aeabi_dcmpgt>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00e      	beq.n	8001588 <Angle_To_Sector+0xa0>
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7fe ffb8 	bl	80004e0 <__aeabi_f2d>
 8001570:	a331      	add	r3, pc, #196	; (adr r3, 8001638 <Angle_To_Sector+0x150>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7ff fa87 	bl	8000a88 <__aeabi_dcmple>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <Angle_To_Sector+0xa0>
		*sector=3;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2203      	movs	r2, #3
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e04b      	b.n	8001620 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-3.141593) && (angle_current_rad<=-2.094395))
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7fe ffa9 	bl	80004e0 <__aeabi_f2d>
 800158e:	a32c      	add	r3, pc, #176	; (adr r3, 8001640 <Angle_To_Sector+0x158>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff fa8c 	bl	8000ab0 <__aeabi_dcmpgt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00e      	beq.n	80015bc <Angle_To_Sector+0xd4>
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7fe ff9e 	bl	80004e0 <__aeabi_f2d>
 80015a4:	a328      	add	r3, pc, #160	; (adr r3, 8001648 <Angle_To_Sector+0x160>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff fa6d 	bl	8000a88 <__aeabi_dcmple>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <Angle_To_Sector+0xd4>
		*sector=4;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2204      	movs	r2, #4
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e031      	b.n	8001620 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-2.094395) && (angle_current_rad<=-1.047197))
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7fe ff8f 	bl	80004e0 <__aeabi_f2d>
 80015c2:	a321      	add	r3, pc, #132	; (adr r3, 8001648 <Angle_To_Sector+0x160>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff fa72 	bl	8000ab0 <__aeabi_dcmpgt>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00e      	beq.n	80015f0 <Angle_To_Sector+0x108>
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7fe ff84 	bl	80004e0 <__aeabi_f2d>
 80015d8:	a31d      	add	r3, pc, #116	; (adr r3, 8001650 <Angle_To_Sector+0x168>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff fa53 	bl	8000a88 <__aeabi_dcmple>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <Angle_To_Sector+0x108>
		*sector=5;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2205      	movs	r2, #5
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e017      	b.n	8001620 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7fe ff75 	bl	80004e0 <__aeabi_f2d>
 80015f6:	a316      	add	r3, pc, #88	; (adr r3, 8001650 <Angle_To_Sector+0x168>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff fa58 	bl	8000ab0 <__aeabi_dcmpgt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d100      	bne.n	8001608 <Angle_To_Sector+0x120>
		*sector=6;
	else{}

}
 8001606:	e00b      	b.n	8001620 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8001608:	edd7 7a01 	vldr	s15, [r7, #4]
 800160c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	d900      	bls.n	8001618 <Angle_To_Sector+0x130>
}
 8001616:	e003      	b.n	8001620 <Angle_To_Sector+0x138>
		*sector=6;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2206      	movs	r2, #6
 800161c:	701a      	strb	r2, [r3, #0]
}
 800161e:	e7ff      	b.n	8001620 <Angle_To_Sector+0x138>
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	a437824d 	.word	0xa437824d
 800162c:	3ff0c151 	.word	0x3ff0c151
 8001630:	2a6f3f53 	.word	0x2a6f3f53
 8001634:	4000c152 	.word	0x4000c152
 8001638:	82c2bd7f 	.word	0x82c2bd7f
 800163c:	400921fb 	.word	0x400921fb
 8001640:	82c2bd7f 	.word	0x82c2bd7f
 8001644:	c00921fb 	.word	0xc00921fb
 8001648:	2a6f3f53 	.word	0x2a6f3f53
 800164c:	c000c152 	.word	0xc000c152
 8001650:	a437824d 	.word	0xa437824d
 8001654:	bff0c151 	.word	0xbff0c151

08001658 <SVPWM>:


void SVPWM(uint8_t sector,float32_t angle_current_rad,float32_t Vref, float32_t T[], float32_t T_gate[], float32_t *S1,float32_t *S2,float32_t *S3)
{
 8001658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	ed87 0a04 	vstr	s0, [r7, #16]
 8001664:	edc7 0a03 	vstr	s1, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4603      	mov	r3, r0
 8001670:	75fb      	strb	r3, [r7, #23]

	T[1]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((sector * 1.047197) - (angle_current_rad)); /// pi/3 = 1,0472
 8001672:	edd7 7a03 	vldr	s15, [r7, #12]
 8001676:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8001938 <SVPWM+0x2e0>
 800167a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167e:	ee17 0a90 	vmov	r0, s15
 8001682:	f7fe ff2d 	bl	80004e0 <__aeabi_f2d>
 8001686:	a3a6      	add	r3, pc, #664	; (adr r3, 8001920 <SVPWM+0x2c8>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7ff f8aa 	bl	80007e4 <__aeabi_ddiv>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	4618      	mov	r0, r3
 8001696:	4621      	mov	r1, r4
 8001698:	a3a3      	add	r3, pc, #652	; (adr r3, 8001928 <SVPWM+0x2d0>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe ff77 	bl	8000590 <__aeabi_dmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	4625      	mov	r5, r4
 80016a8:	461c      	mov	r4, r3
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff05 	bl	80004bc <__aeabi_i2d>
 80016b2:	a39f      	add	r3, pc, #636	; (adr r3, 8001930 <SVPWM+0x2d8>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ff6a 	bl	8000590 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4690      	mov	r8, r2
 80016c2:	4699      	mov	r9, r3
 80016c4:	6938      	ldr	r0, [r7, #16]
 80016c6:	f7fe ff0b 	bl	80004e0 <__aeabi_f2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4640      	mov	r0, r8
 80016d0:	4649      	mov	r1, r9
 80016d2:	f7fe fda5 	bl	8000220 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f9f1 	bl	8000ac4 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	ee00 3a10 	vmov	s0, r3
 80016e8:	f008 fc54 	bl	8009f94 <arm_sin_f32>
 80016ec:	ee10 3a10 	vmov	r3, s0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fef5 	bl	80004e0 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7fe ff47 	bl	8000590 <__aeabi_dmul>
 8001702:	4603      	mov	r3, r0
 8001704:	460c      	mov	r4, r1
 8001706:	4619      	mov	r1, r3
 8001708:	4622      	mov	r2, r4
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1d1c      	adds	r4, r3, #4
 800170e:	4608      	mov	r0, r1
 8001710:	4611      	mov	r1, r2
 8001712:	f7ff f9d7 	bl	8000ac4 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	6023      	str	r3, [r4, #0]
	T[2]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((-(sector-1) * 1.047197) +  angle_current_rad) ;
 800171a:	edd7 7a03 	vldr	s15, [r7, #12]
 800171e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001938 <SVPWM+0x2e0>
 8001722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001726:	ee17 0a90 	vmov	r0, s15
 800172a:	f7fe fed9 	bl	80004e0 <__aeabi_f2d>
 800172e:	a37c      	add	r3, pc, #496	; (adr r3, 8001920 <SVPWM+0x2c8>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7ff f856 	bl	80007e4 <__aeabi_ddiv>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	4618      	mov	r0, r3
 800173e:	4621      	mov	r1, r4
 8001740:	a379      	add	r3, pc, #484	; (adr r3, 8001928 <SVPWM+0x2d0>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff23 	bl	8000590 <__aeabi_dmul>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4625      	mov	r5, r4
 8001750:	461c      	mov	r4, r3
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	f1c3 0301 	rsb	r3, r3, #1
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe feaf 	bl	80004bc <__aeabi_i2d>
 800175e:	a374      	add	r3, pc, #464	; (adr r3, 8001930 <SVPWM+0x2d8>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7fe ff14 	bl	8000590 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4690      	mov	r8, r2
 800176e:	4699      	mov	r9, r3
 8001770:	6938      	ldr	r0, [r7, #16]
 8001772:	f7fe feb5 	bl	80004e0 <__aeabi_f2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4640      	mov	r0, r8
 800177c:	4649      	mov	r1, r9
 800177e:	f7fe fd51 	bl	8000224 <__adddf3>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f99b 	bl	8000ac4 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	ee00 3a10 	vmov	s0, r3
 8001794:	f008 fbfe 	bl	8009f94 <arm_sin_f32>
 8001798:	ee10 3a10 	vmov	r3, s0
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fe9f 	bl	80004e0 <__aeabi_f2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7fe fef1 	bl	8000590 <__aeabi_dmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	4619      	mov	r1, r3
 80017b4:	4622      	mov	r2, r4
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f103 0408 	add.w	r4, r3, #8
 80017bc:	4608      	mov	r0, r1
 80017be:	4611      	mov	r1, r2
 80017c0:	f7ff f980 	bl	8000ac4 <__aeabi_d2f>
 80017c4:	4603      	mov	r3, r0
 80017c6:	6023      	str	r3, [r4, #0]
	T[0]=sv_Tz-T[1]-T[2];
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3304      	adds	r3, #4
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001938 <SVPWM+0x2e0>
 80017d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3308      	adds	r3, #8
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	edc3 7a00 	vstr	s15, [r3]

	T_gate[0]= (T[0]/2);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	edc3 7a00 	vstr	s15, [r3]
	T_gate[1]= T[1]+(T_gate[0]);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3304      	adds	r3, #4
 8001802:	ed93 7a00 	vldr	s14, [r3]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3304      	adds	r3, #4
 8001810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001814:	edc3 7a00 	vstr	s15, [r3]
	T_gate[2]= T[2]+(T_gate[0]);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	3308      	adds	r3, #8
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3308      	adds	r3, #8
 800182a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182e:	edc3 7a00 	vstr	s15, [r3]
	T_gate[3]= T[1]+T[2]+(T_gate[0]);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3304      	adds	r3, #4
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3308      	adds	r3, #8
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	330c      	adds	r3, #12
 8001850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001854:	edc3 7a00 	vstr	s15, [r3]


	if(sector == 1)
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10c      	bne.n	8001878 <SVPWM+0x220>
	{
		*S1=T_gate[3];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	601a      	str	r2, [r3, #0]
		*S2=T_gate[2];
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001874:	601a      	str	r2, [r3, #0]
		*S1=T_gate[3];
		*S2=T_gate[0];
		*S3=T_gate[1];
	}
	else{}
}
 8001876:	e04e      	b.n	8001916 <SVPWM+0x2be>
	else if(sector == 2)
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d10c      	bne.n	8001898 <SVPWM+0x240>
		*S1=T_gate[1];
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001894:	601a      	str	r2, [r3, #0]
}
 8001896:	e03e      	b.n	8001916 <SVPWM+0x2be>
	else if(sector == 3)
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d10c      	bne.n	80018b8 <SVPWM+0x260>
		*S1=T_gate[0];
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ac:	601a      	str	r2, [r3, #0]
		*S3=T_gate[2];
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b4:	601a      	str	r2, [r3, #0]
}
 80018b6:	e02e      	b.n	8001916 <SVPWM+0x2be>
	else if(sector == 4)
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d10c      	bne.n	80018d8 <SVPWM+0x280>
		*S1=T_gate[0];
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	601a      	str	r2, [r3, #0]
		*S2=T_gate[1];
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018cc:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d4:	601a      	str	r2, [r3, #0]
}
 80018d6:	e01e      	b.n	8001916 <SVPWM+0x2be>
	else if(sector == 5)
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10c      	bne.n	80018f8 <SVPWM+0x2a0>
		*S1=T_gate[2];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ec:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	e00e      	b.n	8001916 <SVPWM+0x2be>
	else if(sector == 6)
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d10b      	bne.n	8001916 <SVPWM+0x2be>
		*S1=T_gate[3];
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[1];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	601a      	str	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001920:	0f9096bc 	.word	0x0f9096bc
 8001924:	402bb67a 	.word	0x402bb67a
 8001928:	9999999a 	.word	0x9999999a
 800192c:	3fe99999 	.word	0x3fe99999
 8001930:	a437824d 	.word	0xa437824d
 8001934:	3ff0c151 	.word	0x3ff0c151
 8001938:	447a0000 	.word	0x447a0000

0800193c <HAL_ADCEx_InjectedConvCpltCallback>:


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]


	index_event_adc++;
 8001944:	4b71      	ldr	r3, [pc, #452]	; (8001b0c <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a70      	ldr	r2, [pc, #448]	; (8001b0c <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 800194c:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800194e:	2109      	movs	r1, #9
 8001950:	486f      	ldr	r0, [pc, #444]	; (8001b10 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 8001952:	f002 f8f1 	bl	8003b38 <HAL_ADCEx_InjectedGetValue>
 8001956:	4603      	mov	r3, r0
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b6e      	ldr	r3, [pc, #440]	; (8001b14 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800195c:	801a      	strh	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 800195e:	bf00      	nop
 8001960:	4b6b      	ldr	r3, [pc, #428]	; (8001b10 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6a      	ldr	r2, [pc, #424]	; (8001b10 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f5      	bne.n	8001960 <HAL_ADCEx_InjectedConvCpltCallback+0x24>
    adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001974:	f240 110f 	movw	r1, #271	; 0x10f
 8001978:	4865      	ldr	r0, [pc, #404]	; (8001b10 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 800197a:	f002 f8dd 	bl	8003b38 <HAL_ADCEx_InjectedGetValue>
 800197e:	4603      	mov	r3, r0
 8001980:	b29a      	uxth	r2, r3
 8001982:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 8001984:	801a      	strh	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8001986:	bf00      	nop
 8001988:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a60      	ldr	r2, [pc, #384]	; (8001b10 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	f003 0320 	and.w	r3, r3, #32
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f5      	bne.n	8001988 <HAL_ADCEx_InjectedConvCpltCallback+0x4c>
	adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800199c:	2109      	movs	r1, #9
 800199e:	485f      	ldr	r0, [pc, #380]	; (8001b1c <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 80019a0:	f002 f8ca 	bl	8003b38 <HAL_ADCEx_InjectedGetValue>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 80019aa:	801a      	strh	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 80019ac:	bf00      	nop
 80019ae:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a59      	ldr	r2, [pc, #356]	; (8001b1c <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	f003 0320 	and.w	r3, r3, #32
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f5      	bne.n	80019ae <HAL_ADCEx_InjectedConvCpltCallback+0x72>
	//adc_V =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
	//while((hadc2.Instance->ISR &= (0x1<<5))!=0){}

	if(index_event_adc<100)
 80019c2:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b63      	cmp	r3, #99	; 0x63
 80019c8:	d80c      	bhi.n	80019e4 <HAL_ADCEx_InjectedConvCpltCallback+0xa8>
	{
		Ia=0;
 80019ca:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
		Ib=0;
 80019d2:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
		Ic=0;
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e089      	b.n	8001af8 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>


	}
	else if(index_event_adc == 100)
 80019e4:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d10f      	bne.n	8001a0c <HAL_ADCEx_InjectedConvCpltCallback+0xd0>
	{

			   offset1=adc_Ia;
 80019ec:	4b49      	ldr	r3, [pc, #292]	; (8001b14 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 80019f4:	801a      	strh	r2, [r3, #0]
			   offset2=adc_Ib;
 80019f6:	4b48      	ldr	r3, [pc, #288]	; (8001b18 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 80019fe:	801a      	strh	r2, [r3, #0]
			   offset3=adc_Ic;
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	e075      	b.n	8001af8 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>
	}
	else
	{

	    sum_currents=(adc_Ia-offset1)+(adc_Ic-offset3)+(adc_Ib-offset2);
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	1ad2      	subs	r2, r2, r3
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	1acb      	subs	r3, r1, r3
 8001a2c:	441a      	add	r2, r3
 8001a2e:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4619      	mov	r1, r3
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	1acb      	subs	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a3e      	ldr	r2, [pc, #248]	; (8001b3c <HAL_ADCEx_InjectedConvCpltCallback+0x200>)
 8001a42:	6013      	str	r3, [r2, #0]

	    adc_Ia=(adc_Ia-offset1);
 8001a44:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <HAL_ADCEx_InjectedConvCpltCallback+0x1f4>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 8001a56:	801a      	strh	r2, [r3, #0]
	    adc_Ib=(adc_Ib-offset2);
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_ADCEx_InjectedConvCpltCallback+0x1f8>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 8001a6a:	801a      	strh	r2, [r3, #0]
	    adc_Ic=(adc_Ic-offset3);
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_ADCEx_InjectedConvCpltCallback+0x1fc>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 8001a7e:	801a      	strh	r2, [r3, #0]

	    Ia=adc_Ia/32.0;
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd18 	bl	80004bc <__aeabi_i2d>
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 8001a92:	f7fe fea7 	bl	80007e4 <__aeabi_ddiv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	460c      	mov	r4, r1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	f7ff f811 	bl	8000ac4 <__aeabi_d2f>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 8001aa6:	601a      	str	r2, [r3, #0]
	    Ib=adc_Ib/32.0;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd04 	bl	80004bc <__aeabi_i2d>
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 8001aba:	f7fe fe93 	bl	80007e4 <__aeabi_ddiv>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	f7fe fffd 	bl	8000ac4 <__aeabi_d2f>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 8001ace:	601a      	str	r2, [r3, #0]
	    Ic=adc_Ic/32.0;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fcf0 	bl	80004bc <__aeabi_i2d>
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_ADCEx_InjectedConvCpltCallback+0x204>)
 8001ae2:	f7fe fe7f 	bl	80007e4 <__aeabi_ddiv>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460c      	mov	r4, r1
 8001aea:	4618      	mov	r0, r3
 8001aec:	4621      	mov	r1, r4
 8001aee:	f7fe ffe9 	bl	8000ac4 <__aeabi_d2f>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_ADCEx_InjectedConvCpltCallback+0x1f0>)
 8001af6:	601a      	str	r2, [r3, #0]
	}

	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 8001afa:	f001 ff37 	bl	800396c <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001afe:	4807      	ldr	r0, [pc, #28]	; (8001b1c <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 8001b00:	f001 ff34 	bl	800396c <HAL_ADCEx_InjectedStart_IT>

}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd90      	pop	{r4, r7, pc}
 8001b0c:	20000258 	.word	0x20000258
 8001b10:	20000100 	.word	0x20000100
 8001b14:	200001f8 	.word	0x200001f8
 8001b18:	20000194 	.word	0x20000194
 8001b1c:	20000094 	.word	0x20000094
 8001b20:	20000264 	.word	0x20000264
 8001b24:	20000178 	.word	0x20000178
 8001b28:	200001f4 	.word	0x200001f4
 8001b2c:	2000023c 	.word	0x2000023c
 8001b30:	2000018c 	.word	0x2000018c
 8001b34:	200001cc 	.word	0x200001cc
 8001b38:	20000272 	.word	0x20000272
 8001b3c:	20000254 	.word	0x20000254
 8001b40:	40400000 	.word	0x40400000

08001b44 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b54:	d120      	bne.n	8001b98 <HAL_GPIO_EXTI_Callback+0x54>
	{
		if(start==0)
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_GPIO_EXTI_Callback+0x30>
		{
			start=1;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8001b66:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b68:	f004 fc5e 	bl	8006428 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim1);
 8001b6c:	480e      	ldr	r0, [pc, #56]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001b6e:	f004 fc5b 	bl	8006428 <HAL_TIM_Base_Start_IT>
			TIM1->CCR1=0;
			TIM1->CCR2=0;
			TIM1->CCR3=0;
		}
	}
}
 8001b72:	e011      	b.n	8001b98 <HAL_GPIO_EXTI_Callback+0x54>
			start=0;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 8001b7a:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b7c:	f004 fc8a 	bl	8006494 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim1);
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001b82:	f004 fc87 	bl	8006494 <HAL_TIM_Base_Stop_IT>
			TIM1->CCR1=0;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_GPIO_EXTI_Callback+0x68>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_GPIO_EXTI_Callback+0x68>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_GPIO_EXTI_Callback+0x68>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000270 	.word	0x20000270
 8001ba4:	200003c8 	.word	0x200003c8
 8001ba8:	2000037c 	.word	0x2000037c
 8001bac:	40012c00 	.word	0x40012c00

08001bb0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a66      	ldr	r2, [pc, #408]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d16b      	bne.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0xea>
	{
		if(TIM1->CNT >= ((TIM1->ARR)-10))
 8001bc2:	4b65      	ldr	r3, [pc, #404]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc6:	4b64      	ldr	r3, [pc, #400]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	3b0a      	subs	r3, #10
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d364      	bcc.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0xea>
		{
		arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 8001bd0:	4b62      	ldr	r3, [pc, #392]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	617a      	str	r2, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	4b61      	ldr	r3, [pc, #388]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001be2:	60bb      	str	r3, [r7, #8]
    *pIalpha = Ia;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8001bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bee:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001d6c <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8001bf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfa:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001d70 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8001bfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	edc3 7a00 	vstr	s15, [r3]
		AlphaBeta_To_Angle_Vref(Ialpha, Ibeta, &angle_current_rad, &Vref);
 8001c0c:	4b55      	ldr	r3, [pc, #340]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001c14:	ed93 7a00 	vldr	s14, [r3]
 8001c18:	4956      	ldr	r1, [pc, #344]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c1a:	4857      	ldr	r0, [pc, #348]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001c1c:	eef0 0a47 	vmov.f32	s1, s14
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f7ff fc08 	bl	8001438 <AlphaBeta_To_Angle_Vref>
		Angle_To_Sector(angle_current_rad, &sector);
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	4853      	ldr	r0, [pc, #332]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001c30:	eeb0 0a67 	vmov.f32	s0, s15
 8001c34:	f7ff fc58 	bl	80014e8 <Angle_To_Sector>
		SVPWM(sector, angle_current_rad , Vref, sv_T, sv_T_gate, &sv_S1, &sv_S2, &sv_S3);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b2d8      	uxtb	r0, r3
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c46:	ed93 7a00 	vldr	s14, [r3]
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c54:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001c56:	494e      	ldr	r1, [pc, #312]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001c58:	eef0 0a47 	vmov.f32	s1, s14
 8001c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c60:	f7ff fcfa 	bl	8001658 <SVPWM>
		TIM1->CCR1=sv_S1;
 8001c64:	4b48      	ldr	r3, [pc, #288]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c70:	ee17 2a90 	vmov	r2, s15
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=sv_S2;
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c82:	ee17 2a90 	vmov	r2, s15
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=sv_S3;
 8001c88:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c94:	ee17 2a90 	vmov	r2, s15
 8001c98:	63da      	str	r2, [r3, #60]	; 0x3c
		}


	}

	if(htim->Instance==TIM2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca2:	d14a      	bne.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x18a>
	{
		t+=0.001;
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc19 	bl	80004e0 <__aeabi_f2d>
 8001cae:	a326      	add	r3, pc, #152	; (adr r3, 8001d48 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fab6 	bl	8000224 <__adddf3>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	460c      	mov	r4, r1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	f7fe ff00 	bl	8000ac4 <__aeabi_d2f>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001cc8:	601a      	str	r2, [r3, #0]
		Ia=Vdc* arm_sin_f32( 10* PI * t);
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001d98 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cdc:	f008 f95a 	bl	8009f94 <arm_sin_f32>
 8001ce0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ce4:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8001ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001cee:	edc3 7a00 	vstr	s15, [r3]
		Ib=Vdc* arm_sin_f32( ( 10 * PI *t) - 2.094395);  // 2/3*pi = 2.094395
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001d98 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d00:	ee17 0a90 	vmov	r0, s15
 8001d04:	f7fe fbec 	bl	80004e0 <__aeabi_f2d>
 8001d08:	a311      	add	r3, pc, #68	; (adr r3, 8001d50 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fa87 	bl	8000220 <__aeabi_dsub>
 8001d12:	4603      	mov	r3, r0
 8001d14:	460c      	mov	r4, r1
 8001d16:	4618      	mov	r0, r3
 8001d18:	4621      	mov	r1, r4
 8001d1a:	f7fe fed3 	bl	8000ac4 <__aeabi_d2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	ee00 3a10 	vmov	s0, r3
 8001d24:	f008 f936 	bl	8009f94 <arm_sin_f32>
 8001d28:	eeb0 7a40 	vmov.f32	s14, s0
 8001d2c:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8001d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d36:	edc3 7a00 	vstr	s15, [r3]

	}



}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d4c:	3f50624d 	.word	0x3f50624d
 8001d50:	2a6f3f53 	.word	0x2a6f3f53
 8001d54:	4000c152 	.word	0x4000c152
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	20000178 	.word	0x20000178
 8001d60:	200001f4 	.word	0x200001f4
 8001d64:	20000238 	.word	0x20000238
 8001d68:	20000230 	.word	0x20000230
 8001d6c:	3f13cd3a 	.word	0x3f13cd3a
 8001d70:	3f93cd3a 	.word	0x3f93cd3a
 8001d74:	20000228 	.word	0x20000228
 8001d78:	200001f0 	.word	0x200001f0
 8001d7c:	200001fa 	.word	0x200001fa
 8001d80:	20000190 	.word	0x20000190
 8001d84:	200001c8 	.word	0x200001c8
 8001d88:	200001e4 	.word	0x200001e4
 8001d8c:	2000017c 	.word	0x2000017c
 8001d90:	200001d8 	.word	0x200001d8
 8001d94:	2000016c 	.word	0x2000016c
 8001d98:	41fb53d2 	.word	0x41fb53d2

08001d9c <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000


		}
	}

}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
	{
		//HAL_UART_Receive_IT(&huart2, &recive, 1);

	}
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd0:	f000 fdb7 	bl	8002942 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd4:	f000 f817 	bl	8001e06 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd8:	f7ff f9f2 	bl	80011c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ddc:	f000 fa2c 	bl	8002238 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001de0:	f000 fb56 	bl	8002490 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001de4:	f000 fcec 	bl	80027c0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001de8:	f000 fb06 	bl	80023f8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001dec:	f7ff f83a 	bl	8000e64 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001df0:	f7ff f8cc 	bl	8000f8c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8001df4:	f000 f874 	bl	8001ee0 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001df8:	f000 f8a0 	bl	8001f3c <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001dfc:	f000 f8cc 	bl	8001f98 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


    start_up();
 8001e00:	f7ff fa38 	bl	8001274 <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <main+0x38>

08001e06 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b0a4      	sub	sp, #144	; 0x90
 8001e0a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e10:	2238      	movs	r2, #56	; 0x38
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f008 f973 	bl	800a100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2244      	movs	r2, #68	; 0x44
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f008 f965 	bl	800a100 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f003 fad6 	bl	80053e8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e44:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e46:	2302      	movs	r3, #2
 8001e48:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001e52:	2350      	movs	r3, #80	; 0x50
 8001e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fb5e 	bl	8005530 <HAL_RCC_OscConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001e7a:	f000 f82a 	bl	8001ed2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7e:	230f      	movs	r3, #15
 8001e80:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e82:	2303      	movs	r3, #3
 8001e84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e96:	2107      	movs	r1, #7
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 fe61 	bl	8005b60 <HAL_RCC_ClockConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001ea4:	f000 f815 	bl	8001ed2 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001ea8:	f248 0302 	movw	r3, #32770	; 0x8002
 8001eac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001eb2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 f86c 	bl	8005f98 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ec6:	f000 f804 	bl	8001ed2 <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3790      	adds	r7, #144	; 0x90
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <MX_OPAMP1_Init+0x58>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001f0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001f12:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001f1e:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_OPAMP1_Init+0x54>)
 8001f20:	f002 fe6c 	bl	8004bfc <HAL_OPAMP_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8001f2a:	f7ff ffd2 	bl	8001ed2 <Error_Handler>
  }

}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200002f4 	.word	0x200002f4
 8001f38:	40010300 	.word	0x40010300

08001f3c <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f42:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <MX_OPAMP2_Init+0x58>)
 8001f44:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f6e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_OPAMP2_Init+0x54>)
 8001f7c:	f002 fe3e 	bl	8004bfc <HAL_OPAMP_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8001f86:	f7ff ffa4 	bl	8001ed2 <Error_Handler>
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000027c 	.word	0x2000027c
 8001f94:	40010304 	.word	0x40010304

08001f98 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001f9e:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <MX_OPAMP3_Init+0x58>)
 8001fa0:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001fca:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_OPAMP3_Init+0x54>)
 8001fd8:	f002 fe10 	bl	8004bfc <HAL_OPAMP_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8001fe2:	f7ff ff76 	bl	8001ed2 <Error_Handler>
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200002b8 	.word	0x200002b8
 8001ff0:	40010308 	.word	0x40010308

08001ff4 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2e      	ldr	r2, [pc, #184]	; (80020cc <HAL_OPAMP_MspInit+0xd8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d119      	bne.n	800204a <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <HAL_OPAMP_MspInit+0xdc>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	4a2d      	ldr	r2, [pc, #180]	; (80020d0 <HAL_OPAMP_MspInit+0xdc>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002022:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_OPAMP_MspInit+0xdc>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800202e:	230e      	movs	r3, #14
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002032:	2303      	movs	r3, #3
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002044:	f002 fc40 	bl	80048c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8002048:	e03b      	b.n	80020c2 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <HAL_OPAMP_MspInit+0xe0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d119      	bne.n	8002088 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_OPAMP_MspInit+0xdc>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_OPAMP_MspInit+0xdc>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_OPAMP_MspInit+0xdc>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800206c:	23e0      	movs	r3, #224	; 0xe0
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002070:	2303      	movs	r3, #3
 8002072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002082:	f002 fc21 	bl	80048c8 <HAL_GPIO_Init>
}
 8002086:	e01c      	b.n	80020c2 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_OPAMP_MspInit+0xe4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d117      	bne.n	80020c2 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_OPAMP_MspInit+0xdc>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_OPAMP_MspInit+0xdc>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_OPAMP_MspInit+0xdc>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80020aa:	2307      	movs	r3, #7
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ae:	2303      	movs	r3, #3
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	4807      	ldr	r0, [pc, #28]	; (80020dc <HAL_OPAMP_MspInit+0xe8>)
 80020be:	f002 fc03 	bl	80048c8 <HAL_GPIO_Init>
}
 80020c2:	bf00      	nop
 80020c4:	3728      	adds	r7, #40	; 0x28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40010300 	.word	0x40010300
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010304 	.word	0x40010304
 80020d8:	40010308 	.word	0x40010308
 80020dc:	48000400 	.word	0x48000400

080020e0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80020ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ee:	6093      	str	r3, [r2, #8]
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40007000 	.word	0x40007000

08002100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_MspInit+0x44>)
 8002108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_MspInit+0x44>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6613      	str	r3, [r2, #96]	; 0x60
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_MspInit+0x44>)
 8002114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_MspInit+0x44>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_MspInit+0x44>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_MspInit+0x44>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8002136:	f7ff ffd3 	bl	80020e0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000

08002148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <MemManage_Handler+0x4>

08002162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <BusFault_Handler+0x4>

08002168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <UsageFault_Handler+0x4>

0800216e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219c:	f000 fc24 	bl	80029e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021a8:	4803      	ldr	r0, [pc, #12]	; (80021b8 <ADC1_2_IRQHandler+0x14>)
 80021aa:	f000 fefd 	bl	8002fa8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80021ae:	4803      	ldr	r0, [pc, #12]	; (80021bc <ADC1_2_IRQHandler+0x18>)
 80021b0:	f000 fefa 	bl	8002fa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000100 	.word	0x20000100
 80021bc:	20000094 	.word	0x20000094

080021c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80021c6:	f004 fbfa 	bl	80069be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000037c 	.word	0x2000037c

080021d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <TIM2_IRQHandler+0x10>)
 80021da:	f004 fbf0 	bl	80069be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200003c8 	.word	0x200003c8

080021e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <USART2_IRQHandler+0x10>)
 80021ee:	f005 feef 	bl	8007fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000414 	.word	0x20000414

080021fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002200:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002204:	f002 fce2 	bl	8004bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <SystemInit+0x28>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	4a07      	ldr	r2, [pc, #28]	; (8002234 <SystemInit+0x28>)
 8002218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <SystemInit+0x28>)
 8002222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002226:	609a      	str	r2, [r3, #8]
#endif
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b09c      	sub	sp, #112	; 0x70
 800223c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002258:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
 8002268:	615a      	str	r2, [r3, #20]
 800226a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2234      	movs	r2, #52	; 0x34
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f007 ff44 	bl	800a100 <memset>

  htim1.Instance = TIM1;
 8002278:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 800227a:	4a5e      	ldr	r2, [pc, #376]	; (80023f4 <MX_TIM1_Init+0x1bc>)
 800227c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800227e:	4b5c      	ldr	r3, [pc, #368]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 8002280:	2200      	movs	r2, #0
 8002282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002284:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 8002286:	2220      	movs	r2, #32
 8002288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800228a:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002290:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002296:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 8002298:	2200      	movs	r2, #0
 800229a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229c:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022a2:	4853      	ldr	r0, [pc, #332]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 80022a4:	f004 f868 	bl	8006378 <HAL_TIM_Base_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022ae:	f7ff fe10 	bl	8001ed2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022bc:	4619      	mov	r1, r3
 80022be:	484c      	ldr	r0, [pc, #304]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 80022c0:	f004 fe0c 	bl	8006edc <HAL_TIM_ConfigClockSource>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022ca:	f7ff fe02 	bl	8001ed2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022ce:	4848      	ldr	r0, [pc, #288]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 80022d0:	f004 f90f 	bl	80064f2 <HAL_TIM_PWM_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022da:	f7ff fdfa 	bl	8001ed2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80022de:	2370      	movs	r3, #112	; 0x70
 80022e0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022ee:	4619      	mov	r1, r3
 80022f0:	483f      	ldr	r0, [pc, #252]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 80022f2:	f005 fbb7 	bl	8007a64 <HAL_TIMEx_MasterConfigSynchronization>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80022fc:	f7ff fde9 	bl	8001ed2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002300:	2360      	movs	r3, #96	; 0x60
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002308:	2300      	movs	r3, #0
 800230a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800230c:	2300      	movs	r3, #0
 800230e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002318:	2300      	movs	r3, #0
 800231a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800231c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002320:	2200      	movs	r2, #0
 8002322:	4619      	mov	r1, r3
 8002324:	4832      	ldr	r0, [pc, #200]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 8002326:	f004 fcc9 	bl	8006cbc <HAL_TIM_PWM_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002330:	f7ff fdcf 	bl	8001ed2 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800233c:	2204      	movs	r2, #4
 800233e:	4619      	mov	r1, r3
 8002340:	482b      	ldr	r0, [pc, #172]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 8002342:	f004 fcbb 	bl	8006cbc <HAL_TIM_PWM_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800234c:	f7ff fdc1 	bl	8001ed2 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002354:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002358:	2208      	movs	r2, #8
 800235a:	4619      	mov	r1, r3
 800235c:	4824      	ldr	r0, [pc, #144]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 800235e:	f004 fcad 	bl	8006cbc <HAL_TIM_PWM_ConfigChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8002368:	f7ff fdb3 	bl	8001ed2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800236c:	2370      	movs	r3, #112	; 0x70
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002374:	2300      	movs	r3, #0
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002378:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800237c:	220c      	movs	r2, #12
 800237e:	4619      	mov	r1, r3
 8002380:	481b      	ldr	r0, [pc, #108]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 8002382:	f004 fc9b 	bl	8006cbc <HAL_TIM_PWM_ConfigChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 800238c:	f7ff fda1 	bl	8001ed2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002394:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 80023a0:	2344      	movs	r3, #68	; 0x44
 80023a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 80023c0:	2303      	movs	r3, #3
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	4619      	mov	r1, r3
 80023d0:	4807      	ldr	r0, [pc, #28]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 80023d2:	f005 fbc9 	bl	8007b68 <HAL_TIMEx_ConfigBreakDeadTime>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 80023dc:	f7ff fd79 	bl	8001ed2 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <MX_TIM1_Init+0x1b8>)
 80023e2:	f000 f965 	bl	80026b0 <HAL_TIM_MspPostInit>

}
 80023e6:	bf00      	nop
 80023e8:	3770      	adds	r7, #112	; 0x70
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000037c 	.word	0x2000037c
 80023f4:	40012c00 	.word	0x40012c00

080023f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <MX_TIM2_Init+0x94>)
 8002418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800241c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <MX_TIM2_Init+0x94>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_TIM2_Init+0x94>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <MX_TIM2_Init+0x94>)
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <MX_TIM2_Init+0x94>)
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <MX_TIM2_Init+0x94>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800243c:	4813      	ldr	r0, [pc, #76]	; (800248c <MX_TIM2_Init+0x94>)
 800243e:	f003 ff9b 	bl	8006378 <HAL_TIM_Base_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002448:	f7ff fd43 	bl	8001ed2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800244c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4619      	mov	r1, r3
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <MX_TIM2_Init+0x94>)
 800245a:	f004 fd3f 	bl	8006edc <HAL_TIM_ConfigClockSource>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002464:	f7ff fd35 	bl	8001ed2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002468:	2300      	movs	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_TIM2_Init+0x94>)
 8002476:	f005 faf5 	bl	8007a64 <HAL_TIMEx_MasterConfigSynchronization>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002480:	f7ff fd27 	bl	8001ed2 <Error_Handler>
  }

}
 8002484:	bf00      	nop
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	200003c8 	.word	0x200003c8

08002490 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f007 fe2e 	bl	800a100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	463b      	mov	r3, r7
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <MX_TIM4_Init+0xa0>)
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <MX_TIM4_Init+0xa4>)
 80024b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <MX_TIM4_Init+0xa0>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MX_TIM4_Init+0xa0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <MX_TIM4_Init+0xa0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_TIM4_Init+0xa0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_TIM4_Init+0xa0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <MX_TIM4_Init+0xa8>)
 80024d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <MX_TIM4_Init+0xa0>)
 80024fe:	f004 f92b 	bl	8006758 <HAL_TIM_Encoder_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002508:	f7ff fce3 	bl	8001ed2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_TIM4_Init+0xa0>)
 800251a:	f005 faa3 	bl	8007a64 <HAL_TIMEx_MasterConfigSynchronization>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002524:	f7ff fcd5 	bl	8001ed2 <Error_Handler>
  }

}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000330 	.word	0x20000330
 8002534:	40000800 	.word	0x40000800
 8002538:	00010006 	.word	0x00010006

0800253c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a29      	ldr	r2, [pc, #164]	; (8002600 <HAL_TIM_Base_MspInit+0xc4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d114      	bne.n	8002588 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	4a28      	ldr	r2, [pc, #160]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 8002564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002568:	6613      	str	r3, [r2, #96]	; 0x60
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	2019      	movs	r0, #25
 800257c:	f002 f909 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002580:	2019      	movs	r0, #25
 8002582:	f002 f920 	bl	80047c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002586:	e036      	b.n	80025f6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002590:	d131      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6593      	str	r3, [r2, #88]	; 0x58
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 80025c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025d4:	2301      	movs	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4619      	mov	r1, r3
 80025de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e2:	f002 f971 	bl	80048c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2103      	movs	r1, #3
 80025ea:	201c      	movs	r0, #28
 80025ec:	f002 f8d1 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025f0:	201c      	movs	r0, #28
 80025f2:	f002 f8e8 	bl	80047c6 <HAL_NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3728      	adds	r7, #40	; 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d138      	bne.n	800269c <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <HAL_TIM_Encoder_MspInit+0xa0>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6593      	str	r3, [r2, #88]	; 0x58
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 800265a:	23c0      	movs	r3, #192	; 0xc0
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002662:	2302      	movs	r3, #2
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002666:	2302      	movs	r3, #2
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800266a:	2302      	movs	r3, #2
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	480d      	ldr	r0, [pc, #52]	; (80026ac <HAL_TIM_Encoder_MspInit+0xa4>)
 8002676:	f002 f927 	bl	80048c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 800267a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002684:	2301      	movs	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002688:	2302      	movs	r3, #2
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800268c:	2302      	movs	r3, #2
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4619      	mov	r1, r3
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <HAL_TIM_Encoder_MspInit+0xa4>)
 8002698:	f002 f916 	bl	80048c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800269c:	bf00      	nop
 800269e:	3728      	adds	r7, #40	; 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000400 	.word	0x48000400

080026b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a38      	ldr	r2, [pc, #224]	; (80027b0 <HAL_TIM_MspPostInit+0x100>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d169      	bne.n	80027a6 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d2:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <HAL_TIM_MspPostInit+0x104>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	4a37      	ldr	r2, [pc, #220]	; (80027b4 <HAL_TIM_MspPostInit+0x104>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026de:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_TIM_MspPostInit+0x104>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_TIM_MspPostInit+0x104>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	4a31      	ldr	r2, [pc, #196]	; (80027b4 <HAL_TIM_MspPostInit+0x104>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_TIM_MspPostInit+0x104>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_TIM_MspPostInit+0x104>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <HAL_TIM_MspPostInit+0x104>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_TIM_MspPostInit+0x104>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800271a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002724:	2302      	movs	r3, #2
 8002726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800272c:	2304      	movs	r3, #4
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4820      	ldr	r0, [pc, #128]	; (80027b8 <HAL_TIM_MspPostInit+0x108>)
 8002738:	f002 f8c6 	bl	80048c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800273c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002746:	2302      	movs	r3, #2
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274a:	2302      	movs	r3, #2
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800274e:	2304      	movs	r3, #4
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4818      	ldr	r0, [pc, #96]	; (80027bc <HAL_TIM_MspPostInit+0x10c>)
 800275a:	f002 f8b5 	bl	80048c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800275e:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8002762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002768:	2302      	movs	r3, #2
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800276c:	2302      	movs	r3, #2
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002770:	2306      	movs	r3, #6
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277e:	f002 f8a3 	bl	80048c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002794:	230b      	movs	r3, #11
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a2:	f002 f891 	bl	80048c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027a6:	bf00      	nop
 80027a8:	3728      	adds	r7, #40	; 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	48000800 	.word	0x48000800
 80027bc:	48000400 	.word	0x48000400

080027c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027c6:	4a23      	ldr	r2, [pc, #140]	; (8002854 <MX_USART2_UART_Init+0x94>)
 80027c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ca:	4b21      	ldr	r3, [pc, #132]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027e6:	220c      	movs	r2, #12
 80027e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f0:	4b17      	ldr	r3, [pc, #92]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <MX_USART2_UART_Init+0x90>)
 80027fe:	2200      	movs	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <MX_USART2_UART_Init+0x90>)
 8002804:	2200      	movs	r2, #0
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002808:	4811      	ldr	r0, [pc, #68]	; (8002850 <MX_USART2_UART_Init+0x90>)
 800280a:	f005 fab8 	bl	8007d7e <HAL_UART_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002814:	f7ff fb5d 	bl	8001ed2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002818:	2100      	movs	r1, #0
 800281a:	480d      	ldr	r0, [pc, #52]	; (8002850 <MX_USART2_UART_Init+0x90>)
 800281c:	f007 fa9f 	bl	8009d5e <HAL_UARTEx_SetTxFifoThreshold>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002826:	f7ff fb54 	bl	8001ed2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800282a:	2100      	movs	r1, #0
 800282c:	4808      	ldr	r0, [pc, #32]	; (8002850 <MX_USART2_UART_Init+0x90>)
 800282e:	f007 fad4 	bl	8009dda <HAL_UARTEx_SetRxFifoThreshold>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002838:	f7ff fb4b 	bl	8001ed2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800283c:	4804      	ldr	r0, [pc, #16]	; (8002850 <MX_USART2_UART_Init+0x90>)
 800283e:	f007 fa55 	bl	8009cec <HAL_UARTEx_DisableFifoMode>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002848:	f7ff fb43 	bl	8001ed2 <Error_Handler>
  }

}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000414 	.word	0x20000414
 8002854:	40004400 	.word	0x40004400

08002858 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_UART_MspInit+0x8c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d12f      	bne.n	80028da <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_UART_MspInit+0x90>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <HAL_UART_MspInit+0x90>)
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	6593      	str	r3, [r2, #88]	; 0x58
 8002886:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_UART_MspInit+0x90>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_UART_MspInit+0x90>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <HAL_UART_MspInit+0x90>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_UART_MspInit+0x90>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80028aa:	2318      	movs	r3, #24
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ba:	2307      	movs	r3, #7
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	4809      	ldr	r0, [pc, #36]	; (80028ec <HAL_UART_MspInit+0x94>)
 80028c6:	f001 ffff 	bl	80048c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2108      	movs	r1, #8
 80028ce:	2026      	movs	r0, #38	; 0x26
 80028d0:	f001 ff5f 	bl	8004792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028d4:	2026      	movs	r0, #38	; 0x26
 80028d6:	f001 ff76 	bl	80047c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028da:	bf00      	nop
 80028dc:	3728      	adds	r7, #40	; 0x28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40004400 	.word	0x40004400
 80028e8:	40021000 	.word	0x40021000
 80028ec:	48000400 	.word	0x48000400

080028f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028f0:	480d      	ldr	r0, [pc, #52]	; (8002928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028f4:	480d      	ldr	r0, [pc, #52]	; (800292c <LoopForever+0x6>)
  ldr r1, =_edata
 80028f6:	490e      	ldr	r1, [pc, #56]	; (8002930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028f8:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <LoopForever+0xe>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028fc:	e002      	b.n	8002904 <LoopCopyDataInit>

080028fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002902:	3304      	adds	r3, #4

08002904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002908:	d3f9      	bcc.n	80028fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <LoopForever+0x12>)
  ldr r4, =_ebss
 800290c:	4c0b      	ldr	r4, [pc, #44]	; (800293c <LoopForever+0x16>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002910:	e001      	b.n	8002916 <LoopFillZerobss>

08002912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002914:	3204      	adds	r2, #4

08002916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002918:	d3fb      	bcc.n	8002912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800291a:	f7ff fc77 	bl	800220c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800291e:	f007 fbcb 	bl	800a0b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002922:	f7ff fa53 	bl	8001dcc <main>

08002926 <LoopForever>:

LoopForever:
    b LoopForever
 8002926:	e7fe      	b.n	8002926 <LoopForever>
  ldr   r0, =_estack
 8002928:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800292c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002930:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002934:	0800ad50 	.word	0x0800ad50
  ldr r2, =_sbss
 8002938:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800293c:	200004a4 	.word	0x200004a4

08002940 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002940:	e7fe      	b.n	8002940 <COMP1_2_3_IRQHandler>

08002942 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f001 ff15 	bl	800477c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002952:	2000      	movs	r0, #0
 8002954:	f000 f80e 	bl	8002974 <HAL_InitTick>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	71fb      	strb	r3, [r7, #7]
 8002962:	e001      	b.n	8002968 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002964:	f7ff fbcc 	bl	8002100 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002968:	79fb      	ldrb	r3, [r7, #7]

}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_InitTick+0x68>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d022      	beq.n	80029ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_InitTick+0x6c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_InitTick+0x68>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002994:	fbb1 f3f3 	udiv	r3, r1, r3
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	4618      	mov	r0, r3
 800299e:	f001 ff20 	bl	80047e2 <HAL_SYSTICK_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10f      	bne.n	80029c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	d809      	bhi.n	80029c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ae:	2200      	movs	r2, #0
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	f04f 30ff 	mov.w	r0, #4294967295
 80029b6:	f001 feec 	bl	8004792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_InitTick+0x70>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	e007      	b.n	80029d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e004      	b.n	80029d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	e001      	b.n	80029d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000008 	.word	0x20000008
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_IncTick+0x1c>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_IncTick+0x20>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	4a03      	ldr	r2, [pc, #12]	; (8002a04 <HAL_IncTick+0x1c>)
 80029f8:	6013      	str	r3, [r2, #0]
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	200004a0 	.word	0x200004a0
 8002a08:	20000008 	.word	0x20000008

08002a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <HAL_GetTick+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	200004a0 	.word	0x200004a0

08002a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff ffee 	bl	8002a0c <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d004      	beq.n	8002a48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_Delay+0x40>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4413      	add	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a48:	bf00      	nop
 8002a4a:	f7ff ffdf 	bl	8002a0c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d8f7      	bhi.n	8002a4a <HAL_Delay+0x26>
  {
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000008 	.word	0x20000008

08002a68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	609a      	str	r2, [r3, #8]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 031f 	and.w	r3, r3, #31
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6093      	str	r3, [r2, #8]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4a:	d101      	bne.n	8002b50 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9a:	d101      	bne.n	8002ba0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc2:	f043 0201 	orr.w	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002be6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bea:	f043 0202 	orr.w	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <LL_ADC_IsEnabled+0x18>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <LL_ADC_IsEnabled+0x1a>
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d101      	bne.n	8002c3c <LL_ADC_IsDisableOngoing+0x18>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <LL_ADC_IsDisableOngoing+0x1a>
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d101      	bne.n	8002c62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d101      	bne.n	8002c88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e16b      	b.n	8002f8a <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fe f9d5 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff2c 	bl	8002b36 <LL_ADC_IsDeepPowerDownEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff12 	bl	8002b12 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff47 	bl	8002b86 <LL_ADC_IsInternalRegulatorEnabled>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d113      	bne.n	8002d26 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff2b 	bl	8002b5e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d08:	4ba2      	ldr	r3, [pc, #648]	; (8002f94 <HAL_ADC_Init+0x2fc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	4aa2      	ldr	r2, [pc, #648]	; (8002f98 <HAL_ADC_Init+0x300>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d18:	e002      	b.n	8002d20 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f9      	bne.n	8002d1a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff2b 	bl	8002b86 <LL_ADC_IsInternalRegulatorEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	f043 0210 	orr.w	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff77 	bl	8002c4a <LL_ADC_REG_IsConversionOngoing>
 8002d5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 8106 	bne.w	8002f78 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 8102 	bne.w	8002f78 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d7c:	f043 0202 	orr.w	r2, r3, #2
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff38 	bl	8002bfe <LL_ADC_IsEnabled>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d111      	bne.n	8002db8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d98:	f7ff ff31 	bl	8002bfe <LL_ADC_IsEnabled>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	487f      	ldr	r0, [pc, #508]	; (8002f9c <HAL_ADC_Init+0x304>)
 8002da0:	f7ff ff2d 	bl	8002bfe <LL_ADC_IsEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4323      	orrs	r3, r4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4619      	mov	r1, r3
 8002db2:	487b      	ldr	r0, [pc, #492]	; (8002fa0 <HAL_ADC_Init+0x308>)
 8002db4:	f7ff fe58 	bl	8002a68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7f5b      	ldrb	r3, [r3, #29]
 8002dbc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dc2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002dc8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002dce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d106      	bne.n	8002df4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	045b      	lsls	r3, r3, #17
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d009      	beq.n	8002e10 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <HAL_ADC_Init+0x30c>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff03 	bl	8002c4a <LL_ADC_REG_IsConversionOngoing>
 8002e44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff10 	bl	8002c70 <LL_ADC_INJ_IsConversionOngoing>
 8002e50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d16d      	bne.n	8002f34 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d16a      	bne.n	8002f34 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e62:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e6a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7a:	f023 0302 	bic.w	r3, r3, #2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d017      	beq.n	8002ec0 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ea8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6911      	ldr	r1, [r2, #16]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002ebe:	e013      	b.n	8002ee8 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ece:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ee4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d118      	bne.n	8002f24 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f14:	430a      	orrs	r2, r1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	e007      	b.n	8002f34 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10c      	bne.n	8002f56 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f023 010f 	bic.w	r1, r3, #15
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	1e5a      	subs	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
 8002f54:	e007      	b.n	8002f66 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 020f 	bic.w	r2, r2, #15
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	f023 0303 	bic.w	r3, r3, #3
 8002f6e:	f043 0201 	orr.w	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f76:	e007      	b.n	8002f88 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	f043 0210 	orr.w	r2, r3, #16
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3724      	adds	r7, #36	; 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd90      	pop	{r4, r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000000 	.word	0x20000000
 8002f98:	053e2d63 	.word	0x053e2d63
 8002f9c:	50000100 	.word	0x50000100
 8002fa0:	50000300 	.word	0x50000300
 8002fa4:	fff04007 	.word	0xfff04007

08002fa8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fc4:	4883      	ldr	r0, [pc, #524]	; (80031d4 <HAL_ADC_IRQHandler+0x22c>)
 8002fc6:	f7ff fd88 	bl	8002ada <LL_ADC_GetMultimode>
 8002fca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d017      	beq.n	8003006 <HAL_ADC_IRQHandler+0x5e>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d012      	beq.n	8003006 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fded 	bl	8003bd8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2202      	movs	r2, #2
 8003004:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_ADC_IRQHandler+0x72>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8085 	beq.w	8003130 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d07f      	beq.n	8003130 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fd1e 	bl	8002a8e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d064      	beq.n	8003122 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5e      	ldr	r2, [pc, #376]	; (80031d8 <HAL_ADC_IRQHandler+0x230>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d002      	beq.n	8003068 <HAL_ADC_IRQHandler+0xc0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	e001      	b.n	800306c <HAL_ADC_IRQHandler+0xc4>
 8003068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	4293      	cmp	r3, r2
 8003072:	d008      	beq.n	8003086 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d002      	beq.n	8003086 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b09      	cmp	r3, #9
 8003084:	d104      	bne.n	8003090 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	e00d      	b.n	80030ac <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a50      	ldr	r2, [pc, #320]	; (80031d8 <HAL_ADC_IRQHandler+0x230>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d002      	beq.n	80030a0 <HAL_ADC_IRQHandler+0xf8>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	e001      	b.n	80030a4 <HAL_ADC_IRQHandler+0xfc>
 80030a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030a4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d135      	bne.n	8003122 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d12e      	bne.n	8003122 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fdbe 	bl	8002c4a <LL_ADC_REG_IsConversionOngoing>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11a      	bne.n	800310a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 020c 	bic.w	r2, r2, #12
 80030e2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d112      	bne.n	8003122 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	65da      	str	r2, [r3, #92]	; 0x5c
 8003108:	e00b      	b.n	8003122 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	f043 0210 	orr.w	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f95a 	bl	80033dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	220c      	movs	r2, #12
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <HAL_ADC_IRQHandler+0x19c>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 809e 	beq.w	800328c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8098 	beq.w	800328c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fc9b 	bl	8002ab4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800317e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fc82 	bl	8002a8e <LL_ADC_REG_IsTriggerSourceSWStart>
 800318a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <HAL_ADC_IRQHandler+0x230>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d002      	beq.n	800319c <HAL_ADC_IRQHandler+0x1f4>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	e001      	b.n	80031a0 <HAL_ADC_IRQHandler+0x1f8>
 800319c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d008      	beq.n	80031ba <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b06      	cmp	r3, #6
 80031b2:	d002      	beq.n	80031ba <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b07      	cmp	r3, #7
 80031b8:	d104      	bne.n	80031c4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	e011      	b.n	80031e8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a03      	ldr	r2, [pc, #12]	; (80031d8 <HAL_ADC_IRQHandler+0x230>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d006      	beq.n	80031dc <HAL_ADC_IRQHandler+0x234>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	e005      	b.n	80031e0 <HAL_ADC_IRQHandler+0x238>
 80031d4:	50000300 	.word	0x50000300
 80031d8:	50000100 	.word	0x50000100
 80031dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031e0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10c      	bne.n	8003208 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d142      	bne.n	800327e <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d03f      	beq.n	800327e <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003204:	2b00      	cmp	r3, #0
 8003206:	d13a      	bne.n	800327e <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d133      	bne.n	800327e <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d12e      	bne.n	800327e <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fd23 	bl	8002c70 <LL_ADC_INJ_IsConversionOngoing>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11a      	bne.n	8003266 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800323e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d112      	bne.n	800327e <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	65da      	str	r2, [r3, #92]	; 0x5c
 8003264:	e00b      	b.n	800327e <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	f043 0210 	orr.w	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fb5c 	bl	800193c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2260      	movs	r2, #96	; 0x60
 800328a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d011      	beq.n	80032ba <HAL_ADC_IRQHandler+0x312>
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00c      	beq.n	80032ba <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f89f 	bl	80033f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d012      	beq.n	80032ea <HAL_ADC_IRQHandler+0x342>
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fc68 	bl	8003bb0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d012      	beq.n	800331a <HAL_ADC_IRQHandler+0x372>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fc5a 	bl	8003bc4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003318:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d036      	beq.n	8003392 <HAL_ADC_IRQHandler+0x3ea>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	d031      	beq.n	8003392 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003336:	2301      	movs	r3, #1
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	e014      	b.n	8003366 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003342:	4825      	ldr	r0, [pc, #148]	; (80033d8 <HAL_ADC_IRQHandler+0x430>)
 8003344:	f7ff fbd7 	bl	8002af6 <LL_ADC_GetMultiDMATransfer>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800334e:	2301      	movs	r3, #1
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
 8003352:	e008      	b.n	8003366 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003362:	2301      	movs	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10e      	bne.n	800338a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337c:	f043 0202 	orr.w	r2, r3, #2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f83d 	bl	8003404 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2210      	movs	r2, #16
 8003390:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d018      	beq.n	80033ce <HAL_ADC_IRQHandler+0x426>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d013      	beq.n	80033ce <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b6:	f043 0208 	orr.w	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fbe7 	bl	8003b9c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80033ce:	bf00      	nop
 80033d0:	3728      	adds	r7, #40	; 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	50000300 	.word	0x50000300

080033dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fbea 	bl	8002bfe <LL_ADC_IsEnabled>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d146      	bne.n	80034be <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <ADC_Enable+0xb0>)
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	f043 0210 	orr.w	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e032      	b.n	80034c0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fba5 	bl	8002bae <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003464:	f7ff fad2 	bl	8002a0c <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800346a:	e021      	b.n	80034b0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fbc4 	bl	8002bfe <LL_ADC_IsEnabled>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fb94 	bl	8002bae <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003486:	f7ff fac1 	bl	8002a0c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d90d      	bls.n	80034b0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	f043 0210 	orr.w	r2, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e007      	b.n	80034c0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d1d6      	bne.n	800346c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	8000003f 	.word	0x8000003f

080034cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fba3 	bl	8002c24 <LL_ADC_IsDisableOngoing>
 80034de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fb8a 	bl	8002bfe <LL_ADC_IsEnabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d040      	beq.n	8003572 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d13d      	bne.n	8003572 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030d 	and.w	r3, r3, #13
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10c      	bne.n	800351e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fb64 	bl	8002bd6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2203      	movs	r2, #3
 8003514:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003516:	f7ff fa79 	bl	8002a0c <HAL_GetTick>
 800351a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800351c:	e022      	b.n	8003564 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	f043 0210 	orr.w	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01c      	b.n	8003574 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800353a:	f7ff fa67 	bl	8002a0c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d90d      	bls.n	8003564 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e007      	b.n	8003574 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e3      	bne.n	800353a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <LL_ADC_SetCommonPathInternalCh>:
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_ADC_GetCommonPathInternalCh>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <LL_ADC_SetOffset>:
{
 80035c0:	b490      	push	{r4, r7}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3360      	adds	r3, #96	; 0x60
 80035d2:	461a      	mov	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <LL_ADC_SetOffset+0x40>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035f2:	6023      	str	r3, [r4, #0]
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc90      	pop	{r4, r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	03fff000 	.word	0x03fff000

08003604 <LL_ADC_GetOffsetChannel>:
{
 8003604:	b490      	push	{r4, r7}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3360      	adds	r3, #96	; 0x60
 8003612:	461a      	mov	r2, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bc90      	pop	{r4, r7}
 800362a:	4770      	bx	lr

0800362c <LL_ADC_SetOffsetState>:
{
 800362c:	b490      	push	{r4, r7}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3360      	adds	r3, #96	; 0x60
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4313      	orrs	r3, r2
 8003650:	6023      	str	r3, [r4, #0]
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bc90      	pop	{r4, r7}
 800365a:	4770      	bx	lr

0800365c <LL_ADC_SetOffsetSign>:
{
 800365c:	b490      	push	{r4, r7}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3360      	adds	r3, #96	; 0x60
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4313      	orrs	r3, r2
 8003680:	6023      	str	r3, [r4, #0]
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bc90      	pop	{r4, r7}
 800368a:	4770      	bx	lr

0800368c <LL_ADC_SetOffsetSaturation>:
{
 800368c:	b490      	push	{r4, r7}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3360      	adds	r3, #96	; 0x60
 800369c:	461a      	mov	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	6023      	str	r3, [r4, #0]
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc90      	pop	{r4, r7}
 80036ba:	4770      	bx	lr

080036bc <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	615a      	str	r2, [r3, #20]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <LL_ADC_INJ_GetTrigAuto>:
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <LL_ADC_SetChannelSamplingTime>:
{
 80036fe:	b490      	push	{r4, r7}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3314      	adds	r3, #20
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	0e5b      	lsrs	r3, r3, #25
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	4413      	add	r3, r2
 800371c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	0d1b      	lsrs	r3, r3, #20
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2107      	movs	r1, #7
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	401a      	ands	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	0d1b      	lsrs	r3, r3, #20
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	4313      	orrs	r3, r2
 8003742:	6023      	str	r3, [r4, #0]
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bc90      	pop	{r4, r7}
 800374c:	4770      	bx	lr
	...

08003750 <LL_ADC_SetChannelSingleDiff>:
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003768:	43db      	mvns	r3, r3
 800376a:	401a      	ands	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0318 	and.w	r3, r3, #24
 8003772:	4908      	ldr	r1, [pc, #32]	; (8003794 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003774:	40d9      	lsrs	r1, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	400b      	ands	r3, r1
 800377a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377e:	431a      	orrs	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	0007ffff 	.word	0x0007ffff

08003798 <LL_ADC_GetMultimode>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 031f 	and.w	r3, r3, #31
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <LL_ADC_IsEnabled>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <LL_ADC_IsEnabled+0x18>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <LL_ADC_IsEnabled+0x1a>
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LL_ADC_StartCalibration>:
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80037ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_ADC_IsCalibrationOnGoing>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800381c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003820:	d101      	bne.n	8003826 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_ADC_REG_IsConversionOngoing>:
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b04      	cmp	r3, #4
 8003846:	d101      	bne.n	800384c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_ADC_INJ_StartConversion>:
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800386a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800386e:	f043 0208 	orr.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	609a      	str	r2, [r3, #8]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d101      	bne.n	800389a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_ADCEx_Calibration_Start+0x1c>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e04d      	b.n	8003960 <HAL_ADCEx_Calibration_Start+0xb8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff fdfd 	bl	80034cc <ADC_Disable>
 80038d2:	4603      	mov	r3, r0
 80038d4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d136      	bne.n	800394a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038e4:	f023 0302 	bic.w	r3, r3, #2
 80038e8:	f043 0202 	orr.w	r2, r3, #2
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6839      	ldr	r1, [r7, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff6f 	bl	80037da <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038fc:	e014      	b.n	8003928 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3301      	adds	r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d90d      	bls.n	8003928 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	f023 0312 	bic.w	r3, r3, #18
 8003914:	f043 0210 	orr.w	r2, r3, #16
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e01b      	b.n	8003960 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff6d 	bl	800380c <LL_ADC_IsCalibrationOnGoing>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e2      	bne.n	80038fe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	f023 0303 	bic.w	r3, r3, #3
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	65da      	str	r2, [r3, #92]	; 0x5c
 8003948:	e005      	b.n	8003956 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	f043 0210 	orr.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	0004de01 	.word	0x0004de01

0800396c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003974:	486e      	ldr	r0, [pc, #440]	; (8003b30 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8003976:	f7ff ff0f 	bl	8003798 <LL_ADC_GetMultimode>
 800397a:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff7e 	bl	8003882 <LL_ADC_INJ_IsConversionOngoing>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
 800398e:	e0ca      	b.n	8003b26 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800399a:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0b2      	b.n	8003b26 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_ADCEx_InjectedStart_IT+0x62>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e0ab      	b.n	8003b26 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fd1e 	bl	8003418 <ADC_Enable>
 80039dc:	4603      	mov	r3, r0
 80039de:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 809a 	bne.w	8003b1c <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d006      	beq.n	8003a02 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	f023 0208 	bic.w	r2, r3, #8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60
 8003a00:	e002      	b.n	8003a08 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a44      	ldr	r2, [pc, #272]	; (8003b34 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d002      	beq.n	8003a2c <HAL_ADCEx_InjectedStart_IT+0xc0>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	e001      	b.n	8003a30 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8003a2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d002      	beq.n	8003a3e <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2260      	movs	r2, #96	; 0x60
 8003a50:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a76:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d110      	bne.n	8003aa2 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0220 	bic.w	r2, r2, #32
 8003a8e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9e:	605a      	str	r2, [r3, #4]
          break;
 8003aa0:	e010      	b.n	8003ac4 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0220 	orr.w	r2, r2, #32
 8003ac0:	605a      	str	r2, [r3, #4]
          break;
 8003ac2:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d002      	beq.n	8003ad4 <HAL_ADCEx_InjectedStart_IT+0x168>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	e001      	b.n	8003ad8 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8003ad4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d008      	beq.n	8003af2 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d002      	beq.n	8003af2 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b07      	cmp	r3, #7
 8003af0:	d10d      	bne.n	8003b0e <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fdf3 	bl	80036e2 <LL_ADC_INJ_GetTrigAuto>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d110      	bne.n	8003b24 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fea7 	bl	800385a <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003b0c:	e00a      	b.n	8003b24 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b1a:	e003      	b.n	8003b24 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	50000300 	.word	0x50000300
 8003b34:	50000100 	.word	0x50000100

08003b38 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f240 2215 	movw	r2, #533	; 0x215
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_ADCEx_InjectedGetValue+0x32>
 8003b4c:	f240 321b 	movw	r2, #795	; 0x31b
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_ADCEx_InjectedGetValue+0x26>
 8003b54:	f240 120f 	movw	r2, #271	; 0x10f
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00c      	beq.n	8003b76 <HAL_ADCEx_InjectedGetValue+0x3e>
 8003b5c:	e011      	b.n	8003b82 <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b66:	60fb      	str	r3, [r7, #12]
      break;
 8003b68:	e011      	b.n	8003b8e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	60fb      	str	r3, [r7, #12]
      break;
 8003b74:	e00b      	b.n	8003b8e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	60fb      	str	r3, [r7, #12]
      break;
 8003b80:	e005      	b.n	8003b8e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8a:	60fb      	str	r3, [r7, #12]
      break;
 8003b8c:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b0a8      	sub	sp, #160	; 0xa0
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d102      	bne.n	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003c10:	2302      	movs	r3, #2
 8003c12:	f000 bc39 	b.w	8004488 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d130      	bne.n	8003c90 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b09      	cmp	r3, #9
 8003c34:	d179      	bne.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d010      	beq.n	8003c60 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	0e9b      	lsrs	r3, r3, #26
 8003c44:	025b      	lsls	r3, r3, #9
 8003c46:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003c52:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c5e:	e007      	b.n	8003c70 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	025b      	lsls	r3, r3, #9
 8003c68:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c76:	4ba3      	ldr	r3, [pc, #652]	; (8003f04 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003c82:	430b      	orrs	r3, r1
 8003c84:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003c8c:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003c8e:	e04c      	b.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d11d      	bne.n	8003cd4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6a1a      	ldr	r2, [r3, #32]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003cbc:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cc8:	e004      	b.n	8003cd4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	0e9b      	lsrs	r3, r3, #26
 8003cda:	f003 021f 	and.w	r2, r3, #31
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d1a:	4b7a      	ldr	r3, [pc, #488]	; (8003f04 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	430b      	orrs	r3, r1
 8003d28:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fda7 	bl	8003882 <LL_ADC_INJ_IsConversionOngoing>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d124      	bne.n	8003d84 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d112      	bne.n	8003d6a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003d54:	055a      	lsls	r2, r3, #21
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d5c:	051b      	lsls	r3, r3, #20
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	e00c      	b.n	8003d84 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003d7a:	055a      	lsls	r2, r3, #21
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fd53 	bl	8003834 <LL_ADC_REG_IsConversionOngoing>
 8003d8e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fd73 	bl	8003882 <LL_ADC_INJ_IsConversionOngoing>
 8003d9c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003da0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f040 81d4 	bne.w	8004152 <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 81cf 	bne.w	8004152 <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d116      	bne.n	8003df2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d108      	bne.n	8003de0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003ddc:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003dde:	e01f      	b.n	8003e20 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003dee:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003df0:	e016      	b.n	8003e20 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d109      	bne.n	8003e10 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003e0e:	e007      	b.n	8003e20 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003e1e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d110      	bne.n	8003e4c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0202 	orr.w	r2, r2, #2
 8003e48:	611a      	str	r2, [r3, #16]
 8003e4a:	e007      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0202 	bic.w	r2, r2, #2
 8003e5a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e64:	d10f      	bne.n	8003e86 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	4619      	mov	r1, r3
 8003e72:	f7ff fc44 	bl	80036fe <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fc1c 	bl	80036bc <LL_ADC_SetSamplingTimeCommonConfig>
 8003e84:	e00e      	b.n	8003ea4 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f7ff fc33 	bl	80036fe <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fc0c 	bl	80036bc <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	08db      	lsrs	r3, r3, #3
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d025      	beq.n	8003f12 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6919      	ldr	r1, [r3, #16]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ed6:	f7ff fb73 	bl	80035c0 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6919      	ldr	r1, [r3, #16]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f7ff fbb8 	bl	800365c <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003efc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f00:	e003      	b.n	8003f0a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003f02:	bf00      	nop
 8003f04:	04104000 	.word	0x04104000
 8003f08:	2300      	movs	r3, #0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f7ff fbbe 	bl	800368c <LL_ADC_SetOffsetSaturation>
 8003f10:	e11f      	b.n	8004152 <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fb73 	bl	8003604 <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fb68 	bl	8003604 <LL_ADC_GetOffsetChannel>
 8003f34:	4603      	mov	r3, r0
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	f003 021f 	and.w	r2, r3, #31
 8003f3c:	e014      	b.n	8003f68 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fb5d 	bl	8003604 <LL_ADC_GetOffsetChannel>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f60:	fab3 f383 	clz	r3, r3
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d105      	bne.n	8003f80 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	0e9b      	lsrs	r3, r3, #26
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	e00a      	b.n	8003f96 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f90:	fab3 f383 	clz	r3, r3
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d106      	bne.n	8003fa8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fb42 	bl	800362c <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fb28 	bl	8003604 <LL_ADC_GetOffsetChannel>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fb1d 	bl	8003604 <LL_ADC_GetOffsetChannel>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	0e9b      	lsrs	r3, r3, #26
 8003fce:	f003 021f 	and.w	r2, r3, #31
 8003fd2:	e010      	b.n	8003ff6 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fb12 	bl	8003604 <LL_ADC_GetOffsetChannel>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fee:	fab3 f383 	clz	r3, r3
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d105      	bne.n	800400e <HAL_ADCEx_InjectedConfigChannel+0x422>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	0e9b      	lsrs	r3, r3, #26
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	e00a      	b.n	8004024 <HAL_ADCEx_InjectedConfigChannel+0x438>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 800401c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	429a      	cmp	r2, r3
 8004026:	d106      	bne.n	8004036 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2200      	movs	r2, #0
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fafb 	bl	800362c <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2102      	movs	r1, #2
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fae1 	bl	8003604 <LL_ADC_GetOffsetChannel>
 8004042:	4603      	mov	r3, r0
 8004044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <HAL_ADCEx_InjectedConfigChannel+0x476>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2102      	movs	r1, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fad6 	bl	8003604 <LL_ADC_GetOffsetChannel>
 8004058:	4603      	mov	r3, r0
 800405a:	0e9b      	lsrs	r3, r3, #26
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	e010      	b.n	8004084 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff facb 	bl	8003604 <LL_ADC_GetOffsetChannel>
 800406e:	4603      	mov	r3, r0
 8004070:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800407a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800407c:	fab3 f383 	clz	r3, r3
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	0e9b      	lsrs	r3, r3, #26
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	e00a      	b.n	80040b2 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80040aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ac:	fab3 f383 	clz	r3, r3
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d106      	bne.n	80040c4 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fab4 	bl	800362c <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2103      	movs	r1, #3
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fa9a 	bl	8003604 <LL_ADC_GetOffsetChannel>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <HAL_ADCEx_InjectedConfigChannel+0x504>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2103      	movs	r1, #3
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fa8f 	bl	8003604 <LL_ADC_GetOffsetChannel>
 80040e6:	4603      	mov	r3, r0
 80040e8:	0e9b      	lsrs	r3, r3, #26
 80040ea:	f003 021f 	and.w	r2, r3, #31
 80040ee:	e010      	b.n	8004112 <HAL_ADCEx_InjectedConfigChannel+0x526>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2103      	movs	r1, #3
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fa84 	bl	8003604 <LL_ADC_GetOffsetChannel>
 80040fc:	4603      	mov	r3, r0
 80040fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8004108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <HAL_ADCEx_InjectedConfigChannel+0x53e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0e9b      	lsrs	r3, r3, #26
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	e00a      	b.n	8004140 <HAL_ADCEx_InjectedConfigChannel+0x554>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	429a      	cmp	r2, r3
 8004142:	d106      	bne.n	8004152 <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2200      	movs	r2, #0
 800414a:	2103      	movs	r1, #3
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fa6d 	bl	800362c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fb2c 	bl	80037b4 <LL_ADC_IsEnabled>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 810c 	bne.w	800437c <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6819      	ldr	r1, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	461a      	mov	r2, r3
 8004172:	f7ff faed 	bl	8003750 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4aab      	ldr	r2, [pc, #684]	; (8004428 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	f040 80fd 	bne.w	800437c <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0e9b      	lsrs	r3, r3, #26
 8004198:	3301      	adds	r3, #1
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2b09      	cmp	r3, #9
 80041a0:	bf94      	ite	ls
 80041a2:	2301      	movls	r3, #1
 80041a4:	2300      	movhi	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	e012      	b.n	80041d0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80041b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	3301      	adds	r3, #1
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	2b09      	cmp	r3, #9
 80041c8:	bf94      	ite	ls
 80041ca:	2301      	movls	r3, #1
 80041cc:	2300      	movhi	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d064      	beq.n	800429e <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <HAL_ADCEx_InjectedConfigChannel+0x604>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	0e9b      	lsrs	r3, r3, #26
 80041e6:	3301      	adds	r3, #1
 80041e8:	069b      	lsls	r3, r3, #26
 80041ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ee:	e00e      	b.n	800420e <HAL_ADCEx_InjectedConfigChannel+0x622>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	3301      	adds	r3, #1
 8004208:	069b      	lsls	r3, r3, #26
 800420a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_ADCEx_InjectedConfigChannel+0x642>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0e9b      	lsrs	r3, r3, #26
 8004220:	3301      	adds	r3, #1
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	e010      	b.n	8004250 <HAL_ADCEx_InjectedConfigChannel+0x664>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	3301      	adds	r3, #1
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	2101      	movs	r1, #1
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	ea42 0103 	orr.w	r1, r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	0e9b      	lsrs	r3, r3, #26
 8004266:	3301      	adds	r3, #1
 8004268:	f003 021f 	and.w	r2, r3, #31
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	051b      	lsls	r3, r3, #20
 8004274:	e011      	b.n	800429a <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	3301      	adds	r3, #1
 800428e:	f003 021f 	and.w	r2, r3, #31
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	051b      	lsls	r3, r3, #20
 800429a:	430b      	orrs	r3, r1
 800429c:	e069      	b.n	8004372 <HAL_ADCEx_InjectedConfigChannel+0x786>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	0e9b      	lsrs	r3, r3, #26
 80042b0:	3301      	adds	r3, #1
 80042b2:	069b      	lsls	r3, r3, #26
 80042b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042b8:	e00e      	b.n	80042d8 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	623b      	str	r3, [r7, #32]
  return result;
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	3301      	adds	r3, #1
 80042d2:	069b      	lsls	r3, r3, #26
 80042d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	0e9b      	lsrs	r3, r3, #26
 80042ea:	3301      	adds	r3, #1
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	e010      	b.n	800431a <HAL_ADCEx_InjectedConfigChannel+0x72e>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa93 f3a3 	rbit	r3, r3
 8004304:	61bb      	str	r3, [r7, #24]
  return result;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	fab3 f383 	clz	r3, r3
 800430c:	b2db      	uxtb	r3, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2101      	movs	r1, #1
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	ea42 0103 	orr.w	r1, r2, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	0e9b      	lsrs	r3, r3, #26
 8004330:	3301      	adds	r3, #1
 8004332:	f003 021f 	and.w	r2, r3, #31
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	3b1e      	subs	r3, #30
 800433e:	051b      	lsls	r3, r3, #20
 8004340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004344:	e014      	b.n	8004370 <HAL_ADCEx_InjectedConfigChannel+0x784>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	613b      	str	r3, [r7, #16]
  return result;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	3301      	adds	r3, #1
 800435e:	f003 021f 	and.w	r2, r3, #31
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	3b1e      	subs	r3, #30
 800436a:	051b      	lsls	r3, r3, #20
 800436c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004370:	430b      	orrs	r3, r1
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	6892      	ldr	r2, [r2, #8]
 8004376:	4619      	mov	r1, r3
 8004378:	f7ff f9c1 	bl	80036fe <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b2a      	ldr	r3, [pc, #168]	; (800442c <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d079      	beq.n	800447c <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004388:	4829      	ldr	r0, [pc, #164]	; (8004430 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800438a:	f7ff f90a 	bl	80035a2 <LL_ADC_GetCommonPathInternalCh>
 800438e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a27      	ldr	r2, [pc, #156]	; (8004434 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a25      	ldr	r2, [pc, #148]	; (8004438 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d126      	bne.n	80043f4 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d120      	bne.n	80043f4 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ba:	d15f      	bne.n	800447c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043c4:	4619      	mov	r1, r3
 80043c6:	481a      	ldr	r0, [pc, #104]	; (8004430 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80043c8:	f7ff f8d8 	bl	800357c <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_ADCEx_InjectedConfigChannel+0x850>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	099b      	lsrs	r3, r3, #6
 80043d2:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	099a      	lsrs	r2, r3, #6
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 80043e4:	e002      	b.n	80043ec <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f9      	bne.n	80043e6 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043f2:	e043      	b.n	800447c <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a12      	ldr	r2, [pc, #72]	; (8004444 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d126      	bne.n	800444c <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d120      	bne.n	800444c <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d033      	beq.n	800447c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800441c:	4619      	mov	r1, r3
 800441e:	4804      	ldr	r0, [pc, #16]	; (8004430 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8004420:	f7ff f8ac 	bl	800357c <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004424:	e02a      	b.n	800447c <HAL_ADCEx_InjectedConfigChannel+0x890>
 8004426:	bf00      	nop
 8004428:	407f0000 	.word	0x407f0000
 800442c:	80080000 	.word	0x80080000
 8004430:	50000300 	.word	0x50000300
 8004434:	c3210000 	.word	0xc3210000
 8004438:	90c00010 	.word	0x90c00010
 800443c:	20000000 	.word	0x20000000
 8004440:	053e2d63 	.word	0x053e2d63
 8004444:	c7520000 	.word	0xc7520000
 8004448:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0f      	ldr	r2, [pc, #60]	; (8004490 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d112      	bne.n	800447c <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10c      	bne.n	800447c <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800446c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004470:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004474:	4619      	mov	r1, r3
 8004476:	4808      	ldr	r0, [pc, #32]	; (8004498 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 8004478:	f7ff f880 	bl	800357c <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004484:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8004488:	4618      	mov	r0, r3
 800448a:	37a0      	adds	r7, #160	; 0xa0
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	cb840000 	.word	0xcb840000
 8004494:	50000100 	.word	0x50000100
 8004498:	50000300 	.word	0x50000300

0800449c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b0a1      	sub	sp, #132	; 0x84
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e087      	b.n	80045ca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ca:	d102      	bne.n	80044d2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80044cc:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80044ce:	60bb      	str	r3, [r7, #8]
 80044d0:	e001      	b.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10b      	bne.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e06a      	b.n	80045ca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff f99c 	bl	8003834 <LL_ADC_REG_IsConversionOngoing>
 80044fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f996 	bl	8003834 <LL_ADC_REG_IsConversionOngoing>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d14c      	bne.n	80045a8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800450e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004510:	2b00      	cmp	r3, #0
 8004512:	d149      	bne.n	80045a8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004514:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004516:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d028      	beq.n	8004572 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004532:	035b      	lsls	r3, r3, #13
 8004534:	430b      	orrs	r3, r1
 8004536:	431a      	orrs	r2, r3
 8004538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800453c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004540:	f7ff f938 	bl	80037b4 <LL_ADC_IsEnabled>
 8004544:	4604      	mov	r4, r0
 8004546:	4823      	ldr	r0, [pc, #140]	; (80045d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004548:	f7ff f934 	bl	80037b4 <LL_ADC_IsEnabled>
 800454c:	4603      	mov	r3, r0
 800454e:	4323      	orrs	r3, r4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d133      	bne.n	80045bc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800455c:	f023 030f 	bic.w	r3, r3, #15
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	6811      	ldr	r1, [r2, #0]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	6892      	ldr	r2, [r2, #8]
 8004568:	430a      	orrs	r2, r1
 800456a:	431a      	orrs	r2, r3
 800456c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800456e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004570:	e024      	b.n	80045bc <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800457a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800457e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004582:	f7ff f917 	bl	80037b4 <LL_ADC_IsEnabled>
 8004586:	4604      	mov	r4, r0
 8004588:	4812      	ldr	r0, [pc, #72]	; (80045d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800458a:	f7ff f913 	bl	80037b4 <LL_ADC_IsEnabled>
 800458e:	4603      	mov	r3, r0
 8004590:	4323      	orrs	r3, r4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d112      	bne.n	80045bc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800459e:	f023 030f 	bic.w	r3, r3, #15
 80045a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045a6:	e009      	b.n	80045bc <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045ba:	e000      	b.n	80045be <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3784      	adds	r7, #132	; 0x84
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd90      	pop	{r4, r7, pc}
 80045d2:	bf00      	nop
 80045d4:	50000100 	.word	0x50000100
 80045d8:	50000300 	.word	0x50000300

080045dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045f8:	4013      	ands	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800460e:	4a04      	ldr	r2, [pc, #16]	; (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	60d3      	str	r3, [r2, #12]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <__NVIC_GetPriorityGrouping+0x18>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	f003 0307 	and.w	r3, r3, #7
}
 8004632:	4618      	mov	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	2b00      	cmp	r3, #0
 8004650:	db0b      	blt.n	800466a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	f003 021f 	and.w	r2, r3, #31
 8004658:	4907      	ldr	r1, [pc, #28]	; (8004678 <__NVIC_EnableIRQ+0x38>)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2001      	movs	r0, #1
 8004662:	fa00 f202 	lsl.w	r2, r0, r2
 8004666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	e000e100 	.word	0xe000e100

0800467c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	6039      	str	r1, [r7, #0]
 8004686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db0a      	blt.n	80046a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	490c      	ldr	r1, [pc, #48]	; (80046c8 <__NVIC_SetPriority+0x4c>)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	440b      	add	r3, r1
 80046a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046a4:	e00a      	b.n	80046bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4908      	ldr	r1, [pc, #32]	; (80046cc <__NVIC_SetPriority+0x50>)
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	3b04      	subs	r3, #4
 80046b4:	0112      	lsls	r2, r2, #4
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	440b      	add	r3, r1
 80046ba:	761a      	strb	r2, [r3, #24]
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000e100 	.word	0xe000e100
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	; 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f1c3 0307 	rsb	r3, r3, #7
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	bf28      	it	cs
 80046ee:	2304      	movcs	r3, #4
 80046f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d902      	bls.n	8004700 <NVIC_EncodePriority+0x30>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3b03      	subs	r3, #3
 80046fe:	e000      	b.n	8004702 <NVIC_EncodePriority+0x32>
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004704:	f04f 32ff 	mov.w	r2, #4294967295
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	401a      	ands	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004718:	f04f 31ff 	mov.w	r1, #4294967295
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	fa01 f303 	lsl.w	r3, r1, r3
 8004722:	43d9      	mvns	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	4313      	orrs	r3, r2
         );
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	; 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004748:	d301      	bcc.n	800474e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800474a:	2301      	movs	r3, #1
 800474c:	e00f      	b.n	800476e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800474e:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <SysTick_Config+0x40>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3b01      	subs	r3, #1
 8004754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004756:	210f      	movs	r1, #15
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	f7ff ff8e 	bl	800467c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <SysTick_Config+0x40>)
 8004762:	2200      	movs	r2, #0
 8004764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004766:	4b04      	ldr	r3, [pc, #16]	; (8004778 <SysTick_Config+0x40>)
 8004768:	2207      	movs	r2, #7
 800476a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	e000e010 	.word	0xe000e010

0800477c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff29 	bl	80045dc <__NVIC_SetPriorityGrouping>
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	4603      	mov	r3, r0
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047a0:	f7ff ff40 	bl	8004624 <__NVIC_GetPriorityGrouping>
 80047a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	f7ff ff90 	bl	80046d0 <NVIC_EncodePriority>
 80047b0:	4602      	mov	r2, r0
 80047b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff ff5f 	bl	800467c <__NVIC_SetPriority>
}
 80047be:	bf00      	nop
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff33 	bl	8004640 <__NVIC_EnableIRQ>
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ffa4 	bl	8004738 <SysTick_Config>
 80047f0:	4603      	mov	r3, r0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d00d      	beq.n	800482e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2204      	movs	r2, #4
 8004816:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e047      	b.n	80048be <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 020e 	bic.w	r2, r2, #14
 800483c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800485c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f003 021f 	and.w	r2, r3, #31
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2101      	movs	r1, #1
 800486c:	fa01 f202 	lsl.w	r2, r1, r2
 8004870:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800487a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00c      	beq.n	800489e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004892:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800489c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
    }
  }
  return status;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048d6:	e15a      	b.n	8004b8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	2101      	movs	r1, #1
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	fa01 f303 	lsl.w	r3, r1, r3
 80048e4:	4013      	ands	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 814c 	beq.w	8004b88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d00b      	beq.n	8004910 <HAL_GPIO_Init+0x48>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d007      	beq.n	8004910 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004904:	2b11      	cmp	r3, #17
 8004906:	d003      	beq.n	8004910 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b12      	cmp	r3, #18
 800490e:	d130      	bne.n	8004972 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	2203      	movs	r2, #3
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004946:	2201      	movs	r2, #1
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43db      	mvns	r3, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 0201 	and.w	r2, r3, #1
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	2203      	movs	r2, #3
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0xea>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b12      	cmp	r3, #18
 80049b0:	d123      	bne.n	80049fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	08da      	lsrs	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3208      	adds	r2, #8
 80049ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	220f      	movs	r2, #15
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	08da      	lsrs	r2, r3, #3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3208      	adds	r2, #8
 80049f4:	6939      	ldr	r1, [r7, #16]
 80049f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	2203      	movs	r2, #3
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0203 	and.w	r2, r3, #3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80a6 	beq.w	8004b88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a3c:	4b5b      	ldr	r3, [pc, #364]	; (8004bac <HAL_GPIO_Init+0x2e4>)
 8004a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a40:	4a5a      	ldr	r2, [pc, #360]	; (8004bac <HAL_GPIO_Init+0x2e4>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6613      	str	r3, [r2, #96]	; 0x60
 8004a48:	4b58      	ldr	r3, [pc, #352]	; (8004bac <HAL_GPIO_Init+0x2e4>)
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a54:	4a56      	ldr	r2, [pc, #344]	; (8004bb0 <HAL_GPIO_Init+0x2e8>)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	089b      	lsrs	r3, r3, #2
 8004a5a:	3302      	adds	r3, #2
 8004a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	220f      	movs	r2, #15
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a7e:	d01f      	beq.n	8004ac0 <HAL_GPIO_Init+0x1f8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a4c      	ldr	r2, [pc, #304]	; (8004bb4 <HAL_GPIO_Init+0x2ec>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d019      	beq.n	8004abc <HAL_GPIO_Init+0x1f4>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a4b      	ldr	r2, [pc, #300]	; (8004bb8 <HAL_GPIO_Init+0x2f0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <HAL_GPIO_Init+0x1f0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a4a      	ldr	r2, [pc, #296]	; (8004bbc <HAL_GPIO_Init+0x2f4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00d      	beq.n	8004ab4 <HAL_GPIO_Init+0x1ec>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a49      	ldr	r2, [pc, #292]	; (8004bc0 <HAL_GPIO_Init+0x2f8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d007      	beq.n	8004ab0 <HAL_GPIO_Init+0x1e8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a48      	ldr	r2, [pc, #288]	; (8004bc4 <HAL_GPIO_Init+0x2fc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d101      	bne.n	8004aac <HAL_GPIO_Init+0x1e4>
 8004aa8:	2305      	movs	r3, #5
 8004aaa:	e00a      	b.n	8004ac2 <HAL_GPIO_Init+0x1fa>
 8004aac:	2306      	movs	r3, #6
 8004aae:	e008      	b.n	8004ac2 <HAL_GPIO_Init+0x1fa>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	e006      	b.n	8004ac2 <HAL_GPIO_Init+0x1fa>
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e004      	b.n	8004ac2 <HAL_GPIO_Init+0x1fa>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e002      	b.n	8004ac2 <HAL_GPIO_Init+0x1fa>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_GPIO_Init+0x1fa>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	f002 0203 	and.w	r2, r2, #3
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	4093      	lsls	r3, r2
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ad2:	4937      	ldr	r1, [pc, #220]	; (8004bb0 <HAL_GPIO_Init+0x2e8>)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ae0:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <HAL_GPIO_Init+0x300>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4013      	ands	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b04:	4a30      	ldr	r2, [pc, #192]	; (8004bc8 <HAL_GPIO_Init+0x300>)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004b0a:	4b2f      	ldr	r3, [pc, #188]	; (8004bc8 <HAL_GPIO_Init+0x300>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	43db      	mvns	r3, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b2e:	4a26      	ldr	r2, [pc, #152]	; (8004bc8 <HAL_GPIO_Init+0x300>)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b34:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_GPIO_Init+0x300>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b58:	4a1b      	ldr	r2, [pc, #108]	; (8004bc8 <HAL_GPIO_Init+0x300>)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <HAL_GPIO_Init+0x300>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	43db      	mvns	r3, r3
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b82:	4a11      	ldr	r2, [pc, #68]	; (8004bc8 <HAL_GPIO_Init+0x300>)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f47f ae9d 	bne.w	80048d8 <HAL_GPIO_Init+0x10>
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	48000400 	.word	0x48000400
 8004bb8:	48000800 	.word	0x48000800
 8004bbc:	48000c00 	.word	0x48000c00
 8004bc0:	48001000 	.word	0x48001000
 8004bc4:	48001400 	.word	0x48001400
 8004bc8:	40010400 	.word	0x40010400

08004bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d006      	beq.n	8004bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004be2:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc ffaa 	bl	8001b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40010400 	.word	0x40010400

08004bfc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e0bb      	b.n	8004d8a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d101      	bne.n	8004c22 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0b3      	b.n	8004d8a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d101      	bne.n	8004c32 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e0ab      	b.n	8004d8a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c32:	4b58      	ldr	r3, [pc, #352]	; (8004d94 <HAL_OPAMP_Init+0x198>)
 8004c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c36:	4a57      	ldr	r2, [pc, #348]	; (8004d94 <HAL_OPAMP_Init+0x198>)
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8004c3e:	4b55      	ldr	r3, [pc, #340]	; (8004d94 <HAL_OPAMP_Init+0x198>)
 8004c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd f9c8 	bl	8001ff4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d003      	beq.n	8004c74 <HAL_OPAMP_Init+0x78>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b60      	cmp	r3, #96	; 0x60
 8004c72:	d133      	bne.n	8004cdc <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 0110 	bic.w	r1, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_OPAMP_Init+0x19c>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6851      	ldr	r1, [r2, #4]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6892      	ldr	r2, [r2, #8]
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6912      	ldr	r2, [r2, #16]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	7d09      	ldrb	r1, [r1, #20]
 8004ca8:	2901      	cmp	r1, #1
 8004caa:	d102      	bne.n	8004cb2 <HAL_OPAMP_Init+0xb6>
 8004cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cb0:	e000      	b.n	8004cb4 <HAL_OPAMP_Init+0xb8>
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4311      	orrs	r1, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cba:	4311      	orrs	r1, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cc6:	04d2      	lsls	r2, r2, #19
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cce:	0612      	lsls	r2, r2, #24
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e035      	b.n	8004d48 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 0110 	bic.w	r1, r3, #16
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <HAL_OPAMP_Init+0x19c>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6851      	ldr	r1, [r2, #4]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68d2      	ldr	r2, [r2, #12]
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6912      	ldr	r2, [r2, #16]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	7d09      	ldrb	r1, [r1, #20]
 8004d16:	2901      	cmp	r1, #1
 8004d18:	d102      	bne.n	8004d20 <HAL_OPAMP_Init+0x124>
 8004d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d1e:	e000      	b.n	8004d22 <HAL_OPAMP_Init+0x126>
 8004d20:	2100      	movs	r1, #0
 8004d22:	4311      	orrs	r1, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d28:	4311      	orrs	r1, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d2e:	4311      	orrs	r1, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d34:	04d2      	lsls	r2, r2, #19
 8004d36:	4311      	orrs	r1, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d3c:	0612      	lsls	r2, r2, #24
 8004d3e:	4311      	orrs	r1, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	db10      	blt.n	8004d74 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699a      	ldr	r2, [r3, #24]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d103      	bne.n	8004d88 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	e0003e11 	.word	0xe0003e11

08004d9c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e01d      	b.n	8004df0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b05      	cmp	r3, #5
 8004dbe:	d102      	bne.n	8004dc6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	e014      	b.n	8004df0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d10c      	bne.n	8004dec <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2204      	movs	r2, #4
 8004de6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004dea:	e001      	b.n	8004df0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b08c      	sub	sp, #48	; 0x30
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e2df      	b.n	80053e0 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d001      	beq.n	8004e30 <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e2d7      	b.n	80053e0 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d001      	beq.n	8004e40 <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e2cf      	b.n	80053e0 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e2c7      	b.n	80053e0 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0202 	orr.w	r2, r2, #2
 8004e5e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0202 	orr.w	r2, r2, #2
 8004e6e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0202 	orr.w	r2, r2, #2
 8004e7e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0210 	orr.w	r2, r2, #16
 8004e8e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0210 	orr.w	r2, r2, #16
 8004e9e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0210 	orr.w	r2, r2, #16
 8004eae:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ebe:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ece:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ede:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004eee:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004efe:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004f0e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 8004f40:	2310      	movs	r3, #16
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 8004f44:	2310      	movs	r3, #16
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 8004f48:	2310      	movs	r3, #16
 8004f4a:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8004f50:	e056      	b.n	8005000 <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	061a      	lsls	r2, r3, #24
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	061a      	lsls	r2, r3, #24
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	061a      	lsls	r2, r3, #24
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8004f94:	2002      	movs	r0, #2
 8004f96:	f7fd fd45 	bl	8002a24 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d004      	beq.n	8004fb2 <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8004fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb0:	e003      	b.n	8004fba <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 8004fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd0:	e003      	b.n	8004fda <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d004      	beq.n	8004ff2 <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	e003      	b.n	8004ffa <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1a5      	bne.n	8004f52 <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	061a      	lsls	r2, r3, #24
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	061a      	lsls	r2, r3, #24
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	061a      	lsls	r2, r3, #24
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8005048:	2002      	movs	r0, #2
 800504a:	f7fd fceb 	bl	8002a24 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	3301      	adds	r3, #1
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	061a      	lsls	r2, r3, #24
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00d      	beq.n	80050a2 <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	3301      	adds	r3, #1
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	061a      	lsls	r2, r3, #24
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00d      	beq.n	80050cc <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	3301      	adds	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	061a      	lsls	r2, r3, #24
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050de:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050f2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005106:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 8005108:	2310      	movs	r3, #16
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 800510c:	2310      	movs	r3, #16
 800510e:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 8005110:	2310      	movs	r3, #16
 8005112:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 8005114:	2308      	movs	r3, #8
 8005116:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8005118:	e056      	b.n	80051c8 <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	04da      	lsls	r2, r3, #19
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	04da      	lsls	r2, r3, #19
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	04da      	lsls	r2, r3, #19
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800515c:	2002      	movs	r0, #2
 800515e:	f7fd fc61 	bl	8002a24 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 8005170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
 8005178:	e003      	b.n	8005182 <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 800517a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4413      	add	r3, r2
 8005196:	623b      	str	r3, [r7, #32]
 8005198:	e003      	b.n	80051a2 <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 800519a:	6a3a      	ldr	r2, [r7, #32]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	e003      	b.n	80051c2 <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1a5      	bne.n	800511a <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	04da      	lsls	r2, r3, #19
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	04da      	lsls	r2, r3, #19
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	04da      	lsls	r2, r3, #19
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8005210:	2002      	movs	r0, #2
 8005212:	f7fd fc07 	bl	8002a24 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	3301      	adds	r3, #1
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	04da      	lsls	r2, r3, #19
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00d      	beq.n	800526a <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	3301      	adds	r3, #1
 8005252:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	04da      	lsls	r2, r3, #19
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	3301      	adds	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	04da      	lsls	r2, r3, #19
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0201 	bic.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0201 	bic.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0202 	bic.w	r2, r2, #2
 8005302:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0202 	bic.w	r2, r2, #2
 8005312:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0202 	bic.w	r2, r2, #2
 8005322:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005328:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6a3a      	ldr	r2, [r7, #32]
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2210      	movs	r2, #16
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2210      	movs	r2, #16
 8005352:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2210      	movs	r2, #16
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	061a      	lsls	r2, r3, #24
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	061a      	lsls	r2, r3, #24
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	061a      	lsls	r2, r3, #24
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	04da      	lsls	r2, r3, #19
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	04da      	lsls	r2, r3, #19
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	04da      	lsls	r2, r3, #19
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3730      	adds	r7, #48	; 0x30
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d141      	bne.n	800547a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053f6:	4b4b      	ldr	r3, [pc, #300]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005402:	d131      	bne.n	8005468 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005404:	4b47      	ldr	r3, [pc, #284]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540a:	4a46      	ldr	r2, [pc, #280]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005414:	4b43      	ldr	r3, [pc, #268]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800541c:	4a41      	ldr	r2, [pc, #260]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800541e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005424:	4b40      	ldr	r3, [pc, #256]	; (8005528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2232      	movs	r2, #50	; 0x32
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	4a3f      	ldr	r2, [pc, #252]	; (800552c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	0c9b      	lsrs	r3, r3, #18
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800543a:	e002      	b.n	8005442 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3b01      	subs	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005442:	4b38      	ldr	r3, [pc, #224]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544e:	d102      	bne.n	8005456 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f2      	bne.n	800543c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005456:	4b33      	ldr	r3, [pc, #204]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005462:	d158      	bne.n	8005516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e057      	b.n	8005518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005468:	4b2e      	ldr	r3, [pc, #184]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546e:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005478:	e04d      	b.n	8005516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005480:	d141      	bne.n	8005506 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005482:	4b28      	ldr	r3, [pc, #160]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548e:	d131      	bne.n	80054f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005490:	4b24      	ldr	r3, [pc, #144]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005496:	4a23      	ldr	r2, [pc, #140]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054a0:	4b20      	ldr	r3, [pc, #128]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054a8:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2232      	movs	r2, #50	; 0x32
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	4a1c      	ldr	r2, [pc, #112]	; (800552c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054bc:	fba2 2303 	umull	r2, r3, r2, r3
 80054c0:	0c9b      	lsrs	r3, r3, #18
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c6:	e002      	b.n	80054ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ce:	4b15      	ldr	r3, [pc, #84]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054da:	d102      	bne.n	80054e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f2      	bne.n	80054c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ee:	d112      	bne.n	8005516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e011      	b.n	8005518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005500:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005504:	e007      	b.n	8005516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800550e:	4a05      	ldr	r2, [pc, #20]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005514:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40007000 	.word	0x40007000
 8005528:	20000000 	.word	0x20000000
 800552c:	431bde83 	.word	0x431bde83

08005530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e308      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d075      	beq.n	800563a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800554e:	4ba3      	ldr	r3, [pc, #652]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005558:	4ba0      	ldr	r3, [pc, #640]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b0c      	cmp	r3, #12
 8005566:	d102      	bne.n	800556e <HAL_RCC_OscConfig+0x3e>
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d002      	beq.n	8005574 <HAL_RCC_OscConfig+0x44>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d10b      	bne.n	800558c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	4b99      	ldr	r3, [pc, #612]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d05b      	beq.n	8005638 <HAL_RCC_OscConfig+0x108>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d157      	bne.n	8005638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e2e3      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	d106      	bne.n	80055a4 <HAL_RCC_OscConfig+0x74>
 8005596:	4b91      	ldr	r3, [pc, #580]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a90      	ldr	r2, [pc, #576]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e01d      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x98>
 80055ae:	4b8b      	ldr	r3, [pc, #556]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a8a      	ldr	r2, [pc, #552]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b88      	ldr	r3, [pc, #544]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a87      	ldr	r2, [pc, #540]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055c8:	4b84      	ldr	r3, [pc, #528]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a83      	ldr	r2, [pc, #524]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b81      	ldr	r3, [pc, #516]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a80      	ldr	r2, [pc, #512]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fd fa10 	bl	8002a0c <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fd fa0c 	bl	8002a0c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	; 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e2a8      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005602:	4b76      	ldr	r3, [pc, #472]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0xc0>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fd f9fc 	bl	8002a0c <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005618:	f7fd f9f8 	bl	8002a0c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	; 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e294      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800562a:	4b6c      	ldr	r3, [pc, #432]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0xe8>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d075      	beq.n	8005732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005646:	4b65      	ldr	r3, [pc, #404]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005650:	4b62      	ldr	r3, [pc, #392]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d102      	bne.n	8005666 <HAL_RCC_OscConfig+0x136>
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d002      	beq.n	800566c <HAL_RCC_OscConfig+0x13c>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d11f      	bne.n	80056ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800566c:	4b5b      	ldr	r3, [pc, #364]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCC_OscConfig+0x154>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e267      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005684:	4b55      	ldr	r3, [pc, #340]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	061b      	lsls	r3, r3, #24
 8005692:	4952      	ldr	r1, [pc, #328]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005694:	4313      	orrs	r3, r2
 8005696:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005698:	4b51      	ldr	r3, [pc, #324]	; (80057e0 <HAL_RCC_OscConfig+0x2b0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f7fd f969 	bl	8002974 <HAL_InitTick>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d043      	beq.n	8005730 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e253      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d023      	beq.n	80056fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b4:	4b49      	ldr	r3, [pc, #292]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a48      	ldr	r2, [pc, #288]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fd f9a4 	bl	8002a0c <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c8:	f7fd f9a0 	bl	8002a0c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e23c      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056da:	4b40      	ldr	r3, [pc, #256]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e6:	4b3d      	ldr	r3, [pc, #244]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	061b      	lsls	r3, r3, #24
 80056f4:	4939      	ldr	r1, [pc, #228]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	604b      	str	r3, [r1, #4]
 80056fa:	e01a      	b.n	8005732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056fc:	4b37      	ldr	r3, [pc, #220]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a36      	ldr	r2, [pc, #216]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005708:	f7fd f980 	bl	8002a0c <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005710:	f7fd f97c 	bl	8002a0c <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e218      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005722:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_OscConfig+0x1e0>
 800572e:	e000      	b.n	8005732 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005730:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d03c      	beq.n	80057b8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01c      	beq.n	8005780 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005746:	4b25      	ldr	r3, [pc, #148]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800574c:	4a23      	ldr	r2, [pc, #140]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005756:	f7fd f959 	bl	8002a0c <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800575e:	f7fd f955 	bl	8002a0c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e1f1      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005770:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ef      	beq.n	800575e <HAL_RCC_OscConfig+0x22e>
 800577e:	e01b      	b.n	80057b8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005780:	4b16      	ldr	r3, [pc, #88]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005786:	4a15      	ldr	r2, [pc, #84]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005790:	f7fd f93c 	bl	8002a0c <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005798:	f7fd f938 	bl	8002a0c <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e1d4      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ef      	bne.n	8005798 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80ab 	beq.w	800591c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c6:	2300      	movs	r3, #0
 80057c8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057ca:	4b04      	ldr	r3, [pc, #16]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_RCC_OscConfig+0x2b4>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e005      	b.n	80057e6 <HAL_RCC_OscConfig+0x2b6>
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000
 80057e0:	20000004 	.word	0x20000004
 80057e4:	2300      	movs	r3, #0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00d      	beq.n	8005806 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ea:	4baf      	ldr	r3, [pc, #700]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	4aae      	ldr	r2, [pc, #696]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80057f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f4:	6593      	str	r3, [r2, #88]	; 0x58
 80057f6:	4bac      	ldr	r3, [pc, #688]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005802:	2301      	movs	r3, #1
 8005804:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005806:	4ba9      	ldr	r3, [pc, #676]	; (8005aac <HAL_RCC_OscConfig+0x57c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d118      	bne.n	8005844 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005812:	4ba6      	ldr	r3, [pc, #664]	; (8005aac <HAL_RCC_OscConfig+0x57c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4aa5      	ldr	r2, [pc, #660]	; (8005aac <HAL_RCC_OscConfig+0x57c>)
 8005818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800581e:	f7fd f8f5 	bl	8002a0c <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005826:	f7fd f8f1 	bl	8002a0c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e18d      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005838:	4b9c      	ldr	r3, [pc, #624]	; (8005aac <HAL_RCC_OscConfig+0x57c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d108      	bne.n	800585e <HAL_RCC_OscConfig+0x32e>
 800584c:	4b96      	ldr	r3, [pc, #600]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	4a95      	ldr	r2, [pc, #596]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800585c:	e024      	b.n	80058a8 <HAL_RCC_OscConfig+0x378>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b05      	cmp	r3, #5
 8005864:	d110      	bne.n	8005888 <HAL_RCC_OscConfig+0x358>
 8005866:	4b90      	ldr	r3, [pc, #576]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586c:	4a8e      	ldr	r2, [pc, #568]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 800586e:	f043 0304 	orr.w	r3, r3, #4
 8005872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005876:	4b8c      	ldr	r3, [pc, #560]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587c:	4a8a      	ldr	r2, [pc, #552]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005886:	e00f      	b.n	80058a8 <HAL_RCC_OscConfig+0x378>
 8005888:	4b87      	ldr	r3, [pc, #540]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	4a86      	ldr	r2, [pc, #536]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005898:	4b83      	ldr	r3, [pc, #524]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	4a82      	ldr	r2, [pc, #520]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80058a0:	f023 0304 	bic.w	r3, r3, #4
 80058a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d016      	beq.n	80058de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fd f8ac 	bl	8002a0c <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b6:	e00a      	b.n	80058ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b8:	f7fd f8a8 	bl	8002a0c <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e142      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ce:	4b76      	ldr	r3, [pc, #472]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ed      	beq.n	80058b8 <HAL_RCC_OscConfig+0x388>
 80058dc:	e015      	b.n	800590a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058de:	f7fd f895 	bl	8002a0c <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fd f891 	bl	8002a0c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e12b      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058fc:	4b6a      	ldr	r3, [pc, #424]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1ed      	bne.n	80058e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800590a:	7ffb      	ldrb	r3, [r7, #31]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d105      	bne.n	800591c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005910:	4b65      	ldr	r3, [pc, #404]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	4a64      	ldr	r2, [pc, #400]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d03c      	beq.n	80059a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01c      	beq.n	800596a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005930:	4b5d      	ldr	r3, [pc, #372]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005936:	4a5c      	ldr	r2, [pc, #368]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7fd f864 	bl	8002a0c <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005948:	f7fd f860 	bl	8002a0c <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e0fc      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800595a:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 800595c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0ef      	beq.n	8005948 <HAL_RCC_OscConfig+0x418>
 8005968:	e01b      	b.n	80059a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800596a:	4b4f      	ldr	r3, [pc, #316]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 800596c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005970:	4a4d      	ldr	r2, [pc, #308]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fd f847 	bl	8002a0c <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005982:	f7fd f843 	bl	8002a0c <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e0df      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005994:	4b44      	ldr	r3, [pc, #272]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ef      	bne.n	8005982 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 80d3 	beq.w	8005b52 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ac:	4b3e      	ldr	r3, [pc, #248]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 030c 	and.w	r3, r3, #12
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	f000 808d 	beq.w	8005ad4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d15a      	bne.n	8005a78 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c2:	4b39      	ldr	r3, [pc, #228]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a38      	ldr	r2, [pc, #224]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80059c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ce:	f7fd f81d 	bl	8002a0c <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d6:	f7fd f819 	bl	8002a0c <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e0b5      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e8:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1f0      	bne.n	80059d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f4:	4b2c      	ldr	r3, [pc, #176]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	4b2d      	ldr	r3, [pc, #180]	; (8005ab0 <HAL_RCC_OscConfig+0x580>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6a11      	ldr	r1, [r2, #32]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a04:	3a01      	subs	r2, #1
 8005a06:	0112      	lsls	r2, r2, #4
 8005a08:	4311      	orrs	r1, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a0e:	0212      	lsls	r2, r2, #8
 8005a10:	4311      	orrs	r1, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a16:	0852      	lsrs	r2, r2, #1
 8005a18:	3a01      	subs	r2, #1
 8005a1a:	0552      	lsls	r2, r2, #21
 8005a1c:	4311      	orrs	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a22:	0852      	lsrs	r2, r2, #1
 8005a24:	3a01      	subs	r2, #1
 8005a26:	0652      	lsls	r2, r2, #25
 8005a28:	4311      	orrs	r1, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a2e:	06d2      	lsls	r2, r2, #27
 8005a30:	430a      	orrs	r2, r1
 8005a32:	491d      	ldr	r1, [pc, #116]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a38:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1a      	ldr	r2, [pc, #104]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a44:	4b18      	ldr	r3, [pc, #96]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fc ffdc 	bl	8002a0c <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a58:	f7fc ffd8 	bl	8002a0c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e074      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x528>
 8005a76:	e06c      	b.n	8005b52 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a0a      	ldr	r2, [pc, #40]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005a84:	4b08      	ldr	r3, [pc, #32]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4a07      	ldr	r2, [pc, #28]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <HAL_RCC_OscConfig+0x578>)
 8005a96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fc ffb4 	bl	8002a0c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aa6:	e00e      	b.n	8005ac6 <HAL_RCC_OscConfig+0x596>
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40007000 	.word	0x40007000
 8005ab0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab4:	f7fc ffaa 	bl	8002a0c <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e046      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ac6:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <HAL_RCC_OscConfig+0x62c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x584>
 8005ad2:	e03e      	b.n	8005b52 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e039      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ae0:	4b1e      	ldr	r3, [pc, #120]	; (8005b5c <HAL_RCC_OscConfig+0x62c>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f003 0203 	and.w	r2, r3, #3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d12c      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	3b01      	subs	r3, #1
 8005b00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d123      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d11b      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d113      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	3b01      	subs	r3, #1
 8005b34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d109      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b44:	085b      	lsrs	r3, r3, #1
 8005b46:	3b01      	subs	r3, #1
 8005b48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d001      	beq.n	8005b52 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40021000 	.word	0x40021000

08005b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e11e      	b.n	8005db6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b78:	4b91      	ldr	r3, [pc, #580]	; (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d910      	bls.n	8005ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4b8e      	ldr	r3, [pc, #568]	; (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f023 020f 	bic.w	r2, r3, #15
 8005b8e:	498c      	ldr	r1, [pc, #560]	; (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b96:	4b8a      	ldr	r3, [pc, #552]	; (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d001      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e106      	b.n	8005db6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d073      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d129      	bne.n	8005c10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbc:	4b81      	ldr	r3, [pc, #516]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0f4      	b.n	8005db6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005bcc:	f000 f99e 	bl	8005f0c <RCC_GetSysClockFreqFromPLLSource>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4a7c      	ldr	r2, [pc, #496]	; (8005dc8 <HAL_RCC_ClockConfig+0x268>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d93f      	bls.n	8005c5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bda:	4b7a      	ldr	r3, [pc, #488]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d033      	beq.n	8005c5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d12f      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bfa:	4b72      	ldr	r3, [pc, #456]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c02:	4a70      	ldr	r2, [pc, #448]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c0a:	2380      	movs	r3, #128	; 0x80
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	e024      	b.n	8005c5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d107      	bne.n	8005c28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c18:	4b6a      	ldr	r3, [pc, #424]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0c6      	b.n	8005db6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c28:	4b66      	ldr	r3, [pc, #408]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0be      	b.n	8005db6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c38:	f000 f8ce 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8005c3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4a61      	ldr	r2, [pc, #388]	; (8005dc8 <HAL_RCC_ClockConfig+0x268>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d909      	bls.n	8005c5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c46:	4b5f      	ldr	r3, [pc, #380]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c4e:	4a5d      	ldr	r2, [pc, #372]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c5a:	4b5a      	ldr	r3, [pc, #360]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f023 0203 	bic.w	r2, r3, #3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4957      	ldr	r1, [pc, #348]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6c:	f7fc fece 	bl	8002a0c <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c74:	f7fc feca 	bl	8002a0c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e095      	b.n	8005db6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8a:	4b4e      	ldr	r3, [pc, #312]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 020c 	and.w	r2, r3, #12
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d1eb      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d023      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb4:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	4a42      	ldr	r2, [pc, #264]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ccc:	4b3d      	ldr	r3, [pc, #244]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cd4:	4a3b      	ldr	r2, [pc, #236]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cdc:	4b39      	ldr	r3, [pc, #228]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4936      	ldr	r1, [pc, #216]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	608b      	str	r3, [r1, #8]
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d105      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cf6:	4b33      	ldr	r3, [pc, #204]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	4a32      	ldr	r2, [pc, #200]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d02:	4b2f      	ldr	r3, [pc, #188]	; (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d21d      	bcs.n	8005d4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d10:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f023 020f 	bic.w	r2, r3, #15
 8005d18:	4929      	ldr	r1, [pc, #164]	; (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d20:	f7fc fe74 	bl	8002a0c <HAL_GetTick>
 8005d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d26:	e00a      	b.n	8005d3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d28:	f7fc fe70 	bl	8002a0c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e03b      	b.n	8005db6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3e:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <HAL_RCC_ClockConfig+0x260>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d1ed      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d58:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4917      	ldr	r1, [pc, #92]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d76:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	490f      	ldr	r1, [pc, #60]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d8a:	f000 f825 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8005d8e:	4601      	mov	r1, r0
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <HAL_RCC_ClockConfig+0x264>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	4a0c      	ldr	r2, [pc, #48]	; (8005dcc <HAL_RCC_ClockConfig+0x26c>)
 8005d9c:	5cd3      	ldrb	r3, [r2, r3]
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	fa21 f303 	lsr.w	r3, r1, r3
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <HAL_RCC_ClockConfig+0x270>)
 8005da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005daa:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <HAL_RCC_ClockConfig+0x274>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fc fde0 	bl	8002974 <HAL_InitTick>
 8005db4:	4603      	mov	r3, r0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40022000 	.word	0x40022000
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	04c4b400 	.word	0x04c4b400
 8005dcc:	0800a4fc 	.word	0x0800a4fc
 8005dd0:	20000000 	.word	0x20000000
 8005dd4:	20000004 	.word	0x20000004

08005dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005dde:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d102      	bne.n	8005df0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dea:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	e047      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005df0:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 030c 	and.w	r3, r3, #12
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d102      	bne.n	8005e02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dfc:	4b26      	ldr	r3, [pc, #152]	; (8005e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	e03e      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e02:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 030c 	and.w	r3, r3, #12
 8005e0a:	2b0c      	cmp	r3, #12
 8005e0c:	d136      	bne.n	8005e7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e18:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	3301      	adds	r3, #1
 8005e24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d10c      	bne.n	8005e46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e34:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e36:	68d2      	ldr	r2, [r2, #12]
 8005e38:	0a12      	lsrs	r2, r2, #8
 8005e3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e3e:	fb02 f303 	mul.w	r3, r2, r3
 8005e42:	617b      	str	r3, [r7, #20]
      break;
 8005e44:	e00c      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e50:	68d2      	ldr	r2, [r2, #12]
 8005e52:	0a12      	lsrs	r2, r2, #8
 8005e54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]
      break;
 8005e5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	0e5b      	lsrs	r3, r3, #25
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	e001      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e80:	693b      	ldr	r3, [r7, #16]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40021000 	.word	0x40021000
 8005e94:	00f42400 	.word	0x00f42400
 8005e98:	007a1200 	.word	0x007a1200

08005e9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ea0:	4b03      	ldr	r3, [pc, #12]	; (8005eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	20000000 	.word	0x20000000

08005eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005eb8:	f7ff fff0 	bl	8005e9c <HAL_RCC_GetHCLKFreq>
 8005ebc:	4601      	mov	r1, r0
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eca:	5cd3      	ldrb	r3, [r2, r3]
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	0800a50c 	.word	0x0800a50c

08005ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ee4:	f7ff ffda 	bl	8005e9c <HAL_RCC_GetHCLKFreq>
 8005ee8:	4601      	mov	r1, r0
 8005eea:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	0adb      	lsrs	r3, r3, #11
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	4a04      	ldr	r2, [pc, #16]	; (8005f08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ef6:	5cd3      	ldrb	r3, [r2, r3]
 8005ef8:	f003 031f 	and.w	r3, r3, #31
 8005efc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40021000 	.word	0x40021000
 8005f08:	0800a50c 	.word	0x0800a50c

08005f0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f12:	4b1e      	ldr	r3, [pc, #120]	; (8005f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d10c      	bne.n	8005f4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f30:	4a17      	ldr	r2, [pc, #92]	; (8005f90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f38:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f3a:	68d2      	ldr	r2, [r2, #12]
 8005f3c:	0a12      	lsrs	r2, r2, #8
 8005f3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f42:	fb02 f303 	mul.w	r3, r2, r3
 8005f46:	617b      	str	r3, [r7, #20]
    break;
 8005f48:	e00c      	b.n	8005f64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f4a:	4a12      	ldr	r2, [pc, #72]	; (8005f94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	4a0e      	ldr	r2, [pc, #56]	; (8005f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f54:	68d2      	ldr	r2, [r2, #12]
 8005f56:	0a12      	lsrs	r2, r2, #8
 8005f58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f5c:	fb02 f303 	mul.w	r3, r2, r3
 8005f60:	617b      	str	r3, [r7, #20]
    break;
 8005f62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	0e5b      	lsrs	r3, r3, #25
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	3301      	adds	r3, #1
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f7e:	687b      	ldr	r3, [r7, #4]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	007a1200 	.word	0x007a1200
 8005f94:	00f42400 	.word	0x00f42400

08005f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8098 	beq.w	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fba:	4b43      	ldr	r3, [pc, #268]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10d      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc6:	4b40      	ldr	r3, [pc, #256]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fca:	4a3f      	ldr	r2, [pc, #252]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8005fd2:	4b3d      	ldr	r3, [pc, #244]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fda:	60bb      	str	r3, [r7, #8]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fe2:	4b3a      	ldr	r3, [pc, #232]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a39      	ldr	r2, [pc, #228]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fee:	f7fc fd0d 	bl	8002a0c <HAL_GetTick>
 8005ff2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ff4:	e009      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff6:	f7fc fd09 	bl	8002a0c <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d902      	bls.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	74fb      	strb	r3, [r7, #19]
        break;
 8006008:	e005      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800600a:	4b30      	ldr	r3, [pc, #192]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0ef      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006016:	7cfb      	ldrb	r3, [r7, #19]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d159      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800601c:	4b2a      	ldr	r3, [pc, #168]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d01e      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	429a      	cmp	r2, r3
 8006036:	d019      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006038:	4b23      	ldr	r3, [pc, #140]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006042:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006044:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800604c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006054:	4b1c      	ldr	r3, [pc, #112]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605a:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800605c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006064:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d016      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006076:	f7fc fcc9 	bl	8002a0c <HAL_GetTick>
 800607a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800607c:	e00b      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607e:	f7fc fcc5 	bl	8002a0c <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f241 3288 	movw	r2, #5000	; 0x1388
 800608c:	4293      	cmp	r3, r2
 800608e:	d902      	bls.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	74fb      	strb	r3, [r7, #19]
            break;
 8006094:	e006      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006096:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0ec      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060a4:	7cfb      	ldrb	r3, [r7, #19]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	4903      	ldr	r1, [pc, #12]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80060c0:	e008      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060c2:	7cfb      	ldrb	r3, [r7, #19]
 80060c4:	74bb      	strb	r3, [r7, #18]
 80060c6:	e005      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060c8:	40021000 	.word	0x40021000
 80060cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d0:	7cfb      	ldrb	r3, [r7, #19]
 80060d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060d4:	7c7b      	ldrb	r3, [r7, #17]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d105      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060da:	4ba6      	ldr	r3, [pc, #664]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060de:	4aa5      	ldr	r2, [pc, #660]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060f2:	4ba0      	ldr	r3, [pc, #640]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	f023 0203 	bic.w	r2, r3, #3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	499c      	ldr	r1, [pc, #624]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006114:	4b97      	ldr	r3, [pc, #604]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611a:	f023 020c 	bic.w	r2, r3, #12
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	4994      	ldr	r1, [pc, #592]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006124:	4313      	orrs	r3, r2
 8006126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006136:	4b8f      	ldr	r3, [pc, #572]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	498b      	ldr	r1, [pc, #556]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006158:	4b86      	ldr	r3, [pc, #536]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4983      	ldr	r1, [pc, #524]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800617a:	4b7e      	ldr	r3, [pc, #504]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006180:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	497a      	ldr	r1, [pc, #488]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800619c:	4b75      	ldr	r3, [pc, #468]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	4972      	ldr	r1, [pc, #456]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061be:	4b6d      	ldr	r3, [pc, #436]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	4969      	ldr	r1, [pc, #420]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061e0:	4b64      	ldr	r3, [pc, #400]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	4961      	ldr	r1, [pc, #388]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006202:	4b5c      	ldr	r3, [pc, #368]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	4958      	ldr	r1, [pc, #352]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006220:	2b00      	cmp	r3, #0
 8006222:	d015      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006224:	4b53      	ldr	r3, [pc, #332]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	4950      	ldr	r1, [pc, #320]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d105      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006244:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4a4a      	ldr	r2, [pc, #296]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800624e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006258:	2b00      	cmp	r3, #0
 800625a:	d015      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800625c:	4b45      	ldr	r3, [pc, #276]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	4942      	ldr	r1, [pc, #264]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800627a:	d105      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800627c:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4a3c      	ldr	r2, [pc, #240]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006286:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d015      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006294:	4b37      	ldr	r3, [pc, #220]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	4934      	ldr	r1, [pc, #208]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062b2:	d105      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062b4:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4a2e      	ldr	r2, [pc, #184]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d015      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062cc:	4b29      	ldr	r3, [pc, #164]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	4926      	ldr	r1, [pc, #152]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ea:	d105      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062ec:	4b21      	ldr	r3, [pc, #132]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	4a20      	ldr	r2, [pc, #128]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d015      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006304:	4b1b      	ldr	r3, [pc, #108]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	4918      	ldr	r1, [pc, #96]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006322:	d105      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006324:	4b13      	ldr	r3, [pc, #76]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	4a12      	ldr	r2, [pc, #72]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800632a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800632e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d015      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800633c:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634a:	490a      	ldr	r1, [pc, #40]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800635a:	d105      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4a04      	ldr	r2, [pc, #16]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006366:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006368:	7cbb      	ldrb	r3, [r7, #18]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	40021000 	.word	0x40021000

08006378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e049      	b.n	800641e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fc f8cc 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f000 fe8c 	bl	80070d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	d001      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e021      	b.n	8006484 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <HAL_TIM_Base_Start_IT+0x68>)
 8006460:	4013      	ands	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b06      	cmp	r3, #6
 8006468:	d00b      	beq.n	8006482 <HAL_TIM_Base_Start_IT+0x5a>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006470:	d007      	beq.n	8006482 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	00010007 	.word	0x00010007

08006494 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a1a      	ldr	r2, [r3, #32]
 80064b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10f      	bne.n	80064dc <HAL_TIM_Base_Stop_IT+0x48>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	f244 4344 	movw	r3, #17476	; 0x4444
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <HAL_TIM_Base_Stop_IT+0x48>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e049      	b.n	8006598 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f841 	bl	80065a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3304      	adds	r3, #4
 800652e:	4619      	mov	r1, r3
 8006530:	4610      	mov	r0, r2
 8006532:	f000 fdcf 	bl	80070d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <HAL_TIM_PWM_Start+0x24>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	bf14      	ite	ne
 80065d0:	2301      	movne	r3, #1
 80065d2:	2300      	moveq	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	e03c      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d109      	bne.n	80065f2 <HAL_TIM_PWM_Start+0x3e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	bf14      	ite	ne
 80065ea:	2301      	movne	r3, #1
 80065ec:	2300      	moveq	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	e02f      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d109      	bne.n	800660c <HAL_TIM_PWM_Start+0x58>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b01      	cmp	r3, #1
 8006602:	bf14      	ite	ne
 8006604:	2301      	movne	r3, #1
 8006606:	2300      	moveq	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	e022      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b0c      	cmp	r3, #12
 8006610:	d109      	bne.n	8006626 <HAL_TIM_PWM_Start+0x72>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	bf14      	ite	ne
 800661e:	2301      	movne	r3, #1
 8006620:	2300      	moveq	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	e015      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b10      	cmp	r3, #16
 800662a:	d109      	bne.n	8006640 <HAL_TIM_PWM_Start+0x8c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	bf14      	ite	ne
 8006638:	2301      	movne	r3, #1
 800663a:	2300      	moveq	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e008      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e06e      	b.n	8006738 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <HAL_TIM_PWM_Start+0xb6>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006668:	e023      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b04      	cmp	r3, #4
 800666e:	d104      	bne.n	800667a <HAL_TIM_PWM_Start+0xc6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006678:	e01b      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d104      	bne.n	800668a <HAL_TIM_PWM_Start+0xd6>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006688:	e013      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b0c      	cmp	r3, #12
 800668e:	d104      	bne.n	800669a <HAL_TIM_PWM_Start+0xe6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006698:	e00b      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b10      	cmp	r3, #16
 800669e:	d104      	bne.n	80066aa <HAL_TIM_PWM_Start+0xf6>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a8:	e003      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 f92c 	bl	8007918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1e      	ldr	r2, [pc, #120]	; (8006740 <HAL_TIM_PWM_Start+0x18c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_TIM_PWM_Start+0x13e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <HAL_TIM_PWM_Start+0x190>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_TIM_PWM_Start+0x13e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1b      	ldr	r2, [pc, #108]	; (8006748 <HAL_TIM_PWM_Start+0x194>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_TIM_PWM_Start+0x13e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1a      	ldr	r2, [pc, #104]	; (800674c <HAL_TIM_PWM_Start+0x198>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_TIM_PWM_Start+0x13e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a18      	ldr	r2, [pc, #96]	; (8006750 <HAL_TIM_PWM_Start+0x19c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d101      	bne.n	80066f6 <HAL_TIM_PWM_Start+0x142>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <HAL_TIM_PWM_Start+0x144>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800670a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	4b10      	ldr	r3, [pc, #64]	; (8006754 <HAL_TIM_PWM_Start+0x1a0>)
 8006714:	4013      	ands	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b06      	cmp	r3, #6
 800671c:	d00b      	beq.n	8006736 <HAL_TIM_PWM_Start+0x182>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006724:	d007      	beq.n	8006736 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0201 	orr.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40012c00 	.word	0x40012c00
 8006744:	40013400 	.word	0x40013400
 8006748:	40014000 	.word	0x40014000
 800674c:	40014400 	.word	0x40014400
 8006750:	40014800 	.word	0x40014800
 8006754:	00010007 	.word	0x00010007

08006758 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e097      	b.n	800689c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7fb ff41 	bl	8002608 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2202      	movs	r2, #2
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800679c:	f023 0307 	bic.w	r3, r3, #7
 80067a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f000 fc91 	bl	80070d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	4313      	orrs	r3, r2
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80067f8:	f023 030c 	bic.w	r3, r3, #12
 80067fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	4313      	orrs	r3, r2
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	011a      	lsls	r2, r3, #4
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	031b      	lsls	r3, r3, #12
 8006828:	4313      	orrs	r3, r2
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800683e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	4313      	orrs	r3, r2
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d110      	bne.n	80068f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d102      	bne.n	80068e0 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80068da:	7b7b      	ldrb	r3, [r7, #13]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d001      	beq.n	80068e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e068      	b.n	80069b6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f4:	e031      	b.n	800695a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d110      	bne.n	800691e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d102      	bne.n	8006908 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006902:	7b3b      	ldrb	r3, [r7, #12]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d001      	beq.n	800690c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e054      	b.n	80069b6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800691c:	e01d      	b.n	800695a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d108      	bne.n	8006936 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d105      	bne.n	8006936 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800692a:	7b7b      	ldrb	r3, [r7, #13]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d102      	bne.n	8006936 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006930:	7b3b      	ldrb	r3, [r7, #12]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d001      	beq.n	800693a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e03d      	b.n	80069b6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2202      	movs	r2, #2
 8006946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_TIM_Encoder_Start+0xc2>
 8006960:	2b04      	cmp	r3, #4
 8006962:	d008      	beq.n	8006976 <HAL_TIM_Encoder_Start+0xd2>
 8006964:	e00f      	b.n	8006986 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2201      	movs	r2, #1
 800696c:	2100      	movs	r1, #0
 800696e:	4618      	mov	r0, r3
 8006970:	f000 ffd2 	bl	8007918 <TIM_CCxChannelCmd>
      break;
 8006974:	e016      	b.n	80069a4 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2201      	movs	r2, #1
 800697c:	2104      	movs	r1, #4
 800697e:	4618      	mov	r0, r3
 8006980:	f000 ffca 	bl	8007918 <TIM_CCxChannelCmd>
      break;
 8006984:	e00e      	b.n	80069a4 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2201      	movs	r2, #1
 800698c:	2100      	movs	r1, #0
 800698e:	4618      	mov	r0, r3
 8006990:	f000 ffc2 	bl	8007918 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2201      	movs	r2, #1
 800699a:	2104      	movs	r1, #4
 800699c:	4618      	mov	r0, r3
 800699e:	f000 ffbb 	bl	8007918 <TIM_CCxChannelCmd>
      break;
 80069a2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d122      	bne.n	8006a1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d11b      	bne.n	8006a1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f06f 0202 	mvn.w	r2, #2
 80069ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7fb f9cb 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8006a06:	e005      	b.n	8006a14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fb45 	bl	8007098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fb4c 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d122      	bne.n	8006a6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d11b      	bne.n	8006a6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f06f 0204 	mvn.w	r2, #4
 8006a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fb f9a1 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8006a5a:	e005      	b.n	8006a68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fb1b 	bl	8007098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fb22 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d122      	bne.n	8006ac2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d11b      	bne.n	8006ac2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f06f 0208 	mvn.w	r2, #8
 8006a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2204      	movs	r2, #4
 8006a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7fb f977 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8006aae:	e005      	b.n	8006abc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 faf1 	bl	8007098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 faf8 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d122      	bne.n	8006b16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	2b10      	cmp	r3, #16
 8006adc:	d11b      	bne.n	8006b16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f06f 0210 	mvn.w	r2, #16
 8006ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2208      	movs	r2, #8
 8006aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7fb f94d 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8006b02:	e005      	b.n	8006b10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fac7 	bl	8007098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 face 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d10e      	bne.n	8006b42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d107      	bne.n	8006b42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f06f 0201 	mvn.w	r2, #1
 8006b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7fb f837 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4c:	2b80      	cmp	r3, #128	; 0x80
 8006b4e:	d10e      	bne.n	8006b6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	2b80      	cmp	r3, #128	; 0x80
 8006b5c:	d107      	bne.n	8006b6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 f8a7 	bl	8007cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7c:	d10e      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b88:	2b80      	cmp	r3, #128	; 0x80
 8006b8a:	d107      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 f89a 	bl	8007cd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba6:	2b40      	cmp	r3, #64	; 0x40
 8006ba8:	d10e      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	d107      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa7c 	bl	80070c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d107      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0220 	mvn.w	r2, #32
 8006bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 f85a 	bl	8007ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c02:	d10f      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c12:	d107      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 f860 	bl	8007ce4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c32:	d10f      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c42:	d107      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f852 	bl	8007cf8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c62:	d10f      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c72:	d107      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 f844 	bl	8007d0c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c92:	d10f      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ca2:	d107      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 f836 	bl	8007d20 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e0fd      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b14      	cmp	r3, #20
 8006ce2:	f200 80f0 	bhi.w	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006ce6:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d41 	.word	0x08006d41
 8006cf0:	08006ec7 	.word	0x08006ec7
 8006cf4:	08006ec7 	.word	0x08006ec7
 8006cf8:	08006ec7 	.word	0x08006ec7
 8006cfc:	08006d81 	.word	0x08006d81
 8006d00:	08006ec7 	.word	0x08006ec7
 8006d04:	08006ec7 	.word	0x08006ec7
 8006d08:	08006ec7 	.word	0x08006ec7
 8006d0c:	08006dc3 	.word	0x08006dc3
 8006d10:	08006ec7 	.word	0x08006ec7
 8006d14:	08006ec7 	.word	0x08006ec7
 8006d18:	08006ec7 	.word	0x08006ec7
 8006d1c:	08006e03 	.word	0x08006e03
 8006d20:	08006ec7 	.word	0x08006ec7
 8006d24:	08006ec7 	.word	0x08006ec7
 8006d28:	08006ec7 	.word	0x08006ec7
 8006d2c:	08006e45 	.word	0x08006e45
 8006d30:	08006ec7 	.word	0x08006ec7
 8006d34:	08006ec7 	.word	0x08006ec7
 8006d38:	08006ec7 	.word	0x08006ec7
 8006d3c:	08006e85 	.word	0x08006e85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fa54 	bl	80071f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0208 	orr.w	r2, r2, #8
 8006d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0204 	bic.w	r2, r2, #4
 8006d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6999      	ldr	r1, [r3, #24]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	619a      	str	r2, [r3, #24]
      break;
 8006d7e:	e0a3      	b.n	8006ec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fac4 	bl	8007314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	021a      	lsls	r2, r3, #8
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	619a      	str	r2, [r3, #24]
      break;
 8006dc0:	e082      	b.n	8006ec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fb2d 	bl	8007428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0208 	orr.w	r2, r2, #8
 8006ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0204 	bic.w	r2, r2, #4
 8006dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69d9      	ldr	r1, [r3, #28]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	61da      	str	r2, [r3, #28]
      break;
 8006e00:	e062      	b.n	8006ec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fb95 	bl	8007538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	021a      	lsls	r2, r3, #8
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	61da      	str	r2, [r3, #28]
      break;
 8006e42:	e041      	b.n	8006ec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fbfe 	bl	800764c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0208 	orr.w	r2, r2, #8
 8006e5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0204 	bic.w	r2, r2, #4
 8006e6e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006e82:	e021      	b.n	8006ec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fc42 	bl	8007714 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	021a      	lsls	r2, r3, #8
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ec4:	e000      	b.n	8006ec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006ec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop

08006edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_TIM_ConfigClockSource+0x18>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e0c3      	b.n	800707c <HAL_TIM_ConfigClockSource+0x1a0>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006f12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b70      	cmp	r3, #112	; 0x70
 8006f2e:	d038      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0xc6>
 8006f30:	2b70      	cmp	r3, #112	; 0x70
 8006f32:	d815      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x84>
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	f000 808e 	beq.w	8007056 <HAL_TIM_ConfigClockSource+0x17a>
 8006f3a:	2b30      	cmp	r3, #48	; 0x30
 8006f3c:	d809      	bhi.n	8006f52 <HAL_TIM_ConfigClockSource+0x76>
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	f000 8089 	beq.w	8007056 <HAL_TIM_ConfigClockSource+0x17a>
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	f000 8086 	beq.w	8007056 <HAL_TIM_ConfigClockSource+0x17a>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8083 	beq.w	8007056 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006f50:	e08b      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006f52:	2b50      	cmp	r3, #80	; 0x50
 8006f54:	d04f      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8006f56:	2b60      	cmp	r3, #96	; 0x60
 8006f58:	d05d      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x13a>
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	d06b      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8006f5e:	e084      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006f60:	4a48      	ldr	r2, [pc, #288]	; (8007084 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d077      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x17a>
 8006f66:	4a47      	ldr	r2, [pc, #284]	; (8007084 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d809      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0xa4>
 8006f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f70:	d02e      	beq.n	8006fd0 <HAL_TIM_ConfigClockSource+0xf4>
 8006f72:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006f76:	d06e      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x17a>
 8006f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7c:	d074      	beq.n	8007068 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8006f7e:	e074      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006f80:	4a41      	ldr	r2, [pc, #260]	; (8007088 <HAL_TIM_ConfigClockSource+0x1ac>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d067      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x17a>
 8006f86:	4a40      	ldr	r2, [pc, #256]	; (8007088 <HAL_TIM_ConfigClockSource+0x1ac>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d803      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0xb8>
 8006f8c:	4a3f      	ldr	r2, [pc, #252]	; (800708c <HAL_TIM_ConfigClockSource+0x1b0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d061      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8006f92:	e06a      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006f94:	4a3e      	ldr	r2, [pc, #248]	; (8007090 <HAL_TIM_ConfigClockSource+0x1b4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d05d      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x17a>
 8006f9a:	4a3e      	ldr	r2, [pc, #248]	; (8007094 <HAL_TIM_ConfigClockSource+0x1b8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d05a      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8006fa0:	e063      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6899      	ldr	r1, [r3, #8]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f000 fc91 	bl	80078d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	609a      	str	r2, [r3, #8]
      break;
 8006fce:	e04c      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	6899      	ldr	r1, [r3, #8]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f000 fc7a 	bl	80078d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ff2:	609a      	str	r2, [r3, #8]
      break;
 8006ff4:	e039      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	461a      	mov	r2, r3
 8007004:	f000 fbec 	bl	80077e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2150      	movs	r1, #80	; 0x50
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fc45 	bl	800789e <TIM_ITRx_SetConfig>
      break;
 8007014:	e029      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	461a      	mov	r2, r3
 8007024:	f000 fc0b 	bl	800783e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2160      	movs	r1, #96	; 0x60
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fc35 	bl	800789e <TIM_ITRx_SetConfig>
      break;
 8007034:	e019      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6859      	ldr	r1, [r3, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	461a      	mov	r2, r3
 8007044:	f000 fbcc 	bl	80077e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2140      	movs	r1, #64	; 0x40
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fc25 	bl	800789e <TIM_ITRx_SetConfig>
      break;
 8007054:	e009      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f000 fc1c 	bl	800789e <TIM_ITRx_SetConfig>
      break;
 8007066:	e000      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8007068:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	00100020 	.word	0x00100020
 8007088:	00100040 	.word	0x00100040
 800708c:	00100030 	.word	0x00100030
 8007090:	00100060 	.word	0x00100060
 8007094:	00100070 	.word	0x00100070

08007098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3c      	ldr	r2, [pc, #240]	; (80071d8 <TIM_Base_SetConfig+0x104>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00f      	beq.n	800710c <TIM_Base_SetConfig+0x38>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f2:	d00b      	beq.n	800710c <TIM_Base_SetConfig+0x38>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a39      	ldr	r2, [pc, #228]	; (80071dc <TIM_Base_SetConfig+0x108>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d007      	beq.n	800710c <TIM_Base_SetConfig+0x38>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a38      	ldr	r2, [pc, #224]	; (80071e0 <TIM_Base_SetConfig+0x10c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_Base_SetConfig+0x38>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a37      	ldr	r2, [pc, #220]	; (80071e4 <TIM_Base_SetConfig+0x110>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d108      	bne.n	800711e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2d      	ldr	r2, [pc, #180]	; (80071d8 <TIM_Base_SetConfig+0x104>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01b      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712c:	d017      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <TIM_Base_SetConfig+0x108>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a29      	ldr	r2, [pc, #164]	; (80071e0 <TIM_Base_SetConfig+0x10c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00f      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a28      	ldr	r2, [pc, #160]	; (80071e4 <TIM_Base_SetConfig+0x110>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00b      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a27      	ldr	r2, [pc, #156]	; (80071e8 <TIM_Base_SetConfig+0x114>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d007      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a26      	ldr	r2, [pc, #152]	; (80071ec <TIM_Base_SetConfig+0x118>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d003      	beq.n	800715e <TIM_Base_SetConfig+0x8a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a25      	ldr	r2, [pc, #148]	; (80071f0 <TIM_Base_SetConfig+0x11c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d108      	bne.n	8007170 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a10      	ldr	r2, [pc, #64]	; (80071d8 <TIM_Base_SetConfig+0x104>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00f      	beq.n	80071bc <TIM_Base_SetConfig+0xe8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a11      	ldr	r2, [pc, #68]	; (80071e4 <TIM_Base_SetConfig+0x110>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00b      	beq.n	80071bc <TIM_Base_SetConfig+0xe8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a10      	ldr	r2, [pc, #64]	; (80071e8 <TIM_Base_SetConfig+0x114>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_Base_SetConfig+0xe8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a0f      	ldr	r2, [pc, #60]	; (80071ec <TIM_Base_SetConfig+0x118>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_Base_SetConfig+0xe8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <TIM_Base_SetConfig+0x11c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d103      	bne.n	80071c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	615a      	str	r2, [r3, #20]
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40000400 	.word	0x40000400
 80071e0:	40000800 	.word	0x40000800
 80071e4:	40013400 	.word	0x40013400
 80071e8:	40014000 	.word	0x40014000
 80071ec:	40014400 	.word	0x40014400
 80071f0:	40014800 	.word	0x40014800

080071f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f023 0302 	bic.w	r3, r3, #2
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a2c      	ldr	r2, [pc, #176]	; (8007300 <TIM_OC1_SetConfig+0x10c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00f      	beq.n	8007274 <TIM_OC1_SetConfig+0x80>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a2b      	ldr	r2, [pc, #172]	; (8007304 <TIM_OC1_SetConfig+0x110>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00b      	beq.n	8007274 <TIM_OC1_SetConfig+0x80>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <TIM_OC1_SetConfig+0x114>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <TIM_OC1_SetConfig+0x80>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a29      	ldr	r2, [pc, #164]	; (800730c <TIM_OC1_SetConfig+0x118>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_OC1_SetConfig+0x80>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a28      	ldr	r2, [pc, #160]	; (8007310 <TIM_OC1_SetConfig+0x11c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d10c      	bne.n	800728e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0308 	bic.w	r3, r3, #8
 800727a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 0304 	bic.w	r3, r3, #4
 800728c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <TIM_OC1_SetConfig+0x10c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <TIM_OC1_SetConfig+0xc2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a1a      	ldr	r2, [pc, #104]	; (8007304 <TIM_OC1_SetConfig+0x110>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00b      	beq.n	80072b6 <TIM_OC1_SetConfig+0xc2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a19      	ldr	r2, [pc, #100]	; (8007308 <TIM_OC1_SetConfig+0x114>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d007      	beq.n	80072b6 <TIM_OC1_SetConfig+0xc2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a18      	ldr	r2, [pc, #96]	; (800730c <TIM_OC1_SetConfig+0x118>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d003      	beq.n	80072b6 <TIM_OC1_SetConfig+0xc2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a17      	ldr	r2, [pc, #92]	; (8007310 <TIM_OC1_SetConfig+0x11c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d111      	bne.n	80072da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	621a      	str	r2, [r3, #32]
}
 80072f4:	bf00      	nop
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	40012c00 	.word	0x40012c00
 8007304:	40013400 	.word	0x40013400
 8007308:	40014000 	.word	0x40014000
 800730c:	40014400 	.word	0x40014400
 8007310:	40014800 	.word	0x40014800

08007314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f023 0210 	bic.w	r2, r3, #16
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800734e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f023 0320 	bic.w	r3, r3, #32
 8007362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a28      	ldr	r2, [pc, #160]	; (8007414 <TIM_OC2_SetConfig+0x100>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_OC2_SetConfig+0x6c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a27      	ldr	r2, [pc, #156]	; (8007418 <TIM_OC2_SetConfig+0x104>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d10d      	bne.n	800739c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <TIM_OC2_SetConfig+0x100>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00f      	beq.n	80073c4 <TIM_OC2_SetConfig+0xb0>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <TIM_OC2_SetConfig+0x104>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00b      	beq.n	80073c4 <TIM_OC2_SetConfig+0xb0>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a1b      	ldr	r2, [pc, #108]	; (800741c <TIM_OC2_SetConfig+0x108>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d007      	beq.n	80073c4 <TIM_OC2_SetConfig+0xb0>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a1a      	ldr	r2, [pc, #104]	; (8007420 <TIM_OC2_SetConfig+0x10c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d003      	beq.n	80073c4 <TIM_OC2_SetConfig+0xb0>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a19      	ldr	r2, [pc, #100]	; (8007424 <TIM_OC2_SetConfig+0x110>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d113      	bne.n	80073ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	621a      	str	r2, [r3, #32]
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40013400 	.word	0x40013400
 800741c:	40014000 	.word	0x40014000
 8007420:	40014400 	.word	0x40014400
 8007424:	40014800 	.word	0x40014800

08007428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a27      	ldr	r2, [pc, #156]	; (8007524 <TIM_OC3_SetConfig+0xfc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d003      	beq.n	8007492 <TIM_OC3_SetConfig+0x6a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a26      	ldr	r2, [pc, #152]	; (8007528 <TIM_OC3_SetConfig+0x100>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10d      	bne.n	80074ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <TIM_OC3_SetConfig+0xfc>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00f      	beq.n	80074d6 <TIM_OC3_SetConfig+0xae>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <TIM_OC3_SetConfig+0x100>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <TIM_OC3_SetConfig+0xae>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1a      	ldr	r2, [pc, #104]	; (800752c <TIM_OC3_SetConfig+0x104>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d007      	beq.n	80074d6 <TIM_OC3_SetConfig+0xae>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a19      	ldr	r2, [pc, #100]	; (8007530 <TIM_OC3_SetConfig+0x108>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <TIM_OC3_SetConfig+0xae>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a18      	ldr	r2, [pc, #96]	; (8007534 <TIM_OC3_SetConfig+0x10c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d113      	bne.n	80074fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	621a      	str	r2, [r3, #32]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	40012c00 	.word	0x40012c00
 8007528:	40013400 	.word	0x40013400
 800752c:	40014000 	.word	0x40014000
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800

08007538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	031b      	lsls	r3, r3, #12
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a28      	ldr	r2, [pc, #160]	; (8007638 <TIM_OC4_SetConfig+0x100>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d003      	beq.n	80075a4 <TIM_OC4_SetConfig+0x6c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a27      	ldr	r2, [pc, #156]	; (800763c <TIM_OC4_SetConfig+0x104>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d10d      	bne.n	80075c0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	031b      	lsls	r3, r3, #12
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a1d      	ldr	r2, [pc, #116]	; (8007638 <TIM_OC4_SetConfig+0x100>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00f      	beq.n	80075e8 <TIM_OC4_SetConfig+0xb0>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a1c      	ldr	r2, [pc, #112]	; (800763c <TIM_OC4_SetConfig+0x104>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00b      	beq.n	80075e8 <TIM_OC4_SetConfig+0xb0>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <TIM_OC4_SetConfig+0x108>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d007      	beq.n	80075e8 <TIM_OC4_SetConfig+0xb0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1a      	ldr	r2, [pc, #104]	; (8007644 <TIM_OC4_SetConfig+0x10c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d003      	beq.n	80075e8 <TIM_OC4_SetConfig+0xb0>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a19      	ldr	r2, [pc, #100]	; (8007648 <TIM_OC4_SetConfig+0x110>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d113      	bne.n	8007610 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	019b      	lsls	r3, r3, #6
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	019b      	lsls	r3, r3, #6
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	bf00      	nop
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	40012c00 	.word	0x40012c00
 800763c:	40013400 	.word	0x40013400
 8007640:	40014000 	.word	0x40014000
 8007644:	40014400 	.word	0x40014400
 8007648:	40014800 	.word	0x40014800

0800764c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800767a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007690:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a17      	ldr	r2, [pc, #92]	; (8007700 <TIM_OC5_SetConfig+0xb4>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00f      	beq.n	80076c6 <TIM_OC5_SetConfig+0x7a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a16      	ldr	r2, [pc, #88]	; (8007704 <TIM_OC5_SetConfig+0xb8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00b      	beq.n	80076c6 <TIM_OC5_SetConfig+0x7a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a15      	ldr	r2, [pc, #84]	; (8007708 <TIM_OC5_SetConfig+0xbc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d007      	beq.n	80076c6 <TIM_OC5_SetConfig+0x7a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a14      	ldr	r2, [pc, #80]	; (800770c <TIM_OC5_SetConfig+0xc0>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d003      	beq.n	80076c6 <TIM_OC5_SetConfig+0x7a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a13      	ldr	r2, [pc, #76]	; (8007710 <TIM_OC5_SetConfig+0xc4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d109      	bne.n	80076da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	621a      	str	r2, [r3, #32]
}
 80076f4:	bf00      	nop
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	40012c00 	.word	0x40012c00
 8007704:	40013400 	.word	0x40013400
 8007708:	40014000 	.word	0x40014000
 800770c:	40014400 	.word	0x40014400
 8007710:	40014800 	.word	0x40014800

08007714 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800775a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	051b      	lsls	r3, r3, #20
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a18      	ldr	r2, [pc, #96]	; (80077cc <TIM_OC6_SetConfig+0xb8>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00f      	beq.n	8007790 <TIM_OC6_SetConfig+0x7c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a17      	ldr	r2, [pc, #92]	; (80077d0 <TIM_OC6_SetConfig+0xbc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00b      	beq.n	8007790 <TIM_OC6_SetConfig+0x7c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a16      	ldr	r2, [pc, #88]	; (80077d4 <TIM_OC6_SetConfig+0xc0>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d007      	beq.n	8007790 <TIM_OC6_SetConfig+0x7c>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a15      	ldr	r2, [pc, #84]	; (80077d8 <TIM_OC6_SetConfig+0xc4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_OC6_SetConfig+0x7c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a14      	ldr	r2, [pc, #80]	; (80077dc <TIM_OC6_SetConfig+0xc8>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d109      	bne.n	80077a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007796:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	029b      	lsls	r3, r3, #10
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40012c00 	.word	0x40012c00
 80077d0:	40013400 	.word	0x40013400
 80077d4:	40014000 	.word	0x40014000
 80077d8:	40014400 	.word	0x40014400
 80077dc:	40014800 	.word	0x40014800

080077e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	f023 0201 	bic.w	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800780a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f023 030a 	bic.w	r3, r3, #10
 800781c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4313      	orrs	r3, r2
 8007824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800783e:	b480      	push	{r7}
 8007840:	b087      	sub	sp, #28
 8007842:	af00      	add	r7, sp, #0
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f023 0210 	bic.w	r2, r3, #16
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	031b      	lsls	r3, r3, #12
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	4313      	orrs	r3, r2
 8007872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800787a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	621a      	str	r2, [r3, #32]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80078b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	f043 0307 	orr.w	r3, r3, #7
 80078c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	609a      	str	r2, [r3, #8]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	021a      	lsls	r2, r3, #8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4313      	orrs	r3, r2
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	609a      	str	r2, [r3, #8]
}
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 031f 	and.w	r3, r3, #31
 800792a:	2201      	movs	r2, #1
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a1a      	ldr	r2, [r3, #32]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	43db      	mvns	r3, r3
 800793a:	401a      	ands	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a1a      	ldr	r2, [r3, #32]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	fa01 f303 	lsl.w	r3, r1, r3
 8007950:	431a      	orrs	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	621a      	str	r2, [r3, #32]
}
 8007956:	bf00      	nop
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
	...

08007964 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d109      	bne.n	8007988 <HAL_TIMEx_PWMN_Start+0x24>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	bf14      	ite	ne
 8007980:	2301      	movne	r3, #1
 8007982:	2300      	moveq	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	e022      	b.n	80079ce <HAL_TIMEx_PWMN_Start+0x6a>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b04      	cmp	r3, #4
 800798c:	d109      	bne.n	80079a2 <HAL_TIMEx_PWMN_Start+0x3e>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b01      	cmp	r3, #1
 8007998:	bf14      	ite	ne
 800799a:	2301      	movne	r3, #1
 800799c:	2300      	moveq	r3, #0
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	e015      	b.n	80079ce <HAL_TIMEx_PWMN_Start+0x6a>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d109      	bne.n	80079bc <HAL_TIMEx_PWMN_Start+0x58>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	bf14      	ite	ne
 80079b4:	2301      	movne	r3, #1
 80079b6:	2300      	moveq	r3, #0
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	e008      	b.n	80079ce <HAL_TIMEx_PWMN_Start+0x6a>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	bf14      	ite	ne
 80079c8:	2301      	movne	r3, #1
 80079ca:	2300      	moveq	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e040      	b.n	8007a58 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <HAL_TIMEx_PWMN_Start+0x82>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e4:	e013      	b.n	8007a0e <HAL_TIMEx_PWMN_Start+0xaa>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d104      	bne.n	80079f6 <HAL_TIMEx_PWMN_Start+0x92>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079f4:	e00b      	b.n	8007a0e <HAL_TIMEx_PWMN_Start+0xaa>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d104      	bne.n	8007a06 <HAL_TIMEx_PWMN_Start+0xa2>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a04:	e003      	b.n	8007a0e <HAL_TIMEx_PWMN_Start+0xaa>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2204      	movs	r2, #4
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 f98c 	bl	8007d34 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <HAL_TIMEx_PWMN_Start+0xfc>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b06      	cmp	r3, #6
 8007a3c:	d00b      	beq.n	8007a56 <HAL_TIMEx_PWMN_Start+0xf2>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a44:	d007      	beq.n	8007a56 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f042 0201 	orr.w	r2, r2, #1
 8007a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	00010007 	.word	0x00010007

08007a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e065      	b.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a2c      	ldr	r2, [pc, #176]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d004      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a2b      	ldr	r2, [pc, #172]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d108      	bne.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ab6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007acc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d018      	beq.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af2:	d013      	beq.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00e      	beq.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a17      	ldr	r2, [pc, #92]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d009      	beq.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a12      	ldr	r2, [pc, #72]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d004      	beq.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a13      	ldr	r2, [pc, #76]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d10c      	bne.n	8007b36 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40012c00 	.word	0x40012c00
 8007b58:	40013400 	.word	0x40013400
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40014000 	.word	0x40014000

08007b68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e087      	b.n	8007c94 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	041b      	lsls	r3, r3, #16
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a27      	ldr	r2, [pc, #156]	; (8007ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d004      	beq.n	8007c12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a25      	ldr	r2, [pc, #148]	; (8007ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d106      	bne.n	8007c20 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a1e      	ldr	r2, [pc, #120]	; (8007ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d004      	beq.n	8007c34 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a1d      	ldr	r2, [pc, #116]	; (8007ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d126      	bne.n	8007c82 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	051b      	lsls	r3, r3, #20
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a0e      	ldr	r2, [pc, #56]	; (8007ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d004      	beq.n	8007c74 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a0d      	ldr	r2, [pc, #52]	; (8007ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d106      	bne.n	8007c82 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	40012c00 	.word	0x40012c00
 8007ca4:	40013400 	.word	0x40013400

08007ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	2204      	movs	r2, #4
 8007d48:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6a1a      	ldr	r2, [r3, #32]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	43db      	mvns	r3, r3
 8007d56:	401a      	ands	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a1a      	ldr	r2, [r3, #32]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e042      	b.n	8007e16 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7fa fd58 	bl	8002858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2224      	movs	r2, #36	; 0x24
 8007dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0201 	bic.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fa81 	bl	80082c8 <UART_SetConfig>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e022      	b.n	8007e16 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fc2f 	bl	800963c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f042 0201 	orr.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 fcb6 	bl	8009780 <UART_CheckIdleState>
 8007e14:	4603      	mov	r3, r0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	f040 80bc 	bne.w	8007fb2 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <HAL_UART_Receive_IT+0x26>
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e0b4      	b.n	8007fb4 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_UART_Receive_IT+0x38>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e0ad      	b.n	8007fb4 <HAL_UART_Receive_IT+0x194>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	88fa      	ldrh	r2, [r7, #6]
 8007e6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	88fa      	ldrh	r2, [r7, #6]
 8007e72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e84:	d10e      	bne.n	8007ea4 <HAL_UART_Receive_IT+0x84>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <HAL_UART_Receive_IT+0x7a>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e98:	e02d      	b.n	8007ef6 <HAL_UART_Receive_IT+0xd6>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	22ff      	movs	r2, #255	; 0xff
 8007e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ea2:	e028      	b.n	8007ef6 <HAL_UART_Receive_IT+0xd6>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10d      	bne.n	8007ec8 <HAL_UART_Receive_IT+0xa8>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d104      	bne.n	8007ebe <HAL_UART_Receive_IT+0x9e>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	22ff      	movs	r2, #255	; 0xff
 8007eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ebc:	e01b      	b.n	8007ef6 <HAL_UART_Receive_IT+0xd6>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	227f      	movs	r2, #127	; 0x7f
 8007ec2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ec6:	e016      	b.n	8007ef6 <HAL_UART_Receive_IT+0xd6>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ed0:	d10d      	bne.n	8007eee <HAL_UART_Receive_IT+0xce>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d104      	bne.n	8007ee4 <HAL_UART_Receive_IT+0xc4>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	227f      	movs	r2, #127	; 0x7f
 8007ede:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ee2:	e008      	b.n	8007ef6 <HAL_UART_Receive_IT+0xd6>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	223f      	movs	r2, #63	; 0x3f
 8007ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007eec:	e003      	b.n	8007ef6 <HAL_UART_Receive_IT+0xd6>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2222      	movs	r2, #34	; 0x22
 8007f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f1e:	d12a      	bne.n	8007f76 <HAL_UART_Receive_IT+0x156>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f26:	88fa      	ldrh	r2, [r7, #6]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d324      	bcc.n	8007f76 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f34:	d107      	bne.n	8007f46 <HAL_UART_Receive_IT+0x126>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <HAL_UART_Receive_IT+0x1a0>)
 8007f42:	66da      	str	r2, [r3, #108]	; 0x6c
 8007f44:	e002      	b.n	8007f4c <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <HAL_UART_Receive_IT+0x1a4>)
 8007f4a:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f62:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f72:	609a      	str	r2, [r3, #8]
 8007f74:	e01b      	b.n	8007fae <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7e:	d107      	bne.n	8007f90 <HAL_UART_Receive_IT+0x170>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d103      	bne.n	8007f90 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4a0f      	ldr	r2, [pc, #60]	; (8007fc8 <HAL_UART_Receive_IT+0x1a8>)
 8007f8c:	66da      	str	r2, [r3, #108]	; 0x6c
 8007f8e:	e002      	b.n	8007f96 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4a0e      	ldr	r2, [pc, #56]	; (8007fcc <HAL_UART_Receive_IT+0x1ac>)
 8007f94:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007fac:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e000      	b.n	8007fb4 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8007fb2:	2302      	movs	r3, #2
  }
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	08009ba9 	.word	0x08009ba9
 8007fc4:	08009aa1 	.word	0x08009aa1
 8007fc8:	080099f5 	.word	0x080099f5
 8007fcc:	0800994b 	.word	0x0800994b

08007fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d118      	bne.n	8008030 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d013      	beq.n	8008030 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d009      	beq.n	8008030 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 812e 	beq.w	8008282 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
      }
      return;
 800802e:	e128      	b.n	8008282 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80d1 	beq.w	80081da <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	4b96      	ldr	r3, [pc, #600]	; (8008294 <HAL_UART_IRQHandler+0x2c4>)
 800803c:	4013      	ands	r3, r2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80c6 	beq.w	80081da <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d010      	beq.n	800807a <HAL_UART_IRQHandler+0xaa>
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2201      	movs	r2, #1
 8008068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008070:	f043 0201 	orr.w	r2, r3, #1
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d010      	beq.n	80080a6 <HAL_UART_IRQHandler+0xd6>
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2202      	movs	r2, #2
 8008094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809c:	f043 0204 	orr.w	r2, r3, #4
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d010      	beq.n	80080d2 <HAL_UART_IRQHandler+0x102>
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2204      	movs	r2, #4
 80080c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c8:	f043 0202 	orr.w	r2, r3, #2
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d015      	beq.n	8008108 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d104      	bne.n	80080f0 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4b6a      	ldr	r3, [pc, #424]	; (8008294 <HAL_UART_IRQHandler+0x2c4>)
 80080ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2208      	movs	r2, #8
 80080f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fe:	f043 0208 	orr.w	r2, r3, #8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80b9 	beq.w	8008286 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b00      	cmp	r3, #0
 800811c:	d011      	beq.n	8008142 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	f003 0320 	and.w	r3, r3, #32
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d007      	beq.n	8008142 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008148:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b40      	cmp	r3, #64	; 0x40
 8008156:	d004      	beq.n	8008162 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800815e:	2b00      	cmp	r3, #0
 8008160:	d031      	beq.n	80081c6 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 fb9e 	bl	80098a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d123      	bne.n	80081be <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008184:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800818a:	2b00      	cmp	r3, #0
 800818c:	d013      	beq.n	80081b6 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008192:	4a41      	ldr	r2, [pc, #260]	; (8008298 <HAL_UART_IRQHandler+0x2c8>)
 8008194:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800819a:	4618      	mov	r0, r3
 800819c:	f7fc fb2d 	bl	80047fa <HAL_DMA_Abort_IT>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d017      	beq.n	80081d6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80081b0:	4610      	mov	r0, r2
 80081b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b4:	e00f      	b.n	80081d6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f87a 	bl	80082b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081bc:	e00b      	b.n	80081d6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f876 	bl	80082b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c4:	e007      	b.n	80081d6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f872 	bl	80082b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80081d4:	e057      	b.n	8008286 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d6:	bf00      	nop
    return;
 80081d8:	e055      	b.n	8008286 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00d      	beq.n	8008200 <HAL_UART_IRQHandler+0x230>
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d008      	beq.n	8008200 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 fd59 	bl	8009cb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081fe:	e045      	b.n	800828c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008206:	2b00      	cmp	r3, #0
 8008208:	d012      	beq.n	8008230 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d008      	beq.n	8008230 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008222:	2b00      	cmp	r3, #0
 8008224:	d031      	beq.n	800828a <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
    }
    return;
 800822e:	e02c      	b.n	800828a <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	d008      	beq.n	800824c <HAL_UART_IRQHandler+0x27c>
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 fb66 	bl	8009916 <UART_EndTransmit_IT>
    return;
 800824a:	e01f      	b.n	800828c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d008      	beq.n	8008268 <HAL_UART_IRQHandler+0x298>
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 fd39 	bl	8009cd8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008266:	e011      	b.n	800828c <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00c      	beq.n	800828c <HAL_UART_IRQHandler+0x2bc>
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	2b00      	cmp	r3, #0
 8008276:	da09      	bge.n	800828c <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 fd23 	bl	8009cc4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800827e:	bf00      	nop
 8008280:	e004      	b.n	800828c <HAL_UART_IRQHandler+0x2bc>
      return;
 8008282:	bf00      	nop
 8008284:	e002      	b.n	800828c <HAL_UART_IRQHandler+0x2bc>
    return;
 8008286:	bf00      	nop
 8008288:	e000      	b.n	800828c <HAL_UART_IRQHandler+0x2bc>
    return;
 800828a:	bf00      	nop
  }
}
 800828c:	3720      	adds	r7, #32
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	10000001 	.word	0x10000001
 8008298:	080098eb 	.word	0x080098eb

0800829c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	0000      	movs	r0, r0
	...

080082c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80082cc:	b08a      	sub	sp, #40	; 0x28
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689a      	ldr	r2, [r3, #8]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	431a      	orrs	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fc:	4313      	orrs	r3, r2
 80082fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	4ba4      	ldr	r3, [pc, #656]	; (8008598 <UART_SetConfig+0x2d0>)
 8008308:	4013      	ands	r3, r2
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008310:	430b      	orrs	r3, r1
 8008312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a99      	ldr	r2, [pc, #612]	; (800859c <UART_SetConfig+0x2d4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d004      	beq.n	8008344 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008340:	4313      	orrs	r3, r2
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800834e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	6812      	ldr	r2, [r2, #0]
 8008356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008358:	430b      	orrs	r3, r1
 800835a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	f023 010f 	bic.w	r1, r3, #15
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a8a      	ldr	r2, [pc, #552]	; (80085a0 <UART_SetConfig+0x2d8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d126      	bne.n	80083ca <UART_SetConfig+0x102>
 800837c:	4b89      	ldr	r3, [pc, #548]	; (80085a4 <UART_SetConfig+0x2dc>)
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	2b03      	cmp	r3, #3
 8008388:	d81a      	bhi.n	80083c0 <UART_SetConfig+0xf8>
 800838a:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <UART_SetConfig+0xc8>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	080083a1 	.word	0x080083a1
 8008394:	080083b1 	.word	0x080083b1
 8008398:	080083a9 	.word	0x080083a9
 800839c:	080083b9 	.word	0x080083b9
 80083a0:	2301      	movs	r3, #1
 80083a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083a6:	e0d6      	b.n	8008556 <UART_SetConfig+0x28e>
 80083a8:	2302      	movs	r3, #2
 80083aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ae:	e0d2      	b.n	8008556 <UART_SetConfig+0x28e>
 80083b0:	2304      	movs	r3, #4
 80083b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083b6:	e0ce      	b.n	8008556 <UART_SetConfig+0x28e>
 80083b8:	2308      	movs	r3, #8
 80083ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083be:	e0ca      	b.n	8008556 <UART_SetConfig+0x28e>
 80083c0:	2310      	movs	r3, #16
 80083c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083c6:	bf00      	nop
 80083c8:	e0c5      	b.n	8008556 <UART_SetConfig+0x28e>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a76      	ldr	r2, [pc, #472]	; (80085a8 <UART_SetConfig+0x2e0>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d138      	bne.n	8008446 <UART_SetConfig+0x17e>
 80083d4:	4b73      	ldr	r3, [pc, #460]	; (80085a4 <UART_SetConfig+0x2dc>)
 80083d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083da:	f003 030c 	and.w	r3, r3, #12
 80083de:	2b0c      	cmp	r3, #12
 80083e0:	d82c      	bhi.n	800843c <UART_SetConfig+0x174>
 80083e2:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <UART_SetConfig+0x120>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	0800841d 	.word	0x0800841d
 80083ec:	0800843d 	.word	0x0800843d
 80083f0:	0800843d 	.word	0x0800843d
 80083f4:	0800843d 	.word	0x0800843d
 80083f8:	0800842d 	.word	0x0800842d
 80083fc:	0800843d 	.word	0x0800843d
 8008400:	0800843d 	.word	0x0800843d
 8008404:	0800843d 	.word	0x0800843d
 8008408:	08008425 	.word	0x08008425
 800840c:	0800843d 	.word	0x0800843d
 8008410:	0800843d 	.word	0x0800843d
 8008414:	0800843d 	.word	0x0800843d
 8008418:	08008435 	.word	0x08008435
 800841c:	2300      	movs	r3, #0
 800841e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008422:	e098      	b.n	8008556 <UART_SetConfig+0x28e>
 8008424:	2302      	movs	r3, #2
 8008426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800842a:	e094      	b.n	8008556 <UART_SetConfig+0x28e>
 800842c:	2304      	movs	r3, #4
 800842e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008432:	e090      	b.n	8008556 <UART_SetConfig+0x28e>
 8008434:	2308      	movs	r3, #8
 8008436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800843a:	e08c      	b.n	8008556 <UART_SetConfig+0x28e>
 800843c:	2310      	movs	r3, #16
 800843e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008442:	bf00      	nop
 8008444:	e087      	b.n	8008556 <UART_SetConfig+0x28e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a58      	ldr	r2, [pc, #352]	; (80085ac <UART_SetConfig+0x2e4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d125      	bne.n	800849c <UART_SetConfig+0x1d4>
 8008450:	4b54      	ldr	r3, [pc, #336]	; (80085a4 <UART_SetConfig+0x2dc>)
 8008452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008456:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800845a:	2b10      	cmp	r3, #16
 800845c:	d011      	beq.n	8008482 <UART_SetConfig+0x1ba>
 800845e:	2b10      	cmp	r3, #16
 8008460:	d802      	bhi.n	8008468 <UART_SetConfig+0x1a0>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <UART_SetConfig+0x1aa>
 8008466:	e014      	b.n	8008492 <UART_SetConfig+0x1ca>
 8008468:	2b20      	cmp	r3, #32
 800846a:	d006      	beq.n	800847a <UART_SetConfig+0x1b2>
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d00c      	beq.n	800848a <UART_SetConfig+0x1c2>
 8008470:	e00f      	b.n	8008492 <UART_SetConfig+0x1ca>
 8008472:	2300      	movs	r3, #0
 8008474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008478:	e06d      	b.n	8008556 <UART_SetConfig+0x28e>
 800847a:	2302      	movs	r3, #2
 800847c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008480:	e069      	b.n	8008556 <UART_SetConfig+0x28e>
 8008482:	2304      	movs	r3, #4
 8008484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008488:	e065      	b.n	8008556 <UART_SetConfig+0x28e>
 800848a:	2308      	movs	r3, #8
 800848c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008490:	e061      	b.n	8008556 <UART_SetConfig+0x28e>
 8008492:	2310      	movs	r3, #16
 8008494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008498:	bf00      	nop
 800849a:	e05c      	b.n	8008556 <UART_SetConfig+0x28e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a43      	ldr	r2, [pc, #268]	; (80085b0 <UART_SetConfig+0x2e8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d125      	bne.n	80084f2 <UART_SetConfig+0x22a>
 80084a6:	4b3f      	ldr	r3, [pc, #252]	; (80085a4 <UART_SetConfig+0x2dc>)
 80084a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d011      	beq.n	80084d8 <UART_SetConfig+0x210>
 80084b4:	2b40      	cmp	r3, #64	; 0x40
 80084b6:	d802      	bhi.n	80084be <UART_SetConfig+0x1f6>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d005      	beq.n	80084c8 <UART_SetConfig+0x200>
 80084bc:	e014      	b.n	80084e8 <UART_SetConfig+0x220>
 80084be:	2b80      	cmp	r3, #128	; 0x80
 80084c0:	d006      	beq.n	80084d0 <UART_SetConfig+0x208>
 80084c2:	2bc0      	cmp	r3, #192	; 0xc0
 80084c4:	d00c      	beq.n	80084e0 <UART_SetConfig+0x218>
 80084c6:	e00f      	b.n	80084e8 <UART_SetConfig+0x220>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ce:	e042      	b.n	8008556 <UART_SetConfig+0x28e>
 80084d0:	2302      	movs	r3, #2
 80084d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084d6:	e03e      	b.n	8008556 <UART_SetConfig+0x28e>
 80084d8:	2304      	movs	r3, #4
 80084da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084de:	e03a      	b.n	8008556 <UART_SetConfig+0x28e>
 80084e0:	2308      	movs	r3, #8
 80084e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084e6:	e036      	b.n	8008556 <UART_SetConfig+0x28e>
 80084e8:	2310      	movs	r3, #16
 80084ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ee:	bf00      	nop
 80084f0:	e031      	b.n	8008556 <UART_SetConfig+0x28e>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a29      	ldr	r2, [pc, #164]	; (800859c <UART_SetConfig+0x2d4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d129      	bne.n	8008550 <UART_SetConfig+0x288>
 80084fc:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <UART_SetConfig+0x2dc>)
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008502:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800850a:	d014      	beq.n	8008536 <UART_SetConfig+0x26e>
 800850c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008510:	d802      	bhi.n	8008518 <UART_SetConfig+0x250>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d007      	beq.n	8008526 <UART_SetConfig+0x25e>
 8008516:	e016      	b.n	8008546 <UART_SetConfig+0x27e>
 8008518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800851c:	d007      	beq.n	800852e <UART_SetConfig+0x266>
 800851e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008522:	d00c      	beq.n	800853e <UART_SetConfig+0x276>
 8008524:	e00f      	b.n	8008546 <UART_SetConfig+0x27e>
 8008526:	2300      	movs	r3, #0
 8008528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800852c:	e013      	b.n	8008556 <UART_SetConfig+0x28e>
 800852e:	2302      	movs	r3, #2
 8008530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008534:	e00f      	b.n	8008556 <UART_SetConfig+0x28e>
 8008536:	2304      	movs	r3, #4
 8008538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800853c:	e00b      	b.n	8008556 <UART_SetConfig+0x28e>
 800853e:	2308      	movs	r3, #8
 8008540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008544:	e007      	b.n	8008556 <UART_SetConfig+0x28e>
 8008546:	2310      	movs	r3, #16
 8008548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800854c:	bf00      	nop
 800854e:	e002      	b.n	8008556 <UART_SetConfig+0x28e>
 8008550:	2310      	movs	r3, #16
 8008552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a10      	ldr	r2, [pc, #64]	; (800859c <UART_SetConfig+0x2d4>)
 800855c:	4293      	cmp	r3, r2
 800855e:	f040 842e 	bne.w	8008dbe <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008562:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008566:	2b08      	cmp	r3, #8
 8008568:	f200 8169 	bhi.w	800883e <UART_SetConfig+0x576>
 800856c:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <UART_SetConfig+0x2ac>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	080085b5 	.word	0x080085b5
 8008578:	0800883f 	.word	0x0800883f
 800857c:	08008657 	.word	0x08008657
 8008580:	0800883f 	.word	0x0800883f
 8008584:	080086ef 	.word	0x080086ef
 8008588:	0800883f 	.word	0x0800883f
 800858c:	0800883f 	.word	0x0800883f
 8008590:	0800883f 	.word	0x0800883f
 8008594:	08008791 	.word	0x08008791
 8008598:	cfff69f3 	.word	0xcfff69f3
 800859c:	40008000 	.word	0x40008000
 80085a0:	40013800 	.word	0x40013800
 80085a4:	40021000 	.word	0x40021000
 80085a8:	40004400 	.word	0x40004400
 80085ac:	40004800 	.word	0x40004800
 80085b0:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80085b4:	f7fd fc7e 	bl	8005eb4 <HAL_RCC_GetPCLK1Freq>
 80085b8:	4602      	mov	r2, r0
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d044      	beq.n	800864c <UART_SetConfig+0x384>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d03e      	beq.n	8008648 <UART_SetConfig+0x380>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d038      	beq.n	8008644 <UART_SetConfig+0x37c>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d032      	beq.n	8008640 <UART_SetConfig+0x378>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d02c      	beq.n	800863c <UART_SetConfig+0x374>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	2b05      	cmp	r3, #5
 80085e8:	d026      	beq.n	8008638 <UART_SetConfig+0x370>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	2b06      	cmp	r3, #6
 80085f0:	d020      	beq.n	8008634 <UART_SetConfig+0x36c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	2b07      	cmp	r3, #7
 80085f8:	d01a      	beq.n	8008630 <UART_SetConfig+0x368>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	2b08      	cmp	r3, #8
 8008600:	d014      	beq.n	800862c <UART_SetConfig+0x364>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	2b09      	cmp	r3, #9
 8008608:	d00e      	beq.n	8008628 <UART_SetConfig+0x360>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	2b0a      	cmp	r3, #10
 8008610:	d008      	beq.n	8008624 <UART_SetConfig+0x35c>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	2b0b      	cmp	r3, #11
 8008618:	d102      	bne.n	8008620 <UART_SetConfig+0x358>
 800861a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800861e:	e016      	b.n	800864e <UART_SetConfig+0x386>
 8008620:	2301      	movs	r3, #1
 8008622:	e014      	b.n	800864e <UART_SetConfig+0x386>
 8008624:	2380      	movs	r3, #128	; 0x80
 8008626:	e012      	b.n	800864e <UART_SetConfig+0x386>
 8008628:	2340      	movs	r3, #64	; 0x40
 800862a:	e010      	b.n	800864e <UART_SetConfig+0x386>
 800862c:	2320      	movs	r3, #32
 800862e:	e00e      	b.n	800864e <UART_SetConfig+0x386>
 8008630:	2310      	movs	r3, #16
 8008632:	e00c      	b.n	800864e <UART_SetConfig+0x386>
 8008634:	230c      	movs	r3, #12
 8008636:	e00a      	b.n	800864e <UART_SetConfig+0x386>
 8008638:	230a      	movs	r3, #10
 800863a:	e008      	b.n	800864e <UART_SetConfig+0x386>
 800863c:	2308      	movs	r3, #8
 800863e:	e006      	b.n	800864e <UART_SetConfig+0x386>
 8008640:	2306      	movs	r3, #6
 8008642:	e004      	b.n	800864e <UART_SetConfig+0x386>
 8008644:	2304      	movs	r3, #4
 8008646:	e002      	b.n	800864e <UART_SetConfig+0x386>
 8008648:	2302      	movs	r3, #2
 800864a:	e000      	b.n	800864e <UART_SetConfig+0x386>
 800864c:	2301      	movs	r3, #1
 800864e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008652:	617b      	str	r3, [r7, #20]
        break;
 8008654:	e0f6      	b.n	8008844 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d044      	beq.n	80086e8 <UART_SetConfig+0x420>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b01      	cmp	r3, #1
 8008664:	d03e      	beq.n	80086e4 <UART_SetConfig+0x41c>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	2b02      	cmp	r3, #2
 800866c:	d038      	beq.n	80086e0 <UART_SetConfig+0x418>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b03      	cmp	r3, #3
 8008674:	d032      	beq.n	80086dc <UART_SetConfig+0x414>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	2b04      	cmp	r3, #4
 800867c:	d02c      	beq.n	80086d8 <UART_SetConfig+0x410>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	2b05      	cmp	r3, #5
 8008684:	d026      	beq.n	80086d4 <UART_SetConfig+0x40c>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b06      	cmp	r3, #6
 800868c:	d020      	beq.n	80086d0 <UART_SetConfig+0x408>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	2b07      	cmp	r3, #7
 8008694:	d01a      	beq.n	80086cc <UART_SetConfig+0x404>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	2b08      	cmp	r3, #8
 800869c:	d014      	beq.n	80086c8 <UART_SetConfig+0x400>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	2b09      	cmp	r3, #9
 80086a4:	d00e      	beq.n	80086c4 <UART_SetConfig+0x3fc>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	2b0a      	cmp	r3, #10
 80086ac:	d008      	beq.n	80086c0 <UART_SetConfig+0x3f8>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	2b0b      	cmp	r3, #11
 80086b4:	d102      	bne.n	80086bc <UART_SetConfig+0x3f4>
 80086b6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80086ba:	e016      	b.n	80086ea <UART_SetConfig+0x422>
 80086bc:	4ba1      	ldr	r3, [pc, #644]	; (8008944 <UART_SetConfig+0x67c>)
 80086be:	e014      	b.n	80086ea <UART_SetConfig+0x422>
 80086c0:	4ba1      	ldr	r3, [pc, #644]	; (8008948 <UART_SetConfig+0x680>)
 80086c2:	e012      	b.n	80086ea <UART_SetConfig+0x422>
 80086c4:	4ba1      	ldr	r3, [pc, #644]	; (800894c <UART_SetConfig+0x684>)
 80086c6:	e010      	b.n	80086ea <UART_SetConfig+0x422>
 80086c8:	4ba1      	ldr	r3, [pc, #644]	; (8008950 <UART_SetConfig+0x688>)
 80086ca:	e00e      	b.n	80086ea <UART_SetConfig+0x422>
 80086cc:	4ba1      	ldr	r3, [pc, #644]	; (8008954 <UART_SetConfig+0x68c>)
 80086ce:	e00c      	b.n	80086ea <UART_SetConfig+0x422>
 80086d0:	4ba1      	ldr	r3, [pc, #644]	; (8008958 <UART_SetConfig+0x690>)
 80086d2:	e00a      	b.n	80086ea <UART_SetConfig+0x422>
 80086d4:	4ba1      	ldr	r3, [pc, #644]	; (800895c <UART_SetConfig+0x694>)
 80086d6:	e008      	b.n	80086ea <UART_SetConfig+0x422>
 80086d8:	4ba1      	ldr	r3, [pc, #644]	; (8008960 <UART_SetConfig+0x698>)
 80086da:	e006      	b.n	80086ea <UART_SetConfig+0x422>
 80086dc:	4ba1      	ldr	r3, [pc, #644]	; (8008964 <UART_SetConfig+0x69c>)
 80086de:	e004      	b.n	80086ea <UART_SetConfig+0x422>
 80086e0:	4ba1      	ldr	r3, [pc, #644]	; (8008968 <UART_SetConfig+0x6a0>)
 80086e2:	e002      	b.n	80086ea <UART_SetConfig+0x422>
 80086e4:	4ba1      	ldr	r3, [pc, #644]	; (800896c <UART_SetConfig+0x6a4>)
 80086e6:	e000      	b.n	80086ea <UART_SetConfig+0x422>
 80086e8:	4b96      	ldr	r3, [pc, #600]	; (8008944 <UART_SetConfig+0x67c>)
 80086ea:	617b      	str	r3, [r7, #20]
        break;
 80086ec:	e0aa      	b.n	8008844 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80086ee:	f7fd fb73 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 80086f2:	4602      	mov	r2, r0
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d044      	beq.n	8008786 <UART_SetConfig+0x4be>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	2b01      	cmp	r3, #1
 8008702:	d03e      	beq.n	8008782 <UART_SetConfig+0x4ba>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	2b02      	cmp	r3, #2
 800870a:	d038      	beq.n	800877e <UART_SetConfig+0x4b6>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b03      	cmp	r3, #3
 8008712:	d032      	beq.n	800877a <UART_SetConfig+0x4b2>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	2b04      	cmp	r3, #4
 800871a:	d02c      	beq.n	8008776 <UART_SetConfig+0x4ae>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b05      	cmp	r3, #5
 8008722:	d026      	beq.n	8008772 <UART_SetConfig+0x4aa>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	2b06      	cmp	r3, #6
 800872a:	d020      	beq.n	800876e <UART_SetConfig+0x4a6>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	2b07      	cmp	r3, #7
 8008732:	d01a      	beq.n	800876a <UART_SetConfig+0x4a2>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	2b08      	cmp	r3, #8
 800873a:	d014      	beq.n	8008766 <UART_SetConfig+0x49e>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	2b09      	cmp	r3, #9
 8008742:	d00e      	beq.n	8008762 <UART_SetConfig+0x49a>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	2b0a      	cmp	r3, #10
 800874a:	d008      	beq.n	800875e <UART_SetConfig+0x496>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	2b0b      	cmp	r3, #11
 8008752:	d102      	bne.n	800875a <UART_SetConfig+0x492>
 8008754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008758:	e016      	b.n	8008788 <UART_SetConfig+0x4c0>
 800875a:	2301      	movs	r3, #1
 800875c:	e014      	b.n	8008788 <UART_SetConfig+0x4c0>
 800875e:	2380      	movs	r3, #128	; 0x80
 8008760:	e012      	b.n	8008788 <UART_SetConfig+0x4c0>
 8008762:	2340      	movs	r3, #64	; 0x40
 8008764:	e010      	b.n	8008788 <UART_SetConfig+0x4c0>
 8008766:	2320      	movs	r3, #32
 8008768:	e00e      	b.n	8008788 <UART_SetConfig+0x4c0>
 800876a:	2310      	movs	r3, #16
 800876c:	e00c      	b.n	8008788 <UART_SetConfig+0x4c0>
 800876e:	230c      	movs	r3, #12
 8008770:	e00a      	b.n	8008788 <UART_SetConfig+0x4c0>
 8008772:	230a      	movs	r3, #10
 8008774:	e008      	b.n	8008788 <UART_SetConfig+0x4c0>
 8008776:	2308      	movs	r3, #8
 8008778:	e006      	b.n	8008788 <UART_SetConfig+0x4c0>
 800877a:	2306      	movs	r3, #6
 800877c:	e004      	b.n	8008788 <UART_SetConfig+0x4c0>
 800877e:	2304      	movs	r3, #4
 8008780:	e002      	b.n	8008788 <UART_SetConfig+0x4c0>
 8008782:	2302      	movs	r3, #2
 8008784:	e000      	b.n	8008788 <UART_SetConfig+0x4c0>
 8008786:	2301      	movs	r3, #1
 8008788:	fbb2 f3f3 	udiv	r3, r2, r3
 800878c:	617b      	str	r3, [r7, #20]
        break;
 800878e:	e059      	b.n	8008844 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	d04e      	beq.n	8008836 <UART_SetConfig+0x56e>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b01      	cmp	r3, #1
 800879e:	d047      	beq.n	8008830 <UART_SetConfig+0x568>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d040      	beq.n	800882a <UART_SetConfig+0x562>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d039      	beq.n	8008824 <UART_SetConfig+0x55c>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	d032      	beq.n	800881e <UART_SetConfig+0x556>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2b05      	cmp	r3, #5
 80087be:	d02b      	beq.n	8008818 <UART_SetConfig+0x550>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2b06      	cmp	r3, #6
 80087c6:	d024      	beq.n	8008812 <UART_SetConfig+0x54a>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	2b07      	cmp	r3, #7
 80087ce:	d01d      	beq.n	800880c <UART_SetConfig+0x544>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d016      	beq.n	8008806 <UART_SetConfig+0x53e>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	2b09      	cmp	r3, #9
 80087de:	d00f      	beq.n	8008800 <UART_SetConfig+0x538>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	2b0a      	cmp	r3, #10
 80087e6:	d008      	beq.n	80087fa <UART_SetConfig+0x532>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	2b0b      	cmp	r3, #11
 80087ee:	d101      	bne.n	80087f4 <UART_SetConfig+0x52c>
 80087f0:	2380      	movs	r3, #128	; 0x80
 80087f2:	e022      	b.n	800883a <UART_SetConfig+0x572>
 80087f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087f8:	e01f      	b.n	800883a <UART_SetConfig+0x572>
 80087fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087fe:	e01c      	b.n	800883a <UART_SetConfig+0x572>
 8008800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008804:	e019      	b.n	800883a <UART_SetConfig+0x572>
 8008806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800880a:	e016      	b.n	800883a <UART_SetConfig+0x572>
 800880c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008810:	e013      	b.n	800883a <UART_SetConfig+0x572>
 8008812:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008816:	e010      	b.n	800883a <UART_SetConfig+0x572>
 8008818:	f640 43cc 	movw	r3, #3276	; 0xccc
 800881c:	e00d      	b.n	800883a <UART_SetConfig+0x572>
 800881e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008822:	e00a      	b.n	800883a <UART_SetConfig+0x572>
 8008824:	f241 5355 	movw	r3, #5461	; 0x1555
 8008828:	e007      	b.n	800883a <UART_SetConfig+0x572>
 800882a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800882e:	e004      	b.n	800883a <UART_SetConfig+0x572>
 8008830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008834:	e001      	b.n	800883a <UART_SetConfig+0x572>
 8008836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800883a:	617b      	str	r3, [r7, #20]
        break;
 800883c:	e002      	b.n	8008844 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	76fb      	strb	r3, [r7, #27]
        break;
 8008842:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 86cd 	beq.w	80095e6 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	4613      	mov	r3, r2
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	4413      	add	r3, r2
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	429a      	cmp	r2, r3
 800885a:	d305      	bcc.n	8008868 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	429a      	cmp	r2, r3
 8008866:	d903      	bls.n	8008870 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	76fb      	strb	r3, [r7, #27]
 800886c:	f000 bebb 	b.w	80095e6 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8008870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008874:	2b08      	cmp	r3, #8
 8008876:	f200 828d 	bhi.w	8008d94 <UART_SetConfig+0xacc>
 800887a:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <UART_SetConfig+0x5b8>)
 800887c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008880:	080088a5 	.word	0x080088a5
 8008884:	08008d95 	.word	0x08008d95
 8008888:	08008a0f 	.word	0x08008a0f
 800888c:	08008d95 	.word	0x08008d95
 8008890:	08008b05 	.word	0x08008b05
 8008894:	08008d95 	.word	0x08008d95
 8008898:	08008d95 	.word	0x08008d95
 800889c:	08008d95 	.word	0x08008d95
 80088a0:	08008c43 	.word	0x08008c43
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80088a4:	f7fd fb06 	bl	8005eb4 <HAL_RCC_GetPCLK1Freq>
 80088a8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f04f 0100 	mov.w	r1, #0
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d07d      	beq.n	80089b6 <UART_SetConfig+0x6ee>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d074      	beq.n	80089ac <UART_SetConfig+0x6e4>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d06b      	beq.n	80089a2 <UART_SetConfig+0x6da>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d062      	beq.n	8008998 <UART_SetConfig+0x6d0>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d059      	beq.n	800898e <UART_SetConfig+0x6c6>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2b05      	cmp	r3, #5
 80088e0:	d050      	beq.n	8008984 <UART_SetConfig+0x6bc>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	2b06      	cmp	r3, #6
 80088e8:	d047      	beq.n	800897a <UART_SetConfig+0x6b2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	d03e      	beq.n	8008970 <UART_SetConfig+0x6a8>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	2b08      	cmp	r3, #8
 80088f8:	d01f      	beq.n	800893a <UART_SetConfig+0x672>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	2b09      	cmp	r3, #9
 8008900:	d016      	beq.n	8008930 <UART_SetConfig+0x668>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b0a      	cmp	r3, #10
 8008908:	d00d      	beq.n	8008926 <UART_SetConfig+0x65e>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	2b0b      	cmp	r3, #11
 8008910:	d104      	bne.n	800891c <UART_SetConfig+0x654>
 8008912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008916:	f04f 0400 	mov.w	r4, #0
 800891a:	e050      	b.n	80089be <UART_SetConfig+0x6f6>
 800891c:	f04f 0301 	mov.w	r3, #1
 8008920:	f04f 0400 	mov.w	r4, #0
 8008924:	e04b      	b.n	80089be <UART_SetConfig+0x6f6>
 8008926:	f04f 0380 	mov.w	r3, #128	; 0x80
 800892a:	f04f 0400 	mov.w	r4, #0
 800892e:	e046      	b.n	80089be <UART_SetConfig+0x6f6>
 8008930:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008934:	f04f 0400 	mov.w	r4, #0
 8008938:	e041      	b.n	80089be <UART_SetConfig+0x6f6>
 800893a:	f04f 0320 	mov.w	r3, #32
 800893e:	f04f 0400 	mov.w	r4, #0
 8008942:	e03c      	b.n	80089be <UART_SetConfig+0x6f6>
 8008944:	00f42400 	.word	0x00f42400
 8008948:	0001e848 	.word	0x0001e848
 800894c:	0003d090 	.word	0x0003d090
 8008950:	0007a120 	.word	0x0007a120
 8008954:	000f4240 	.word	0x000f4240
 8008958:	00145855 	.word	0x00145855
 800895c:	00186a00 	.word	0x00186a00
 8008960:	001e8480 	.word	0x001e8480
 8008964:	0028b0aa 	.word	0x0028b0aa
 8008968:	003d0900 	.word	0x003d0900
 800896c:	007a1200 	.word	0x007a1200
 8008970:	f04f 0310 	mov.w	r3, #16
 8008974:	f04f 0400 	mov.w	r4, #0
 8008978:	e021      	b.n	80089be <UART_SetConfig+0x6f6>
 800897a:	f04f 030c 	mov.w	r3, #12
 800897e:	f04f 0400 	mov.w	r4, #0
 8008982:	e01c      	b.n	80089be <UART_SetConfig+0x6f6>
 8008984:	f04f 030a 	mov.w	r3, #10
 8008988:	f04f 0400 	mov.w	r4, #0
 800898c:	e017      	b.n	80089be <UART_SetConfig+0x6f6>
 800898e:	f04f 0308 	mov.w	r3, #8
 8008992:	f04f 0400 	mov.w	r4, #0
 8008996:	e012      	b.n	80089be <UART_SetConfig+0x6f6>
 8008998:	f04f 0306 	mov.w	r3, #6
 800899c:	f04f 0400 	mov.w	r4, #0
 80089a0:	e00d      	b.n	80089be <UART_SetConfig+0x6f6>
 80089a2:	f04f 0304 	mov.w	r3, #4
 80089a6:	f04f 0400 	mov.w	r4, #0
 80089aa:	e008      	b.n	80089be <UART_SetConfig+0x6f6>
 80089ac:	f04f 0302 	mov.w	r3, #2
 80089b0:	f04f 0400 	mov.w	r4, #0
 80089b4:	e003      	b.n	80089be <UART_SetConfig+0x6f6>
 80089b6:	f04f 0301 	mov.w	r3, #1
 80089ba:	f04f 0400 	mov.w	r4, #0
 80089be:	461a      	mov	r2, r3
 80089c0:	4623      	mov	r3, r4
 80089c2:	f7f8 f8cf 	bl	8000b64 <__aeabi_uldivmod>
 80089c6:	4603      	mov	r3, r0
 80089c8:	460c      	mov	r4, r1
 80089ca:	4619      	mov	r1, r3
 80089cc:	4622      	mov	r2, r4
 80089ce:	f04f 0300 	mov.w	r3, #0
 80089d2:	f04f 0400 	mov.w	r4, #0
 80089d6:	0214      	lsls	r4, r2, #8
 80089d8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80089dc:	020b      	lsls	r3, r1, #8
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6852      	ldr	r2, [r2, #4]
 80089e2:	0852      	lsrs	r2, r2, #1
 80089e4:	4611      	mov	r1, r2
 80089e6:	f04f 0200 	mov.w	r2, #0
 80089ea:	eb13 0b01 	adds.w	fp, r3, r1
 80089ee:	eb44 0c02 	adc.w	ip, r4, r2
 80089f2:	4658      	mov	r0, fp
 80089f4:	4661      	mov	r1, ip
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f04f 0400 	mov.w	r4, #0
 80089fe:	461a      	mov	r2, r3
 8008a00:	4623      	mov	r3, r4
 8008a02:	f7f8 f8af 	bl	8000b64 <__aeabi_uldivmod>
 8008a06:	4603      	mov	r3, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	61fb      	str	r3, [r7, #28]
            break;
 8008a0c:	e1c5      	b.n	8008d9a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d05b      	beq.n	8008ace <UART_SetConfig+0x806>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d053      	beq.n	8008ac6 <UART_SetConfig+0x7fe>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d04b      	beq.n	8008abe <UART_SetConfig+0x7f6>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d043      	beq.n	8008ab6 <UART_SetConfig+0x7ee>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d03b      	beq.n	8008aae <UART_SetConfig+0x7e6>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	2b05      	cmp	r3, #5
 8008a3c:	d033      	beq.n	8008aa6 <UART_SetConfig+0x7de>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	2b06      	cmp	r3, #6
 8008a44:	d02b      	beq.n	8008a9e <UART_SetConfig+0x7d6>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	2b07      	cmp	r3, #7
 8008a4c:	d023      	beq.n	8008a96 <UART_SetConfig+0x7ce>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d01b      	beq.n	8008a8e <UART_SetConfig+0x7c6>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	2b09      	cmp	r3, #9
 8008a5c:	d013      	beq.n	8008a86 <UART_SetConfig+0x7be>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	2b0a      	cmp	r3, #10
 8008a64:	d00b      	beq.n	8008a7e <UART_SetConfig+0x7b6>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	2b0b      	cmp	r3, #11
 8008a6c:	d103      	bne.n	8008a76 <UART_SetConfig+0x7ae>
 8008a6e:	4bae      	ldr	r3, [pc, #696]	; (8008d28 <UART_SetConfig+0xa60>)
 8008a70:	f04f 0400 	mov.w	r4, #0
 8008a74:	e02e      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008a76:	4bad      	ldr	r3, [pc, #692]	; (8008d2c <UART_SetConfig+0xa64>)
 8008a78:	f04f 0400 	mov.w	r4, #0
 8008a7c:	e02a      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008a7e:	4bac      	ldr	r3, [pc, #688]	; (8008d30 <UART_SetConfig+0xa68>)
 8008a80:	f04f 0400 	mov.w	r4, #0
 8008a84:	e026      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008a86:	4bab      	ldr	r3, [pc, #684]	; (8008d34 <UART_SetConfig+0xa6c>)
 8008a88:	f04f 0400 	mov.w	r4, #0
 8008a8c:	e022      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008a8e:	4baa      	ldr	r3, [pc, #680]	; (8008d38 <UART_SetConfig+0xa70>)
 8008a90:	f04f 0400 	mov.w	r4, #0
 8008a94:	e01e      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008a96:	4ba9      	ldr	r3, [pc, #676]	; (8008d3c <UART_SetConfig+0xa74>)
 8008a98:	f04f 0400 	mov.w	r4, #0
 8008a9c:	e01a      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008a9e:	a49e      	add	r4, pc, #632	; (adr r4, 8008d18 <UART_SetConfig+0xa50>)
 8008aa0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008aa4:	e016      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008aa6:	4ba6      	ldr	r3, [pc, #664]	; (8008d40 <UART_SetConfig+0xa78>)
 8008aa8:	f04f 0400 	mov.w	r4, #0
 8008aac:	e012      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008aae:	4ba5      	ldr	r3, [pc, #660]	; (8008d44 <UART_SetConfig+0xa7c>)
 8008ab0:	f04f 0400 	mov.w	r4, #0
 8008ab4:	e00e      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008ab6:	a49a      	add	r4, pc, #616	; (adr r4, 8008d20 <UART_SetConfig+0xa58>)
 8008ab8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008abc:	e00a      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008abe:	4ba2      	ldr	r3, [pc, #648]	; (8008d48 <UART_SetConfig+0xa80>)
 8008ac0:	f04f 0400 	mov.w	r4, #0
 8008ac4:	e006      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008ac6:	4ba1      	ldr	r3, [pc, #644]	; (8008d4c <UART_SetConfig+0xa84>)
 8008ac8:	f04f 0400 	mov.w	r4, #0
 8008acc:	e002      	b.n	8008ad4 <UART_SetConfig+0x80c>
 8008ace:	4b97      	ldr	r3, [pc, #604]	; (8008d2c <UART_SetConfig+0xa64>)
 8008ad0:	f04f 0400 	mov.w	r4, #0
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6852      	ldr	r2, [r2, #4]
 8008ad8:	0852      	lsrs	r2, r2, #1
 8008ada:	4611      	mov	r1, r2
 8008adc:	f04f 0200 	mov.w	r2, #0
 8008ae0:	eb13 0b01 	adds.w	fp, r3, r1
 8008ae4:	eb44 0c02 	adc.w	ip, r4, r2
 8008ae8:	4658      	mov	r0, fp
 8008aea:	4661      	mov	r1, ip
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f04f 0400 	mov.w	r4, #0
 8008af4:	461a      	mov	r2, r3
 8008af6:	4623      	mov	r3, r4
 8008af8:	f7f8 f834 	bl	8000b64 <__aeabi_uldivmod>
 8008afc:	4603      	mov	r3, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	61fb      	str	r3, [r7, #28]
            break;
 8008b02:	e14a      	b.n	8008d9a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8008b04:	f7fd f968 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8008b08:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f04f 0100 	mov.w	r1, #0
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d067      	beq.n	8008bea <UART_SetConfig+0x922>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d05e      	beq.n	8008be0 <UART_SetConfig+0x918>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d055      	beq.n	8008bd6 <UART_SetConfig+0x90e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d04c      	beq.n	8008bcc <UART_SetConfig+0x904>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d043      	beq.n	8008bc2 <UART_SetConfig+0x8fa>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	2b05      	cmp	r3, #5
 8008b40:	d03a      	beq.n	8008bb8 <UART_SetConfig+0x8f0>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	2b06      	cmp	r3, #6
 8008b48:	d031      	beq.n	8008bae <UART_SetConfig+0x8e6>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	2b07      	cmp	r3, #7
 8008b50:	d028      	beq.n	8008ba4 <UART_SetConfig+0x8dc>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	2b08      	cmp	r3, #8
 8008b58:	d01f      	beq.n	8008b9a <UART_SetConfig+0x8d2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	2b09      	cmp	r3, #9
 8008b60:	d016      	beq.n	8008b90 <UART_SetConfig+0x8c8>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	2b0a      	cmp	r3, #10
 8008b68:	d00d      	beq.n	8008b86 <UART_SetConfig+0x8be>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	2b0b      	cmp	r3, #11
 8008b70:	d104      	bne.n	8008b7c <UART_SetConfig+0x8b4>
 8008b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b76:	f04f 0400 	mov.w	r4, #0
 8008b7a:	e03a      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008b7c:	f04f 0301 	mov.w	r3, #1
 8008b80:	f04f 0400 	mov.w	r4, #0
 8008b84:	e035      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008b86:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008b8a:	f04f 0400 	mov.w	r4, #0
 8008b8e:	e030      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008b90:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008b94:	f04f 0400 	mov.w	r4, #0
 8008b98:	e02b      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008b9a:	f04f 0320 	mov.w	r3, #32
 8008b9e:	f04f 0400 	mov.w	r4, #0
 8008ba2:	e026      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008ba4:	f04f 0310 	mov.w	r3, #16
 8008ba8:	f04f 0400 	mov.w	r4, #0
 8008bac:	e021      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008bae:	f04f 030c 	mov.w	r3, #12
 8008bb2:	f04f 0400 	mov.w	r4, #0
 8008bb6:	e01c      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008bb8:	f04f 030a 	mov.w	r3, #10
 8008bbc:	f04f 0400 	mov.w	r4, #0
 8008bc0:	e017      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008bc2:	f04f 0308 	mov.w	r3, #8
 8008bc6:	f04f 0400 	mov.w	r4, #0
 8008bca:	e012      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008bcc:	f04f 0306 	mov.w	r3, #6
 8008bd0:	f04f 0400 	mov.w	r4, #0
 8008bd4:	e00d      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008bd6:	f04f 0304 	mov.w	r3, #4
 8008bda:	f04f 0400 	mov.w	r4, #0
 8008bde:	e008      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008be0:	f04f 0302 	mov.w	r3, #2
 8008be4:	f04f 0400 	mov.w	r4, #0
 8008be8:	e003      	b.n	8008bf2 <UART_SetConfig+0x92a>
 8008bea:	f04f 0301 	mov.w	r3, #1
 8008bee:	f04f 0400 	mov.w	r4, #0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	f7f7 ffb5 	bl	8000b64 <__aeabi_uldivmod>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4622      	mov	r2, r4
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	f04f 0400 	mov.w	r4, #0
 8008c0a:	0214      	lsls	r4, r2, #8
 8008c0c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008c10:	020b      	lsls	r3, r1, #8
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	6852      	ldr	r2, [r2, #4]
 8008c16:	0852      	lsrs	r2, r2, #1
 8008c18:	4611      	mov	r1, r2
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	eb13 0b01 	adds.w	fp, r3, r1
 8008c22:	eb44 0c02 	adc.w	ip, r4, r2
 8008c26:	4658      	mov	r0, fp
 8008c28:	4661      	mov	r1, ip
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f04f 0400 	mov.w	r4, #0
 8008c32:	461a      	mov	r2, r3
 8008c34:	4623      	mov	r3, r4
 8008c36:	f7f7 ff95 	bl	8000b64 <__aeabi_uldivmod>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	61fb      	str	r3, [r7, #28]
            break;
 8008c40:	e0ab      	b.n	8008d9a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8088 	beq.w	8008d5c <UART_SetConfig+0xa94>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d05b      	beq.n	8008d0c <UART_SetConfig+0xa44>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d052      	beq.n	8008d02 <UART_SetConfig+0xa3a>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d04a      	beq.n	8008cfa <UART_SetConfig+0xa32>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d041      	beq.n	8008cf0 <UART_SetConfig+0xa28>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	2b05      	cmp	r3, #5
 8008c72:	d039      	beq.n	8008ce8 <UART_SetConfig+0xa20>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	2b06      	cmp	r3, #6
 8008c7a:	d031      	beq.n	8008ce0 <UART_SetConfig+0xa18>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c80:	2b07      	cmp	r3, #7
 8008c82:	d028      	beq.n	8008cd6 <UART_SetConfig+0xa0e>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d01f      	beq.n	8008ccc <UART_SetConfig+0xa04>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	2b09      	cmp	r3, #9
 8008c92:	d016      	beq.n	8008cc2 <UART_SetConfig+0x9fa>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	2b0a      	cmp	r3, #10
 8008c9a:	d00d      	beq.n	8008cb8 <UART_SetConfig+0x9f0>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	2b0b      	cmp	r3, #11
 8008ca2:	d104      	bne.n	8008cae <UART_SetConfig+0x9e6>
 8008ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ca8:	f04f 0400 	mov.w	r4, #0
 8008cac:	e05a      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008cae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008cb2:	f04f 0400 	mov.w	r4, #0
 8008cb6:	e055      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cbc:	f04f 0400 	mov.w	r4, #0
 8008cc0:	e050      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008cc6:	f04f 0400 	mov.w	r4, #0
 8008cca:	e04b      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008ccc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008cd0:	f04f 0400 	mov.w	r4, #0
 8008cd4:	e046      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008cd6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008cda:	f04f 0400 	mov.w	r4, #0
 8008cde:	e041      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008ce0:	4b1b      	ldr	r3, [pc, #108]	; (8008d50 <UART_SetConfig+0xa88>)
 8008ce2:	f04f 0400 	mov.w	r4, #0
 8008ce6:	e03d      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008ce8:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <UART_SetConfig+0xa8c>)
 8008cea:	f04f 0400 	mov.w	r4, #0
 8008cee:	e039      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008cf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cf4:	f04f 0400 	mov.w	r4, #0
 8008cf8:	e034      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008cfa:	4b17      	ldr	r3, [pc, #92]	; (8008d58 <UART_SetConfig+0xa90>)
 8008cfc:	f04f 0400 	mov.w	r4, #0
 8008d00:	e030      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008d02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d06:	f04f 0400 	mov.w	r4, #0
 8008d0a:	e02b      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008d0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d10:	f04f 0400 	mov.w	r4, #0
 8008d14:	e026      	b.n	8008d64 <UART_SetConfig+0xa9c>
 8008d16:	bf00      	nop
 8008d18:	14585500 	.word	0x14585500
 8008d1c:	00000000 	.word	0x00000000
 8008d20:	28b0aa00 	.word	0x28b0aa00
 8008d24:	00000000 	.word	0x00000000
 8008d28:	00f42400 	.word	0x00f42400
 8008d2c:	f4240000 	.word	0xf4240000
 8008d30:	01e84800 	.word	0x01e84800
 8008d34:	03d09000 	.word	0x03d09000
 8008d38:	07a12000 	.word	0x07a12000
 8008d3c:	0f424000 	.word	0x0f424000
 8008d40:	186a0000 	.word	0x186a0000
 8008d44:	1e848000 	.word	0x1e848000
 8008d48:	3d090000 	.word	0x3d090000
 8008d4c:	7a120000 	.word	0x7a120000
 8008d50:	000aaa00 	.word	0x000aaa00
 8008d54:	000ccc00 	.word	0x000ccc00
 8008d58:	00155500 	.word	0x00155500
 8008d5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008d60:	f04f 0400 	mov.w	r4, #0
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	6852      	ldr	r2, [r2, #4]
 8008d68:	0852      	lsrs	r2, r2, #1
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	eb13 0b01 	adds.w	fp, r3, r1
 8008d74:	eb44 0c02 	adc.w	ip, r4, r2
 8008d78:	4658      	mov	r0, fp
 8008d7a:	4661      	mov	r1, ip
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f04f 0400 	mov.w	r4, #0
 8008d84:	461a      	mov	r2, r3
 8008d86:	4623      	mov	r3, r4
 8008d88:	f7f7 feec 	bl	8000b64 <__aeabi_uldivmod>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	61fb      	str	r3, [r7, #28]
            break;
 8008d92:	e002      	b.n	8008d9a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	76fb      	strb	r3, [r7, #27]
            break;
 8008d98:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008da0:	d309      	bcc.n	8008db6 <UART_SetConfig+0xaee>
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008da8:	d205      	bcs.n	8008db6 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	60da      	str	r2, [r3, #12]
 8008db2:	f000 bc18 	b.w	80095e6 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	76fb      	strb	r3, [r7, #27]
 8008dba:	f000 bc14 	b.w	80095e6 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc6:	f040 8204 	bne.w	80091d2 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8008dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	f200 81df 	bhi.w	8009192 <UART_SetConfig+0xeca>
 8008dd4:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <UART_SetConfig+0xb14>)
 8008dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dda:	bf00      	nop
 8008ddc:	08008e01 	.word	0x08008e01
 8008de0:	08008eb9 	.word	0x08008eb9
 8008de4:	08008f71 	.word	0x08008f71
 8008de8:	08009193 	.word	0x08009193
 8008dec:	08009019 	.word	0x08009019
 8008df0:	08009193 	.word	0x08009193
 8008df4:	08009193 	.word	0x08009193
 8008df8:	08009193 	.word	0x08009193
 8008dfc:	080090d1 	.word	0x080090d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e00:	f7fd f858 	bl	8005eb4 <HAL_RCC_GetPCLK1Freq>
 8008e04:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d044      	beq.n	8008e98 <UART_SetConfig+0xbd0>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d03e      	beq.n	8008e94 <UART_SetConfig+0xbcc>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d038      	beq.n	8008e90 <UART_SetConfig+0xbc8>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d032      	beq.n	8008e8c <UART_SetConfig+0xbc4>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d02c      	beq.n	8008e88 <UART_SetConfig+0xbc0>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d026      	beq.n	8008e84 <UART_SetConfig+0xbbc>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	2b06      	cmp	r3, #6
 8008e3c:	d020      	beq.n	8008e80 <UART_SetConfig+0xbb8>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	2b07      	cmp	r3, #7
 8008e44:	d01a      	beq.n	8008e7c <UART_SetConfig+0xbb4>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d014      	beq.n	8008e78 <UART_SetConfig+0xbb0>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	2b09      	cmp	r3, #9
 8008e54:	d00e      	beq.n	8008e74 <UART_SetConfig+0xbac>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	2b0a      	cmp	r3, #10
 8008e5c:	d008      	beq.n	8008e70 <UART_SetConfig+0xba8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	2b0b      	cmp	r3, #11
 8008e64:	d102      	bne.n	8008e6c <UART_SetConfig+0xba4>
 8008e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e6a:	e016      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e014      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e70:	2380      	movs	r3, #128	; 0x80
 8008e72:	e012      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e74:	2340      	movs	r3, #64	; 0x40
 8008e76:	e010      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e78:	2320      	movs	r3, #32
 8008e7a:	e00e      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e7c:	2310      	movs	r3, #16
 8008e7e:	e00c      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e80:	230c      	movs	r3, #12
 8008e82:	e00a      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e84:	230a      	movs	r3, #10
 8008e86:	e008      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e88:	2308      	movs	r3, #8
 8008e8a:	e006      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e8c:	2306      	movs	r3, #6
 8008e8e:	e004      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e90:	2304      	movs	r3, #4
 8008e92:	e002      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e000      	b.n	8008e9a <UART_SetConfig+0xbd2>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea0:	005a      	lsls	r2, r3, #1
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	085b      	lsrs	r3, r3, #1
 8008ea8:	441a      	add	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	61fb      	str	r3, [r7, #28]
        break;
 8008eb6:	e16f      	b.n	8009198 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eb8:	f7fd f812 	bl	8005ee0 <HAL_RCC_GetPCLK2Freq>
 8008ebc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d044      	beq.n	8008f50 <UART_SetConfig+0xc88>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d03e      	beq.n	8008f4c <UART_SetConfig+0xc84>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d038      	beq.n	8008f48 <UART_SetConfig+0xc80>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d032      	beq.n	8008f44 <UART_SetConfig+0xc7c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d02c      	beq.n	8008f40 <UART_SetConfig+0xc78>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	d026      	beq.n	8008f3c <UART_SetConfig+0xc74>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	2b06      	cmp	r3, #6
 8008ef4:	d020      	beq.n	8008f38 <UART_SetConfig+0xc70>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	2b07      	cmp	r3, #7
 8008efc:	d01a      	beq.n	8008f34 <UART_SetConfig+0xc6c>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	2b08      	cmp	r3, #8
 8008f04:	d014      	beq.n	8008f30 <UART_SetConfig+0xc68>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	2b09      	cmp	r3, #9
 8008f0c:	d00e      	beq.n	8008f2c <UART_SetConfig+0xc64>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2b0a      	cmp	r3, #10
 8008f14:	d008      	beq.n	8008f28 <UART_SetConfig+0xc60>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	2b0b      	cmp	r3, #11
 8008f1c:	d102      	bne.n	8008f24 <UART_SetConfig+0xc5c>
 8008f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f22:	e016      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e014      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f28:	2380      	movs	r3, #128	; 0x80
 8008f2a:	e012      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f2c:	2340      	movs	r3, #64	; 0x40
 8008f2e:	e010      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f30:	2320      	movs	r3, #32
 8008f32:	e00e      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f34:	2310      	movs	r3, #16
 8008f36:	e00c      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f38:	230c      	movs	r3, #12
 8008f3a:	e00a      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f3c:	230a      	movs	r3, #10
 8008f3e:	e008      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f40:	2308      	movs	r3, #8
 8008f42:	e006      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f44:	2306      	movs	r3, #6
 8008f46:	e004      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f48:	2304      	movs	r3, #4
 8008f4a:	e002      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e000      	b.n	8008f52 <UART_SetConfig+0xc8a>
 8008f50:	2301      	movs	r3, #1
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f58:	005a      	lsls	r2, r3, #1
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	085b      	lsrs	r3, r3, #1
 8008f60:	441a      	add	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	61fb      	str	r3, [r7, #28]
        break;
 8008f6e:	e113      	b.n	8009198 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d043      	beq.n	8009000 <UART_SetConfig+0xd38>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d03d      	beq.n	8008ffc <UART_SetConfig+0xd34>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d037      	beq.n	8008ff8 <UART_SetConfig+0xd30>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d031      	beq.n	8008ff4 <UART_SetConfig+0xd2c>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d02b      	beq.n	8008ff0 <UART_SetConfig+0xd28>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b05      	cmp	r3, #5
 8008f9e:	d025      	beq.n	8008fec <UART_SetConfig+0xd24>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	2b06      	cmp	r3, #6
 8008fa6:	d01f      	beq.n	8008fe8 <UART_SetConfig+0xd20>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	2b07      	cmp	r3, #7
 8008fae:	d019      	beq.n	8008fe4 <UART_SetConfig+0xd1c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	d013      	beq.n	8008fe0 <UART_SetConfig+0xd18>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	2b09      	cmp	r3, #9
 8008fbe:	d00d      	beq.n	8008fdc <UART_SetConfig+0xd14>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	2b0a      	cmp	r3, #10
 8008fc6:	d007      	beq.n	8008fd8 <UART_SetConfig+0xd10>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	2b0b      	cmp	r3, #11
 8008fce:	d101      	bne.n	8008fd4 <UART_SetConfig+0xd0c>
 8008fd0:	4b8d      	ldr	r3, [pc, #564]	; (8009208 <UART_SetConfig+0xf40>)
 8008fd2:	e016      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008fd4:	4b8d      	ldr	r3, [pc, #564]	; (800920c <UART_SetConfig+0xf44>)
 8008fd6:	e014      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008fd8:	4b8d      	ldr	r3, [pc, #564]	; (8009210 <UART_SetConfig+0xf48>)
 8008fda:	e012      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008fdc:	4b8d      	ldr	r3, [pc, #564]	; (8009214 <UART_SetConfig+0xf4c>)
 8008fde:	e010      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008fe0:	4b8d      	ldr	r3, [pc, #564]	; (8009218 <UART_SetConfig+0xf50>)
 8008fe2:	e00e      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008fe4:	4b8d      	ldr	r3, [pc, #564]	; (800921c <UART_SetConfig+0xf54>)
 8008fe6:	e00c      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008fe8:	4b8d      	ldr	r3, [pc, #564]	; (8009220 <UART_SetConfig+0xf58>)
 8008fea:	e00a      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008fec:	4b8d      	ldr	r3, [pc, #564]	; (8009224 <UART_SetConfig+0xf5c>)
 8008fee:	e008      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008ff0:	4b8d      	ldr	r3, [pc, #564]	; (8009228 <UART_SetConfig+0xf60>)
 8008ff2:	e006      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008ff4:	4b8d      	ldr	r3, [pc, #564]	; (800922c <UART_SetConfig+0xf64>)
 8008ff6:	e004      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008ff8:	4b8d      	ldr	r3, [pc, #564]	; (8009230 <UART_SetConfig+0xf68>)
 8008ffa:	e002      	b.n	8009002 <UART_SetConfig+0xd3a>
 8008ffc:	4b8d      	ldr	r3, [pc, #564]	; (8009234 <UART_SetConfig+0xf6c>)
 8008ffe:	e000      	b.n	8009002 <UART_SetConfig+0xd3a>
 8009000:	4b82      	ldr	r3, [pc, #520]	; (800920c <UART_SetConfig+0xf44>)
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	6852      	ldr	r2, [r2, #4]
 8009006:	0852      	lsrs	r2, r2, #1
 8009008:	441a      	add	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009012:	b29b      	uxth	r3, r3
 8009014:	61fb      	str	r3, [r7, #28]
        break;
 8009016:	e0bf      	b.n	8009198 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009018:	f7fc fede 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 800901c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	2b00      	cmp	r3, #0
 8009024:	d044      	beq.n	80090b0 <UART_SetConfig+0xde8>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	2b01      	cmp	r3, #1
 800902c:	d03e      	beq.n	80090ac <UART_SetConfig+0xde4>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009032:	2b02      	cmp	r3, #2
 8009034:	d038      	beq.n	80090a8 <UART_SetConfig+0xde0>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	2b03      	cmp	r3, #3
 800903c:	d032      	beq.n	80090a4 <UART_SetConfig+0xddc>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	2b04      	cmp	r3, #4
 8009044:	d02c      	beq.n	80090a0 <UART_SetConfig+0xdd8>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	2b05      	cmp	r3, #5
 800904c:	d026      	beq.n	800909c <UART_SetConfig+0xdd4>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	2b06      	cmp	r3, #6
 8009054:	d020      	beq.n	8009098 <UART_SetConfig+0xdd0>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	2b07      	cmp	r3, #7
 800905c:	d01a      	beq.n	8009094 <UART_SetConfig+0xdcc>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	2b08      	cmp	r3, #8
 8009064:	d014      	beq.n	8009090 <UART_SetConfig+0xdc8>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b09      	cmp	r3, #9
 800906c:	d00e      	beq.n	800908c <UART_SetConfig+0xdc4>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b0a      	cmp	r3, #10
 8009074:	d008      	beq.n	8009088 <UART_SetConfig+0xdc0>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	2b0b      	cmp	r3, #11
 800907c:	d102      	bne.n	8009084 <UART_SetConfig+0xdbc>
 800907e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009082:	e016      	b.n	80090b2 <UART_SetConfig+0xdea>
 8009084:	2301      	movs	r3, #1
 8009086:	e014      	b.n	80090b2 <UART_SetConfig+0xdea>
 8009088:	2380      	movs	r3, #128	; 0x80
 800908a:	e012      	b.n	80090b2 <UART_SetConfig+0xdea>
 800908c:	2340      	movs	r3, #64	; 0x40
 800908e:	e010      	b.n	80090b2 <UART_SetConfig+0xdea>
 8009090:	2320      	movs	r3, #32
 8009092:	e00e      	b.n	80090b2 <UART_SetConfig+0xdea>
 8009094:	2310      	movs	r3, #16
 8009096:	e00c      	b.n	80090b2 <UART_SetConfig+0xdea>
 8009098:	230c      	movs	r3, #12
 800909a:	e00a      	b.n	80090b2 <UART_SetConfig+0xdea>
 800909c:	230a      	movs	r3, #10
 800909e:	e008      	b.n	80090b2 <UART_SetConfig+0xdea>
 80090a0:	2308      	movs	r3, #8
 80090a2:	e006      	b.n	80090b2 <UART_SetConfig+0xdea>
 80090a4:	2306      	movs	r3, #6
 80090a6:	e004      	b.n	80090b2 <UART_SetConfig+0xdea>
 80090a8:	2304      	movs	r3, #4
 80090aa:	e002      	b.n	80090b2 <UART_SetConfig+0xdea>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e000      	b.n	80090b2 <UART_SetConfig+0xdea>
 80090b0:	2301      	movs	r3, #1
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b8:	005a      	lsls	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	441a      	add	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	61fb      	str	r3, [r7, #28]
        break;
 80090ce:	e063      	b.n	8009198 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d04f      	beq.n	8009178 <UART_SetConfig+0xeb0>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d048      	beq.n	8009172 <UART_SetConfig+0xeaa>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d041      	beq.n	800916c <UART_SetConfig+0xea4>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d03a      	beq.n	8009166 <UART_SetConfig+0xe9e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d033      	beq.n	8009160 <UART_SetConfig+0xe98>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b05      	cmp	r3, #5
 80090fe:	d02c      	beq.n	800915a <UART_SetConfig+0xe92>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	2b06      	cmp	r3, #6
 8009106:	d025      	beq.n	8009154 <UART_SetConfig+0xe8c>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	2b07      	cmp	r3, #7
 800910e:	d01e      	beq.n	800914e <UART_SetConfig+0xe86>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	2b08      	cmp	r3, #8
 8009116:	d017      	beq.n	8009148 <UART_SetConfig+0xe80>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	2b09      	cmp	r3, #9
 800911e:	d010      	beq.n	8009142 <UART_SetConfig+0xe7a>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	2b0a      	cmp	r3, #10
 8009126:	d009      	beq.n	800913c <UART_SetConfig+0xe74>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	2b0b      	cmp	r3, #11
 800912e:	d102      	bne.n	8009136 <UART_SetConfig+0xe6e>
 8009130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009134:	e022      	b.n	800917c <UART_SetConfig+0xeb4>
 8009136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800913a:	e01f      	b.n	800917c <UART_SetConfig+0xeb4>
 800913c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009140:	e01c      	b.n	800917c <UART_SetConfig+0xeb4>
 8009142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009146:	e019      	b.n	800917c <UART_SetConfig+0xeb4>
 8009148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800914c:	e016      	b.n	800917c <UART_SetConfig+0xeb4>
 800914e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009152:	e013      	b.n	800917c <UART_SetConfig+0xeb4>
 8009154:	f241 5354 	movw	r3, #5460	; 0x1554
 8009158:	e010      	b.n	800917c <UART_SetConfig+0xeb4>
 800915a:	f641 1398 	movw	r3, #6552	; 0x1998
 800915e:	e00d      	b.n	800917c <UART_SetConfig+0xeb4>
 8009160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009164:	e00a      	b.n	800917c <UART_SetConfig+0xeb4>
 8009166:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800916a:	e007      	b.n	800917c <UART_SetConfig+0xeb4>
 800916c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009170:	e004      	b.n	800917c <UART_SetConfig+0xeb4>
 8009172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009176:	e001      	b.n	800917c <UART_SetConfig+0xeb4>
 8009178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6852      	ldr	r2, [r2, #4]
 8009180:	0852      	lsrs	r2, r2, #1
 8009182:	441a      	add	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	fbb2 f3f3 	udiv	r3, r2, r3
 800918c:	b29b      	uxth	r3, r3
 800918e:	61fb      	str	r3, [r7, #28]
        break;
 8009190:	e002      	b.n	8009198 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	76fb      	strb	r3, [r7, #27]
        break;
 8009196:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	2b0f      	cmp	r3, #15
 800919c:	d916      	bls.n	80091cc <UART_SetConfig+0xf04>
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a4:	d212      	bcs.n	80091cc <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f023 030f 	bic.w	r3, r3, #15
 80091ae:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	085b      	lsrs	r3, r3, #1
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	89fb      	ldrh	r3, [r7, #14]
 80091be:	4313      	orrs	r3, r2
 80091c0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	89fa      	ldrh	r2, [r7, #14]
 80091c8:	60da      	str	r2, [r3, #12]
 80091ca:	e20c      	b.n	80095e6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	76fb      	strb	r3, [r7, #27]
 80091d0:	e209      	b.n	80095e6 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 80091d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	f200 81f4 	bhi.w	80095c4 <UART_SetConfig+0x12fc>
 80091dc:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <UART_SetConfig+0xf1c>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	08009239 	.word	0x08009239
 80091e8:	080092ef 	.word	0x080092ef
 80091ec:	080093a5 	.word	0x080093a5
 80091f0:	080095c5 	.word	0x080095c5
 80091f4:	0800944f 	.word	0x0800944f
 80091f8:	080095c5 	.word	0x080095c5
 80091fc:	080095c5 	.word	0x080095c5
 8009200:	080095c5 	.word	0x080095c5
 8009204:	08009505 	.word	0x08009505
 8009208:	0001e848 	.word	0x0001e848
 800920c:	01e84800 	.word	0x01e84800
 8009210:	0003d090 	.word	0x0003d090
 8009214:	0007a120 	.word	0x0007a120
 8009218:	000f4240 	.word	0x000f4240
 800921c:	001e8480 	.word	0x001e8480
 8009220:	0028b0aa 	.word	0x0028b0aa
 8009224:	0030d400 	.word	0x0030d400
 8009228:	003d0900 	.word	0x003d0900
 800922c:	00516154 	.word	0x00516154
 8009230:	007a1200 	.word	0x007a1200
 8009234:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009238:	f7fc fe3c 	bl	8005eb4 <HAL_RCC_GetPCLK1Freq>
 800923c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	d044      	beq.n	80092d0 <UART_SetConfig+0x1008>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924a:	2b01      	cmp	r3, #1
 800924c:	d03e      	beq.n	80092cc <UART_SetConfig+0x1004>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009252:	2b02      	cmp	r3, #2
 8009254:	d038      	beq.n	80092c8 <UART_SetConfig+0x1000>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	2b03      	cmp	r3, #3
 800925c:	d032      	beq.n	80092c4 <UART_SetConfig+0xffc>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	2b04      	cmp	r3, #4
 8009264:	d02c      	beq.n	80092c0 <UART_SetConfig+0xff8>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	2b05      	cmp	r3, #5
 800926c:	d026      	beq.n	80092bc <UART_SetConfig+0xff4>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	2b06      	cmp	r3, #6
 8009274:	d020      	beq.n	80092b8 <UART_SetConfig+0xff0>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	2b07      	cmp	r3, #7
 800927c:	d01a      	beq.n	80092b4 <UART_SetConfig+0xfec>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009282:	2b08      	cmp	r3, #8
 8009284:	d014      	beq.n	80092b0 <UART_SetConfig+0xfe8>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928a:	2b09      	cmp	r3, #9
 800928c:	d00e      	beq.n	80092ac <UART_SetConfig+0xfe4>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	2b0a      	cmp	r3, #10
 8009294:	d008      	beq.n	80092a8 <UART_SetConfig+0xfe0>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	2b0b      	cmp	r3, #11
 800929c:	d102      	bne.n	80092a4 <UART_SetConfig+0xfdc>
 800929e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092a2:	e016      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e014      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092a8:	2380      	movs	r3, #128	; 0x80
 80092aa:	e012      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092ac:	2340      	movs	r3, #64	; 0x40
 80092ae:	e010      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092b0:	2320      	movs	r3, #32
 80092b2:	e00e      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092b4:	2310      	movs	r3, #16
 80092b6:	e00c      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092b8:	230c      	movs	r3, #12
 80092ba:	e00a      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092bc:	230a      	movs	r3, #10
 80092be:	e008      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092c0:	2308      	movs	r3, #8
 80092c2:	e006      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092c4:	2306      	movs	r3, #6
 80092c6:	e004      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092c8:	2304      	movs	r3, #4
 80092ca:	e002      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e000      	b.n	80092d2 <UART_SetConfig+0x100a>
 80092d0:	2301      	movs	r3, #1
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	085b      	lsrs	r3, r3, #1
 80092de:	441a      	add	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	61fb      	str	r3, [r7, #28]
        break;
 80092ec:	e16d      	b.n	80095ca <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092ee:	f7fc fdf7 	bl	8005ee0 <HAL_RCC_GetPCLK2Freq>
 80092f2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d044      	beq.n	8009386 <UART_SetConfig+0x10be>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b01      	cmp	r3, #1
 8009302:	d03e      	beq.n	8009382 <UART_SetConfig+0x10ba>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	2b02      	cmp	r3, #2
 800930a:	d038      	beq.n	800937e <UART_SetConfig+0x10b6>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b03      	cmp	r3, #3
 8009312:	d032      	beq.n	800937a <UART_SetConfig+0x10b2>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	2b04      	cmp	r3, #4
 800931a:	d02c      	beq.n	8009376 <UART_SetConfig+0x10ae>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	2b05      	cmp	r3, #5
 8009322:	d026      	beq.n	8009372 <UART_SetConfig+0x10aa>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	2b06      	cmp	r3, #6
 800932a:	d020      	beq.n	800936e <UART_SetConfig+0x10a6>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	2b07      	cmp	r3, #7
 8009332:	d01a      	beq.n	800936a <UART_SetConfig+0x10a2>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	2b08      	cmp	r3, #8
 800933a:	d014      	beq.n	8009366 <UART_SetConfig+0x109e>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b09      	cmp	r3, #9
 8009342:	d00e      	beq.n	8009362 <UART_SetConfig+0x109a>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b0a      	cmp	r3, #10
 800934a:	d008      	beq.n	800935e <UART_SetConfig+0x1096>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b0b      	cmp	r3, #11
 8009352:	d102      	bne.n	800935a <UART_SetConfig+0x1092>
 8009354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009358:	e016      	b.n	8009388 <UART_SetConfig+0x10c0>
 800935a:	2301      	movs	r3, #1
 800935c:	e014      	b.n	8009388 <UART_SetConfig+0x10c0>
 800935e:	2380      	movs	r3, #128	; 0x80
 8009360:	e012      	b.n	8009388 <UART_SetConfig+0x10c0>
 8009362:	2340      	movs	r3, #64	; 0x40
 8009364:	e010      	b.n	8009388 <UART_SetConfig+0x10c0>
 8009366:	2320      	movs	r3, #32
 8009368:	e00e      	b.n	8009388 <UART_SetConfig+0x10c0>
 800936a:	2310      	movs	r3, #16
 800936c:	e00c      	b.n	8009388 <UART_SetConfig+0x10c0>
 800936e:	230c      	movs	r3, #12
 8009370:	e00a      	b.n	8009388 <UART_SetConfig+0x10c0>
 8009372:	230a      	movs	r3, #10
 8009374:	e008      	b.n	8009388 <UART_SetConfig+0x10c0>
 8009376:	2308      	movs	r3, #8
 8009378:	e006      	b.n	8009388 <UART_SetConfig+0x10c0>
 800937a:	2306      	movs	r3, #6
 800937c:	e004      	b.n	8009388 <UART_SetConfig+0x10c0>
 800937e:	2304      	movs	r3, #4
 8009380:	e002      	b.n	8009388 <UART_SetConfig+0x10c0>
 8009382:	2302      	movs	r3, #2
 8009384:	e000      	b.n	8009388 <UART_SetConfig+0x10c0>
 8009386:	2301      	movs	r3, #1
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	fbb2 f2f3 	udiv	r2, r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	085b      	lsrs	r3, r3, #1
 8009394:	441a      	add	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	fbb2 f3f3 	udiv	r3, r2, r3
 800939e:	b29b      	uxth	r3, r3
 80093a0:	61fb      	str	r3, [r7, #28]
        break;
 80093a2:	e112      	b.n	80095ca <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d044      	beq.n	8009436 <UART_SetConfig+0x116e>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d03e      	beq.n	8009432 <UART_SetConfig+0x116a>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d038      	beq.n	800942e <UART_SetConfig+0x1166>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d032      	beq.n	800942a <UART_SetConfig+0x1162>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d02c      	beq.n	8009426 <UART_SetConfig+0x115e>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d026      	beq.n	8009422 <UART_SetConfig+0x115a>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	2b06      	cmp	r3, #6
 80093da:	d020      	beq.n	800941e <UART_SetConfig+0x1156>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	2b07      	cmp	r3, #7
 80093e2:	d01a      	beq.n	800941a <UART_SetConfig+0x1152>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d014      	beq.n	8009416 <UART_SetConfig+0x114e>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	2b09      	cmp	r3, #9
 80093f2:	d00e      	beq.n	8009412 <UART_SetConfig+0x114a>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	2b0a      	cmp	r3, #10
 80093fa:	d008      	beq.n	800940e <UART_SetConfig+0x1146>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	2b0b      	cmp	r3, #11
 8009402:	d102      	bne.n	800940a <UART_SetConfig+0x1142>
 8009404:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009408:	e016      	b.n	8009438 <UART_SetConfig+0x1170>
 800940a:	4b81      	ldr	r3, [pc, #516]	; (8009610 <UART_SetConfig+0x1348>)
 800940c:	e014      	b.n	8009438 <UART_SetConfig+0x1170>
 800940e:	4b81      	ldr	r3, [pc, #516]	; (8009614 <UART_SetConfig+0x134c>)
 8009410:	e012      	b.n	8009438 <UART_SetConfig+0x1170>
 8009412:	4b81      	ldr	r3, [pc, #516]	; (8009618 <UART_SetConfig+0x1350>)
 8009414:	e010      	b.n	8009438 <UART_SetConfig+0x1170>
 8009416:	4b81      	ldr	r3, [pc, #516]	; (800961c <UART_SetConfig+0x1354>)
 8009418:	e00e      	b.n	8009438 <UART_SetConfig+0x1170>
 800941a:	4b81      	ldr	r3, [pc, #516]	; (8009620 <UART_SetConfig+0x1358>)
 800941c:	e00c      	b.n	8009438 <UART_SetConfig+0x1170>
 800941e:	4b81      	ldr	r3, [pc, #516]	; (8009624 <UART_SetConfig+0x135c>)
 8009420:	e00a      	b.n	8009438 <UART_SetConfig+0x1170>
 8009422:	4b81      	ldr	r3, [pc, #516]	; (8009628 <UART_SetConfig+0x1360>)
 8009424:	e008      	b.n	8009438 <UART_SetConfig+0x1170>
 8009426:	4b81      	ldr	r3, [pc, #516]	; (800962c <UART_SetConfig+0x1364>)
 8009428:	e006      	b.n	8009438 <UART_SetConfig+0x1170>
 800942a:	4b81      	ldr	r3, [pc, #516]	; (8009630 <UART_SetConfig+0x1368>)
 800942c:	e004      	b.n	8009438 <UART_SetConfig+0x1170>
 800942e:	4b81      	ldr	r3, [pc, #516]	; (8009634 <UART_SetConfig+0x136c>)
 8009430:	e002      	b.n	8009438 <UART_SetConfig+0x1170>
 8009432:	4b81      	ldr	r3, [pc, #516]	; (8009638 <UART_SetConfig+0x1370>)
 8009434:	e000      	b.n	8009438 <UART_SetConfig+0x1170>
 8009436:	4b76      	ldr	r3, [pc, #472]	; (8009610 <UART_SetConfig+0x1348>)
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	6852      	ldr	r2, [r2, #4]
 800943c:	0852      	lsrs	r2, r2, #1
 800943e:	441a      	add	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	fbb2 f3f3 	udiv	r3, r2, r3
 8009448:	b29b      	uxth	r3, r3
 800944a:	61fb      	str	r3, [r7, #28]
        break;
 800944c:	e0bd      	b.n	80095ca <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800944e:	f7fc fcc3 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8009452:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	2b00      	cmp	r3, #0
 800945a:	d044      	beq.n	80094e6 <UART_SetConfig+0x121e>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	2b01      	cmp	r3, #1
 8009462:	d03e      	beq.n	80094e2 <UART_SetConfig+0x121a>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	2b02      	cmp	r3, #2
 800946a:	d038      	beq.n	80094de <UART_SetConfig+0x1216>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009470:	2b03      	cmp	r3, #3
 8009472:	d032      	beq.n	80094da <UART_SetConfig+0x1212>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	2b04      	cmp	r3, #4
 800947a:	d02c      	beq.n	80094d6 <UART_SetConfig+0x120e>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	2b05      	cmp	r3, #5
 8009482:	d026      	beq.n	80094d2 <UART_SetConfig+0x120a>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	2b06      	cmp	r3, #6
 800948a:	d020      	beq.n	80094ce <UART_SetConfig+0x1206>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	2b07      	cmp	r3, #7
 8009492:	d01a      	beq.n	80094ca <UART_SetConfig+0x1202>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	2b08      	cmp	r3, #8
 800949a:	d014      	beq.n	80094c6 <UART_SetConfig+0x11fe>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	2b09      	cmp	r3, #9
 80094a2:	d00e      	beq.n	80094c2 <UART_SetConfig+0x11fa>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	2b0a      	cmp	r3, #10
 80094aa:	d008      	beq.n	80094be <UART_SetConfig+0x11f6>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	2b0b      	cmp	r3, #11
 80094b2:	d102      	bne.n	80094ba <UART_SetConfig+0x11f2>
 80094b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094b8:	e016      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094ba:	2301      	movs	r3, #1
 80094bc:	e014      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094be:	2380      	movs	r3, #128	; 0x80
 80094c0:	e012      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094c2:	2340      	movs	r3, #64	; 0x40
 80094c4:	e010      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094c6:	2320      	movs	r3, #32
 80094c8:	e00e      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094ca:	2310      	movs	r3, #16
 80094cc:	e00c      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094ce:	230c      	movs	r3, #12
 80094d0:	e00a      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094d2:	230a      	movs	r3, #10
 80094d4:	e008      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094d6:	2308      	movs	r3, #8
 80094d8:	e006      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094da:	2306      	movs	r3, #6
 80094dc:	e004      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094de:	2304      	movs	r3, #4
 80094e0:	e002      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e000      	b.n	80094e8 <UART_SetConfig+0x1220>
 80094e6:	2301      	movs	r3, #1
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	085b      	lsrs	r3, r3, #1
 80094f4:	441a      	add	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fe:	b29b      	uxth	r3, r3
 8009500:	61fb      	str	r3, [r7, #28]
        break;
 8009502:	e062      	b.n	80095ca <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	2b00      	cmp	r3, #0
 800950a:	d04e      	beq.n	80095aa <UART_SetConfig+0x12e2>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b01      	cmp	r3, #1
 8009512:	d047      	beq.n	80095a4 <UART_SetConfig+0x12dc>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	2b02      	cmp	r3, #2
 800951a:	d040      	beq.n	800959e <UART_SetConfig+0x12d6>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	2b03      	cmp	r3, #3
 8009522:	d039      	beq.n	8009598 <UART_SetConfig+0x12d0>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	2b04      	cmp	r3, #4
 800952a:	d032      	beq.n	8009592 <UART_SetConfig+0x12ca>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009530:	2b05      	cmp	r3, #5
 8009532:	d02b      	beq.n	800958c <UART_SetConfig+0x12c4>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	2b06      	cmp	r3, #6
 800953a:	d024      	beq.n	8009586 <UART_SetConfig+0x12be>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	2b07      	cmp	r3, #7
 8009542:	d01d      	beq.n	8009580 <UART_SetConfig+0x12b8>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	2b08      	cmp	r3, #8
 800954a:	d016      	beq.n	800957a <UART_SetConfig+0x12b2>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	2b09      	cmp	r3, #9
 8009552:	d00f      	beq.n	8009574 <UART_SetConfig+0x12ac>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	2b0a      	cmp	r3, #10
 800955a:	d008      	beq.n	800956e <UART_SetConfig+0x12a6>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	2b0b      	cmp	r3, #11
 8009562:	d101      	bne.n	8009568 <UART_SetConfig+0x12a0>
 8009564:	2380      	movs	r3, #128	; 0x80
 8009566:	e022      	b.n	80095ae <UART_SetConfig+0x12e6>
 8009568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800956c:	e01f      	b.n	80095ae <UART_SetConfig+0x12e6>
 800956e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009572:	e01c      	b.n	80095ae <UART_SetConfig+0x12e6>
 8009574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009578:	e019      	b.n	80095ae <UART_SetConfig+0x12e6>
 800957a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800957e:	e016      	b.n	80095ae <UART_SetConfig+0x12e6>
 8009580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009584:	e013      	b.n	80095ae <UART_SetConfig+0x12e6>
 8009586:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800958a:	e010      	b.n	80095ae <UART_SetConfig+0x12e6>
 800958c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009590:	e00d      	b.n	80095ae <UART_SetConfig+0x12e6>
 8009592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009596:	e00a      	b.n	80095ae <UART_SetConfig+0x12e6>
 8009598:	f241 5355 	movw	r3, #5461	; 0x1555
 800959c:	e007      	b.n	80095ae <UART_SetConfig+0x12e6>
 800959e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095a2:	e004      	b.n	80095ae <UART_SetConfig+0x12e6>
 80095a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095a8:	e001      	b.n	80095ae <UART_SetConfig+0x12e6>
 80095aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6852      	ldr	r2, [r2, #4]
 80095b2:	0852      	lsrs	r2, r2, #1
 80095b4:	441a      	add	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80095be:	b29b      	uxth	r3, r3
 80095c0:	61fb      	str	r3, [r7, #28]
        break;
 80095c2:	e002      	b.n	80095ca <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	76fb      	strb	r3, [r7, #27]
        break;
 80095c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	2b0f      	cmp	r3, #15
 80095ce:	d908      	bls.n	80095e2 <UART_SetConfig+0x131a>
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095d6:	d204      	bcs.n	80095e2 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	60da      	str	r2, [r3, #12]
 80095e0:	e001      	b.n	80095e6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009602:	7efb      	ldrb	r3, [r7, #27]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3728      	adds	r7, #40	; 0x28
 8009608:	46bd      	mov	sp, r7
 800960a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800960e:	bf00      	nop
 8009610:	00f42400 	.word	0x00f42400
 8009614:	0001e848 	.word	0x0001e848
 8009618:	0003d090 	.word	0x0003d090
 800961c:	0007a120 	.word	0x0007a120
 8009620:	000f4240 	.word	0x000f4240
 8009624:	00145855 	.word	0x00145855
 8009628:	00186a00 	.word	0x00186a00
 800962c:	001e8480 	.word	0x001e8480
 8009630:	0028b0aa 	.word	0x0028b0aa
 8009634:	003d0900 	.word	0x003d0900
 8009638:	007a1200 	.word	0x007a1200

0800963c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00a      	beq.n	8009666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00a      	beq.n	8009688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00a      	beq.n	80096aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	430a      	orrs	r2, r1
 80096a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	f003 0308 	and.w	r3, r3, #8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d0:	f003 0310 	and.w	r3, r3, #16
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00a      	beq.n	80096ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00a      	beq.n	8009710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009718:	2b00      	cmp	r3, #0
 800971a:	d01a      	beq.n	8009752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800973a:	d10a      	bne.n	8009752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	605a      	str	r2, [r3, #4]
  }
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af02      	add	r7, sp, #8
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009790:	f7f9 f93c 	bl	8002a0c <HAL_GetTick>
 8009794:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0308 	and.w	r3, r3, #8
 80097a0:	2b08      	cmp	r3, #8
 80097a2:	d10e      	bne.n	80097c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f82c 	bl	8009810 <UART_WaitOnFlagUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e022      	b.n	8009808 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b04      	cmp	r3, #4
 80097ce:	d10e      	bne.n	80097ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f816 	bl	8009810 <UART_WaitOnFlagUntilTimeout>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e00c      	b.n	8009808 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2220      	movs	r2, #32
 80097f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	603b      	str	r3, [r7, #0]
 800981c:	4613      	mov	r3, r2
 800981e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009820:	e02c      	b.n	800987c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009828:	d028      	beq.n	800987c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800982a:	f7f9 f8ef 	bl	8002a0c <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	429a      	cmp	r2, r3
 8009838:	d302      	bcc.n	8009840 <UART_WaitOnFlagUntilTimeout+0x30>
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d11d      	bne.n	800987c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800984e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689a      	ldr	r2, [r3, #8]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f022 0201 	bic.w	r2, r2, #1
 800985e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2220      	movs	r2, #32
 8009864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2220      	movs	r2, #32
 800986c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e00f      	b.n	800989c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69da      	ldr	r2, [r3, #28]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	4013      	ands	r3, r2
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	429a      	cmp	r2, r3
 800988a:	bf0c      	ite	eq
 800988c:	2301      	moveq	r3, #1
 800988e:	2300      	movne	r3, #0
 8009890:	b2db      	uxtb	r3, r3
 8009892:	461a      	mov	r2, r3
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	429a      	cmp	r2, r3
 8009898:	d0c3      	beq.n	8009822 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	6812      	ldr	r2, [r2, #0]
 80098c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098ca:	f023 0301 	bic.w	r3, r3, #1
 80098ce:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80098de:	bf00      	nop
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7fe fcd1 	bl	80082b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800992c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2220      	movs	r2, #32
 8009932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7fe fcad 	bl	800829c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009942:	bf00      	nop
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009958:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009960:	2b22      	cmp	r3, #34	; 0x22
 8009962:	d13b      	bne.n	80099dc <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800996c:	89bb      	ldrh	r3, [r7, #12]
 800996e:	b2d9      	uxtb	r1, r3
 8009970:	89fb      	ldrh	r3, [r7, #14]
 8009972:	b2da      	uxtb	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009978:	400a      	ands	r2, r1
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b01      	subs	r3, #1
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d122      	bne.n	80099ec <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099b4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f022 0201 	bic.w	r2, r2, #1
 80099c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7f8 f9ef 	bl	8001db8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099da:	e007      	b.n	80099ec <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699a      	ldr	r2, [r3, #24]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0208 	orr.w	r2, r2, #8
 80099ea:	619a      	str	r2, [r3, #24]
}
 80099ec:	bf00      	nop
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a02:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a0a:	2b22      	cmp	r3, #34	; 0x22
 8009a0c:	d13b      	bne.n	8009a86 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a14:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a1a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a1c:	89ba      	ldrh	r2, [r7, #12]
 8009a1e:	89fb      	ldrh	r3, [r7, #14]
 8009a20:	4013      	ands	r3, r2
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2c:	1c9a      	adds	r2, r3, #2
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d122      	bne.n	8009a96 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a5e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0201 	bic.w	r2, r2, #1
 8009a6e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7f8 f99a 	bl	8001db8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a84:	e007      	b.n	8009a96 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	699a      	ldr	r2, [r3, #24]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f042 0208 	orr.w	r2, r2, #8
 8009a94:	619a      	str	r2, [r3, #24]
}
 8009a96:	bf00      	nop
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009aae:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ab6:	2b22      	cmp	r3, #34	; 0x22
 8009ab8:	d168      	bne.n	8009b8c <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ac0:	81fb      	strh	r3, [r7, #14]
 8009ac2:	e03f      	b.n	8009b44 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009acc:	893b      	ldrh	r3, [r7, #8]
 8009ace:	b2d9      	uxtb	r1, r3
 8009ad0:	89bb      	ldrh	r3, [r7, #12]
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad8:	400a      	ands	r2, r1
 8009ada:	b2d2      	uxtb	r2, r2
 8009adc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d11b      	bne.n	8009b3e <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b14:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	6812      	ldr	r2, [r2, #0]
 8009b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b24:	f023 0301 	bic.w	r3, r3, #1
 8009b28:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7f8 f93d 	bl	8001db8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009b3e:	89fb      	ldrh	r3, [r7, #14]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	81fb      	strh	r3, [r7, #14]
 8009b44:	89fb      	ldrh	r3, [r7, #14]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1bc      	bne.n	8009ac4 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b50:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b52:	897b      	ldrh	r3, [r7, #10]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d021      	beq.n	8009b9c <UART_RxISR_8BIT_FIFOEN+0xfc>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b5e:	897a      	ldrh	r2, [r7, #10]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d21b      	bcs.n	8009b9c <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689a      	ldr	r2, [r3, #8]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009b72:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a0b      	ldr	r2, [pc, #44]	; (8009ba4 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8009b78:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f042 0220 	orr.w	r2, r2, #32
 8009b88:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b8a:	e007      	b.n	8009b9c <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	699a      	ldr	r2, [r3, #24]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0208 	orr.w	r2, r2, #8
 8009b9a:	619a      	str	r2, [r3, #24]
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	0800994b 	.word	0x0800994b

08009ba8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009bb6:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bbe:	2b22      	cmp	r3, #34	; 0x22
 8009bc0:	d168      	bne.n	8009c94 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009bc8:	82fb      	strh	r3, [r7, #22]
 8009bca:	e03f      	b.n	8009c4c <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd8:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8009bda:	8a3a      	ldrh	r2, [r7, #16]
 8009bdc:	8abb      	ldrh	r3, [r7, #20]
 8009bde:	4013      	ands	r3, r2
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bea:	1c9a      	adds	r2, r3, #2
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d11b      	bne.n	8009c46 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c1c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	6812      	ldr	r2, [r2, #0]
 8009c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c2c:	f023 0301 	bic.w	r3, r3, #1
 8009c30:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2220      	movs	r2, #32
 8009c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7f8 f8b9 	bl	8001db8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009c46:	8afb      	ldrh	r3, [r7, #22]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	82fb      	strh	r3, [r7, #22]
 8009c4c:	8afb      	ldrh	r3, [r7, #22]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1bc      	bne.n	8009bcc <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c58:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c5a:	8a7b      	ldrh	r3, [r7, #18]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d021      	beq.n	8009ca4 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c66:	8a7a      	ldrh	r2, [r7, #18]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d21b      	bcs.n	8009ca4 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689a      	ldr	r2, [r3, #8]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009c7a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a0b      	ldr	r2, [pc, #44]	; (8009cac <UART_RxISR_16BIT_FIFOEN+0x104>)
 8009c80:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f042 0220 	orr.w	r2, r2, #32
 8009c90:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c92:	e007      	b.n	8009ca4 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	699a      	ldr	r2, [r3, #24]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f042 0208 	orr.w	r2, r2, #8
 8009ca2:	619a      	str	r2, [r3, #24]
}
 8009ca4:	bf00      	nop
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	080099f5 	.word	0x080099f5

08009cb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d101      	bne.n	8009d02 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cfe:	2302      	movs	r3, #2
 8009d00:	e027      	b.n	8009d52 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2224      	movs	r2, #36	; 0x24
 8009d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 0201 	bic.w	r2, r2, #1
 8009d28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d72:	2302      	movs	r3, #2
 8009d74:	e02d      	b.n	8009dd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2224      	movs	r2, #36	; 0x24
 8009d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 0201 	bic.w	r2, r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f850 	bl	8009e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e02d      	b.n	8009e4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2224      	movs	r2, #36	; 0x24
 8009dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0201 	bic.w	r2, r2, #1
 8009e18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f812 	bl	8009e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b089      	sub	sp, #36	; 0x24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009e60:	4a2f      	ldr	r2, [pc, #188]	; (8009f20 <UARTEx_SetNbDataToProcess+0xc8>)
 8009e62:	f107 0314 	add.w	r3, r7, #20
 8009e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e6a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009e6e:	4a2d      	ldr	r2, [pc, #180]	; (8009f24 <UARTEx_SetNbDataToProcess+0xcc>)
 8009e70:	f107 030c 	add.w	r3, r7, #12
 8009e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e78:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d108      	bne.n	8009e96 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e94:	e03d      	b.n	8009f12 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e96:	2308      	movs	r3, #8
 8009e98:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e9a:	2308      	movs	r3, #8
 8009e9c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	0e5b      	lsrs	r3, r3, #25
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	0f5b      	lsrs	r3, r3, #29
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009ebe:	7fbb      	ldrb	r3, [r7, #30]
 8009ec0:	7f3a      	ldrb	r2, [r7, #28]
 8009ec2:	f107 0120 	add.w	r1, r7, #32
 8009ec6:	440a      	add	r2, r1
 8009ec8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009ecc:	fb02 f303 	mul.w	r3, r2, r3
 8009ed0:	7f3a      	ldrb	r2, [r7, #28]
 8009ed2:	f107 0120 	add.w	r1, r7, #32
 8009ed6:	440a      	add	r2, r1
 8009ed8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009ee8:	7ffb      	ldrb	r3, [r7, #31]
 8009eea:	7f7a      	ldrb	r2, [r7, #29]
 8009eec:	f107 0120 	add.w	r1, r7, #32
 8009ef0:	440a      	add	r2, r1
 8009ef2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009ef6:	fb02 f303 	mul.w	r3, r2, r3
 8009efa:	7f7a      	ldrb	r2, [r7, #29]
 8009efc:	f107 0120 	add.w	r1, r7, #32
 8009f00:	440a      	add	r2, r1
 8009f02:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f12:	bf00      	nop
 8009f14:	3724      	adds	r7, #36	; 0x24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	0800a4ec 	.word	0x0800a4ec
 8009f24:	0800a4f4 	.word	0x0800a4f4

08009f28 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	ed93 7a06 	vldr	s14, [r3, #24]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	edd3 7a07 	vldr	s15, [r3, #28]
 8009f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	edd3 7a08 	vldr	s15, [r3, #32]
 8009f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	edd3 7a06 	vldr	s15, [r3, #24]
 8009f58:	eeb1 7a67 	vneg.f32	s14, s15
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8009f62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a1a      	ldr	r2, [r3, #32]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d006      	beq.n	8009f8c <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	330c      	adds	r3, #12
 8009f82:	220c      	movs	r2, #12
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 f8ba 	bl	800a100 <memset>
  }

}
 8009f8c:	bf00      	nop
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b08b      	sub	sp, #44	; 0x2c
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8009f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009faa:	d50a      	bpl.n	8009fc2 <arm_sin_f32+0x2e>
 8009fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fb0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800a09c <arm_sin_f32+0x108>
 8009fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbc:	db01      	blt.n	8009fc2 <arm_sin_f32+0x2e>
     return x;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	e062      	b.n	800a088 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8009fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fc6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a0a0 <arm_sin_f32+0x10c>
 8009fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fce:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8009fd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8009fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fda:	ee17 3a90 	vmov	r3, s15
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8009fe0:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fec:	d502      	bpl.n	8009ff4 <arm_sin_f32+0x60>
  {
    n--;
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ffe:	ed97 7a08 	vldr	s14, [r7, #32]
 800a002:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a006:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800a00a:	edd7 7a08 	vldr	s15, [r7, #32]
 800a00e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a0a4 <arm_sin_f32+0x110>
 800a012:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a016:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 800a01a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a022:	ee17 3a90 	vmov	r3, s15
 800a026:	b29b      	uxth	r3, r3
 800a028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02c:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800a02e:	8b7b      	ldrh	r3, [r7, #26]
 800a030:	ee07 3a90 	vmov	s15, r3
 800a034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a038:	ed97 7a07 	vldr	s14, [r7, #28]
 800a03c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a040:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800a044:	8b7b      	ldrh	r3, [r7, #26]
 800a046:	4a18      	ldr	r2, [pc, #96]	; (800a0a8 <arm_sin_f32+0x114>)
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800a050:	8b7b      	ldrh	r3, [r7, #26]
 800a052:	3301      	adds	r3, #1
 800a054:	4a14      	ldr	r2, [pc, #80]	; (800a0a8 <arm_sin_f32+0x114>)
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800a05e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a062:	edd7 7a05 	vldr	s15, [r7, #20]
 800a066:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a06a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a06e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a072:	edd7 6a05 	vldr	s13, [r7, #20]
 800a076:	edd7 7a03 	vldr	s15, [r7, #12]
 800a07a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a07e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a082:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	ee07 3a90 	vmov	s15, r3
}
 800a08c:	eeb0 0a67 	vmov.f32	s0, s15
 800a090:	372c      	adds	r7, #44	; 0x2c
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	b44c02cd 	.word	0xb44c02cd
 800a0a0:	3e22f983 	.word	0x3e22f983
 800a0a4:	44000000 	.word	0x44000000
 800a0a8:	0800a514 	.word	0x0800a514

0800a0ac <__errno>:
 800a0ac:	4b01      	ldr	r3, [pc, #4]	; (800a0b4 <__errno+0x8>)
 800a0ae:	6818      	ldr	r0, [r3, #0]
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	2000000c 	.word	0x2000000c

0800a0b8 <__libc_init_array>:
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	4e0d      	ldr	r6, [pc, #52]	; (800a0f0 <__libc_init_array+0x38>)
 800a0bc:	4c0d      	ldr	r4, [pc, #52]	; (800a0f4 <__libc_init_array+0x3c>)
 800a0be:	1ba4      	subs	r4, r4, r6
 800a0c0:	10a4      	asrs	r4, r4, #2
 800a0c2:	2500      	movs	r5, #0
 800a0c4:	42a5      	cmp	r5, r4
 800a0c6:	d109      	bne.n	800a0dc <__libc_init_array+0x24>
 800a0c8:	4e0b      	ldr	r6, [pc, #44]	; (800a0f8 <__libc_init_array+0x40>)
 800a0ca:	4c0c      	ldr	r4, [pc, #48]	; (800a0fc <__libc_init_array+0x44>)
 800a0cc:	f000 fa02 	bl	800a4d4 <_init>
 800a0d0:	1ba4      	subs	r4, r4, r6
 800a0d2:	10a4      	asrs	r4, r4, #2
 800a0d4:	2500      	movs	r5, #0
 800a0d6:	42a5      	cmp	r5, r4
 800a0d8:	d105      	bne.n	800a0e6 <__libc_init_array+0x2e>
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0e0:	4798      	blx	r3
 800a0e2:	3501      	adds	r5, #1
 800a0e4:	e7ee      	b.n	800a0c4 <__libc_init_array+0xc>
 800a0e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0ea:	4798      	blx	r3
 800a0ec:	3501      	adds	r5, #1
 800a0ee:	e7f2      	b.n	800a0d6 <__libc_init_array+0x1e>
 800a0f0:	0800ad48 	.word	0x0800ad48
 800a0f4:	0800ad48 	.word	0x0800ad48
 800a0f8:	0800ad48 	.word	0x0800ad48
 800a0fc:	0800ad4c 	.word	0x0800ad4c

0800a100 <memset>:
 800a100:	4402      	add	r2, r0
 800a102:	4603      	mov	r3, r0
 800a104:	4293      	cmp	r3, r2
 800a106:	d100      	bne.n	800a10a <memset+0xa>
 800a108:	4770      	bx	lr
 800a10a:	f803 1b01 	strb.w	r1, [r3], #1
 800a10e:	e7f9      	b.n	800a104 <memset+0x4>

0800a110 <atan2f>:
 800a110:	f000 b850 	b.w	800a1b4 <__ieee754_atan2f>

0800a114 <sqrtf>:
 800a114:	b510      	push	{r4, lr}
 800a116:	ed2d 8b02 	vpush	{d8}
 800a11a:	b08a      	sub	sp, #40	; 0x28
 800a11c:	eeb0 8a40 	vmov.f32	s16, s0
 800a120:	f000 f8f6 	bl	800a310 <__ieee754_sqrtf>
 800a124:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <sqrtf+0x98>)
 800a126:	f993 4000 	ldrsb.w	r4, [r3]
 800a12a:	1c63      	adds	r3, r4, #1
 800a12c:	d02c      	beq.n	800a188 <sqrtf+0x74>
 800a12e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a136:	d627      	bvs.n	800a188 <sqrtf+0x74>
 800a138:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a140:	d522      	bpl.n	800a188 <sqrtf+0x74>
 800a142:	2301      	movs	r3, #1
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <sqrtf+0x9c>)
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	ee18 0a10 	vmov	r0, s16
 800a14e:	2300      	movs	r3, #0
 800a150:	9308      	str	r3, [sp, #32]
 800a152:	f7f6 f9c5 	bl	80004e0 <__aeabi_f2d>
 800a156:	2200      	movs	r2, #0
 800a158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a160:	2300      	movs	r3, #0
 800a162:	b9ac      	cbnz	r4, 800a190 <sqrtf+0x7c>
 800a164:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a168:	4668      	mov	r0, sp
 800a16a:	f000 f8d4 	bl	800a316 <matherr>
 800a16e:	b1b8      	cbz	r0, 800a1a0 <sqrtf+0x8c>
 800a170:	9b08      	ldr	r3, [sp, #32]
 800a172:	b11b      	cbz	r3, 800a17c <sqrtf+0x68>
 800a174:	f7ff ff9a 	bl	800a0ac <__errno>
 800a178:	9b08      	ldr	r3, [sp, #32]
 800a17a:	6003      	str	r3, [r0, #0]
 800a17c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a180:	f7f6 fca0 	bl	8000ac4 <__aeabi_d2f>
 800a184:	ee00 0a10 	vmov	s0, r0
 800a188:	b00a      	add	sp, #40	; 0x28
 800a18a:	ecbd 8b02 	vpop	{d8}
 800a18e:	bd10      	pop	{r4, pc}
 800a190:	4610      	mov	r0, r2
 800a192:	4619      	mov	r1, r3
 800a194:	f7f6 fb26 	bl	80007e4 <__aeabi_ddiv>
 800a198:	2c02      	cmp	r4, #2
 800a19a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a19e:	d1e3      	bne.n	800a168 <sqrtf+0x54>
 800a1a0:	f7ff ff84 	bl	800a0ac <__errno>
 800a1a4:	2321      	movs	r3, #33	; 0x21
 800a1a6:	6003      	str	r3, [r0, #0]
 800a1a8:	e7e2      	b.n	800a170 <sqrtf+0x5c>
 800a1aa:	bf00      	nop
 800a1ac:	20000070 	.word	0x20000070
 800a1b0:	0800ad18 	.word	0x0800ad18

0800a1b4 <__ieee754_atan2f>:
 800a1b4:	ee10 2a90 	vmov	r2, s1
 800a1b8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a1bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	eef0 7a40 	vmov.f32	s15, s0
 800a1c6:	dc06      	bgt.n	800a1d6 <__ieee754_atan2f+0x22>
 800a1c8:	ee10 0a10 	vmov	r0, s0
 800a1cc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a1d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1d4:	dd04      	ble.n	800a1e0 <__ieee754_atan2f+0x2c>
 800a1d6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a1da:	eeb0 0a67 	vmov.f32	s0, s15
 800a1de:	bd10      	pop	{r4, pc}
 800a1e0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a1e4:	d103      	bne.n	800a1ee <__ieee754_atan2f+0x3a>
 800a1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1ea:	f000 b897 	b.w	800a31c <atanf>
 800a1ee:	1794      	asrs	r4, r2, #30
 800a1f0:	f004 0402 	and.w	r4, r4, #2
 800a1f4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a1f8:	b943      	cbnz	r3, 800a20c <__ieee754_atan2f+0x58>
 800a1fa:	2c02      	cmp	r4, #2
 800a1fc:	d06e      	beq.n	800a2dc <__ieee754_atan2f+0x128>
 800a1fe:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a2e4 <__ieee754_atan2f+0x130>
 800a202:	2c03      	cmp	r4, #3
 800a204:	bf08      	it	eq
 800a206:	eef0 7a47 	vmoveq.f32	s15, s14
 800a20a:	e7e6      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a20c:	b941      	cbnz	r1, 800a220 <__ieee754_atan2f+0x6c>
 800a20e:	eddf 7a36 	vldr	s15, [pc, #216]	; 800a2e8 <__ieee754_atan2f+0x134>
 800a212:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a2ec <__ieee754_atan2f+0x138>
 800a216:	2800      	cmp	r0, #0
 800a218:	bfb8      	it	lt
 800a21a:	eef0 7a47 	vmovlt.f32	s15, s14
 800a21e:	e7dc      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a220:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a224:	d122      	bne.n	800a26c <__ieee754_atan2f+0xb8>
 800a226:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a22a:	d112      	bne.n	800a252 <__ieee754_atan2f+0x9e>
 800a22c:	2c02      	cmp	r4, #2
 800a22e:	d00a      	beq.n	800a246 <__ieee754_atan2f+0x92>
 800a230:	2c03      	cmp	r4, #3
 800a232:	d00b      	beq.n	800a24c <__ieee754_atan2f+0x98>
 800a234:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800a2f0 <__ieee754_atan2f+0x13c>
 800a238:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800a2f4 <__ieee754_atan2f+0x140>
 800a23c:	2c01      	cmp	r4, #1
 800a23e:	bf18      	it	ne
 800a240:	eef0 7a47 	vmovne.f32	s15, s14
 800a244:	e7c9      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a246:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800a2f8 <__ieee754_atan2f+0x144>
 800a24a:	e7c6      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a24c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a2fc <__ieee754_atan2f+0x148>
 800a250:	e7c3      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a252:	2c02      	cmp	r4, #2
 800a254:	d042      	beq.n	800a2dc <__ieee754_atan2f+0x128>
 800a256:	2c03      	cmp	r4, #3
 800a258:	d005      	beq.n	800a266 <__ieee754_atan2f+0xb2>
 800a25a:	2c01      	cmp	r4, #1
 800a25c:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a300 <__ieee754_atan2f+0x14c>
 800a260:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a304 <__ieee754_atan2f+0x150>
 800a264:	e7eb      	b.n	800a23e <__ieee754_atan2f+0x8a>
 800a266:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a2e4 <__ieee754_atan2f+0x130>
 800a26a:	e7b6      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a26c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a270:	d0cd      	beq.n	800a20e <__ieee754_atan2f+0x5a>
 800a272:	1a5b      	subs	r3, r3, r1
 800a274:	15db      	asrs	r3, r3, #23
 800a276:	2b3c      	cmp	r3, #60	; 0x3c
 800a278:	dc1a      	bgt.n	800a2b0 <__ieee754_atan2f+0xfc>
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	da01      	bge.n	800a282 <__ieee754_atan2f+0xce>
 800a27e:	333c      	adds	r3, #60	; 0x3c
 800a280:	db19      	blt.n	800a2b6 <__ieee754_atan2f+0x102>
 800a282:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a286:	f000 f91d 	bl	800a4c4 <fabsf>
 800a28a:	f000 f847 	bl	800a31c <atanf>
 800a28e:	eef0 7a40 	vmov.f32	s15, s0
 800a292:	2c01      	cmp	r4, #1
 800a294:	d012      	beq.n	800a2bc <__ieee754_atan2f+0x108>
 800a296:	2c02      	cmp	r4, #2
 800a298:	d017      	beq.n	800a2ca <__ieee754_atan2f+0x116>
 800a29a:	2c00      	cmp	r4, #0
 800a29c:	d09d      	beq.n	800a1da <__ieee754_atan2f+0x26>
 800a29e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a308 <__ieee754_atan2f+0x154>
 800a2a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2a6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a30c <__ieee754_atan2f+0x158>
 800a2aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2ae:	e794      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a2b0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a2e8 <__ieee754_atan2f+0x134>
 800a2b4:	e7ed      	b.n	800a292 <__ieee754_atan2f+0xde>
 800a2b6:	eddf 7a13 	vldr	s15, [pc, #76]	; 800a304 <__ieee754_atan2f+0x150>
 800a2ba:	e7ea      	b.n	800a292 <__ieee754_atan2f+0xde>
 800a2bc:	ee17 3a90 	vmov	r3, s15
 800a2c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2c4:	ee07 3a90 	vmov	s15, r3
 800a2c8:	e787      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a2ca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a308 <__ieee754_atan2f+0x154>
 800a2ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2d2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a30c <__ieee754_atan2f+0x158>
 800a2d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2da:	e77e      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a2dc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a30c <__ieee754_atan2f+0x158>
 800a2e0:	e77b      	b.n	800a1da <__ieee754_atan2f+0x26>
 800a2e2:	bf00      	nop
 800a2e4:	c0490fdb 	.word	0xc0490fdb
 800a2e8:	3fc90fdb 	.word	0x3fc90fdb
 800a2ec:	bfc90fdb 	.word	0xbfc90fdb
 800a2f0:	bf490fdb 	.word	0xbf490fdb
 800a2f4:	3f490fdb 	.word	0x3f490fdb
 800a2f8:	4016cbe4 	.word	0x4016cbe4
 800a2fc:	c016cbe4 	.word	0xc016cbe4
 800a300:	80000000 	.word	0x80000000
 800a304:	00000000 	.word	0x00000000
 800a308:	33bbbd2e 	.word	0x33bbbd2e
 800a30c:	40490fdb 	.word	0x40490fdb

0800a310 <__ieee754_sqrtf>:
 800a310:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a314:	4770      	bx	lr

0800a316 <matherr>:
 800a316:	2000      	movs	r0, #0
 800a318:	4770      	bx	lr
	...

0800a31c <atanf>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	ee10 5a10 	vmov	r5, s0
 800a322:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a326:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a32a:	eef0 7a40 	vmov.f32	s15, s0
 800a32e:	db10      	blt.n	800a352 <atanf+0x36>
 800a330:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a334:	dd04      	ble.n	800a340 <atanf+0x24>
 800a336:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a33a:	eeb0 0a67 	vmov.f32	s0, s15
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a478 <atanf+0x15c>
 800a344:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a47c <atanf+0x160>
 800a348:	2d00      	cmp	r5, #0
 800a34a:	bfd8      	it	le
 800a34c:	eef0 7a47 	vmovle.f32	s15, s14
 800a350:	e7f3      	b.n	800a33a <atanf+0x1e>
 800a352:	4b4b      	ldr	r3, [pc, #300]	; (800a480 <atanf+0x164>)
 800a354:	429c      	cmp	r4, r3
 800a356:	dc10      	bgt.n	800a37a <atanf+0x5e>
 800a358:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a35c:	da0a      	bge.n	800a374 <atanf+0x58>
 800a35e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a484 <atanf+0x168>
 800a362:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a36a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a372:	dce2      	bgt.n	800a33a <atanf+0x1e>
 800a374:	f04f 33ff 	mov.w	r3, #4294967295
 800a378:	e013      	b.n	800a3a2 <atanf+0x86>
 800a37a:	f000 f8a3 	bl	800a4c4 <fabsf>
 800a37e:	4b42      	ldr	r3, [pc, #264]	; (800a488 <atanf+0x16c>)
 800a380:	429c      	cmp	r4, r3
 800a382:	dc4f      	bgt.n	800a424 <atanf+0x108>
 800a384:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a388:	429c      	cmp	r4, r3
 800a38a:	dc41      	bgt.n	800a410 <atanf+0xf4>
 800a38c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a390:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a394:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a398:	2300      	movs	r3, #0
 800a39a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a39e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a3a2:	1c5a      	adds	r2, r3, #1
 800a3a4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a3a8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a48c <atanf+0x170>
 800a3ac:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a490 <atanf+0x174>
 800a3b0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a494 <atanf+0x178>
 800a3b4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a3b8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a3bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a498 <atanf+0x17c>
 800a3c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a3c4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a49c <atanf+0x180>
 800a3c8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a3cc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a4a0 <atanf+0x184>
 800a3d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a3d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a4a4 <atanf+0x188>
 800a3d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a3dc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a4a8 <atanf+0x18c>
 800a3e0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a3e4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a4ac <atanf+0x190>
 800a3e8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a3ec:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a4b0 <atanf+0x194>
 800a3f0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a3f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a4b4 <atanf+0x198>
 800a3f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a3fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a400:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a404:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a408:	d121      	bne.n	800a44e <atanf+0x132>
 800a40a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a40e:	e794      	b.n	800a33a <atanf+0x1e>
 800a410:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a414:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a418:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a41c:	2301      	movs	r3, #1
 800a41e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a422:	e7be      	b.n	800a3a2 <atanf+0x86>
 800a424:	4b24      	ldr	r3, [pc, #144]	; (800a4b8 <atanf+0x19c>)
 800a426:	429c      	cmp	r4, r3
 800a428:	dc0b      	bgt.n	800a442 <atanf+0x126>
 800a42a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a42e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a432:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a436:	2302      	movs	r3, #2
 800a438:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a43c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a440:	e7af      	b.n	800a3a2 <atanf+0x86>
 800a442:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a446:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a44a:	2303      	movs	r3, #3
 800a44c:	e7a9      	b.n	800a3a2 <atanf+0x86>
 800a44e:	4a1b      	ldr	r2, [pc, #108]	; (800a4bc <atanf+0x1a0>)
 800a450:	491b      	ldr	r1, [pc, #108]	; (800a4c0 <atanf+0x1a4>)
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	441a      	add	r2, r3
 800a456:	440b      	add	r3, r1
 800a458:	edd3 6a00 	vldr	s13, [r3]
 800a45c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a460:	2d00      	cmp	r5, #0
 800a462:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a466:	ed92 7a00 	vldr	s14, [r2]
 800a46a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a46e:	bfb8      	it	lt
 800a470:	eef1 7a67 	vneglt.f32	s15, s15
 800a474:	e761      	b.n	800a33a <atanf+0x1e>
 800a476:	bf00      	nop
 800a478:	bfc90fdb 	.word	0xbfc90fdb
 800a47c:	3fc90fdb 	.word	0x3fc90fdb
 800a480:	3edfffff 	.word	0x3edfffff
 800a484:	7149f2ca 	.word	0x7149f2ca
 800a488:	3f97ffff 	.word	0x3f97ffff
 800a48c:	3c8569d7 	.word	0x3c8569d7
 800a490:	3d4bda59 	.word	0x3d4bda59
 800a494:	bd6ef16b 	.word	0xbd6ef16b
 800a498:	3d886b35 	.word	0x3d886b35
 800a49c:	3dba2e6e 	.word	0x3dba2e6e
 800a4a0:	3e124925 	.word	0x3e124925
 800a4a4:	3eaaaaab 	.word	0x3eaaaaab
 800a4a8:	bd15a221 	.word	0xbd15a221
 800a4ac:	bd9d8795 	.word	0xbd9d8795
 800a4b0:	bde38e38 	.word	0xbde38e38
 800a4b4:	be4ccccd 	.word	0xbe4ccccd
 800a4b8:	401bffff 	.word	0x401bffff
 800a4bc:	0800ad20 	.word	0x0800ad20
 800a4c0:	0800ad30 	.word	0x0800ad30

0800a4c4 <fabsf>:
 800a4c4:	ee10 3a10 	vmov	r3, s0
 800a4c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4cc:	ee00 3a10 	vmov	s0, r3
 800a4d0:	4770      	bx	lr
	...

0800a4d4 <_init>:
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	bf00      	nop
 800a4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4da:	bc08      	pop	{r3}
 800a4dc:	469e      	mov	lr, r3
 800a4de:	4770      	bx	lr

0800a4e0 <_fini>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	bf00      	nop
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr
