
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8e8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b74  0800eac0  0800eac0  0001eac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f634  0800f634  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f634  0800f634  0001f634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f63c  0800f63c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f63c  0800f63c  0001f63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f640  0800f640  0001f640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  200001ec  0800f830  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  0800f830  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b98  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c14  00000000  00000000  00040db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f0  00000000  00000000  000449c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001870  00000000  00000000  000463b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000233f1  00000000  00000000  00047c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016b26  00000000  00000000  0006b019  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e219c  00000000  00000000  00081b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163cdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007978  00000000  00000000  00163d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001ec 	.word	0x200001ec
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800eaa8 	.word	0x0800eaa8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001f0 	.word	0x200001f0
 8000214:	0800eaa8 	.word	0x0800eaa8

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_drsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000240:	e002      	b.n	8000248 <__adddf3>
 8000242:	bf00      	nop

08000244 <__aeabi_dsub>:
 8000244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000248 <__adddf3>:
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000252:	ea94 0f05 	teq	r4, r5
 8000256:	bf08      	it	eq
 8000258:	ea90 0f02 	teqeq	r0, r2
 800025c:	bf1f      	itttt	ne
 800025e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000262:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000266:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026e:	f000 80e2 	beq.w	8000436 <__adddf3+0x1ee>
 8000272:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000276:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027a:	bfb8      	it	lt
 800027c:	426d      	neglt	r5, r5
 800027e:	dd0c      	ble.n	800029a <__adddf3+0x52>
 8000280:	442c      	add	r4, r5
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	ea82 0000 	eor.w	r0, r2, r0
 800028e:	ea83 0101 	eor.w	r1, r3, r1
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	2d36      	cmp	r5, #54	; 0x36
 800029c:	bf88      	it	hi
 800029e:	bd30      	pophi	{r4, r5, pc}
 80002a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x70>
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x84>
 80002c6:	4252      	negs	r2, r2
 80002c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002cc:	ea94 0f05 	teq	r4, r5
 80002d0:	f000 80a7 	beq.w	8000422 <__adddf3+0x1da>
 80002d4:	f1a4 0401 	sub.w	r4, r4, #1
 80002d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002dc:	db0d      	blt.n	80002fa <__adddf3+0xb2>
 80002de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e2:	fa22 f205 	lsr.w	r2, r2, r5
 80002e6:	1880      	adds	r0, r0, r2
 80002e8:	f141 0100 	adc.w	r1, r1, #0
 80002ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f0:	1880      	adds	r0, r0, r2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	4159      	adcs	r1, r3
 80002f8:	e00e      	b.n	8000318 <__adddf3+0xd0>
 80002fa:	f1a5 0520 	sub.w	r5, r5, #32
 80002fe:	f10e 0e20 	add.w	lr, lr, #32
 8000302:	2a01      	cmp	r2, #1
 8000304:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000308:	bf28      	it	cs
 800030a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030e:	fa43 f305 	asr.w	r3, r3, r5
 8000312:	18c0      	adds	r0, r0, r3
 8000314:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800031c:	d507      	bpl.n	800032e <__adddf3+0xe6>
 800031e:	f04f 0e00 	mov.w	lr, #0
 8000322:	f1dc 0c00 	rsbs	ip, ip, #0
 8000326:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032a:	eb6e 0101 	sbc.w	r1, lr, r1
 800032e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000332:	d31b      	bcc.n	800036c <__adddf3+0x124>
 8000334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000338:	d30c      	bcc.n	8000354 <__adddf3+0x10c>
 800033a:	0849      	lsrs	r1, r1, #1
 800033c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000340:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000344:	f104 0401 	add.w	r4, r4, #1
 8000348:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800034c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000350:	f080 809a 	bcs.w	8000488 <__adddf3+0x240>
 8000354:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000358:	bf08      	it	eq
 800035a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035e:	f150 0000 	adcs.w	r0, r0, #0
 8000362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000366:	ea41 0105 	orr.w	r1, r1, r5
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000370:	4140      	adcs	r0, r0
 8000372:	eb41 0101 	adc.w	r1, r1, r1
 8000376:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037a:	f1a4 0401 	sub.w	r4, r4, #1
 800037e:	d1e9      	bne.n	8000354 <__adddf3+0x10c>
 8000380:	f091 0f00 	teq	r1, #0
 8000384:	bf04      	itt	eq
 8000386:	4601      	moveq	r1, r0
 8000388:	2000      	moveq	r0, #0
 800038a:	fab1 f381 	clz	r3, r1
 800038e:	bf08      	it	eq
 8000390:	3320      	addeq	r3, #32
 8000392:	f1a3 030b 	sub.w	r3, r3, #11
 8000396:	f1b3 0220 	subs.w	r2, r3, #32
 800039a:	da0c      	bge.n	80003b6 <__adddf3+0x16e>
 800039c:	320c      	adds	r2, #12
 800039e:	dd08      	ble.n	80003b2 <__adddf3+0x16a>
 80003a0:	f102 0c14 	add.w	ip, r2, #20
 80003a4:	f1c2 020c 	rsb	r2, r2, #12
 80003a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ac:	fa21 f102 	lsr.w	r1, r1, r2
 80003b0:	e00c      	b.n	80003cc <__adddf3+0x184>
 80003b2:	f102 0214 	add.w	r2, r2, #20
 80003b6:	bfd8      	it	le
 80003b8:	f1c2 0c20 	rsble	ip, r2, #32
 80003bc:	fa01 f102 	lsl.w	r1, r1, r2
 80003c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c4:	bfdc      	itt	le
 80003c6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ca:	4090      	lslle	r0, r2
 80003cc:	1ae4      	subs	r4, r4, r3
 80003ce:	bfa2      	ittt	ge
 80003d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d4:	4329      	orrge	r1, r5
 80003d6:	bd30      	popge	{r4, r5, pc}
 80003d8:	ea6f 0404 	mvn.w	r4, r4
 80003dc:	3c1f      	subs	r4, #31
 80003de:	da1c      	bge.n	800041a <__adddf3+0x1d2>
 80003e0:	340c      	adds	r4, #12
 80003e2:	dc0e      	bgt.n	8000402 <__adddf3+0x1ba>
 80003e4:	f104 0414 	add.w	r4, r4, #20
 80003e8:	f1c4 0220 	rsb	r2, r4, #32
 80003ec:	fa20 f004 	lsr.w	r0, r0, r4
 80003f0:	fa01 f302 	lsl.w	r3, r1, r2
 80003f4:	ea40 0003 	orr.w	r0, r0, r3
 80003f8:	fa21 f304 	lsr.w	r3, r1, r4
 80003fc:	ea45 0103 	orr.w	r1, r5, r3
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	f1c4 040c 	rsb	r4, r4, #12
 8000406:	f1c4 0220 	rsb	r2, r4, #32
 800040a:	fa20 f002 	lsr.w	r0, r0, r2
 800040e:	fa01 f304 	lsl.w	r3, r1, r4
 8000412:	ea40 0003 	orr.w	r0, r0, r3
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	fa21 f004 	lsr.w	r0, r1, r4
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f094 0f00 	teq	r4, #0
 8000426:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042a:	bf06      	itte	eq
 800042c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000430:	3401      	addeq	r4, #1
 8000432:	3d01      	subne	r5, #1
 8000434:	e74e      	b.n	80002d4 <__adddf3+0x8c>
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf18      	it	ne
 800043c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000440:	d029      	beq.n	8000496 <__adddf3+0x24e>
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	d005      	beq.n	800045a <__adddf3+0x212>
 800044e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000452:	bf04      	itt	eq
 8000454:	4619      	moveq	r1, r3
 8000456:	4610      	moveq	r0, r2
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea91 0f03 	teq	r1, r3
 800045e:	bf1e      	ittt	ne
 8000460:	2100      	movne	r1, #0
 8000462:	2000      	movne	r0, #0
 8000464:	bd30      	popne	{r4, r5, pc}
 8000466:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046a:	d105      	bne.n	8000478 <__adddf3+0x230>
 800046c:	0040      	lsls	r0, r0, #1
 800046e:	4149      	adcs	r1, r1
 8000470:	bf28      	it	cs
 8000472:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000476:	bd30      	pop	{r4, r5, pc}
 8000478:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800047c:	bf3c      	itt	cc
 800047e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000482:	bd30      	popcc	{r4, r5, pc}
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf1a      	itte	ne
 800049c:	4619      	movne	r1, r3
 800049e:	4610      	movne	r0, r2
 80004a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a4:	bf1c      	itt	ne
 80004a6:	460b      	movne	r3, r1
 80004a8:	4602      	movne	r2, r0
 80004aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ae:	bf06      	itte	eq
 80004b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b4:	ea91 0f03 	teqeq	r1, r3
 80004b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	bf00      	nop

080004c0 <__aeabi_ui2d>:
 80004c0:	f090 0f00 	teq	r0, #0
 80004c4:	bf04      	itt	eq
 80004c6:	2100      	moveq	r1, #0
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d4:	f04f 0500 	mov.w	r5, #0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e750      	b.n	8000380 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_i2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f8:	bf48      	it	mi
 80004fa:	4240      	negmi	r0, r0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e73e      	b.n	8000380 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_f2d>:
 8000504:	0042      	lsls	r2, r0, #1
 8000506:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050a:	ea4f 0131 	mov.w	r1, r1, rrx
 800050e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000512:	bf1f      	itttt	ne
 8000514:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800051c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000520:	4770      	bxne	lr
 8000522:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000526:	bf08      	it	eq
 8000528:	4770      	bxeq	lr
 800052a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052e:	bf04      	itt	eq
 8000530:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 7460 	mov.w	r4, #896	; 0x380
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000544:	e71c      	b.n	8000380 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_ul2d>:
 8000548:	ea50 0201 	orrs.w	r2, r0, r1
 800054c:	bf08      	it	eq
 800054e:	4770      	bxeq	lr
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	e00a      	b.n	800056e <__aeabi_l2d+0x16>

08000558 <__aeabi_l2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000566:	d502      	bpl.n	800056e <__aeabi_l2d+0x16>
 8000568:	4240      	negs	r0, r0
 800056a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000572:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000576:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057a:	f43f aed8 	beq.w	800032e <__adddf3+0xe6>
 800057e:	f04f 0203 	mov.w	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000596:	f1c2 0320 	rsb	r3, r2, #32
 800059a:	fa00 fc03 	lsl.w	ip, r0, r3
 800059e:	fa20 f002 	lsr.w	r0, r0, r2
 80005a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a6:	ea40 000e 	orr.w	r0, r0, lr
 80005aa:	fa21 f102 	lsr.w	r1, r1, r2
 80005ae:	4414      	add	r4, r2
 80005b0:	e6bd      	b.n	800032e <__adddf3+0xe6>
 80005b2:	bf00      	nop

080005b4 <__aeabi_dmul>:
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c2:	bf1d      	ittte	ne
 80005c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c8:	ea94 0f0c 	teqne	r4, ip
 80005cc:	ea95 0f0c 	teqne	r5, ip
 80005d0:	f000 f8de 	bleq	8000790 <__aeabi_dmul+0x1dc>
 80005d4:	442c      	add	r4, r5
 80005d6:	ea81 0603 	eor.w	r6, r1, r3
 80005da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e6:	bf18      	it	ne
 80005e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f4:	d038      	beq.n	8000668 <__aeabi_dmul+0xb4>
 80005f6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000602:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000606:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060a:	f04f 0600 	mov.w	r6, #0
 800060e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000612:	f09c 0f00 	teq	ip, #0
 8000616:	bf18      	it	ne
 8000618:	f04e 0e01 	orrne.w	lr, lr, #1
 800061c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000620:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000624:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000628:	d204      	bcs.n	8000634 <__aeabi_dmul+0x80>
 800062a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062e:	416d      	adcs	r5, r5
 8000630:	eb46 0606 	adc.w	r6, r6, r6
 8000634:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000638:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800063c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000640:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000644:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000648:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800064c:	bf88      	it	hi
 800064e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000652:	d81e      	bhi.n	8000692 <__aeabi_dmul+0xde>
 8000654:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065e:	f150 0000 	adcs.w	r0, r0, #0
 8000662:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800066c:	ea46 0101 	orr.w	r1, r6, r1
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	ea81 0103 	eor.w	r1, r1, r3
 8000678:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800067c:	bfc2      	ittt	gt
 800067e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000686:	bd70      	popgt	{r4, r5, r6, pc}
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f04f 0e00 	mov.w	lr, #0
 8000690:	3c01      	subs	r4, #1
 8000692:	f300 80ab 	bgt.w	80007ec <__aeabi_dmul+0x238>
 8000696:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069a:	bfde      	ittt	le
 800069c:	2000      	movle	r0, #0
 800069e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a2:	bd70      	pople	{r4, r5, r6, pc}
 80006a4:	f1c4 0400 	rsb	r4, r4, #0
 80006a8:	3c20      	subs	r4, #32
 80006aa:	da35      	bge.n	8000718 <__aeabi_dmul+0x164>
 80006ac:	340c      	adds	r4, #12
 80006ae:	dc1b      	bgt.n	80006e8 <__aeabi_dmul+0x134>
 80006b0:	f104 0414 	add.w	r4, r4, #20
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f305 	lsl.w	r3, r0, r5
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	fa21 f604 	lsr.w	r6, r1, r4
 80006d8:	eb42 0106 	adc.w	r1, r2, r6
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f1c4 040c 	rsb	r4, r4, #12
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f304 	lsl.w	r3, r0, r4
 80006f4:	fa20 f005 	lsr.w	r0, r0, r5
 80006f8:	fa01 f204 	lsl.w	r2, r1, r4
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	f141 0100 	adc.w	r1, r1, #0
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f205 	lsl.w	r2, r0, r5
 8000720:	ea4e 0e02 	orr.w	lr, lr, r2
 8000724:	fa20 f304 	lsr.w	r3, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea43 0302 	orr.w	r3, r3, r2
 8000730:	fa21 f004 	lsr.w	r0, r1, r4
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	fa21 f204 	lsr.w	r2, r1, r4
 800073c:	ea20 0002 	bic.w	r0, r0, r2
 8000740:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f094 0f00 	teq	r4, #0
 8000754:	d10f      	bne.n	8000776 <__aeabi_dmul+0x1c2>
 8000756:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075a:	0040      	lsls	r0, r0, #1
 800075c:	eb41 0101 	adc.w	r1, r1, r1
 8000760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000764:	bf08      	it	eq
 8000766:	3c01      	subeq	r4, #1
 8000768:	d0f7      	beq.n	800075a <__aeabi_dmul+0x1a6>
 800076a:	ea41 0106 	orr.w	r1, r1, r6
 800076e:	f095 0f00 	teq	r5, #0
 8000772:	bf18      	it	ne
 8000774:	4770      	bxne	lr
 8000776:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077a:	0052      	lsls	r2, r2, #1
 800077c:	eb43 0303 	adc.w	r3, r3, r3
 8000780:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000784:	bf08      	it	eq
 8000786:	3d01      	subeq	r5, #1
 8000788:	d0f7      	beq.n	800077a <__aeabi_dmul+0x1c6>
 800078a:	ea43 0306 	orr.w	r3, r3, r6
 800078e:	4770      	bx	lr
 8000790:	ea94 0f0c 	teq	r4, ip
 8000794:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000798:	bf18      	it	ne
 800079a:	ea95 0f0c 	teqne	r5, ip
 800079e:	d00c      	beq.n	80007ba <__aeabi_dmul+0x206>
 80007a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a4:	bf18      	it	ne
 80007a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007aa:	d1d1      	bne.n	8000750 <__aeabi_dmul+0x19c>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007be:	bf06      	itte	eq
 80007c0:	4610      	moveq	r0, r2
 80007c2:	4619      	moveq	r1, r3
 80007c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c8:	d019      	beq.n	80007fe <__aeabi_dmul+0x24a>
 80007ca:	ea94 0f0c 	teq	r4, ip
 80007ce:	d102      	bne.n	80007d6 <__aeabi_dmul+0x222>
 80007d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d4:	d113      	bne.n	80007fe <__aeabi_dmul+0x24a>
 80007d6:	ea95 0f0c 	teq	r5, ip
 80007da:	d105      	bne.n	80007e8 <__aeabi_dmul+0x234>
 80007dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e0:	bf1c      	itt	ne
 80007e2:	4610      	movne	r0, r2
 80007e4:	4619      	movne	r1, r3
 80007e6:	d10a      	bne.n	80007fe <__aeabi_dmul+0x24a>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000802:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000806:	bd70      	pop	{r4, r5, r6, pc}

08000808 <__aeabi_ddiv>:
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000812:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000816:	bf1d      	ittte	ne
 8000818:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800081c:	ea94 0f0c 	teqne	r4, ip
 8000820:	ea95 0f0c 	teqne	r5, ip
 8000824:	f000 f8a7 	bleq	8000976 <__aeabi_ddiv+0x16e>
 8000828:	eba4 0405 	sub.w	r4, r4, r5
 800082c:	ea81 0e03 	eor.w	lr, r1, r3
 8000830:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000834:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000838:	f000 8088 	beq.w	800094c <__aeabi_ddiv+0x144>
 800083c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000840:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000844:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000848:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800084c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000850:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000854:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000858:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800085c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000860:	429d      	cmp	r5, r3
 8000862:	bf08      	it	eq
 8000864:	4296      	cmpeq	r6, r2
 8000866:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086e:	d202      	bcs.n	8000876 <__aeabi_ddiv+0x6e>
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	1ab6      	subs	r6, r6, r2
 8000878:	eb65 0503 	sbc.w	r5, r5, r3
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000886:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 000c 	orrcs.w	r0, r0, ip
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e8:	d018      	beq.n	800091c <__aeabi_ddiv+0x114>
 80008ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000902:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000906:	d1c0      	bne.n	800088a <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	d10b      	bne.n	8000926 <__aeabi_ddiv+0x11e>
 800090e:	ea41 0100 	orr.w	r1, r1, r0
 8000912:	f04f 0000 	mov.w	r0, #0
 8000916:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091a:	e7b6      	b.n	800088a <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	bf04      	itt	eq
 8000922:	4301      	orreq	r1, r0
 8000924:	2000      	moveq	r0, #0
 8000926:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092a:	bf88      	it	hi
 800092c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000930:	f63f aeaf 	bhi.w	8000692 <__aeabi_dmul+0xde>
 8000934:	ebb5 0c03 	subs.w	ip, r5, r3
 8000938:	bf04      	itt	eq
 800093a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000942:	f150 0000 	adcs.w	r0, r0, #0
 8000946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000950:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000954:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000958:	bfc2      	ittt	gt
 800095a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000962:	bd70      	popgt	{r4, r5, r6, pc}
 8000964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000968:	f04f 0e00 	mov.w	lr, #0
 800096c:	3c01      	subs	r4, #1
 800096e:	e690      	b.n	8000692 <__aeabi_dmul+0xde>
 8000970:	ea45 0e06 	orr.w	lr, r5, r6
 8000974:	e68d      	b.n	8000692 <__aeabi_dmul+0xde>
 8000976:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097a:	ea94 0f0c 	teq	r4, ip
 800097e:	bf08      	it	eq
 8000980:	ea95 0f0c 	teqeq	r5, ip
 8000984:	f43f af3b 	beq.w	80007fe <__aeabi_dmul+0x24a>
 8000988:	ea94 0f0c 	teq	r4, ip
 800098c:	d10a      	bne.n	80009a4 <__aeabi_ddiv+0x19c>
 800098e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000992:	f47f af34 	bne.w	80007fe <__aeabi_dmul+0x24a>
 8000996:	ea95 0f0c 	teq	r5, ip
 800099a:	f47f af25 	bne.w	80007e8 <__aeabi_dmul+0x234>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e72c      	b.n	80007fe <__aeabi_dmul+0x24a>
 80009a4:	ea95 0f0c 	teq	r5, ip
 80009a8:	d106      	bne.n	80009b8 <__aeabi_ddiv+0x1b0>
 80009aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ae:	f43f aefd 	beq.w	80007ac <__aeabi_dmul+0x1f8>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e722      	b.n	80007fe <__aeabi_dmul+0x24a>
 80009b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c2:	f47f aec5 	bne.w	8000750 <__aeabi_dmul+0x19c>
 80009c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ca:	f47f af0d 	bne.w	80007e8 <__aeabi_dmul+0x234>
 80009ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d2:	f47f aeeb 	bne.w	80007ac <__aeabi_dmul+0x1f8>
 80009d6:	e712      	b.n	80007fe <__aeabi_dmul+0x24a>

080009d8 <__gedf2>:
 80009d8:	f04f 3cff 	mov.w	ip, #4294967295
 80009dc:	e006      	b.n	80009ec <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__ledf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	e002      	b.n	80009ec <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__cmpdf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	bf18      	it	ne
 80009fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a02:	d01b      	beq.n	8000a3c <__cmpdf2+0x54>
 8000a04:	b001      	add	sp, #4
 8000a06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0a:	bf0c      	ite	eq
 8000a0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a10:	ea91 0f03 	teqne	r1, r3
 8000a14:	bf02      	ittt	eq
 8000a16:	ea90 0f02 	teqeq	r0, r2
 8000a1a:	2000      	moveq	r0, #0
 8000a1c:	4770      	bxeq	lr
 8000a1e:	f110 0f00 	cmn.w	r0, #0
 8000a22:	ea91 0f03 	teq	r1, r3
 8000a26:	bf58      	it	pl
 8000a28:	4299      	cmppl	r1, r3
 8000a2a:	bf08      	it	eq
 8000a2c:	4290      	cmpeq	r0, r2
 8000a2e:	bf2c      	ite	cs
 8000a30:	17d8      	asrcs	r0, r3, #31
 8000a32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a36:	f040 0001 	orr.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__cmpdf2+0x64>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d107      	bne.n	8000a5c <__cmpdf2+0x74>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d1d6      	bne.n	8000a04 <__cmpdf2+0x1c>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d0d3      	beq.n	8000a04 <__cmpdf2+0x1c>
 8000a5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_cdrcmple>:
 8000a64:	4684      	mov	ip, r0
 8000a66:	4610      	mov	r0, r2
 8000a68:	4662      	mov	r2, ip
 8000a6a:	468c      	mov	ip, r1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4663      	mov	r3, ip
 8000a70:	e000      	b.n	8000a74 <__aeabi_cdcmpeq>
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdcmpeq>:
 8000a74:	b501      	push	{r0, lr}
 8000a76:	f7ff ffb7 	bl	80009e8 <__cmpdf2>
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	bf48      	it	mi
 8000a7e:	f110 0f00 	cmnmi.w	r0, #0
 8000a82:	bd01      	pop	{r0, pc}

08000a84 <__aeabi_dcmpeq>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff fff4 	bl	8000a74 <__aeabi_cdcmpeq>
 8000a8c:	bf0c      	ite	eq
 8000a8e:	2001      	moveq	r0, #1
 8000a90:	2000      	movne	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmplt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffea 	bl	8000a74 <__aeabi_cdcmpeq>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmple>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffe0 	bl	8000a74 <__aeabi_cdcmpeq>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpge>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffce 	bl	8000a64 <__aeabi_cdrcmple>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpgt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffc4 	bl	8000a64 <__aeabi_cdrcmple>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2uiz>:
 8000b38:	004a      	lsls	r2, r1, #1
 8000b3a:	d211      	bcs.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b40:	d211      	bcs.n	8000b66 <__aeabi_d2uiz+0x2e>
 8000b42:	d50d      	bpl.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b4c:	d40e      	bmi.n	8000b6c <__aeabi_d2uiz+0x34>
 8000b4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_d2uiz+0x3a>
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b972 	b.w	8000f14 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4688      	mov	r8, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14b      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4615      	mov	r5, r2
 8000c5a:	d967      	bls.n	8000d2c <__udivmoddi4+0xe4>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0720 	rsb	r7, r2, #32
 8000c66:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c6e:	4095      	lsls	r5, r2
 8000c70:	ea47 0803 	orr.w	r8, r7, r3
 8000c74:	4094      	lsls	r4, r2
 8000c76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7a:	0c23      	lsrs	r3, r4, #16
 8000c7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c80:	fa1f fc85 	uxth.w	ip, r5
 8000c84:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x60>
 8000c94:	18eb      	adds	r3, r5, r3
 8000c96:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c9a:	f080 811b 	bcs.w	8000ed4 <__udivmoddi4+0x28c>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 8118 	bls.w	8000ed4 <__udivmoddi4+0x28c>
 8000ca4:	3f02      	subs	r7, #2
 8000ca6:	442b      	add	r3, r5
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cbc:	45a4      	cmp	ip, r4
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x8c>
 8000cc0:	192c      	adds	r4, r5, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	f080 8107 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000cca:	45a4      	cmp	ip, r4
 8000ccc:	f240 8104 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	442c      	add	r4, r5
 8000cd4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cd8:	eba4 040c 	sub.w	r4, r4, ip
 8000cdc:	2700      	movs	r7, #0
 8000cde:	b11e      	cbz	r6, 8000ce8 <__udivmoddi4+0xa0>
 8000ce0:	40d4      	lsrs	r4, r2
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ce8:	4639      	mov	r1, r7
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0xbe>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80eb 	beq.w	8000ece <__udivmoddi4+0x286>
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cfe:	4638      	mov	r0, r7
 8000d00:	4639      	mov	r1, r7
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f783 	clz	r7, r3
 8000d0a:	2f00      	cmp	r7, #0
 8000d0c:	d147      	bne.n	8000d9e <__udivmoddi4+0x156>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0xd0>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80fa 	bhi.w	8000f0c <__udivmoddi4+0x2c4>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	4698      	mov	r8, r3
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d0e0      	beq.n	8000ce8 <__udivmoddi4+0xa0>
 8000d26:	e9c6 4800 	strd	r4, r8, [r6]
 8000d2a:	e7dd      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000d2c:	b902      	cbnz	r2, 8000d30 <__udivmoddi4+0xe8>
 8000d2e:	deff      	udf	#255	; 0xff
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f040 808f 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d3a:	1b49      	subs	r1, r1, r5
 8000d3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d40:	fa1f f885 	uxth.w	r8, r5
 8000d44:	2701      	movs	r7, #1
 8000d46:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb08 f10c 	mul.w	r1, r8, ip
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5c:	18eb      	adds	r3, r5, r3
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4299      	cmp	r1, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2bc>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x14c>
 8000d84:	192c      	adds	r4, r5, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x14a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80b6 	bhi.w	8000efe <__udivmoddi4+0x2b6>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e79f      	b.n	8000cde <__udivmoddi4+0x96>
 8000d9e:	f1c7 0c20 	rsb	ip, r7, #32
 8000da2:	40bb      	lsls	r3, r7
 8000da4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000da8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dac:	fa01 f407 	lsl.w	r4, r1, r7
 8000db0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000db4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000db8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dbc:	4325      	orrs	r5, r4
 8000dbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dc2:	0c2c      	lsrs	r4, r5, #16
 8000dc4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dc8:	fa1f fa8e 	uxth.w	sl, lr
 8000dcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dd0:	fb09 f40a 	mul.w	r4, r9, sl
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dda:	fa00 f107 	lsl.w	r1, r0, r7
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1e 0303 	adds.w	r3, lr, r3
 8000de4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de8:	f080 8087 	bcs.w	8000efa <__udivmoddi4+0x2b2>
 8000dec:	429c      	cmp	r4, r3
 8000dee:	f240 8084 	bls.w	8000efa <__udivmoddi4+0x2b2>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4473      	add	r3, lr
 8000df8:	1b1b      	subs	r3, r3, r4
 8000dfa:	b2ad      	uxth	r5, r5
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e08:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e0c:	45a2      	cmp	sl, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1e 0404 	adds.w	r4, lr, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	d26b      	bcs.n	8000ef2 <__udivmoddi4+0x2aa>
 8000e1a:	45a2      	cmp	sl, r4
 8000e1c:	d969      	bls.n	8000ef2 <__udivmoddi4+0x2aa>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4474      	add	r4, lr
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2a:	eba4 040a 	sub.w	r4, r4, sl
 8000e2e:	454c      	cmp	r4, r9
 8000e30:	46c2      	mov	sl, r8
 8000e32:	464b      	mov	r3, r9
 8000e34:	d354      	bcc.n	8000ee0 <__udivmoddi4+0x298>
 8000e36:	d051      	beq.n	8000edc <__udivmoddi4+0x294>
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d069      	beq.n	8000f10 <__udivmoddi4+0x2c8>
 8000e3c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e40:	eb64 0403 	sbc.w	r4, r4, r3
 8000e44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e48:	40fd      	lsrs	r5, r7
 8000e4a:	40fc      	lsrs	r4, r7
 8000e4c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e50:	e9c6 5400 	strd	r5, r4, [r6]
 8000e54:	2700      	movs	r7, #0
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e60:	4095      	lsls	r5, r2
 8000e62:	fa01 f002 	lsl.w	r0, r1, r2
 8000e66:	fa21 f303 	lsr.w	r3, r1, r3
 8000e6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e6e:	4338      	orrs	r0, r7
 8000e70:	0c01      	lsrs	r1, r0, #16
 8000e72:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e76:	fa1f f885 	uxth.w	r8, r5
 8000e7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb07 f308 	mul.w	r3, r7, r8
 8000e86:	428b      	cmp	r3, r1
 8000e88:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8c:	d907      	bls.n	8000e9e <__udivmoddi4+0x256>
 8000e8e:	1869      	adds	r1, r5, r1
 8000e90:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e94:	d22f      	bcs.n	8000ef6 <__udivmoddi4+0x2ae>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d92d      	bls.n	8000ef6 <__udivmoddi4+0x2ae>
 8000e9a:	3f02      	subs	r7, #2
 8000e9c:	4429      	add	r1, r5
 8000e9e:	1acb      	subs	r3, r1, r3
 8000ea0:	b281      	uxth	r1, r0
 8000ea2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ea6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eaa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eae:	fb00 f308 	mul.w	r3, r0, r8
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x27e>
 8000eb6:	1869      	adds	r1, r5, r1
 8000eb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ebc:	d217      	bcs.n	8000eee <__udivmoddi4+0x2a6>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d915      	bls.n	8000eee <__udivmoddi4+0x2a6>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4429      	add	r1, r5
 8000ec6:	1ac9      	subs	r1, r1, r3
 8000ec8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ecc:	e73b      	b.n	8000d46 <__udivmoddi4+0xfe>
 8000ece:	4637      	mov	r7, r6
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	e709      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000ed4:	4607      	mov	r7, r0
 8000ed6:	e6e7      	b.n	8000ca8 <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fb      	b.n	8000cd4 <__udivmoddi4+0x8c>
 8000edc:	4541      	cmp	r1, r8
 8000ede:	d2ab      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ee4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ee8:	3801      	subs	r0, #1
 8000eea:	4613      	mov	r3, r2
 8000eec:	e7a4      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000eee:	4660      	mov	r0, ip
 8000ef0:	e7e9      	b.n	8000ec6 <__udivmoddi4+0x27e>
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	e795      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef6:	4667      	mov	r7, ip
 8000ef8:	e7d1      	b.n	8000e9e <__udivmoddi4+0x256>
 8000efa:	4681      	mov	r9, r0
 8000efc:	e77c      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	442c      	add	r4, r5
 8000f02:	e747      	b.n	8000d94 <__udivmoddi4+0x14c>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	442b      	add	r3, r5
 8000f0a:	e72f      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	e708      	b.n	8000d22 <__udivmoddi4+0xda>
 8000f10:	4637      	mov	r7, r6
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0xa0>

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b092      	sub	sp, #72	; 0x48
 8000f1c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000f1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	223c      	movs	r2, #60	; 0x3c
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b fd66 	bl	800ca02 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000f36:	4b43      	ldr	r3, [pc, #268]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4c:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f52:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5e:	4b39      	ldr	r3, [pc, #228]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f60:	2204      	movs	r2, #4
 8000f62:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f70:	4b34      	ldr	r3, [pc, #208]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f76:	4b33      	ldr	r3, [pc, #204]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f94:	482b      	ldr	r0, [pc, #172]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000f96:	f003 fc81 	bl	800489c <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000fa0:	f002 fd1a 	bl	80039d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fa8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fac:	4619      	mov	r1, r3
 8000fae:	4825      	ldr	r0, [pc, #148]	; (8001044 <MX_ADC1_Init+0x12c>)
 8000fb0:	f005 f96c 	bl	800628c <HAL_ADCEx_MultiModeConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000fba:	f002 fd0d 	bl	80039d8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_ADC1_Init+0x130>)
 8000fc0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000fc2:	2309      	movs	r3, #9
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000fca:	237f      	movs	r3, #127	; 0x7f
 8000fcc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000fec:	2384      	movs	r3, #132	; 0x84
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <MX_ADC1_Init+0x12c>)
 8001000:	f004 fcec 	bl	80059dc <HAL_ADCEx_InjectedConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800100a:	f002 fce5 	bl	80039d8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_ADC1_Init+0x134>)
 8001010:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001012:	f240 130f 	movw	r3, #271	; 0x10f
 8001016:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 800101c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001020:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8001022:	2301      	movs	r3, #1
 8001024:	773b      	strb	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <MX_ADC1_Init+0x12c>)
 800102c:	f004 fcd6 	bl	80059dc <HAL_ADCEx_InjectedConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8001036:	f002 fccf 	bl	80039d8 <Error_Handler>
  }

}
 800103a:	bf00      	nop
 800103c:	3748      	adds	r7, #72	; 0x48
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000028c 	.word	0x2000028c
 8001048:	0c900008 	.word	0x0c900008
 800104c:	32601000 	.word	0x32601000

08001050 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b090      	sub	sp, #64	; 0x40
 8001054:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	223c      	movs	r2, #60	; 0x3c
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f00b fcd0 	bl	800ca02 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <MX_ADC2_Init+0xe4>)
 8001064:	4a34      	ldr	r2, [pc, #208]	; (8001138 <MX_ADC2_Init+0xe8>)
 8001066:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b32      	ldr	r3, [pc, #200]	; (8001134 <MX_ADC2_Init+0xe4>)
 800106a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <MX_ADC2_Init+0xe4>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <MX_ADC2_Init+0xe4>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <MX_ADC2_Init+0xe4>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <MX_ADC2_Init+0xe4>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <MX_ADC2_Init+0xe4>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b29      	ldr	r3, [pc, #164]	; (8001134 <MX_ADC2_Init+0xe4>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <MX_ADC2_Init+0xe4>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MX_ADC2_Init+0xe4>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <MX_ADC2_Init+0xe4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <MX_ADC2_Init+0xe4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <MX_ADC2_Init+0xe4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_ADC2_Init+0xe4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010be:	481d      	ldr	r0, [pc, #116]	; (8001134 <MX_ADC2_Init+0xe4>)
 80010c0:	f003 fbec 	bl	800489c <HAL_ADC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80010ca:	f002 fc85 	bl	80039d8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_ADC2_Init+0xec>)
 80010d0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80010d2:	2309      	movs	r3, #9
 80010d4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80010d6:	2301      	movs	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80010da:	237f      	movs	r3, #127	; 0x7f
 80010dc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 80010e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ea:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001108:	2384      	movs	r3, #132	; 0x84
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_ADC2_Init+0xe4>)
 800111c:	f004 fc5e 	bl	80059dc <HAL_ADCEx_InjectedConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8001126:	f002 fc57 	bl	80039d8 <Error_Handler>
  }

}
 800112a:	bf00      	nop
 800112c:	3740      	adds	r7, #64	; 0x40
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000220 	.word	0x20000220
 8001138:	50000100 	.word	0x50000100
 800113c:	0c900008 	.word	0x0c900008

08001140 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001160:	d14e      	bne.n	8001200 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_ADC_MspInit+0x140>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a45      	ldr	r2, [pc, #276]	; (8001280 <HAL_ADC_MspInit+0x140>)
 800116a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800116c:	4b44      	ldr	r3, [pc, #272]	; (8001280 <HAL_ADC_MspInit+0x140>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10b      	bne.n	800118c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b43      	ldr	r3, [pc, #268]	; (8001284 <HAL_ADC_MspInit+0x144>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	4a42      	ldr	r2, [pc, #264]	; (8001284 <HAL_ADC_MspInit+0x144>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <HAL_ADC_MspInit+0x144>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001188:	61bb      	str	r3, [r7, #24]
 800118a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <HAL_ADC_MspInit+0x144>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	4a3c      	ldr	r2, [pc, #240]	; (8001284 <HAL_ADC_MspInit+0x144>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001198:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <HAL_ADC_MspInit+0x144>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b37      	ldr	r3, [pc, #220]	; (8001284 <HAL_ADC_MspInit+0x144>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a36      	ldr	r2, [pc, #216]	; (8001284 <HAL_ADC_MspInit+0x144>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <HAL_ADC_MspInit+0x144>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80011bc:	2305      	movs	r3, #5
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f005 fa71 	bl	80066b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4827      	ldr	r0, [pc, #156]	; (8001288 <HAL_ADC_MspInit+0x148>)
 80011ea:	f005 fa65 	bl	80066b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2101      	movs	r1, #1
 80011f2:	2012      	movs	r0, #18
 80011f4:	f005 f9c5 	bl	8006582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011f8:	2012      	movs	r0, #18
 80011fa:	f005 f9dc 	bl	80065b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011fe:	e03a      	b.n	8001276 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a21      	ldr	r2, [pc, #132]	; (800128c <HAL_ADC_MspInit+0x14c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d135      	bne.n	8001276 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_ADC_MspInit+0x140>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_ADC_MspInit+0x140>)
 8001212:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_ADC_MspInit+0x140>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d10b      	bne.n	8001234 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_ADC_MspInit+0x144>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	4a18      	ldr	r2, [pc, #96]	; (8001284 <HAL_ADC_MspInit+0x144>)
 8001222:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001226:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_ADC_MspInit+0x144>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_ADC_MspInit+0x144>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_ADC_MspInit+0x144>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_ADC_MspInit+0x144>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124c:	2340      	movs	r3, #64	; 0x40
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001250:	2303      	movs	r3, #3
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f005 fa29 	bl	80066b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2101      	movs	r1, #1
 800126a:	2012      	movs	r0, #18
 800126c:	f005 f989 	bl	8006582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001270:	2012      	movs	r0, #18
 8001272:	f005 f9a0 	bl	80065b6 <HAL_NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3730      	adds	r7, #48	; 0x30
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000208 	.word	0x20000208
 8001284:	40021000 	.word	0x40021000
 8001288:	48000400 	.word	0x48000400
 800128c:	50000100 	.word	0x50000100

08001290 <cJSON_GetNumberValue>:

    return item->valuestring;
}

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item) 
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsNumber(item)) 
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f001 f94b 	bl	8002534 <cJSON_IsNumber>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <cJSON_GetNumberValue+0x1c>
    {
        return (double) NAN;
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	4c06      	ldr	r4, [pc, #24]	; (80012c4 <cJSON_GetNumberValue+0x34>)
 80012aa:	e002      	b.n	80012b2 <cJSON_GetNumberValue+0x22>
    }

    return item->valuedouble;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80012b2:	ec44 3b17 	vmov	d7, r3, r4
}
 80012b6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ba:	eef0 0a67 	vmov.f32	s1, s15
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	7ff80000 	.word	0x7ff80000

080012c8 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <case_insensitive_strcmp+0x16>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	e05e      	b.n	80013a0 <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d10d      	bne.n	8001306 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e058      	b.n	80013a0 <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <case_insensitive_strcmp+0x32>
        {
            return 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e052      	b.n	80013a0 <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3301      	adds	r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	f00b fb3e 	bl	800c98c <__locale_ctype_ptr>
 8001310:	4602      	mov	r2, r0
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3301      	adds	r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d103      	bne.n	800132a <case_insensitive_strcmp+0x62>
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	f103 0420 	add.w	r4, r3, #32
 8001328:	e000      	b.n	800132c <case_insensitive_strcmp+0x64>
 800132a:	7bfc      	ldrb	r4, [r7, #15]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	73bb      	strb	r3, [r7, #14]
 8001332:	f00b fb2b 	bl	800c98c <__locale_ctype_ptr>
 8001336:	4602      	mov	r2, r0
 8001338:	7bbb      	ldrb	r3, [r7, #14]
 800133a:	3301      	adds	r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d102      	bne.n	800134e <case_insensitive_strcmp+0x86>
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	3320      	adds	r3, #32
 800134c:	e000      	b.n	8001350 <case_insensitive_strcmp+0x88>
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	429c      	cmp	r4, r3
 8001352:	d0cc      	beq.n	80012ee <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	737b      	strb	r3, [r7, #13]
 800135a:	f00b fb17 	bl	800c98c <__locale_ctype_ptr>
 800135e:	4602      	mov	r2, r0
 8001360:	7b7b      	ldrb	r3, [r7, #13]
 8001362:	3301      	adds	r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d103      	bne.n	8001378 <case_insensitive_strcmp+0xb0>
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	f103 0420 	add.w	r4, r3, #32
 8001376:	e000      	b.n	800137a <case_insensitive_strcmp+0xb2>
 8001378:	7b7c      	ldrb	r4, [r7, #13]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	733b      	strb	r3, [r7, #12]
 8001380:	f00b fb04 	bl	800c98c <__locale_ctype_ptr>
 8001384:	4602      	mov	r2, r0
 8001386:	7b3b      	ldrb	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <case_insensitive_strcmp+0xd4>
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	3320      	adds	r3, #32
 800139a:	e000      	b.n	800139e <case_insensitive_strcmp+0xd6>
 800139c:	7b3b      	ldrb	r3, [r7, #12]
 800139e:	1ae3      	subs	r3, r4, r3
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}

080013a8 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2028      	movs	r0, #40	; 0x28
 80013b6:	4798      	blx	r3
 80013b8:	60f8      	str	r0, [r7, #12]
    if (node)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80013c0:	2228      	movs	r2, #40	; 0x28
 80013c2:	2100      	movs	r1, #0
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f00b fb1c 	bl	800ca02 <memset>
    }

    return node;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80013e0:	e037      	b.n	8001452 <cJSON_Delete+0x7e>
    {
        next = item->next;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d108      	bne.n	8001406 <cJSON_Delete+0x32>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ffe7 	bl	80013d4 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <cJSON_Delete+0x52>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <cJSON_Delete+0x8c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6912      	ldr	r2, [r2, #16]
 8001422:	4610      	mov	r0, r2
 8001424:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <cJSON_Delete+0x72>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <cJSON_Delete+0x8c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6a12      	ldr	r2, [r2, #32]
 8001442:	4610      	mov	r0, r2
 8001444:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <cJSON_Delete+0x8c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
        item = next;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1c4      	bne.n	80013e2 <cJSON_Delete+0xe>
    }
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000000 	.word	0x20000000

08001464 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001468:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	0000      	movs	r0, r0
	...

08001478 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b099      	sub	sp, #100	; 0x64
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	f04f 0400 	mov.w	r4, #0
 800148a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800148e:	2300      	movs	r3, #0
 8001490:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001492:	f7ff ffe7 	bl	8001464 <get_decimal_point>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <parse_number+0x36>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <parse_number+0x3a>
    {
        return false;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e104      	b.n	80016bc <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014b6:	e09f      	b.n	80015f8 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6899      	ldr	r1, [r3, #8]
 80014c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c2:	440b      	add	r3, r1
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	3b2b      	subs	r3, #43	; 0x2b
 80014ca:	2b3a      	cmp	r3, #58	; 0x3a
 80014cc:	f200 80a4 	bhi.w	8001618 <parse_number+0x1a0>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <parse_number+0x60>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080015c5 	.word	0x080015c5
 80014dc:	08001619 	.word	0x08001619
 80014e0:	080015c5 	.word	0x080015c5
 80014e4:	080015e3 	.word	0x080015e3
 80014e8:	08001619 	.word	0x08001619
 80014ec:	080015c5 	.word	0x080015c5
 80014f0:	080015c5 	.word	0x080015c5
 80014f4:	080015c5 	.word	0x080015c5
 80014f8:	080015c5 	.word	0x080015c5
 80014fc:	080015c5 	.word	0x080015c5
 8001500:	080015c5 	.word	0x080015c5
 8001504:	080015c5 	.word	0x080015c5
 8001508:	080015c5 	.word	0x080015c5
 800150c:	080015c5 	.word	0x080015c5
 8001510:	080015c5 	.word	0x080015c5
 8001514:	08001619 	.word	0x08001619
 8001518:	08001619 	.word	0x08001619
 800151c:	08001619 	.word	0x08001619
 8001520:	08001619 	.word	0x08001619
 8001524:	08001619 	.word	0x08001619
 8001528:	08001619 	.word	0x08001619
 800152c:	08001619 	.word	0x08001619
 8001530:	08001619 	.word	0x08001619
 8001534:	08001619 	.word	0x08001619
 8001538:	08001619 	.word	0x08001619
 800153c:	08001619 	.word	0x08001619
 8001540:	080015c5 	.word	0x080015c5
 8001544:	08001619 	.word	0x08001619
 8001548:	08001619 	.word	0x08001619
 800154c:	08001619 	.word	0x08001619
 8001550:	08001619 	.word	0x08001619
 8001554:	08001619 	.word	0x08001619
 8001558:	08001619 	.word	0x08001619
 800155c:	08001619 	.word	0x08001619
 8001560:	08001619 	.word	0x08001619
 8001564:	08001619 	.word	0x08001619
 8001568:	08001619 	.word	0x08001619
 800156c:	08001619 	.word	0x08001619
 8001570:	08001619 	.word	0x08001619
 8001574:	08001619 	.word	0x08001619
 8001578:	08001619 	.word	0x08001619
 800157c:	08001619 	.word	0x08001619
 8001580:	08001619 	.word	0x08001619
 8001584:	08001619 	.word	0x08001619
 8001588:	08001619 	.word	0x08001619
 800158c:	08001619 	.word	0x08001619
 8001590:	08001619 	.word	0x08001619
 8001594:	08001619 	.word	0x08001619
 8001598:	08001619 	.word	0x08001619
 800159c:	08001619 	.word	0x08001619
 80015a0:	08001619 	.word	0x08001619
 80015a4:	08001619 	.word	0x08001619
 80015a8:	08001619 	.word	0x08001619
 80015ac:	08001619 	.word	0x08001619
 80015b0:	08001619 	.word	0x08001619
 80015b4:	08001619 	.word	0x08001619
 80015b8:	08001619 	.word	0x08001619
 80015bc:	08001619 	.word	0x08001619
 80015c0:	080015c5 	.word	0x080015c5
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6899      	ldr	r1, [r3, #8]
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ce:	440b      	add	r3, r1
 80015d0:	4413      	add	r3, r2
 80015d2:	7819      	ldrb	r1, [r3, #0]
 80015d4:	f107 0208 	add.w	r2, r7, #8
 80015d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015da:	4413      	add	r3, r2
 80015dc:	460a      	mov	r2, r1
 80015de:	701a      	strb	r2, [r3, #0]
                break;
 80015e0:	e007      	b.n	80015f2 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e8:	4413      	add	r3, r2
 80015ea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80015ee:	701a      	strb	r2, [r3, #0]
                break;
 80015f0:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80015f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f4:	3301      	adds	r3, #1
 80015f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015fa:	2b3e      	cmp	r3, #62	; 0x3e
 80015fc:	d80e      	bhi.n	800161c <parse_number+0x1a4>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <parse_number+0x1a4>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160a:	441a      	add	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	f4ff af51 	bcc.w	80014b8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001616:	e001      	b.n	800161c <parse_number+0x1a4>
                goto loop_end;
 8001618:	bf00      	nop
 800161a:	e000      	b.n	800161e <parse_number+0x1a6>
loop_end:
 800161c:	bf00      	nop
    number_c_string[i] = '\0';
 800161e:	f107 0208 	add.w	r2, r7, #8
 8001622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001624:	4413      	add	r3, r2
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800162a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f00c f8cf 	bl	800d7d8 <strtod>
 800163a:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800163e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	429a      	cmp	r2, r3
 8001646:	d101      	bne.n	800164c <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8001648:	2300      	movs	r3, #0
 800164a:	e037      	b.n	80016bc <parse_number+0x244>
    }

    item->valuedouble = number;
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001652:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001656:	a31d      	add	r3, pc, #116	; (adr r3, 80016cc <parse_number+0x254>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001660:	f7ff fa2e 	bl	8000ac0 <__aeabi_dcmpge>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	e015      	b.n	80016a0 <parse_number+0x228>
    }
    else if (number <= (double)INT_MIN)
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <parse_number+0x250>)
 800167a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800167e:	f7ff fa15 	bl	8000aac <__aeabi_dcmple>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	e006      	b.n	80016a0 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 8001692:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001696:	f7ff fa27 	bl	8000ae8 <__aeabi_d2iz>
 800169a:	4602      	mov	r2, r0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2208      	movs	r2, #8
 80016a4:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016ac:	4611      	mov	r1, r2
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	1a8a      	subs	r2, r1, r2
 80016b4:	441a      	add	r2, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	609a      	str	r2, [r3, #8]
    return true;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3764      	adds	r7, #100	; 0x64
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	f3af 8000 	nop.w
 80016c8:	c1e00000 	.word	0xc1e00000
 80016cc:	ffc00000 	.word	0xffc00000
 80016d0:	41dfffff 	.word	0x41dfffff

080016d4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	e04c      	b.n	8001784 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b2f      	cmp	r3, #47	; 0x2f
 80016f4:	d90f      	bls.n	8001716 <parse_hex4+0x42>
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b39      	cmp	r3, #57	; 0x39
 8001700:	d809      	bhi.n	8001716 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	3b30      	subs	r3, #48	; 0x30
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e02d      	b.n	8001772 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b40      	cmp	r3, #64	; 0x40
 8001720:	d90f      	bls.n	8001742 <parse_hex4+0x6e>
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4413      	add	r3, r2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b46      	cmp	r3, #70	; 0x46
 800172c:	d809      	bhi.n	8001742 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	3b37      	subs	r3, #55	; 0x37
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e017      	b.n	8001772 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b60      	cmp	r3, #96	; 0x60
 800174c:	d90f      	bls.n	800176e <parse_hex4+0x9a>
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b66      	cmp	r3, #102	; 0x66
 8001758:	d809      	bhi.n	800176e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	3b57      	subs	r3, #87	; 0x57
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e001      	b.n	8001772 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800176e:	2300      	movs	r3, #0
 8001770:	e00c      	b.n	800178c <parse_hex4+0xb8>
        }

        if (i < 3)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d802      	bhi.n	800177e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3301      	adds	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d9af      	bls.n	80016ea <parse_hex4+0x16>
        }
    }

    return h;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	f340 80b7 	ble.w	8001942 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	3302      	adds	r3, #2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff7b 	bl	80016d4 <parse_hex4>
 80017de:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80017e6:	d304      	bcc.n	80017f2 <utf16_literal_to_utf8+0x5a>
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80017ee:	f0c0 80aa 	bcc.w	8001946 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80017f8:	d337      	bcc.n	800186a <utf16_literal_to_utf8+0xd2>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001800:	d233      	bcs.n	800186a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	3306      	adds	r3, #6
 8001806:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800180c:	230c      	movs	r3, #12
 800180e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b05      	cmp	r3, #5
 800181a:	f340 8096 	ble.w	800194a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b5c      	cmp	r3, #92	; 0x5c
 8001824:	f040 8093 	bne.w	800194e <utf16_literal_to_utf8+0x1b6>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b75      	cmp	r3, #117	; 0x75
 8001830:	f040 808d 	bne.w	800194e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3302      	adds	r3, #2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff4b 	bl	80016d4 <parse_hex4>
 800183e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001846:	f0c0 8082 	bcc.w	800194e <utf16_literal_to_utf8+0x1b6>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001850:	d27d      	bcs.n	800194e <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	029a      	lsls	r2, r3, #10
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <utf16_literal_to_utf8+0x1c8>)
 8001858:	4013      	ands	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001860:	4313      	orrs	r3, r2
 8001862:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001868:	e004      	b.n	8001874 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800186a:	2306      	movs	r3, #6
 800186c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	2b7f      	cmp	r3, #127	; 0x7f
 8001878:	d803      	bhi.n	8001882 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001880:	e01f      	b.n	80018c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001888:	d206      	bcs.n	8001898 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800188a:	2302      	movs	r3, #2
 800188c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001890:	23c0      	movs	r3, #192	; 0xc0
 8001892:	f887 3020 	strb.w	r3, [r7, #32]
 8001896:	e014      	b.n	80018c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189e:	d206      	bcs.n	80018ae <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80018a6:	23e0      	movs	r3, #224	; 0xe0
 80018a8:	f887 3020 	strb.w	r3, [r7, #32]
 80018ac:	e009      	b.n	80018c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80018b4:	d24d      	bcs.n	8001952 <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80018b6:	2304      	movs	r3, #4
 80018b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80018bc:	23f0      	movs	r3, #240	; 0xf0
 80018be:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80018c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80018cc:	e015      	b.n	80018fa <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80018e0:	440b      	add	r3, r1
 80018e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80018f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80018f4:	3b01      	subs	r3, #1
 80018f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80018fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1e5      	bne.n	80018ce <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001906:	2b01      	cmp	r3, #1
 8001908:	d909      	bls.n	800191e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	b2d9      	uxtb	r1, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001916:	430a      	orrs	r2, r1
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	e007      	b.n	800192e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001936:	441a      	add	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800193c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001940:	e009      	b.n	8001956 <utf16_literal_to_utf8+0x1be>
        goto fail;
 8001942:	bf00      	nop
 8001944:	e006      	b.n	8001954 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001946:	bf00      	nop
 8001948:	e004      	b.n	8001954 <utf16_literal_to_utf8+0x1bc>
            goto fail;
 800194a:	bf00      	nop
 800194c:	e002      	b.n	8001954 <utf16_literal_to_utf8+0x1bc>

fail:
 800194e:	bf00      	nop
 8001950:	e000      	b.n	8001954 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001952:	bf00      	nop
    return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	000ffc00 	.word	0x000ffc00

08001964 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	3301      	adds	r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	3301      	adds	r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b22      	cmp	r3, #34	; 0x22
 80019a0:	f040 816c 	bne.w	8001c7c <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80019ac:	e018      	b.n	80019e0 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b5c      	cmp	r3, #92	; 0x5c
 80019b4:	d111      	bne.n	80019da <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	3301      	adds	r3, #1
 80019ba:	461a      	mov	r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f080 8159 	bcs.w	8001c80 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61bb      	str	r3, [r7, #24]
                input_end++;
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	3301      	adds	r3, #1
 80019d8:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	3301      	adds	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d203      	bcs.n	80019fa <parse_string+0x96>
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b22      	cmp	r3, #34	; 0x22
 80019f8:	d1d9      	bne.n	80019ae <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f080 813b 	bcs.w	8001c84 <parse_string+0x320>
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b22      	cmp	r3, #34	; 0x22
 8001a14:	f040 8136 	bne.w	8001c84 <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	6811      	ldr	r1, [r2, #0]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	6892      	ldr	r2, [r2, #8]
 8001a22:	440a      	add	r2, r1
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	3201      	adds	r2, #1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4798      	blx	r3
 8001a3a:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8122 	beq.w	8001c88 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001a48:	e0fc      	b.n	8001c44 <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b5c      	cmp	r3, #92	; 0x5c
 8001a50:	d008      	beq.n	8001a64 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	1c53      	adds	r3, r2, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	60f9      	str	r1, [r7, #12]
 8001a5e:	7812      	ldrb	r2, [r2, #0]
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	e0ef      	b.n	8001c44 <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001a64:	2302      	movs	r3, #2
 8001a66:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001a68:	6a3a      	ldr	r2, [r7, #32]
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f340 810c 	ble.w	8001c8c <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3301      	adds	r3, #1
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	3b22      	subs	r3, #34	; 0x22
 8001a7c:	2b53      	cmp	r3, #83	; 0x53
 8001a7e:	f200 8107 	bhi.w	8001c90 <parse_string+0x32c>
 8001a82:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <parse_string+0x124>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001c15 	.word	0x08001c15
 8001a8c:	08001c91 	.word	0x08001c91
 8001a90:	08001c91 	.word	0x08001c91
 8001a94:	08001c91 	.word	0x08001c91
 8001a98:	08001c91 	.word	0x08001c91
 8001a9c:	08001c91 	.word	0x08001c91
 8001aa0:	08001c91 	.word	0x08001c91
 8001aa4:	08001c91 	.word	0x08001c91
 8001aa8:	08001c91 	.word	0x08001c91
 8001aac:	08001c91 	.word	0x08001c91
 8001ab0:	08001c91 	.word	0x08001c91
 8001ab4:	08001c91 	.word	0x08001c91
 8001ab8:	08001c91 	.word	0x08001c91
 8001abc:	08001c15 	.word	0x08001c15
 8001ac0:	08001c91 	.word	0x08001c91
 8001ac4:	08001c91 	.word	0x08001c91
 8001ac8:	08001c91 	.word	0x08001c91
 8001acc:	08001c91 	.word	0x08001c91
 8001ad0:	08001c91 	.word	0x08001c91
 8001ad4:	08001c91 	.word	0x08001c91
 8001ad8:	08001c91 	.word	0x08001c91
 8001adc:	08001c91 	.word	0x08001c91
 8001ae0:	08001c91 	.word	0x08001c91
 8001ae4:	08001c91 	.word	0x08001c91
 8001ae8:	08001c91 	.word	0x08001c91
 8001aec:	08001c91 	.word	0x08001c91
 8001af0:	08001c91 	.word	0x08001c91
 8001af4:	08001c91 	.word	0x08001c91
 8001af8:	08001c91 	.word	0x08001c91
 8001afc:	08001c91 	.word	0x08001c91
 8001b00:	08001c91 	.word	0x08001c91
 8001b04:	08001c91 	.word	0x08001c91
 8001b08:	08001c91 	.word	0x08001c91
 8001b0c:	08001c91 	.word	0x08001c91
 8001b10:	08001c91 	.word	0x08001c91
 8001b14:	08001c91 	.word	0x08001c91
 8001b18:	08001c91 	.word	0x08001c91
 8001b1c:	08001c91 	.word	0x08001c91
 8001b20:	08001c91 	.word	0x08001c91
 8001b24:	08001c91 	.word	0x08001c91
 8001b28:	08001c91 	.word	0x08001c91
 8001b2c:	08001c91 	.word	0x08001c91
 8001b30:	08001c91 	.word	0x08001c91
 8001b34:	08001c91 	.word	0x08001c91
 8001b38:	08001c91 	.word	0x08001c91
 8001b3c:	08001c91 	.word	0x08001c91
 8001b40:	08001c91 	.word	0x08001c91
 8001b44:	08001c91 	.word	0x08001c91
 8001b48:	08001c91 	.word	0x08001c91
 8001b4c:	08001c91 	.word	0x08001c91
 8001b50:	08001c91 	.word	0x08001c91
 8001b54:	08001c91 	.word	0x08001c91
 8001b58:	08001c91 	.word	0x08001c91
 8001b5c:	08001c91 	.word	0x08001c91
 8001b60:	08001c91 	.word	0x08001c91
 8001b64:	08001c91 	.word	0x08001c91
 8001b68:	08001c91 	.word	0x08001c91
 8001b6c:	08001c91 	.word	0x08001c91
 8001b70:	08001c15 	.word	0x08001c15
 8001b74:	08001c91 	.word	0x08001c91
 8001b78:	08001c91 	.word	0x08001c91
 8001b7c:	08001c91 	.word	0x08001c91
 8001b80:	08001c91 	.word	0x08001c91
 8001b84:	08001c91 	.word	0x08001c91
 8001b88:	08001bd9 	.word	0x08001bd9
 8001b8c:	08001c91 	.word	0x08001c91
 8001b90:	08001c91 	.word	0x08001c91
 8001b94:	08001c91 	.word	0x08001c91
 8001b98:	08001be5 	.word	0x08001be5
 8001b9c:	08001c91 	.word	0x08001c91
 8001ba0:	08001c91 	.word	0x08001c91
 8001ba4:	08001c91 	.word	0x08001c91
 8001ba8:	08001c91 	.word	0x08001c91
 8001bac:	08001c91 	.word	0x08001c91
 8001bb0:	08001c91 	.word	0x08001c91
 8001bb4:	08001c91 	.word	0x08001c91
 8001bb8:	08001bf1 	.word	0x08001bf1
 8001bbc:	08001c91 	.word	0x08001c91
 8001bc0:	08001c91 	.word	0x08001c91
 8001bc4:	08001c91 	.word	0x08001c91
 8001bc8:	08001bfd 	.word	0x08001bfd
 8001bcc:	08001c91 	.word	0x08001c91
 8001bd0:	08001c09 	.word	0x08001c09
 8001bd4:	08001c23 	.word	0x08001c23
            {
                case 'b':
                    *output_pointer++ = '\b';
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60fa      	str	r2, [r7, #12]
 8001bde:	2208      	movs	r2, #8
 8001be0:	701a      	strb	r2, [r3, #0]
                    break;
 8001be2:	e02b      	b.n	8001c3c <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60fa      	str	r2, [r7, #12]
 8001bea:	220c      	movs	r2, #12
 8001bec:	701a      	strb	r2, [r3, #0]
                    break;
 8001bee:	e025      	b.n	8001c3c <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	60fa      	str	r2, [r7, #12]
 8001bf6:	220a      	movs	r2, #10
 8001bf8:	701a      	strb	r2, [r3, #0]
                    break;
 8001bfa:	e01f      	b.n	8001c3c <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60fa      	str	r2, [r7, #12]
 8001c02:	220d      	movs	r2, #13
 8001c04:	701a      	strb	r2, [r3, #0]
                    break;
 8001c06:	e019      	b.n	8001c3c <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	60fa      	str	r2, [r7, #12]
 8001c0e:	2209      	movs	r2, #9
 8001c10:	701a      	strb	r2, [r3, #0]
                    break;
 8001c12:	e013      	b.n	8001c3c <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60fa      	str	r2, [r7, #12]
 8001c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1c:	7852      	ldrb	r2, [r2, #1]
 8001c1e:	701a      	strb	r2, [r3, #0]
                    break;
 8001c20:	e00c      	b.n	8001c3c <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	461a      	mov	r2, r3
 8001c28:	6a39      	ldr	r1, [r7, #32]
 8001c2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c2c:	f7ff fdb4 	bl	8001798 <utf16_literal_to_utf8>
 8001c30:	4603      	mov	r3, r0
 8001c32:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d02c      	beq.n	8001c94 <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8001c3a:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c40:	4413      	add	r3, r2
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f4ff aefe 	bcc.w	8001a4a <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2210      	movs	r2, #16
 8001c58:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	609a      	str	r2, [r3, #8]

    return true;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e01e      	b.n	8001cba <parse_string+0x356>
        goto fail;
 8001c7c:	bf00      	nop
 8001c7e:	e00a      	b.n	8001c96 <parse_string+0x332>
                    goto fail;
 8001c80:	bf00      	nop
 8001c82:	e008      	b.n	8001c96 <parse_string+0x332>

fail:
 8001c84:	bf00      	nop
 8001c86:	e006      	b.n	8001c96 <parse_string+0x332>
            goto fail; /* allocation failure */
 8001c88:	bf00      	nop
 8001c8a:	e004      	b.n	8001c96 <parse_string+0x332>
                goto fail;
 8001c8c:	bf00      	nop
 8001c8e:	e002      	b.n	8001c96 <parse_string+0x332>
                    goto fail;
 8001c90:	bf00      	nop
 8001c92:	e000      	b.n	8001c96 <parse_string+0x332>
                        goto fail;
 8001c94:	bf00      	nop
    if (output != NULL)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <parse_string+0x340>
    {
        input_buffer->hooks.deallocate(output);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	69f8      	ldr	r0, [r7, #28]
 8001ca2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <parse_string+0x354>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop

08001cc4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <buffer_skip_whitespace+0x16>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e02c      	b.n	8001d38 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <buffer_skip_whitespace+0x2c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d306      	bcc.n	8001cfe <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	e021      	b.n	8001d38 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00d      	beq.n	8001d20 <buffer_skip_whitespace+0x5c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <buffer_skip_whitespace+0x5c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d9e9      	bls.n	8001cf4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d104      	bne.n	8001d36 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001d36:	687b      	ldr	r3, [r7, #4]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <skip_utf8_bom+0x1e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <skip_utf8_bom+0x1e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e01c      	b.n	8001da0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d018      	beq.n	8001d9e <skip_utf8_bom+0x5a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	1d1a      	adds	r2, r3, #4
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d211      	bcs.n	8001d9e <skip_utf8_bom+0x5a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4413      	add	r3, r2
 8001d84:	2203      	movs	r2, #3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <skip_utf8_bom+0x64>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00a ff03 	bl	800cb94 <strncmp>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	1cda      	adds	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	0800eaf4 	.word	0x0800eaf4

08001dac <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e00c      	b.n	8001ddc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f7fe fa32 	bl	800022c <strlen>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	3301      	adds	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	6979      	ldr	r1, [r7, #20]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f805 	bl	8001de4 <cJSON_ParseWithLengthOpts>
 8001dda:	4603      	mov	r3, r0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08e      	sub	sp, #56	; 0x38
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001df2:	f107 0318 	add.w	r3, r7, #24
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]
 8001e02:	615a      	str	r2, [r3, #20]
 8001e04:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001e0a:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <cJSON_ParseWithLengthOpts+0x128>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001e10:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <cJSON_ParseWithLengthOpts+0x128>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d042      	beq.n	8001ea2 <cJSON_ParseWithLengthOpts+0xbe>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d03f      	beq.n	8001ea2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <cJSON_ParseWithLengthOpts+0x12c>)
 8001e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e36:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001e3a:	4835      	ldr	r0, [pc, #212]	; (8001f10 <cJSON_ParseWithLengthOpts+0x12c>)
 8001e3c:	f7ff fab4 	bl	80013a8 <cJSON_New_Item>
 8001e40:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d02e      	beq.n	8001ea6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001e48:	f107 0318 	add.w	r3, r7, #24
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff79 	bl	8001d44 <skip_utf8_bom>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff35 	bl	8001cc4 <buffer_skip_whitespace>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e60:	f000 f866 	bl	8001f30 <parse_value>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d01f      	beq.n	8001eaa <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001e70:	f107 0318 	add.w	r3, r7, #24
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff25 	bl	8001cc4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001e7a:	6a3a      	ldr	r2, [r7, #32]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d20f      	bcs.n	8001ea2 <cJSON_ParseWithLengthOpts+0xbe>
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <cJSON_ParseWithLengthOpts+0xbe>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	441a      	add	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	e02f      	b.n	8001f02 <cJSON_ParseWithLengthOpts+0x11e>

fail:
 8001ea2:	bf00      	nop
 8001ea4:	e002      	b.n	8001eac <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001ea6:	bf00      	nop
 8001ea8:	e000      	b.n	8001eac <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001eaa:	bf00      	nop
    if (item != NULL)
 8001eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <cJSON_ParseWithLengthOpts+0xd4>
    {
        cJSON_Delete(item);
 8001eb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eb4:	f7ff fa8e 	bl	80013d4 <cJSON_Delete>
    }

    if (value != NULL)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d020      	beq.n	8001f00 <cJSON_ParseWithLengthOpts+0x11c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d202      	bcs.n	8001ed4 <cJSON_ParseWithLengthOpts+0xf0>
        {
            local_error.position = buffer.offset;
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e005      	b.n	8001ee0 <cJSON_ParseWithLengthOpts+0xfc>
        }
        else if (buffer.length > 0)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <cJSON_ParseWithLengthOpts+0xfc>
        {
            local_error.position = buffer.length - 1;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <cJSON_ParseWithLengthOpts+0x10c>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	441a      	add	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <cJSON_ParseWithLengthOpts+0x128>)
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001efc:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3738      	adds	r7, #56	; 0x38
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000020c 	.word	0x2000020c
 8001f10:	20000000 	.word	0x20000000

08001f14 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff43 	bl	8001dac <cJSON_ParseWithOpts>
 8001f26:	4603      	mov	r3, r0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <parse_value+0x18>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <parse_value+0x1c>
    {
        return false; /* no input */
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e0d2      	b.n	80020f2 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01d      	beq.n	8001f8e <parse_value+0x5e>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	1d1a      	adds	r2, r3, #4
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d816      	bhi.n	8001f8e <parse_value+0x5e>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4413      	add	r3, r2
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4963      	ldr	r1, [pc, #396]	; (80020fc <parse_value+0x1cc>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f00a fe10 	bl	800cb94 <strncmp>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	1d1a      	adds	r2, r3, #4
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	609a      	str	r2, [r3, #8]
        return true;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0b1      	b.n	80020f2 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01d      	beq.n	8001fd0 <parse_value+0xa0>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	1d5a      	adds	r2, r3, #5
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d816      	bhi.n	8001fd0 <parse_value+0xa0>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4413      	add	r3, r2
 8001fac:	2205      	movs	r2, #5
 8001fae:	4954      	ldr	r1, [pc, #336]	; (8002100 <parse_value+0x1d0>)
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00a fdef 	bl	800cb94 <strncmp>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	1d5a      	adds	r2, r3, #5
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	609a      	str	r2, [r3, #8]
        return true;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e090      	b.n	80020f2 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <parse_value+0xe8>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	1d1a      	adds	r2, r3, #4
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d819      	bhi.n	8002018 <parse_value+0xe8>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4413      	add	r3, r2
 8001fee:	2204      	movs	r2, #4
 8001ff0:	4944      	ldr	r1, [pc, #272]	; (8002104 <parse_value+0x1d4>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f00a fdce 	bl	800cb94 <strncmp>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	1d1a      	adds	r2, r3, #4
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	609a      	str	r2, [r3, #8]
        return true;
 8002014:	2301      	movs	r3, #1
 8002016:	e06c      	b.n	80020f2 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d013      	beq.n	8002046 <parse_value+0x116>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d20d      	bcs.n	8002046 <parse_value+0x116>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b22      	cmp	r3, #34	; 0x22
 8002038:	d105      	bne.n	8002046 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fc91 	bl	8001964 <parse_string>
 8002042:	4603      	mov	r3, r0
 8002044:	e055      	b.n	80020f2 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <parse_value+0x164>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d21d      	bcs.n	8002094 <parse_value+0x164>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b2d      	cmp	r3, #45	; 0x2d
 8002066:	d00f      	beq.n	8002088 <parse_value+0x158>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4413      	add	r3, r2
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b2f      	cmp	r3, #47	; 0x2f
 8002076:	d90d      	bls.n	8002094 <parse_value+0x164>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b39      	cmp	r3, #57	; 0x39
 8002086:	d805      	bhi.n	8002094 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002088:	6839      	ldr	r1, [r7, #0]
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff f9f4 	bl	8001478 <parse_number>
 8002090:	4603      	mov	r3, r0
 8002092:	e02e      	b.n	80020f2 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d013      	beq.n	80020c2 <parse_value+0x192>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d20d      	bcs.n	80020c2 <parse_value+0x192>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b5b      	cmp	r3, #91	; 0x5b
 80020b4:	d105      	bne.n	80020c2 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f825 	bl	8002108 <parse_array>
 80020be:	4603      	mov	r3, r0
 80020c0:	e017      	b.n	80020f2 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <parse_value+0x1c0>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d20d      	bcs.n	80020f0 <parse_value+0x1c0>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b7b      	cmp	r3, #123	; 0x7b
 80020e2:	d105      	bne.n	80020f0 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8d2 	bl	8002290 <parse_object>
 80020ec:	4603      	mov	r3, r0
 80020ee:	e000      	b.n	80020f2 <parse_value+0x1c2>
    }

    return false;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0800eacc 	.word	0x0800eacc
 8002100:	0800eaf8 	.word	0x0800eaf8
 8002104:	0800eb00 	.word	0x0800eb00

08002108 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002122:	d301      	bcc.n	8002128 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002124:	2300      	movs	r3, #0
 8002126:	e0af      	b.n	8002288 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b5b      	cmp	r3, #91	; 0x5b
 8002140:	f040 8094 	bne.w	800226c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800214e:	6838      	ldr	r0, [r7, #0]
 8002150:	f7ff fdb8 	bl	8001cc4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <parse_array+0x6e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	d207      	bcs.n	8002176 <parse_array+0x6e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	4413      	add	r3, r2
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b5d      	cmp	r3, #93	; 0x5d
 8002174:	d061      	beq.n	800223a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <parse_array+0x80>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d305      	bcc.n	8002194 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	1e5a      	subs	r2, r3, #1
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	609a      	str	r2, [r3, #8]
        goto fail;
 8002192:	e072      	b.n	800227a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	3310      	adds	r3, #16
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f900 	bl	80013a8 <cJSON_New_Item>
 80021a8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05f      	beq.n	8002270 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	e007      	b.n	80021d0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80021da:	6838      	ldr	r0, [r7, #0]
 80021dc:	f7ff fd72 	bl	8001cc4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	6938      	ldr	r0, [r7, #16]
 80021e4:	f7ff fea4 	bl	8001f30 <parse_value>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d042      	beq.n	8002274 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80021ee:	6838      	ldr	r0, [r7, #0]
 80021f0:	f7ff fd68 	bl	8001cc4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <parse_array+0x10e>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	d207      	bcs.n	8002216 <parse_array+0x10e>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b2c      	cmp	r3, #44	; 0x2c
 8002214:	d0c3      	beq.n	800219e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02d      	beq.n	8002278 <parse_array+0x170>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d227      	bcs.n	8002278 <parse_array+0x170>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4413      	add	r3, r2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b5d      	cmp	r3, #93	; 0x5d
 8002236:	d11f      	bne.n	8002278 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002238:	e000      	b.n	800223c <parse_array+0x134>
        goto success;
 800223a:	bf00      	nop
    input_buffer->depth--;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	1e5a      	subs	r2, r3, #1
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <parse_array+0x14a>
        head->prev = current_item;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2220      	movs	r2, #32
 8002256:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	609a      	str	r2, [r3, #8]

    return true;
 8002268:	2301      	movs	r3, #1
 800226a:	e00d      	b.n	8002288 <parse_array+0x180>
        goto fail;
 800226c:	bf00      	nop
 800226e:	e004      	b.n	800227a <parse_array+0x172>
            goto fail; /* allocation failure */
 8002270:	bf00      	nop
 8002272:	e002      	b.n	800227a <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002274:	bf00      	nop
 8002276:	e000      	b.n	800227a <parse_array+0x172>

fail:
 8002278:	bf00      	nop
    if (head != NULL)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002280:	6978      	ldr	r0, [r7, #20]
 8002282:	f7ff f8a7 	bl	80013d4 <cJSON_Delete>
    }

    return false;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022aa:	d301      	bcc.n	80022b0 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80022ac:	2300      	movs	r3, #0
 80022ae:	e0e6      	b.n	800247e <parse_object+0x1ee>
    }
    input_buffer->depth++;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80d0 	beq.w	8002462 <parse_object+0x1d2>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	f080 80c9 	bcs.w	8002462 <parse_object+0x1d2>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4413      	add	r3, r2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b7b      	cmp	r3, #123	; 0x7b
 80022de:	f040 80c0 	bne.w	8002462 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	f7ff fce9 	bl	8001cc4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <parse_object+0x86>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	d208      	bcs.n	8002316 <parse_object+0x86>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4413      	add	r3, r2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b7d      	cmp	r3, #125	; 0x7d
 8002312:	f000 808d 	beq.w	8002430 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <parse_object+0x98>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	d305      	bcc.n	8002334 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	609a      	str	r2, [r3, #8]
        goto fail;
 8002332:	e09d      	b.n	8002470 <parse_object+0x1e0>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	3310      	adds	r3, #16
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f830 	bl	80013a8 <cJSON_New_Item>
 8002348:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 808a 	beq.w	8002466 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d104      	bne.n	8002362 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	e007      	b.n	8002372 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800237c:	6838      	ldr	r0, [r7, #0]
 800237e:	f7ff fca1 	bl	8001cc4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002382:	6839      	ldr	r1, [r7, #0]
 8002384:	6938      	ldr	r0, [r7, #16]
 8002386:	f7ff faed 	bl	8001964 <parse_string>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d06c      	beq.n	800246a <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002390:	6838      	ldr	r0, [r7, #0]
 8002392:	f7ff fc97 	bl	8001cc4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d05b      	beq.n	8002462 <parse_object+0x1d2>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d255      	bcs.n	8002462 <parse_object+0x1d2>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b3a      	cmp	r3, #58	; 0x3a
 80023c4:	d14d      	bne.n	8002462 <parse_object+0x1d2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80023d0:	6838      	ldr	r0, [r7, #0]
 80023d2:	f7ff fc77 	bl	8001cc4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	6938      	ldr	r0, [r7, #16]
 80023da:	f7ff fda9 	bl	8001f30 <parse_value>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d044      	beq.n	800246e <parse_object+0x1de>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80023e4:	6838      	ldr	r0, [r7, #0]
 80023e6:	f7ff fc6d 	bl	8001cc4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00d      	beq.n	800240c <parse_object+0x17c>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d207      	bcs.n	800240c <parse_object+0x17c>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4413      	add	r3, r2
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b2c      	cmp	r3, #44	; 0x2c
 800240a:	d098      	beq.n	800233e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d027      	beq.n	8002462 <parse_object+0x1d2>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d221      	bcs.n	8002462 <parse_object+0x1d2>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b7d      	cmp	r3, #125	; 0x7d
 800242c:	d119      	bne.n	8002462 <parse_object+0x1d2>
    {
        goto fail; /* expected end of object */
    }

success:
 800242e:	e000      	b.n	8002432 <parse_object+0x1a2>
        goto success; /* empty object */
 8002430:	bf00      	nop
    input_buffer->depth--;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	1e5a      	subs	r2, r3, #1
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <parse_object+0x1b8>
        head->prev = current_item;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2240      	movs	r2, #64	; 0x40
 800244c:	60da      	str	r2, [r3, #12]
    item->child = head;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	609a      	str	r2, [r3, #8]
    return true;
 800245e:	2301      	movs	r3, #1
 8002460:	e00d      	b.n	800247e <parse_object+0x1ee>

fail:
 8002462:	bf00      	nop
 8002464:	e004      	b.n	8002470 <parse_object+0x1e0>
            goto fail; /* allocation failure */
 8002466:	bf00      	nop
 8002468:	e002      	b.n	8002470 <parse_object+0x1e0>
            goto fail; /* failed to parse name */
 800246a:	bf00      	nop
 800246c:	e000      	b.n	8002470 <parse_object+0x1e0>
            goto fail; /* failed to parse value */
 800246e:	bf00      	nop
    if (head != NULL)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <parse_object+0x1ec>
    {
        cJSON_Delete(head);
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7fe ffac 	bl	80013d4 <cJSON_Delete>
    }

    return false;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <get_object_item+0x1c>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <get_object_item+0x20>
    {
        return NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e033      	b.n	800250e <get_object_item+0x88>
    }

    current_element = object->child;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d017      	beq.n	80024e2 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80024b2:	e002      	b.n	80024ba <get_object_item+0x34>
        {
            current_element = current_element->next;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01c      	beq.n	80024fa <get_object_item+0x74>
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d018      	beq.n	80024fa <get_object_item+0x74>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4619      	mov	r1, r3
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	f7fd fea2 	bl	8000218 <strcmp>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ec      	bne.n	80024b4 <get_object_item+0x2e>
 80024da:	e00e      	b.n	80024fa <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <get_object_item+0x74>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4619      	mov	r1, r3
 80024ee:	68b8      	ldr	r0, [r7, #8]
 80024f0:	f7fe feea 	bl	80012c8 <case_insensitive_strcmp>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <get_object_item+0x82>
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <get_object_item+0x86>
        return NULL;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <get_object_item+0x88>
    }

    return current_element;
 800250c:	697b      	ldr	r3, [r7, #20]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002520:	2201      	movs	r2, #1
 8002522:	6839      	ldr	r1, [r7, #0]
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ffae 	bl	8002486 <get_object_item>
 800252a:	4603      	mov	r3, r0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <cJSON_IsNumber+0x12>
    {
        return false;
 8002542:	2300      	movs	r3, #0
 8002544:	e007      	b.n	8002556 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b08      	cmp	r3, #8
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <MX_GPIO_Init+0xcc>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <MX_GPIO_Init+0xcc>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <MX_GPIO_Init+0xcc>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002592:	4b27      	ldr	r3, [pc, #156]	; (8002630 <MX_GPIO_Init+0xcc>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	4a26      	ldr	r2, [pc, #152]	; (8002630 <MX_GPIO_Init+0xcc>)
 8002598:	f043 0320 	orr.w	r3, r3, #32
 800259c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <MX_GPIO_Init+0xcc>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <MX_GPIO_Init+0xcc>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	4a20      	ldr	r2, [pc, #128]	; (8002630 <MX_GPIO_Init+0xcc>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <MX_GPIO_Init+0xcc>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <MX_GPIO_Init+0xcc>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <MX_GPIO_Init+0xcc>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <MX_GPIO_Init+0xcc>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 80025da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025e4:	2302      	movs	r3, #2
 80025e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fa:	f004 f85d 	bl	80066b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80025fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <MX_GPIO_Init+0xd0>)
 8002606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4619      	mov	r1, r3
 8002612:	4809      	ldr	r0, [pc, #36]	; (8002638 <MX_GPIO_Init+0xd4>)
 8002614:	f004 f850 	bl	80066b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	210f      	movs	r1, #15
 800261c:	2028      	movs	r0, #40	; 0x28
 800261e:	f003 ffb0 	bl	8006582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002622:	2028      	movs	r0, #40	; 0x28
 8002624:	f003 ffc7 	bl	80065b6 <HAL_NVIC_EnableIRQ>

}
 8002628:	bf00      	nop
 800262a:	3728      	adds	r7, #40	; 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	10110000 	.word	0x10110000
 8002638:	48000800 	.word	0x48000800

0800263c <start_up>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


void start_up(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0

	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 8002640:	217f      	movs	r1, #127	; 0x7f
 8002642:	4862      	ldr	r0, [pc, #392]	; (80027cc <start_up+0x190>)
 8002644:	f002 ffe6 	bl	8005614 <HAL_ADCEx_Calibration_Start>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <start_up+0x24>
 800264e:	217f      	movs	r1, #127	; 0x7f
 8002650:	485f      	ldr	r0, [pc, #380]	; (80027d0 <start_up+0x194>)
 8002652:	f002 ffdf 	bl	8005614 <HAL_ADCEx_Calibration_Start>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <start_up+0x24>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <start_up+0x26>
 8002660:	2300      	movs	r3, #0
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 80af 	bne.w	80027c6 <start_up+0x18a>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)))
 8002668:	4a5a      	ldr	r2, [pc, #360]	; (80027d4 <start_up+0x198>)
 800266a:	495b      	ldr	r1, [pc, #364]	; (80027d8 <start_up+0x19c>)
 800266c:	485b      	ldr	r0, [pc, #364]	; (80027dc <start_up+0x1a0>)
 800266e:	f004 faf8 	bl	8006c62 <HAL_OPAMPEx_SelfCalibrateAll>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 80a6 	bne.w	80027c6 <start_up+0x18a>
		{

			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 800267a:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <start_up+0x1a4>)
 800267c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 8002682:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <start_up+0x1a4>)
 8002684:	2207      	movs	r2, #7
 8002686:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR1=(TIM1->ARR/10);
 8002688:	4b55      	ldr	r3, [pc, #340]	; (80027e0 <start_up+0x1a4>)
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	4a54      	ldr	r2, [pc, #336]	; (80027e0 <start_up+0x1a4>)
 800268e:	4955      	ldr	r1, [pc, #340]	; (80027e4 <start_up+0x1a8>)
 8002690:	fba1 1303 	umull	r1, r3, r1, r3
 8002694:	08db      	lsrs	r3, r3, #3
 8002696:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=0;
 8002698:	4b51      	ldr	r3, [pc, #324]	; (80027e0 <start_up+0x1a4>)
 800269a:	2200      	movs	r2, #0
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 800269e:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <start_up+0x1a4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4=TIM1_CCR4;
 80026a4:	4b4e      	ldr	r3, [pc, #312]	; (80027e0 <start_up+0x1a4>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	4a4d      	ldr	r2, [pc, #308]	; (80027e0 <start_up+0x1a4>)
 80026aa:	3b0a      	subs	r3, #10
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80026ae:	2100      	movs	r1, #0
 80026b0:	484d      	ldr	r0, [pc, #308]	; (80027e8 <start_up+0x1ac>)
 80026b2:	f005 fe4b 	bl	800834c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80026b6:	2100      	movs	r1, #0
 80026b8:	484b      	ldr	r0, [pc, #300]	; (80027e8 <start_up+0x1ac>)
 80026ba:	f007 fbf7 	bl	8009eac <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80026be:	2104      	movs	r1, #4
 80026c0:	4849      	ldr	r0, [pc, #292]	; (80027e8 <start_up+0x1ac>)
 80026c2:	f005 fe43 	bl	800834c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80026c6:	2104      	movs	r1, #4
 80026c8:	4847      	ldr	r0, [pc, #284]	; (80027e8 <start_up+0x1ac>)
 80026ca:	f007 fbef 	bl	8009eac <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80026ce:	2108      	movs	r1, #8
 80026d0:	4845      	ldr	r0, [pc, #276]	; (80027e8 <start_up+0x1ac>)
 80026d2:	f005 fe3b 	bl	800834c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80026d6:	2108      	movs	r1, #8
 80026d8:	4843      	ldr	r0, [pc, #268]	; (80027e8 <start_up+0x1ac>)
 80026da:	f007 fbe7 	bl	8009eac <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80026de:	210c      	movs	r1, #12
 80026e0:	4841      	ldr	r0, [pc, #260]	; (80027e8 <start_up+0x1ac>)
 80026e2:	f005 fe33 	bl	800834c <HAL_TIM_PWM_Start>


			HAL_Delay(800);
 80026e6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80026ea:	f001 ff75 	bl	80045d8 <HAL_Delay>

			//////// konfiguracja Timer 4 - encoder ///////////////////
			TIM4->ARR= TIM4_ARR;
 80026ee:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <start_up+0x1b0>)
 80026f0:	f240 1267 	movw	r2, #359	; 0x167
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC= TIM4_PSC;
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <start_up+0x1b0>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80026fc:	2100      	movs	r1, #0
 80026fe:	483c      	ldr	r0, [pc, #240]	; (80027f0 <start_up+0x1b4>)
 8002700:	f006 f9c7 	bl	8008a92 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8002704:	2104      	movs	r1, #4
 8002706:	483a      	ldr	r0, [pc, #232]	; (80027f0 <start_up+0x1b4>)
 8002708:	f006 f9c3 	bl	8008a92 <HAL_TIM_Encoder_Start>
			//////// konfiguracja Timer 4 - encoder ///////////////////

			HAL_Delay(400);
 800270c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002710:	f001 ff62 	bl	80045d8 <HAL_Delay>

			TIM1->CCR1=0;
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <start_up+0x1a4>)
 8002716:	2200      	movs	r2, #0
 8002718:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <start_up+0x1a4>)
 800271c:	2200      	movs	r2, #0
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8002720:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <start_up+0x1a4>)
 8002722:	2200      	movs	r2, #0
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c

			HAL_Delay(200);
 8002726:	20c8      	movs	r0, #200	; 0xc8
 8002728:	f001 ff56 	bl	80045d8 <HAL_Delay>


			//////// konfiguracja Timer 8  ///////////////////
			TIM8->ARR= TIM8_ARR;
 800272c:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <start_up+0x1b8>)
 800272e:	f64f 72db 	movw	r2, #65499	; 0xffdb
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM8->PSC= TIM8_PSC;
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <start_up+0x1b8>)
 8002736:	2209      	movs	r2, #9
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 800273a:	2104      	movs	r1, #4
 800273c:	482e      	ldr	r0, [pc, #184]	; (80027f8 <start_up+0x1bc>)
 800273e:	f005 ffcf 	bl	80086e0 <HAL_TIM_IC_Start>


			//////// start ADC 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 8002742:	4826      	ldr	r0, [pc, #152]	; (80027dc <start_up+0x1a0>)
 8002744:	f004 fa22 	bl	8006b8c <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 8002748:	4823      	ldr	r0, [pc, #140]	; (80027d8 <start_up+0x19c>)
 800274a:	f004 fa1f 	bl	8006b8c <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp3);
 800274e:	4821      	ldr	r0, [pc, #132]	; (80027d4 <start_up+0x198>)
 8002750:	f004 fa1c 	bl	8006b8c <HAL_OPAMP_Start>
			//HAL_ADCEx_InjectedStart_IT(&hadc2);



			/////////// inicjalizacja pid_d ////////////////
			set_d=0;
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <start_up+0x1c0>)
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
			pid_d.Kp=1;
 800275c:	4b28      	ldr	r3, [pc, #160]	; (8002800 <start_up+0x1c4>)
 800275e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002762:	619a      	str	r2, [r3, #24]
			pid_d.Ki=1;
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <start_up+0x1c4>)
 8002766:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800276a:	61da      	str	r2, [r3, #28]
			pid_d.Kd=0;
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <start_up+0x1c4>)
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_d, 1);
 8002774:	2101      	movs	r1, #1
 8002776:	4822      	ldr	r0, [pc, #136]	; (8002800 <start_up+0x1c4>)
 8002778:	f009 fe92 	bl	800c4a0 <arm_pid_init_f32>

			/////////// inicjalizacja pid_q ////////////////
			set_q=0.5;
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <start_up+0x1c8>)
 800277e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002782:	601a      	str	r2, [r3, #0]
			pid_q.Kp=4;
 8002784:	4b20      	ldr	r3, [pc, #128]	; (8002808 <start_up+0x1cc>)
 8002786:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800278a:	619a      	str	r2, [r3, #24]
			pid_q.Ki=1;
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <start_up+0x1cc>)
 800278e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002792:	61da      	str	r2, [r3, #28]
			pid_q.Kd=0;
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <start_up+0x1cc>)
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_q, 1);
 800279c:	2101      	movs	r1, #1
 800279e:	481a      	ldr	r0, [pc, #104]	; (8002808 <start_up+0x1cc>)
 80027a0:	f009 fe7e 	bl	800c4a0 <arm_pid_init_f32>

			/////////// inicjalizacja pid_speed ////////////////
			set_speed=2200;
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <start_up+0x1d0>)
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <start_up+0x1d4>)
 80027a8:	601a      	str	r2, [r3, #0]
			pid_iq_speed.Kp=5;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <start_up+0x1d8>)
 80027ac:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <start_up+0x1dc>)
 80027ae:	619a      	str	r2, [r3, #24]
			pid_iq_speed.Ki=5;
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <start_up+0x1d8>)
 80027b2:	4a19      	ldr	r2, [pc, #100]	; (8002818 <start_up+0x1dc>)
 80027b4:	61da      	str	r2, [r3, #28]
			pid_iq_speed.Kd=0;
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <start_up+0x1d8>)
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_iq_speed, 1);
 80027be:	2101      	movs	r1, #1
 80027c0:	4814      	ldr	r0, [pc, #80]	; (8002814 <start_up+0x1d8>)
 80027c2:	f009 fe6d 	bl	800c4a0 <arm_pid_init_f32>
		}


	   }

}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2000028c 	.word	0x2000028c
 80027d0:	20000220 	.word	0x20000220
 80027d4:	200005c0 	.word	0x200005c0
 80027d8:	20000584 	.word	0x20000584
 80027dc:	200005fc 	.word	0x200005fc
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	cccccccd 	.word	0xcccccccd
 80027e8:	200006d0 	.word	0x200006d0
 80027ec:	40000800 	.word	0x40000800
 80027f0:	20000684 	.word	0x20000684
 80027f4:	40013400 	.word	0x40013400
 80027f8:	20000638 	.word	0x20000638
 80027fc:	20000330 	.word	0x20000330
 8002800:	20000334 	.word	0x20000334
 8002804:	2000055c 	.word	0x2000055c
 8002808:	200003e0 	.word	0x200003e0
 800280c:	20000560 	.word	0x20000560
 8002810:	45098000 	.word	0x45098000
 8002814:	20000380 	.word	0x20000380
 8002818:	40a00000 	.word	0x40a00000

0800281c <start1>:

void start1(void)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0

	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 8002822:	217f      	movs	r1, #127	; 0x7f
 8002824:	4872      	ldr	r0, [pc, #456]	; (80029f0 <start1+0x1d4>)
 8002826:	f002 fef5 	bl	8005614 <HAL_ADCEx_Calibration_Start>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <start1+0x26>
 8002830:	217f      	movs	r1, #127	; 0x7f
 8002832:	4870      	ldr	r0, [pc, #448]	; (80029f4 <start1+0x1d8>)
 8002834:	f002 feee 	bl	8005614 <HAL_ADCEx_Calibration_Start>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <start1+0x26>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <start1+0x28>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	f040 80cf 	bne.w	80029e8 <start1+0x1cc>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)))
 800284a:	4a6b      	ldr	r2, [pc, #428]	; (80029f8 <start1+0x1dc>)
 800284c:	496b      	ldr	r1, [pc, #428]	; (80029fc <start1+0x1e0>)
 800284e:	486c      	ldr	r0, [pc, #432]	; (8002a00 <start1+0x1e4>)
 8002850:	f004 fa07 	bl	8006c62 <HAL_OPAMPEx_SelfCalibrateAll>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 80b4 	bne.w	80029c4 <start1+0x1a8>
		{

			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 800285c:	4b69      	ldr	r3, [pc, #420]	; (8002a04 <start1+0x1e8>)
 800285e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 8002864:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <start1+0x1e8>)
 8002866:	2207      	movs	r2, #7
 8002868:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR1=(TIM1->ARR/10);
 800286a:	4b66      	ldr	r3, [pc, #408]	; (8002a04 <start1+0x1e8>)
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	4a65      	ldr	r2, [pc, #404]	; (8002a04 <start1+0x1e8>)
 8002870:	4965      	ldr	r1, [pc, #404]	; (8002a08 <start1+0x1ec>)
 8002872:	fba1 1303 	umull	r1, r3, r1, r3
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=0;
 800287a:	4b62      	ldr	r3, [pc, #392]	; (8002a04 <start1+0x1e8>)
 800287c:	2200      	movs	r2, #0
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8002880:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <start1+0x1e8>)
 8002882:	2200      	movs	r2, #0
 8002884:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4=TIM1_CCR4;
 8002886:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <start1+0x1e8>)
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	4a5e      	ldr	r2, [pc, #376]	; (8002a04 <start1+0x1e8>)
 800288c:	3b0a      	subs	r3, #10
 800288e:	6413      	str	r3, [r2, #64]	; 0x40

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002890:	2100      	movs	r1, #0
 8002892:	485e      	ldr	r0, [pc, #376]	; (8002a0c <start1+0x1f0>)
 8002894:	f005 fd5a 	bl	800834c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002898:	2100      	movs	r1, #0
 800289a:	485c      	ldr	r0, [pc, #368]	; (8002a0c <start1+0x1f0>)
 800289c:	f007 fb06 	bl	8009eac <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80028a0:	2104      	movs	r1, #4
 80028a2:	485a      	ldr	r0, [pc, #360]	; (8002a0c <start1+0x1f0>)
 80028a4:	f005 fd52 	bl	800834c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80028a8:	2104      	movs	r1, #4
 80028aa:	4858      	ldr	r0, [pc, #352]	; (8002a0c <start1+0x1f0>)
 80028ac:	f007 fafe 	bl	8009eac <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80028b0:	2108      	movs	r1, #8
 80028b2:	4856      	ldr	r0, [pc, #344]	; (8002a0c <start1+0x1f0>)
 80028b4:	f005 fd4a 	bl	800834c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80028b8:	2108      	movs	r1, #8
 80028ba:	4854      	ldr	r0, [pc, #336]	; (8002a0c <start1+0x1f0>)
 80028bc:	f007 faf6 	bl	8009eac <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80028c0:	210c      	movs	r1, #12
 80028c2:	4852      	ldr	r0, [pc, #328]	; (8002a0c <start1+0x1f0>)
 80028c4:	f005 fd42 	bl	800834c <HAL_TIM_PWM_Start>


			HAL_Delay(500);
 80028c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028cc:	f001 fe84 	bl	80045d8 <HAL_Delay>

			//////// konfiguracja Timer 4 - encoder ///////////////////
			TIM4->ARR= TIM4_ARR;
 80028d0:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <start1+0x1f4>)
 80028d2:	f240 1267 	movw	r2, #359	; 0x167
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC= TIM4_PSC;
 80028d8:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <start1+0x1f4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80028de:	2100      	movs	r1, #0
 80028e0:	484c      	ldr	r0, [pc, #304]	; (8002a14 <start1+0x1f8>)
 80028e2:	f006 f8d6 	bl	8008a92 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80028e6:	2104      	movs	r1, #4
 80028e8:	484a      	ldr	r0, [pc, #296]	; (8002a14 <start1+0x1f8>)
 80028ea:	f006 f8d2 	bl	8008a92 <HAL_TIM_Encoder_Start>
			//////// konfiguracja Timer 4 - encoder ///////////////////

			HAL_Delay(200);
 80028ee:	20c8      	movs	r0, #200	; 0xc8
 80028f0:	f001 fe72 	bl	80045d8 <HAL_Delay>

			TIM1->CCR1=0;
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <start1+0x1e8>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 80028fa:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <start1+0x1e8>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <start1+0x1e8>)
 8002902:	2200      	movs	r2, #0
 8002904:	63da      	str	r2, [r3, #60]	; 0x3c

			HAL_Delay(200);
 8002906:	20c8      	movs	r0, #200	; 0xc8
 8002908:	f001 fe66 	bl	80045d8 <HAL_Delay>


			//////// konfiguracja Timer 8  ///////////////////
			TIM8->ARR= TIM8_ARR;
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <start1+0x1fc>)
 800290e:	f64f 72db 	movw	r2, #65499	; 0xffdb
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM8->PSC= TIM8_PSC;
 8002914:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <start1+0x1fc>)
 8002916:	2209      	movs	r2, #9
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 800291a:	2104      	movs	r1, #4
 800291c:	483f      	ldr	r0, [pc, #252]	; (8002a1c <start1+0x200>)
 800291e:	f005 fedf 	bl	80086e0 <HAL_TIM_IC_Start>




			/////////// parse JSON ///////////////////////////////
			 cJSON * root = cJSON_Parse((char *)jstring);
 8002922:	483f      	ldr	r0, [pc, #252]	; (8002a20 <start1+0x204>)
 8002924:	f7ff faf6 	bl	8001f14 <cJSON_Parse>
 8002928:	6078      	str	r0, [r7, #4]
			 cJSON * speed = cJSON_GetObjectItemCaseSensitive(root, "speed");
 800292a:	493e      	ldr	r1, [pc, #248]	; (8002a24 <start1+0x208>)
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fdf2 	bl	8002516 <cJSON_GetObjectItemCaseSensitive>
 8002932:	6038      	str	r0, [r7, #0]
			 set_speed =  cJSON_GetNumberValue(speed);
 8002934:	6838      	ldr	r0, [r7, #0]
 8002936:	f7fe fcab 	bl	8001290 <cJSON_GetNumberValue>
 800293a:	ec54 3b10 	vmov	r3, r4, d0
 800293e:	4618      	mov	r0, r3
 8002940:	4621      	mov	r1, r4
 8002942:	f7fe f919 	bl	8000b78 <__aeabi_d2f>
 8002946:	4602      	mov	r2, r0
 8002948:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <start1+0x20c>)
 800294a:	601a      	str	r2, [r3, #0]

		     cJSON_Delete(speed);
 800294c:	6838      	ldr	r0, [r7, #0]
 800294e:	f7fe fd41 	bl	80013d4 <cJSON_Delete>
		     cJSON_Delete(root);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fd3e 	bl	80013d4 <cJSON_Delete>



			/////////// inicjalizacja pid_d ////////////////
			set_d=0;
 8002958:	4b34      	ldr	r3, [pc, #208]	; (8002a2c <start1+0x210>)
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
			pid_d.Kp=1;
 8002960:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <start1+0x214>)
 8002962:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002966:	619a      	str	r2, [r3, #24]
			pid_d.Ki=1;
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <start1+0x214>)
 800296a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800296e:	61da      	str	r2, [r3, #28]
			pid_d.Kd=0;
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <start1+0x214>)
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_d, 1);
 8002978:	2101      	movs	r1, #1
 800297a:	482d      	ldr	r0, [pc, #180]	; (8002a30 <start1+0x214>)
 800297c:	f009 fd90 	bl	800c4a0 <arm_pid_init_f32>

			/////////// inicjalizacja pid_q ////////////////
			set_q=0.5;
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <start1+0x218>)
 8002982:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002986:	601a      	str	r2, [r3, #0]
			pid_q.Kp=4;
 8002988:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <start1+0x21c>)
 800298a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800298e:	619a      	str	r2, [r3, #24]
			pid_q.Ki=1;
 8002990:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <start1+0x21c>)
 8002992:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002996:	61da      	str	r2, [r3, #28]
			pid_q.Kd=0;
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <start1+0x21c>)
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_q, 1);
 80029a0:	2101      	movs	r1, #1
 80029a2:	4825      	ldr	r0, [pc, #148]	; (8002a38 <start1+0x21c>)
 80029a4:	f009 fd7c 	bl	800c4a0 <arm_pid_init_f32>

			/////////// inicjalizacja pid_speed ////////////////

			pid_iq_speed.Kp=5;
 80029a8:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <start1+0x220>)
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <start1+0x224>)
 80029ac:	619a      	str	r2, [r3, #24]
			pid_iq_speed.Ki=5;
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <start1+0x220>)
 80029b0:	4a23      	ldr	r2, [pc, #140]	; (8002a40 <start1+0x224>)
 80029b2:	61da      	str	r2, [r3, #28]
			pid_iq_speed.Kd=0;
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <start1+0x220>)
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_iq_speed, 1);
 80029bc:	2101      	movs	r1, #1
 80029be:	481f      	ldr	r0, [pc, #124]	; (8002a3c <start1+0x220>)
 80029c0:	f009 fd6e 	bl	800c4a0 <arm_pid_init_f32>
		}


		//////// start ADC 1 2 ///////////////////////////////////
		HAL_OPAMP_Start(&hopamp1);
 80029c4:	480e      	ldr	r0, [pc, #56]	; (8002a00 <start1+0x1e4>)
 80029c6:	f004 f8e1 	bl	8006b8c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(&hopamp2);
 80029ca:	480c      	ldr	r0, [pc, #48]	; (80029fc <start1+0x1e0>)
 80029cc:	f004 f8de 	bl	8006b8c <HAL_OPAMP_Start>
		HAL_OPAMP_Start(&hopamp3);
 80029d0:	4809      	ldr	r0, [pc, #36]	; (80029f8 <start1+0x1dc>)
 80029d2:	f004 f8db 	bl	8006b8c <HAL_OPAMP_Start>
		//////// start ADC 1 2 ///////////////////////////////////
		index_event_adc=0;
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <start1+0x228>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 80029dc:	4804      	ldr	r0, [pc, #16]	; (80029f0 <start1+0x1d4>)
 80029de:	f002 febd 	bl	800575c <HAL_ADCEx_InjectedStart_IT>
		HAL_ADCEx_InjectedStart_IT(&hadc2);
 80029e2:	4804      	ldr	r0, [pc, #16]	; (80029f4 <start1+0x1d8>)
 80029e4:	f002 feba 	bl	800575c <HAL_ADCEx_InjectedStart_IT>


	   }

}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd90      	pop	{r4, r7, pc}
 80029f0:	2000028c 	.word	0x2000028c
 80029f4:	20000220 	.word	0x20000220
 80029f8:	200005c0 	.word	0x200005c0
 80029fc:	20000584 	.word	0x20000584
 8002a00:	200005fc 	.word	0x200005fc
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	cccccccd 	.word	0xcccccccd
 8002a0c:	200006d0 	.word	0x200006d0
 8002a10:	40000800 	.word	0x40000800
 8002a14:	20000684 	.word	0x20000684
 8002a18:	40013400 	.word	0x40013400
 8002a1c:	20000638 	.word	0x20000638
 8002a20:	20000438 	.word	0x20000438
 8002a24:	0800eb08 	.word	0x0800eb08
 8002a28:	20000560 	.word	0x20000560
 8002a2c:	20000330 	.word	0x20000330
 8002a30:	20000334 	.word	0x20000334
 8002a34:	2000055c 	.word	0x2000055c
 8002a38:	200003e0 	.word	0x200003e0
 8002a3c:	20000380 	.word	0x20000380
 8002a40:	40a00000 	.word	0x40a00000
 8002a44:	20000540 	.word	0x20000540

08002a48 <stop>:

void stop(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4830      	ldr	r0, [pc, #192]	; (8002b10 <stop+0xc8>)
 8002a50:	f005 fd4e 	bl	80084f0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002a54:	2100      	movs	r1, #0
 8002a56:	482e      	ldr	r0, [pc, #184]	; (8002b10 <stop+0xc8>)
 8002a58:	f007 faa8 	bl	8009fac <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	482c      	ldr	r0, [pc, #176]	; (8002b10 <stop+0xc8>)
 8002a60:	f005 fd46 	bl	80084f0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002a64:	2104      	movs	r1, #4
 8002a66:	482a      	ldr	r0, [pc, #168]	; (8002b10 <stop+0xc8>)
 8002a68:	f007 faa0 	bl	8009fac <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	4828      	ldr	r0, [pc, #160]	; (8002b10 <stop+0xc8>)
 8002a70:	f005 fd3e 	bl	80084f0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8002a74:	2108      	movs	r1, #8
 8002a76:	4826      	ldr	r0, [pc, #152]	; (8002b10 <stop+0xc8>)
 8002a78:	f007 fa98 	bl	8009fac <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8002a7c:	210c      	movs	r1, #12
 8002a7e:	4824      	ldr	r0, [pc, #144]	; (8002b10 <stop+0xc8>)
 8002a80:	f005 fd36 	bl	80084f0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 8002a84:	210c      	movs	r1, #12
 8002a86:	4822      	ldr	r0, [pc, #136]	; (8002b10 <stop+0xc8>)
 8002a88:	f007 fa90 	bl	8009fac <HAL_TIMEx_PWMN_Stop>

	TIM1->CCR1=0;
 8002a8c:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <stop+0xcc>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=0;
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <stop+0xcc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=0;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <stop+0xcc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_1);
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	481d      	ldr	r0, [pc, #116]	; (8002b18 <stop+0xd0>)
 8002aa2:	f006 f883 	bl	8008bac <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_2);
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	481b      	ldr	r0, [pc, #108]	; (8002b18 <stop+0xd0>)
 8002aaa:	f006 f87f 	bl	8008bac <HAL_TIM_Encoder_Stop>
	TIM4->CCR1=0;
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <stop+0xd4>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=0;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <stop+0xd4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3=0;
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <stop+0xd4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_IC_Stop(&htim8, TIM_CHANNEL_2);
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	4817      	ldr	r0, [pc, #92]	; (8002b20 <stop+0xd8>)
 8002ac4:	f005 fece 	bl	8008864 <HAL_TIM_IC_Stop>
	TIM8->CCR1=0;
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <stop+0xdc>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR2=0;
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <stop+0xdc>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_reset_f32(&pid_d);
 8002ad4:	4814      	ldr	r0, [pc, #80]	; (8002b28 <stop+0xe0>)
 8002ad6:	f009 fd19 	bl	800c50c <arm_pid_reset_f32>
	arm_pid_reset_f32(&pid_q);
 8002ada:	4814      	ldr	r0, [pc, #80]	; (8002b2c <stop+0xe4>)
 8002adc:	f009 fd16 	bl	800c50c <arm_pid_reset_f32>
	arm_pid_reset_f32(&pid_iq_speed);
 8002ae0:	4813      	ldr	r0, [pc, #76]	; (8002b30 <stop+0xe8>)
 8002ae2:	f009 fd13 	bl	800c50c <arm_pid_reset_f32>

	index_event_adc=0;
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <stop+0xec>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

	HAL_ADCEx_InjectedStop(&hadc1);
 8002aec:	4812      	ldr	r0, [pc, #72]	; (8002b38 <stop+0xf0>)
 8002aee:	f002 fdf3 	bl	80056d8 <HAL_ADCEx_InjectedStop>
	HAL_ADCEx_InjectedStop(&hadc2);
 8002af2:	4812      	ldr	r0, [pc, #72]	; (8002b3c <stop+0xf4>)
 8002af4:	f002 fdf0 	bl	80056d8 <HAL_ADCEx_InjectedStop>

	HAL_OPAMP_Stop(&hopamp1);
 8002af8:	4811      	ldr	r0, [pc, #68]	; (8002b40 <stop+0xf8>)
 8002afa:	f004 f878 	bl	8006bee <HAL_OPAMP_Stop>
	HAL_OPAMP_Stop(&hopamp2);
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <stop+0xfc>)
 8002b00:	f004 f875 	bl	8006bee <HAL_OPAMP_Stop>
	HAL_OPAMP_Stop(&hopamp3);
 8002b04:	4810      	ldr	r0, [pc, #64]	; (8002b48 <stop+0x100>)
 8002b06:	f004 f872 	bl	8006bee <HAL_OPAMP_Stop>

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200006d0 	.word	0x200006d0
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	20000684 	.word	0x20000684
 8002b1c:	40000800 	.word	0x40000800
 8002b20:	20000638 	.word	0x20000638
 8002b24:	40013400 	.word	0x40013400
 8002b28:	20000334 	.word	0x20000334
 8002b2c:	200003e0 	.word	0x200003e0
 8002b30:	20000380 	.word	0x20000380
 8002b34:	20000540 	.word	0x20000540
 8002b38:	2000028c 	.word	0x2000028c
 8002b3c:	20000220 	.word	0x20000220
 8002b40:	200005fc 	.word	0x200005fc
 8002b44:	20000584 	.word	0x20000584
 8002b48:	200005c0 	.word	0x200005c0
 8002b4c:	00000000 	.word	0x00000000

08002b50 <AlphaBeta_To_Angle_Vref>:

void AlphaBeta_To_Angle_Vref(float32_t alpha,float32_t beta,float32_t *angle_current_rad,float32_t *Vref)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b5a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	*angle_current_rad = atan2f(beta,alpha);
 8002b62:	edd7 0a03 	vldr	s1, [r7, #12]
 8002b66:	ed97 0a02 	vldr	s0, [r7, #8]
 8002b6a:	f00b fdba 	bl	800e6e2 <atan2f>
 8002b6e:	eef0 7a40 	vmov.f32	s15, s0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32( ((alpha*alpha)+(beta*beta)), Vref);
 8002b78:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b84:	edd7 6a02 	vldr	s13, [r7, #8]
 8002b88:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b94:	edc7 7a05 	vstr	s15, [r7, #20]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002b9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ba0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba8:	db09      	blt.n	8002bbe <AlphaBeta_To_Angle_Vref+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002baa:	ed97 0a05 	vldr	s0, [r7, #20]
 8002bae:	f00b fd9b 	bl	800e6e8 <sqrtf>
 8002bb2:	eef0 7a40 	vmov.f32	s15, s0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	edc3 7a00 	vstr	s15, [r3]
 8002bbc:	e003      	b.n	8002bc6 <AlphaBeta_To_Angle_Vref+0x76>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

	 if(*Vref>=sv_Vdc_limit)  // saturacja Vref
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fc9a 	bl	8000504 <__aeabi_f2d>
 8002bd0:	a308      	add	r3, pc, #32	; (adr r3, 8002bf4 <AlphaBeta_To_Angle_Vref+0xa4>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	f7fd ff73 	bl	8000ac0 <__aeabi_dcmpge>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d100      	bne.n	8002be2 <AlphaBeta_To_Angle_Vref+0x92>
	    	*Vref=sv_Vdc_limit;
}
 8002be0:	e002      	b.n	8002be8 <AlphaBeta_To_Angle_Vref+0x98>
	    	*Vref=sv_Vdc_limit;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	4a02      	ldr	r2, [pc, #8]	; (8002bf0 <AlphaBeta_To_Angle_Vref+0xa0>)
 8002be6:	601a      	str	r2, [r3, #0]
}
 8002be8:	bf00      	nop
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	415db3d0 	.word	0x415db3d0
 8002bf4:	0f9096bc 	.word	0x0f9096bc
 8002bf8:	402bb67a 	.word	0x402bb67a
 8002bfc:	00000000 	.word	0x00000000

08002c00 <Angle_To_Sector>:


void Angle_To_Sector(float32_t angle_current_rad,uint8_t *sector)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c0a:	6038      	str	r0, [r7, #0]

	if((angle_current_rad>0) && (angle_current_rad<=1.047197)) // pi/3
 8002c0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c18:	dd0e      	ble.n	8002c38 <Angle_To_Sector+0x38>
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fc72 	bl	8000504 <__aeabi_f2d>
 8002c20:	a347      	add	r3, pc, #284	; (adr r3, 8002d40 <Angle_To_Sector+0x140>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd ff41 	bl	8000aac <__aeabi_dcmple>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <Angle_To_Sector+0x38>
		*sector=1;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e07f      	b.n	8002d38 <Angle_To_Sector+0x138>
	else if((angle_current_rad>1.047197) && (angle_current_rad<=2.094395)) //2/3*pi
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fd fc63 	bl	8000504 <__aeabi_f2d>
 8002c3e:	a340      	add	r3, pc, #256	; (adr r3, 8002d40 <Angle_To_Sector+0x140>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd ff46 	bl	8000ad4 <__aeabi_dcmpgt>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <Angle_To_Sector+0x6c>
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd fc58 	bl	8000504 <__aeabi_f2d>
 8002c54:	a33c      	add	r3, pc, #240	; (adr r3, 8002d48 <Angle_To_Sector+0x148>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	f7fd ff27 	bl	8000aac <__aeabi_dcmple>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <Angle_To_Sector+0x6c>
		*sector=2;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2202      	movs	r2, #2
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e065      	b.n	8002d38 <Angle_To_Sector+0x138>
	else if((angle_current_rad>2.094395) && (angle_current_rad<=3.141593))
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fd fc49 	bl	8000504 <__aeabi_f2d>
 8002c72:	a335      	add	r3, pc, #212	; (adr r3, 8002d48 <Angle_To_Sector+0x148>)
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f7fd ff2c 	bl	8000ad4 <__aeabi_dcmpgt>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00e      	beq.n	8002ca0 <Angle_To_Sector+0xa0>
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fd fc3e 	bl	8000504 <__aeabi_f2d>
 8002c88:	a331      	add	r3, pc, #196	; (adr r3, 8002d50 <Angle_To_Sector+0x150>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f7fd ff0d 	bl	8000aac <__aeabi_dcmple>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <Angle_To_Sector+0xa0>
		*sector=3;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e04b      	b.n	8002d38 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-3.141593) && (angle_current_rad<=-2.094395))
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7fd fc2f 	bl	8000504 <__aeabi_f2d>
 8002ca6:	a32c      	add	r3, pc, #176	; (adr r3, 8002d58 <Angle_To_Sector+0x158>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd ff12 	bl	8000ad4 <__aeabi_dcmpgt>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00e      	beq.n	8002cd4 <Angle_To_Sector+0xd4>
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd fc24 	bl	8000504 <__aeabi_f2d>
 8002cbc:	a328      	add	r3, pc, #160	; (adr r3, 8002d60 <Angle_To_Sector+0x160>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd fef3 	bl	8000aac <__aeabi_dcmple>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <Angle_To_Sector+0xd4>
		*sector=4;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2204      	movs	r2, #4
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e031      	b.n	8002d38 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-2.094395) && (angle_current_rad<=-1.047197))
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7fd fc15 	bl	8000504 <__aeabi_f2d>
 8002cda:	a321      	add	r3, pc, #132	; (adr r3, 8002d60 <Angle_To_Sector+0x160>)
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	f7fd fef8 	bl	8000ad4 <__aeabi_dcmpgt>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00e      	beq.n	8002d08 <Angle_To_Sector+0x108>
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fc0a 	bl	8000504 <__aeabi_f2d>
 8002cf0:	a31d      	add	r3, pc, #116	; (adr r3, 8002d68 <Angle_To_Sector+0x168>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f7fd fed9 	bl	8000aac <__aeabi_dcmple>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <Angle_To_Sector+0x108>
		*sector=5;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2205      	movs	r2, #5
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e017      	b.n	8002d38 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7fd fbfb 	bl	8000504 <__aeabi_f2d>
 8002d0e:	a316      	add	r3, pc, #88	; (adr r3, 8002d68 <Angle_To_Sector+0x168>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	f7fd fede 	bl	8000ad4 <__aeabi_dcmpgt>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d100      	bne.n	8002d20 <Angle_To_Sector+0x120>
		*sector=6;
	else{}

}
 8002d1e:	e00b      	b.n	8002d38 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8002d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	d900      	bls.n	8002d30 <Angle_To_Sector+0x130>
}
 8002d2e:	e003      	b.n	8002d38 <Angle_To_Sector+0x138>
		*sector=6;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2206      	movs	r2, #6
 8002d34:	701a      	strb	r2, [r3, #0]
}
 8002d36:	e7ff      	b.n	8002d38 <Angle_To_Sector+0x138>
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	a437824d 	.word	0xa437824d
 8002d44:	3ff0c151 	.word	0x3ff0c151
 8002d48:	2a6f3f53 	.word	0x2a6f3f53
 8002d4c:	4000c152 	.word	0x4000c152
 8002d50:	82c2bd7f 	.word	0x82c2bd7f
 8002d54:	400921fb 	.word	0x400921fb
 8002d58:	82c2bd7f 	.word	0x82c2bd7f
 8002d5c:	c00921fb 	.word	0xc00921fb
 8002d60:	2a6f3f53 	.word	0x2a6f3f53
 8002d64:	c000c152 	.word	0xc000c152
 8002d68:	a437824d 	.word	0xa437824d
 8002d6c:	bff0c151 	.word	0xbff0c151

08002d70 <SVPWM>:


void SVPWM(uint8_t sector,float32_t angle_current_rad,float32_t Vref, float32_t T[], float32_t T_gate[], float32_t *S1,float32_t *S2,float32_t *S3)
{
 8002d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	ed87 0a04 	vstr	s0, [r7, #16]
 8002d7c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]

	T[1]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((sector * 1.047197) - (angle_current_rad)); /// pi/3 = 1,0472
 8002d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d8e:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8003068 <SVPWM+0x2f8>
 8002d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d96:	ee17 0a90 	vmov	r0, s15
 8002d9a:	f7fd fbb3 	bl	8000504 <__aeabi_f2d>
 8002d9e:	a3ac      	add	r3, pc, #688	; (adr r3, 8003050 <SVPWM+0x2e0>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f7fd fd30 	bl	8000808 <__aeabi_ddiv>
 8002da8:	4603      	mov	r3, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	4618      	mov	r0, r3
 8002dae:	4621      	mov	r1, r4
 8002db0:	a3a9      	add	r3, pc, #676	; (adr r3, 8003058 <SVPWM+0x2e8>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f7fd fbfd 	bl	80005b4 <__aeabi_dmul>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	4625      	mov	r5, r4
 8002dc0:	461c      	mov	r4, r3
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fb8b 	bl	80004e0 <__aeabi_i2d>
 8002dca:	a3a5      	add	r3, pc, #660	; (adr r3, 8003060 <SVPWM+0x2f0>)
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f7fd fbf0 	bl	80005b4 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4690      	mov	r8, r2
 8002dda:	4699      	mov	r9, r3
 8002ddc:	6938      	ldr	r0, [r7, #16]
 8002dde:	f7fd fb91 	bl	8000504 <__aeabi_f2d>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4640      	mov	r0, r8
 8002de8:	4649      	mov	r1, r9
 8002dea:	f7fd fa2b 	bl	8000244 <__aeabi_dsub>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd febf 	bl	8000b78 <__aeabi_d2f>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	ee00 3a10 	vmov	s0, r3
 8002e00:	f009 fd0e 	bl	800c820 <arm_sin_f32>
 8002e04:	ee10 3a10 	vmov	r3, s0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fb7b 	bl	8000504 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd fbcd 	bl	80005b4 <__aeabi_dmul>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4622      	mov	r2, r4
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1d1c      	adds	r4, r3, #4
 8002e26:	4608      	mov	r0, r1
 8002e28:	4611      	mov	r1, r2
 8002e2a:	f7fd fea5 	bl	8000b78 <__aeabi_d2f>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6023      	str	r3, [r4, #0]
	T[2]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((-(sector-1) * 1.047197) +  angle_current_rad) ;
 8002e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e36:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003068 <SVPWM+0x2f8>
 8002e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3e:	ee17 0a90 	vmov	r0, s15
 8002e42:	f7fd fb5f 	bl	8000504 <__aeabi_f2d>
 8002e46:	a382      	add	r3, pc, #520	; (adr r3, 8003050 <SVPWM+0x2e0>)
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	f7fd fcdc 	bl	8000808 <__aeabi_ddiv>
 8002e50:	4603      	mov	r3, r0
 8002e52:	460c      	mov	r4, r1
 8002e54:	4618      	mov	r0, r3
 8002e56:	4621      	mov	r1, r4
 8002e58:	a37f      	add	r3, pc, #508	; (adr r3, 8003058 <SVPWM+0x2e8>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd fba9 	bl	80005b4 <__aeabi_dmul>
 8002e62:	4603      	mov	r3, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	4625      	mov	r5, r4
 8002e68:	461c      	mov	r4, r3
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	f1c3 0301 	rsb	r3, r3, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fb35 	bl	80004e0 <__aeabi_i2d>
 8002e76:	a37a      	add	r3, pc, #488	; (adr r3, 8003060 <SVPWM+0x2f0>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fb9a 	bl	80005b4 <__aeabi_dmul>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	6938      	ldr	r0, [r7, #16]
 8002e8a:	f7fd fb3b 	bl	8000504 <__aeabi_f2d>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4640      	mov	r0, r8
 8002e94:	4649      	mov	r1, r9
 8002e96:	f7fd f9d7 	bl	8000248 <__adddf3>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f7fd fe69 	bl	8000b78 <__aeabi_d2f>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	ee00 3a10 	vmov	s0, r3
 8002eac:	f009 fcb8 	bl	800c820 <arm_sin_f32>
 8002eb0:	ee10 3a10 	vmov	r3, s0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fb25 	bl	8000504 <__aeabi_f2d>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7fd fb77 	bl	80005b4 <__aeabi_dmul>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	460c      	mov	r4, r1
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4622      	mov	r2, r4
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f103 0408 	add.w	r4, r3, #8
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	f7fd fe4e 	bl	8000b78 <__aeabi_d2f>
 8002edc:	4603      	mov	r3, r0
 8002ede:	6023      	str	r3, [r4, #0]
	T[0]=sv_Tz-T[1]-T[2];
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003068 <SVPWM+0x2f8>
 8002eec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	edc3 7a00 	vstr	s15, [r3]

	t1=T[1];
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4a59      	ldr	r2, [pc, #356]	; (800306c <SVPWM+0x2fc>)
 8002f08:	6013      	str	r3, [r2, #0]
	t2=T[2];
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	4a58      	ldr	r2, [pc, #352]	; (8003070 <SVPWM+0x300>)
 8002f10:	6013      	str	r3, [r2, #0]
	t3=T[0];
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a57      	ldr	r2, [pc, #348]	; (8003074 <SVPWM+0x304>)
 8002f18:	6013      	str	r3, [r2, #0]

	T_gate[0]= (T[0]/2);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	ed93 7a00 	vldr	s14, [r3]
 8002f20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	edc3 7a00 	vstr	s15, [r3]
	T_gate[1]= T[1]+(T_gate[0]);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3304      	adds	r3, #4
 8002f32:	ed93 7a00 	vldr	s14, [r3]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f44:	edc3 7a00 	vstr	s15, [r3]
	T_gate[2]= T[2]+(T_gate[0]);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	ed93 7a00 	vldr	s14, [r3]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
	T_gate[3]= T[1]+T[2]+(T_gate[0]);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3304      	adds	r3, #4
 8002f66:	ed93 7a00 	vldr	s14, [r3]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	edd3 7a00 	vldr	s15, [r3]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f84:	edc3 7a00 	vstr	s15, [r3]


	if(sector == 1)
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10c      	bne.n	8002fa8 <SVPWM+0x238>
	{
		*S1=T_gate[3];
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	601a      	str	r2, [r3, #0]
		*S2=T_gate[2];
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
		*S3=T_gate[1];
	}
	else{}

}
 8002fa6:	e04e      	b.n	8003046 <SVPWM+0x2d6>
	else if(sector == 2)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d10c      	bne.n	8002fc8 <SVPWM+0x258>
		*S1=T_gate[1];
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	e03e      	b.n	8003046 <SVPWM+0x2d6>
	else if(sector == 3)
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d10c      	bne.n	8002fe8 <SVPWM+0x278>
		*S1=T_gate[0];
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	601a      	str	r2, [r3, #0]
		*S3=T_gate[2];
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe4:	601a      	str	r2, [r3, #0]
}
 8002fe6:	e02e      	b.n	8003046 <SVPWM+0x2d6>
	else if(sector == 4)
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d10c      	bne.n	8003008 <SVPWM+0x298>
		*S1=T_gate[0];
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	601a      	str	r2, [r3, #0]
		*S2=T_gate[1];
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003004:	601a      	str	r2, [r3, #0]
}
 8003006:	e01e      	b.n	8003046 <SVPWM+0x2d6>
	else if(sector == 5)
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d10c      	bne.n	8003028 <SVPWM+0x2b8>
		*S1=T_gate[2];
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	601a      	str	r2, [r3, #0]
}
 8003026:	e00e      	b.n	8003046 <SVPWM+0x2d6>
	else if(sector == 6)
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	2b06      	cmp	r3, #6
 800302c:	d10b      	bne.n	8003046 <SVPWM+0x2d6>
		*S1=T_gate[3];
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	601a      	str	r2, [r3, #0]
		*S3=T_gate[1];
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003044:	601a      	str	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003050:	0f9096bc 	.word	0x0f9096bc
 8003054:	402bb67a 	.word	0x402bb67a
 8003058:	33333333 	.word	0x33333333
 800305c:	3feb3333 	.word	0x3feb3333
 8003060:	a437824d 	.word	0xa437824d
 8003064:	3ff0c151 	.word	0x3ff0c151
 8003068:	447a0000 	.word	0x447a0000
 800306c:	20000418 	.word	0x20000418
 8003070:	2000036c 	.word	0x2000036c
 8003074:	20000300 	.word	0x20000300

08003078 <HAL_ADCEx_InjectedConvCpltCallback>:


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b09f      	sub	sp, #124	; 0x7c
 800307c:	af02      	add	r7, sp, #8
 800307e:	6078      	str	r0, [r7, #4]
	capture_tim8_ccr2= TIM8->CCR2;
 8003080:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	4a47      	ldr	r2, [pc, #284]	; (80031a4 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8003086:	6013      	str	r3, [r2, #0]
	if(capture_tim8_ccr2 <= 0)
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <HAL_ADCEx_InjectedConvCpltCallback+0x22>
		speed=0;
 8003090:	4b45      	ldr	r3, [pc, #276]	; (80031a8 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e016      	b.n	80030c8 <HAL_ADCEx_InjectedConvCpltCallback+0x50>
	else
		speed=revolution_per_min/capture_tim8_ccr2;
 800309a:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fa0e 	bl	80004c0 <__aeabi_ui2d>
 80030a4:	4603      	mov	r3, r0
 80030a6:	460c      	mov	r4, r1
 80030a8:	461a      	mov	r2, r3
 80030aa:	4623      	mov	r3, r4
 80030ac:	a13a      	add	r1, pc, #232	; (adr r1, 8003198 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 80030ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030b2:	f7fd fba9 	bl	8000808 <__aeabi_ddiv>
 80030b6:	4603      	mov	r3, r0
 80030b8:	460c      	mov	r4, r1
 80030ba:	4618      	mov	r0, r3
 80030bc:	4621      	mov	r1, r4
 80030be:	f7fd fd5b 	bl	8000b78 <__aeabi_d2f>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 80030c6:	601a      	str	r2, [r3, #0]


	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80030c8:	2109      	movs	r1, #9
 80030ca:	4838      	ldr	r0, [pc, #224]	; (80031ac <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 80030cc:	f002 fc2c 	bl	8005928 <HAL_ADCEx_InjectedGetValue>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 80030d6:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 80030d8:	bf00      	nop
 80030da:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a32      	ldr	r2, [pc, #200]	; (80031ac <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f5      	bne.n	80030da <HAL_ADCEx_InjectedConvCpltCallback+0x62>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80030ee:	f240 110f 	movw	r1, #271	; 0x10f
 80030f2:	482e      	ldr	r0, [pc, #184]	; (80031ac <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 80030f4:	f002 fc18 	bl	8005928 <HAL_ADCEx_InjectedGetValue>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 80030fe:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8003100:	bf00      	nop
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a28      	ldr	r2, [pc, #160]	; (80031ac <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f5      	bne.n	8003102 <HAL_ADCEx_InjectedConvCpltCallback+0x8a>
	adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8003116:	2109      	movs	r1, #9
 8003118:	4827      	ldr	r0, [pc, #156]	; (80031b8 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 800311a:	f002 fc05 	bl	8005928 <HAL_ADCEx_InjectedGetValue>
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	4b26      	ldr	r3, [pc, #152]	; (80031bc <HAL_ADCEx_InjectedConvCpltCallback+0x144>)
 8003124:	601a      	str	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8003126:	bf00      	nop
 8003128:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f5      	bne.n	8003128 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>
	//adc_V =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
	//while((hadc2.Instance->ISR &= (0x1<<5))!=0){}

	if(index_event_adc<300)
 800313c:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003144:	d211      	bcs.n	800316a <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
	{
		Ia=0;
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <HAL_ADCEx_InjectedConvCpltCallback+0x14c>)
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
		Ib=0;
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <HAL_ADCEx_InjectedConvCpltCallback+0x150>)
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
		Ic=0;
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_ADCEx_InjectedConvCpltCallback+0x154>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
		index_event_adc++;
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e2fa      	b.n	8003760 <HAL_ADCEx_InjectedConvCpltCallback+0x6e8>


	}
	else if(index_event_adc == 300)
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003172:	d133      	bne.n	80031dc <HAL_ADCEx_InjectedConvCpltCallback+0x164>
	{
			   offset1=adc_Ia;
 8003174:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <HAL_ADCEx_InjectedConvCpltCallback+0x158>)
 800317a:	6013      	str	r3, [r2, #0]
			   offset2=adc_Ib;
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_ADCEx_InjectedConvCpltCallback+0x144>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_ADCEx_InjectedConvCpltCallback+0x15c>)
 8003182:	6013      	str	r3, [r2, #0]
			   offset3=adc_Ic;
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_ADCEx_InjectedConvCpltCallback+0x13c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <HAL_ADCEx_InjectedConvCpltCallback+0x160>)
 800318a:	6013      	str	r3, [r2, #0]
			   index_event_adc++;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e2e3      	b.n	8003760 <HAL_ADCEx_InjectedConvCpltCallback+0x6e8>
 8003198:	aaaaaaab 	.word	0xaaaaaaab
 800319c:	41359dda 	.word	0x41359dda
 80031a0:	40013400 	.word	0x40013400
 80031a4:	200002fc 	.word	0x200002fc
 80031a8:	20000548 	.word	0x20000548
 80031ac:	2000028c 	.word	0x2000028c
 80031b0:	200003d4 	.word	0x200003d4
 80031b4:	20000558 	.word	0x20000558
 80031b8:	20000220 	.word	0x20000220
 80031bc:	2000032c 	.word	0x2000032c
 80031c0:	20000540 	.word	0x20000540
 80031c4:	20000310 	.word	0x20000310
 80031c8:	200003d0 	.word	0x200003d0
 80031cc:	20000420 	.word	0x20000420
 80031d0:	20000324 	.word	0x20000324
 80031d4:	20000374 	.word	0x20000374
 80031d8:	2000056c 	.word	0x2000056c
	}
	else
	{
	 //   sum_currents=(adc_Ia-offset1)+(adc_Ic-offset3)+(adc_Ib-offset2);

	    adc_Ia=(adc_Ia-offset1);
 80031dc:	4bb0      	ldr	r3, [pc, #704]	; (80034a0 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4bb0      	ldr	r3, [pc, #704]	; (80034a4 <HAL_ADCEx_InjectedConvCpltCallback+0x42c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	4aae      	ldr	r2, [pc, #696]	; (80034a0 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 80031e8:	6013      	str	r3, [r2, #0]
	    adc_Ib=(adc_Ib-offset2);
 80031ea:	4baf      	ldr	r3, [pc, #700]	; (80034a8 <HAL_ADCEx_InjectedConvCpltCallback+0x430>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4baf      	ldr	r3, [pc, #700]	; (80034ac <HAL_ADCEx_InjectedConvCpltCallback+0x434>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	4aac      	ldr	r2, [pc, #688]	; (80034a8 <HAL_ADCEx_InjectedConvCpltCallback+0x430>)
 80031f6:	6013      	str	r3, [r2, #0]
	    adc_Ic=(adc_Ic-offset3);
 80031f8:	4bad      	ldr	r3, [pc, #692]	; (80034b0 <HAL_ADCEx_InjectedConvCpltCallback+0x438>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4bad      	ldr	r3, [pc, #692]	; (80034b4 <HAL_ADCEx_InjectedConvCpltCallback+0x43c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	4aab      	ldr	r2, [pc, #684]	; (80034b0 <HAL_ADCEx_InjectedConvCpltCallback+0x438>)
 8003204:	6013      	str	r3, [r2, #0]

	    Ia=-adc_Ia/33.0;
 8003206:	4ba6      	ldr	r3, [pc, #664]	; (80034a0 <HAL_ADCEx_InjectedConvCpltCallback+0x428>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	425b      	negs	r3, r3
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f967 	bl	80004e0 <__aeabi_i2d>
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	4ba8      	ldr	r3, [pc, #672]	; (80034b8 <HAL_ADCEx_InjectedConvCpltCallback+0x440>)
 8003218:	f7fd faf6 	bl	8000808 <__aeabi_ddiv>
 800321c:	4603      	mov	r3, r0
 800321e:	460c      	mov	r4, r1
 8003220:	4618      	mov	r0, r3
 8003222:	4621      	mov	r1, r4
 8003224:	f7fd fca8 	bl	8000b78 <__aeabi_d2f>
 8003228:	4602      	mov	r2, r0
 800322a:	4ba4      	ldr	r3, [pc, #656]	; (80034bc <HAL_ADCEx_InjectedConvCpltCallback+0x444>)
 800322c:	601a      	str	r2, [r3, #0]
	    Ib=-adc_Ib/33.0;
 800322e:	4b9e      	ldr	r3, [pc, #632]	; (80034a8 <HAL_ADCEx_InjectedConvCpltCallback+0x430>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	425b      	negs	r3, r3
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f953 	bl	80004e0 <__aeabi_i2d>
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	4b9e      	ldr	r3, [pc, #632]	; (80034b8 <HAL_ADCEx_InjectedConvCpltCallback+0x440>)
 8003240:	f7fd fae2 	bl	8000808 <__aeabi_ddiv>
 8003244:	4603      	mov	r3, r0
 8003246:	460c      	mov	r4, r1
 8003248:	4618      	mov	r0, r3
 800324a:	4621      	mov	r1, r4
 800324c:	f7fd fc94 	bl	8000b78 <__aeabi_d2f>
 8003250:	4602      	mov	r2, r0
 8003252:	4b9b      	ldr	r3, [pc, #620]	; (80034c0 <HAL_ADCEx_InjectedConvCpltCallback+0x448>)
 8003254:	601a      	str	r2, [r3, #0]
	    Ic=-adc_Ic/33.0;
 8003256:	4b96      	ldr	r3, [pc, #600]	; (80034b0 <HAL_ADCEx_InjectedConvCpltCallback+0x438>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	425b      	negs	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f93f 	bl	80004e0 <__aeabi_i2d>
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	4b94      	ldr	r3, [pc, #592]	; (80034b8 <HAL_ADCEx_InjectedConvCpltCallback+0x440>)
 8003268:	f7fd face 	bl	8000808 <__aeabi_ddiv>
 800326c:	4603      	mov	r3, r0
 800326e:	460c      	mov	r4, r1
 8003270:	4618      	mov	r0, r3
 8003272:	4621      	mov	r1, r4
 8003274:	f7fd fc80 	bl	8000b78 <__aeabi_d2f>
 8003278:	4602      	mov	r2, r0
 800327a:	4b92      	ldr	r3, [pc, #584]	; (80034c4 <HAL_ADCEx_InjectedConvCpltCallback+0x44c>)
 800327c:	601a      	str	r2, [r3, #0]

	        arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 800327e:	4b8f      	ldr	r3, [pc, #572]	; (80034bc <HAL_ADCEx_InjectedConvCpltCallback+0x444>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b8f      	ldr	r3, [pc, #572]	; (80034c0 <HAL_ADCEx_InjectedConvCpltCallback+0x448>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	657a      	str	r2, [r7, #84]	; 0x54
 8003288:	653b      	str	r3, [r7, #80]	; 0x50
 800328a:	4b8f      	ldr	r3, [pc, #572]	; (80034c8 <HAL_ADCEx_InjectedConvCpltCallback+0x450>)
 800328c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800328e:	4b8f      	ldr	r3, [pc, #572]	; (80034cc <HAL_ADCEx_InjectedConvCpltCallback+0x454>)
 8003290:	64bb      	str	r3, [r7, #72]	; 0x48
    *pIalpha = Ia;
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003296:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8003298:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800329c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80034d0 <HAL_ADCEx_InjectedConvCpltCallback+0x458>
 80032a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032a4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80032a8:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80034d4 <HAL_ADCEx_InjectedConvCpltCallback+0x45c>
 80032ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b6:	edc3 7a00 	vstr	s15, [r3]
	    	angle_rotor_deg=TIM4->CCR1;
 80032ba:	4b87      	ldr	r3, [pc, #540]	; (80034d8 <HAL_ADCEx_InjectedConvCpltCallback+0x460>)
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	4b85      	ldr	r3, [pc, #532]	; (80034dc <HAL_ADCEx_InjectedConvCpltCallback+0x464>)
 80032c8:	edc3 7a00 	vstr	s15, [r3]
	    	arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);
 80032cc:	4b83      	ldr	r3, [pc, #524]	; (80034dc <HAL_ADCEx_InjectedConvCpltCallback+0x464>)
 80032ce:	edd3 7a00 	vldr	s15, [r3]
 80032d2:	4983      	ldr	r1, [pc, #524]	; (80034e0 <HAL_ADCEx_InjectedConvCpltCallback+0x468>)
 80032d4:	4883      	ldr	r0, [pc, #524]	; (80034e4 <HAL_ADCEx_InjectedConvCpltCallback+0x46c>)
 80032d6:	eeb0 0a67 	vmov.f32	s0, s15
 80032da:	f009 f927 	bl	800c52c <arm_sin_cos_f32>
	    	arm_park_f32(Ialpha, Ibeta, &Id, &Iq, pSinVal, pCosVal);
 80032de:	4b7a      	ldr	r3, [pc, #488]	; (80034c8 <HAL_ADCEx_InjectedConvCpltCallback+0x450>)
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	4b7a      	ldr	r3, [pc, #488]	; (80034cc <HAL_ADCEx_InjectedConvCpltCallback+0x454>)
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	4b7f      	ldr	r3, [pc, #508]	; (80034e4 <HAL_ADCEx_InjectedConvCpltCallback+0x46c>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b7d      	ldr	r3, [pc, #500]	; (80034e0 <HAL_ADCEx_InjectedConvCpltCallback+0x468>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	66f8      	str	r0, [r7, #108]	; 0x6c
 80032f0:	66b9      	str	r1, [r7, #104]	; 0x68
 80032f2:	497d      	ldr	r1, [pc, #500]	; (80034e8 <HAL_ADCEx_InjectedConvCpltCallback+0x470>)
 80032f4:	6679      	str	r1, [r7, #100]	; 0x64
 80032f6:	497d      	ldr	r1, [pc, #500]	; (80034ec <HAL_ADCEx_InjectedConvCpltCallback+0x474>)
 80032f8:	6639      	str	r1, [r7, #96]	; 0x60
 80032fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032fc:	65bb      	str	r3, [r7, #88]	; 0x58
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80032fe:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8003302:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800330e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800331c:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8003320:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003324:	eeb1 7a67 	vneg.f32	s14, s15
 8003328:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800332c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003330:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8003334:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800333c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003342:	edc3 7a00 	vstr	s15, [r3]



	    	// pid speed
	   							index_speed_loop++;
 8003346:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <HAL_ADCEx_InjectedConvCpltCallback+0x478>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3301      	adds	r3, #1
 800334c:	4a68      	ldr	r2, [pc, #416]	; (80034f0 <HAL_ADCEx_InjectedConvCpltCallback+0x478>)
 800334e:	6013      	str	r3, [r2, #0]
	   							if(index_speed_loop==1)
 8003350:	4b67      	ldr	r3, [pc, #412]	; (80034f0 <HAL_ADCEx_InjectedConvCpltCallback+0x478>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d166      	bne.n	8003426 <HAL_ADCEx_InjectedConvCpltCallback+0x3ae>
	   							{

	    						e_speed=set_speed-speed;
 8003358:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_ADCEx_InjectedConvCpltCallback+0x47c>)
 800335a:	ed93 7a00 	vldr	s14, [r3]
 800335e:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <HAL_ADCEx_InjectedConvCpltCallback+0x480>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003368:	4b64      	ldr	r3, [pc, #400]	; (80034fc <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 800336a:	edc3 7a00 	vstr	s15, [r3]
	    						iq_speed_prev=pid_iq_speed.state[2];
 800336e:	4b64      	ldr	r3, [pc, #400]	; (8003500 <HAL_ADCEx_InjectedConvCpltCallback+0x488>)
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	4a64      	ldr	r2, [pc, #400]	; (8003504 <HAL_ADCEx_InjectedConvCpltCallback+0x48c>)
 8003374:	6013      	str	r3, [r2, #0]
	    						iq_speed=arm_pid_f32(&pid_iq_speed, e_speed);
 8003376:	4b61      	ldr	r3, [pc, #388]	; (80034fc <HAL_ADCEx_InjectedConvCpltCallback+0x484>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a61      	ldr	r2, [pc, #388]	; (8003500 <HAL_ADCEx_InjectedConvCpltCallback+0x488>)
 800337c:	647a      	str	r2, [r7, #68]	; 0x44
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
    out = (S->A0 * in) +
 8003380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003382:	ed93 7a00 	vldr	s14, [r3]
 8003386:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800338a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800338e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003390:	edd3 6a01 	vldr	s13, [r3, #4]
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	edd3 7a03 	vldr	s15, [r3, #12]
 800339a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800339e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80033a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80033a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80033ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80033bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    S->state[1] = S->state[0];
 80033c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ca:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80033cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033d0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80033d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033d6:	615a      	str	r2, [r3, #20]
    return (out);
 80033d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033da:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <HAL_ADCEx_InjectedConvCpltCallback+0x490>)
 80033dc:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(iq_speed>=current_limit_max_iq)
 80033de:	4b4a      	ldr	r3, [pc, #296]	; (8003508 <HAL_ADCEx_InjectedConvCpltCallback+0x490>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd f88e 	bl	8000504 <__aeabi_f2d>
 80033e8:	a32b      	add	r3, pc, #172	; (adr r3, 8003498 <HAL_ADCEx_InjectedConvCpltCallback+0x420>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd fb67 	bl	8000ac0 <__aeabi_dcmpge>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <HAL_ADCEx_InjectedConvCpltCallback+0x38e>
	    						{
	    							pid_iq_speed.state[2]=iq_speed_prev;
 80033f8:	4b42      	ldr	r3, [pc, #264]	; (8003504 <HAL_ADCEx_InjectedConvCpltCallback+0x48c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a40      	ldr	r2, [pc, #256]	; (8003500 <HAL_ADCEx_InjectedConvCpltCallback+0x488>)
 80033fe:	6153      	str	r3, [r2, #20]
	    							iq_speed=current_limit_max_iq;
 8003400:	4b41      	ldr	r3, [pc, #260]	; (8003508 <HAL_ADCEx_InjectedConvCpltCallback+0x490>)
 8003402:	4a42      	ldr	r2, [pc, #264]	; (800350c <HAL_ADCEx_InjectedConvCpltCallback+0x494>)
 8003404:	601a      	str	r2, [r3, #0]
	    						}

	    						if(iq_speed<=current_limit_min_iq)
 8003406:	4b40      	ldr	r3, [pc, #256]	; (8003508 <HAL_ADCEx_InjectedConvCpltCallback+0x490>)
 8003408:	edd3 7a00 	vldr	s15, [r3]
 800340c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003414:	d807      	bhi.n	8003426 <HAL_ADCEx_InjectedConvCpltCallback+0x3ae>
	    						{
	    							pid_iq_speed.state[2]=iq_speed_prev;
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_ADCEx_InjectedConvCpltCallback+0x48c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a39      	ldr	r2, [pc, #228]	; (8003500 <HAL_ADCEx_InjectedConvCpltCallback+0x488>)
 800341c:	6153      	str	r3, [r2, #20]
	    							iq_speed=current_limit_min_iq;
 800341e:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <HAL_ADCEx_InjectedConvCpltCallback+0x490>)
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
	    						}
	   							}
	   							if(index_speed_loop==5)
 8003426:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <HAL_ADCEx_InjectedConvCpltCallback+0x478>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d102      	bne.n	8003434 <HAL_ADCEx_InjectedConvCpltCallback+0x3bc>
	   								index_speed_loop=0;
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_ADCEx_InjectedConvCpltCallback+0x478>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]



	    	// pid dla osi d
	    						ed=set_d-Id;
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_ADCEx_InjectedConvCpltCallback+0x498>)
 8003436:	ed93 7a00 	vldr	s14, [r3]
 800343a:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_ADCEx_InjectedConvCpltCallback+0x470>)
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003444:	4b33      	ldr	r3, [pc, #204]	; (8003514 <HAL_ADCEx_InjectedConvCpltCallback+0x49c>)
 8003446:	edc3 7a00 	vstr	s15, [r3]
	    						Vd_prev=pid_d.state[2];
 800344a:	4b33      	ldr	r3, [pc, #204]	; (8003518 <HAL_ADCEx_InjectedConvCpltCallback+0x4a0>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4a33      	ldr	r2, [pc, #204]	; (800351c <HAL_ADCEx_InjectedConvCpltCallback+0x4a4>)
 8003450:	6013      	str	r3, [r2, #0]
	    						Vd=arm_pid_f32(&pid_d, ed);
 8003452:	4b30      	ldr	r3, [pc, #192]	; (8003514 <HAL_ADCEx_InjectedConvCpltCallback+0x49c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a30      	ldr	r2, [pc, #192]	; (8003518 <HAL_ADCEx_InjectedConvCpltCallback+0x4a0>)
 8003458:	63ba      	str	r2, [r7, #56]	; 0x38
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
    out = (S->A0 * in) +
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	ed93 7a00 	vldr	s14, [r3]
 8003462:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003466:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	edd3 7a03 	vldr	s15, [r3, #12]
 8003476:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800347a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	edd3 6a02 	vldr	s13, [r3, #8]
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	edd3 7a04 	vldr	s15, [r3, #16]
 800348a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800348e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003492:	e045      	b.n	8003520 <HAL_ADCEx_InjectedConvCpltCallback+0x4a8>
 8003494:	f3af 8000 	nop.w
 8003498:	33333333 	.word	0x33333333
 800349c:	3fe33333 	.word	0x3fe33333
 80034a0:	200003d4 	.word	0x200003d4
 80034a4:	20000324 	.word	0x20000324
 80034a8:	2000032c 	.word	0x2000032c
 80034ac:	20000374 	.word	0x20000374
 80034b0:	20000558 	.word	0x20000558
 80034b4:	2000056c 	.word	0x2000056c
 80034b8:	40408000 	.word	0x40408000
 80034bc:	20000310 	.word	0x20000310
 80034c0:	200003d0 	.word	0x200003d0
 80034c4:	20000420 	.word	0x20000420
 80034c8:	2000041c 	.word	0x2000041c
 80034cc:	20000410 	.word	0x20000410
 80034d0:	3f13cd3a 	.word	0x3f13cd3a
 80034d4:	3f93cd3a 	.word	0x3f93cd3a
 80034d8:	40000800 	.word	0x40000800
 80034dc:	2000030c 	.word	0x2000030c
 80034e0:	20000578 	.word	0x20000578
 80034e4:	200003bc 	.word	0x200003bc
 80034e8:	20000378 	.word	0x20000378
 80034ec:	20000434 	.word	0x20000434
 80034f0:	20000360 	.word	0x20000360
 80034f4:	20000560 	.word	0x20000560
 80034f8:	20000548 	.word	0x20000548
 80034fc:	20000550 	.word	0x20000550
 8003500:	20000380 	.word	0x20000380
 8003504:	20000368 	.word	0x20000368
 8003508:	20000580 	.word	0x20000580
 800350c:	3f19999a 	.word	0x3f19999a
 8003510:	20000330 	.word	0x20000330
 8003514:	20000538 	.word	0x20000538
 8003518:	20000334 	.word	0x20000334
 800351c:	200003b4 	.word	0x200003b4
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    S->state[1] = S->state[0];
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800353a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800353c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003540:	615a      	str	r2, [r3, #20]
    return (out);
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	4a90      	ldr	r2, [pc, #576]	; (8003788 <HAL_ADCEx_InjectedConvCpltCallback+0x710>)
 8003546:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(Vd>=sv_Vdc_limit)
 8003548:	4b8f      	ldr	r3, [pc, #572]	; (8003788 <HAL_ADCEx_InjectedConvCpltCallback+0x710>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fc ffd9 	bl	8000504 <__aeabi_f2d>
 8003552:	a389      	add	r3, pc, #548	; (adr r3, 8003778 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fd fab2 	bl	8000ac0 <__aeabi_dcmpge>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <HAL_ADCEx_InjectedConvCpltCallback+0x4f8>
	    						{
	    							pid_d.state[2]=Vd_prev;
 8003562:	4b8a      	ldr	r3, [pc, #552]	; (800378c <HAL_ADCEx_InjectedConvCpltCallback+0x714>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a8a      	ldr	r2, [pc, #552]	; (8003790 <HAL_ADCEx_InjectedConvCpltCallback+0x718>)
 8003568:	6153      	str	r3, [r2, #20]
	    							Vd=sv_Vdc_limit;
 800356a:	4b87      	ldr	r3, [pc, #540]	; (8003788 <HAL_ADCEx_InjectedConvCpltCallback+0x710>)
 800356c:	4a89      	ldr	r2, [pc, #548]	; (8003794 <HAL_ADCEx_InjectedConvCpltCallback+0x71c>)
 800356e:	601a      	str	r2, [r3, #0]
	    						}

	    						if(Vd<=(-sv_Vdc_limit))
 8003570:	4b85      	ldr	r3, [pc, #532]	; (8003788 <HAL_ADCEx_InjectedConvCpltCallback+0x710>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc ffc5 	bl	8000504 <__aeabi_f2d>
 800357a:	a381      	add	r3, pc, #516	; (adr r3, 8003780 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fd fa94 	bl	8000aac <__aeabi_dcmple>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <HAL_ADCEx_InjectedConvCpltCallback+0x520>
	    						{
	    							pid_d.state[2]=Vd_prev;
 800358a:	4b80      	ldr	r3, [pc, #512]	; (800378c <HAL_ADCEx_InjectedConvCpltCallback+0x714>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a80      	ldr	r2, [pc, #512]	; (8003790 <HAL_ADCEx_InjectedConvCpltCallback+0x718>)
 8003590:	6153      	str	r3, [r2, #20]
	    							Vd=(-sv_Vdc_limit);
 8003592:	4b7d      	ldr	r3, [pc, #500]	; (8003788 <HAL_ADCEx_InjectedConvCpltCallback+0x710>)
 8003594:	4a80      	ldr	r2, [pc, #512]	; (8003798 <HAL_ADCEx_InjectedConvCpltCallback+0x720>)
 8003596:	601a      	str	r2, [r3, #0]
	    						}

	    	// pid dla osi q
	    						//eq=set_q-Iq;
	    						eq=iq_speed-Iq;
 8003598:	4b80      	ldr	r3, [pc, #512]	; (800379c <HAL_ADCEx_InjectedConvCpltCallback+0x724>)
 800359a:	ed93 7a00 	vldr	s14, [r3]
 800359e:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <HAL_ADCEx_InjectedConvCpltCallback+0x728>)
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a8:	4b7e      	ldr	r3, [pc, #504]	; (80037a4 <HAL_ADCEx_InjectedConvCpltCallback+0x72c>)
 80035aa:	edc3 7a00 	vstr	s15, [r3]
	    						Vq_prev=pid_q.state[2];
 80035ae:	4b7e      	ldr	r3, [pc, #504]	; (80037a8 <HAL_ADCEx_InjectedConvCpltCallback+0x730>)
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <HAL_ADCEx_InjectedConvCpltCallback+0x734>)
 80035b4:	6013      	str	r3, [r2, #0]
	    						Vq=arm_pid_f32(&pid_q, eq);
 80035b6:	4b7b      	ldr	r3, [pc, #492]	; (80037a4 <HAL_ADCEx_InjectedConvCpltCallback+0x72c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a7b      	ldr	r2, [pc, #492]	; (80037a8 <HAL_ADCEx_InjectedConvCpltCallback+0x730>)
 80035bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
    out = (S->A0 * in) +
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	ed93 7a00 	vldr	s14, [r3]
 80035c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80035ca:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80035da:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80035de:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80035ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80035fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003600:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    S->state[1] = S->state[0];
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003610:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003616:	615a      	str	r2, [r3, #20]
    return (out);
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	4a65      	ldr	r2, [pc, #404]	; (80037b0 <HAL_ADCEx_InjectedConvCpltCallback+0x738>)
 800361c:	6013      	str	r3, [r2, #0]
	    	// saturacja i anty-wind-up
	    						if(Vq>=sv_Vdc_limit)
 800361e:	4b64      	ldr	r3, [pc, #400]	; (80037b0 <HAL_ADCEx_InjectedConvCpltCallback+0x738>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc ff6e 	bl	8000504 <__aeabi_f2d>
 8003628:	a353      	add	r3, pc, #332	; (adr r3, 8003778 <HAL_ADCEx_InjectedConvCpltCallback+0x700>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f7fd fa47 	bl	8000ac0 <__aeabi_dcmpge>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <HAL_ADCEx_InjectedConvCpltCallback+0x5ce>
	    						{
	    						pid_q.state[2]=Vq_prev;
 8003638:	4b5c      	ldr	r3, [pc, #368]	; (80037ac <HAL_ADCEx_InjectedConvCpltCallback+0x734>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a5a      	ldr	r2, [pc, #360]	; (80037a8 <HAL_ADCEx_InjectedConvCpltCallback+0x730>)
 800363e:	6153      	str	r3, [r2, #20]
	    						Vq=sv_Vdc_limit;
 8003640:	4b5b      	ldr	r3, [pc, #364]	; (80037b0 <HAL_ADCEx_InjectedConvCpltCallback+0x738>)
 8003642:	4a54      	ldr	r2, [pc, #336]	; (8003794 <HAL_ADCEx_InjectedConvCpltCallback+0x71c>)
 8003644:	601a      	str	r2, [r3, #0]
	    						}

	    						if(Vq<=(-sv_Vdc_limit))
 8003646:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <HAL_ADCEx_InjectedConvCpltCallback+0x738>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff5a 	bl	8000504 <__aeabi_f2d>
 8003650:	a34b      	add	r3, pc, #300	; (adr r3, 8003780 <HAL_ADCEx_InjectedConvCpltCallback+0x708>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f7fd fa29 	bl	8000aac <__aeabi_dcmple>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d006      	beq.n	800366e <HAL_ADCEx_InjectedConvCpltCallback+0x5f6>
	    						{
	    						pid_q.state[2]=Vq_prev;
 8003660:	4b52      	ldr	r3, [pc, #328]	; (80037ac <HAL_ADCEx_InjectedConvCpltCallback+0x734>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a50      	ldr	r2, [pc, #320]	; (80037a8 <HAL_ADCEx_InjectedConvCpltCallback+0x730>)
 8003666:	6153      	str	r3, [r2, #20]
	    						Vq=(-sv_Vdc_limit);
 8003668:	4b51      	ldr	r3, [pc, #324]	; (80037b0 <HAL_ADCEx_InjectedConvCpltCallback+0x738>)
 800366a:	4a4b      	ldr	r2, [pc, #300]	; (8003798 <HAL_ADCEx_InjectedConvCpltCallback+0x720>)
 800366c:	601a      	str	r2, [r3, #0]
	    						}

	    	//angle_rotor_deg=TIM4->CCR1;
	    	//arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);
	    	arm_inv_park_f32(Vd, Vq, &Valpha, &Vbeta, pSinVal, pCosVal);
 800366e:	4b46      	ldr	r3, [pc, #280]	; (8003788 <HAL_ADCEx_InjectedConvCpltCallback+0x710>)
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	4b4f      	ldr	r3, [pc, #316]	; (80037b0 <HAL_ADCEx_InjectedConvCpltCallback+0x738>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	4b4f      	ldr	r3, [pc, #316]	; (80037b4 <HAL_ADCEx_InjectedConvCpltCallback+0x73c>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <HAL_ADCEx_InjectedConvCpltCallback+0x740>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6238      	str	r0, [r7, #32]
 8003680:	61f9      	str	r1, [r7, #28]
 8003682:	494e      	ldr	r1, [pc, #312]	; (80037bc <HAL_ADCEx_InjectedConvCpltCallback+0x744>)
 8003684:	61b9      	str	r1, [r7, #24]
 8003686:	494e      	ldr	r1, [pc, #312]	; (80037c0 <HAL_ADCEx_InjectedConvCpltCallback+0x748>)
 8003688:	6179      	str	r1, [r7, #20]
 800368a:	613a      	str	r2, [r7, #16]
 800368c:	60fb      	str	r3, [r7, #12]
    *pIalpha = Id * cosVal - Iq * sinVal;
 800368e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003692:	edd7 7a03 	vldr	s15, [r7, #12]
 8003696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800369a:	edd7 6a07 	vldr	s13, [r7, #28]
 800369e:	edd7 7a04 	vldr	s15, [r7, #16]
 80036a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	edc3 7a00 	vstr	s15, [r3]
    *pIbeta = Id * sinVal + Iq * cosVal;
 80036b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80036b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80036b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80036c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	edc3 7a00 	vstr	s15, [r3]

	    	AlphaBeta_To_Angle_Vref(Valpha, Vbeta, &angle_current_rad, &Vref);
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <HAL_ADCEx_InjectedConvCpltCallback+0x744>)
 80036d4:	edd3 7a00 	vldr	s15, [r3]
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_ADCEx_InjectedConvCpltCallback+0x748>)
 80036da:	ed93 7a00 	vldr	s14, [r3]
 80036de:	4939      	ldr	r1, [pc, #228]	; (80037c4 <HAL_ADCEx_InjectedConvCpltCallback+0x74c>)
 80036e0:	4839      	ldr	r0, [pc, #228]	; (80037c8 <HAL_ADCEx_InjectedConvCpltCallback+0x750>)
 80036e2:	eef0 0a47 	vmov.f32	s1, s14
 80036e6:	eeb0 0a67 	vmov.f32	s0, s15
 80036ea:	f7ff fa31 	bl	8002b50 <AlphaBeta_To_Angle_Vref>
	    	Angle_To_Sector(angle_current_rad, &sector);
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_ADCEx_InjectedConvCpltCallback+0x750>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	4835      	ldr	r0, [pc, #212]	; (80037cc <HAL_ADCEx_InjectedConvCpltCallback+0x754>)
 80036f6:	eeb0 0a67 	vmov.f32	s0, s15
 80036fa:	f7ff fa81 	bl	8002c00 <Angle_To_Sector>
	    	SVPWM(sector, angle_current_rad , Vref, sv_T, sv_T_gate, &sv_S1, &sv_S2, &sv_S3);
 80036fe:	4b33      	ldr	r3, [pc, #204]	; (80037cc <HAL_ADCEx_InjectedConvCpltCallback+0x754>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	b2d8      	uxtb	r0, r3
 8003704:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <HAL_ADCEx_InjectedConvCpltCallback+0x750>)
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	4b2e      	ldr	r3, [pc, #184]	; (80037c4 <HAL_ADCEx_InjectedConvCpltCallback+0x74c>)
 800370c:	ed93 7a00 	vldr	s14, [r3]
 8003710:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <HAL_ADCEx_InjectedConvCpltCallback+0x758>)
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <HAL_ADCEx_InjectedConvCpltCallback+0x75c>)
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	4b2f      	ldr	r3, [pc, #188]	; (80037d8 <HAL_ADCEx_InjectedConvCpltCallback+0x760>)
 800371a:	4a30      	ldr	r2, [pc, #192]	; (80037dc <HAL_ADCEx_InjectedConvCpltCallback+0x764>)
 800371c:	4930      	ldr	r1, [pc, #192]	; (80037e0 <HAL_ADCEx_InjectedConvCpltCallback+0x768>)
 800371e:	eef0 0a47 	vmov.f32	s1, s14
 8003722:	eeb0 0a67 	vmov.f32	s0, s15
 8003726:	f7ff fb23 	bl	8002d70 <SVPWM>

	    	TIM1->CCR1 = sv_S1;
 800372a:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <HAL_ADCEx_InjectedConvCpltCallback+0x760>)
 800372c:	edd3 7a00 	vldr	s15, [r3]
 8003730:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <HAL_ADCEx_InjectedConvCpltCallback+0x76c>)
 8003732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003736:	ee17 2a90 	vmov	r2, s15
 800373a:	635a      	str	r2, [r3, #52]	; 0x34
	    	TIM1->CCR2 = sv_S2;
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_ADCEx_InjectedConvCpltCallback+0x75c>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <HAL_ADCEx_InjectedConvCpltCallback+0x76c>)
 8003744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003748:	ee17 2a90 	vmov	r2, s15
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
	    	TIM1->CCR3 = sv_S3;
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_ADCEx_InjectedConvCpltCallback+0x758>)
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <HAL_ADCEx_InjectedConvCpltCallback+0x76c>)
 8003756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375a:	ee17 2a90 	vmov	r2, s15
 800375e:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 8003760:	4821      	ldr	r0, [pc, #132]	; (80037e8 <HAL_ADCEx_InjectedConvCpltCallback+0x770>)
 8003762:	f001 fffb 	bl	800575c <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 8003766:	4821      	ldr	r0, [pc, #132]	; (80037ec <HAL_ADCEx_InjectedConvCpltCallback+0x774>)
 8003768:	f001 fff8 	bl	800575c <HAL_ADCEx_InjectedStart_IT>
}
 800376c:	bf00      	nop
 800376e:	3774      	adds	r7, #116	; 0x74
 8003770:	46bd      	mov	sp, r7
 8003772:	bd90      	pop	{r4, r7, pc}
 8003774:	f3af 8000 	nop.w
 8003778:	0f9096bc 	.word	0x0f9096bc
 800377c:	402bb67a 	.word	0x402bb67a
 8003780:	0f9096bc 	.word	0x0f9096bc
 8003784:	c02bb67a 	.word	0xc02bb67a
 8003788:	2000035c 	.word	0x2000035c
 800378c:	200003b4 	.word	0x200003b4
 8003790:	20000334 	.word	0x20000334
 8003794:	415db3d0 	.word	0x415db3d0
 8003798:	c15db3d0 	.word	0xc15db3d0
 800379c:	20000580 	.word	0x20000580
 80037a0:	20000434 	.word	0x20000434
 80037a4:	20000358 	.word	0x20000358
 80037a8:	200003e0 	.word	0x200003e0
 80037ac:	200003c0 	.word	0x200003c0
 80037b0:	2000037c 	.word	0x2000037c
 80037b4:	200003bc 	.word	0x200003bc
 80037b8:	20000578 	.word	0x20000578
 80037bc:	20000570 	.word	0x20000570
 80037c0:	200003dc 	.word	0x200003dc
 80037c4:	20000408 	.word	0x20000408
 80037c8:	200003cc 	.word	0x200003cc
 80037cc:	200003d8 	.word	0x200003d8
 80037d0:	20000328 	.word	0x20000328
 80037d4:	20000364 	.word	0x20000364
 80037d8:	200003b0 	.word	0x200003b0
 80037dc:	20000314 	.word	0x20000314
 80037e0:	200003a4 	.word	0x200003a4
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	2000028c 	.word	0x2000028c
 80037ec:	20000220 	.word	0x20000220

080037f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003800:	d10f      	bne.n	8003822 <HAL_GPIO_EXTI_Callback+0x32>
	{
		if(start==0)
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_GPIO_EXTI_Callback+0x3c>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_GPIO_EXTI_Callback+0x28>
		{
			start=1;
 800380c:	4b07      	ldr	r3, [pc, #28]	; (800382c <HAL_GPIO_EXTI_Callback+0x3c>)
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
			start1();
 8003812:	f7ff f803 	bl	800281c <start1>
			start=0;
			stop();

		}
	}
}
 8003816:	e004      	b.n	8003822 <HAL_GPIO_EXTI_Callback+0x32>
			start=0;
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <HAL_GPIO_EXTI_Callback+0x3c>)
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
			stop();
 800381e:	f7ff f913 	bl	8002a48 <stop>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000568 	.word	0x20000568

08003830 <HAL_UART_RxCpltCallback>:
	}

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_UART_RxCpltCallback+0x7c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d130      	bne.n	80038a4 <HAL_UART_RxCpltCallback+0x74>
	{
			//if(index_uart==0)
			//	stop();

			jstring[index_uart]=recive;
 8003842:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <HAL_UART_RxCpltCallback+0x80>)
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <HAL_UART_RxCpltCallback+0x84>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b2d9      	uxtb	r1, r3
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_UART_RxCpltCallback+0x88>)
 8003852:	5499      	strb	r1, [r3, r2]

			if(recive=='}')
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <HAL_UART_RxCpltCallback+0x84>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b7d      	cmp	r3, #125	; 0x7d
 800385c:	d116      	bne.n	800388c <HAL_UART_RxCpltCallback+0x5c>
			{
				for (int i=(index_uart+1);i<size_uart_tab;i++)
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <HAL_UART_RxCpltCallback+0x80>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	3301      	adds	r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e007      	b.n	800387a <HAL_UART_RxCpltCallback+0x4a>
				{
					jstring[i]=0;
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <HAL_UART_RxCpltCallback+0x88>)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
				for (int i=(index_uart+1);i<size_uart_tab;i++)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2bfe      	cmp	r3, #254	; 0xfe
 800387e:	ddf4      	ble.n	800386a <HAL_UART_RxCpltCallback+0x3a>
				}
				index_uart=0;
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_UART_RxCpltCallback+0x80>)
 8003882:	2200      	movs	r2, #0
 8003884:	801a      	strh	r2, [r3, #0]

				start1();
 8003886:	f7fe ffc9 	bl	800281c <start1>
 800388a:	e006      	b.n	800389a <HAL_UART_RxCpltCallback+0x6a>
			}
			else
				index_uart++;
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_UART_RxCpltCallback+0x80>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	3301      	adds	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_UART_RxCpltCallback+0x80>)
 8003898:	801a      	strh	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart2, &recive, 1);
 800389a:	2201      	movs	r2, #1
 800389c:	4905      	ldr	r1, [pc, #20]	; (80038b4 <HAL_UART_RxCpltCallback+0x84>)
 800389e:	4807      	ldr	r0, [pc, #28]	; (80038bc <HAL_UART_RxCpltCallback+0x8c>)
 80038a0:	f006 fd7a 	bl	800a398 <HAL_UART_Receive_IT>
	}
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40004400 	.word	0x40004400
 80038b0:	20000370 	.word	0x20000370
 80038b4:	2000040c 	.word	0x2000040c
 80038b8:	20000438 	.word	0x20000438
 80038bc:	2000071c 	.word	0x2000071c

080038c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038c4:	f000 fe17 	bl	80044f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038c8:	f000 f820 	bl	800390c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038cc:	f7fe fe4a 	bl	8002564 <MX_GPIO_Init>
  MX_TIM1_Init();
 80038d0:	f000 fa4e 	bl	8003d70 <MX_TIM1_Init>
  MX_TIM4_Init();
 80038d4:	f000 fb2c 	bl	8003f30 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80038d8:	f000 fd4c 	bl	8004374 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80038dc:	f7fd fb1c 	bl	8000f18 <MX_ADC1_Init>
  MX_ADC2_Init();
 80038e0:	f7fd fbb6 	bl	8001050 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80038e4:	f000 f880 	bl	80039e8 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80038e8:	f000 f8ac 	bl	8003a44 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80038ec:	f000 f8d8 	bl	8003aa0 <MX_OPAMP3_Init>
  MX_TIM8_Init();
 80038f0:	f000 fb76 	bl	8003fe0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2, &recive, 1);
 80038f4:	2201      	movs	r2, #1
 80038f6:	4903      	ldr	r1, [pc, #12]	; (8003904 <main+0x44>)
 80038f8:	4803      	ldr	r0, [pc, #12]	; (8003908 <main+0x48>)
 80038fa:	f006 fd4d 	bl	800a398 <HAL_UART_Receive_IT>

   start_up();
 80038fe:	f7fe fe9d 	bl	800263c <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003902:	e7fe      	b.n	8003902 <main+0x42>
 8003904:	2000040c 	.word	0x2000040c
 8003908:	2000071c 	.word	0x2000071c

0800390c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b0a4      	sub	sp, #144	; 0x90
 8003910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003916:	2238      	movs	r2, #56	; 0x38
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f009 f871 	bl	800ca02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003920:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003930:	463b      	mov	r3, r7
 8003932:	2244      	movs	r2, #68	; 0x44
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f009 f863 	bl	800ca02 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800393c:	2000      	movs	r0, #0
 800393e:	f003 fc85 	bl	800724c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003942:	2301      	movs	r3, #1
 8003944:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800394a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800394c:	2302      	movs	r3, #2
 800394e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003950:	2303      	movs	r3, #3
 8003952:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8003954:	2302      	movs	r3, #2
 8003956:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003958:	2355      	movs	r3, #85	; 0x55
 800395a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800395e:	2302      	movs	r3, #2
 8003960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003964:	2302      	movs	r3, #2
 8003966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800396a:	2302      	movs	r3, #2
 800396c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003970:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fd0d 	bl	8007394 <HAL_RCC_OscConfig>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003980:	f000 f82a 	bl	80039d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003984:	230f      	movs	r3, #15
 8003986:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003988:	2303      	movs	r3, #3
 800398a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800398c:	2300      	movs	r3, #0
 800398e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003990:	2300      	movs	r3, #0
 8003992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003994:	2300      	movs	r3, #0
 8003996:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8003998:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800399c:	2108      	movs	r1, #8
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 f810 	bl	80079c4 <HAL_RCC_ClockConfig>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80039aa:	f000 f815 	bl	80039d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80039ae:	f248 0302 	movw	r3, #32770	; 0x8002
 80039b2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80039b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039be:	463b      	mov	r3, r7
 80039c0:	4618      	mov	r0, r3
 80039c2:	f004 fa1b 	bl	8007dfc <HAL_RCCEx_PeriphCLKConfig>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80039cc:	f000 f804 	bl	80039d8 <Error_Handler>
  }
}
 80039d0:	bf00      	nop
 80039d2:	3790      	adds	r7, #144	; 0x90
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 80039ee:	4a14      	ldr	r2, [pc, #80]	; (8003a40 <MX_OPAMP1_Init+0x58>)
 80039f0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 80039fa:	2240      	movs	r2, #64	; 0x40
 80039fc:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 8003a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003a18:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 8003a1a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8003a26:	4805      	ldr	r0, [pc, #20]	; (8003a3c <MX_OPAMP1_Init+0x54>)
 8003a28:	f002 ffe0 	bl	80069ec <HAL_OPAMP_Init>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8003a32:	f7ff ffd1 	bl	80039d8 <Error_Handler>
  }

}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200005fc 	.word	0x200005fc
 8003a40:	40010300 	.word	0x40010300

08003a44 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a4a:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <MX_OPAMP2_Init+0x58>)
 8003a4c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a56:	2240      	movs	r2, #64	; 0x40
 8003a58:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a76:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8003a82:	4805      	ldr	r0, [pc, #20]	; (8003a98 <MX_OPAMP2_Init+0x54>)
 8003a84:	f002 ffb2 	bl	80069ec <HAL_OPAMP_Init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8003a8e:	f7ff ffa3 	bl	80039d8 <Error_Handler>
  }

}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000584 	.word	0x20000584
 8003a9c:	40010304 	.word	0x40010304

08003aa0 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003aa6:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <MX_OPAMP3_Init+0x58>)
 8003aa8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003ab2:	2240      	movs	r2, #64	; 0x40
 8003ab4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003ad2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8003ade:	4805      	ldr	r0, [pc, #20]	; (8003af4 <MX_OPAMP3_Init+0x54>)
 8003ae0:	f002 ff84 	bl	80069ec <HAL_OPAMP_Init>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8003aea:	f7ff ff75 	bl	80039d8 <Error_Handler>
  }

}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200005c0 	.word	0x200005c0
 8003af8:	40010308 	.word	0x40010308

08003afc <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2e      	ldr	r2, [pc, #184]	; (8003bd4 <HAL_OPAMP_MspInit+0xd8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d119      	bne.n	8003b52 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1e:	4b2e      	ldr	r3, [pc, #184]	; (8003bd8 <HAL_OPAMP_MspInit+0xdc>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <HAL_OPAMP_MspInit+0xdc>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_OPAMP_MspInit+0xdc>)
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003b36:	230e      	movs	r3, #14
 8003b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	4619      	mov	r1, r3
 8003b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4c:	f002 fdb4 	bl	80066b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8003b50:	e03b      	b.n	8003bca <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a21      	ldr	r2, [pc, #132]	; (8003bdc <HAL_OPAMP_MspInit+0xe0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d119      	bne.n	8003b90 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <HAL_OPAMP_MspInit+0xdc>)
 8003b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b60:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <HAL_OPAMP_MspInit+0xdc>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_OPAMP_MspInit+0xdc>)
 8003b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b74:	23e0      	movs	r3, #224	; 0xe0
 8003b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4619      	mov	r1, r3
 8003b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8a:	f002 fd95 	bl	80066b8 <HAL_GPIO_Init>
}
 8003b8e:	e01c      	b.n	8003bca <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <HAL_OPAMP_MspInit+0xe4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d117      	bne.n	8003bca <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <HAL_OPAMP_MspInit+0xdc>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	4a0e      	ldr	r2, [pc, #56]	; (8003bd8 <HAL_OPAMP_MspInit+0xdc>)
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_OPAMP_MspInit+0xdc>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003bb2:	2307      	movs	r3, #7
 8003bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbe:	f107 0314 	add.w	r3, r7, #20
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4807      	ldr	r0, [pc, #28]	; (8003be4 <HAL_OPAMP_MspInit+0xe8>)
 8003bc6:	f002 fd77 	bl	80066b8 <HAL_GPIO_Init>
}
 8003bca:	bf00      	nop
 8003bcc:	3728      	adds	r7, #40	; 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40010300 	.word	0x40010300
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40010304 	.word	0x40010304
 8003be0:	40010308 	.word	0x40010308
 8003be4:	48000400 	.word	0x48000400

08003be8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8003bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf6:	6093      	str	r3, [r2, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40007000 	.word	0x40007000

08003c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_MspInit+0x44>)
 8003c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c12:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <HAL_MspInit+0x44>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6613      	str	r3, [r2, #96]	; 0x60
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_MspInit+0x44>)
 8003c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_MspInit+0x44>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <HAL_MspInit+0x44>)
 8003c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c30:	6593      	str	r3, [r2, #88]	; 0x58
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_MspInit+0x44>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8003c3e:	f7ff ffd3 	bl	8003be8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000

08003c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c62:	e7fe      	b.n	8003c62 <HardFault_Handler+0x4>

08003c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c68:	e7fe      	b.n	8003c68 <MemManage_Handler+0x4>

08003c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c6e:	e7fe      	b.n	8003c6e <BusFault_Handler+0x4>

08003c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c74:	e7fe      	b.n	8003c74 <UsageFault_Handler+0x4>

08003c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ca4:	f000 fc7a 	bl	800459c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}

08003cac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003cb0:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <ADC1_2_IRQHandler+0x14>)
 8003cb2:	f000 ff7b 	bl	8004bac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003cb6:	4803      	ldr	r0, [pc, #12]	; (8003cc4 <ADC1_2_IRQHandler+0x18>)
 8003cb8:	f000 ff78 	bl	8004bac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	2000028c 	.word	0x2000028c
 8003cc4:	20000220 	.word	0x20000220

08003cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ccc:	4802      	ldr	r0, [pc, #8]	; (8003cd8 <USART2_IRQHandler+0x10>)
 8003cce:	f006 fc3b 	bl	800a548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	2000071c 	.word	0x2000071c

08003cdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003ce0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003ce4:	f002 fe6a 	bl	80069bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ce8:	bf00      	nop
 8003cea:	bd80      	pop	{r7, pc}

08003cec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <_sbrk+0x50>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <_sbrk+0x16>
		heap_end = &end;
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <_sbrk+0x50>)
 8003cfe:	4a10      	ldr	r2, [pc, #64]	; (8003d40 <_sbrk+0x54>)
 8003d00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <_sbrk+0x50>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <_sbrk+0x50>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	466a      	mov	r2, sp
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d907      	bls.n	8003d26 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d16:	f008 fe0f 	bl	800c938 <__errno>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	230c      	movs	r3, #12
 8003d1e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	e006      	b.n	8003d34 <_sbrk+0x48>
	}

	heap_end += incr;
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <_sbrk+0x50>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	4a03      	ldr	r2, [pc, #12]	; (8003d3c <_sbrk+0x50>)
 8003d30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000214 	.word	0x20000214
 8003d40:	200007b0 	.word	0x200007b0

08003d44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d48:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <SystemInit+0x28>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	4a07      	ldr	r2, [pc, #28]	; (8003d6c <SystemInit+0x28>)
 8003d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <SystemInit+0x28>)
 8003d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b09c      	sub	sp, #112	; 0x70
 8003d74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
 8003da0:	615a      	str	r2, [r3, #20]
 8003da2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003da4:	1d3b      	adds	r3, r7, #4
 8003da6:	2234      	movs	r2, #52	; 0x34
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f008 fe29 	bl	800ca02 <memset>

  htim1.Instance = TIM1;
 8003db0:	4b5d      	ldr	r3, [pc, #372]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003db2:	4a5e      	ldr	r2, [pc, #376]	; (8003f2c <MX_TIM1_Init+0x1bc>)
 8003db4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003db6:	4b5c      	ldr	r3, [pc, #368]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003dbc:	4b5a      	ldr	r3, [pc, #360]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8003dc2:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dc8:	4b57      	ldr	r3, [pc, #348]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003dce:	4b56      	ldr	r3, [pc, #344]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd4:	4b54      	ldr	r3, [pc, #336]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003dda:	4853      	ldr	r0, [pc, #332]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003ddc:	f004 f9fe 	bl	80081dc <HAL_TIM_Base_Init>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003de6:	f7ff fdf7 	bl	80039d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dee:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003df0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003df4:	4619      	mov	r1, r3
 8003df6:	484c      	ldr	r0, [pc, #304]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003df8:	f005 f922 	bl	8009040 <HAL_TIM_ConfigClockSource>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003e02:	f7ff fde9 	bl	80039d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e06:	4848      	ldr	r0, [pc, #288]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003e08:	f004 fa3f 	bl	800828a <HAL_TIM_PWM_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003e12:	f7ff fde1 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003e16:	2370      	movs	r3, #112	; 0x70
 8003e18:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e26:	4619      	mov	r1, r3
 8003e28:	483f      	ldr	r0, [pc, #252]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003e2a:	f006 f91d 	bl	800a068 <HAL_TIMEx_MasterConfigSynchronization>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8003e34:	f7ff fdd0 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e38:	2360      	movs	r3, #96	; 0x60
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e40:	2300      	movs	r3, #0
 8003e42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e44:	2300      	movs	r3, #0
 8003e46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4832      	ldr	r0, [pc, #200]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003e5e:	f004 ffdf 	bl	8008e20 <HAL_TIM_PWM_ConfigChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003e68:	f7ff fdb6 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e74:	2204      	movs	r2, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	482b      	ldr	r0, [pc, #172]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003e7a:	f004 ffd1 	bl	8008e20 <HAL_TIM_PWM_ConfigChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8003e84:	f7ff fda8 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e90:	2208      	movs	r2, #8
 8003e92:	4619      	mov	r1, r3
 8003e94:	4824      	ldr	r0, [pc, #144]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003e96:	f004 ffc3 	bl	8008e20 <HAL_TIM_PWM_ConfigChannel>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8003ea0:	f7ff fd9a 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003ea4:	2370      	movs	r3, #112	; 0x70
 8003ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003eac:	2300      	movs	r3, #0
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003eb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003eb4:	220c      	movs	r2, #12
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	481b      	ldr	r0, [pc, #108]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003eba:	f004 ffb1 	bl	8008e20 <HAL_TIM_PWM_ConfigChannel>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8003ec4:	f7ff fd88 	bl	80039d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ecc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8003ed8:	2344      	movs	r3, #68	; 0x44
 8003eda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ee4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003eea:	2300      	movs	r3, #0
 8003eec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003efc:	2300      	movs	r3, #0
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f04:	1d3b      	adds	r3, r7, #4
 8003f06:	4619      	mov	r1, r3
 8003f08:	4807      	ldr	r0, [pc, #28]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003f0a:	f006 f92f 	bl	800a16c <HAL_TIMEx_ConfigBreakDeadTime>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8003f14:	f7ff fd60 	bl	80039d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003f18:	4803      	ldr	r0, [pc, #12]	; (8003f28 <MX_TIM1_Init+0x1b8>)
 8003f1a:	f000 f9a3 	bl	8004264 <HAL_TIM_MspPostInit>

}
 8003f1e:	bf00      	nop
 8003f20:	3770      	adds	r7, #112	; 0x70
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200006d0 	.word	0x200006d0
 8003f2c:	40012c00 	.word	0x40012c00

08003f30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08c      	sub	sp, #48	; 0x30
 8003f34:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f36:	f107 030c 	add.w	r3, r7, #12
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f008 fd5f 	bl	800ca02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f44:	463b      	mov	r3, r7
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8003f4e:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <MX_TIM4_Init+0xa4>)
 8003f50:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <MX_TIM4_Init+0xa8>)
 8003f52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f54:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <MX_TIM4_Init+0xa4>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <MX_TIM4_Init+0xa4>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8003f60:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <MX_TIM4_Init+0xa4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f66:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <MX_TIM4_Init+0xa4>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <MX_TIM4_Init+0xa4>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <MX_TIM4_Init+0xac>)
 8003f74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f96:	f107 030c 	add.w	r3, r7, #12
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	480d      	ldr	r0, [pc, #52]	; (8003fd4 <MX_TIM4_Init+0xa4>)
 8003f9e:	f004 fcd2 	bl	8008946 <HAL_TIM_Encoder_Init>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003fa8:	f7ff fd16 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENCODER_CLK;
 8003fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4806      	ldr	r0, [pc, #24]	; (8003fd4 <MX_TIM4_Init+0xa4>)
 8003fbc:	f006 f854 	bl	800a068 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003fc6:	f7ff fd07 	bl	80039d8 <Error_Handler>
  }

}
 8003fca:	bf00      	nop
 8003fcc:	3730      	adds	r7, #48	; 0x30
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000684 	.word	0x20000684
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	00010006 	.word	0x00010006

08003fe0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b09e      	sub	sp, #120	; 0x78
 8003fe4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fe6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003ff4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004010:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	2234      	movs	r2, #52	; 0x34
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f008 fcec 	bl	800ca02 <memset>

  htim8.Instance = TIM8;
 800402a:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <MX_TIM8_Init+0x144>)
 800402c:	4a3e      	ldr	r2, [pc, #248]	; (8004128 <MX_TIM8_Init+0x148>)
 800402e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004030:	4b3c      	ldr	r3, [pc, #240]	; (8004124 <MX_TIM8_Init+0x144>)
 8004032:	2200      	movs	r2, #0
 8004034:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004036:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <MX_TIM8_Init+0x144>)
 8004038:	2200      	movs	r2, #0
 800403a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800403c:	4b39      	ldr	r3, [pc, #228]	; (8004124 <MX_TIM8_Init+0x144>)
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <MX_TIM8_Init+0x144>)
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <MX_TIM8_Init+0x144>)
 800404a:	2200      	movs	r2, #0
 800404c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800404e:	4b35      	ldr	r3, [pc, #212]	; (8004124 <MX_TIM8_Init+0x144>)
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004054:	4833      	ldr	r0, [pc, #204]	; (8004124 <MX_TIM8_Init+0x144>)
 8004056:	f004 f8c1 	bl	80081dc <HAL_TIM_Base_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8004060:	f7ff fcba 	bl	80039d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004068:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800406a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800406e:	4619      	mov	r1, r3
 8004070:	482c      	ldr	r0, [pc, #176]	; (8004124 <MX_TIM8_Init+0x144>)
 8004072:	f004 ffe5 	bl	8009040 <HAL_TIM_ConfigClockSource>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_TIM8_Init+0xa0>
  {
    Error_Handler();
 800407c:	f7ff fcac 	bl	80039d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8004080:	4828      	ldr	r0, [pc, #160]	; (8004124 <MX_TIM8_Init+0x144>)
 8004082:	f004 facb 	bl	800861c <HAL_TIM_IC_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 800408c:	f7ff fca4 	bl	80039d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004090:	2304      	movs	r3, #4
 8004092:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8004094:	2360      	movs	r3, #96	; 0x60
 8004096:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004098:	2300      	movs	r3, #0
 800409a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.TriggerFilter = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80040a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040a4:	4619      	mov	r1, r3
 80040a6:	481f      	ldr	r0, [pc, #124]	; (8004124 <MX_TIM8_Init+0x144>)
 80040a8:	f005 f8a8 	bl	80091fc <HAL_TIM_SlaveConfigSynchro>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80040b2:	f7ff fc91 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80040c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040c6:	4619      	mov	r1, r3
 80040c8:	4816      	ldr	r0, [pc, #88]	; (8004124 <MX_TIM8_Init+0x144>)
 80040ca:	f005 ffcd 	bl	800a068 <HAL_TIMEx_MasterConfigSynchronization>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80040d4:	f7ff fc80 	bl	80039d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80040d8:	2300      	movs	r3, #0
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80040dc:	2301      	movs	r3, #1
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80040e0:	2300      	movs	r3, #0
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80040e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040ec:	2204      	movs	r2, #4
 80040ee:	4619      	mov	r1, r3
 80040f0:	480c      	ldr	r0, [pc, #48]	; (8004124 <MX_TIM8_Init+0x144>)
 80040f2:	f004 fe01 	bl	8008cf8 <HAL_TIM_IC_ConfigChannel>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80040fc:	f7ff fc6c 	bl	80039d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004100:	2300      	movs	r3, #0
 8004102:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004104:	2300      	movs	r3, #0
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4805      	ldr	r0, [pc, #20]	; (8004124 <MX_TIM8_Init+0x144>)
 800410e:	f006 f82d 	bl	800a16c <HAL_TIMEx_ConfigBreakDeadTime>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8004118:	f7ff fc5e 	bl	80039d8 <Error_Handler>
  }

}
 800411c:	bf00      	nop
 800411e:	3778      	adds	r7, #120	; 0x78
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000638 	.word	0x20000638
 8004128:	40013400 	.word	0x40013400

0800412c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a20      	ldr	r2, [pc, #128]	; (80041cc <HAL_TIM_Base_MspInit+0xa0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d10c      	bne.n	8004168 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800414e:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_TIM_Base_MspInit+0xa4>)
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	4a1f      	ldr	r2, [pc, #124]	; (80041d0 <HAL_TIM_Base_MspInit+0xa4>)
 8004154:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004158:	6613      	str	r3, [r2, #96]	; 0x60
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <HAL_TIM_Base_MspInit+0xa4>)
 800415c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004166:	e02d      	b.n	80041c4 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM8)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <HAL_TIM_Base_MspInit+0xa8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d128      	bne.n	80041c4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004172:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <HAL_TIM_Base_MspInit+0xa4>)
 8004174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <HAL_TIM_Base_MspInit+0xa4>)
 8004178:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800417c:	6613      	str	r3, [r2, #96]	; 0x60
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_TIM_Base_MspInit+0xa4>)
 8004180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800418a:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <HAL_TIM_Base_MspInit+0xa4>)
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	4a10      	ldr	r2, [pc, #64]	; (80041d0 <HAL_TIM_Base_MspInit+0xa4>)
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004196:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <HAL_TIM_Base_MspInit+0xa4>)
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	2302      	movs	r3, #2
 80041aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041ac:	2302      	movs	r3, #2
 80041ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041b0:	2302      	movs	r3, #2
 80041b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80041b4:	230a      	movs	r3, #10
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	4619      	mov	r1, r3
 80041be:	4806      	ldr	r0, [pc, #24]	; (80041d8 <HAL_TIM_Base_MspInit+0xac>)
 80041c0:	f002 fa7a 	bl	80066b8 <HAL_GPIO_Init>
}
 80041c4:	bf00      	nop
 80041c6:	3728      	adds	r7, #40	; 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40013400 	.word	0x40013400
 80041d8:	48000400 	.word	0x48000400

080041dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e4:	f107 0314 	add.w	r3, r7, #20
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a17      	ldr	r2, [pc, #92]	; (8004258 <HAL_TIM_Encoder_MspInit+0x7c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d127      	bne.n	800424e <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041fe:	4b17      	ldr	r3, [pc, #92]	; (800425c <HAL_TIM_Encoder_MspInit+0x80>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	4a16      	ldr	r2, [pc, #88]	; (800425c <HAL_TIM_Encoder_MspInit+0x80>)
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	6593      	str	r3, [r2, #88]	; 0x58
 800420a:	4b14      	ldr	r3, [pc, #80]	; (800425c <HAL_TIM_Encoder_MspInit+0x80>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_TIM_Encoder_MspInit+0x80>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	4a10      	ldr	r2, [pc, #64]	; (800425c <HAL_TIM_Encoder_MspInit+0x80>)
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_TIM_Encoder_MspInit+0x80>)
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 800422e:	23c0      	movs	r3, #192	; 0xc0
 8004230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004232:	2302      	movs	r3, #2
 8004234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004236:	2302      	movs	r3, #2
 8004238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800423a:	2302      	movs	r3, #2
 800423c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800423e:	2302      	movs	r3, #2
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004242:	f107 0314 	add.w	r3, r7, #20
 8004246:	4619      	mov	r1, r3
 8004248:	4805      	ldr	r0, [pc, #20]	; (8004260 <HAL_TIM_Encoder_MspInit+0x84>)
 800424a:	f002 fa35 	bl	80066b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800424e:	bf00      	nop
 8004250:	3728      	adds	r7, #40	; 0x28
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40000800 	.word	0x40000800
 800425c:	40021000 	.word	0x40021000
 8004260:	48000400 	.word	0x48000400

08004264 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800426c:	f107 0314 	add.w	r3, r7, #20
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	60da      	str	r2, [r3, #12]
 800427a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a38      	ldr	r2, [pc, #224]	; (8004364 <HAL_TIM_MspPostInit+0x100>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d169      	bne.n	800435a <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004286:	4b38      	ldr	r3, [pc, #224]	; (8004368 <HAL_TIM_MspPostInit+0x104>)
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	4a37      	ldr	r2, [pc, #220]	; (8004368 <HAL_TIM_MspPostInit+0x104>)
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004292:	4b35      	ldr	r3, [pc, #212]	; (8004368 <HAL_TIM_MspPostInit+0x104>)
 8004294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800429e:	4b32      	ldr	r3, [pc, #200]	; (8004368 <HAL_TIM_MspPostInit+0x104>)
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	4a31      	ldr	r2, [pc, #196]	; (8004368 <HAL_TIM_MspPostInit+0x104>)
 80042a4:	f043 0302 	orr.w	r3, r3, #2
 80042a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <HAL_TIM_MspPostInit+0x104>)
 80042ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b6:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <HAL_TIM_MspPostInit+0x104>)
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	4a2b      	ldr	r2, [pc, #172]	; (8004368 <HAL_TIM_MspPostInit+0x104>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042c2:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_TIM_MspPostInit+0x104>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80042ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d4:	2302      	movs	r3, #2
 80042d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042d8:	2302      	movs	r3, #2
 80042da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80042e0:	2304      	movs	r3, #4
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4619      	mov	r1, r3
 80042ea:	4820      	ldr	r0, [pc, #128]	; (800436c <HAL_TIM_MspPostInit+0x108>)
 80042ec:	f002 f9e4 	bl	80066b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042fa:	2302      	movs	r3, #2
 80042fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042fe:	2302      	movs	r3, #2
 8004300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004302:	2304      	movs	r3, #4
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	4619      	mov	r1, r3
 800430c:	4818      	ldr	r0, [pc, #96]	; (8004370 <HAL_TIM_MspPostInit+0x10c>)
 800430e:	f002 f9d3 	bl	80066b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8004312:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8004316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004318:	2302      	movs	r3, #2
 800431a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800431c:	2302      	movs	r3, #2
 800431e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004320:	2302      	movs	r3, #2
 8004322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004324:	2306      	movs	r3, #6
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	4619      	mov	r1, r3
 800432e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004332:	f002 f9c1 	bl	80066b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800433a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433c:	2302      	movs	r3, #2
 800433e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004344:	2300      	movs	r3, #0
 8004346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8004348:	230b      	movs	r3, #11
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	4619      	mov	r1, r3
 8004352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004356:	f002 f9af 	bl	80066b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800435a:	bf00      	nop
 800435c:	3728      	adds	r7, #40	; 0x28
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40021000 	.word	0x40021000
 800436c:	48000800 	.word	0x48000800
 8004370:	48000400 	.word	0x48000400

08004374 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <MX_USART2_UART_Init+0x90>)
 800437a:	4a23      	ldr	r2, [pc, #140]	; (8004408 <MX_USART2_UART_Init+0x94>)
 800437c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800437e:	4b21      	ldr	r3, [pc, #132]	; (8004404 <MX_USART2_UART_Init+0x90>)
 8004380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004386:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <MX_USART2_UART_Init+0x90>)
 8004388:	2200      	movs	r2, #0
 800438a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <MX_USART2_UART_Init+0x90>)
 800438e:	2200      	movs	r2, #0
 8004390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <MX_USART2_UART_Init+0x90>)
 8004394:	2200      	movs	r2, #0
 8004396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004398:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <MX_USART2_UART_Init+0x90>)
 800439a:	220c      	movs	r2, #12
 800439c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800439e:	4b19      	ldr	r3, [pc, #100]	; (8004404 <MX_USART2_UART_Init+0x90>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043a4:	4b17      	ldr	r3, [pc, #92]	; (8004404 <MX_USART2_UART_Init+0x90>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <MX_USART2_UART_Init+0x90>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <MX_USART2_UART_Init+0x90>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <MX_USART2_UART_Init+0x90>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043bc:	4811      	ldr	r0, [pc, #68]	; (8004404 <MX_USART2_UART_Init+0x90>)
 80043be:	f005 ff9a 	bl	800a2f6 <HAL_UART_Init>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80043c8:	f7ff fb06 	bl	80039d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043cc:	2100      	movs	r1, #0
 80043ce:	480d      	ldr	r0, [pc, #52]	; (8004404 <MX_USART2_UART_Init+0x90>)
 80043d0:	f007 ff81 	bl	800c2d6 <HAL_UARTEx_SetTxFifoThreshold>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80043da:	f7ff fafd 	bl	80039d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043de:	2100      	movs	r1, #0
 80043e0:	4808      	ldr	r0, [pc, #32]	; (8004404 <MX_USART2_UART_Init+0x90>)
 80043e2:	f007 ffb6 	bl	800c352 <HAL_UARTEx_SetRxFifoThreshold>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80043ec:	f7ff faf4 	bl	80039d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80043f0:	4804      	ldr	r0, [pc, #16]	; (8004404 <MX_USART2_UART_Init+0x90>)
 80043f2:	f007 ff37 	bl	800c264 <HAL_UARTEx_DisableFifoMode>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80043fc:	f7ff faec 	bl	80039d8 <Error_Handler>
  }

}
 8004400:	bf00      	nop
 8004402:	bd80      	pop	{r7, pc}
 8004404:	2000071c 	.word	0x2000071c
 8004408:	40004400 	.word	0x40004400

0800440c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <HAL_UART_MspInit+0x8c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d12f      	bne.n	800448e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800442e:	4b1b      	ldr	r3, [pc, #108]	; (800449c <HAL_UART_MspInit+0x90>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	4a1a      	ldr	r2, [pc, #104]	; (800449c <HAL_UART_MspInit+0x90>)
 8004434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004438:	6593      	str	r3, [r2, #88]	; 0x58
 800443a:	4b18      	ldr	r3, [pc, #96]	; (800449c <HAL_UART_MspInit+0x90>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <HAL_UART_MspInit+0x90>)
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	4a14      	ldr	r2, [pc, #80]	; (800449c <HAL_UART_MspInit+0x90>)
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <HAL_UART_MspInit+0x90>)
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800445e:	2318      	movs	r3, #24
 8004460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004462:	2302      	movs	r3, #2
 8004464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800446a:	2302      	movs	r3, #2
 800446c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800446e:	2307      	movs	r3, #7
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004472:	f107 0314 	add.w	r3, r7, #20
 8004476:	4619      	mov	r1, r3
 8004478:	4809      	ldr	r0, [pc, #36]	; (80044a0 <HAL_UART_MspInit+0x94>)
 800447a:	f002 f91d 	bl	80066b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	2100      	movs	r1, #0
 8004482:	2026      	movs	r0, #38	; 0x26
 8004484:	f002 f87d 	bl	8006582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004488:	2026      	movs	r0, #38	; 0x26
 800448a:	f002 f894 	bl	80065b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800448e:	bf00      	nop
 8004490:	3728      	adds	r7, #40	; 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40004400 	.word	0x40004400
 800449c:	40021000 	.word	0x40021000
 80044a0:	48000400 	.word	0x48000400

080044a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044a4:	480d      	ldr	r0, [pc, #52]	; (80044dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044a8:	480d      	ldr	r0, [pc, #52]	; (80044e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80044aa:	490e      	ldr	r1, [pc, #56]	; (80044e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044ac:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <LoopForever+0xe>)
  movs r3, #0
 80044ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80044b0:	e002      	b.n	80044b8 <LoopCopyDataInit>

080044b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b6:	3304      	adds	r3, #4

080044b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044bc:	d3f9      	bcc.n	80044b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044be:	4a0b      	ldr	r2, [pc, #44]	; (80044ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80044c0:	4c0b      	ldr	r4, [pc, #44]	; (80044f0 <LoopForever+0x16>)
  movs r3, #0
 80044c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c4:	e001      	b.n	80044ca <LoopFillZerobss>

080044c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c8:	3204      	adds	r2, #4

080044ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044cc:	d3fb      	bcc.n	80044c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044ce:	f7ff fc39 	bl	8003d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044d2:	f008 fa37 	bl	800c944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044d6:	f7ff f9f3 	bl	80038c0 <main>

080044da <LoopForever>:

LoopForever:
    b LoopForever
 80044da:	e7fe      	b.n	80044da <LoopForever>
  ldr   r0, =_estack
 80044dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80044e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80044e8:	0800f644 	.word	0x0800f644
  ldr r2, =_sbss
 80044ec:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80044f0:	200007b0 	.word	0x200007b0

080044f4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044f4:	e7fe      	b.n	80044f4 <COMP1_2_3_IRQHandler>

080044f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004500:	2003      	movs	r0, #3
 8004502:	f002 f833 	bl	800656c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004506:	2000      	movs	r0, #0
 8004508:	f000 f80e 	bl	8004528 <HAL_InitTick>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	71fb      	strb	r3, [r7, #7]
 8004516:	e001      	b.n	800451c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004518:	f7ff fb76 	bl	8003c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800451c:	79fb      	ldrb	r3, [r7, #7]

}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <HAL_InitTick+0x68>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d022      	beq.n	8004582 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800453c:	4b15      	ldr	r3, [pc, #84]	; (8004594 <HAL_InitTick+0x6c>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_InitTick+0x68>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004548:	fbb1 f3f3 	udiv	r3, r1, r3
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	4618      	mov	r0, r3
 8004552:	f002 f83e 	bl	80065d2 <HAL_SYSTICK_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10f      	bne.n	800457c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	d809      	bhi.n	8004576 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004562:	2200      	movs	r2, #0
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	f04f 30ff 	mov.w	r0, #4294967295
 800456a:	f002 f80a 	bl	8006582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_InitTick+0x70>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e007      	b.n	8004586 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	e004      	b.n	8004586 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e001      	b.n	8004586 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000014 	.word	0x20000014
 8004594:	2000000c 	.word	0x2000000c
 8004598:	20000010 	.word	0x20000010

0800459c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_IncTick+0x1c>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_IncTick+0x20>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4413      	add	r3, r2
 80045aa:	4a03      	ldr	r2, [pc, #12]	; (80045b8 <HAL_IncTick+0x1c>)
 80045ac:	6013      	str	r3, [r2, #0]
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	200007a8 	.word	0x200007a8
 80045bc:	20000014 	.word	0x20000014

080045c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return uwTick;
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <HAL_GetTick+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	200007a8 	.word	0x200007a8

080045d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e0:	f7ff ffee 	bl	80045c0 <HAL_GetTick>
 80045e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d004      	beq.n	80045fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_Delay+0x40>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045fc:	bf00      	nop
 80045fe:	f7ff ffdf 	bl	80045c0 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	429a      	cmp	r2, r3
 800460c:	d8f7      	bhi.n	80045fe <HAL_Delay+0x26>
  {
  }
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000014 	.word	0x20000014

0800461c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	609a      	str	r2, [r3, #8]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004674:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 031f 	and.w	r3, r3, #31
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80046d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6093      	str	r3, [r2, #8]
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046fe:	d101      	bne.n	8004704 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004722:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004726:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800474e:	d101      	bne.n	8004754 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004772:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004776:	f043 0201 	orr.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800479a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800479e:	f043 0202 	orr.w	r2, r3, #2
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <LL_ADC_IsEnabled+0x18>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <LL_ADC_IsEnabled+0x1a>
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d101      	bne.n	80047f0 <LL_ADC_IsDisableOngoing+0x18>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <LL_ADC_IsDisableOngoing+0x1a>
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800480e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004812:	f043 0210 	orr.w	r2, r3, #16
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b04      	cmp	r3, #4
 8004838:	d101      	bne.n	800483e <LL_ADC_REG_IsConversionOngoing+0x18>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800485c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b08      	cmp	r3, #8
 8004886:	d101      	bne.n	800488c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b089      	sub	sp, #36	; 0x24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e16b      	b.n	8004b8e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d109      	bne.n	80048d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fc fc3b 	bl	8001140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ff04 	bl	80046ea <LL_ADC_IsDeepPowerDownEnabled>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff feea 	bl	80046c6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff ff1f 	bl	800473a <LL_ADC_IsInternalRegulatorEnabled>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d113      	bne.n	800492a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff ff03 	bl	8004712 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800490c:	4ba2      	ldr	r3, [pc, #648]	; (8004b98 <HAL_ADC_Init+0x2fc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	099b      	lsrs	r3, r3, #6
 8004912:	4aa2      	ldr	r2, [pc, #648]	; (8004b9c <HAL_ADC_Init+0x300>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	099b      	lsrs	r3, r3, #6
 800491a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800491c:	e002      	b.n	8004924 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	3b01      	subs	r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f9      	bne.n	800491e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ff03 	bl	800473a <LL_ADC_IsInternalRegulatorEnabled>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10d      	bne.n	8004956 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493e:	f043 0210 	orr.w	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494a:	f043 0201 	orr.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff63 	bl	8004826 <LL_ADC_REG_IsConversionOngoing>
 8004960:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 8106 	bne.w	8004b7c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f040 8102 	bne.w	8004b7c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004980:	f043 0202 	orr.w	r2, r3, #2
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff ff10 	bl	80047b2 <LL_ADC_IsEnabled>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d111      	bne.n	80049bc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004998:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800499c:	f7ff ff09 	bl	80047b2 <LL_ADC_IsEnabled>
 80049a0:	4604      	mov	r4, r0
 80049a2:	487f      	ldr	r0, [pc, #508]	; (8004ba0 <HAL_ADC_Init+0x304>)
 80049a4:	f7ff ff05 	bl	80047b2 <LL_ADC_IsEnabled>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4323      	orrs	r3, r4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	4619      	mov	r1, r3
 80049b6:	487b      	ldr	r0, [pc, #492]	; (8004ba4 <HAL_ADC_Init+0x308>)
 80049b8:	f7ff fe30 	bl	800461c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	7f5b      	ldrb	r3, [r3, #29]
 80049c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80049cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80049d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d106      	bne.n	80049f8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	3b01      	subs	r3, #1
 80049f0:	045b      	lsls	r3, r3, #17
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	4b63      	ldr	r3, [pc, #396]	; (8004ba8 <HAL_ADC_Init+0x30c>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	69b9      	ldr	r1, [r7, #24]
 8004a24:	430b      	orrs	r3, r1
 8004a26:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff feef 	bl	8004826 <LL_ADC_REG_IsConversionOngoing>
 8004a48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff ff10 	bl	8004874 <LL_ADC_INJ_IsConversionOngoing>
 8004a54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d16d      	bne.n	8004b38 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d16a      	bne.n	8004b38 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a6e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a7e:	f023 0302 	bic.w	r3, r3, #2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	69b9      	ldr	r1, [r7, #24]
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d017      	beq.n	8004ac4 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004aa2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004aac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004ab0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6911      	ldr	r1, [r2, #16]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004ac2:	e013      	b.n	8004aec <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ad2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ae8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d118      	bne.n	8004b28 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b12:	4311      	orrs	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
 8004b26:	e007      	b.n	8004b38 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10c      	bne.n	8004b5a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f023 010f 	bic.w	r1, r3, #15
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	1e5a      	subs	r2, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
 8004b58:	e007      	b.n	8004b6a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 020f 	bic.w	r2, r2, #15
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	f043 0201 	orr.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b7a:	e007      	b.n	8004b8c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b80:	f043 0210 	orr.w	r2, r3, #16
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3724      	adds	r7, #36	; 0x24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd90      	pop	{r4, r7, pc}
 8004b96:	bf00      	nop
 8004b98:	2000000c 	.word	0x2000000c
 8004b9c:	053e2d63 	.word	0x053e2d63
 8004ba0:	50000100 	.word	0x50000100
 8004ba4:	50000300 	.word	0x50000300
 8004ba8:	fff04007 	.word	0xfff04007

08004bac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bc8:	4883      	ldr	r0, [pc, #524]	; (8004dd8 <HAL_ADC_IRQHandler+0x22c>)
 8004bca:	f7ff fd60 	bl	800468e <LL_ADC_GetMultimode>
 8004bce:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d017      	beq.n	8004c0a <HAL_ADC_IRQHandler+0x5e>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d012      	beq.n	8004c0a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fee3 	bl	80059c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2202      	movs	r2, #2
 8004c08:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <HAL_ADC_IRQHandler+0x72>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8085 	beq.w	8004d34 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d07f      	beq.n	8004d34 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fcf6 	bl	8004642 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d064      	beq.n	8004d26 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a5e      	ldr	r2, [pc, #376]	; (8004ddc <HAL_ADC_IRQHandler+0x230>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d002      	beq.n	8004c6c <HAL_ADC_IRQHandler+0xc0>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	e001      	b.n	8004c70 <HAL_ADC_IRQHandler+0xc4>
 8004c6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d008      	beq.n	8004c8a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b05      	cmp	r3, #5
 8004c82:	d002      	beq.n	8004c8a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b09      	cmp	r3, #9
 8004c88:	d104      	bne.n	8004c94 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	623b      	str	r3, [r7, #32]
 8004c92:	e00d      	b.n	8004cb0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a50      	ldr	r2, [pc, #320]	; (8004ddc <HAL_ADC_IRQHandler+0x230>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d002      	beq.n	8004ca4 <HAL_ADC_IRQHandler+0xf8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	e001      	b.n	8004ca8 <HAL_ADC_IRQHandler+0xfc>
 8004ca4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ca8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d135      	bne.n	8004d26 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d12e      	bne.n	8004d26 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fdaa 	bl	8004826 <LL_ADC_REG_IsConversionOngoing>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11a      	bne.n	8004d0e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 020c 	bic.w	r2, r2, #12
 8004ce6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d112      	bne.n	8004d26 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	f043 0201 	orr.w	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d0c:	e00b      	b.n	8004d26 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d12:	f043 0210 	orr.w	r2, r3, #16
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1e:	f043 0201 	orr.w	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f95a 	bl	8004fe0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	220c      	movs	r2, #12
 8004d32:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <HAL_ADC_IRQHandler+0x19c>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 809e 	beq.w	8004e90 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8098 	beq.w	8004e90 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fc73 	bl	8004668 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004d82:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fc5a 	bl	8004642 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d8e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <HAL_ADC_IRQHandler+0x230>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d002      	beq.n	8004da0 <HAL_ADC_IRQHandler+0x1f4>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	e001      	b.n	8004da4 <HAL_ADC_IRQHandler+0x1f8>
 8004da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d008      	beq.n	8004dbe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b06      	cmp	r3, #6
 8004db6:	d002      	beq.n	8004dbe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b07      	cmp	r3, #7
 8004dbc:	d104      	bne.n	8004dc8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	e011      	b.n	8004dec <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a03      	ldr	r2, [pc, #12]	; (8004ddc <HAL_ADC_IRQHandler+0x230>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d006      	beq.n	8004de0 <HAL_ADC_IRQHandler+0x234>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	e005      	b.n	8004de4 <HAL_ADC_IRQHandler+0x238>
 8004dd8:	50000300 	.word	0x50000300
 8004ddc:	50000100 	.word	0x50000100
 8004de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004de4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10c      	bne.n	8004e0c <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d142      	bne.n	8004e82 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d03f      	beq.n	8004e82 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d13a      	bne.n	8004e82 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d133      	bne.n	8004e82 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d12e      	bne.n	8004e82 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fd23 	bl	8004874 <LL_ADC_INJ_IsConversionOngoing>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d11a      	bne.n	8004e6a <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d112      	bne.n	8004e82 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e60:	f043 0201 	orr.w	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e68:	e00b      	b.n	8004e82 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6e:	f043 0210 	orr.w	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fe f8f8 	bl	8003078 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2260      	movs	r2, #96	; 0x60
 8004e8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d011      	beq.n	8004ebe <HAL_ADC_IRQHandler+0x312>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f89f 	bl	8004ff4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2280      	movs	r2, #128	; 0x80
 8004ebc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d012      	beq.n	8004eee <HAL_ADC_IRQHandler+0x342>
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fd5e 	bl	80059a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d012      	beq.n	8004f1e <HAL_ADC_IRQHandler+0x372>
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00d      	beq.n	8004f1e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fd50 	bl	80059b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d036      	beq.n	8004f96 <HAL_ADC_IRQHandler+0x3ea>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d031      	beq.n	8004f96 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	e014      	b.n	8004f6a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004f46:	4825      	ldr	r0, [pc, #148]	; (8004fdc <HAL_ADC_IRQHandler+0x430>)
 8004f48:	f7ff fbaf 	bl	80046aa <LL_ADC_GetMultiDMATransfer>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004f52:	2301      	movs	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
 8004f56:	e008      	b.n	8004f6a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004f66:	2301      	movs	r3, #1
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10e      	bne.n	8004f8e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f80:	f043 0202 	orr.w	r2, r3, #2
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f83d 	bl	8005008 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2210      	movs	r2, #16
 8004f94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d018      	beq.n	8004fd2 <HAL_ADC_IRQHandler+0x426>
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d013      	beq.n	8004fd2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fae:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fba:	f043 0208 	orr.w	r2, r3, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fcdd 	bl	800598c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004fd2:	bf00      	nop
 8004fd4:	3728      	adds	r7, #40	; 0x28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	50000300 	.word	0x50000300

08004fe0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fbf7 	bl	8004826 <LL_ADC_REG_IsConversionOngoing>
 8005038:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff fc18 	bl	8004874 <LL_ADC_INJ_IsConversionOngoing>
 8005044:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8090 	beq.w	8005174 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d02a      	beq.n	80050b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	7f5b      	ldrb	r3, [r3, #29]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d126      	bne.n	80050b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7f1b      	ldrb	r3, [r3, #28]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d122      	bne.n	80050b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005072:	2301      	movs	r3, #1
 8005074:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005076:	e014      	b.n	80050a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4a41      	ldr	r2, [pc, #260]	; (8005180 <ADC_ConversionStop+0x164>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d90d      	bls.n	800509c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	f043 0210 	orr.w	r2, r3, #16
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005090:	f043 0201 	orr.w	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e06c      	b.n	8005176 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	3301      	adds	r3, #1
 80050a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d1e3      	bne.n	8005078 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2240      	movs	r2, #64	; 0x40
 80050b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d014      	beq.n	80050e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fbaf 	bl	8004826 <LL_ADC_REG_IsConversionOngoing>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fb80 	bl	80047d8 <LL_ADC_IsDisableOngoing>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fb8b 	bl	80047fe <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d014      	beq.n	8005118 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fbbe 	bl	8004874 <LL_ADC_INJ_IsConversionOngoing>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fb68 	bl	80047d8 <LL_ADC_IsDisableOngoing>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d104      	bne.n	8005118 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fb9a 	bl	800484c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d004      	beq.n	8005128 <ADC_ConversionStop+0x10c>
 800511e:	2b03      	cmp	r3, #3
 8005120:	d105      	bne.n	800512e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005122:	230c      	movs	r3, #12
 8005124:	617b      	str	r3, [r7, #20]
        break;
 8005126:	e005      	b.n	8005134 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005128:	2308      	movs	r3, #8
 800512a:	617b      	str	r3, [r7, #20]
        break;
 800512c:	e002      	b.n	8005134 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800512e:	2304      	movs	r3, #4
 8005130:	617b      	str	r3, [r7, #20]
        break;
 8005132:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005134:	f7ff fa44 	bl	80045c0 <HAL_GetTick>
 8005138:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800513a:	e014      	b.n	8005166 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800513c:	f7ff fa40 	bl	80045c0 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b05      	cmp	r3, #5
 8005148:	d90d      	bls.n	8005166 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514e:	f043 0210 	orr.w	r2, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515a:	f043 0201 	orr.w	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e007      	b.n	8005176 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e3      	bne.n	800513c <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	a33fffff 	.word	0xa33fffff

08005184 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fb0e 	bl	80047b2 <LL_ADC_IsEnabled>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d146      	bne.n	800522a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	4b24      	ldr	r3, [pc, #144]	; (8005234 <ADC_Enable+0xb0>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ae:	f043 0210 	orr.w	r2, r3, #16
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e032      	b.n	800522c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff fac9 	bl	8004762 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80051d0:	f7ff f9f6 	bl	80045c0 <HAL_GetTick>
 80051d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051d6:	e021      	b.n	800521c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fae8 	bl	80047b2 <LL_ADC_IsEnabled>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fab8 	bl	8004762 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051f2:	f7ff f9e5 	bl	80045c0 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d90d      	bls.n	800521c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	f043 0210 	orr.w	r2, r3, #16
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005210:	f043 0201 	orr.w	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e007      	b.n	800522c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b01      	cmp	r3, #1
 8005228:	d1d6      	bne.n	80051d8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	8000003f 	.word	0x8000003f

08005238 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fac7 	bl	80047d8 <LL_ADC_IsDisableOngoing>
 800524a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff faae 	bl	80047b2 <LL_ADC_IsEnabled>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d040      	beq.n	80052de <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d13d      	bne.n	80052de <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 030d 	and.w	r3, r3, #13
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10c      	bne.n	800528a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fa88 	bl	800478a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2203      	movs	r2, #3
 8005280:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005282:	f7ff f99d 	bl	80045c0 <HAL_GetTick>
 8005286:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005288:	e022      	b.n	80052d0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528e:	f043 0210 	orr.w	r2, r3, #16
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529a:	f043 0201 	orr.w	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e01c      	b.n	80052e0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052a6:	f7ff f98b 	bl	80045c0 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d90d      	bls.n	80052d0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b8:	f043 0210 	orr.w	r2, r3, #16
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c4:	f043 0201 	orr.w	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e007      	b.n	80052e0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e3      	bne.n	80052a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <LL_ADC_SetCommonPathInternalCh>:
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	609a      	str	r2, [r3, #8]
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <LL_ADC_GetCommonPathInternalCh>:
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <LL_ADC_SetOffset>:
{
 800532c:	b490      	push	{r4, r7}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3360      	adds	r3, #96	; 0x60
 800533e:	461a      	mov	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <LL_ADC_SetOffset+0x40>)
 800534c:	4013      	ands	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	4313      	orrs	r3, r2
 800535a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800535e:	6023      	str	r3, [r4, #0]
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bc90      	pop	{r4, r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	03fff000 	.word	0x03fff000

08005370 <LL_ADC_GetOffsetChannel>:
{
 8005370:	b490      	push	{r4, r7}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3360      	adds	r3, #96	; 0x60
 800537e:	461a      	mov	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bc90      	pop	{r4, r7}
 8005396:	4770      	bx	lr

08005398 <LL_ADC_SetOffsetState>:
{
 8005398:	b490      	push	{r4, r7}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3360      	adds	r3, #96	; 0x60
 80053a8:	461a      	mov	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	6023      	str	r3, [r4, #0]
}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc90      	pop	{r4, r7}
 80053c6:	4770      	bx	lr

080053c8 <LL_ADC_SetOffsetSign>:
{
 80053c8:	b490      	push	{r4, r7}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3360      	adds	r3, #96	; 0x60
 80053d8:	461a      	mov	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	6023      	str	r3, [r4, #0]
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc90      	pop	{r4, r7}
 80053f6:	4770      	bx	lr

080053f8 <LL_ADC_SetOffsetSaturation>:
{
 80053f8:	b490      	push	{r4, r7}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3360      	adds	r3, #96	; 0x60
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4313      	orrs	r3, r2
 800541c:	6023      	str	r3, [r4, #0]
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bc90      	pop	{r4, r7}
 8005426:	4770      	bx	lr

08005428 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	615a      	str	r2, [r3, #20]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_ADC_INJ_GetTrigAuto>:
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <LL_ADC_SetChannelSamplingTime>:
{
 800546a:	b490      	push	{r4, r7}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3314      	adds	r3, #20
 800547a:	461a      	mov	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	0e5b      	lsrs	r3, r3, #25
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	4413      	add	r3, r2
 8005488:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	0d1b      	lsrs	r3, r3, #20
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2107      	movs	r1, #7
 8005496:	fa01 f303 	lsl.w	r3, r1, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	401a      	ands	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	0d1b      	lsrs	r3, r3, #20
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	4313      	orrs	r3, r2
 80054ae:	6023      	str	r3, [r4, #0]
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc90      	pop	{r4, r7}
 80054b8:	4770      	bx	lr
	...

080054bc <LL_ADC_SetChannelSingleDiff>:
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d4:	43db      	mvns	r3, r3
 80054d6:	401a      	ands	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f003 0318 	and.w	r3, r3, #24
 80054de:	4908      	ldr	r1, [pc, #32]	; (8005500 <LL_ADC_SetChannelSingleDiff+0x44>)
 80054e0:	40d9      	lsrs	r1, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	400b      	ands	r3, r1
 80054e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ea:	431a      	orrs	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	0007ffff 	.word	0x0007ffff

08005504 <LL_ADC_GetMultimode>:
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 031f 	and.w	r3, r3, #31
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LL_ADC_IsEnabled>:
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <LL_ADC_IsEnabled+0x18>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <LL_ADC_IsEnabled+0x1a>
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <LL_ADC_StartCalibration>:
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005562:	4313      	orrs	r3, r2
 8005564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <LL_ADC_IsCalibrationOnGoing>:
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558c:	d101      	bne.n	8005592 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_ADC_REG_IsConversionOngoing>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d101      	bne.n	80055b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_ADC_INJ_StartConversion>:
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055da:	f043 0208 	orr.w	r2, r3, #8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	609a      	str	r2, [r3, #8]
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <LL_ADC_INJ_IsConversionOngoing>:
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d101      	bne.n	8005606 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_ADCEx_Calibration_Start+0x1c>
 800562c:	2302      	movs	r3, #2
 800562e:	e04d      	b.n	80056cc <HAL_ADCEx_Calibration_Start+0xb8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff fdfd 	bl	8005238 <ADC_Disable>
 800563e:	4603      	mov	r3, r0
 8005640:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d136      	bne.n	80056b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005650:	f023 0302 	bic.w	r3, r3, #2
 8005654:	f043 0202 	orr.w	r2, r3, #2
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff ff6f 	bl	8005546 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005668:	e014      	b.n	8005694 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	3301      	adds	r3, #1
 800566e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d90d      	bls.n	8005694 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567c:	f023 0312 	bic.w	r3, r3, #18
 8005680:	f043 0210 	orr.w	r2, r3, #16
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e01b      	b.n	80056cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ff6d 	bl	8005578 <LL_ADC_IsCalibrationOnGoing>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e2      	bne.n	800566a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a8:	f023 0303 	bic.w	r3, r3, #3
 80056ac:	f043 0201 	orr.w	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80056b4:	e005      	b.n	80056c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ba:	f043 0210 	orr.w	r2, r3, #16
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	0004de01 	.word	0x0004de01

080056d8 <HAL_ADCEx_InjectedStop>:
  *         has already stopped conversion of ADC slave).
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef *hadc)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_ADCEx_InjectedStop+0x16>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e032      	b.n	8005754 <HAL_ADCEx_InjectedStop+0x7c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going on injected group only. */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 80056f6:	2102      	movs	r1, #2
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fc8f 	bl	800501c <ADC_ConversionStop>
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if injected conversions are effectively stopped   */
  /* and if no conversion on regular group is on-going                       */
  if (tmp_hal_status == HAL_OK)
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d120      	bne.n	800574a <HAL_ADCEx_InjectedStop+0x72>
  {
    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ff47 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d112      	bne.n	800573e <HAL_ADCEx_InjectedStop+0x66>
    {
      /* 2. Disable the ADC peripheral */
      tmp_hal_status = ADC_Disable(hadc);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fd8d 	bl	8005238 <ADC_Disable>
 800571e:	4603      	mov	r3, r0
 8005720:	73fb      	strb	r3, [r7, #15]

      /* Check if ADC is effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d110      	bne.n	800574a <HAL_ADCEx_InjectedStop+0x72>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	f043 0201 	orr.w	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	65da      	str	r2, [r3, #92]	; 0x5c
 800573c:	e005      	b.n	800574a <HAL_ADCEx_InjectedStop+0x72>
    /* Conversion on injected group is stopped, but ADC not disabled since    */
    /* conversion on regular group is still running.                          */
    else
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005764:	486e      	ldr	r0, [pc, #440]	; (8005920 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8005766:	f7ff fecd 	bl	8005504 <LL_ADC_GetMultimode>
 800576a:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff ff3c 	bl	80055ee <LL_ADC_INJ_IsConversionOngoing>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 800577c:	2302      	movs	r3, #2
 800577e:	e0ca      	b.n	8005916 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800578a:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005792:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d107      	bne.n	80057b0 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0b2      	b.n	8005916 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_ADCEx_InjectedStart_IT+0x62>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e0ab      	b.n	8005916 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fcdc 	bl	8005184 <ADC_Enable>
 80057cc:	4603      	mov	r3, r0
 80057ce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f040 809a 	bne.w	800590c <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d006      	beq.n	80057f2 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e8:	f023 0208 	bic.w	r2, r3, #8
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	661a      	str	r2, [r3, #96]	; 0x60
 80057f0:	e002      	b.n	80057f8 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a44      	ldr	r2, [pc, #272]	; (8005924 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d002      	beq.n	800581c <HAL_ADCEx_InjectedStart_IT+0xc0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	e001      	b.n	8005820 <HAL_ADCEx_InjectedStart_IT+0xc4>
 800581c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	4293      	cmp	r3, r2
 8005826:	d002      	beq.n	800582e <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005832:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2260      	movs	r2, #96	; 0x60
 8005840:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005866:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b08      	cmp	r3, #8
 800586e:	d110      	bne.n	8005892 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0220 	bic.w	r2, r2, #32
 800587e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800588e:	605a      	str	r2, [r3, #4]
          break;
 8005890:	e010      	b.n	80058b4 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0220 	orr.w	r2, r2, #32
 80058b0:	605a      	str	r2, [r3, #4]
          break;
 80058b2:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d002      	beq.n	80058c4 <HAL_ADCEx_InjectedStart_IT+0x168>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	e001      	b.n	80058c8 <HAL_ADCEx_InjectedStart_IT+0x16c>
 80058c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d008      	beq.n	80058e2 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b06      	cmp	r3, #6
 80058da:	d002      	beq.n	80058e2 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b07      	cmp	r3, #7
 80058e0:	d10d      	bne.n	80058fe <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff fdb1 	bl	800544e <LL_ADC_INJ_GetTrigAuto>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d110      	bne.n	8005914 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fe65 	bl	80055c6 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80058fc:	e00a      	b.n	8005914 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005902:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	65da      	str	r2, [r3, #92]	; 0x5c
 800590a:	e003      	b.n	8005914 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	50000300 	.word	0x50000300
 8005924:	50000100 	.word	0x50000100

08005928 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	f240 2215 	movw	r2, #533	; 0x215
 8005938:	4293      	cmp	r3, r2
 800593a:	d00e      	beq.n	800595a <HAL_ADCEx_InjectedGetValue+0x32>
 800593c:	f240 321b 	movw	r2, #795	; 0x31b
 8005940:	4293      	cmp	r3, r2
 8005942:	d004      	beq.n	800594e <HAL_ADCEx_InjectedGetValue+0x26>
 8005944:	f240 120f 	movw	r2, #271	; 0x10f
 8005948:	4293      	cmp	r3, r2
 800594a:	d00c      	beq.n	8005966 <HAL_ADCEx_InjectedGetValue+0x3e>
 800594c:	e011      	b.n	8005972 <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005956:	60fb      	str	r3, [r7, #12]
      break;
 8005958:	e011      	b.n	800597e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	60fb      	str	r3, [r7, #12]
      break;
 8005964:	e00b      	b.n	800597e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596e:	60fb      	str	r3, [r7, #12]
      break;
 8005970:	e005      	b.n	800597e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800597a:	60fb      	str	r3, [r7, #12]
      break;
 800597c:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 800597e:	68fb      	ldr	r3, [r7, #12]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b0a8      	sub	sp, #160	; 0xa0
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d102      	bne.n	8005a06 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8005a00:	2302      	movs	r3, #2
 8005a02:	f000 bc39 	b.w	8006278 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d130      	bne.n	8005a80 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b09      	cmp	r3, #9
 8005a24:	d179      	bne.n	8005b1a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d010      	beq.n	8005a50 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	0e9b      	lsrs	r3, r3, #26
 8005a34:	025b      	lsls	r3, r3, #9
 8005a36:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005a42:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a4e:	e007      	b.n	8005a60 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	0e9b      	lsrs	r3, r3, #26
 8005a56:	025b      	lsls	r3, r3, #9
 8005a58:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8005a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a66:	4ba3      	ldr	r3, [pc, #652]	; (8005cf4 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8005a72:	430b      	orrs	r3, r1
 8005a74:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005a7c:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005a7e:	e04c      	b.n	8005b1a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d11d      	bne.n	8005ac4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	6a1a      	ldr	r2, [r3, #32]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005aac:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ab8:	e004      	b.n	8005ac4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	0e9b      	lsrs	r3, r3, #26
 8005aca:	f003 021f 	and.w	r2, r3, #31
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae8:	1e5a      	subs	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b0a:	4b7a      	ldr	r3, [pc, #488]	; (8005cf4 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	430b      	orrs	r3, r1
 8005b18:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fd65 	bl	80055ee <LL_ADC_INJ_IsConversionOngoing>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d124      	bne.n	8005b74 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d112      	bne.n	8005b5a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005b44:	055a      	lsls	r2, r3, #21
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b4c:	051b      	lsls	r3, r3, #20
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	e00c      	b.n	8005b74 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005b6a:	055a      	lsls	r2, r3, #21
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff fd11 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 8005b7e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fd31 	bl	80055ee <LL_ADC_INJ_IsConversionOngoing>
 8005b8c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 81d4 	bne.w	8005f42 <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f040 81cf 	bne.w	8005f42 <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d116      	bne.n	8005be2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d108      	bne.n	8005bd0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005bcc:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005bce:	e01f      	b.n	8005c10 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005bde:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005be0:	e016      	b.n	8005c10 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d109      	bne.n	8005c00 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf0:	f043 0220 	orr.w	r2, r3, #32
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8005bfe:	e007      	b.n	8005c10 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005c0e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d110      	bne.n	8005c3c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0202 	orr.w	r2, r2, #2
 8005c38:	611a      	str	r2, [r3, #16]
 8005c3a:	e007      	b.n	8005c4c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0202 	bic.w	r2, r2, #2
 8005c4a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c54:	d10f      	bne.n	8005c76 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4619      	mov	r1, r3
 8005c62:	f7ff fc02 	bl	800546a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fbda 	bl	8005428 <LL_ADC_SetSamplingTimeCommonConfig>
 8005c74:	e00e      	b.n	8005c94 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6819      	ldr	r1, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f7ff fbf1 	bl	800546a <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff fbca 	bl	8005428 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695a      	ldr	r2, [r3, #20]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	08db      	lsrs	r3, r3, #3
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d025      	beq.n	8005d02 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6919      	ldr	r1, [r3, #16]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cc6:	f7ff fb31 	bl	800532c <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6919      	ldr	r1, [r3, #16]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f7ff fb76 	bl	80053c8 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d105      	bne.n	8005cf8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8005cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cf0:	e003      	b.n	8005cfa <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8005cf2:	bf00      	nop
 8005cf4:	04104000 	.word	0x04104000
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f7ff fb7c 	bl	80053f8 <LL_ADC_SetOffsetSaturation>
 8005d00:	e11f      	b.n	8005f42 <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fb31 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fb26 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005d24:	4603      	mov	r3, r0
 8005d26:	0e9b      	lsrs	r3, r3, #26
 8005d28:	f003 021f 	and.w	r2, r3, #31
 8005d2c:	e014      	b.n	8005d58 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2100      	movs	r1, #0
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff fb1b 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d44:	fa93 f3a3 	rbit	r3, r3
 8005d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d50:	fab3 f383 	clz	r3, r3
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d105      	bne.n	8005d70 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	0e9b      	lsrs	r3, r3, #26
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	e00a      	b.n	8005d86 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d78:	fa93 f3a3 	rbit	r3, r3
 8005d7c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d80:	fab3 f383 	clz	r3, r3
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d106      	bne.n	8005d98 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fb00 	bl	8005398 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fae6 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2101      	movs	r1, #1
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fadb 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	0e9b      	lsrs	r3, r3, #26
 8005dbe:	f003 021f 	and.w	r2, r3, #31
 8005dc2:	e010      	b.n	8005de6 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2101      	movs	r1, #1
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fad0 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd6:	fa93 f3a3 	rbit	r3, r3
 8005dda:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dde:	fab3 f383 	clz	r3, r3
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d105      	bne.n	8005dfe <HAL_ADCEx_InjectedConfigChannel+0x422>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	0e9b      	lsrs	r3, r3, #26
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	e00a      	b.n	8005e14 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e06:	fa93 f3a3 	rbit	r3, r3
 8005e0a:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8005e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e0e:	fab3 f383 	clz	r3, r3
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d106      	bne.n	8005e26 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2101      	movs	r1, #1
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff fab9 	bl	8005398 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fa9f 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <HAL_ADCEx_InjectedConfigChannel+0x476>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2102      	movs	r1, #2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fa94 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	0e9b      	lsrs	r3, r3, #26
 8005e4c:	f003 021f 	and.w	r2, r3, #31
 8005e50:	e010      	b.n	8005e74 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2102      	movs	r1, #2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fa89 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e64:	fa93 f3a3 	rbit	r3, r3
 8005e68:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e6c:	fab3 f383 	clz	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	0e9b      	lsrs	r3, r3, #26
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	e00a      	b.n	8005ea2 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e94:	fa93 f3a3 	rbit	r3, r3
 8005e98:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e9c:	fab3 f383 	clz	r3, r3
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d106      	bne.n	8005eb4 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2102      	movs	r1, #2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fa72 	bl	8005398 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2103      	movs	r1, #3
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fa58 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <HAL_ADCEx_InjectedConfigChannel+0x504>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2103      	movs	r1, #3
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fa4d 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	0e9b      	lsrs	r3, r3, #26
 8005eda:	f003 021f 	and.w	r2, r3, #31
 8005ede:	e010      	b.n	8005f02 <HAL_ADCEx_InjectedConfigChannel+0x526>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2103      	movs	r1, #3
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff fa42 	bl	8005370 <LL_ADC_GetOffsetChannel>
 8005eec:	4603      	mov	r3, r0
 8005eee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef2:	fa93 f3a3 	rbit	r3, r3
 8005ef6:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8005ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005efa:	fab3 f383 	clz	r3, r3
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d105      	bne.n	8005f1a <HAL_ADCEx_InjectedConfigChannel+0x53e>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	0e9b      	lsrs	r3, r3, #26
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	e00a      	b.n	8005f30 <HAL_ADCEx_InjectedConfigChannel+0x554>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f22:	fa93 f3a3 	rbit	r3, r3
 8005f26:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2a:	fab3 f383 	clz	r3, r3
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d106      	bne.n	8005f42 <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2103      	movs	r1, #3
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fa2b 	bl	8005398 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff faea 	bl	8005520 <LL_ADC_IsEnabled>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 810c 	bne.w	800616c <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6819      	ldr	r1, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	461a      	mov	r2, r3
 8005f62:	f7ff faab 	bl	80054bc <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	4aab      	ldr	r2, [pc, #684]	; (8006218 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	f040 80fd 	bne.w	800616c <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	0e9b      	lsrs	r3, r3, #26
 8005f88:	3301      	adds	r3, #1
 8005f8a:	f003 031f 	and.w	r3, r3, #31
 8005f8e:	2b09      	cmp	r3, #9
 8005f90:	bf94      	ite	ls
 8005f92:	2301      	movls	r3, #1
 8005f94:	2300      	movhi	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	e012      	b.n	8005fc0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa2:	fa93 f3a3 	rbit	r3, r3
 8005fa6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005faa:	fab3 f383 	clz	r3, r3
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	bf94      	ite	ls
 8005fba:	2301      	movls	r3, #1
 8005fbc:	2300      	movhi	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d064      	beq.n	800608e <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	0e9b      	lsrs	r3, r3, #26
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	069b      	lsls	r3, r3, #26
 8005fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fde:	e00e      	b.n	8005ffe <HAL_ADCEx_InjectedConfigChannel+0x622>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe8:	fa93 f3a3 	rbit	r3, r3
 8005fec:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	fab3 f383 	clz	r3, r3
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	069b      	lsls	r3, r3, #26
 8005ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <HAL_ADCEx_InjectedConfigChannel+0x642>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	0e9b      	lsrs	r3, r3, #26
 8006010:	3301      	adds	r3, #1
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2101      	movs	r1, #1
 8006018:	fa01 f303 	lsl.w	r3, r1, r3
 800601c:	e010      	b.n	8006040 <HAL_ADCEx_InjectedConfigChannel+0x664>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006026:	fa93 f3a3 	rbit	r3, r3
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	fab3 f383 	clz	r3, r3
 8006032:	b2db      	uxtb	r3, r3
 8006034:	3301      	adds	r3, #1
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	2101      	movs	r1, #1
 800603c:	fa01 f303 	lsl.w	r3, r1, r3
 8006040:	ea42 0103 	orr.w	r1, r2, r3
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	0e9b      	lsrs	r3, r3, #26
 8006056:	3301      	adds	r3, #1
 8006058:	f003 021f 	and.w	r2, r3, #31
 800605c:	4613      	mov	r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4413      	add	r3, r2
 8006062:	051b      	lsls	r3, r3, #20
 8006064:	e011      	b.n	800608a <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	fa93 f3a3 	rbit	r3, r3
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	fab3 f383 	clz	r3, r3
 800607a:	b2db      	uxtb	r3, r3
 800607c:	3301      	adds	r3, #1
 800607e:	f003 021f 	and.w	r2, r3, #31
 8006082:	4613      	mov	r3, r2
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	4413      	add	r3, r2
 8006088:	051b      	lsls	r3, r3, #20
 800608a:	430b      	orrs	r3, r1
 800608c:	e069      	b.n	8006162 <HAL_ADCEx_InjectedConfigChannel+0x786>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006096:	2b00      	cmp	r3, #0
 8006098:	d107      	bne.n	80060aa <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	0e9b      	lsrs	r3, r3, #26
 80060a0:	3301      	adds	r3, #1
 80060a2:	069b      	lsls	r3, r3, #26
 80060a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060a8:	e00e      	b.n	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	fa93 f3a3 	rbit	r3, r3
 80060b6:	623b      	str	r3, [r7, #32]
  return result;
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	fab3 f383 	clz	r3, r3
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	3301      	adds	r3, #1
 80060c2:	069b      	lsls	r3, r3, #26
 80060c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	0e9b      	lsrs	r3, r3, #26
 80060da:	3301      	adds	r3, #1
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2101      	movs	r1, #1
 80060e2:	fa01 f303 	lsl.w	r3, r1, r3
 80060e6:	e010      	b.n	800610a <HAL_ADCEx_InjectedConfigChannel+0x72e>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	fa93 f3a3 	rbit	r3, r3
 80060f4:	61bb      	str	r3, [r7, #24]
  return result;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	fab3 f383 	clz	r3, r3
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	3301      	adds	r3, #1
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	2101      	movs	r1, #1
 8006106:	fa01 f303 	lsl.w	r3, r1, r3
 800610a:	ea42 0103 	orr.w	r1, r2, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10d      	bne.n	8006136 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	0e9b      	lsrs	r3, r3, #26
 8006120:	3301      	adds	r3, #1
 8006122:	f003 021f 	and.w	r2, r3, #31
 8006126:	4613      	mov	r3, r2
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	4413      	add	r3, r2
 800612c:	3b1e      	subs	r3, #30
 800612e:	051b      	lsls	r3, r3, #20
 8006130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006134:	e014      	b.n	8006160 <HAL_ADCEx_InjectedConfigChannel+0x784>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	fa93 f3a3 	rbit	r3, r3
 8006142:	613b      	str	r3, [r7, #16]
  return result;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	fab3 f383 	clz	r3, r3
 800614a:	b2db      	uxtb	r3, r3
 800614c:	3301      	adds	r3, #1
 800614e:	f003 021f 	and.w	r2, r3, #31
 8006152:	4613      	mov	r3, r2
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	4413      	add	r3, r2
 8006158:	3b1e      	subs	r3, #30
 800615a:	051b      	lsls	r3, r3, #20
 800615c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006160:	430b      	orrs	r3, r1
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	6892      	ldr	r2, [r2, #8]
 8006166:	4619      	mov	r1, r3
 8006168:	f7ff f97f 	bl	800546a <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b2a      	ldr	r3, [pc, #168]	; (800621c <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8006172:	4013      	ands	r3, r2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d079      	beq.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006178:	4829      	ldr	r0, [pc, #164]	; (8006220 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800617a:	f7ff f8c8 	bl	800530e <LL_ADC_GetCommonPathInternalCh>
 800617e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a27      	ldr	r2, [pc, #156]	; (8006224 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a25      	ldr	r2, [pc, #148]	; (8006228 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d126      	bne.n	80061e4 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800619a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d120      	bne.n	80061e4 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061aa:	d15f      	bne.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061b4:	4619      	mov	r1, r3
 80061b6:	481a      	ldr	r0, [pc, #104]	; (8006220 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80061b8:	f7ff f896 	bl	80052e8 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80061bc:	4b1b      	ldr	r3, [pc, #108]	; (800622c <HAL_ADCEx_InjectedConfigChannel+0x850>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	099b      	lsrs	r3, r3, #6
 80061c2:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 80061c4:	fba2 2303 	umull	r2, r3, r2, r3
 80061c8:	099a      	lsrs	r2, r3, #6
 80061ca:	4613      	mov	r3, r2
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 80061d4:	e002      	b.n	80061dc <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3b01      	subs	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f9      	bne.n	80061d6 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061e2:	e043      	b.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a12      	ldr	r2, [pc, #72]	; (8006234 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d126      	bne.n	800623c <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80061ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d120      	bne.n	800623c <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a0e      	ldr	r2, [pc, #56]	; (8006238 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d033      	beq.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800620c:	4619      	mov	r1, r3
 800620e:	4804      	ldr	r0, [pc, #16]	; (8006220 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8006210:	f7ff f86a 	bl	80052e8 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006214:	e02a      	b.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x890>
 8006216:	bf00      	nop
 8006218:	407f0000 	.word	0x407f0000
 800621c:	80080000 	.word	0x80080000
 8006220:	50000300 	.word	0x50000300
 8006224:	c3210000 	.word	0xc3210000
 8006228:	90c00010 	.word	0x90c00010
 800622c:	2000000c 	.word	0x2000000c
 8006230:	053e2d63 	.word	0x053e2d63
 8006234:	c7520000 	.word	0xc7520000
 8006238:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d112      	bne.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006246:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800624a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10c      	bne.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a0b      	ldr	r2, [pc, #44]	; (8006284 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d007      	beq.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800625c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006264:	4619      	mov	r1, r3
 8006266:	4808      	ldr	r0, [pc, #32]	; (8006288 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 8006268:	f7ff f83e 	bl	80052e8 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006274:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8006278:	4618      	mov	r0, r3
 800627a:	37a0      	adds	r7, #160	; 0xa0
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	cb840000 	.word	0xcb840000
 8006284:	50000100 	.word	0x50000100
 8006288:	50000300 	.word	0x50000300

0800628c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b0a1      	sub	sp, #132	; 0x84
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e087      	b.n	80063ba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062ba:	d102      	bne.n	80062c2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80062bc:	4b41      	ldr	r3, [pc, #260]	; (80063c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80062be:	60bb      	str	r3, [r7, #8]
 80062c0:	e001      	b.n	80062c6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e06a      	b.n	80063ba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff f95a 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 80062ec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff f954 	bl	80055a0 <LL_ADC_REG_IsConversionOngoing>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d14c      	bne.n	8006398 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80062fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006300:	2b00      	cmp	r3, #0
 8006302:	d149      	bne.n	8006398 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006304:	4b30      	ldr	r3, [pc, #192]	; (80063c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006306:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d028      	beq.n	8006362 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006322:	035b      	lsls	r3, r3, #13
 8006324:	430b      	orrs	r3, r1
 8006326:	431a      	orrs	r2, r3
 8006328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800632c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006330:	f7ff f8f6 	bl	8005520 <LL_ADC_IsEnabled>
 8006334:	4604      	mov	r4, r0
 8006336:	4823      	ldr	r0, [pc, #140]	; (80063c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006338:	f7ff f8f2 	bl	8005520 <LL_ADC_IsEnabled>
 800633c:	4603      	mov	r3, r0
 800633e:	4323      	orrs	r3, r4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d133      	bne.n	80063ac <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800634c:	f023 030f 	bic.w	r3, r3, #15
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	6811      	ldr	r1, [r2, #0]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	6892      	ldr	r2, [r2, #8]
 8006358:	430a      	orrs	r2, r1
 800635a:	431a      	orrs	r2, r3
 800635c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800635e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006360:	e024      	b.n	80063ac <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800636a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800636e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006372:	f7ff f8d5 	bl	8005520 <LL_ADC_IsEnabled>
 8006376:	4604      	mov	r4, r0
 8006378:	4812      	ldr	r0, [pc, #72]	; (80063c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800637a:	f7ff f8d1 	bl	8005520 <LL_ADC_IsEnabled>
 800637e:	4603      	mov	r3, r0
 8006380:	4323      	orrs	r3, r4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d112      	bne.n	80063ac <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800638e:	f023 030f 	bic.w	r3, r3, #15
 8006392:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006394:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006396:	e009      	b.n	80063ac <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639c:	f043 0220 	orr.w	r2, r3, #32
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80063aa:	e000      	b.n	80063ae <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80063ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80063b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3784      	adds	r7, #132	; 0x84
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd90      	pop	{r4, r7, pc}
 80063c2:	bf00      	nop
 80063c4:	50000100 	.word	0x50000100
 80063c8:	50000300 	.word	0x50000300

080063cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063dc:	4b0c      	ldr	r3, [pc, #48]	; (8006410 <__NVIC_SetPriorityGrouping+0x44>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063e8:	4013      	ands	r3, r2
 80063ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063fe:	4a04      	ldr	r2, [pc, #16]	; (8006410 <__NVIC_SetPriorityGrouping+0x44>)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	60d3      	str	r3, [r2, #12]
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	e000ed00 	.word	0xe000ed00

08006414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006418:	4b04      	ldr	r3, [pc, #16]	; (800642c <__NVIC_GetPriorityGrouping+0x18>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 0307 	and.w	r3, r3, #7
}
 8006422:	4618      	mov	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	e000ed00 	.word	0xe000ed00

08006430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800643a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800643e:	2b00      	cmp	r3, #0
 8006440:	db0b      	blt.n	800645a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	f003 021f 	and.w	r2, r3, #31
 8006448:	4907      	ldr	r1, [pc, #28]	; (8006468 <__NVIC_EnableIRQ+0x38>)
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2001      	movs	r0, #1
 8006452:	fa00 f202 	lsl.w	r2, r0, r2
 8006456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	e000e100 	.word	0xe000e100

0800646c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	6039      	str	r1, [r7, #0]
 8006476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647c:	2b00      	cmp	r3, #0
 800647e:	db0a      	blt.n	8006496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	490c      	ldr	r1, [pc, #48]	; (80064b8 <__NVIC_SetPriority+0x4c>)
 8006486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648a:	0112      	lsls	r2, r2, #4
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	440b      	add	r3, r1
 8006490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006494:	e00a      	b.n	80064ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4908      	ldr	r1, [pc, #32]	; (80064bc <__NVIC_SetPriority+0x50>)
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	3b04      	subs	r3, #4
 80064a4:	0112      	lsls	r2, r2, #4
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	440b      	add	r3, r1
 80064aa:	761a      	strb	r2, [r3, #24]
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	e000e100 	.word	0xe000e100
 80064bc:	e000ed00 	.word	0xe000ed00

080064c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b089      	sub	sp, #36	; 0x24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f1c3 0307 	rsb	r3, r3, #7
 80064da:	2b04      	cmp	r3, #4
 80064dc:	bf28      	it	cs
 80064de:	2304      	movcs	r3, #4
 80064e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3304      	adds	r3, #4
 80064e6:	2b06      	cmp	r3, #6
 80064e8:	d902      	bls.n	80064f0 <NVIC_EncodePriority+0x30>
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	3b03      	subs	r3, #3
 80064ee:	e000      	b.n	80064f2 <NVIC_EncodePriority+0x32>
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43da      	mvns	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	401a      	ands	r2, r3
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006508:	f04f 31ff 	mov.w	r1, #4294967295
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	fa01 f303 	lsl.w	r3, r1, r3
 8006512:	43d9      	mvns	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006518:	4313      	orrs	r3, r2
         );
}
 800651a:	4618      	mov	r0, r3
 800651c:	3724      	adds	r7, #36	; 0x24
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3b01      	subs	r3, #1
 8006534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006538:	d301      	bcc.n	800653e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800653a:	2301      	movs	r3, #1
 800653c:	e00f      	b.n	800655e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800653e:	4a0a      	ldr	r2, [pc, #40]	; (8006568 <SysTick_Config+0x40>)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3b01      	subs	r3, #1
 8006544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006546:	210f      	movs	r1, #15
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	f7ff ff8e 	bl	800646c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <SysTick_Config+0x40>)
 8006552:	2200      	movs	r2, #0
 8006554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006556:	4b04      	ldr	r3, [pc, #16]	; (8006568 <SysTick_Config+0x40>)
 8006558:	2207      	movs	r2, #7
 800655a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	e000e010 	.word	0xe000e010

0800656c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff ff29 	bl	80063cc <__NVIC_SetPriorityGrouping>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b086      	sub	sp, #24
 8006586:	af00      	add	r7, sp, #0
 8006588:	4603      	mov	r3, r0
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006590:	f7ff ff40 	bl	8006414 <__NVIC_GetPriorityGrouping>
 8006594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	6978      	ldr	r0, [r7, #20]
 800659c:	f7ff ff90 	bl	80064c0 <NVIC_EncodePriority>
 80065a0:	4602      	mov	r2, r0
 80065a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a6:	4611      	mov	r1, r2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff ff5f 	bl	800646c <__NVIC_SetPriority>
}
 80065ae:	bf00      	nop
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	4603      	mov	r3, r0
 80065be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff ff33 	bl	8006430 <__NVIC_EnableIRQ>
}
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff ffa4 	bl	8006528 <SysTick_Config>
 80065e0:	4603      	mov	r3, r0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d00d      	beq.n	800661e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2204      	movs	r2, #4
 8006606:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	73fb      	strb	r3, [r7, #15]
 800661c:	e047      	b.n	80066ae <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 020e 	bic.w	r2, r2, #14
 800662c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800664c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	f003 021f 	and.w	r2, r3, #31
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	2101      	movs	r1, #1
 800665c:	fa01 f202 	lsl.w	r2, r1, r2
 8006660:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800666a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00c      	beq.n	800668e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006682:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800668c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
    }
  }
  return status;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80066c6:	e15a      	b.n	800697e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	2101      	movs	r1, #1
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	fa01 f303 	lsl.w	r3, r1, r3
 80066d4:	4013      	ands	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 814c 	beq.w	8006978 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d00b      	beq.n	8006700 <HAL_GPIO_Init+0x48>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d007      	beq.n	8006700 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066f4:	2b11      	cmp	r3, #17
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b12      	cmp	r3, #18
 80066fe:	d130      	bne.n	8006762 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	2203      	movs	r2, #3
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	43db      	mvns	r3, r3
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4013      	ands	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	fa02 f303 	lsl.w	r3, r2, r3
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006736:	2201      	movs	r2, #1
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4013      	ands	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 0201 	and.w	r2, r3, #1
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	2203      	movs	r2, #3
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4013      	ands	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d003      	beq.n	80067a2 <HAL_GPIO_Init+0xea>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b12      	cmp	r3, #18
 80067a0:	d123      	bne.n	80067ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	08da      	lsrs	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3208      	adds	r2, #8
 80067aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	220f      	movs	r2, #15
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43db      	mvns	r3, r3
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4013      	ands	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	08da      	lsrs	r2, r3, #3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3208      	adds	r2, #8
 80067e4:	6939      	ldr	r1, [r7, #16]
 80067e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	2203      	movs	r2, #3
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	43db      	mvns	r3, r3
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4013      	ands	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f003 0203 	and.w	r2, r3, #3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 80a6 	beq.w	8006978 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800682c:	4b5b      	ldr	r3, [pc, #364]	; (800699c <HAL_GPIO_Init+0x2e4>)
 800682e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006830:	4a5a      	ldr	r2, [pc, #360]	; (800699c <HAL_GPIO_Init+0x2e4>)
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	6613      	str	r3, [r2, #96]	; 0x60
 8006838:	4b58      	ldr	r3, [pc, #352]	; (800699c <HAL_GPIO_Init+0x2e4>)
 800683a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	60bb      	str	r3, [r7, #8]
 8006842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006844:	4a56      	ldr	r2, [pc, #344]	; (80069a0 <HAL_GPIO_Init+0x2e8>)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	089b      	lsrs	r3, r3, #2
 800684a:	3302      	adds	r3, #2
 800684c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	220f      	movs	r2, #15
 800685c:	fa02 f303 	lsl.w	r3, r2, r3
 8006860:	43db      	mvns	r3, r3
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4013      	ands	r3, r2
 8006866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800686e:	d01f      	beq.n	80068b0 <HAL_GPIO_Init+0x1f8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a4c      	ldr	r2, [pc, #304]	; (80069a4 <HAL_GPIO_Init+0x2ec>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d019      	beq.n	80068ac <HAL_GPIO_Init+0x1f4>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a4b      	ldr	r2, [pc, #300]	; (80069a8 <HAL_GPIO_Init+0x2f0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d013      	beq.n	80068a8 <HAL_GPIO_Init+0x1f0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a4a      	ldr	r2, [pc, #296]	; (80069ac <HAL_GPIO_Init+0x2f4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00d      	beq.n	80068a4 <HAL_GPIO_Init+0x1ec>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a49      	ldr	r2, [pc, #292]	; (80069b0 <HAL_GPIO_Init+0x2f8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d007      	beq.n	80068a0 <HAL_GPIO_Init+0x1e8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a48      	ldr	r2, [pc, #288]	; (80069b4 <HAL_GPIO_Init+0x2fc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d101      	bne.n	800689c <HAL_GPIO_Init+0x1e4>
 8006898:	2305      	movs	r3, #5
 800689a:	e00a      	b.n	80068b2 <HAL_GPIO_Init+0x1fa>
 800689c:	2306      	movs	r3, #6
 800689e:	e008      	b.n	80068b2 <HAL_GPIO_Init+0x1fa>
 80068a0:	2304      	movs	r3, #4
 80068a2:	e006      	b.n	80068b2 <HAL_GPIO_Init+0x1fa>
 80068a4:	2303      	movs	r3, #3
 80068a6:	e004      	b.n	80068b2 <HAL_GPIO_Init+0x1fa>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e002      	b.n	80068b2 <HAL_GPIO_Init+0x1fa>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <HAL_GPIO_Init+0x1fa>
 80068b0:	2300      	movs	r3, #0
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	f002 0203 	and.w	r2, r2, #3
 80068b8:	0092      	lsls	r2, r2, #2
 80068ba:	4093      	lsls	r3, r2
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068c2:	4937      	ldr	r1, [pc, #220]	; (80069a0 <HAL_GPIO_Init+0x2e8>)
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	089b      	lsrs	r3, r3, #2
 80068c8:	3302      	adds	r3, #2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80068d0:	4b39      	ldr	r3, [pc, #228]	; (80069b8 <HAL_GPIO_Init+0x300>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	43db      	mvns	r3, r3
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4013      	ands	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068f4:	4a30      	ldr	r2, [pc, #192]	; (80069b8 <HAL_GPIO_Init+0x300>)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80068fa:	4b2f      	ldr	r3, [pc, #188]	; (80069b8 <HAL_GPIO_Init+0x300>)
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	43db      	mvns	r3, r3
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4013      	ands	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800691e:	4a26      	ldr	r2, [pc, #152]	; (80069b8 <HAL_GPIO_Init+0x300>)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006924:	4b24      	ldr	r3, [pc, #144]	; (80069b8 <HAL_GPIO_Init+0x300>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	43db      	mvns	r3, r3
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4013      	ands	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006948:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <HAL_GPIO_Init+0x300>)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800694e:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <HAL_GPIO_Init+0x300>)
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	43db      	mvns	r3, r3
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4013      	ands	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006972:	4a11      	ldr	r2, [pc, #68]	; (80069b8 <HAL_GPIO_Init+0x300>)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3301      	adds	r3, #1
 800697c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	f47f ae9d 	bne.w	80066c8 <HAL_GPIO_Init+0x10>
  }
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000
 80069a0:	40010000 	.word	0x40010000
 80069a4:	48000400 	.word	0x48000400
 80069a8:	48000800 	.word	0x48000800
 80069ac:	48000c00 	.word	0x48000c00
 80069b0:	48001000 	.word	0x48001000
 80069b4:	48001400 	.word	0x48001400
 80069b8:	40010400 	.word	0x40010400

080069bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80069c6:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069c8:	695a      	ldr	r2, [r3, #20]
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	4013      	ands	r3, r2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d006      	beq.n	80069e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069d2:	4a05      	ldr	r2, [pc, #20]	; (80069e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069d8:	88fb      	ldrh	r3, [r7, #6]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fc ff08 	bl	80037f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40010400 	.word	0x40010400

080069ec <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e0bb      	b.n	8006b7a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b05      	cmp	r3, #5
 8006a0c:	d101      	bne.n	8006a12 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e0b3      	b.n	8006b7a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d101      	bne.n	8006a22 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e0ab      	b.n	8006b7a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a22:	4b58      	ldr	r3, [pc, #352]	; (8006b84 <HAL_OPAMP_Init+0x198>)
 8006a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a26:	4a57      	ldr	r2, [pc, #348]	; (8006b84 <HAL_OPAMP_Init+0x198>)
 8006a28:	f043 0301 	orr.w	r3, r3, #1
 8006a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8006a2e:	4b55      	ldr	r3, [pc, #340]	; (8006b84 <HAL_OPAMP_Init+0x198>)
 8006a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	60bb      	str	r3, [r7, #8]
 8006a38:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fd f854 	bl	8003afc <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d003      	beq.n	8006a64 <HAL_OPAMP_Init+0x78>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	2b60      	cmp	r3, #96	; 0x60
 8006a62:	d133      	bne.n	8006acc <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f023 0110 	bic.w	r1, r3, #16
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4b41      	ldr	r3, [pc, #260]	; (8006b88 <HAL_OPAMP_Init+0x19c>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6851      	ldr	r1, [r2, #4]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6892      	ldr	r2, [r2, #8]
 8006a8c:	4311      	orrs	r1, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6912      	ldr	r2, [r2, #16]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	7d09      	ldrb	r1, [r1, #20]
 8006a98:	2901      	cmp	r1, #1
 8006a9a:	d102      	bne.n	8006aa2 <HAL_OPAMP_Init+0xb6>
 8006a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aa0:	e000      	b.n	8006aa4 <HAL_OPAMP_Init+0xb8>
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4311      	orrs	r1, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006aaa:	4311      	orrs	r1, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006ab0:	4311      	orrs	r1, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ab6:	04d2      	lsls	r2, r2, #19
 8006ab8:	4311      	orrs	r1, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006abe:	0612      	lsls	r2, r2, #24
 8006ac0:	4311      	orrs	r1, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	e035      	b.n	8006b38 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f023 0110 	bic.w	r1, r3, #16
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	4b27      	ldr	r3, [pc, #156]	; (8006b88 <HAL_OPAMP_Init+0x19c>)
 8006aea:	4013      	ands	r3, r2
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6851      	ldr	r1, [r2, #4]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6892      	ldr	r2, [r2, #8]
 8006af4:	4311      	orrs	r1, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68d2      	ldr	r2, [r2, #12]
 8006afa:	4311      	orrs	r1, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6912      	ldr	r2, [r2, #16]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	7d09      	ldrb	r1, [r1, #20]
 8006b06:	2901      	cmp	r1, #1
 8006b08:	d102      	bne.n	8006b10 <HAL_OPAMP_Init+0x124>
 8006b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b0e:	e000      	b.n	8006b12 <HAL_OPAMP_Init+0x126>
 8006b10:	2100      	movs	r1, #0
 8006b12:	4311      	orrs	r1, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b18:	4311      	orrs	r1, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006b1e:	4311      	orrs	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b24:	04d2      	lsls	r2, r2, #19
 8006b26:	4311      	orrs	r1, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b2c:	0612      	lsls	r2, r2, #24
 8006b2e:	4311      	orrs	r1, r2
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	db10      	blt.n	8006b64 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699a      	ldr	r2, [r3, #24]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40021000 	.word	0x40021000
 8006b88:	e0003e11 	.word	0xe0003e11

08006b8c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	73fb      	strb	r3, [r7, #15]
 8006ba2:	e01d      	b.n	8006be0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d102      	bne.n	8006bb6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	73fb      	strb	r3, [r7, #15]
 8006bb4:	e014      	b.n	8006be0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d10c      	bne.n	8006bdc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006bda:	e001      	b.n	8006be0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_OPAMP_Stop>:
  * @brief  Stop the opamp
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Stop(OPAMP_HandleTypeDef *hopamp)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  /* Check if OPAMP calibration ongoing */
  if (hopamp == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d102      	bne.n	8006c06 <HAL_OPAMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
 8006c04:	e026      	b.n	8006c54 <HAL_OPAMP_Stop+0x66>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	d102      	bne.n	8006c18 <HAL_OPAMP_Stop+0x2a>
  {
    status = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	73fb      	strb	r3, [r7, #15]
 8006c16:	e01d      	b.n	8006c54 <HAL_OPAMP_Stop+0x66>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d102      	bne.n	8006c2a <HAL_OPAMP_Stop+0x3c>
  {
    status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
 8006c28:	e014      	b.n	8006c54 <HAL_OPAMP_Stop+0x66>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_BUSY)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d10c      	bne.n	8006c50 <HAL_OPAMP_Stop+0x62>
    {
      /* Disable the selected opamp */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0201 	bic.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From  HAL_OPAMP_STATE_BUSY to HAL_OPAMP_STATE_READY*/
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006c4e:	e001      	b.n	8006c54 <HAL_OPAMP_Stop+0x66>
    }
    else
    {
      status = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b08c      	sub	sp, #48	; 0x30
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e2df      	b.n	8007244 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d001      	beq.n	8006c94 <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e2d7      	b.n	8007244 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d001      	beq.n	8006ca4 <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e2cf      	b.n	8007244 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d001      	beq.n	8006cb4 <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e2c7      	b.n	8007244 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0202 	orr.w	r2, r2, #2
 8006cc2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0202 	orr.w	r2, r2, #2
 8006cd2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0202 	orr.w	r2, r2, #2
 8006ce2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0210 	orr.w	r2, r2, #16
 8006cf2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0210 	orr.w	r2, r2, #16
 8006d02:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0210 	orr.w	r2, r2, #16
 8006d12:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d22:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d32:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d42:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006d52:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006d62:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006d72:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 8006da4:	2310      	movs	r3, #16
 8006da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 8006da8:	2310      	movs	r3, #16
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 8006dac:	2310      	movs	r3, #16
 8006dae:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 8006db0:	2308      	movs	r3, #8
 8006db2:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8006db4:	e056      	b.n	8006e64 <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	061a      	lsls	r2, r3, #24
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	061a      	lsls	r2, r3, #24
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	061a      	lsls	r2, r3, #24
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8006df8:	2002      	movs	r0, #2
 8006dfa:	f7fd fbed 	bl	80045d8 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8006e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	4413      	add	r3, r2
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e14:	e003      	b.n	8006e1e <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 8006e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8006e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	4413      	add	r3, r2
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
 8006e34:	e003      	b.n	8006e3e <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 8006e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	4413      	add	r3, r2
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	e003      	b.n	8006e5e <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	085b      	lsrs	r3, r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1a5      	bne.n	8006db6 <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	061a      	lsls	r2, r3, #24
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	061a      	lsls	r2, r3, #24
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	061a      	lsls	r2, r3, #24
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8006eac:	2002      	movs	r0, #2
 8006eae:	f7fd fb93 	bl	80045d8 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00d      	beq.n	8006edc <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 8006ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	061a      	lsls	r2, r3, #24
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00d      	beq.n	8006f06 <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	3301      	adds	r3, #1
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	061a      	lsls	r2, r3, #24
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00d      	beq.n	8006f30 <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	061a      	lsls	r2, r3, #24
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f42:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f56:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f6a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 8006f70:	2310      	movs	r3, #16
 8006f72:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 8006f74:	2310      	movs	r3, #16
 8006f76:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 8006f78:	2308      	movs	r3, #8
 8006f7a:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 8006f7c:	e056      	b.n	800702c <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	04da      	lsls	r2, r3, #19
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	04da      	lsls	r2, r3, #19
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	04da      	lsls	r2, r3, #19
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8006fc0:	2002      	movs	r0, #2
 8006fc2:	f7fd fb09 	bl	80045d8 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 8006fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4413      	add	r3, r2
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fdc:	e003      	b.n	8006fe6 <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 8006fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 8006ff4:	6a3a      	ldr	r2, [r7, #32]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	623b      	str	r3, [r7, #32]
 8006ffc:	e003      	b.n	8007006 <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 8006ffe:	6a3a      	ldr	r2, [r7, #32]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	4413      	add	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	e003      	b.n	8007026 <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1a5      	bne.n	8006f7e <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	04da      	lsls	r2, r3, #19
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	04da      	lsls	r2, r3, #19
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	04da      	lsls	r2, r3, #19
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8007074:	2002      	movs	r0, #2
 8007076:	f7fd faaf 	bl	80045d8 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00d      	beq.n	80070a4 <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	3301      	adds	r3, #1
 800708c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	04da      	lsls	r2, r3, #19
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	3301      	adds	r3, #1
 80070b6:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	04da      	lsls	r2, r3, #19
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00d      	beq.n	80070f8 <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	3301      	adds	r3, #1
 80070e0:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	04da      	lsls	r2, r3, #19
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007106:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007116:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007126:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0201 	bic.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0201 	bic.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0201 	bic.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0202 	bic.w	r2, r2, #2
 8007166:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0202 	bic.w	r2, r2, #2
 8007176:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0202 	bic.w	r2, r2, #2
 8007186:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800718c:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007192:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	6a3a      	ldr	r2, [r7, #32]
 80071a4:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2210      	movs	r2, #16
 80071b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2210      	movs	r2, #16
 80071b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2210      	movs	r2, #16
 80071bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	061a      	lsls	r2, r3, #24
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	061a      	lsls	r2, r3, #24
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	061a      	lsls	r2, r3, #24
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	04da      	lsls	r2, r3, #19
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	04da      	lsls	r2, r3, #19
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	04da      	lsls	r2, r3, #19
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3730      	adds	r7, #48	; 0x30
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d141      	bne.n	80072de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800725a:	4b4b      	ldr	r3, [pc, #300]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007266:	d131      	bne.n	80072cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007268:	4b47      	ldr	r3, [pc, #284]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800726a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726e:	4a46      	ldr	r2, [pc, #280]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007278:	4b43      	ldr	r3, [pc, #268]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007280:	4a41      	ldr	r2, [pc, #260]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007288:	4b40      	ldr	r3, [pc, #256]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2232      	movs	r2, #50	; 0x32
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	4a3f      	ldr	r2, [pc, #252]	; (8007390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007294:	fba2 2303 	umull	r2, r3, r2, r3
 8007298:	0c9b      	lsrs	r3, r3, #18
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800729e:	e002      	b.n	80072a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072a6:	4b38      	ldr	r3, [pc, #224]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b2:	d102      	bne.n	80072ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f2      	bne.n	80072a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072ba:	4b33      	ldr	r3, [pc, #204]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c6:	d158      	bne.n	800737a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e057      	b.n	800737c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072cc:	4b2e      	ldr	r3, [pc, #184]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072d2:	4a2d      	ldr	r2, [pc, #180]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80072dc:	e04d      	b.n	800737a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e4:	d141      	bne.n	800736a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072e6:	4b28      	ldr	r3, [pc, #160]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f2:	d131      	bne.n	8007358 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072f4:	4b24      	ldr	r3, [pc, #144]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072fa:	4a23      	ldr	r2, [pc, #140]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007304:	4b20      	ldr	r3, [pc, #128]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800730c:	4a1e      	ldr	r2, [pc, #120]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800730e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007314:	4b1d      	ldr	r3, [pc, #116]	; (800738c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2232      	movs	r2, #50	; 0x32
 800731a:	fb02 f303 	mul.w	r3, r2, r3
 800731e:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007320:	fba2 2303 	umull	r2, r3, r2, r3
 8007324:	0c9b      	lsrs	r3, r3, #18
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800732a:	e002      	b.n	8007332 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3b01      	subs	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800733e:	d102      	bne.n	8007346 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f2      	bne.n	800732c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007346:	4b10      	ldr	r3, [pc, #64]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007352:	d112      	bne.n	800737a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e011      	b.n	800737c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800735a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800735e:	4a0a      	ldr	r2, [pc, #40]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007368:	e007      	b.n	800737a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800736a:	4b07      	ldr	r3, [pc, #28]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007372:	4a05      	ldr	r2, [pc, #20]	; (8007388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007378:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	40007000 	.word	0x40007000
 800738c:	2000000c 	.word	0x2000000c
 8007390:	431bde83 	.word	0x431bde83

08007394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e308      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d075      	beq.n	800749e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073b2:	4ba3      	ldr	r3, [pc, #652]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f003 030c 	and.w	r3, r3, #12
 80073ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073bc:	4ba0      	ldr	r3, [pc, #640]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f003 0303 	and.w	r3, r3, #3
 80073c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b0c      	cmp	r3, #12
 80073ca:	d102      	bne.n	80073d2 <HAL_RCC_OscConfig+0x3e>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d002      	beq.n	80073d8 <HAL_RCC_OscConfig+0x44>
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d10b      	bne.n	80073f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073d8:	4b99      	ldr	r3, [pc, #612]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d05b      	beq.n	800749c <HAL_RCC_OscConfig+0x108>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d157      	bne.n	800749c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e2e3      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f8:	d106      	bne.n	8007408 <HAL_RCC_OscConfig+0x74>
 80073fa:	4b91      	ldr	r3, [pc, #580]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a90      	ldr	r2, [pc, #576]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	e01d      	b.n	8007444 <HAL_RCC_OscConfig+0xb0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007410:	d10c      	bne.n	800742c <HAL_RCC_OscConfig+0x98>
 8007412:	4b8b      	ldr	r3, [pc, #556]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a8a      	ldr	r2, [pc, #552]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	4b88      	ldr	r3, [pc, #544]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a87      	ldr	r2, [pc, #540]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	e00b      	b.n	8007444 <HAL_RCC_OscConfig+0xb0>
 800742c:	4b84      	ldr	r3, [pc, #528]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a83      	ldr	r2, [pc, #524]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	4b81      	ldr	r3, [pc, #516]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a80      	ldr	r2, [pc, #512]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 800743e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d013      	beq.n	8007474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744c:	f7fd f8b8 	bl	80045c0 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007454:	f7fd f8b4 	bl	80045c0 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b64      	cmp	r3, #100	; 0x64
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e2a8      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007466:	4b76      	ldr	r3, [pc, #472]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f0      	beq.n	8007454 <HAL_RCC_OscConfig+0xc0>
 8007472:	e014      	b.n	800749e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fd f8a4 	bl	80045c0 <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800747c:	f7fd f8a0 	bl	80045c0 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b64      	cmp	r3, #100	; 0x64
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e294      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800748e:	4b6c      	ldr	r3, [pc, #432]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f0      	bne.n	800747c <HAL_RCC_OscConfig+0xe8>
 800749a:	e000      	b.n	800749e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800749c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d075      	beq.n	8007596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074aa:	4b65      	ldr	r3, [pc, #404]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 030c 	and.w	r3, r3, #12
 80074b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074b4:	4b62      	ldr	r3, [pc, #392]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b0c      	cmp	r3, #12
 80074c2:	d102      	bne.n	80074ca <HAL_RCC_OscConfig+0x136>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d002      	beq.n	80074d0 <HAL_RCC_OscConfig+0x13c>
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d11f      	bne.n	8007510 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074d0:	4b5b      	ldr	r3, [pc, #364]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <HAL_RCC_OscConfig+0x154>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e267      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074e8:	4b55      	ldr	r3, [pc, #340]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	061b      	lsls	r3, r3, #24
 80074f6:	4952      	ldr	r1, [pc, #328]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80074fc:	4b51      	ldr	r3, [pc, #324]	; (8007644 <HAL_RCC_OscConfig+0x2b0>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd f811 	bl	8004528 <HAL_InitTick>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d043      	beq.n	8007594 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e253      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d023      	beq.n	8007560 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007518:	4b49      	ldr	r3, [pc, #292]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a48      	ldr	r2, [pc, #288]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 800751e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007524:	f7fd f84c 	bl	80045c0 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800752c:	f7fd f848 	bl	80045c0 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e23c      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800753e:	4b40      	ldr	r3, [pc, #256]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0f0      	beq.n	800752c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800754a:	4b3d      	ldr	r3, [pc, #244]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	061b      	lsls	r3, r3, #24
 8007558:	4939      	ldr	r1, [pc, #228]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 800755a:	4313      	orrs	r3, r2
 800755c:	604b      	str	r3, [r1, #4]
 800755e:	e01a      	b.n	8007596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007560:	4b37      	ldr	r3, [pc, #220]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a36      	ldr	r2, [pc, #216]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800756a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756c:	f7fd f828 	bl	80045c0 <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007574:	f7fd f824 	bl	80045c0 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e218      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007586:	4b2e      	ldr	r3, [pc, #184]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1f0      	bne.n	8007574 <HAL_RCC_OscConfig+0x1e0>
 8007592:	e000      	b.n	8007596 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d03c      	beq.n	800761c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01c      	beq.n	80075e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075aa:	4b25      	ldr	r3, [pc, #148]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80075ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075b0:	4a23      	ldr	r2, [pc, #140]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ba:	f7fd f801 	bl	80045c0 <HAL_GetTick>
 80075be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075c0:	e008      	b.n	80075d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c2:	f7fc fffd 	bl	80045c0 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d901      	bls.n	80075d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e1f1      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075d4:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80075d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0ef      	beq.n	80075c2 <HAL_RCC_OscConfig+0x22e>
 80075e2:	e01b      	b.n	800761c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075e4:	4b16      	ldr	r3, [pc, #88]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80075e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075ea:	4a15      	ldr	r2, [pc, #84]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f4:	f7fc ffe4 	bl	80045c0 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075fc:	f7fc ffe0 	bl	80045c0 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e1d4      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800760e:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1ef      	bne.n	80075fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 80ab 	beq.w	8007780 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800762a:	2300      	movs	r3, #0
 800762c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800762e:	4b04      	ldr	r3, [pc, #16]	; (8007640 <HAL_RCC_OscConfig+0x2ac>)
 8007630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_RCC_OscConfig+0x2b4>
 800763a:	2301      	movs	r3, #1
 800763c:	e005      	b.n	800764a <HAL_RCC_OscConfig+0x2b6>
 800763e:	bf00      	nop
 8007640:	40021000 	.word	0x40021000
 8007644:	20000010 	.word	0x20000010
 8007648:	2300      	movs	r3, #0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00d      	beq.n	800766a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800764e:	4baf      	ldr	r3, [pc, #700]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007652:	4aae      	ldr	r2, [pc, #696]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007658:	6593      	str	r3, [r2, #88]	; 0x58
 800765a:	4bac      	ldr	r3, [pc, #688]	; (800790c <HAL_RCC_OscConfig+0x578>)
 800765c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007666:	2301      	movs	r3, #1
 8007668:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800766a:	4ba9      	ldr	r3, [pc, #676]	; (8007910 <HAL_RCC_OscConfig+0x57c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007672:	2b00      	cmp	r3, #0
 8007674:	d118      	bne.n	80076a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007676:	4ba6      	ldr	r3, [pc, #664]	; (8007910 <HAL_RCC_OscConfig+0x57c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4aa5      	ldr	r2, [pc, #660]	; (8007910 <HAL_RCC_OscConfig+0x57c>)
 800767c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007682:	f7fc ff9d 	bl	80045c0 <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800768a:	f7fc ff99 	bl	80045c0 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e18d      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800769c:	4b9c      	ldr	r3, [pc, #624]	; (8007910 <HAL_RCC_OscConfig+0x57c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0f0      	beq.n	800768a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d108      	bne.n	80076c2 <HAL_RCC_OscConfig+0x32e>
 80076b0:	4b96      	ldr	r3, [pc, #600]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80076b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b6:	4a95      	ldr	r2, [pc, #596]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80076b8:	f043 0301 	orr.w	r3, r3, #1
 80076bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076c0:	e024      	b.n	800770c <HAL_RCC_OscConfig+0x378>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2b05      	cmp	r3, #5
 80076c8:	d110      	bne.n	80076ec <HAL_RCC_OscConfig+0x358>
 80076ca:	4b90      	ldr	r3, [pc, #576]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80076cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d0:	4a8e      	ldr	r2, [pc, #568]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80076d2:	f043 0304 	orr.w	r3, r3, #4
 80076d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076da:	4b8c      	ldr	r3, [pc, #560]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80076dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e0:	4a8a      	ldr	r2, [pc, #552]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80076e2:	f043 0301 	orr.w	r3, r3, #1
 80076e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076ea:	e00f      	b.n	800770c <HAL_RCC_OscConfig+0x378>
 80076ec:	4b87      	ldr	r3, [pc, #540]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f2:	4a86      	ldr	r2, [pc, #536]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80076f4:	f023 0301 	bic.w	r3, r3, #1
 80076f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076fc:	4b83      	ldr	r3, [pc, #524]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80076fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007702:	4a82      	ldr	r2, [pc, #520]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007704:	f023 0304 	bic.w	r3, r3, #4
 8007708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d016      	beq.n	8007742 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007714:	f7fc ff54 	bl	80045c0 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800771a:	e00a      	b.n	8007732 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800771c:	f7fc ff50 	bl	80045c0 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	f241 3288 	movw	r2, #5000	; 0x1388
 800772a:	4293      	cmp	r3, r2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e142      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007732:	4b76      	ldr	r3, [pc, #472]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0ed      	beq.n	800771c <HAL_RCC_OscConfig+0x388>
 8007740:	e015      	b.n	800776e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007742:	f7fc ff3d 	bl	80045c0 <HAL_GetTick>
 8007746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007748:	e00a      	b.n	8007760 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800774a:	f7fc ff39 	bl	80045c0 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	f241 3288 	movw	r2, #5000	; 0x1388
 8007758:	4293      	cmp	r3, r2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e12b      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007760:	4b6a      	ldr	r3, [pc, #424]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1ed      	bne.n	800774a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800776e:	7ffb      	ldrb	r3, [r7, #31]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d105      	bne.n	8007780 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007774:	4b65      	ldr	r3, [pc, #404]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007778:	4a64      	ldr	r2, [pc, #400]	; (800790c <HAL_RCC_OscConfig+0x578>)
 800777a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800777e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b00      	cmp	r3, #0
 800778a:	d03c      	beq.n	8007806 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01c      	beq.n	80077ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007794:	4b5d      	ldr	r3, [pc, #372]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800779a:	4a5c      	ldr	r2, [pc, #368]	; (800790c <HAL_RCC_OscConfig+0x578>)
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a4:	f7fc ff0c 	bl	80045c0 <HAL_GetTick>
 80077a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ac:	f7fc ff08 	bl	80045c0 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e0fc      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077be:	4b53      	ldr	r3, [pc, #332]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80077c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0ef      	beq.n	80077ac <HAL_RCC_OscConfig+0x418>
 80077cc:	e01b      	b.n	8007806 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077ce:	4b4f      	ldr	r3, [pc, #316]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80077d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077d4:	4a4d      	ldr	r2, [pc, #308]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80077d6:	f023 0301 	bic.w	r3, r3, #1
 80077da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077de:	f7fc feef 	bl	80045c0 <HAL_GetTick>
 80077e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077e4:	e008      	b.n	80077f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077e6:	f7fc feeb 	bl	80045c0 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d901      	bls.n	80077f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e0df      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077f8:	4b44      	ldr	r3, [pc, #272]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80077fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1ef      	bne.n	80077e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 80d3 	beq.w	80079b6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007810:	4b3e      	ldr	r3, [pc, #248]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 030c 	and.w	r3, r3, #12
 8007818:	2b0c      	cmp	r3, #12
 800781a:	f000 808d 	beq.w	8007938 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d15a      	bne.n	80078dc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007826:	4b39      	ldr	r3, [pc, #228]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a38      	ldr	r2, [pc, #224]	; (800790c <HAL_RCC_OscConfig+0x578>)
 800782c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007832:	f7fc fec5 	bl	80045c0 <HAL_GetTick>
 8007836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007838:	e008      	b.n	800784c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800783a:	f7fc fec1 	bl	80045c0 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d901      	bls.n	800784c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e0b5      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800784c:	4b2f      	ldr	r3, [pc, #188]	; (800790c <HAL_RCC_OscConfig+0x578>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1f0      	bne.n	800783a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007858:	4b2c      	ldr	r3, [pc, #176]	; (800790c <HAL_RCC_OscConfig+0x578>)
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	4b2d      	ldr	r3, [pc, #180]	; (8007914 <HAL_RCC_OscConfig+0x580>)
 800785e:	4013      	ands	r3, r2
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6a11      	ldr	r1, [r2, #32]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007868:	3a01      	subs	r2, #1
 800786a:	0112      	lsls	r2, r2, #4
 800786c:	4311      	orrs	r1, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007872:	0212      	lsls	r2, r2, #8
 8007874:	4311      	orrs	r1, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800787a:	0852      	lsrs	r2, r2, #1
 800787c:	3a01      	subs	r2, #1
 800787e:	0552      	lsls	r2, r2, #21
 8007880:	4311      	orrs	r1, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007886:	0852      	lsrs	r2, r2, #1
 8007888:	3a01      	subs	r2, #1
 800788a:	0652      	lsls	r2, r2, #25
 800788c:	4311      	orrs	r1, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007892:	06d2      	lsls	r2, r2, #27
 8007894:	430a      	orrs	r2, r1
 8007896:	491d      	ldr	r1, [pc, #116]	; (800790c <HAL_RCC_OscConfig+0x578>)
 8007898:	4313      	orrs	r3, r2
 800789a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800789c:	4b1b      	ldr	r3, [pc, #108]	; (800790c <HAL_RCC_OscConfig+0x578>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1a      	ldr	r2, [pc, #104]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078a8:	4b18      	ldr	r3, [pc, #96]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	4a17      	ldr	r2, [pc, #92]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b4:	f7fc fe84 	bl	80045c0 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078bc:	f7fc fe80 	bl	80045c0 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e074      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078ce:	4b0f      	ldr	r3, [pc, #60]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0f0      	beq.n	80078bc <HAL_RCC_OscConfig+0x528>
 80078da:	e06c      	b.n	80079b6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078dc:	4b0b      	ldr	r3, [pc, #44]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a0a      	ldr	r2, [pc, #40]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80078e8:	4b08      	ldr	r3, [pc, #32]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4a07      	ldr	r2, [pc, #28]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	4a04      	ldr	r2, [pc, #16]	; (800790c <HAL_RCC_OscConfig+0x578>)
 80078fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80078fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007904:	f7fc fe5c 	bl	80045c0 <HAL_GetTick>
 8007908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800790a:	e00e      	b.n	800792a <HAL_RCC_OscConfig+0x596>
 800790c:	40021000 	.word	0x40021000
 8007910:	40007000 	.word	0x40007000
 8007914:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007918:	f7fc fe52 	bl	80045c0 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e046      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800792a:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <HAL_RCC_OscConfig+0x62c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f0      	bne.n	8007918 <HAL_RCC_OscConfig+0x584>
 8007936:	e03e      	b.n	80079b6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e039      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007944:	4b1e      	ldr	r3, [pc, #120]	; (80079c0 <HAL_RCC_OscConfig+0x62c>)
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f003 0203 	and.w	r2, r3, #3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	429a      	cmp	r2, r3
 8007956:	d12c      	bne.n	80079b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	3b01      	subs	r3, #1
 8007964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007966:	429a      	cmp	r2, r3
 8007968:	d123      	bne.n	80079b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007976:	429a      	cmp	r2, r3
 8007978:	d11b      	bne.n	80079b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007986:	429a      	cmp	r2, r3
 8007988:	d113      	bne.n	80079b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007994:	085b      	lsrs	r3, r3, #1
 8007996:	3b01      	subs	r3, #1
 8007998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800799a:	429a      	cmp	r2, r3
 800799c:	d109      	bne.n	80079b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	3b01      	subs	r3, #1
 80079ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d001      	beq.n	80079b6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3720      	adds	r7, #32
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40021000 	.word	0x40021000

080079c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e11e      	b.n	8007c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079dc:	4b91      	ldr	r3, [pc, #580]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d910      	bls.n	8007a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ea:	4b8e      	ldr	r3, [pc, #568]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f023 020f 	bic.w	r2, r3, #15
 80079f2:	498c      	ldr	r1, [pc, #560]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fa:	4b8a      	ldr	r3, [pc, #552]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d001      	beq.n	8007a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e106      	b.n	8007c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d073      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d129      	bne.n	8007a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a20:	4b81      	ldr	r3, [pc, #516]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e0f4      	b.n	8007c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007a30:	f000 f99e 	bl	8007d70 <RCC_GetSysClockFreqFromPLLSource>
 8007a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	4a7c      	ldr	r2, [pc, #496]	; (8007c2c <HAL_RCC_ClockConfig+0x268>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d93f      	bls.n	8007abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a3e:	4b7a      	ldr	r3, [pc, #488]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d033      	beq.n	8007abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d12f      	bne.n	8007abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a5e:	4b72      	ldr	r3, [pc, #456]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a66:	4a70      	ldr	r2, [pc, #448]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a6e:	2380      	movs	r3, #128	; 0x80
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e024      	b.n	8007abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d107      	bne.n	8007a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a7c:	4b6a      	ldr	r3, [pc, #424]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d109      	bne.n	8007a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0c6      	b.n	8007c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a8c:	4b66      	ldr	r3, [pc, #408]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0be      	b.n	8007c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007a9c:	f000 f8ce 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 8007aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	4a61      	ldr	r2, [pc, #388]	; (8007c2c <HAL_RCC_ClockConfig+0x268>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d909      	bls.n	8007abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007aaa:	4b5f      	ldr	r3, [pc, #380]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ab2:	4a5d      	ldr	r2, [pc, #372]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007aba:	2380      	movs	r3, #128	; 0x80
 8007abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007abe:	4b5a      	ldr	r3, [pc, #360]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f023 0203 	bic.w	r2, r3, #3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	4957      	ldr	r1, [pc, #348]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad0:	f7fc fd76 	bl	80045c0 <HAL_GetTick>
 8007ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad6:	e00a      	b.n	8007aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ad8:	f7fc fd72 	bl	80045c0 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e095      	b.n	8007c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aee:	4b4e      	ldr	r3, [pc, #312]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 020c 	and.w	r2, r3, #12
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d1eb      	bne.n	8007ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d023      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b18:	4b43      	ldr	r3, [pc, #268]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4a42      	ldr	r2, [pc, #264]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d007      	beq.n	8007b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007b30:	4b3d      	ldr	r3, [pc, #244]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b38:	4a3b      	ldr	r2, [pc, #236]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b40:	4b39      	ldr	r3, [pc, #228]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	4936      	ldr	r1, [pc, #216]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	608b      	str	r3, [r1, #8]
 8007b52:	e008      	b.n	8007b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b80      	cmp	r3, #128	; 0x80
 8007b58:	d105      	bne.n	8007b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b5a:	4b33      	ldr	r3, [pc, #204]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	4a32      	ldr	r2, [pc, #200]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b66:	4b2f      	ldr	r3, [pc, #188]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d21d      	bcs.n	8007bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b74:	4b2b      	ldr	r3, [pc, #172]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f023 020f 	bic.w	r2, r3, #15
 8007b7c:	4929      	ldr	r1, [pc, #164]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b84:	f7fc fd1c 	bl	80045c0 <HAL_GetTick>
 8007b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b8a:	e00a      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b8c:	f7fc fd18 	bl	80045c0 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e03b      	b.n	8007c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba2:	4b20      	ldr	r3, [pc, #128]	; (8007c24 <HAL_RCC_ClockConfig+0x260>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 030f 	and.w	r3, r3, #15
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d1ed      	bne.n	8007b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4917      	ldr	r1, [pc, #92]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bda:	4b13      	ldr	r3, [pc, #76]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	490f      	ldr	r1, [pc, #60]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bee:	f000 f825 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <HAL_RCC_ClockConfig+0x264>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	091b      	lsrs	r3, r3, #4
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	4a0c      	ldr	r2, [pc, #48]	; (8007c30 <HAL_RCC_ClockConfig+0x26c>)
 8007c00:	5cd3      	ldrb	r3, [r2, r3]
 8007c02:	f003 031f 	and.w	r3, r3, #31
 8007c06:	fa21 f303 	lsr.w	r3, r1, r3
 8007c0a:	4a0a      	ldr	r2, [pc, #40]	; (8007c34 <HAL_RCC_ClockConfig+0x270>)
 8007c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	; (8007c38 <HAL_RCC_ClockConfig+0x274>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fc fc88 	bl	8004528 <HAL_InitTick>
 8007c18:	4603      	mov	r3, r0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40022000 	.word	0x40022000
 8007c28:	40021000 	.word	0x40021000
 8007c2c:	04c4b400 	.word	0x04c4b400
 8007c30:	0800eb20 	.word	0x0800eb20
 8007c34:	2000000c 	.word	0x2000000c
 8007c38:	20000010 	.word	0x20000010

08007c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c42:	4b2c      	ldr	r3, [pc, #176]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 030c 	and.w	r3, r3, #12
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d102      	bne.n	8007c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c4e:	4b2a      	ldr	r3, [pc, #168]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	e047      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c54:	4b27      	ldr	r3, [pc, #156]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 030c 	and.w	r3, r3, #12
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d102      	bne.n	8007c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c60:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c62:	613b      	str	r3, [r7, #16]
 8007c64:	e03e      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007c66:	4b23      	ldr	r3, [pc, #140]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 030c 	and.w	r3, r3, #12
 8007c6e:	2b0c      	cmp	r3, #12
 8007c70:	d136      	bne.n	8007ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c72:	4b20      	ldr	r3, [pc, #128]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c7c:	4b1d      	ldr	r3, [pc, #116]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	091b      	lsrs	r3, r3, #4
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	3301      	adds	r3, #1
 8007c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d10c      	bne.n	8007caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c90:	4a1a      	ldr	r2, [pc, #104]	; (8007cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c98:	4a16      	ldr	r2, [pc, #88]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c9a:	68d2      	ldr	r2, [r2, #12]
 8007c9c:	0a12      	lsrs	r2, r2, #8
 8007c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
 8007ca6:	617b      	str	r3, [r7, #20]
      break;
 8007ca8:	e00c      	b.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007caa:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb2:	4a10      	ldr	r2, [pc, #64]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cb4:	68d2      	ldr	r2, [r2, #12]
 8007cb6:	0a12      	lsrs	r2, r2, #8
 8007cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
 8007cc0:	617b      	str	r3, [r7, #20]
      break;
 8007cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cc4:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	0e5b      	lsrs	r3, r3, #25
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	3301      	adds	r3, #1
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	e001      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007ce4:	693b      	ldr	r3, [r7, #16]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	371c      	adds	r7, #28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	00f42400 	.word	0x00f42400
 8007cfc:	007a1200 	.word	0x007a1200

08007d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d04:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d06:	681b      	ldr	r3, [r3, #0]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	2000000c 	.word	0x2000000c

08007d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d1c:	f7ff fff0 	bl	8007d00 <HAL_RCC_GetHCLKFreq>
 8007d20:	4601      	mov	r1, r0
 8007d22:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	4a04      	ldr	r2, [pc, #16]	; (8007d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d2e:	5cd3      	ldrb	r3, [r2, r3]
 8007d30:	f003 031f 	and.w	r3, r3, #31
 8007d34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	40021000 	.word	0x40021000
 8007d40:	0800eb30 	.word	0x0800eb30

08007d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d48:	f7ff ffda 	bl	8007d00 <HAL_RCC_GetHCLKFreq>
 8007d4c:	4601      	mov	r1, r0
 8007d4e:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	0adb      	lsrs	r3, r3, #11
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	4a04      	ldr	r2, [pc, #16]	; (8007d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d5a:	5cd3      	ldrb	r3, [r2, r3]
 8007d5c:	f003 031f 	and.w	r3, r3, #31
 8007d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40021000 	.word	0x40021000
 8007d6c:	0800eb30 	.word	0x0800eb30

08007d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d76:	4b1e      	ldr	r3, [pc, #120]	; (8007df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d80:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	091b      	lsrs	r3, r3, #4
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d10c      	bne.n	8007dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d94:	4a17      	ldr	r2, [pc, #92]	; (8007df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9c:	4a14      	ldr	r2, [pc, #80]	; (8007df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d9e:	68d2      	ldr	r2, [r2, #12]
 8007da0:	0a12      	lsrs	r2, r2, #8
 8007da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007da6:	fb02 f303 	mul.w	r3, r2, r3
 8007daa:	617b      	str	r3, [r7, #20]
    break;
 8007dac:	e00c      	b.n	8007dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007dae:	4a12      	ldr	r2, [pc, #72]	; (8007df8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db6:	4a0e      	ldr	r2, [pc, #56]	; (8007df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007db8:	68d2      	ldr	r2, [r2, #12]
 8007dba:	0a12      	lsrs	r2, r2, #8
 8007dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	617b      	str	r3, [r7, #20]
    break;
 8007dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007dc8:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	0e5b      	lsrs	r3, r3, #25
 8007dce:	f003 0303 	and.w	r3, r3, #3
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007de2:	687b      	ldr	r3, [r7, #4]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	40021000 	.word	0x40021000
 8007df4:	007a1200 	.word	0x007a1200
 8007df8:	00f42400 	.word	0x00f42400

08007dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e04:	2300      	movs	r3, #0
 8007e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e08:	2300      	movs	r3, #0
 8007e0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8098 	beq.w	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e1e:	4b43      	ldr	r3, [pc, #268]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10d      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e2a:	4b40      	ldr	r3, [pc, #256]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2e:	4a3f      	ldr	r2, [pc, #252]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e34:	6593      	str	r3, [r2, #88]	; 0x58
 8007e36:	4b3d      	ldr	r3, [pc, #244]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e3e:	60bb      	str	r3, [r7, #8]
 8007e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e42:	2301      	movs	r3, #1
 8007e44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e46:	4b3a      	ldr	r3, [pc, #232]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a39      	ldr	r2, [pc, #228]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e52:	f7fc fbb5 	bl	80045c0 <HAL_GetTick>
 8007e56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e58:	e009      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e5a:	f7fc fbb1 	bl	80045c0 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d902      	bls.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8007e6c:	e005      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e6e:	4b30      	ldr	r3, [pc, #192]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0ef      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007e7a:	7cfb      	ldrb	r3, [r7, #19]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d159      	bne.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e80:	4b2a      	ldr	r3, [pc, #168]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d01e      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d019      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e9c:	4b23      	ldr	r3, [pc, #140]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ea8:	4b20      	ldr	r3, [pc, #128]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eae:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007eb8:	4b1c      	ldr	r3, [pc, #112]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebe:	4a1b      	ldr	r2, [pc, #108]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ec8:	4a18      	ldr	r2, [pc, #96]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d016      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eda:	f7fc fb71 	bl	80045c0 <HAL_GetTick>
 8007ede:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ee0:	e00b      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ee2:	f7fc fb6d 	bl	80045c0 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d902      	bls.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	74fb      	strb	r3, [r7, #19]
            break;
 8007ef8:	e006      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007efa:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0ec      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007f08:	7cfb      	ldrb	r3, [r7, #19]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10b      	bne.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1c:	4903      	ldr	r1, [pc, #12]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f24:	e008      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f26:	7cfb      	ldrb	r3, [r7, #19]
 8007f28:	74bb      	strb	r3, [r7, #18]
 8007f2a:	e005      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f34:	7cfb      	ldrb	r3, [r7, #19]
 8007f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f38:	7c7b      	ldrb	r3, [r7, #17]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d105      	bne.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f3e:	4ba6      	ldr	r3, [pc, #664]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f42:	4aa5      	ldr	r2, [pc, #660]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f56:	4ba0      	ldr	r3, [pc, #640]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5c:	f023 0203 	bic.w	r2, r3, #3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	499c      	ldr	r1, [pc, #624]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f78:	4b97      	ldr	r3, [pc, #604]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7e:	f023 020c 	bic.w	r2, r3, #12
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	4994      	ldr	r1, [pc, #592]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f9a:	4b8f      	ldr	r3, [pc, #572]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	498b      	ldr	r1, [pc, #556]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fbc:	4b86      	ldr	r3, [pc, #536]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	4983      	ldr	r1, [pc, #524]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fde:	4b7e      	ldr	r3, [pc, #504]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	497a      	ldr	r1, [pc, #488]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008000:	4b75      	ldr	r3, [pc, #468]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	4972      	ldr	r1, [pc, #456]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008010:	4313      	orrs	r3, r2
 8008012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008022:	4b6d      	ldr	r3, [pc, #436]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	4969      	ldr	r1, [pc, #420]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008044:	4b64      	ldr	r3, [pc, #400]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	4961      	ldr	r1, [pc, #388]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008054:	4313      	orrs	r3, r2
 8008056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008066:	4b5c      	ldr	r3, [pc, #368]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	4958      	ldr	r1, [pc, #352]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008084:	2b00      	cmp	r3, #0
 8008086:	d015      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008088:	4b53      	ldr	r3, [pc, #332]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800808a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	4950      	ldr	r1, [pc, #320]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008098:	4313      	orrs	r3, r2
 800809a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a6:	d105      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080a8:	4b4b      	ldr	r3, [pc, #300]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	4a4a      	ldr	r2, [pc, #296]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d015      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80080c0:	4b45      	ldr	r3, [pc, #276]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	4942      	ldr	r1, [pc, #264]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080de:	d105      	bne.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080e0:	4b3d      	ldr	r3, [pc, #244]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	4a3c      	ldr	r2, [pc, #240]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d015      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080f8:	4b37      	ldr	r3, [pc, #220]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	4934      	ldr	r1, [pc, #208]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008108:	4313      	orrs	r3, r2
 800810a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008116:	d105      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008118:	4b2f      	ldr	r3, [pc, #188]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	4a2e      	ldr	r2, [pc, #184]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800811e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008122:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d015      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008130:	4b29      	ldr	r3, [pc, #164]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813e:	4926      	ldr	r1, [pc, #152]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008140:	4313      	orrs	r3, r2
 8008142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800814e:	d105      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008150:	4b21      	ldr	r3, [pc, #132]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	4a20      	ldr	r2, [pc, #128]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800815a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d015      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008168:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800816a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	4918      	ldr	r1, [pc, #96]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008178:	4313      	orrs	r3, r2
 800817a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008186:	d105      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008188:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	4a12      	ldr	r2, [pc, #72]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800818e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d015      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80081a0:	4b0d      	ldr	r3, [pc, #52]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ae:	490a      	ldr	r1, [pc, #40]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081be:	d105      	bne.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	4a04      	ldr	r2, [pc, #16]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80081cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	40021000 	.word	0x40021000

080081dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e049      	b.n	8008282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d106      	bne.n	8008208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7fb ff92 	bl	800412c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3304      	adds	r3, #4
 8008218:	4619      	mov	r1, r3
 800821a:	4610      	mov	r0, r2
 800821c:	f001 f830 	bl	8009280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e049      	b.n	8008330 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d106      	bne.n	80082b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f841 	bl	8008338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3304      	adds	r3, #4
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f000 ffd9 	bl	8009280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d109      	bne.n	8008370 <HAL_TIM_PWM_Start+0x24>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b01      	cmp	r3, #1
 8008366:	bf14      	ite	ne
 8008368:	2301      	movne	r3, #1
 800836a:	2300      	moveq	r3, #0
 800836c:	b2db      	uxtb	r3, r3
 800836e:	e03c      	b.n	80083ea <HAL_TIM_PWM_Start+0x9e>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b04      	cmp	r3, #4
 8008374:	d109      	bne.n	800838a <HAL_TIM_PWM_Start+0x3e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b01      	cmp	r3, #1
 8008380:	bf14      	ite	ne
 8008382:	2301      	movne	r3, #1
 8008384:	2300      	moveq	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	e02f      	b.n	80083ea <HAL_TIM_PWM_Start+0x9e>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b08      	cmp	r3, #8
 800838e:	d109      	bne.n	80083a4 <HAL_TIM_PWM_Start+0x58>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b01      	cmp	r3, #1
 800839a:	bf14      	ite	ne
 800839c:	2301      	movne	r3, #1
 800839e:	2300      	moveq	r3, #0
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	e022      	b.n	80083ea <HAL_TIM_PWM_Start+0x9e>
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b0c      	cmp	r3, #12
 80083a8:	d109      	bne.n	80083be <HAL_TIM_PWM_Start+0x72>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	bf14      	ite	ne
 80083b6:	2301      	movne	r3, #1
 80083b8:	2300      	moveq	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	e015      	b.n	80083ea <HAL_TIM_PWM_Start+0x9e>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d109      	bne.n	80083d8 <HAL_TIM_PWM_Start+0x8c>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	bf14      	ite	ne
 80083d0:	2301      	movne	r3, #1
 80083d2:	2300      	moveq	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	e008      	b.n	80083ea <HAL_TIM_PWM_Start+0x9e>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	bf14      	ite	ne
 80083e4:	2301      	movne	r3, #1
 80083e6:	2300      	moveq	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e06e      	b.n	80084d0 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <HAL_TIM_PWM_Start+0xb6>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008400:	e023      	b.n	800844a <HAL_TIM_PWM_Start+0xfe>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b04      	cmp	r3, #4
 8008406:	d104      	bne.n	8008412 <HAL_TIM_PWM_Start+0xc6>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008410:	e01b      	b.n	800844a <HAL_TIM_PWM_Start+0xfe>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b08      	cmp	r3, #8
 8008416:	d104      	bne.n	8008422 <HAL_TIM_PWM_Start+0xd6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008420:	e013      	b.n	800844a <HAL_TIM_PWM_Start+0xfe>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b0c      	cmp	r3, #12
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Start+0xe6>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008430:	e00b      	b.n	800844a <HAL_TIM_PWM_Start+0xfe>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b10      	cmp	r3, #16
 8008436:	d104      	bne.n	8008442 <HAL_TIM_PWM_Start+0xf6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008440:	e003      	b.n	800844a <HAL_TIM_PWM_Start+0xfe>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2201      	movs	r2, #1
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f001 fd04 	bl	8009e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a1e      	ldr	r2, [pc, #120]	; (80084d8 <HAL_TIM_PWM_Start+0x18c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d013      	beq.n	800848a <HAL_TIM_PWM_Start+0x13e>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a1d      	ldr	r2, [pc, #116]	; (80084dc <HAL_TIM_PWM_Start+0x190>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00e      	beq.n	800848a <HAL_TIM_PWM_Start+0x13e>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a1b      	ldr	r2, [pc, #108]	; (80084e0 <HAL_TIM_PWM_Start+0x194>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d009      	beq.n	800848a <HAL_TIM_PWM_Start+0x13e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a1a      	ldr	r2, [pc, #104]	; (80084e4 <HAL_TIM_PWM_Start+0x198>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d004      	beq.n	800848a <HAL_TIM_PWM_Start+0x13e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <HAL_TIM_PWM_Start+0x19c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d101      	bne.n	800848e <HAL_TIM_PWM_Start+0x142>
 800848a:	2301      	movs	r3, #1
 800848c:	e000      	b.n	8008490 <HAL_TIM_PWM_Start+0x144>
 800848e:	2300      	movs	r3, #0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689a      	ldr	r2, [r3, #8]
 80084aa:	4b10      	ldr	r3, [pc, #64]	; (80084ec <HAL_TIM_PWM_Start+0x1a0>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b06      	cmp	r3, #6
 80084b4:	d00b      	beq.n	80084ce <HAL_TIM_PWM_Start+0x182>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084bc:	d007      	beq.n	80084ce <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f042 0201 	orr.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40012c00 	.word	0x40012c00
 80084dc:	40013400 	.word	0x40013400
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40014400 	.word	0x40014400
 80084e8:	40014800 	.word	0x40014800
 80084ec:	00010007 	.word	0x00010007

080084f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2200      	movs	r2, #0
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	4618      	mov	r0, r3
 8008504:	f001 fcac 	bl	8009e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a3e      	ldr	r2, [pc, #248]	; (8008608 <HAL_TIM_PWM_Stop+0x118>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <HAL_TIM_PWM_Stop+0x4a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a3d      	ldr	r2, [pc, #244]	; (800860c <HAL_TIM_PWM_Stop+0x11c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00e      	beq.n	800853a <HAL_TIM_PWM_Stop+0x4a>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a3b      	ldr	r2, [pc, #236]	; (8008610 <HAL_TIM_PWM_Stop+0x120>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d009      	beq.n	800853a <HAL_TIM_PWM_Stop+0x4a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a3a      	ldr	r2, [pc, #232]	; (8008614 <HAL_TIM_PWM_Stop+0x124>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d004      	beq.n	800853a <HAL_TIM_PWM_Stop+0x4a>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a38      	ldr	r2, [pc, #224]	; (8008618 <HAL_TIM_PWM_Stop+0x128>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d101      	bne.n	800853e <HAL_TIM_PWM_Stop+0x4e>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <HAL_TIM_PWM_Stop+0x50>
 800853e:	2300      	movs	r3, #0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d017      	beq.n	8008574 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6a1a      	ldr	r2, [r3, #32]
 800854a:	f241 1311 	movw	r3, #4369	; 0x1111
 800854e:	4013      	ands	r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10f      	bne.n	8008574 <HAL_TIM_PWM_Stop+0x84>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6a1a      	ldr	r2, [r3, #32]
 800855a:	f244 4344 	movw	r3, #17476	; 0x4444
 800855e:	4013      	ands	r3, r2
 8008560:	2b00      	cmp	r3, #0
 8008562:	d107      	bne.n	8008574 <HAL_TIM_PWM_Stop+0x84>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008572:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a1a      	ldr	r2, [r3, #32]
 800857a:	f241 1311 	movw	r3, #4369	; 0x1111
 800857e:	4013      	ands	r3, r2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10f      	bne.n	80085a4 <HAL_TIM_PWM_Stop+0xb4>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6a1a      	ldr	r2, [r3, #32]
 800858a:	f244 4344 	movw	r3, #17476	; 0x4444
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d107      	bne.n	80085a4 <HAL_TIM_PWM_Stop+0xb4>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0201 	bic.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d104      	bne.n	80085b4 <HAL_TIM_PWM_Stop+0xc4>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b2:	e023      	b.n	80085fc <HAL_TIM_PWM_Stop+0x10c>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d104      	bne.n	80085c4 <HAL_TIM_PWM_Stop+0xd4>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c2:	e01b      	b.n	80085fc <HAL_TIM_PWM_Stop+0x10c>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d104      	bne.n	80085d4 <HAL_TIM_PWM_Stop+0xe4>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085d2:	e013      	b.n	80085fc <HAL_TIM_PWM_Stop+0x10c>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b0c      	cmp	r3, #12
 80085d8:	d104      	bne.n	80085e4 <HAL_TIM_PWM_Stop+0xf4>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085e2:	e00b      	b.n	80085fc <HAL_TIM_PWM_Stop+0x10c>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d104      	bne.n	80085f4 <HAL_TIM_PWM_Stop+0x104>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f2:	e003      	b.n	80085fc <HAL_TIM_PWM_Stop+0x10c>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40012c00 	.word	0x40012c00
 800860c:	40013400 	.word	0x40013400
 8008610:	40014000 	.word	0x40014000
 8008614:	40014400 	.word	0x40014400
 8008618:	40014800 	.word	0x40014800

0800861c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e049      	b.n	80086c2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f841 	bl	80086ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3304      	adds	r3, #4
 8008658:	4619      	mov	r1, r3
 800865a:	4610      	mov	r0, r2
 800865c:	f000 fe10 	bl	8009280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80086d2:	bf00      	nop
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_IC_Start+0x1a>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	e023      	b.n	8008742 <HAL_TIM_IC_Start+0x62>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b04      	cmp	r3, #4
 80086fe:	d104      	bne.n	800870a <HAL_TIM_IC_Start+0x2a>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008706:	b2db      	uxtb	r3, r3
 8008708:	e01b      	b.n	8008742 <HAL_TIM_IC_Start+0x62>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b08      	cmp	r3, #8
 800870e:	d104      	bne.n	800871a <HAL_TIM_IC_Start+0x3a>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008716:	b2db      	uxtb	r3, r3
 8008718:	e013      	b.n	8008742 <HAL_TIM_IC_Start+0x62>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b0c      	cmp	r3, #12
 800871e:	d104      	bne.n	800872a <HAL_TIM_IC_Start+0x4a>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008726:	b2db      	uxtb	r3, r3
 8008728:	e00b      	b.n	8008742 <HAL_TIM_IC_Start+0x62>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b10      	cmp	r3, #16
 800872e:	d104      	bne.n	800873a <HAL_TIM_IC_Start+0x5a>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008736:	b2db      	uxtb	r3, r3
 8008738:	e003      	b.n	8008742 <HAL_TIM_IC_Start+0x62>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008740:	b2db      	uxtb	r3, r3
 8008742:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d104      	bne.n	8008754 <HAL_TIM_IC_Start+0x74>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008750:	b2db      	uxtb	r3, r3
 8008752:	e013      	b.n	800877c <HAL_TIM_IC_Start+0x9c>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b04      	cmp	r3, #4
 8008758:	d104      	bne.n	8008764 <HAL_TIM_IC_Start+0x84>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008760:	b2db      	uxtb	r3, r3
 8008762:	e00b      	b.n	800877c <HAL_TIM_IC_Start+0x9c>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b08      	cmp	r3, #8
 8008768:	d104      	bne.n	8008774 <HAL_TIM_IC_Start+0x94>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008770:	b2db      	uxtb	r3, r3
 8008772:	e003      	b.n	800877c <HAL_TIM_IC_Start+0x9c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800877a:	b2db      	uxtb	r3, r3
 800877c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d102      	bne.n	800878a <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d001      	beq.n	800878e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e064      	b.n	8008858 <HAL_TIM_IC_Start+0x178>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d104      	bne.n	800879e <HAL_TIM_IC_Start+0xbe>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800879c:	e023      	b.n	80087e6 <HAL_TIM_IC_Start+0x106>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d104      	bne.n	80087ae <HAL_TIM_IC_Start+0xce>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087ac:	e01b      	b.n	80087e6 <HAL_TIM_IC_Start+0x106>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d104      	bne.n	80087be <HAL_TIM_IC_Start+0xde>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087bc:	e013      	b.n	80087e6 <HAL_TIM_IC_Start+0x106>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b0c      	cmp	r3, #12
 80087c2:	d104      	bne.n	80087ce <HAL_TIM_IC_Start+0xee>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087cc:	e00b      	b.n	80087e6 <HAL_TIM_IC_Start+0x106>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b10      	cmp	r3, #16
 80087d2:	d104      	bne.n	80087de <HAL_TIM_IC_Start+0xfe>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087dc:	e003      	b.n	80087e6 <HAL_TIM_IC_Start+0x106>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d104      	bne.n	80087f6 <HAL_TIM_IC_Start+0x116>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087f4:	e013      	b.n	800881e <HAL_TIM_IC_Start+0x13e>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d104      	bne.n	8008806 <HAL_TIM_IC_Start+0x126>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008804:	e00b      	b.n	800881e <HAL_TIM_IC_Start+0x13e>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b08      	cmp	r3, #8
 800880a:	d104      	bne.n	8008816 <HAL_TIM_IC_Start+0x136>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008814:	e003      	b.n	800881e <HAL_TIM_IC_Start+0x13e>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2202      	movs	r2, #2
 800881a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2201      	movs	r2, #1
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	4618      	mov	r0, r3
 8008828:	f001 fb1a 	bl	8009e60 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <HAL_TIM_IC_Start+0x180>)
 8008834:	4013      	ands	r3, r2
 8008836:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b06      	cmp	r3, #6
 800883c:	d00b      	beq.n	8008856 <HAL_TIM_IC_Start+0x176>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008844:	d007      	beq.n	8008856 <HAL_TIM_IC_Start+0x176>
  {
    __HAL_TIM_ENABLE(htim);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0201 	orr.w	r2, r2, #1
 8008854:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	00010007 	.word	0x00010007

08008864 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2200      	movs	r2, #0
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f001 faf2 	bl	8009e60 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6a1a      	ldr	r2, [r3, #32]
 8008882:	f241 1311 	movw	r3, #4369	; 0x1111
 8008886:	4013      	ands	r3, r2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10f      	bne.n	80088ac <HAL_TIM_IC_Stop+0x48>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6a1a      	ldr	r2, [r3, #32]
 8008892:	f244 4344 	movw	r3, #17476	; 0x4444
 8008896:	4013      	ands	r3, r2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d107      	bne.n	80088ac <HAL_TIM_IC_Stop+0x48>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0201 	bic.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <HAL_TIM_IC_Stop+0x58>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088ba:	e023      	b.n	8008904 <HAL_TIM_IC_Stop+0xa0>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d104      	bne.n	80088cc <HAL_TIM_IC_Stop+0x68>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088ca:	e01b      	b.n	8008904 <HAL_TIM_IC_Stop+0xa0>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d104      	bne.n	80088dc <HAL_TIM_IC_Stop+0x78>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088da:	e013      	b.n	8008904 <HAL_TIM_IC_Stop+0xa0>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b0c      	cmp	r3, #12
 80088e0:	d104      	bne.n	80088ec <HAL_TIM_IC_Stop+0x88>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088ea:	e00b      	b.n	8008904 <HAL_TIM_IC_Stop+0xa0>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2b10      	cmp	r3, #16
 80088f0:	d104      	bne.n	80088fc <HAL_TIM_IC_Stop+0x98>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088fa:	e003      	b.n	8008904 <HAL_TIM_IC_Stop+0xa0>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d104      	bne.n	8008914 <HAL_TIM_IC_Stop+0xb0>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008912:	e013      	b.n	800893c <HAL_TIM_IC_Stop+0xd8>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b04      	cmp	r3, #4
 8008918:	d104      	bne.n	8008924 <HAL_TIM_IC_Stop+0xc0>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008922:	e00b      	b.n	800893c <HAL_TIM_IC_Stop+0xd8>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b08      	cmp	r3, #8
 8008928:	d104      	bne.n	8008934 <HAL_TIM_IC_Stop+0xd0>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008932:	e003      	b.n	800893c <HAL_TIM_IC_Stop+0xd8>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b086      	sub	sp, #24
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e097      	b.n	8008a8a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fb fc34 	bl	80041dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6812      	ldr	r2, [r2, #0]
 8008986:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800898a:	f023 0307 	bic.w	r3, r3, #7
 800898e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3304      	adds	r3, #4
 8008998:	4619      	mov	r1, r3
 800899a:	4610      	mov	r0, r2
 800899c:	f000 fc70 	bl	8009280 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c8:	f023 0303 	bic.w	r3, r3, #3
 80089cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	689a      	ldr	r2, [r3, #8]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	021b      	lsls	r3, r3, #8
 80089d8:	4313      	orrs	r3, r2
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4313      	orrs	r3, r2
 80089de:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80089e6:	f023 030c 	bic.w	r3, r3, #12
 80089ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	68da      	ldr	r2, [r3, #12]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	021b      	lsls	r3, r3, #8
 8008a02:	4313      	orrs	r3, r2
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	011a      	lsls	r2, r3, #4
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	031b      	lsls	r3, r3, #12
 8008a16:	4313      	orrs	r3, r2
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008a24:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008a2c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aa2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008aaa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ab2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aba:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d110      	bne.n	8008ae4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d102      	bne.n	8008ace <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ac8:	7b7b      	ldrb	r3, [r7, #13]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d001      	beq.n	8008ad2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e068      	b.n	8008ba4 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2202      	movs	r2, #2
 8008ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ae2:	e031      	b.n	8008b48 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d110      	bne.n	8008b0c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d102      	bne.n	8008af6 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008af0:	7b3b      	ldrb	r3, [r7, #12]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d001      	beq.n	8008afa <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e054      	b.n	8008ba4 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b0a:	e01d      	b.n	8008b48 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d108      	bne.n	8008b24 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d105      	bne.n	8008b24 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b18:	7b7b      	ldrb	r3, [r7, #13]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d102      	bne.n	8008b24 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b1e:	7b3b      	ldrb	r3, [r7, #12]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d001      	beq.n	8008b28 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e03d      	b.n	8008ba4 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <HAL_TIM_Encoder_Start+0xc2>
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d008      	beq.n	8008b64 <HAL_TIM_Encoder_Start+0xd2>
 8008b52:	e00f      	b.n	8008b74 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f001 f97f 	bl	8009e60 <TIM_CCxChannelCmd>
      break;
 8008b62:	e016      	b.n	8008b92 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	2104      	movs	r1, #4
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 f977 	bl	8009e60 <TIM_CCxChannelCmd>
      break;
 8008b72:	e00e      	b.n	8008b92 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f001 f96f 	bl	8009e60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2201      	movs	r2, #1
 8008b88:	2104      	movs	r1, #4
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f001 f968 	bl	8009e60 <TIM_CCxChannelCmd>
      break;
 8008b90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f042 0201 	orr.w	r2, r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <HAL_TIM_Encoder_Stop+0x16>
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d008      	beq.n	8008bd2 <HAL_TIM_Encoder_Stop+0x26>
 8008bc0:	e00f      	b.n	8008be2 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2100      	movs	r1, #0
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f001 f948 	bl	8009e60 <TIM_CCxChannelCmd>
      break;
 8008bd0:	e016      	b.n	8008c00 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2104      	movs	r1, #4
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f001 f940 	bl	8009e60 <TIM_CCxChannelCmd>
      break;
 8008be0:	e00e      	b.n	8008c00 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	2100      	movs	r1, #0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 f938 	bl	8009e60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2104      	movs	r1, #4
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f001 f931 	bl	8009e60 <TIM_CCxChannelCmd>
      break;
 8008bfe:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6a1a      	ldr	r2, [r3, #32]
 8008c06:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10f      	bne.n	8008c30 <HAL_TIM_Encoder_Stop+0x84>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6a1a      	ldr	r2, [r3, #32]
 8008c16:	f244 4344 	movw	r3, #17476	; 0x4444
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d107      	bne.n	8008c30 <HAL_TIM_Encoder_Stop+0x84>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <HAL_TIM_Encoder_Stop+0x90>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d148      	bne.n	8008cce <HAL_TIM_Encoder_Stop+0x122>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <HAL_TIM_Encoder_Stop+0xa0>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c4a:	e023      	b.n	8008c94 <HAL_TIM_Encoder_Stop+0xe8>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d104      	bne.n	8008c5c <HAL_TIM_Encoder_Stop+0xb0>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c5a:	e01b      	b.n	8008c94 <HAL_TIM_Encoder_Stop+0xe8>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	d104      	bne.n	8008c6c <HAL_TIM_Encoder_Stop+0xc0>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c6a:	e013      	b.n	8008c94 <HAL_TIM_Encoder_Stop+0xe8>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2b0c      	cmp	r3, #12
 8008c70:	d104      	bne.n	8008c7c <HAL_TIM_Encoder_Stop+0xd0>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c7a:	e00b      	b.n	8008c94 <HAL_TIM_Encoder_Stop+0xe8>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b10      	cmp	r3, #16
 8008c80:	d104      	bne.n	8008c8c <HAL_TIM_Encoder_Stop+0xe0>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c8a:	e003      	b.n	8008c94 <HAL_TIM_Encoder_Stop+0xe8>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <HAL_TIM_Encoder_Stop+0xf8>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ca2:	e024      	b.n	8008cee <HAL_TIM_Encoder_Stop+0x142>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	d104      	bne.n	8008cb4 <HAL_TIM_Encoder_Stop+0x108>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cb2:	e01c      	b.n	8008cee <HAL_TIM_Encoder_Stop+0x142>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	d104      	bne.n	8008cc4 <HAL_TIM_Encoder_Stop+0x118>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008cc2:	e014      	b.n	8008cee <HAL_TIM_Encoder_Stop+0x142>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8008ccc:	e00f      	b.n	8008cee <HAL_TIM_Encoder_Stop+0x142>
  }
  else 
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d101      	bne.n	8008d12 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e082      	b.n	8008e18 <HAL_TIM_IC_ConfigChannel+0x120>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d11b      	bne.n	8008d58 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	6819      	ldr	r1, [r3, #0]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f000 fedc 	bl	8009aec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699a      	ldr	r2, [r3, #24]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f022 020c 	bic.w	r2, r2, #12
 8008d42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6999      	ldr	r1, [r3, #24]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	619a      	str	r2, [r3, #24]
 8008d56:	e05a      	b.n	8008e0e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d11c      	bne.n	8008d98 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6819      	ldr	r1, [r3, #0]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f000 ff54 	bl	8009c1a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699a      	ldr	r2, [r3, #24]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008d80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6999      	ldr	r1, [r3, #24]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	021a      	lsls	r2, r3, #8
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	619a      	str	r2, [r3, #24]
 8008d96:	e03a      	b.n	8008e0e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b08      	cmp	r3, #8
 8008d9c:	d11b      	bne.n	8008dd6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6819      	ldr	r1, [r3, #0]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f000 ffa1 	bl	8009cf4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69da      	ldr	r2, [r3, #28]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 020c 	bic.w	r2, r2, #12
 8008dc0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69d9      	ldr	r1, [r3, #28]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	61da      	str	r2, [r3, #28]
 8008dd4:	e01b      	b.n	8008e0e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	6819      	ldr	r1, [r3, #0]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f000 ffc1 	bl	8009d6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69da      	ldr	r2, [r3, #28]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008df8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69d9      	ldr	r1, [r3, #28]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	021a      	lsls	r2, r3, #8
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d101      	bne.n	8008e3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008e36:	2302      	movs	r3, #2
 8008e38:	e0fd      	b.n	8009036 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b14      	cmp	r3, #20
 8008e46:	f200 80f0 	bhi.w	800902a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008e4a:	a201      	add	r2, pc, #4	; (adr r2, 8008e50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008ea5 	.word	0x08008ea5
 8008e54:	0800902b 	.word	0x0800902b
 8008e58:	0800902b 	.word	0x0800902b
 8008e5c:	0800902b 	.word	0x0800902b
 8008e60:	08008ee5 	.word	0x08008ee5
 8008e64:	0800902b 	.word	0x0800902b
 8008e68:	0800902b 	.word	0x0800902b
 8008e6c:	0800902b 	.word	0x0800902b
 8008e70:	08008f27 	.word	0x08008f27
 8008e74:	0800902b 	.word	0x0800902b
 8008e78:	0800902b 	.word	0x0800902b
 8008e7c:	0800902b 	.word	0x0800902b
 8008e80:	08008f67 	.word	0x08008f67
 8008e84:	0800902b 	.word	0x0800902b
 8008e88:	0800902b 	.word	0x0800902b
 8008e8c:	0800902b 	.word	0x0800902b
 8008e90:	08008fa9 	.word	0x08008fa9
 8008e94:	0800902b 	.word	0x0800902b
 8008e98:	0800902b 	.word	0x0800902b
 8008e9c:	0800902b 	.word	0x0800902b
 8008ea0:	08008fe9 	.word	0x08008fe9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fa78 	bl	80093a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0208 	orr.w	r2, r2, #8
 8008ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699a      	ldr	r2, [r3, #24]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0204 	bic.w	r2, r2, #4
 8008ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6999      	ldr	r1, [r3, #24]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691a      	ldr	r2, [r3, #16]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	619a      	str	r2, [r3, #24]
      break;
 8008ee2:	e0a3      	b.n	800902c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68b9      	ldr	r1, [r7, #8]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fae8 	bl	80094c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	699a      	ldr	r2, [r3, #24]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6999      	ldr	r1, [r3, #24]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	021a      	lsls	r2, r3, #8
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	619a      	str	r2, [r3, #24]
      break;
 8008f24:	e082      	b.n	800902c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fb51 	bl	80095d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69da      	ldr	r2, [r3, #28]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 0208 	orr.w	r2, r2, #8
 8008f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69da      	ldr	r2, [r3, #28]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0204 	bic.w	r2, r2, #4
 8008f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69d9      	ldr	r1, [r3, #28]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	430a      	orrs	r2, r1
 8008f62:	61da      	str	r2, [r3, #28]
      break;
 8008f64:	e062      	b.n	800902c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fbb9 	bl	80096e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	69da      	ldr	r2, [r3, #28]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69da      	ldr	r2, [r3, #28]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69d9      	ldr	r1, [r3, #28]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	021a      	lsls	r2, r3, #8
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	61da      	str	r2, [r3, #28]
      break;
 8008fa6:	e041      	b.n	800902c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fc22 	bl	80097f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0208 	orr.w	r2, r2, #8
 8008fc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0204 	bic.w	r2, r2, #4
 8008fd2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008fe6:	e021      	b.n	800902c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fc66 	bl	80098c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009002:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009012:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	021a      	lsls	r2, r3, #8
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009028:	e000      	b.n	800902c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800902a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop

08009040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_TIM_ConfigClockSource+0x18>
 8009054:	2302      	movs	r3, #2
 8009056:	e0c3      	b.n	80091e0 <HAL_TIM_ConfigClockSource+0x1a0>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009076:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800907a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009082:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b70      	cmp	r3, #112	; 0x70
 8009092:	d038      	beq.n	8009106 <HAL_TIM_ConfigClockSource+0xc6>
 8009094:	2b70      	cmp	r3, #112	; 0x70
 8009096:	d815      	bhi.n	80090c4 <HAL_TIM_ConfigClockSource+0x84>
 8009098:	2b30      	cmp	r3, #48	; 0x30
 800909a:	f000 808e 	beq.w	80091ba <HAL_TIM_ConfigClockSource+0x17a>
 800909e:	2b30      	cmp	r3, #48	; 0x30
 80090a0:	d809      	bhi.n	80090b6 <HAL_TIM_ConfigClockSource+0x76>
 80090a2:	2b10      	cmp	r3, #16
 80090a4:	f000 8089 	beq.w	80091ba <HAL_TIM_ConfigClockSource+0x17a>
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	f000 8086 	beq.w	80091ba <HAL_TIM_ConfigClockSource+0x17a>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 8083 	beq.w	80091ba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80090b4:	e08b      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80090b6:	2b50      	cmp	r3, #80	; 0x50
 80090b8:	d04f      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x11a>
 80090ba:	2b60      	cmp	r3, #96	; 0x60
 80090bc:	d05d      	beq.n	800917a <HAL_TIM_ConfigClockSource+0x13a>
 80090be:	2b40      	cmp	r3, #64	; 0x40
 80090c0:	d06b      	beq.n	800919a <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80090c2:	e084      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80090c4:	4a48      	ldr	r2, [pc, #288]	; (80091e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d077      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0x17a>
 80090ca:	4a47      	ldr	r2, [pc, #284]	; (80091e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d809      	bhi.n	80090e4 <HAL_TIM_ConfigClockSource+0xa4>
 80090d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090d4:	d02e      	beq.n	8009134 <HAL_TIM_ConfigClockSource+0xf4>
 80090d6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80090da:	d06e      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0x17a>
 80090dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e0:	d074      	beq.n	80091cc <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80090e2:	e074      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80090e4:	4a41      	ldr	r2, [pc, #260]	; (80091ec <HAL_TIM_ConfigClockSource+0x1ac>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d067      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0x17a>
 80090ea:	4a40      	ldr	r2, [pc, #256]	; (80091ec <HAL_TIM_ConfigClockSource+0x1ac>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d803      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0xb8>
 80090f0:	4a3f      	ldr	r2, [pc, #252]	; (80091f0 <HAL_TIM_ConfigClockSource+0x1b0>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d061      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80090f6:	e06a      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80090f8:	4a3e      	ldr	r2, [pc, #248]	; (80091f4 <HAL_TIM_ConfigClockSource+0x1b4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d05d      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0x17a>
 80090fe:	4a3e      	ldr	r2, [pc, #248]	; (80091f8 <HAL_TIM_ConfigClockSource+0x1b8>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d05a      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8009104:	e063      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	6899      	ldr	r1, [r3, #8]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f000 fe83 	bl	8009e20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009128:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	609a      	str	r2, [r3, #8]
      break;
 8009132:	e04c      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	6899      	ldr	r1, [r3, #8]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f000 fe6c 	bl	8009e20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689a      	ldr	r2, [r3, #8]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009156:	609a      	str	r2, [r3, #8]
      break;
 8009158:	e039      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6818      	ldr	r0, [r3, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	6859      	ldr	r1, [r3, #4]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	461a      	mov	r2, r3
 8009168:	f000 fd28 	bl	8009bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2150      	movs	r1, #80	; 0x50
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fe37 	bl	8009de6 <TIM_ITRx_SetConfig>
      break;
 8009178:	e029      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	6859      	ldr	r1, [r3, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	461a      	mov	r2, r3
 8009188:	f000 fd84 	bl	8009c94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2160      	movs	r1, #96	; 0x60
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fe27 	bl	8009de6 <TIM_ITRx_SetConfig>
      break;
 8009198:	e019      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6818      	ldr	r0, [r3, #0]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	6859      	ldr	r1, [r3, #4]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f000 fd08 	bl	8009bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2140      	movs	r1, #64	; 0x40
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fe17 	bl	8009de6 <TIM_ITRx_SetConfig>
      break;
 80091b8:	e009      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4619      	mov	r1, r3
 80091c4:	4610      	mov	r0, r2
 80091c6:	f000 fe0e 	bl	8009de6 <TIM_ITRx_SetConfig>
      break;
 80091ca:	e000      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80091cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	00100020 	.word	0x00100020
 80091ec:	00100040 	.word	0x00100040
 80091f0:	00100030 	.word	0x00100030
 80091f4:	00100060 	.word	0x00100060
 80091f8:	00100070 	.word	0x00100070

080091fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009210:	2302      	movs	r3, #2
 8009212:	e031      	b.n	8009278 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fbb0 	bl	800998c <TIM_SlaveTimer_SetConfig>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e018      	b.n	8009278 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009254:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009264:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a3c      	ldr	r2, [pc, #240]	; (8009384 <TIM_Base_SetConfig+0x104>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d00f      	beq.n	80092b8 <TIM_Base_SetConfig+0x38>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929e:	d00b      	beq.n	80092b8 <TIM_Base_SetConfig+0x38>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a39      	ldr	r2, [pc, #228]	; (8009388 <TIM_Base_SetConfig+0x108>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d007      	beq.n	80092b8 <TIM_Base_SetConfig+0x38>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a38      	ldr	r2, [pc, #224]	; (800938c <TIM_Base_SetConfig+0x10c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <TIM_Base_SetConfig+0x38>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a37      	ldr	r2, [pc, #220]	; (8009390 <TIM_Base_SetConfig+0x110>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d108      	bne.n	80092ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a2d      	ldr	r2, [pc, #180]	; (8009384 <TIM_Base_SetConfig+0x104>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d01b      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d8:	d017      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a2a      	ldr	r2, [pc, #168]	; (8009388 <TIM_Base_SetConfig+0x108>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d013      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a29      	ldr	r2, [pc, #164]	; (800938c <TIM_Base_SetConfig+0x10c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d00f      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a28      	ldr	r2, [pc, #160]	; (8009390 <TIM_Base_SetConfig+0x110>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d00b      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a27      	ldr	r2, [pc, #156]	; (8009394 <TIM_Base_SetConfig+0x114>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d007      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a26      	ldr	r2, [pc, #152]	; (8009398 <TIM_Base_SetConfig+0x118>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d003      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a25      	ldr	r2, [pc, #148]	; (800939c <TIM_Base_SetConfig+0x11c>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d108      	bne.n	800931c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a10      	ldr	r2, [pc, #64]	; (8009384 <TIM_Base_SetConfig+0x104>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00f      	beq.n	8009368 <TIM_Base_SetConfig+0xe8>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a11      	ldr	r2, [pc, #68]	; (8009390 <TIM_Base_SetConfig+0x110>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00b      	beq.n	8009368 <TIM_Base_SetConfig+0xe8>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <TIM_Base_SetConfig+0x114>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d007      	beq.n	8009368 <TIM_Base_SetConfig+0xe8>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a0f      	ldr	r2, [pc, #60]	; (8009398 <TIM_Base_SetConfig+0x118>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d003      	beq.n	8009368 <TIM_Base_SetConfig+0xe8>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a0e      	ldr	r2, [pc, #56]	; (800939c <TIM_Base_SetConfig+0x11c>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d103      	bne.n	8009370 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	615a      	str	r2, [r3, #20]
}
 8009376:	bf00      	nop
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	40012c00 	.word	0x40012c00
 8009388:	40000400 	.word	0x40000400
 800938c:	40000800 	.word	0x40000800
 8009390:	40013400 	.word	0x40013400
 8009394:	40014000 	.word	0x40014000
 8009398:	40014400 	.word	0x40014400
 800939c:	40014800 	.word	0x40014800

080093a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	f023 0201 	bic.w	r2, r3, #1
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0303 	bic.w	r3, r3, #3
 80093da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f023 0302 	bic.w	r3, r3, #2
 80093ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a2c      	ldr	r2, [pc, #176]	; (80094ac <TIM_OC1_SetConfig+0x10c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00f      	beq.n	8009420 <TIM_OC1_SetConfig+0x80>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a2b      	ldr	r2, [pc, #172]	; (80094b0 <TIM_OC1_SetConfig+0x110>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00b      	beq.n	8009420 <TIM_OC1_SetConfig+0x80>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a2a      	ldr	r2, [pc, #168]	; (80094b4 <TIM_OC1_SetConfig+0x114>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d007      	beq.n	8009420 <TIM_OC1_SetConfig+0x80>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a29      	ldr	r2, [pc, #164]	; (80094b8 <TIM_OC1_SetConfig+0x118>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_OC1_SetConfig+0x80>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a28      	ldr	r2, [pc, #160]	; (80094bc <TIM_OC1_SetConfig+0x11c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10c      	bne.n	800943a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f023 0308 	bic.w	r3, r3, #8
 8009426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f023 0304 	bic.w	r3, r3, #4
 8009438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a1b      	ldr	r2, [pc, #108]	; (80094ac <TIM_OC1_SetConfig+0x10c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00f      	beq.n	8009462 <TIM_OC1_SetConfig+0xc2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a1a      	ldr	r2, [pc, #104]	; (80094b0 <TIM_OC1_SetConfig+0x110>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00b      	beq.n	8009462 <TIM_OC1_SetConfig+0xc2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <TIM_OC1_SetConfig+0x114>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d007      	beq.n	8009462 <TIM_OC1_SetConfig+0xc2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a18      	ldr	r2, [pc, #96]	; (80094b8 <TIM_OC1_SetConfig+0x118>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d003      	beq.n	8009462 <TIM_OC1_SetConfig+0xc2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a17      	ldr	r2, [pc, #92]	; (80094bc <TIM_OC1_SetConfig+0x11c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d111      	bne.n	8009486 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	4313      	orrs	r3, r2
 800947a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	4313      	orrs	r3, r2
 8009484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	621a      	str	r2, [r3, #32]
}
 80094a0:	bf00      	nop
 80094a2:	371c      	adds	r7, #28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	40012c00 	.word	0x40012c00
 80094b0:	40013400 	.word	0x40013400
 80094b4:	40014000 	.word	0x40014000
 80094b8:	40014400 	.word	0x40014400
 80094bc:	40014800 	.word	0x40014800

080094c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f023 0210 	bic.w	r2, r3, #16
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f023 0320 	bic.w	r3, r3, #32
 800950e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	011b      	lsls	r3, r3, #4
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4313      	orrs	r3, r2
 800951a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a28      	ldr	r2, [pc, #160]	; (80095c0 <TIM_OC2_SetConfig+0x100>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <TIM_OC2_SetConfig+0x6c>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a27      	ldr	r2, [pc, #156]	; (80095c4 <TIM_OC2_SetConfig+0x104>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d10d      	bne.n	8009548 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a1d      	ldr	r2, [pc, #116]	; (80095c0 <TIM_OC2_SetConfig+0x100>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d00f      	beq.n	8009570 <TIM_OC2_SetConfig+0xb0>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a1c      	ldr	r2, [pc, #112]	; (80095c4 <TIM_OC2_SetConfig+0x104>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00b      	beq.n	8009570 <TIM_OC2_SetConfig+0xb0>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a1b      	ldr	r2, [pc, #108]	; (80095c8 <TIM_OC2_SetConfig+0x108>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d007      	beq.n	8009570 <TIM_OC2_SetConfig+0xb0>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a1a      	ldr	r2, [pc, #104]	; (80095cc <TIM_OC2_SetConfig+0x10c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d003      	beq.n	8009570 <TIM_OC2_SetConfig+0xb0>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a19      	ldr	r2, [pc, #100]	; (80095d0 <TIM_OC2_SetConfig+0x110>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d113      	bne.n	8009598 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800957e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4313      	orrs	r3, r2
 800958a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	4313      	orrs	r3, r2
 8009596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	621a      	str	r2, [r3, #32]
}
 80095b2:	bf00      	nop
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	40012c00 	.word	0x40012c00
 80095c4:	40013400 	.word	0x40013400
 80095c8:	40014000 	.word	0x40014000
 80095cc:	40014400 	.word	0x40014400
 80095d0:	40014800 	.word	0x40014800

080095d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0303 	bic.w	r3, r3, #3
 800960e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <TIM_OC3_SetConfig+0xfc>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_OC3_SetConfig+0x6a>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a26      	ldr	r2, [pc, #152]	; (80096d4 <TIM_OC3_SetConfig+0x100>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d10d      	bne.n	800965a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a1c      	ldr	r2, [pc, #112]	; (80096d0 <TIM_OC3_SetConfig+0xfc>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00f      	beq.n	8009682 <TIM_OC3_SetConfig+0xae>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a1b      	ldr	r2, [pc, #108]	; (80096d4 <TIM_OC3_SetConfig+0x100>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00b      	beq.n	8009682 <TIM_OC3_SetConfig+0xae>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a1a      	ldr	r2, [pc, #104]	; (80096d8 <TIM_OC3_SetConfig+0x104>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d007      	beq.n	8009682 <TIM_OC3_SetConfig+0xae>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a19      	ldr	r2, [pc, #100]	; (80096dc <TIM_OC3_SetConfig+0x108>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d003      	beq.n	8009682 <TIM_OC3_SetConfig+0xae>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a18      	ldr	r2, [pc, #96]	; (80096e0 <TIM_OC3_SetConfig+0x10c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d113      	bne.n	80096aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	4313      	orrs	r3, r2
 800969c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	621a      	str	r2, [r3, #32]
}
 80096c4:	bf00      	nop
 80096c6:	371c      	adds	r7, #28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	40013400 	.word	0x40013400
 80096d8:	40014000 	.word	0x40014000
 80096dc:	40014400 	.word	0x40014400
 80096e0:	40014800 	.word	0x40014800

080096e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800971e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	021b      	lsls	r3, r3, #8
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4313      	orrs	r3, r2
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	031b      	lsls	r3, r3, #12
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a28      	ldr	r2, [pc, #160]	; (80097e4 <TIM_OC4_SetConfig+0x100>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d003      	beq.n	8009750 <TIM_OC4_SetConfig+0x6c>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a27      	ldr	r2, [pc, #156]	; (80097e8 <TIM_OC4_SetConfig+0x104>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d10d      	bne.n	800976c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	031b      	lsls	r3, r3, #12
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	4313      	orrs	r3, r2
 8009762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800976a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <TIM_OC4_SetConfig+0x100>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d00f      	beq.n	8009794 <TIM_OC4_SetConfig+0xb0>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a1c      	ldr	r2, [pc, #112]	; (80097e8 <TIM_OC4_SetConfig+0x104>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00b      	beq.n	8009794 <TIM_OC4_SetConfig+0xb0>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a1b      	ldr	r2, [pc, #108]	; (80097ec <TIM_OC4_SetConfig+0x108>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d007      	beq.n	8009794 <TIM_OC4_SetConfig+0xb0>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a1a      	ldr	r2, [pc, #104]	; (80097f0 <TIM_OC4_SetConfig+0x10c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d003      	beq.n	8009794 <TIM_OC4_SetConfig+0xb0>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a19      	ldr	r2, [pc, #100]	; (80097f4 <TIM_OC4_SetConfig+0x110>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d113      	bne.n	80097bc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800979a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	019b      	lsls	r3, r3, #6
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	019b      	lsls	r3, r3, #6
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	621a      	str	r2, [r3, #32]
}
 80097d6:	bf00      	nop
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40012c00 	.word	0x40012c00
 80097e8:	40013400 	.word	0x40013400
 80097ec:	40014000 	.word	0x40014000
 80097f0:	40014400 	.word	0x40014400
 80097f4:	40014800 	.word	0x40014800

080097f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800983c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	041b      	lsls	r3, r3, #16
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4313      	orrs	r3, r2
 8009848:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a17      	ldr	r2, [pc, #92]	; (80098ac <TIM_OC5_SetConfig+0xb4>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d00f      	beq.n	8009872 <TIM_OC5_SetConfig+0x7a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a16      	ldr	r2, [pc, #88]	; (80098b0 <TIM_OC5_SetConfig+0xb8>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d00b      	beq.n	8009872 <TIM_OC5_SetConfig+0x7a>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <TIM_OC5_SetConfig+0xbc>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d007      	beq.n	8009872 <TIM_OC5_SetConfig+0x7a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a14      	ldr	r2, [pc, #80]	; (80098b8 <TIM_OC5_SetConfig+0xc0>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d003      	beq.n	8009872 <TIM_OC5_SetConfig+0x7a>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a13      	ldr	r2, [pc, #76]	; (80098bc <TIM_OC5_SetConfig+0xc4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d109      	bne.n	8009886 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009878:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	021b      	lsls	r3, r3, #8
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	4313      	orrs	r3, r2
 8009884:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	621a      	str	r2, [r3, #32]
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	40012c00 	.word	0x40012c00
 80098b0:	40013400 	.word	0x40013400
 80098b4:	40014000 	.word	0x40014000
 80098b8:	40014400 	.word	0x40014400
 80098bc:	40014800 	.word	0x40014800

080098c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	021b      	lsls	r3, r3, #8
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	051b      	lsls	r3, r3, #20
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	4313      	orrs	r3, r2
 8009912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a18      	ldr	r2, [pc, #96]	; (8009978 <TIM_OC6_SetConfig+0xb8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00f      	beq.n	800993c <TIM_OC6_SetConfig+0x7c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a17      	ldr	r2, [pc, #92]	; (800997c <TIM_OC6_SetConfig+0xbc>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00b      	beq.n	800993c <TIM_OC6_SetConfig+0x7c>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a16      	ldr	r2, [pc, #88]	; (8009980 <TIM_OC6_SetConfig+0xc0>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d007      	beq.n	800993c <TIM_OC6_SetConfig+0x7c>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a15      	ldr	r2, [pc, #84]	; (8009984 <TIM_OC6_SetConfig+0xc4>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d003      	beq.n	800993c <TIM_OC6_SetConfig+0x7c>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a14      	ldr	r2, [pc, #80]	; (8009988 <TIM_OC6_SetConfig+0xc8>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d109      	bne.n	8009950 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009942:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	029b      	lsls	r3, r3, #10
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	4313      	orrs	r3, r2
 800994e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	621a      	str	r2, [r3, #32]
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	40012c00 	.word	0x40012c00
 800997c:	40013400 	.word	0x40013400
 8009980:	40014000 	.word	0x40014000
 8009984:	40014400 	.word	0x40014400
 8009988:	40014800 	.word	0x40014800

0800998c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80099a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2b60      	cmp	r3, #96	; 0x60
 80099d8:	d06d      	beq.n	8009ab6 <TIM_SlaveTimer_SetConfig+0x12a>
 80099da:	2b60      	cmp	r3, #96	; 0x60
 80099dc:	d80f      	bhi.n	80099fe <TIM_SlaveTimer_SetConfig+0x72>
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d073      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 80099e2:	2b20      	cmp	r3, #32
 80099e4:	d804      	bhi.n	80099f0 <TIM_SlaveTimer_SetConfig+0x64>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d06f      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 80099ea:	2b10      	cmp	r3, #16
 80099ec:	d06d      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 80099ee:	e06d      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 80099f0:	2b40      	cmp	r3, #64	; 0x40
 80099f2:	d028      	beq.n	8009a46 <TIM_SlaveTimer_SetConfig+0xba>
 80099f4:	2b50      	cmp	r3, #80	; 0x50
 80099f6:	d054      	beq.n	8009aa2 <TIM_SlaveTimer_SetConfig+0x116>
 80099f8:	2b30      	cmp	r3, #48	; 0x30
 80099fa:	d066      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 80099fc:	e066      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 80099fe:	4a36      	ldr	r2, [pc, #216]	; (8009ad8 <TIM_SlaveTimer_SetConfig+0x14c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d062      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a04:	4a34      	ldr	r2, [pc, #208]	; (8009ad8 <TIM_SlaveTimer_SetConfig+0x14c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d808      	bhi.n	8009a1c <TIM_SlaveTimer_SetConfig+0x90>
 8009a0a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a0e:	d05c      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a10:	4a32      	ldr	r2, [pc, #200]	; (8009adc <TIM_SlaveTimer_SetConfig+0x150>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d059      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a16:	2b70      	cmp	r3, #112	; 0x70
 8009a18:	d00a      	beq.n	8009a30 <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8009a1a:	e057      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8009a1c:	4a30      	ldr	r2, [pc, #192]	; (8009ae0 <TIM_SlaveTimer_SetConfig+0x154>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d053      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a22:	4a30      	ldr	r2, [pc, #192]	; (8009ae4 <TIM_SlaveTimer_SetConfig+0x158>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d050      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a28:	4a2f      	ldr	r2, [pc, #188]	; (8009ae8 <TIM_SlaveTimer_SetConfig+0x15c>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d04d      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8009a2e:	e04d      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6818      	ldr	r0, [r3, #0]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	68d9      	ldr	r1, [r3, #12]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	f000 f9ee 	bl	8009e20 <TIM_ETR_SetConfig>
      break;
 8009a44:	e042      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d004      	beq.n	8009a58 <TIM_SlaveTimer_SetConfig+0xcc>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009a56:	d101      	bne.n	8009a5c <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e038      	b.n	8009ace <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6a1a      	ldr	r2, [r3, #32]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0201 	bic.w	r2, r2, #1
 8009a72:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a82:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	621a      	str	r2, [r3, #32]
      break;
 8009aa0:	e014      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6899      	ldr	r1, [r3, #8]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f000 f884 	bl	8009bbc <TIM_TI1_ConfigInputStage>
      break;
 8009ab4:	e00a      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	6899      	ldr	r1, [r3, #8]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f000 f8e6 	bl	8009c94 <TIM_TI2_ConfigInputStage>
      break;
 8009ac8:	e000      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8009aca:	bf00      	nop
  }
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	00100030 	.word	0x00100030
 8009adc:	00100020 	.word	0x00100020
 8009ae0:	00100060 	.word	0x00100060
 8009ae4:	00100070 	.word	0x00100070
 8009ae8:	00100040 	.word	0x00100040

08009aec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	f023 0201 	bic.w	r2, r3, #1
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4a24      	ldr	r2, [pc, #144]	; (8009ba8 <TIM_TI1_SetConfig+0xbc>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d013      	beq.n	8009b42 <TIM_TI1_SetConfig+0x56>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b20:	d00f      	beq.n	8009b42 <TIM_TI1_SetConfig+0x56>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4a21      	ldr	r2, [pc, #132]	; (8009bac <TIM_TI1_SetConfig+0xc0>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d00b      	beq.n	8009b42 <TIM_TI1_SetConfig+0x56>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	4a20      	ldr	r2, [pc, #128]	; (8009bb0 <TIM_TI1_SetConfig+0xc4>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d007      	beq.n	8009b42 <TIM_TI1_SetConfig+0x56>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4a1f      	ldr	r2, [pc, #124]	; (8009bb4 <TIM_TI1_SetConfig+0xc8>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d003      	beq.n	8009b42 <TIM_TI1_SetConfig+0x56>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	4a1e      	ldr	r2, [pc, #120]	; (8009bb8 <TIM_TI1_SetConfig+0xcc>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d101      	bne.n	8009b46 <TIM_TI1_SetConfig+0x5a>
 8009b42:	2301      	movs	r3, #1
 8009b44:	e000      	b.n	8009b48 <TIM_TI1_SetConfig+0x5c>
 8009b46:	2300      	movs	r3, #0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d008      	beq.n	8009b5e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f023 0303 	bic.w	r3, r3, #3
 8009b52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	e003      	b.n	8009b66 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f043 0301 	orr.w	r3, r3, #1
 8009b64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	011b      	lsls	r3, r3, #4
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f023 030a 	bic.w	r3, r3, #10
 8009b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	f003 030a 	and.w	r3, r3, #10
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	621a      	str	r2, [r3, #32]
}
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	40012c00 	.word	0x40012c00
 8009bac:	40000400 	.word	0x40000400
 8009bb0:	40000800 	.word	0x40000800
 8009bb4:	40013400 	.word	0x40013400
 8009bb8:	40014000 	.word	0x40014000

08009bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	f023 0201 	bic.w	r2, r3, #1
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f023 030a 	bic.w	r3, r3, #10
 8009bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	621a      	str	r2, [r3, #32]
}
 8009c0e:	bf00      	nop
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b087      	sub	sp, #28
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	60f8      	str	r0, [r7, #12]
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	607a      	str	r2, [r7, #4]
 8009c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	f023 0210 	bic.w	r2, r3, #16
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	021b      	lsls	r3, r3, #8
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	031b      	lsls	r3, r3, #12
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	011b      	lsls	r3, r3, #4
 8009c72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	621a      	str	r2, [r3, #32]
}
 8009c88:	bf00      	nop
 8009c8a:	371c      	adds	r7, #28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6a1b      	ldr	r3, [r3, #32]
 8009ca4:	f023 0210 	bic.w	r2, r3, #16
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	031b      	lsls	r3, r3, #12
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	621a      	str	r2, [r3, #32]
}
 8009ce8:	bf00      	nop
 8009cea:	371c      	adds	r7, #28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
 8009d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a1b      	ldr	r3, [r3, #32]
 8009d18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f023 0303 	bic.w	r3, r3, #3
 8009d20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009d44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	621a      	str	r2, [r3, #32]
}
 8009d60:	bf00      	nop
 8009d62:	371c      	adds	r7, #28
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	021b      	lsls	r3, r3, #8
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009daa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	031b      	lsls	r3, r3, #12
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	031b      	lsls	r3, r3, #12
 8009dc4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	621a      	str	r2, [r3, #32]
}
 8009dda:	bf00      	nop
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b085      	sub	sp, #20
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	f043 0307 	orr.w	r3, r3, #7
 8009e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	609a      	str	r2, [r3, #8]
}
 8009e14:	bf00      	nop
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	021a      	lsls	r2, r3, #8
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	431a      	orrs	r2, r3
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	609a      	str	r2, [r3, #8]
}
 8009e54:	bf00      	nop
 8009e56:	371c      	adds	r7, #28
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f003 031f 	and.w	r3, r3, #31
 8009e72:	2201      	movs	r2, #1
 8009e74:	fa02 f303 	lsl.w	r3, r2, r3
 8009e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6a1a      	ldr	r2, [r3, #32]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	43db      	mvns	r3, r3
 8009e82:	401a      	ands	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6a1a      	ldr	r2, [r3, #32]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f003 031f 	and.w	r3, r3, #31
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	fa01 f303 	lsl.w	r3, r1, r3
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	621a      	str	r2, [r3, #32]
}
 8009e9e:	bf00      	nop
 8009ea0:	371c      	adds	r7, #28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
	...

08009eac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d109      	bne.n	8009ed0 <HAL_TIMEx_PWMN_Start+0x24>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	bf14      	ite	ne
 8009ec8:	2301      	movne	r3, #1
 8009eca:	2300      	moveq	r3, #0
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	e022      	b.n	8009f16 <HAL_TIMEx_PWMN_Start+0x6a>
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	d109      	bne.n	8009eea <HAL_TIMEx_PWMN_Start+0x3e>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	bf14      	ite	ne
 8009ee2:	2301      	movne	r3, #1
 8009ee4:	2300      	moveq	r3, #0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	e015      	b.n	8009f16 <HAL_TIMEx_PWMN_Start+0x6a>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	2b08      	cmp	r3, #8
 8009eee:	d109      	bne.n	8009f04 <HAL_TIMEx_PWMN_Start+0x58>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	bf14      	ite	ne
 8009efc:	2301      	movne	r3, #1
 8009efe:	2300      	moveq	r3, #0
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	e008      	b.n	8009f16 <HAL_TIMEx_PWMN_Start+0x6a>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	bf14      	ite	ne
 8009f10:	2301      	movne	r3, #1
 8009f12:	2300      	moveq	r3, #0
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e040      	b.n	8009fa0 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <HAL_TIMEx_PWMN_Start+0x82>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f2c:	e013      	b.n	8009f56 <HAL_TIMEx_PWMN_Start+0xaa>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d104      	bne.n	8009f3e <HAL_TIMEx_PWMN_Start+0x92>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2202      	movs	r2, #2
 8009f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f3c:	e00b      	b.n	8009f56 <HAL_TIMEx_PWMN_Start+0xaa>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d104      	bne.n	8009f4e <HAL_TIMEx_PWMN_Start+0xa2>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f4c:	e003      	b.n	8009f56 <HAL_TIMEx_PWMN_Start+0xaa>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2202      	movs	r2, #2
 8009f52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2204      	movs	r2, #4
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 f9a4 	bl	800a2ac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	4b0b      	ldr	r3, [pc, #44]	; (8009fa8 <HAL_TIMEx_PWMN_Start+0xfc>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b06      	cmp	r3, #6
 8009f84:	d00b      	beq.n	8009f9e <HAL_TIMEx_PWMN_Start+0xf2>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8c:	d007      	beq.n	8009f9e <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f042 0201 	orr.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	00010007 	.word	0x00010007

08009fac <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f974 	bl	800a2ac <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6a1a      	ldr	r2, [r3, #32]
 8009fca:	f241 1311 	movw	r3, #4369	; 0x1111
 8009fce:	4013      	ands	r3, r2
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10f      	bne.n	8009ff4 <HAL_TIMEx_PWMN_Stop+0x48>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6a1a      	ldr	r2, [r3, #32]
 8009fda:	f244 4344 	movw	r3, #17476	; 0x4444
 8009fde:	4013      	ands	r3, r2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d107      	bne.n	8009ff4 <HAL_TIMEx_PWMN_Stop+0x48>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6a1a      	ldr	r2, [r3, #32]
 8009ffa:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ffe:	4013      	ands	r3, r2
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10f      	bne.n	800a024 <HAL_TIMEx_PWMN_Stop+0x78>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6a1a      	ldr	r2, [r3, #32]
 800a00a:	f244 4344 	movw	r3, #17476	; 0x4444
 800a00e:	4013      	ands	r3, r2
 800a010:	2b00      	cmp	r3, #0
 800a012:	d107      	bne.n	800a024 <HAL_TIMEx_PWMN_Stop+0x78>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f022 0201 	bic.w	r2, r2, #1
 800a022:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <HAL_TIMEx_PWMN_Stop+0x88>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a032:	e013      	b.n	800a05c <HAL_TIMEx_PWMN_Stop+0xb0>
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b04      	cmp	r3, #4
 800a038:	d104      	bne.n	800a044 <HAL_TIMEx_PWMN_Stop+0x98>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a042:	e00b      	b.n	800a05c <HAL_TIMEx_PWMN_Stop+0xb0>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b08      	cmp	r3, #8
 800a048:	d104      	bne.n	800a054 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a052:	e003      	b.n	800a05c <HAL_TIMEx_PWMN_Stop+0xb0>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
	...

0800a068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d101      	bne.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e065      	b.n	800a14c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a2c      	ldr	r2, [pc, #176]	; (800a158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d004      	beq.n	800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a2b      	ldr	r2, [pc, #172]	; (800a15c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d108      	bne.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a0ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a0cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a1b      	ldr	r2, [pc, #108]	; (800a158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d018      	beq.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f6:	d013      	beq.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a18      	ldr	r2, [pc, #96]	; (800a160 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d00e      	beq.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a17      	ldr	r2, [pc, #92]	; (800a164 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d009      	beq.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a12      	ldr	r2, [pc, #72]	; (800a15c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d004      	beq.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a13      	ldr	r2, [pc, #76]	; (800a168 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d10c      	bne.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a126:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	4313      	orrs	r3, r2
 800a130:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	40012c00 	.word	0x40012c00
 800a15c:	40013400 	.word	0x40013400
 800a160:	40000400 	.word	0x40000400
 800a164:	40000800 	.word	0x40000800
 800a168:	40014000 	.word	0x40014000

0800a16c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a180:	2b01      	cmp	r3, #1
 800a182:	d101      	bne.n	800a188 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a184:	2302      	movs	r3, #2
 800a186:	e087      	b.n	800a298 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	041b      	lsls	r3, r3, #16
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a27      	ldr	r2, [pc, #156]	; (800a2a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d004      	beq.n	800a216 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a25      	ldr	r2, [pc, #148]	; (800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d106      	bne.n	800a224 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	4313      	orrs	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a1e      	ldr	r2, [pc, #120]	; (800a2a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d004      	beq.n	800a238 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a1d      	ldr	r2, [pc, #116]	; (800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d126      	bne.n	800a286 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a242:	051b      	lsls	r3, r3, #20
 800a244:	4313      	orrs	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	4313      	orrs	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a0e      	ldr	r2, [pc, #56]	; (800a2a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d004      	beq.n	800a278 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a0d      	ldr	r2, [pc, #52]	; (800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d106      	bne.n	800a286 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	40012c00 	.word	0x40012c00
 800a2a8:	40013400 	.word	0x40013400

0800a2ac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	f003 031f 	and.w	r3, r3, #31
 800a2be:	2204      	movs	r2, #4
 800a2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6a1a      	ldr	r2, [r3, #32]
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	43db      	mvns	r3, r3
 800a2ce:	401a      	ands	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6a1a      	ldr	r2, [r3, #32]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f003 031f 	and.w	r3, r3, #31
 800a2de:	6879      	ldr	r1, [r7, #4]
 800a2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	621a      	str	r2, [r3, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e042      	b.n	800a38e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d106      	bne.n	800a320 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7fa f876 	bl	800440c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2224      	movs	r2, #36	; 0x24
 800a324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f022 0201 	bic.w	r2, r2, #1
 800a336:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fa81 	bl	800a840 <UART_SetConfig>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e022      	b.n	800a38e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f001 fc2f 	bl	800bbb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a364:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	689a      	ldr	r2, [r3, #8]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a374:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f042 0201 	orr.w	r2, r2, #1
 800a384:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 fcb6 	bl	800bcf8 <UART_CheckIdleState>
 800a38c:	4603      	mov	r3, r0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	f040 80bc 	bne.w	800a52a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <HAL_UART_Receive_IT+0x26>
 800a3b8:	88fb      	ldrh	r3, [r7, #6]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e0b4      	b.n	800a52c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d101      	bne.n	800a3d0 <HAL_UART_Receive_IT+0x38>
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	e0ad      	b.n	800a52c <HAL_UART_Receive_IT+0x194>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	88fa      	ldrh	r2, [r7, #6]
 800a3e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	88fa      	ldrh	r2, [r7, #6]
 800a3ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3fc:	d10e      	bne.n	800a41c <HAL_UART_Receive_IT+0x84>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d105      	bne.n	800a412 <HAL_UART_Receive_IT+0x7a>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a40c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a410:	e02d      	b.n	800a46e <HAL_UART_Receive_IT+0xd6>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a41a:	e028      	b.n	800a46e <HAL_UART_Receive_IT+0xd6>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10d      	bne.n	800a440 <HAL_UART_Receive_IT+0xa8>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d104      	bne.n	800a436 <HAL_UART_Receive_IT+0x9e>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	22ff      	movs	r2, #255	; 0xff
 800a430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a434:	e01b      	b.n	800a46e <HAL_UART_Receive_IT+0xd6>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	227f      	movs	r2, #127	; 0x7f
 800a43a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a43e:	e016      	b.n	800a46e <HAL_UART_Receive_IT+0xd6>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a448:	d10d      	bne.n	800a466 <HAL_UART_Receive_IT+0xce>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d104      	bne.n	800a45c <HAL_UART_Receive_IT+0xc4>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	227f      	movs	r2, #127	; 0x7f
 800a456:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a45a:	e008      	b.n	800a46e <HAL_UART_Receive_IT+0xd6>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	223f      	movs	r2, #63	; 0x3f
 800a460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a464:	e003      	b.n	800a46e <HAL_UART_Receive_IT+0xd6>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2222      	movs	r2, #34	; 0x22
 800a47a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f042 0201 	orr.w	r2, r2, #1
 800a48c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a496:	d12a      	bne.n	800a4ee <HAL_UART_Receive_IT+0x156>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a49e:	88fa      	ldrh	r2, [r7, #6]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d324      	bcc.n	800a4ee <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ac:	d107      	bne.n	800a4be <HAL_UART_Receive_IT+0x126>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d103      	bne.n	800a4be <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4a1f      	ldr	r2, [pc, #124]	; (800a538 <HAL_UART_Receive_IT+0x1a0>)
 800a4ba:	66da      	str	r2, [r3, #108]	; 0x6c
 800a4bc:	e002      	b.n	800a4c4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4a1e      	ldr	r2, [pc, #120]	; (800a53c <HAL_UART_Receive_IT+0x1a4>)
 800a4c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4da:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689a      	ldr	r2, [r3, #8]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a4ea:	609a      	str	r2, [r3, #8]
 800a4ec:	e01b      	b.n	800a526 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f6:	d107      	bne.n	800a508 <HAL_UART_Receive_IT+0x170>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d103      	bne.n	800a508 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4a0f      	ldr	r2, [pc, #60]	; (800a540 <HAL_UART_Receive_IT+0x1a8>)
 800a504:	66da      	str	r2, [r3, #108]	; 0x6c
 800a506:	e002      	b.n	800a50e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4a0e      	ldr	r2, [pc, #56]	; (800a544 <HAL_UART_Receive_IT+0x1ac>)
 800a50c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a524:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	e000      	b.n	800a52c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800a52a:	2302      	movs	r3, #2
  }
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	0800c121 	.word	0x0800c121
 800a53c:	0800c019 	.word	0x0800c019
 800a540:	0800bf6d 	.word	0x0800bf6d
 800a544:	0800bec3 	.word	0x0800bec3

0800a548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	f003 030f 	and.w	r3, r3, #15
 800a56e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d118      	bne.n	800a5a8 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	f003 0320 	and.w	r3, r3, #32
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d013      	beq.n	800a5a8 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f003 0320 	and.w	r3, r3, #32
 800a586:	2b00      	cmp	r3, #0
 800a588:	d104      	bne.n	800a594 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d009      	beq.n	800a5a8 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 812e 	beq.w	800a7fa <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
      }
      return;
 800a5a6:	e128      	b.n	800a7fa <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 80d1 	beq.w	800a752 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	4b96      	ldr	r3, [pc, #600]	; (800a80c <HAL_UART_IRQHandler+0x2c4>)
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d105      	bne.n	800a5c6 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 80c6 	beq.w	800a752 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d010      	beq.n	800a5f2 <HAL_UART_IRQHandler+0xaa>
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00b      	beq.n	800a5f2 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e8:	f043 0201 	orr.w	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d010      	beq.n	800a61e <HAL_UART_IRQHandler+0xd6>
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00b      	beq.n	800a61e <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2202      	movs	r2, #2
 800a60c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a614:	f043 0204 	orr.w	r2, r3, #4
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	2b00      	cmp	r3, #0
 800a626:	d010      	beq.n	800a64a <HAL_UART_IRQHandler+0x102>
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00b      	beq.n	800a64a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2204      	movs	r2, #4
 800a638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a640:	f043 0202 	orr.w	r2, r3, #2
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	f003 0308 	and.w	r3, r3, #8
 800a650:	2b00      	cmp	r3, #0
 800a652:	d015      	beq.n	800a680 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d104      	bne.n	800a668 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	4b6a      	ldr	r3, [pc, #424]	; (800a80c <HAL_UART_IRQHandler+0x2c4>)
 800a662:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00b      	beq.n	800a680 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2208      	movs	r2, #8
 800a66e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a676:	f043 0208 	orr.w	r2, r3, #8
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 80b9 	beq.w	800a7fe <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f003 0320 	and.w	r3, r3, #32
 800a692:	2b00      	cmp	r3, #0
 800a694:	d011      	beq.n	800a6ba <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	f003 0320 	and.w	r3, r3, #32
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d104      	bne.n	800a6aa <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d007      	beq.n	800a6ba <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6cc:	2b40      	cmp	r3, #64	; 0x40
 800a6ce:	d004      	beq.n	800a6da <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d031      	beq.n	800a73e <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f001 fb9e 	bl	800be1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ea:	2b40      	cmp	r3, #64	; 0x40
 800a6ec:	d123      	bne.n	800a736 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a702:	2b00      	cmp	r3, #0
 800a704:	d013      	beq.n	800a72e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a70a:	4a41      	ldr	r2, [pc, #260]	; (800a810 <HAL_UART_IRQHandler+0x2c8>)
 800a70c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a712:	4618      	mov	r0, r3
 800a714:	f7fb ff69 	bl	80065ea <HAL_DMA_Abort_IT>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d017      	beq.n	800a74e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a728:	4610      	mov	r0, r2
 800a72a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a72c:	e00f      	b.n	800a74e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f87a 	bl	800a828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a734:	e00b      	b.n	800a74e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f876 	bl	800a828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a73c:	e007      	b.n	800a74e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f872 	bl	800a828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800a74c:	e057      	b.n	800a7fe <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a74e:	bf00      	nop
    return;
 800a750:	e055      	b.n	800a7fe <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00d      	beq.n	800a778 <HAL_UART_IRQHandler+0x230>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d008      	beq.n	800a778 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a76e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f001 fd59 	bl	800c228 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a776:	e045      	b.n	800a804 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d012      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d104      	bne.n	800a796 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d008      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d031      	beq.n	800a802 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	4798      	blx	r3
    }
    return;
 800a7a6:	e02c      	b.n	800a802 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d008      	beq.n	800a7c4 <HAL_UART_IRQHandler+0x27c>
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f001 fb66 	bl	800be8e <UART_EndTransmit_IT>
    return;
 800a7c2:	e01f      	b.n	800a804 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d008      	beq.n	800a7e0 <HAL_UART_IRQHandler+0x298>
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 fd39 	bl	800c250 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7de:	e011      	b.n	800a804 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00c      	beq.n	800a804 <HAL_UART_IRQHandler+0x2bc>
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	da09      	bge.n	800a804 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 fd23 	bl	800c23c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7f6:	bf00      	nop
 800a7f8:	e004      	b.n	800a804 <HAL_UART_IRQHandler+0x2bc>
      return;
 800a7fa:	bf00      	nop
 800a7fc:	e002      	b.n	800a804 <HAL_UART_IRQHandler+0x2bc>
    return;
 800a7fe:	bf00      	nop
 800a800:	e000      	b.n	800a804 <HAL_UART_IRQHandler+0x2bc>
    return;
 800a802:	bf00      	nop
  }
}
 800a804:	3720      	adds	r7, #32
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	10000001 	.word	0x10000001
 800a810:	0800be63 	.word	0x0800be63

0800a814 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	0000      	movs	r0, r0
	...

0800a840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a840:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a844:	b08a      	sub	sp, #40	; 0x28
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	689a      	ldr	r2, [r3, #8]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	431a      	orrs	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	431a      	orrs	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a874:	4313      	orrs	r3, r2
 800a876:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	4ba4      	ldr	r3, [pc, #656]	; (800ab10 <UART_SetConfig+0x2d0>)
 800a880:	4013      	ands	r3, r2
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	6812      	ldr	r2, [r2, #0]
 800a886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a888:	430b      	orrs	r3, r1
 800a88a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68da      	ldr	r2, [r3, #12]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a99      	ldr	r2, [pc, #612]	; (800ab14 <UART_SetConfig+0x2d4>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d004      	beq.n	800a8bc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a8c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6812      	ldr	r2, [r2, #0]
 800a8ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8d0:	430b      	orrs	r3, r1
 800a8d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8da:	f023 010f 	bic.w	r1, r3, #15
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a8a      	ldr	r2, [pc, #552]	; (800ab18 <UART_SetConfig+0x2d8>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d126      	bne.n	800a942 <UART_SetConfig+0x102>
 800a8f4:	4b89      	ldr	r3, [pc, #548]	; (800ab1c <UART_SetConfig+0x2dc>)
 800a8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fa:	f003 0303 	and.w	r3, r3, #3
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d81a      	bhi.n	800a938 <UART_SetConfig+0xf8>
 800a902:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <UART_SetConfig+0xc8>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a919 	.word	0x0800a919
 800a90c:	0800a929 	.word	0x0800a929
 800a910:	0800a921 	.word	0x0800a921
 800a914:	0800a931 	.word	0x0800a931
 800a918:	2301      	movs	r3, #1
 800a91a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a91e:	e0d6      	b.n	800aace <UART_SetConfig+0x28e>
 800a920:	2302      	movs	r3, #2
 800a922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a926:	e0d2      	b.n	800aace <UART_SetConfig+0x28e>
 800a928:	2304      	movs	r3, #4
 800a92a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a92e:	e0ce      	b.n	800aace <UART_SetConfig+0x28e>
 800a930:	2308      	movs	r3, #8
 800a932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a936:	e0ca      	b.n	800aace <UART_SetConfig+0x28e>
 800a938:	2310      	movs	r3, #16
 800a93a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a93e:	bf00      	nop
 800a940:	e0c5      	b.n	800aace <UART_SetConfig+0x28e>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a76      	ldr	r2, [pc, #472]	; (800ab20 <UART_SetConfig+0x2e0>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d138      	bne.n	800a9be <UART_SetConfig+0x17e>
 800a94c:	4b73      	ldr	r3, [pc, #460]	; (800ab1c <UART_SetConfig+0x2dc>)
 800a94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a952:	f003 030c 	and.w	r3, r3, #12
 800a956:	2b0c      	cmp	r3, #12
 800a958:	d82c      	bhi.n	800a9b4 <UART_SetConfig+0x174>
 800a95a:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <UART_SetConfig+0x120>)
 800a95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a960:	0800a995 	.word	0x0800a995
 800a964:	0800a9b5 	.word	0x0800a9b5
 800a968:	0800a9b5 	.word	0x0800a9b5
 800a96c:	0800a9b5 	.word	0x0800a9b5
 800a970:	0800a9a5 	.word	0x0800a9a5
 800a974:	0800a9b5 	.word	0x0800a9b5
 800a978:	0800a9b5 	.word	0x0800a9b5
 800a97c:	0800a9b5 	.word	0x0800a9b5
 800a980:	0800a99d 	.word	0x0800a99d
 800a984:	0800a9b5 	.word	0x0800a9b5
 800a988:	0800a9b5 	.word	0x0800a9b5
 800a98c:	0800a9b5 	.word	0x0800a9b5
 800a990:	0800a9ad 	.word	0x0800a9ad
 800a994:	2300      	movs	r3, #0
 800a996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a99a:	e098      	b.n	800aace <UART_SetConfig+0x28e>
 800a99c:	2302      	movs	r3, #2
 800a99e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9a2:	e094      	b.n	800aace <UART_SetConfig+0x28e>
 800a9a4:	2304      	movs	r3, #4
 800a9a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9aa:	e090      	b.n	800aace <UART_SetConfig+0x28e>
 800a9ac:	2308      	movs	r3, #8
 800a9ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9b2:	e08c      	b.n	800aace <UART_SetConfig+0x28e>
 800a9b4:	2310      	movs	r3, #16
 800a9b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9ba:	bf00      	nop
 800a9bc:	e087      	b.n	800aace <UART_SetConfig+0x28e>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a58      	ldr	r2, [pc, #352]	; (800ab24 <UART_SetConfig+0x2e4>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d125      	bne.n	800aa14 <UART_SetConfig+0x1d4>
 800a9c8:	4b54      	ldr	r3, [pc, #336]	; (800ab1c <UART_SetConfig+0x2dc>)
 800a9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9d2:	2b10      	cmp	r3, #16
 800a9d4:	d011      	beq.n	800a9fa <UART_SetConfig+0x1ba>
 800a9d6:	2b10      	cmp	r3, #16
 800a9d8:	d802      	bhi.n	800a9e0 <UART_SetConfig+0x1a0>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <UART_SetConfig+0x1aa>
 800a9de:	e014      	b.n	800aa0a <UART_SetConfig+0x1ca>
 800a9e0:	2b20      	cmp	r3, #32
 800a9e2:	d006      	beq.n	800a9f2 <UART_SetConfig+0x1b2>
 800a9e4:	2b30      	cmp	r3, #48	; 0x30
 800a9e6:	d00c      	beq.n	800aa02 <UART_SetConfig+0x1c2>
 800a9e8:	e00f      	b.n	800aa0a <UART_SetConfig+0x1ca>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9f0:	e06d      	b.n	800aace <UART_SetConfig+0x28e>
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9f8:	e069      	b.n	800aace <UART_SetConfig+0x28e>
 800a9fa:	2304      	movs	r3, #4
 800a9fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa00:	e065      	b.n	800aace <UART_SetConfig+0x28e>
 800aa02:	2308      	movs	r3, #8
 800aa04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa08:	e061      	b.n	800aace <UART_SetConfig+0x28e>
 800aa0a:	2310      	movs	r3, #16
 800aa0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa10:	bf00      	nop
 800aa12:	e05c      	b.n	800aace <UART_SetConfig+0x28e>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a43      	ldr	r2, [pc, #268]	; (800ab28 <UART_SetConfig+0x2e8>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d125      	bne.n	800aa6a <UART_SetConfig+0x22a>
 800aa1e:	4b3f      	ldr	r3, [pc, #252]	; (800ab1c <UART_SetConfig+0x2dc>)
 800aa20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa28:	2b40      	cmp	r3, #64	; 0x40
 800aa2a:	d011      	beq.n	800aa50 <UART_SetConfig+0x210>
 800aa2c:	2b40      	cmp	r3, #64	; 0x40
 800aa2e:	d802      	bhi.n	800aa36 <UART_SetConfig+0x1f6>
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <UART_SetConfig+0x200>
 800aa34:	e014      	b.n	800aa60 <UART_SetConfig+0x220>
 800aa36:	2b80      	cmp	r3, #128	; 0x80
 800aa38:	d006      	beq.n	800aa48 <UART_SetConfig+0x208>
 800aa3a:	2bc0      	cmp	r3, #192	; 0xc0
 800aa3c:	d00c      	beq.n	800aa58 <UART_SetConfig+0x218>
 800aa3e:	e00f      	b.n	800aa60 <UART_SetConfig+0x220>
 800aa40:	2300      	movs	r3, #0
 800aa42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa46:	e042      	b.n	800aace <UART_SetConfig+0x28e>
 800aa48:	2302      	movs	r3, #2
 800aa4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa4e:	e03e      	b.n	800aace <UART_SetConfig+0x28e>
 800aa50:	2304      	movs	r3, #4
 800aa52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa56:	e03a      	b.n	800aace <UART_SetConfig+0x28e>
 800aa58:	2308      	movs	r3, #8
 800aa5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa5e:	e036      	b.n	800aace <UART_SetConfig+0x28e>
 800aa60:	2310      	movs	r3, #16
 800aa62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa66:	bf00      	nop
 800aa68:	e031      	b.n	800aace <UART_SetConfig+0x28e>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a29      	ldr	r2, [pc, #164]	; (800ab14 <UART_SetConfig+0x2d4>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d129      	bne.n	800aac8 <UART_SetConfig+0x288>
 800aa74:	4b29      	ldr	r3, [pc, #164]	; (800ab1c <UART_SetConfig+0x2dc>)
 800aa76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa82:	d014      	beq.n	800aaae <UART_SetConfig+0x26e>
 800aa84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa88:	d802      	bhi.n	800aa90 <UART_SetConfig+0x250>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <UART_SetConfig+0x25e>
 800aa8e:	e016      	b.n	800aabe <UART_SetConfig+0x27e>
 800aa90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa94:	d007      	beq.n	800aaa6 <UART_SetConfig+0x266>
 800aa96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa9a:	d00c      	beq.n	800aab6 <UART_SetConfig+0x276>
 800aa9c:	e00f      	b.n	800aabe <UART_SetConfig+0x27e>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaa4:	e013      	b.n	800aace <UART_SetConfig+0x28e>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaac:	e00f      	b.n	800aace <UART_SetConfig+0x28e>
 800aaae:	2304      	movs	r3, #4
 800aab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aab4:	e00b      	b.n	800aace <UART_SetConfig+0x28e>
 800aab6:	2308      	movs	r3, #8
 800aab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aabc:	e007      	b.n	800aace <UART_SetConfig+0x28e>
 800aabe:	2310      	movs	r3, #16
 800aac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aac4:	bf00      	nop
 800aac6:	e002      	b.n	800aace <UART_SetConfig+0x28e>
 800aac8:	2310      	movs	r3, #16
 800aaca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a10      	ldr	r2, [pc, #64]	; (800ab14 <UART_SetConfig+0x2d4>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	f040 842e 	bne.w	800b336 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aade:	2b08      	cmp	r3, #8
 800aae0:	f200 8169 	bhi.w	800adb6 <UART_SetConfig+0x576>
 800aae4:	a201      	add	r2, pc, #4	; (adr r2, 800aaec <UART_SetConfig+0x2ac>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800ab2d 	.word	0x0800ab2d
 800aaf0:	0800adb7 	.word	0x0800adb7
 800aaf4:	0800abcf 	.word	0x0800abcf
 800aaf8:	0800adb7 	.word	0x0800adb7
 800aafc:	0800ac67 	.word	0x0800ac67
 800ab00:	0800adb7 	.word	0x0800adb7
 800ab04:	0800adb7 	.word	0x0800adb7
 800ab08:	0800adb7 	.word	0x0800adb7
 800ab0c:	0800ad09 	.word	0x0800ad09
 800ab10:	cfff69f3 	.word	0xcfff69f3
 800ab14:	40008000 	.word	0x40008000
 800ab18:	40013800 	.word	0x40013800
 800ab1c:	40021000 	.word	0x40021000
 800ab20:	40004400 	.word	0x40004400
 800ab24:	40004800 	.word	0x40004800
 800ab28:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ab2c:	f7fd f8f4 	bl	8007d18 <HAL_RCC_GetPCLK1Freq>
 800ab30:	4602      	mov	r2, r0
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d044      	beq.n	800abc4 <UART_SetConfig+0x384>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d03e      	beq.n	800abc0 <UART_SetConfig+0x380>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d038      	beq.n	800abbc <UART_SetConfig+0x37c>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	d032      	beq.n	800abb8 <UART_SetConfig+0x378>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	d02c      	beq.n	800abb4 <UART_SetConfig+0x374>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5e:	2b05      	cmp	r3, #5
 800ab60:	d026      	beq.n	800abb0 <UART_SetConfig+0x370>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab66:	2b06      	cmp	r3, #6
 800ab68:	d020      	beq.n	800abac <UART_SetConfig+0x36c>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6e:	2b07      	cmp	r3, #7
 800ab70:	d01a      	beq.n	800aba8 <UART_SetConfig+0x368>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	2b08      	cmp	r3, #8
 800ab78:	d014      	beq.n	800aba4 <UART_SetConfig+0x364>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	2b09      	cmp	r3, #9
 800ab80:	d00e      	beq.n	800aba0 <UART_SetConfig+0x360>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2b0a      	cmp	r3, #10
 800ab88:	d008      	beq.n	800ab9c <UART_SetConfig+0x35c>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	2b0b      	cmp	r3, #11
 800ab90:	d102      	bne.n	800ab98 <UART_SetConfig+0x358>
 800ab92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab96:	e016      	b.n	800abc6 <UART_SetConfig+0x386>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e014      	b.n	800abc6 <UART_SetConfig+0x386>
 800ab9c:	2380      	movs	r3, #128	; 0x80
 800ab9e:	e012      	b.n	800abc6 <UART_SetConfig+0x386>
 800aba0:	2340      	movs	r3, #64	; 0x40
 800aba2:	e010      	b.n	800abc6 <UART_SetConfig+0x386>
 800aba4:	2320      	movs	r3, #32
 800aba6:	e00e      	b.n	800abc6 <UART_SetConfig+0x386>
 800aba8:	2310      	movs	r3, #16
 800abaa:	e00c      	b.n	800abc6 <UART_SetConfig+0x386>
 800abac:	230c      	movs	r3, #12
 800abae:	e00a      	b.n	800abc6 <UART_SetConfig+0x386>
 800abb0:	230a      	movs	r3, #10
 800abb2:	e008      	b.n	800abc6 <UART_SetConfig+0x386>
 800abb4:	2308      	movs	r3, #8
 800abb6:	e006      	b.n	800abc6 <UART_SetConfig+0x386>
 800abb8:	2306      	movs	r3, #6
 800abba:	e004      	b.n	800abc6 <UART_SetConfig+0x386>
 800abbc:	2304      	movs	r3, #4
 800abbe:	e002      	b.n	800abc6 <UART_SetConfig+0x386>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e000      	b.n	800abc6 <UART_SetConfig+0x386>
 800abc4:	2301      	movs	r3, #1
 800abc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abca:	617b      	str	r3, [r7, #20]
        break;
 800abcc:	e0f6      	b.n	800adbc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d044      	beq.n	800ac60 <UART_SetConfig+0x420>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d03e      	beq.n	800ac5c <UART_SetConfig+0x41c>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d038      	beq.n	800ac58 <UART_SetConfig+0x418>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abea:	2b03      	cmp	r3, #3
 800abec:	d032      	beq.n	800ac54 <UART_SetConfig+0x414>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf2:	2b04      	cmp	r3, #4
 800abf4:	d02c      	beq.n	800ac50 <UART_SetConfig+0x410>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfa:	2b05      	cmp	r3, #5
 800abfc:	d026      	beq.n	800ac4c <UART_SetConfig+0x40c>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac02:	2b06      	cmp	r3, #6
 800ac04:	d020      	beq.n	800ac48 <UART_SetConfig+0x408>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0a:	2b07      	cmp	r3, #7
 800ac0c:	d01a      	beq.n	800ac44 <UART_SetConfig+0x404>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac12:	2b08      	cmp	r3, #8
 800ac14:	d014      	beq.n	800ac40 <UART_SetConfig+0x400>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1a:	2b09      	cmp	r3, #9
 800ac1c:	d00e      	beq.n	800ac3c <UART_SetConfig+0x3fc>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	2b0a      	cmp	r3, #10
 800ac24:	d008      	beq.n	800ac38 <UART_SetConfig+0x3f8>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	2b0b      	cmp	r3, #11
 800ac2c:	d102      	bne.n	800ac34 <UART_SetConfig+0x3f4>
 800ac2e:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ac32:	e016      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac34:	4ba1      	ldr	r3, [pc, #644]	; (800aebc <UART_SetConfig+0x67c>)
 800ac36:	e014      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac38:	4ba1      	ldr	r3, [pc, #644]	; (800aec0 <UART_SetConfig+0x680>)
 800ac3a:	e012      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac3c:	4ba1      	ldr	r3, [pc, #644]	; (800aec4 <UART_SetConfig+0x684>)
 800ac3e:	e010      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac40:	4ba1      	ldr	r3, [pc, #644]	; (800aec8 <UART_SetConfig+0x688>)
 800ac42:	e00e      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac44:	4ba1      	ldr	r3, [pc, #644]	; (800aecc <UART_SetConfig+0x68c>)
 800ac46:	e00c      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac48:	4ba1      	ldr	r3, [pc, #644]	; (800aed0 <UART_SetConfig+0x690>)
 800ac4a:	e00a      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac4c:	4ba1      	ldr	r3, [pc, #644]	; (800aed4 <UART_SetConfig+0x694>)
 800ac4e:	e008      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac50:	4ba1      	ldr	r3, [pc, #644]	; (800aed8 <UART_SetConfig+0x698>)
 800ac52:	e006      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac54:	4ba1      	ldr	r3, [pc, #644]	; (800aedc <UART_SetConfig+0x69c>)
 800ac56:	e004      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac58:	4ba1      	ldr	r3, [pc, #644]	; (800aee0 <UART_SetConfig+0x6a0>)
 800ac5a:	e002      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac5c:	4ba1      	ldr	r3, [pc, #644]	; (800aee4 <UART_SetConfig+0x6a4>)
 800ac5e:	e000      	b.n	800ac62 <UART_SetConfig+0x422>
 800ac60:	4b96      	ldr	r3, [pc, #600]	; (800aebc <UART_SetConfig+0x67c>)
 800ac62:	617b      	str	r3, [r7, #20]
        break;
 800ac64:	e0aa      	b.n	800adbc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ac66:	f7fc ffe9 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d044      	beq.n	800acfe <UART_SetConfig+0x4be>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d03e      	beq.n	800acfa <UART_SetConfig+0x4ba>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d038      	beq.n	800acf6 <UART_SetConfig+0x4b6>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d032      	beq.n	800acf2 <UART_SetConfig+0x4b2>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	2b04      	cmp	r3, #4
 800ac92:	d02c      	beq.n	800acee <UART_SetConfig+0x4ae>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	2b05      	cmp	r3, #5
 800ac9a:	d026      	beq.n	800acea <UART_SetConfig+0x4aa>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	2b06      	cmp	r3, #6
 800aca2:	d020      	beq.n	800ace6 <UART_SetConfig+0x4a6>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b07      	cmp	r3, #7
 800acaa:	d01a      	beq.n	800ace2 <UART_SetConfig+0x4a2>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d014      	beq.n	800acde <UART_SetConfig+0x49e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	2b09      	cmp	r3, #9
 800acba:	d00e      	beq.n	800acda <UART_SetConfig+0x49a>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	2b0a      	cmp	r3, #10
 800acc2:	d008      	beq.n	800acd6 <UART_SetConfig+0x496>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	2b0b      	cmp	r3, #11
 800acca:	d102      	bne.n	800acd2 <UART_SetConfig+0x492>
 800accc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acd0:	e016      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acd2:	2301      	movs	r3, #1
 800acd4:	e014      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acd6:	2380      	movs	r3, #128	; 0x80
 800acd8:	e012      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acda:	2340      	movs	r3, #64	; 0x40
 800acdc:	e010      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acde:	2320      	movs	r3, #32
 800ace0:	e00e      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800ace2:	2310      	movs	r3, #16
 800ace4:	e00c      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800ace6:	230c      	movs	r3, #12
 800ace8:	e00a      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acea:	230a      	movs	r3, #10
 800acec:	e008      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acee:	2308      	movs	r3, #8
 800acf0:	e006      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acf2:	2306      	movs	r3, #6
 800acf4:	e004      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acf6:	2304      	movs	r3, #4
 800acf8:	e002      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acfa:	2302      	movs	r3, #2
 800acfc:	e000      	b.n	800ad00 <UART_SetConfig+0x4c0>
 800acfe:	2301      	movs	r3, #1
 800ad00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad04:	617b      	str	r3, [r7, #20]
        break;
 800ad06:	e059      	b.n	800adbc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d04e      	beq.n	800adae <UART_SetConfig+0x56e>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d047      	beq.n	800ada8 <UART_SetConfig+0x568>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d040      	beq.n	800ada2 <UART_SetConfig+0x562>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	2b03      	cmp	r3, #3
 800ad26:	d039      	beq.n	800ad9c <UART_SetConfig+0x55c>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d032      	beq.n	800ad96 <UART_SetConfig+0x556>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad34:	2b05      	cmp	r3, #5
 800ad36:	d02b      	beq.n	800ad90 <UART_SetConfig+0x550>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3c:	2b06      	cmp	r3, #6
 800ad3e:	d024      	beq.n	800ad8a <UART_SetConfig+0x54a>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	2b07      	cmp	r3, #7
 800ad46:	d01d      	beq.n	800ad84 <UART_SetConfig+0x544>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4c:	2b08      	cmp	r3, #8
 800ad4e:	d016      	beq.n	800ad7e <UART_SetConfig+0x53e>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	2b09      	cmp	r3, #9
 800ad56:	d00f      	beq.n	800ad78 <UART_SetConfig+0x538>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5c:	2b0a      	cmp	r3, #10
 800ad5e:	d008      	beq.n	800ad72 <UART_SetConfig+0x532>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad64:	2b0b      	cmp	r3, #11
 800ad66:	d101      	bne.n	800ad6c <UART_SetConfig+0x52c>
 800ad68:	2380      	movs	r3, #128	; 0x80
 800ad6a:	e022      	b.n	800adb2 <UART_SetConfig+0x572>
 800ad6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad70:	e01f      	b.n	800adb2 <UART_SetConfig+0x572>
 800ad72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad76:	e01c      	b.n	800adb2 <UART_SetConfig+0x572>
 800ad78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad7c:	e019      	b.n	800adb2 <UART_SetConfig+0x572>
 800ad7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad82:	e016      	b.n	800adb2 <UART_SetConfig+0x572>
 800ad84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad88:	e013      	b.n	800adb2 <UART_SetConfig+0x572>
 800ad8a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ad8e:	e010      	b.n	800adb2 <UART_SetConfig+0x572>
 800ad90:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ad94:	e00d      	b.n	800adb2 <UART_SetConfig+0x572>
 800ad96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad9a:	e00a      	b.n	800adb2 <UART_SetConfig+0x572>
 800ad9c:	f241 5355 	movw	r3, #5461	; 0x1555
 800ada0:	e007      	b.n	800adb2 <UART_SetConfig+0x572>
 800ada2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ada6:	e004      	b.n	800adb2 <UART_SetConfig+0x572>
 800ada8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800adac:	e001      	b.n	800adb2 <UART_SetConfig+0x572>
 800adae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adb2:	617b      	str	r3, [r7, #20]
        break;
 800adb4:	e002      	b.n	800adbc <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	76fb      	strb	r3, [r7, #27]
        break;
 800adba:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 86cd 	beq.w	800bb5e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685a      	ldr	r2, [r3, #4]
 800adc8:	4613      	mov	r3, r2
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	4413      	add	r3, r2
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	429a      	cmp	r2, r3
 800add2:	d305      	bcc.n	800ade0 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	429a      	cmp	r2, r3
 800adde:	d903      	bls.n	800ade8 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	76fb      	strb	r3, [r7, #27]
 800ade4:	f000 bebb 	b.w	800bb5e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 800ade8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adec:	2b08      	cmp	r3, #8
 800adee:	f200 828d 	bhi.w	800b30c <UART_SetConfig+0xacc>
 800adf2:	a201      	add	r2, pc, #4	; (adr r2, 800adf8 <UART_SetConfig+0x5b8>)
 800adf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf8:	0800ae1d 	.word	0x0800ae1d
 800adfc:	0800b30d 	.word	0x0800b30d
 800ae00:	0800af87 	.word	0x0800af87
 800ae04:	0800b30d 	.word	0x0800b30d
 800ae08:	0800b07d 	.word	0x0800b07d
 800ae0c:	0800b30d 	.word	0x0800b30d
 800ae10:	0800b30d 	.word	0x0800b30d
 800ae14:	0800b30d 	.word	0x0800b30d
 800ae18:	0800b1bb 	.word	0x0800b1bb
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800ae1c:	f7fc ff7c 	bl	8007d18 <HAL_RCC_GetPCLK1Freq>
 800ae20:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f04f 0100 	mov.w	r1, #0
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d07d      	beq.n	800af2e <UART_SetConfig+0x6ee>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d074      	beq.n	800af24 <UART_SetConfig+0x6e4>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d06b      	beq.n	800af1a <UART_SetConfig+0x6da>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d062      	beq.n	800af10 <UART_SetConfig+0x6d0>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	d059      	beq.n	800af06 <UART_SetConfig+0x6c6>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	2b05      	cmp	r3, #5
 800ae58:	d050      	beq.n	800aefc <UART_SetConfig+0x6bc>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	2b06      	cmp	r3, #6
 800ae60:	d047      	beq.n	800aef2 <UART_SetConfig+0x6b2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	2b07      	cmp	r3, #7
 800ae68:	d03e      	beq.n	800aee8 <UART_SetConfig+0x6a8>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	2b08      	cmp	r3, #8
 800ae70:	d01f      	beq.n	800aeb2 <UART_SetConfig+0x672>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	2b09      	cmp	r3, #9
 800ae78:	d016      	beq.n	800aea8 <UART_SetConfig+0x668>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b0a      	cmp	r3, #10
 800ae80:	d00d      	beq.n	800ae9e <UART_SetConfig+0x65e>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	2b0b      	cmp	r3, #11
 800ae88:	d104      	bne.n	800ae94 <UART_SetConfig+0x654>
 800ae8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae8e:	f04f 0400 	mov.w	r4, #0
 800ae92:	e050      	b.n	800af36 <UART_SetConfig+0x6f6>
 800ae94:	f04f 0301 	mov.w	r3, #1
 800ae98:	f04f 0400 	mov.w	r4, #0
 800ae9c:	e04b      	b.n	800af36 <UART_SetConfig+0x6f6>
 800ae9e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aea2:	f04f 0400 	mov.w	r4, #0
 800aea6:	e046      	b.n	800af36 <UART_SetConfig+0x6f6>
 800aea8:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aeac:	f04f 0400 	mov.w	r4, #0
 800aeb0:	e041      	b.n	800af36 <UART_SetConfig+0x6f6>
 800aeb2:	f04f 0320 	mov.w	r3, #32
 800aeb6:	f04f 0400 	mov.w	r4, #0
 800aeba:	e03c      	b.n	800af36 <UART_SetConfig+0x6f6>
 800aebc:	00f42400 	.word	0x00f42400
 800aec0:	0001e848 	.word	0x0001e848
 800aec4:	0003d090 	.word	0x0003d090
 800aec8:	0007a120 	.word	0x0007a120
 800aecc:	000f4240 	.word	0x000f4240
 800aed0:	00145855 	.word	0x00145855
 800aed4:	00186a00 	.word	0x00186a00
 800aed8:	001e8480 	.word	0x001e8480
 800aedc:	0028b0aa 	.word	0x0028b0aa
 800aee0:	003d0900 	.word	0x003d0900
 800aee4:	007a1200 	.word	0x007a1200
 800aee8:	f04f 0310 	mov.w	r3, #16
 800aeec:	f04f 0400 	mov.w	r4, #0
 800aef0:	e021      	b.n	800af36 <UART_SetConfig+0x6f6>
 800aef2:	f04f 030c 	mov.w	r3, #12
 800aef6:	f04f 0400 	mov.w	r4, #0
 800aefa:	e01c      	b.n	800af36 <UART_SetConfig+0x6f6>
 800aefc:	f04f 030a 	mov.w	r3, #10
 800af00:	f04f 0400 	mov.w	r4, #0
 800af04:	e017      	b.n	800af36 <UART_SetConfig+0x6f6>
 800af06:	f04f 0308 	mov.w	r3, #8
 800af0a:	f04f 0400 	mov.w	r4, #0
 800af0e:	e012      	b.n	800af36 <UART_SetConfig+0x6f6>
 800af10:	f04f 0306 	mov.w	r3, #6
 800af14:	f04f 0400 	mov.w	r4, #0
 800af18:	e00d      	b.n	800af36 <UART_SetConfig+0x6f6>
 800af1a:	f04f 0304 	mov.w	r3, #4
 800af1e:	f04f 0400 	mov.w	r4, #0
 800af22:	e008      	b.n	800af36 <UART_SetConfig+0x6f6>
 800af24:	f04f 0302 	mov.w	r3, #2
 800af28:	f04f 0400 	mov.w	r4, #0
 800af2c:	e003      	b.n	800af36 <UART_SetConfig+0x6f6>
 800af2e:	f04f 0301 	mov.w	r3, #1
 800af32:	f04f 0400 	mov.w	r4, #0
 800af36:	461a      	mov	r2, r3
 800af38:	4623      	mov	r3, r4
 800af3a:	f7f5 fe6d 	bl	8000c18 <__aeabi_uldivmod>
 800af3e:	4603      	mov	r3, r0
 800af40:	460c      	mov	r4, r1
 800af42:	4619      	mov	r1, r3
 800af44:	4622      	mov	r2, r4
 800af46:	f04f 0300 	mov.w	r3, #0
 800af4a:	f04f 0400 	mov.w	r4, #0
 800af4e:	0214      	lsls	r4, r2, #8
 800af50:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800af54:	020b      	lsls	r3, r1, #8
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	6852      	ldr	r2, [r2, #4]
 800af5a:	0852      	lsrs	r2, r2, #1
 800af5c:	4611      	mov	r1, r2
 800af5e:	f04f 0200 	mov.w	r2, #0
 800af62:	eb13 0b01 	adds.w	fp, r3, r1
 800af66:	eb44 0c02 	adc.w	ip, r4, r2
 800af6a:	4658      	mov	r0, fp
 800af6c:	4661      	mov	r1, ip
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f04f 0400 	mov.w	r4, #0
 800af76:	461a      	mov	r2, r3
 800af78:	4623      	mov	r3, r4
 800af7a:	f7f5 fe4d 	bl	8000c18 <__aeabi_uldivmod>
 800af7e:	4603      	mov	r3, r0
 800af80:	460c      	mov	r4, r1
 800af82:	61fb      	str	r3, [r7, #28]
            break;
 800af84:	e1c5      	b.n	800b312 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d05b      	beq.n	800b046 <UART_SetConfig+0x806>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af92:	2b01      	cmp	r3, #1
 800af94:	d053      	beq.n	800b03e <UART_SetConfig+0x7fe>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d04b      	beq.n	800b036 <UART_SetConfig+0x7f6>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d043      	beq.n	800b02e <UART_SetConfig+0x7ee>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afaa:	2b04      	cmp	r3, #4
 800afac:	d03b      	beq.n	800b026 <UART_SetConfig+0x7e6>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb2:	2b05      	cmp	r3, #5
 800afb4:	d033      	beq.n	800b01e <UART_SetConfig+0x7de>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	2b06      	cmp	r3, #6
 800afbc:	d02b      	beq.n	800b016 <UART_SetConfig+0x7d6>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	2b07      	cmp	r3, #7
 800afc4:	d023      	beq.n	800b00e <UART_SetConfig+0x7ce>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	2b08      	cmp	r3, #8
 800afcc:	d01b      	beq.n	800b006 <UART_SetConfig+0x7c6>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	2b09      	cmp	r3, #9
 800afd4:	d013      	beq.n	800affe <UART_SetConfig+0x7be>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	2b0a      	cmp	r3, #10
 800afdc:	d00b      	beq.n	800aff6 <UART_SetConfig+0x7b6>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	2b0b      	cmp	r3, #11
 800afe4:	d103      	bne.n	800afee <UART_SetConfig+0x7ae>
 800afe6:	4bae      	ldr	r3, [pc, #696]	; (800b2a0 <UART_SetConfig+0xa60>)
 800afe8:	f04f 0400 	mov.w	r4, #0
 800afec:	e02e      	b.n	800b04c <UART_SetConfig+0x80c>
 800afee:	4bad      	ldr	r3, [pc, #692]	; (800b2a4 <UART_SetConfig+0xa64>)
 800aff0:	f04f 0400 	mov.w	r4, #0
 800aff4:	e02a      	b.n	800b04c <UART_SetConfig+0x80c>
 800aff6:	4bac      	ldr	r3, [pc, #688]	; (800b2a8 <UART_SetConfig+0xa68>)
 800aff8:	f04f 0400 	mov.w	r4, #0
 800affc:	e026      	b.n	800b04c <UART_SetConfig+0x80c>
 800affe:	4bab      	ldr	r3, [pc, #684]	; (800b2ac <UART_SetConfig+0xa6c>)
 800b000:	f04f 0400 	mov.w	r4, #0
 800b004:	e022      	b.n	800b04c <UART_SetConfig+0x80c>
 800b006:	4baa      	ldr	r3, [pc, #680]	; (800b2b0 <UART_SetConfig+0xa70>)
 800b008:	f04f 0400 	mov.w	r4, #0
 800b00c:	e01e      	b.n	800b04c <UART_SetConfig+0x80c>
 800b00e:	4ba9      	ldr	r3, [pc, #676]	; (800b2b4 <UART_SetConfig+0xa74>)
 800b010:	f04f 0400 	mov.w	r4, #0
 800b014:	e01a      	b.n	800b04c <UART_SetConfig+0x80c>
 800b016:	a49e      	add	r4, pc, #632	; (adr r4, 800b290 <UART_SetConfig+0xa50>)
 800b018:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b01c:	e016      	b.n	800b04c <UART_SetConfig+0x80c>
 800b01e:	4ba6      	ldr	r3, [pc, #664]	; (800b2b8 <UART_SetConfig+0xa78>)
 800b020:	f04f 0400 	mov.w	r4, #0
 800b024:	e012      	b.n	800b04c <UART_SetConfig+0x80c>
 800b026:	4ba5      	ldr	r3, [pc, #660]	; (800b2bc <UART_SetConfig+0xa7c>)
 800b028:	f04f 0400 	mov.w	r4, #0
 800b02c:	e00e      	b.n	800b04c <UART_SetConfig+0x80c>
 800b02e:	a49a      	add	r4, pc, #616	; (adr r4, 800b298 <UART_SetConfig+0xa58>)
 800b030:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b034:	e00a      	b.n	800b04c <UART_SetConfig+0x80c>
 800b036:	4ba2      	ldr	r3, [pc, #648]	; (800b2c0 <UART_SetConfig+0xa80>)
 800b038:	f04f 0400 	mov.w	r4, #0
 800b03c:	e006      	b.n	800b04c <UART_SetConfig+0x80c>
 800b03e:	4ba1      	ldr	r3, [pc, #644]	; (800b2c4 <UART_SetConfig+0xa84>)
 800b040:	f04f 0400 	mov.w	r4, #0
 800b044:	e002      	b.n	800b04c <UART_SetConfig+0x80c>
 800b046:	4b97      	ldr	r3, [pc, #604]	; (800b2a4 <UART_SetConfig+0xa64>)
 800b048:	f04f 0400 	mov.w	r4, #0
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	6852      	ldr	r2, [r2, #4]
 800b050:	0852      	lsrs	r2, r2, #1
 800b052:	4611      	mov	r1, r2
 800b054:	f04f 0200 	mov.w	r2, #0
 800b058:	eb13 0b01 	adds.w	fp, r3, r1
 800b05c:	eb44 0c02 	adc.w	ip, r4, r2
 800b060:	4658      	mov	r0, fp
 800b062:	4661      	mov	r1, ip
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	f04f 0400 	mov.w	r4, #0
 800b06c:	461a      	mov	r2, r3
 800b06e:	4623      	mov	r3, r4
 800b070:	f7f5 fdd2 	bl	8000c18 <__aeabi_uldivmod>
 800b074:	4603      	mov	r3, r0
 800b076:	460c      	mov	r4, r1
 800b078:	61fb      	str	r3, [r7, #28]
            break;
 800b07a:	e14a      	b.n	800b312 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800b07c:	f7fc fdde 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 800b080:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	4618      	mov	r0, r3
 800b086:	f04f 0100 	mov.w	r1, #0
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d067      	beq.n	800b162 <UART_SetConfig+0x922>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b096:	2b01      	cmp	r3, #1
 800b098:	d05e      	beq.n	800b158 <UART_SetConfig+0x918>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d055      	beq.n	800b14e <UART_SetConfig+0x90e>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d04c      	beq.n	800b144 <UART_SetConfig+0x904>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d043      	beq.n	800b13a <UART_SetConfig+0x8fa>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	2b05      	cmp	r3, #5
 800b0b8:	d03a      	beq.n	800b130 <UART_SetConfig+0x8f0>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	2b06      	cmp	r3, #6
 800b0c0:	d031      	beq.n	800b126 <UART_SetConfig+0x8e6>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c6:	2b07      	cmp	r3, #7
 800b0c8:	d028      	beq.n	800b11c <UART_SetConfig+0x8dc>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ce:	2b08      	cmp	r3, #8
 800b0d0:	d01f      	beq.n	800b112 <UART_SetConfig+0x8d2>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d6:	2b09      	cmp	r3, #9
 800b0d8:	d016      	beq.n	800b108 <UART_SetConfig+0x8c8>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0de:	2b0a      	cmp	r3, #10
 800b0e0:	d00d      	beq.n	800b0fe <UART_SetConfig+0x8be>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e6:	2b0b      	cmp	r3, #11
 800b0e8:	d104      	bne.n	800b0f4 <UART_SetConfig+0x8b4>
 800b0ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0ee:	f04f 0400 	mov.w	r4, #0
 800b0f2:	e03a      	b.n	800b16a <UART_SetConfig+0x92a>
 800b0f4:	f04f 0301 	mov.w	r3, #1
 800b0f8:	f04f 0400 	mov.w	r4, #0
 800b0fc:	e035      	b.n	800b16a <UART_SetConfig+0x92a>
 800b0fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 800b102:	f04f 0400 	mov.w	r4, #0
 800b106:	e030      	b.n	800b16a <UART_SetConfig+0x92a>
 800b108:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b10c:	f04f 0400 	mov.w	r4, #0
 800b110:	e02b      	b.n	800b16a <UART_SetConfig+0x92a>
 800b112:	f04f 0320 	mov.w	r3, #32
 800b116:	f04f 0400 	mov.w	r4, #0
 800b11a:	e026      	b.n	800b16a <UART_SetConfig+0x92a>
 800b11c:	f04f 0310 	mov.w	r3, #16
 800b120:	f04f 0400 	mov.w	r4, #0
 800b124:	e021      	b.n	800b16a <UART_SetConfig+0x92a>
 800b126:	f04f 030c 	mov.w	r3, #12
 800b12a:	f04f 0400 	mov.w	r4, #0
 800b12e:	e01c      	b.n	800b16a <UART_SetConfig+0x92a>
 800b130:	f04f 030a 	mov.w	r3, #10
 800b134:	f04f 0400 	mov.w	r4, #0
 800b138:	e017      	b.n	800b16a <UART_SetConfig+0x92a>
 800b13a:	f04f 0308 	mov.w	r3, #8
 800b13e:	f04f 0400 	mov.w	r4, #0
 800b142:	e012      	b.n	800b16a <UART_SetConfig+0x92a>
 800b144:	f04f 0306 	mov.w	r3, #6
 800b148:	f04f 0400 	mov.w	r4, #0
 800b14c:	e00d      	b.n	800b16a <UART_SetConfig+0x92a>
 800b14e:	f04f 0304 	mov.w	r3, #4
 800b152:	f04f 0400 	mov.w	r4, #0
 800b156:	e008      	b.n	800b16a <UART_SetConfig+0x92a>
 800b158:	f04f 0302 	mov.w	r3, #2
 800b15c:	f04f 0400 	mov.w	r4, #0
 800b160:	e003      	b.n	800b16a <UART_SetConfig+0x92a>
 800b162:	f04f 0301 	mov.w	r3, #1
 800b166:	f04f 0400 	mov.w	r4, #0
 800b16a:	461a      	mov	r2, r3
 800b16c:	4623      	mov	r3, r4
 800b16e:	f7f5 fd53 	bl	8000c18 <__aeabi_uldivmod>
 800b172:	4603      	mov	r3, r0
 800b174:	460c      	mov	r4, r1
 800b176:	4619      	mov	r1, r3
 800b178:	4622      	mov	r2, r4
 800b17a:	f04f 0300 	mov.w	r3, #0
 800b17e:	f04f 0400 	mov.w	r4, #0
 800b182:	0214      	lsls	r4, r2, #8
 800b184:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b188:	020b      	lsls	r3, r1, #8
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	6852      	ldr	r2, [r2, #4]
 800b18e:	0852      	lsrs	r2, r2, #1
 800b190:	4611      	mov	r1, r2
 800b192:	f04f 0200 	mov.w	r2, #0
 800b196:	eb13 0b01 	adds.w	fp, r3, r1
 800b19a:	eb44 0c02 	adc.w	ip, r4, r2
 800b19e:	4658      	mov	r0, fp
 800b1a0:	4661      	mov	r1, ip
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f04f 0400 	mov.w	r4, #0
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	4623      	mov	r3, r4
 800b1ae:	f7f5 fd33 	bl	8000c18 <__aeabi_uldivmod>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	460c      	mov	r4, r1
 800b1b6:	61fb      	str	r3, [r7, #28]
            break;
 800b1b8:	e0ab      	b.n	800b312 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 8088 	beq.w	800b2d4 <UART_SetConfig+0xa94>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d05b      	beq.n	800b284 <UART_SetConfig+0xa44>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d052      	beq.n	800b27a <UART_SetConfig+0xa3a>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	2b03      	cmp	r3, #3
 800b1da:	d04a      	beq.n	800b272 <UART_SetConfig+0xa32>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	2b04      	cmp	r3, #4
 800b1e2:	d041      	beq.n	800b268 <UART_SetConfig+0xa28>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	2b05      	cmp	r3, #5
 800b1ea:	d039      	beq.n	800b260 <UART_SetConfig+0xa20>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f0:	2b06      	cmp	r3, #6
 800b1f2:	d031      	beq.n	800b258 <UART_SetConfig+0xa18>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f8:	2b07      	cmp	r3, #7
 800b1fa:	d028      	beq.n	800b24e <UART_SetConfig+0xa0e>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	2b08      	cmp	r3, #8
 800b202:	d01f      	beq.n	800b244 <UART_SetConfig+0xa04>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b208:	2b09      	cmp	r3, #9
 800b20a:	d016      	beq.n	800b23a <UART_SetConfig+0x9fa>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b210:	2b0a      	cmp	r3, #10
 800b212:	d00d      	beq.n	800b230 <UART_SetConfig+0x9f0>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	2b0b      	cmp	r3, #11
 800b21a:	d104      	bne.n	800b226 <UART_SetConfig+0x9e6>
 800b21c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b220:	f04f 0400 	mov.w	r4, #0
 800b224:	e05a      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b226:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b22a:	f04f 0400 	mov.w	r4, #0
 800b22e:	e055      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b234:	f04f 0400 	mov.w	r4, #0
 800b238:	e050      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b23a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b23e:	f04f 0400 	mov.w	r4, #0
 800b242:	e04b      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b244:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b248:	f04f 0400 	mov.w	r4, #0
 800b24c:	e046      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b24e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b252:	f04f 0400 	mov.w	r4, #0
 800b256:	e041      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b258:	4b1b      	ldr	r3, [pc, #108]	; (800b2c8 <UART_SetConfig+0xa88>)
 800b25a:	f04f 0400 	mov.w	r4, #0
 800b25e:	e03d      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b260:	4b1a      	ldr	r3, [pc, #104]	; (800b2cc <UART_SetConfig+0xa8c>)
 800b262:	f04f 0400 	mov.w	r4, #0
 800b266:	e039      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b268:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b26c:	f04f 0400 	mov.w	r4, #0
 800b270:	e034      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b272:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <UART_SetConfig+0xa90>)
 800b274:	f04f 0400 	mov.w	r4, #0
 800b278:	e030      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b27a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b27e:	f04f 0400 	mov.w	r4, #0
 800b282:	e02b      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b284:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b288:	f04f 0400 	mov.w	r4, #0
 800b28c:	e026      	b.n	800b2dc <UART_SetConfig+0xa9c>
 800b28e:	bf00      	nop
 800b290:	14585500 	.word	0x14585500
 800b294:	00000000 	.word	0x00000000
 800b298:	28b0aa00 	.word	0x28b0aa00
 800b29c:	00000000 	.word	0x00000000
 800b2a0:	00f42400 	.word	0x00f42400
 800b2a4:	f4240000 	.word	0xf4240000
 800b2a8:	01e84800 	.word	0x01e84800
 800b2ac:	03d09000 	.word	0x03d09000
 800b2b0:	07a12000 	.word	0x07a12000
 800b2b4:	0f424000 	.word	0x0f424000
 800b2b8:	186a0000 	.word	0x186a0000
 800b2bc:	1e848000 	.word	0x1e848000
 800b2c0:	3d090000 	.word	0x3d090000
 800b2c4:	7a120000 	.word	0x7a120000
 800b2c8:	000aaa00 	.word	0x000aaa00
 800b2cc:	000ccc00 	.word	0x000ccc00
 800b2d0:	00155500 	.word	0x00155500
 800b2d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2d8:	f04f 0400 	mov.w	r4, #0
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	6852      	ldr	r2, [r2, #4]
 800b2e0:	0852      	lsrs	r2, r2, #1
 800b2e2:	4611      	mov	r1, r2
 800b2e4:	f04f 0200 	mov.w	r2, #0
 800b2e8:	eb13 0b01 	adds.w	fp, r3, r1
 800b2ec:	eb44 0c02 	adc.w	ip, r4, r2
 800b2f0:	4658      	mov	r0, fp
 800b2f2:	4661      	mov	r1, ip
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f04f 0400 	mov.w	r4, #0
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	4623      	mov	r3, r4
 800b300:	f7f5 fc8a 	bl	8000c18 <__aeabi_uldivmod>
 800b304:	4603      	mov	r3, r0
 800b306:	460c      	mov	r4, r1
 800b308:	61fb      	str	r3, [r7, #28]
            break;
 800b30a:	e002      	b.n	800b312 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	76fb      	strb	r3, [r7, #27]
            break;
 800b310:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b318:	d309      	bcc.n	800b32e <UART_SetConfig+0xaee>
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b320:	d205      	bcs.n	800b32e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	69fa      	ldr	r2, [r7, #28]
 800b328:	60da      	str	r2, [r3, #12]
 800b32a:	f000 bc18 	b.w	800bb5e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	76fb      	strb	r3, [r7, #27]
 800b332:	f000 bc14 	b.w	800bb5e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b33e:	f040 8204 	bne.w	800b74a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800b342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b346:	2b08      	cmp	r3, #8
 800b348:	f200 81df 	bhi.w	800b70a <UART_SetConfig+0xeca>
 800b34c:	a201      	add	r2, pc, #4	; (adr r2, 800b354 <UART_SetConfig+0xb14>)
 800b34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b352:	bf00      	nop
 800b354:	0800b379 	.word	0x0800b379
 800b358:	0800b431 	.word	0x0800b431
 800b35c:	0800b4e9 	.word	0x0800b4e9
 800b360:	0800b70b 	.word	0x0800b70b
 800b364:	0800b591 	.word	0x0800b591
 800b368:	0800b70b 	.word	0x0800b70b
 800b36c:	0800b70b 	.word	0x0800b70b
 800b370:	0800b70b 	.word	0x0800b70b
 800b374:	0800b649 	.word	0x0800b649
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b378:	f7fc fcce 	bl	8007d18 <HAL_RCC_GetPCLK1Freq>
 800b37c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	d044      	beq.n	800b410 <UART_SetConfig+0xbd0>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d03e      	beq.n	800b40c <UART_SetConfig+0xbcc>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b392:	2b02      	cmp	r3, #2
 800b394:	d038      	beq.n	800b408 <UART_SetConfig+0xbc8>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	d032      	beq.n	800b404 <UART_SetConfig+0xbc4>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	2b04      	cmp	r3, #4
 800b3a4:	d02c      	beq.n	800b400 <UART_SetConfig+0xbc0>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3aa:	2b05      	cmp	r3, #5
 800b3ac:	d026      	beq.n	800b3fc <UART_SetConfig+0xbbc>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b2:	2b06      	cmp	r3, #6
 800b3b4:	d020      	beq.n	800b3f8 <UART_SetConfig+0xbb8>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	2b07      	cmp	r3, #7
 800b3bc:	d01a      	beq.n	800b3f4 <UART_SetConfig+0xbb4>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c2:	2b08      	cmp	r3, #8
 800b3c4:	d014      	beq.n	800b3f0 <UART_SetConfig+0xbb0>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ca:	2b09      	cmp	r3, #9
 800b3cc:	d00e      	beq.n	800b3ec <UART_SetConfig+0xbac>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d2:	2b0a      	cmp	r3, #10
 800b3d4:	d008      	beq.n	800b3e8 <UART_SetConfig+0xba8>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	2b0b      	cmp	r3, #11
 800b3dc:	d102      	bne.n	800b3e4 <UART_SetConfig+0xba4>
 800b3de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3e2:	e016      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e014      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b3e8:	2380      	movs	r3, #128	; 0x80
 800b3ea:	e012      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b3ec:	2340      	movs	r3, #64	; 0x40
 800b3ee:	e010      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b3f0:	2320      	movs	r3, #32
 800b3f2:	e00e      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b3f4:	2310      	movs	r3, #16
 800b3f6:	e00c      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b3f8:	230c      	movs	r3, #12
 800b3fa:	e00a      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b3fc:	230a      	movs	r3, #10
 800b3fe:	e008      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b400:	2308      	movs	r3, #8
 800b402:	e006      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b404:	2306      	movs	r3, #6
 800b406:	e004      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b408:	2304      	movs	r3, #4
 800b40a:	e002      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b40c:	2302      	movs	r3, #2
 800b40e:	e000      	b.n	800b412 <UART_SetConfig+0xbd2>
 800b410:	2301      	movs	r3, #1
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	fbb2 f3f3 	udiv	r3, r2, r3
 800b418:	005a      	lsls	r2, r3, #1
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	085b      	lsrs	r3, r3, #1
 800b420:	441a      	add	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	fbb2 f3f3 	udiv	r3, r2, r3
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	61fb      	str	r3, [r7, #28]
        break;
 800b42e:	e16f      	b.n	800b710 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b430:	f7fc fc88 	bl	8007d44 <HAL_RCC_GetPCLK2Freq>
 800b434:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d044      	beq.n	800b4c8 <UART_SetConfig+0xc88>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b442:	2b01      	cmp	r3, #1
 800b444:	d03e      	beq.n	800b4c4 <UART_SetConfig+0xc84>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d038      	beq.n	800b4c0 <UART_SetConfig+0xc80>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	2b03      	cmp	r3, #3
 800b454:	d032      	beq.n	800b4bc <UART_SetConfig+0xc7c>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45a:	2b04      	cmp	r3, #4
 800b45c:	d02c      	beq.n	800b4b8 <UART_SetConfig+0xc78>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b462:	2b05      	cmp	r3, #5
 800b464:	d026      	beq.n	800b4b4 <UART_SetConfig+0xc74>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46a:	2b06      	cmp	r3, #6
 800b46c:	d020      	beq.n	800b4b0 <UART_SetConfig+0xc70>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	2b07      	cmp	r3, #7
 800b474:	d01a      	beq.n	800b4ac <UART_SetConfig+0xc6c>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47a:	2b08      	cmp	r3, #8
 800b47c:	d014      	beq.n	800b4a8 <UART_SetConfig+0xc68>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b482:	2b09      	cmp	r3, #9
 800b484:	d00e      	beq.n	800b4a4 <UART_SetConfig+0xc64>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48a:	2b0a      	cmp	r3, #10
 800b48c:	d008      	beq.n	800b4a0 <UART_SetConfig+0xc60>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b492:	2b0b      	cmp	r3, #11
 800b494:	d102      	bne.n	800b49c <UART_SetConfig+0xc5c>
 800b496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b49a:	e016      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e014      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4a0:	2380      	movs	r3, #128	; 0x80
 800b4a2:	e012      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4a4:	2340      	movs	r3, #64	; 0x40
 800b4a6:	e010      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4a8:	2320      	movs	r3, #32
 800b4aa:	e00e      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4ac:	2310      	movs	r3, #16
 800b4ae:	e00c      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4b0:	230c      	movs	r3, #12
 800b4b2:	e00a      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4b4:	230a      	movs	r3, #10
 800b4b6:	e008      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4b8:	2308      	movs	r3, #8
 800b4ba:	e006      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4bc:	2306      	movs	r3, #6
 800b4be:	e004      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4c0:	2304      	movs	r3, #4
 800b4c2:	e002      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e000      	b.n	800b4ca <UART_SetConfig+0xc8a>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4d0:	005a      	lsls	r2, r3, #1
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	085b      	lsrs	r3, r3, #1
 800b4d8:	441a      	add	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	61fb      	str	r3, [r7, #28]
        break;
 800b4e6:	e113      	b.n	800b710 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d043      	beq.n	800b578 <UART_SetConfig+0xd38>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d03d      	beq.n	800b574 <UART_SetConfig+0xd34>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d037      	beq.n	800b570 <UART_SetConfig+0xd30>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b504:	2b03      	cmp	r3, #3
 800b506:	d031      	beq.n	800b56c <UART_SetConfig+0xd2c>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	2b04      	cmp	r3, #4
 800b50e:	d02b      	beq.n	800b568 <UART_SetConfig+0xd28>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b514:	2b05      	cmp	r3, #5
 800b516:	d025      	beq.n	800b564 <UART_SetConfig+0xd24>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51c:	2b06      	cmp	r3, #6
 800b51e:	d01f      	beq.n	800b560 <UART_SetConfig+0xd20>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b524:	2b07      	cmp	r3, #7
 800b526:	d019      	beq.n	800b55c <UART_SetConfig+0xd1c>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d013      	beq.n	800b558 <UART_SetConfig+0xd18>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	2b09      	cmp	r3, #9
 800b536:	d00d      	beq.n	800b554 <UART_SetConfig+0xd14>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	2b0a      	cmp	r3, #10
 800b53e:	d007      	beq.n	800b550 <UART_SetConfig+0xd10>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	2b0b      	cmp	r3, #11
 800b546:	d101      	bne.n	800b54c <UART_SetConfig+0xd0c>
 800b548:	4b8d      	ldr	r3, [pc, #564]	; (800b780 <UART_SetConfig+0xf40>)
 800b54a:	e016      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b54c:	4b8d      	ldr	r3, [pc, #564]	; (800b784 <UART_SetConfig+0xf44>)
 800b54e:	e014      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b550:	4b8d      	ldr	r3, [pc, #564]	; (800b788 <UART_SetConfig+0xf48>)
 800b552:	e012      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b554:	4b8d      	ldr	r3, [pc, #564]	; (800b78c <UART_SetConfig+0xf4c>)
 800b556:	e010      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b558:	4b8d      	ldr	r3, [pc, #564]	; (800b790 <UART_SetConfig+0xf50>)
 800b55a:	e00e      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b55c:	4b8d      	ldr	r3, [pc, #564]	; (800b794 <UART_SetConfig+0xf54>)
 800b55e:	e00c      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b560:	4b8d      	ldr	r3, [pc, #564]	; (800b798 <UART_SetConfig+0xf58>)
 800b562:	e00a      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b564:	4b8d      	ldr	r3, [pc, #564]	; (800b79c <UART_SetConfig+0xf5c>)
 800b566:	e008      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b568:	4b8d      	ldr	r3, [pc, #564]	; (800b7a0 <UART_SetConfig+0xf60>)
 800b56a:	e006      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b56c:	4b8d      	ldr	r3, [pc, #564]	; (800b7a4 <UART_SetConfig+0xf64>)
 800b56e:	e004      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b570:	4b8d      	ldr	r3, [pc, #564]	; (800b7a8 <UART_SetConfig+0xf68>)
 800b572:	e002      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b574:	4b8d      	ldr	r3, [pc, #564]	; (800b7ac <UART_SetConfig+0xf6c>)
 800b576:	e000      	b.n	800b57a <UART_SetConfig+0xd3a>
 800b578:	4b82      	ldr	r3, [pc, #520]	; (800b784 <UART_SetConfig+0xf44>)
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	6852      	ldr	r2, [r2, #4]
 800b57e:	0852      	lsrs	r2, r2, #1
 800b580:	441a      	add	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	fbb2 f3f3 	udiv	r3, r2, r3
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	61fb      	str	r3, [r7, #28]
        break;
 800b58e:	e0bf      	b.n	800b710 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b590:	f7fc fb54 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 800b594:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d044      	beq.n	800b628 <UART_SetConfig+0xde8>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d03e      	beq.n	800b624 <UART_SetConfig+0xde4>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d038      	beq.n	800b620 <UART_SetConfig+0xde0>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d032      	beq.n	800b61c <UART_SetConfig+0xddc>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	d02c      	beq.n	800b618 <UART_SetConfig+0xdd8>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	2b05      	cmp	r3, #5
 800b5c4:	d026      	beq.n	800b614 <UART_SetConfig+0xdd4>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	2b06      	cmp	r3, #6
 800b5cc:	d020      	beq.n	800b610 <UART_SetConfig+0xdd0>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d2:	2b07      	cmp	r3, #7
 800b5d4:	d01a      	beq.n	800b60c <UART_SetConfig+0xdcc>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	2b08      	cmp	r3, #8
 800b5dc:	d014      	beq.n	800b608 <UART_SetConfig+0xdc8>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	2b09      	cmp	r3, #9
 800b5e4:	d00e      	beq.n	800b604 <UART_SetConfig+0xdc4>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ea:	2b0a      	cmp	r3, #10
 800b5ec:	d008      	beq.n	800b600 <UART_SetConfig+0xdc0>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f2:	2b0b      	cmp	r3, #11
 800b5f4:	d102      	bne.n	800b5fc <UART_SetConfig+0xdbc>
 800b5f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5fa:	e016      	b.n	800b62a <UART_SetConfig+0xdea>
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e014      	b.n	800b62a <UART_SetConfig+0xdea>
 800b600:	2380      	movs	r3, #128	; 0x80
 800b602:	e012      	b.n	800b62a <UART_SetConfig+0xdea>
 800b604:	2340      	movs	r3, #64	; 0x40
 800b606:	e010      	b.n	800b62a <UART_SetConfig+0xdea>
 800b608:	2320      	movs	r3, #32
 800b60a:	e00e      	b.n	800b62a <UART_SetConfig+0xdea>
 800b60c:	2310      	movs	r3, #16
 800b60e:	e00c      	b.n	800b62a <UART_SetConfig+0xdea>
 800b610:	230c      	movs	r3, #12
 800b612:	e00a      	b.n	800b62a <UART_SetConfig+0xdea>
 800b614:	230a      	movs	r3, #10
 800b616:	e008      	b.n	800b62a <UART_SetConfig+0xdea>
 800b618:	2308      	movs	r3, #8
 800b61a:	e006      	b.n	800b62a <UART_SetConfig+0xdea>
 800b61c:	2306      	movs	r3, #6
 800b61e:	e004      	b.n	800b62a <UART_SetConfig+0xdea>
 800b620:	2304      	movs	r3, #4
 800b622:	e002      	b.n	800b62a <UART_SetConfig+0xdea>
 800b624:	2302      	movs	r3, #2
 800b626:	e000      	b.n	800b62a <UART_SetConfig+0xdea>
 800b628:	2301      	movs	r3, #1
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b630:	005a      	lsls	r2, r3, #1
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	085b      	lsrs	r3, r3, #1
 800b638:	441a      	add	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b642:	b29b      	uxth	r3, r3
 800b644:	61fb      	str	r3, [r7, #28]
        break;
 800b646:	e063      	b.n	800b710 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d04f      	beq.n	800b6f0 <UART_SetConfig+0xeb0>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b654:	2b01      	cmp	r3, #1
 800b656:	d048      	beq.n	800b6ea <UART_SetConfig+0xeaa>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d041      	beq.n	800b6e4 <UART_SetConfig+0xea4>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b664:	2b03      	cmp	r3, #3
 800b666:	d03a      	beq.n	800b6de <UART_SetConfig+0xe9e>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	d033      	beq.n	800b6d8 <UART_SetConfig+0xe98>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	2b05      	cmp	r3, #5
 800b676:	d02c      	beq.n	800b6d2 <UART_SetConfig+0xe92>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	2b06      	cmp	r3, #6
 800b67e:	d025      	beq.n	800b6cc <UART_SetConfig+0xe8c>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	2b07      	cmp	r3, #7
 800b686:	d01e      	beq.n	800b6c6 <UART_SetConfig+0xe86>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b08      	cmp	r3, #8
 800b68e:	d017      	beq.n	800b6c0 <UART_SetConfig+0xe80>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	2b09      	cmp	r3, #9
 800b696:	d010      	beq.n	800b6ba <UART_SetConfig+0xe7a>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	2b0a      	cmp	r3, #10
 800b69e:	d009      	beq.n	800b6b4 <UART_SetConfig+0xe74>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b0b      	cmp	r3, #11
 800b6a6:	d102      	bne.n	800b6ae <UART_SetConfig+0xe6e>
 800b6a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6ac:	e022      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b6b2:	e01f      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6b8:	e01c      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6be:	e019      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6c4:	e016      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ca:	e013      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6cc:	f241 5354 	movw	r3, #5460	; 0x1554
 800b6d0:	e010      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6d2:	f641 1398 	movw	r3, #6552	; 0x1998
 800b6d6:	e00d      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6dc:	e00a      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6de:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b6e2:	e007      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b6e8:	e004      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ee:	e001      	b.n	800b6f4 <UART_SetConfig+0xeb4>
 800b6f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	6852      	ldr	r2, [r2, #4]
 800b6f8:	0852      	lsrs	r2, r2, #1
 800b6fa:	441a      	add	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	fbb2 f3f3 	udiv	r3, r2, r3
 800b704:	b29b      	uxth	r3, r3
 800b706:	61fb      	str	r3, [r7, #28]
        break;
 800b708:	e002      	b.n	800b710 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	76fb      	strb	r3, [r7, #27]
        break;
 800b70e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	2b0f      	cmp	r3, #15
 800b714:	d916      	bls.n	800b744 <UART_SetConfig+0xf04>
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b71c:	d212      	bcs.n	800b744 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	b29b      	uxth	r3, r3
 800b722:	f023 030f 	bic.w	r3, r3, #15
 800b726:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	085b      	lsrs	r3, r3, #1
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	f003 0307 	and.w	r3, r3, #7
 800b732:	b29a      	uxth	r2, r3
 800b734:	89fb      	ldrh	r3, [r7, #14]
 800b736:	4313      	orrs	r3, r2
 800b738:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	89fa      	ldrh	r2, [r7, #14]
 800b740:	60da      	str	r2, [r3, #12]
 800b742:	e20c      	b.n	800bb5e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	76fb      	strb	r3, [r7, #27]
 800b748:	e209      	b.n	800bb5e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 800b74a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b74e:	2b08      	cmp	r3, #8
 800b750:	f200 81f4 	bhi.w	800bb3c <UART_SetConfig+0x12fc>
 800b754:	a201      	add	r2, pc, #4	; (adr r2, 800b75c <UART_SetConfig+0xf1c>)
 800b756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75a:	bf00      	nop
 800b75c:	0800b7b1 	.word	0x0800b7b1
 800b760:	0800b867 	.word	0x0800b867
 800b764:	0800b91d 	.word	0x0800b91d
 800b768:	0800bb3d 	.word	0x0800bb3d
 800b76c:	0800b9c7 	.word	0x0800b9c7
 800b770:	0800bb3d 	.word	0x0800bb3d
 800b774:	0800bb3d 	.word	0x0800bb3d
 800b778:	0800bb3d 	.word	0x0800bb3d
 800b77c:	0800ba7d 	.word	0x0800ba7d
 800b780:	0001e848 	.word	0x0001e848
 800b784:	01e84800 	.word	0x01e84800
 800b788:	0003d090 	.word	0x0003d090
 800b78c:	0007a120 	.word	0x0007a120
 800b790:	000f4240 	.word	0x000f4240
 800b794:	001e8480 	.word	0x001e8480
 800b798:	0028b0aa 	.word	0x0028b0aa
 800b79c:	0030d400 	.word	0x0030d400
 800b7a0:	003d0900 	.word	0x003d0900
 800b7a4:	00516154 	.word	0x00516154
 800b7a8:	007a1200 	.word	0x007a1200
 800b7ac:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7b0:	f7fc fab2 	bl	8007d18 <HAL_RCC_GetPCLK1Freq>
 800b7b4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d044      	beq.n	800b848 <UART_SetConfig+0x1008>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d03e      	beq.n	800b844 <UART_SetConfig+0x1004>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d038      	beq.n	800b840 <UART_SetConfig+0x1000>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d032      	beq.n	800b83c <UART_SetConfig+0xffc>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	d02c      	beq.n	800b838 <UART_SetConfig+0xff8>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e2:	2b05      	cmp	r3, #5
 800b7e4:	d026      	beq.n	800b834 <UART_SetConfig+0xff4>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ea:	2b06      	cmp	r3, #6
 800b7ec:	d020      	beq.n	800b830 <UART_SetConfig+0xff0>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f2:	2b07      	cmp	r3, #7
 800b7f4:	d01a      	beq.n	800b82c <UART_SetConfig+0xfec>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fa:	2b08      	cmp	r3, #8
 800b7fc:	d014      	beq.n	800b828 <UART_SetConfig+0xfe8>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b802:	2b09      	cmp	r3, #9
 800b804:	d00e      	beq.n	800b824 <UART_SetConfig+0xfe4>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	2b0a      	cmp	r3, #10
 800b80c:	d008      	beq.n	800b820 <UART_SetConfig+0xfe0>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	2b0b      	cmp	r3, #11
 800b814:	d102      	bne.n	800b81c <UART_SetConfig+0xfdc>
 800b816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b81a:	e016      	b.n	800b84a <UART_SetConfig+0x100a>
 800b81c:	2301      	movs	r3, #1
 800b81e:	e014      	b.n	800b84a <UART_SetConfig+0x100a>
 800b820:	2380      	movs	r3, #128	; 0x80
 800b822:	e012      	b.n	800b84a <UART_SetConfig+0x100a>
 800b824:	2340      	movs	r3, #64	; 0x40
 800b826:	e010      	b.n	800b84a <UART_SetConfig+0x100a>
 800b828:	2320      	movs	r3, #32
 800b82a:	e00e      	b.n	800b84a <UART_SetConfig+0x100a>
 800b82c:	2310      	movs	r3, #16
 800b82e:	e00c      	b.n	800b84a <UART_SetConfig+0x100a>
 800b830:	230c      	movs	r3, #12
 800b832:	e00a      	b.n	800b84a <UART_SetConfig+0x100a>
 800b834:	230a      	movs	r3, #10
 800b836:	e008      	b.n	800b84a <UART_SetConfig+0x100a>
 800b838:	2308      	movs	r3, #8
 800b83a:	e006      	b.n	800b84a <UART_SetConfig+0x100a>
 800b83c:	2306      	movs	r3, #6
 800b83e:	e004      	b.n	800b84a <UART_SetConfig+0x100a>
 800b840:	2304      	movs	r3, #4
 800b842:	e002      	b.n	800b84a <UART_SetConfig+0x100a>
 800b844:	2302      	movs	r3, #2
 800b846:	e000      	b.n	800b84a <UART_SetConfig+0x100a>
 800b848:	2301      	movs	r3, #1
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	085b      	lsrs	r3, r3, #1
 800b856:	441a      	add	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b860:	b29b      	uxth	r3, r3
 800b862:	61fb      	str	r3, [r7, #28]
        break;
 800b864:	e16d      	b.n	800bb42 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b866:	f7fc fa6d 	bl	8007d44 <HAL_RCC_GetPCLK2Freq>
 800b86a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	2b00      	cmp	r3, #0
 800b872:	d044      	beq.n	800b8fe <UART_SetConfig+0x10be>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d03e      	beq.n	800b8fa <UART_SetConfig+0x10ba>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	2b02      	cmp	r3, #2
 800b882:	d038      	beq.n	800b8f6 <UART_SetConfig+0x10b6>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d032      	beq.n	800b8f2 <UART_SetConfig+0x10b2>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b890:	2b04      	cmp	r3, #4
 800b892:	d02c      	beq.n	800b8ee <UART_SetConfig+0x10ae>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b898:	2b05      	cmp	r3, #5
 800b89a:	d026      	beq.n	800b8ea <UART_SetConfig+0x10aa>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a0:	2b06      	cmp	r3, #6
 800b8a2:	d020      	beq.n	800b8e6 <UART_SetConfig+0x10a6>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a8:	2b07      	cmp	r3, #7
 800b8aa:	d01a      	beq.n	800b8e2 <UART_SetConfig+0x10a2>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b0:	2b08      	cmp	r3, #8
 800b8b2:	d014      	beq.n	800b8de <UART_SetConfig+0x109e>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b8:	2b09      	cmp	r3, #9
 800b8ba:	d00e      	beq.n	800b8da <UART_SetConfig+0x109a>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c0:	2b0a      	cmp	r3, #10
 800b8c2:	d008      	beq.n	800b8d6 <UART_SetConfig+0x1096>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c8:	2b0b      	cmp	r3, #11
 800b8ca:	d102      	bne.n	800b8d2 <UART_SetConfig+0x1092>
 800b8cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8d0:	e016      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e014      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8d6:	2380      	movs	r3, #128	; 0x80
 800b8d8:	e012      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8da:	2340      	movs	r3, #64	; 0x40
 800b8dc:	e010      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8de:	2320      	movs	r3, #32
 800b8e0:	e00e      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8e2:	2310      	movs	r3, #16
 800b8e4:	e00c      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	e00a      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8ea:	230a      	movs	r3, #10
 800b8ec:	e008      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8ee:	2308      	movs	r3, #8
 800b8f0:	e006      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8f2:	2306      	movs	r3, #6
 800b8f4:	e004      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8f6:	2304      	movs	r3, #4
 800b8f8:	e002      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	e000      	b.n	800b900 <UART_SetConfig+0x10c0>
 800b8fe:	2301      	movs	r3, #1
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	fbb2 f2f3 	udiv	r2, r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	085b      	lsrs	r3, r3, #1
 800b90c:	441a      	add	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	fbb2 f3f3 	udiv	r3, r2, r3
 800b916:	b29b      	uxth	r3, r3
 800b918:	61fb      	str	r3, [r7, #28]
        break;
 800b91a:	e112      	b.n	800bb42 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	2b00      	cmp	r3, #0
 800b922:	d044      	beq.n	800b9ae <UART_SetConfig+0x116e>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d03e      	beq.n	800b9aa <UART_SetConfig+0x116a>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b930:	2b02      	cmp	r3, #2
 800b932:	d038      	beq.n	800b9a6 <UART_SetConfig+0x1166>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d032      	beq.n	800b9a2 <UART_SetConfig+0x1162>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b940:	2b04      	cmp	r3, #4
 800b942:	d02c      	beq.n	800b99e <UART_SetConfig+0x115e>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	2b05      	cmp	r3, #5
 800b94a:	d026      	beq.n	800b99a <UART_SetConfig+0x115a>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	2b06      	cmp	r3, #6
 800b952:	d020      	beq.n	800b996 <UART_SetConfig+0x1156>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b958:	2b07      	cmp	r3, #7
 800b95a:	d01a      	beq.n	800b992 <UART_SetConfig+0x1152>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	2b08      	cmp	r3, #8
 800b962:	d014      	beq.n	800b98e <UART_SetConfig+0x114e>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b968:	2b09      	cmp	r3, #9
 800b96a:	d00e      	beq.n	800b98a <UART_SetConfig+0x114a>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b970:	2b0a      	cmp	r3, #10
 800b972:	d008      	beq.n	800b986 <UART_SetConfig+0x1146>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	2b0b      	cmp	r3, #11
 800b97a:	d102      	bne.n	800b982 <UART_SetConfig+0x1142>
 800b97c:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b980:	e016      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b982:	4b81      	ldr	r3, [pc, #516]	; (800bb88 <UART_SetConfig+0x1348>)
 800b984:	e014      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b986:	4b81      	ldr	r3, [pc, #516]	; (800bb8c <UART_SetConfig+0x134c>)
 800b988:	e012      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b98a:	4b81      	ldr	r3, [pc, #516]	; (800bb90 <UART_SetConfig+0x1350>)
 800b98c:	e010      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b98e:	4b81      	ldr	r3, [pc, #516]	; (800bb94 <UART_SetConfig+0x1354>)
 800b990:	e00e      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b992:	4b81      	ldr	r3, [pc, #516]	; (800bb98 <UART_SetConfig+0x1358>)
 800b994:	e00c      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b996:	4b81      	ldr	r3, [pc, #516]	; (800bb9c <UART_SetConfig+0x135c>)
 800b998:	e00a      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b99a:	4b81      	ldr	r3, [pc, #516]	; (800bba0 <UART_SetConfig+0x1360>)
 800b99c:	e008      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b99e:	4b81      	ldr	r3, [pc, #516]	; (800bba4 <UART_SetConfig+0x1364>)
 800b9a0:	e006      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b9a2:	4b81      	ldr	r3, [pc, #516]	; (800bba8 <UART_SetConfig+0x1368>)
 800b9a4:	e004      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b9a6:	4b81      	ldr	r3, [pc, #516]	; (800bbac <UART_SetConfig+0x136c>)
 800b9a8:	e002      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b9aa:	4b81      	ldr	r3, [pc, #516]	; (800bbb0 <UART_SetConfig+0x1370>)
 800b9ac:	e000      	b.n	800b9b0 <UART_SetConfig+0x1170>
 800b9ae:	4b76      	ldr	r3, [pc, #472]	; (800bb88 <UART_SetConfig+0x1348>)
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	6852      	ldr	r2, [r2, #4]
 800b9b4:	0852      	lsrs	r2, r2, #1
 800b9b6:	441a      	add	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	61fb      	str	r3, [r7, #28]
        break;
 800b9c4:	e0bd      	b.n	800bb42 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9c6:	f7fc f939 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 800b9ca:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d044      	beq.n	800ba5e <UART_SetConfig+0x121e>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d03e      	beq.n	800ba5a <UART_SetConfig+0x121a>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d038      	beq.n	800ba56 <UART_SetConfig+0x1216>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d032      	beq.n	800ba52 <UART_SetConfig+0x1212>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	2b04      	cmp	r3, #4
 800b9f2:	d02c      	beq.n	800ba4e <UART_SetConfig+0x120e>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	2b05      	cmp	r3, #5
 800b9fa:	d026      	beq.n	800ba4a <UART_SetConfig+0x120a>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba00:	2b06      	cmp	r3, #6
 800ba02:	d020      	beq.n	800ba46 <UART_SetConfig+0x1206>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba08:	2b07      	cmp	r3, #7
 800ba0a:	d01a      	beq.n	800ba42 <UART_SetConfig+0x1202>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	2b08      	cmp	r3, #8
 800ba12:	d014      	beq.n	800ba3e <UART_SetConfig+0x11fe>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	2b09      	cmp	r3, #9
 800ba1a:	d00e      	beq.n	800ba3a <UART_SetConfig+0x11fa>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	2b0a      	cmp	r3, #10
 800ba22:	d008      	beq.n	800ba36 <UART_SetConfig+0x11f6>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	2b0b      	cmp	r3, #11
 800ba2a:	d102      	bne.n	800ba32 <UART_SetConfig+0x11f2>
 800ba2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba30:	e016      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba32:	2301      	movs	r3, #1
 800ba34:	e014      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba36:	2380      	movs	r3, #128	; 0x80
 800ba38:	e012      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba3a:	2340      	movs	r3, #64	; 0x40
 800ba3c:	e010      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba3e:	2320      	movs	r3, #32
 800ba40:	e00e      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba42:	2310      	movs	r3, #16
 800ba44:	e00c      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba46:	230c      	movs	r3, #12
 800ba48:	e00a      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba4a:	230a      	movs	r3, #10
 800ba4c:	e008      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba4e:	2308      	movs	r3, #8
 800ba50:	e006      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba52:	2306      	movs	r3, #6
 800ba54:	e004      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba56:	2304      	movs	r3, #4
 800ba58:	e002      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba5a:	2302      	movs	r3, #2
 800ba5c:	e000      	b.n	800ba60 <UART_SetConfig+0x1220>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	085b      	lsrs	r3, r3, #1
 800ba6c:	441a      	add	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	61fb      	str	r3, [r7, #28]
        break;
 800ba7a:	e062      	b.n	800bb42 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d04e      	beq.n	800bb22 <UART_SetConfig+0x12e2>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d047      	beq.n	800bb1c <UART_SetConfig+0x12dc>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d040      	beq.n	800bb16 <UART_SetConfig+0x12d6>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	d039      	beq.n	800bb10 <UART_SetConfig+0x12d0>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa0:	2b04      	cmp	r3, #4
 800baa2:	d032      	beq.n	800bb0a <UART_SetConfig+0x12ca>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	2b05      	cmp	r3, #5
 800baaa:	d02b      	beq.n	800bb04 <UART_SetConfig+0x12c4>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	2b06      	cmp	r3, #6
 800bab2:	d024      	beq.n	800bafe <UART_SetConfig+0x12be>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	2b07      	cmp	r3, #7
 800baba:	d01d      	beq.n	800baf8 <UART_SetConfig+0x12b8>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	2b08      	cmp	r3, #8
 800bac2:	d016      	beq.n	800baf2 <UART_SetConfig+0x12b2>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	2b09      	cmp	r3, #9
 800baca:	d00f      	beq.n	800baec <UART_SetConfig+0x12ac>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad0:	2b0a      	cmp	r3, #10
 800bad2:	d008      	beq.n	800bae6 <UART_SetConfig+0x12a6>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	2b0b      	cmp	r3, #11
 800bada:	d101      	bne.n	800bae0 <UART_SetConfig+0x12a0>
 800badc:	2380      	movs	r3, #128	; 0x80
 800bade:	e022      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800bae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bae4:	e01f      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800bae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baea:	e01c      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800baec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baf0:	e019      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800baf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baf6:	e016      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800baf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bafc:	e013      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800bafe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bb02:	e010      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800bb04:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bb08:	e00d      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800bb0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb0e:	e00a      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800bb10:	f241 5355 	movw	r3, #5461	; 0x1555
 800bb14:	e007      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800bb16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb1a:	e004      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800bb1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb20:	e001      	b.n	800bb26 <UART_SetConfig+0x12e6>
 800bb22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	6852      	ldr	r2, [r2, #4]
 800bb2a:	0852      	lsrs	r2, r2, #1
 800bb2c:	441a      	add	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	61fb      	str	r3, [r7, #28]
        break;
 800bb3a:	e002      	b.n	800bb42 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	76fb      	strb	r3, [r7, #27]
        break;
 800bb40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	2b0f      	cmp	r3, #15
 800bb46:	d908      	bls.n	800bb5a <UART_SetConfig+0x131a>
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb4e:	d204      	bcs.n	800bb5a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	69fa      	ldr	r2, [r7, #28]
 800bb56:	60da      	str	r2, [r3, #12]
 800bb58:	e001      	b.n	800bb5e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bb7a:	7efb      	ldrb	r3, [r7, #27]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3728      	adds	r7, #40	; 0x28
 800bb80:	46bd      	mov	sp, r7
 800bb82:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bb86:	bf00      	nop
 800bb88:	00f42400 	.word	0x00f42400
 800bb8c:	0001e848 	.word	0x0001e848
 800bb90:	0003d090 	.word	0x0003d090
 800bb94:	0007a120 	.word	0x0007a120
 800bb98:	000f4240 	.word	0x000f4240
 800bb9c:	00145855 	.word	0x00145855
 800bba0:	00186a00 	.word	0x00186a00
 800bba4:	001e8480 	.word	0x001e8480
 800bba8:	0028b0aa 	.word	0x0028b0aa
 800bbac:	003d0900 	.word	0x003d0900
 800bbb0:	007a1200 	.word	0x007a1200

0800bbb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00a      	beq.n	800bbde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	430a      	orrs	r2, r1
 800bbdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe2:	f003 0302 	and.w	r3, r3, #2
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00a      	beq.n	800bc00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	430a      	orrs	r2, r1
 800bbfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00a      	beq.n	800bc22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc26:	f003 0308 	and.w	r3, r3, #8
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00a      	beq.n	800bc44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	430a      	orrs	r2, r1
 800bc42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc48:	f003 0310 	and.w	r3, r3, #16
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00a      	beq.n	800bc66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	430a      	orrs	r2, r1
 800bc64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6a:	f003 0320 	and.w	r3, r3, #32
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	430a      	orrs	r2, r1
 800bc86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01a      	beq.n	800bcca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	430a      	orrs	r2, r1
 800bca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb2:	d10a      	bne.n	800bcca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00a      	beq.n	800bcec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	430a      	orrs	r2, r1
 800bcea:	605a      	str	r2, [r3, #4]
  }
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af02      	add	r7, sp, #8
 800bcfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bd08:	f7f8 fc5a 	bl	80045c0 <HAL_GetTick>
 800bd0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0308 	and.w	r3, r3, #8
 800bd18:	2b08      	cmp	r3, #8
 800bd1a:	d10e      	bne.n	800bd3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f82c 	bl	800bd88 <UART_WaitOnFlagUntilTimeout>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e022      	b.n	800bd80 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0304 	and.w	r3, r3, #4
 800bd44:	2b04      	cmp	r3, #4
 800bd46:	d10e      	bne.n	800bd66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f816 	bl	800bd88 <UART_WaitOnFlagUntilTimeout>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d001      	beq.n	800bd66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd62:	2303      	movs	r3, #3
 800bd64:	e00c      	b.n	800bd80 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2220      	movs	r2, #32
 800bd6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2220      	movs	r2, #32
 800bd72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	4613      	mov	r3, r2
 800bd96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd98:	e02c      	b.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda0:	d028      	beq.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bda2:	f7f8 fc0d 	bl	80045c0 <HAL_GetTick>
 800bda6:	4602      	mov	r2, r0
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d302      	bcc.n	800bdb8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d11d      	bne.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdc6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689a      	ldr	r2, [r3, #8]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f022 0201 	bic.w	r2, r2, #1
 800bdd6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2220      	movs	r2, #32
 800bddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2220      	movs	r2, #32
 800bde4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bdf0:	2303      	movs	r3, #3
 800bdf2:	e00f      	b.n	800be14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	69da      	ldr	r2, [r3, #28]
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	429a      	cmp	r2, r3
 800be02:	bf0c      	ite	eq
 800be04:	2301      	moveq	r3, #1
 800be06:	2300      	movne	r3, #0
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	461a      	mov	r2, r3
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d0c3      	beq.n	800bd9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be32:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	6812      	ldr	r2, [r2, #0]
 800be3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be42:	f023 0301 	bic.w	r3, r3, #1
 800be46:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2220      	movs	r2, #32
 800be4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800be56:	bf00      	nop
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b084      	sub	sp, #16
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f7fe fcd1 	bl	800a828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be86:	bf00      	nop
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bea4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2220      	movs	r2, #32
 800beaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7fe fcad 	bl	800a814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beba:	bf00      	nop
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bed0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bed8:	2b22      	cmp	r3, #34	; 0x22
 800beda:	d13b      	bne.n	800bf54 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bee4:	89bb      	ldrh	r3, [r7, #12]
 800bee6:	b2d9      	uxtb	r1, r3
 800bee8:	89fb      	ldrh	r3, [r7, #14]
 800beea:	b2da      	uxtb	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bef0:	400a      	ands	r2, r1
 800bef2:	b2d2      	uxtb	r2, r2
 800bef4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800befa:	1c5a      	adds	r2, r3, #1
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d122      	bne.n	800bf64 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bf2c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	689a      	ldr	r2, [r3, #8]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f022 0201 	bic.w	r2, r2, #1
 800bf3c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2220      	movs	r2, #32
 800bf42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7f7 fc6f 	bl	8003830 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf52:	e007      	b.n	800bf64 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	699a      	ldr	r2, [r3, #24]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f042 0208 	orr.w	r2, r2, #8
 800bf62:	619a      	str	r2, [r3, #24]
}
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf7a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf82:	2b22      	cmp	r3, #34	; 0x22
 800bf84:	d13b      	bne.n	800bffe <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf92:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800bf94:	89ba      	ldrh	r2, [r7, #12]
 800bf96:	89fb      	ldrh	r3, [r7, #14]
 800bf98:	4013      	ands	r3, r2
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfa4:	1c9a      	adds	r2, r3, #2
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d122      	bne.n	800c00e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bfd6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689a      	ldr	r2, [r3, #8]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f022 0201 	bic.w	r2, r2, #1
 800bfe6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2220      	movs	r2, #32
 800bfec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7f7 fc1a 	bl	8003830 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bffc:	e007      	b.n	800c00e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	699a      	ldr	r2, [r3, #24]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f042 0208 	orr.w	r2, r2, #8
 800c00c:	619a      	str	r2, [r3, #24]
}
 800c00e:	bf00      	nop
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
	...

0800c018 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c026:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c02e:	2b22      	cmp	r3, #34	; 0x22
 800c030:	d168      	bne.n	800c104 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c038:	81fb      	strh	r3, [r7, #14]
 800c03a:	e03f      	b.n	800c0bc <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c042:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c044:	893b      	ldrh	r3, [r7, #8]
 800c046:	b2d9      	uxtb	r1, r3
 800c048:	89bb      	ldrh	r3, [r7, #12]
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c050:	400a      	ands	r2, r1
 800c052:	b2d2      	uxtb	r2, r2
 800c054:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c066:	b29b      	uxth	r3, r3
 800c068:	3b01      	subs	r3, #1
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c078:	b29b      	uxth	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d11b      	bne.n	800c0b6 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c08c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	6812      	ldr	r2, [r2, #0]
 800c098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c09c:	f023 0301 	bic.w	r3, r3, #1
 800c0a0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7f7 fbbd 	bl	8003830 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c0b6:	89fb      	ldrh	r3, [r7, #14]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	81fb      	strh	r3, [r7, #14]
 800c0bc:	89fb      	ldrh	r3, [r7, #14]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1bc      	bne.n	800c03c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0c8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c0ca:	897b      	ldrh	r3, [r7, #10]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d021      	beq.n	800c114 <UART_RxISR_8BIT_FIFOEN+0xfc>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0d6:	897a      	ldrh	r2, [r7, #10]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d21b      	bcs.n	800c114 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689a      	ldr	r2, [r3, #8]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c0ea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a0b      	ldr	r2, [pc, #44]	; (800c11c <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c0f0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f042 0220 	orr.w	r2, r2, #32
 800c100:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c102:	e007      	b.n	800c114 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	699a      	ldr	r2, [r3, #24]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f042 0208 	orr.w	r2, r2, #8
 800c112:	619a      	str	r2, [r3, #24]
}
 800c114:	bf00      	nop
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	0800bec3 	.word	0x0800bec3

0800c120 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c12e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c136:	2b22      	cmp	r3, #34	; 0x22
 800c138:	d168      	bne.n	800c20c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c140:	82fb      	strh	r3, [r7, #22]
 800c142:	e03f      	b.n	800c1c4 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c150:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c152:	8a3a      	ldrh	r2, [r7, #16]
 800c154:	8abb      	ldrh	r3, [r7, #20]
 800c156:	4013      	ands	r3, r2
 800c158:	b29a      	uxth	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c162:	1c9a      	adds	r2, r3, #2
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c16e:	b29b      	uxth	r3, r3
 800c170:	3b01      	subs	r3, #1
 800c172:	b29a      	uxth	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c180:	b29b      	uxth	r3, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d11b      	bne.n	800c1be <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c194:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	6812      	ldr	r2, [r2, #0]
 800c1a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1a4:	f023 0301 	bic.w	r3, r3, #1
 800c1a8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2220      	movs	r2, #32
 800c1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7f7 fb39 	bl	8003830 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c1be:	8afb      	ldrh	r3, [r7, #22]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	82fb      	strh	r3, [r7, #22]
 800c1c4:	8afb      	ldrh	r3, [r7, #22]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1bc      	bne.n	800c144 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1d0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c1d2:	8a7b      	ldrh	r3, [r7, #18]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d021      	beq.n	800c21c <UART_RxISR_16BIT_FIFOEN+0xfc>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1de:	8a7a      	ldrh	r2, [r7, #18]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d21b      	bcs.n	800c21c <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689a      	ldr	r2, [r3, #8]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c1f2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a0b      	ldr	r2, [pc, #44]	; (800c224 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c1f8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f042 0220 	orr.w	r2, r2, #32
 800c208:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c20a:	e007      	b.n	800c21c <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	699a      	ldr	r2, [r3, #24]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f042 0208 	orr.w	r2, r2, #8
 800c21a:	619a      	str	r2, [r3, #24]
}
 800c21c:	bf00      	nop
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	0800bf6d 	.word	0x0800bf6d

0800c228 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c230:	bf00      	nop
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c272:	2b01      	cmp	r3, #1
 800c274:	d101      	bne.n	800c27a <HAL_UARTEx_DisableFifoMode+0x16>
 800c276:	2302      	movs	r3, #2
 800c278:	e027      	b.n	800c2ca <HAL_UARTEx_DisableFifoMode+0x66>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2224      	movs	r2, #36	; 0x24
 800c286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f022 0201 	bic.w	r2, r2, #1
 800c2a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c2a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2220      	movs	r2, #32
 800c2bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
 800c2de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d101      	bne.n	800c2ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2ea:	2302      	movs	r3, #2
 800c2ec:	e02d      	b.n	800c34a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2224      	movs	r2, #36	; 0x24
 800c2fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f022 0201 	bic.w	r2, r2, #1
 800c314:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	430a      	orrs	r2, r1
 800c328:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f850 	bl	800c3d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2220      	movs	r2, #32
 800c33c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c362:	2b01      	cmp	r3, #1
 800c364:	d101      	bne.n	800c36a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c366:	2302      	movs	r3, #2
 800c368:	e02d      	b.n	800c3c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2224      	movs	r2, #36	; 0x24
 800c376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f022 0201 	bic.w	r2, r2, #1
 800c390:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f812 	bl	800c3d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
	...

0800c3d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b089      	sub	sp, #36	; 0x24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c3d8:	4a2f      	ldr	r2, [pc, #188]	; (800c498 <UARTEx_SetNbDataToProcess+0xc8>)
 800c3da:	f107 0314 	add.w	r3, r7, #20
 800c3de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c3e2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c3e6:	4a2d      	ldr	r2, [pc, #180]	; (800c49c <UARTEx_SetNbDataToProcess+0xcc>)
 800c3e8:	f107 030c 	add.w	r3, r7, #12
 800c3ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c3f0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d108      	bne.n	800c40e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c40c:	e03d      	b.n	800c48a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c40e:	2308      	movs	r3, #8
 800c410:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c412:	2308      	movs	r3, #8
 800c414:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	0e5b      	lsrs	r3, r3, #25
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	f003 0307 	and.w	r3, r3, #7
 800c424:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	0f5b      	lsrs	r3, r3, #29
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	f003 0307 	and.w	r3, r3, #7
 800c434:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c436:	7fbb      	ldrb	r3, [r7, #30]
 800c438:	7f3a      	ldrb	r2, [r7, #28]
 800c43a:	f107 0120 	add.w	r1, r7, #32
 800c43e:	440a      	add	r2, r1
 800c440:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c444:	fb02 f303 	mul.w	r3, r2, r3
 800c448:	7f3a      	ldrb	r2, [r7, #28]
 800c44a:	f107 0120 	add.w	r1, r7, #32
 800c44e:	440a      	add	r2, r1
 800c450:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c454:	fb93 f3f2 	sdiv	r3, r3, r2
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c460:	7ffb      	ldrb	r3, [r7, #31]
 800c462:	7f7a      	ldrb	r2, [r7, #29]
 800c464:	f107 0120 	add.w	r1, r7, #32
 800c468:	440a      	add	r2, r1
 800c46a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c46e:	fb02 f303 	mul.w	r3, r2, r3
 800c472:	7f7a      	ldrb	r2, [r7, #29]
 800c474:	f107 0120 	add.w	r1, r7, #32
 800c478:	440a      	add	r2, r1
 800c47a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c47e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c482:	b29a      	uxth	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c48a:	bf00      	nop
 800c48c:	3724      	adds	r7, #36	; 0x24
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	0800eb10 	.word	0x0800eb10
 800c49c:	0800eb18 	.word	0x0800eb18

0800c4a0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	ed93 7a06 	vldr	s14, [r3, #24]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	edd3 7a07 	vldr	s15, [r3, #28]
 800c4b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	edd3 7a08 	vldr	s15, [r3, #32]
 800c4c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	edd3 7a06 	vldr	s15, [r3, #24]
 800c4d0:	eeb1 7a67 	vneg.f32	s14, s15
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c4da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c4de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a1a      	ldr	r2, [r3, #32]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d006      	beq.n	800c504 <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	330c      	adds	r3, #12
 800c4fa:	220c      	movs	r2, #12
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fa7f 	bl	800ca02 <memset>
  }

}
 800c504:	bf00      	nop
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <arm_pid_reset_f32>:
* \par Description:
* The function resets the state buffer to zeros.
*/
void arm_pid_reset_f32(
  arm_pid_instance_f32 * S)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]

  /* Clear the state buffer.  The size will be always 3 samples */
  memset(S->state, 0, 3U * sizeof(float32_t));
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	330c      	adds	r3, #12
 800c518:	220c      	movs	r2, #12
 800c51a:	2100      	movs	r1, #0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 fa70 	bl	800ca02 <memset>
}
 800c522:	bf00      	nop
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <arm_sin_cos_f32>:

void arm_sin_cos_f32(
                      float32_t theta,
                      float32_t * pSinVal,
                      float32_t * pCosVal)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b091      	sub	sp, #68	; 0x44
 800c530:	af00      	add	r7, sp, #0
 800c532:	ed87 0a03 	vstr	s0, [r7, #12]
 800c536:	60b8      	str	r0, [r7, #8]
 800c538:	6079      	str	r1, [r7, #4]
    float32_t f1, f2, d1, d2;                        /* Two nearest output values */
    float32_t findex, Dn, Df, temp;

    /* input x is in degrees */
    /* Scale the input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
    in = theta * 0.00277777777778f;
 800c53a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c53e:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800c810 <arm_sin_cos_f32+0x2e4>
 800c542:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c546:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if (in < 0.0f)
 800c54a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c54e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c556:	d505      	bpl.n	800c564 <arm_sin_cos_f32+0x38>
    {
        in = -in;
 800c558:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c55c:	eef1 7a67 	vneg.f32	s15, s15
 800c560:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    in = in - (int32_t)in;
 800c564:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c56c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c570:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c574:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c578:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculation of index of the table */
    findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800c57c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c580:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800c814 <arm_sin_cos_f32+0x2e8>
 800c584:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c588:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    indexS = ((uint16_t)findex) & 0x1ff;
 800c58c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c594:	ee17 3a90 	vmov	r3, s15
 800c598:	b29b      	uxth	r3, r3
 800c59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c59e:	86fb      	strh	r3, [r7, #54]	; 0x36
    indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
 800c5a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5a2:	3380      	adds	r3, #128	; 0x80
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5aa:	86bb      	strh	r3, [r7, #52]	; 0x34

    /* fractional value calculation */
    fract = findex - (float32_t) indexS;
 800c5ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c5ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexC+0];
 800c5c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c5c4:	4a94      	ldr	r2, [pc, #592]	; (800c818 <arm_sin_cos_f32+0x2ec>)
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexC+1];
 800c5ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	4a91      	ldr	r2, [pc, #580]	; (800c818 <arm_sin_cos_f32+0x2ec>)
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = -sinTable_f32[indexS+0];
 800c5dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5de:	4a8e      	ldr	r2, [pc, #568]	; (800c818 <arm_sin_cos_f32+0x2ec>)
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	edd3 7a00 	vldr	s15, [r3]
 800c5e8:	eef1 7a67 	vneg.f32	s15, s15
 800c5ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    d2 = -sinTable_f32[indexS+1];
 800c5f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	4a88      	ldr	r2, [pc, #544]	; (800c818 <arm_sin_cos_f32+0x2ec>)
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	edd3 7a00 	vldr	s15, [r3]
 800c5fe:	eef1 7a67 	vneg.f32	s15, s15
 800c602:	edc7 7a08 	vstr	s15, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 800c606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c60a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c60e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c612:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c61a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800c61e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c62a:	edc7 7a07 	vstr	s15, [r7, #28]

    Dn = 0.0122718463030f; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
 800c62e:	4b7b      	ldr	r3, [pc, #492]	; (800c81c <arm_sin_cos_f32+0x2f0>)
 800c630:	61bb      	str	r3, [r7, #24]
    Df = f2 - f1;          // delta between the values of the functions
 800c632:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c636:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c63a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c63e:	edc7 7a05 	vstr	s15, [r7, #20]

    temp = Dn *(d1 + d2) - 2 * Df;
 800c642:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c646:	edd7 7a08 	vldr	s15, [r7, #32]
 800c64a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c64e:	edd7 7a06 	vldr	s15, [r7, #24]
 800c652:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c656:	edd7 7a05 	vldr	s15, [r7, #20]
 800c65a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c65e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c662:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 800c666:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c66a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c66e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c672:	edd7 7a05 	vldr	s15, [r7, #20]
 800c676:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c67a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c67e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c682:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800c686:	edd7 7a08 	vldr	s15, [r7, #32]
 800c68a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c68e:	edd7 7a06 	vldr	s15, [r7, #24]
 800c692:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c696:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c69a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c69e:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + d1 * Dn;
 800c6a2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c6a6:	edd7 7a07 	vldr	s15, [r7, #28]
 800c6aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6ae:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c6b2:	edd7 7a06 	vldr	s15, [r7, #24]
 800c6b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6be:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of cosine value */
    *pCosVal = fract * temp + f1;
 800c6c2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c6c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800c6ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c6d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	edc3 7a00 	vstr	s15, [r3]

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexS+0];
 800c6dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c6de:	4a4e      	ldr	r2, [pc, #312]	; (800c818 <arm_sin_cos_f32+0x2ec>)
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexS+1];
 800c6e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	4a4a      	ldr	r2, [pc, #296]	; (800c818 <arm_sin_cos_f32+0x2ec>)
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = sinTable_f32[indexC+0];
 800c6f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c6f8:	4a47      	ldr	r2, [pc, #284]	; (800c818 <arm_sin_cos_f32+0x2ec>)
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	627b      	str	r3, [r7, #36]	; 0x24
    d2 = sinTable_f32[indexC+1];
 800c702:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c704:	3301      	adds	r3, #1
 800c706:	4a44      	ldr	r2, [pc, #272]	; (800c818 <arm_sin_cos_f32+0x2ec>)
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	4413      	add	r3, r2
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	623b      	str	r3, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 800c710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c714:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c71c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c720:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c724:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800c728:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c72c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c730:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c734:	edc7 7a07 	vstr	s15, [r7, #28]

    Df = f2 - f1; // delta between the values of the functions
 800c738:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c73c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c740:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c744:	edc7 7a05 	vstr	s15, [r7, #20]
    temp = Dn*(d1 + d2) - 2*Df;
 800c748:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c74c:	edd7 7a08 	vldr	s15, [r7, #32]
 800c750:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c754:	edd7 7a06 	vldr	s15, [r7, #24]
 800c758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c75c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c760:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c764:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c768:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + (3*Df - (d2 + 2*d1)*Dn);
 800c76c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c770:	edd7 7a07 	vldr	s15, [r7, #28]
 800c774:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c778:	edd7 7a05 	vldr	s15, [r7, #20]
 800c77c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c780:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c784:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c788:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800c78c:	edd7 7a08 	vldr	s15, [r7, #32]
 800c790:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c794:	edd7 7a06 	vldr	s15, [r7, #24]
 800c798:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c79c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c7a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7a4:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + d1*Dn;
 800c7a8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c7ac:	edd7 7a07 	vldr	s15, [r7, #28]
 800c7b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7b4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c7b8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c7bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7c4:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of sine value */
    *pSinVal = fract*temp + f1;
 800c7c8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c7cc:	edd7 7a07 	vldr	s15, [r7, #28]
 800c7d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c7d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	edc3 7a00 	vstr	s15, [r3]

    if (theta < 0.0f)
 800c7e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ee:	d400      	bmi.n	800c7f2 <arm_sin_cos_f32+0x2c6>
    {
        *pSinVal = -*pSinVal;
    }
}
 800c7f0:	e007      	b.n	800c802 <arm_sin_cos_f32+0x2d6>
        *pSinVal = -*pSinVal;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	edd3 7a00 	vldr	s15, [r3]
 800c7f8:	eef1 7a67 	vneg.f32	s15, s15
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	edc3 7a00 	vstr	s15, [r3]
}
 800c802:	bf00      	nop
 800c804:	3744      	adds	r7, #68	; 0x44
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	3b360b61 	.word	0x3b360b61
 800c814:	44000000 	.word	0x44000000
 800c818:	0800eb38 	.word	0x0800eb38
 800c81c:	3c490fdb 	.word	0x3c490fdb

0800c820 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800c820:	b480      	push	{r7}
 800c822:	b08b      	sub	sp, #44	; 0x2c
 800c824:	af00      	add	r7, sp, #0
 800c826:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 800c82a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c82e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c836:	d50a      	bpl.n	800c84e <arm_sin_f32+0x2e>
 800c838:	edd7 7a01 	vldr	s15, [r7, #4]
 800c83c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800c928 <arm_sin_f32+0x108>
 800c840:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c848:	db01      	blt.n	800c84e <arm_sin_f32+0x2e>
     return x;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	e062      	b.n	800c914 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800c84e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c852:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c92c <arm_sin_f32+0x10c>
 800c856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c85a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800c85e:	edd7 7a08 	vldr	s15, [r7, #32]
 800c862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c866:	ee17 3a90 	vmov	r3, s15
 800c86a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 800c86c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c878:	d502      	bpl.n	800c880 <arm_sin_f32+0x60>
  {
    n--;
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	3b01      	subs	r3, #1
 800c87e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800c880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c882:	ee07 3a90 	vmov	s15, r3
 800c886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c88a:	ed97 7a08 	vldr	s14, [r7, #32]
 800c88e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c892:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800c896:	edd7 7a08 	vldr	s15, [r7, #32]
 800c89a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800c930 <arm_sin_f32+0x110>
 800c89e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8a2:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 800c8a6:	edd7 7a07 	vldr	s15, [r7, #28]
 800c8aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8ae:	ee17 3a90 	vmov	r3, s15
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b8:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800c8ba:	8b7b      	ldrh	r3, [r7, #26]
 800c8bc:	ee07 3a90 	vmov	s15, r3
 800c8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8c4:	ed97 7a07 	vldr	s14, [r7, #28]
 800c8c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8cc:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800c8d0:	8b7b      	ldrh	r3, [r7, #26]
 800c8d2:	4a18      	ldr	r2, [pc, #96]	; (800c934 <arm_sin_f32+0x114>)
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800c8dc:	8b7b      	ldrh	r3, [r7, #26]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	4a14      	ldr	r2, [pc, #80]	; (800c934 <arm_sin_f32+0x114>)
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4413      	add	r3, r2
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800c8ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8ee:	edd7 7a05 	vldr	s15, [r7, #20]
 800c8f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800c8fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8fe:	edd7 6a05 	vldr	s13, [r7, #20]
 800c902:	edd7 7a03 	vldr	s15, [r7, #12]
 800c906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c90a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c90e:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	ee07 3a90 	vmov	s15, r3
}
 800c918:	eeb0 0a67 	vmov.f32	s0, s15
 800c91c:	372c      	adds	r7, #44	; 0x2c
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	b44c02cd 	.word	0xb44c02cd
 800c92c:	3e22f983 	.word	0x3e22f983
 800c930:	44000000 	.word	0x44000000
 800c934:	0800eb38 	.word	0x0800eb38

0800c938 <__errno>:
 800c938:	4b01      	ldr	r3, [pc, #4]	; (800c940 <__errno+0x8>)
 800c93a:	6818      	ldr	r0, [r3, #0]
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	20000018 	.word	0x20000018

0800c944 <__libc_init_array>:
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	4e0d      	ldr	r6, [pc, #52]	; (800c97c <__libc_init_array+0x38>)
 800c948:	4c0d      	ldr	r4, [pc, #52]	; (800c980 <__libc_init_array+0x3c>)
 800c94a:	1ba4      	subs	r4, r4, r6
 800c94c:	10a4      	asrs	r4, r4, #2
 800c94e:	2500      	movs	r5, #0
 800c950:	42a5      	cmp	r5, r4
 800c952:	d109      	bne.n	800c968 <__libc_init_array+0x24>
 800c954:	4e0b      	ldr	r6, [pc, #44]	; (800c984 <__libc_init_array+0x40>)
 800c956:	4c0c      	ldr	r4, [pc, #48]	; (800c988 <__libc_init_array+0x44>)
 800c958:	f002 f8a6 	bl	800eaa8 <_init>
 800c95c:	1ba4      	subs	r4, r4, r6
 800c95e:	10a4      	asrs	r4, r4, #2
 800c960:	2500      	movs	r5, #0
 800c962:	42a5      	cmp	r5, r4
 800c964:	d105      	bne.n	800c972 <__libc_init_array+0x2e>
 800c966:	bd70      	pop	{r4, r5, r6, pc}
 800c968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c96c:	4798      	blx	r3
 800c96e:	3501      	adds	r5, #1
 800c970:	e7ee      	b.n	800c950 <__libc_init_array+0xc>
 800c972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c976:	4798      	blx	r3
 800c978:	3501      	adds	r5, #1
 800c97a:	e7f2      	b.n	800c962 <__libc_init_array+0x1e>
 800c97c:	0800f63c 	.word	0x0800f63c
 800c980:	0800f63c 	.word	0x0800f63c
 800c984:	0800f63c 	.word	0x0800f63c
 800c988:	0800f640 	.word	0x0800f640

0800c98c <__locale_ctype_ptr>:
 800c98c:	4b04      	ldr	r3, [pc, #16]	; (800c9a0 <__locale_ctype_ptr+0x14>)
 800c98e:	4a05      	ldr	r2, [pc, #20]	; (800c9a4 <__locale_ctype_ptr+0x18>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	6a1b      	ldr	r3, [r3, #32]
 800c994:	2b00      	cmp	r3, #0
 800c996:	bf08      	it	eq
 800c998:	4613      	moveq	r3, r2
 800c99a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c99e:	4770      	bx	lr
 800c9a0:	20000018 	.word	0x20000018
 800c9a4:	2000007c 	.word	0x2000007c

0800c9a8 <malloc>:
 800c9a8:	4b02      	ldr	r3, [pc, #8]	; (800c9b4 <malloc+0xc>)
 800c9aa:	4601      	mov	r1, r0
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	f000 b87f 	b.w	800cab0 <_malloc_r>
 800c9b2:	bf00      	nop
 800c9b4:	20000018 	.word	0x20000018

0800c9b8 <free>:
 800c9b8:	4b02      	ldr	r3, [pc, #8]	; (800c9c4 <free+0xc>)
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	6818      	ldr	r0, [r3, #0]
 800c9be:	f000 b829 	b.w	800ca14 <_free_r>
 800c9c2:	bf00      	nop
 800c9c4:	20000018 	.word	0x20000018

0800c9c8 <__ascii_mbtowc>:
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	b901      	cbnz	r1, 800c9ce <__ascii_mbtowc+0x6>
 800c9cc:	a901      	add	r1, sp, #4
 800c9ce:	b142      	cbz	r2, 800c9e2 <__ascii_mbtowc+0x1a>
 800c9d0:	b14b      	cbz	r3, 800c9e6 <__ascii_mbtowc+0x1e>
 800c9d2:	7813      	ldrb	r3, [r2, #0]
 800c9d4:	600b      	str	r3, [r1, #0]
 800c9d6:	7812      	ldrb	r2, [r2, #0]
 800c9d8:	1c10      	adds	r0, r2, #0
 800c9da:	bf18      	it	ne
 800c9dc:	2001      	movne	r0, #1
 800c9de:	b002      	add	sp, #8
 800c9e0:	4770      	bx	lr
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	e7fb      	b.n	800c9de <__ascii_mbtowc+0x16>
 800c9e6:	f06f 0001 	mvn.w	r0, #1
 800c9ea:	e7f8      	b.n	800c9de <__ascii_mbtowc+0x16>

0800c9ec <memcpy>:
 800c9ec:	b510      	push	{r4, lr}
 800c9ee:	1e43      	subs	r3, r0, #1
 800c9f0:	440a      	add	r2, r1
 800c9f2:	4291      	cmp	r1, r2
 800c9f4:	d100      	bne.n	800c9f8 <memcpy+0xc>
 800c9f6:	bd10      	pop	{r4, pc}
 800c9f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca00:	e7f7      	b.n	800c9f2 <memcpy+0x6>

0800ca02 <memset>:
 800ca02:	4402      	add	r2, r0
 800ca04:	4603      	mov	r3, r0
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d100      	bne.n	800ca0c <memset+0xa>
 800ca0a:	4770      	bx	lr
 800ca0c:	f803 1b01 	strb.w	r1, [r3], #1
 800ca10:	e7f9      	b.n	800ca06 <memset+0x4>
	...

0800ca14 <_free_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4605      	mov	r5, r0
 800ca18:	2900      	cmp	r1, #0
 800ca1a:	d045      	beq.n	800caa8 <_free_r+0x94>
 800ca1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca20:	1f0c      	subs	r4, r1, #4
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	bfb8      	it	lt
 800ca26:	18e4      	addlt	r4, r4, r3
 800ca28:	f001 fa1f 	bl	800de6a <__malloc_lock>
 800ca2c:	4a1f      	ldr	r2, [pc, #124]	; (800caac <_free_r+0x98>)
 800ca2e:	6813      	ldr	r3, [r2, #0]
 800ca30:	4610      	mov	r0, r2
 800ca32:	b933      	cbnz	r3, 800ca42 <_free_r+0x2e>
 800ca34:	6063      	str	r3, [r4, #4]
 800ca36:	6014      	str	r4, [r2, #0]
 800ca38:	4628      	mov	r0, r5
 800ca3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca3e:	f001 ba15 	b.w	800de6c <__malloc_unlock>
 800ca42:	42a3      	cmp	r3, r4
 800ca44:	d90c      	bls.n	800ca60 <_free_r+0x4c>
 800ca46:	6821      	ldr	r1, [r4, #0]
 800ca48:	1862      	adds	r2, r4, r1
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	bf04      	itt	eq
 800ca4e:	681a      	ldreq	r2, [r3, #0]
 800ca50:	685b      	ldreq	r3, [r3, #4]
 800ca52:	6063      	str	r3, [r4, #4]
 800ca54:	bf04      	itt	eq
 800ca56:	1852      	addeq	r2, r2, r1
 800ca58:	6022      	streq	r2, [r4, #0]
 800ca5a:	6004      	str	r4, [r0, #0]
 800ca5c:	e7ec      	b.n	800ca38 <_free_r+0x24>
 800ca5e:	4613      	mov	r3, r2
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	b10a      	cbz	r2, 800ca68 <_free_r+0x54>
 800ca64:	42a2      	cmp	r2, r4
 800ca66:	d9fa      	bls.n	800ca5e <_free_r+0x4a>
 800ca68:	6819      	ldr	r1, [r3, #0]
 800ca6a:	1858      	adds	r0, r3, r1
 800ca6c:	42a0      	cmp	r0, r4
 800ca6e:	d10b      	bne.n	800ca88 <_free_r+0x74>
 800ca70:	6820      	ldr	r0, [r4, #0]
 800ca72:	4401      	add	r1, r0
 800ca74:	1858      	adds	r0, r3, r1
 800ca76:	4282      	cmp	r2, r0
 800ca78:	6019      	str	r1, [r3, #0]
 800ca7a:	d1dd      	bne.n	800ca38 <_free_r+0x24>
 800ca7c:	6810      	ldr	r0, [r2, #0]
 800ca7e:	6852      	ldr	r2, [r2, #4]
 800ca80:	605a      	str	r2, [r3, #4]
 800ca82:	4401      	add	r1, r0
 800ca84:	6019      	str	r1, [r3, #0]
 800ca86:	e7d7      	b.n	800ca38 <_free_r+0x24>
 800ca88:	d902      	bls.n	800ca90 <_free_r+0x7c>
 800ca8a:	230c      	movs	r3, #12
 800ca8c:	602b      	str	r3, [r5, #0]
 800ca8e:	e7d3      	b.n	800ca38 <_free_r+0x24>
 800ca90:	6820      	ldr	r0, [r4, #0]
 800ca92:	1821      	adds	r1, r4, r0
 800ca94:	428a      	cmp	r2, r1
 800ca96:	bf04      	itt	eq
 800ca98:	6811      	ldreq	r1, [r2, #0]
 800ca9a:	6852      	ldreq	r2, [r2, #4]
 800ca9c:	6062      	str	r2, [r4, #4]
 800ca9e:	bf04      	itt	eq
 800caa0:	1809      	addeq	r1, r1, r0
 800caa2:	6021      	streq	r1, [r4, #0]
 800caa4:	605c      	str	r4, [r3, #4]
 800caa6:	e7c7      	b.n	800ca38 <_free_r+0x24>
 800caa8:	bd38      	pop	{r3, r4, r5, pc}
 800caaa:	bf00      	nop
 800caac:	20000218 	.word	0x20000218

0800cab0 <_malloc_r>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	1ccd      	adds	r5, r1, #3
 800cab4:	f025 0503 	bic.w	r5, r5, #3
 800cab8:	3508      	adds	r5, #8
 800caba:	2d0c      	cmp	r5, #12
 800cabc:	bf38      	it	cc
 800cabe:	250c      	movcc	r5, #12
 800cac0:	2d00      	cmp	r5, #0
 800cac2:	4606      	mov	r6, r0
 800cac4:	db01      	blt.n	800caca <_malloc_r+0x1a>
 800cac6:	42a9      	cmp	r1, r5
 800cac8:	d903      	bls.n	800cad2 <_malloc_r+0x22>
 800caca:	230c      	movs	r3, #12
 800cacc:	6033      	str	r3, [r6, #0]
 800cace:	2000      	movs	r0, #0
 800cad0:	bd70      	pop	{r4, r5, r6, pc}
 800cad2:	f001 f9ca 	bl	800de6a <__malloc_lock>
 800cad6:	4a21      	ldr	r2, [pc, #132]	; (800cb5c <_malloc_r+0xac>)
 800cad8:	6814      	ldr	r4, [r2, #0]
 800cada:	4621      	mov	r1, r4
 800cadc:	b991      	cbnz	r1, 800cb04 <_malloc_r+0x54>
 800cade:	4c20      	ldr	r4, [pc, #128]	; (800cb60 <_malloc_r+0xb0>)
 800cae0:	6823      	ldr	r3, [r4, #0]
 800cae2:	b91b      	cbnz	r3, 800caec <_malloc_r+0x3c>
 800cae4:	4630      	mov	r0, r6
 800cae6:	f000 f845 	bl	800cb74 <_sbrk_r>
 800caea:	6020      	str	r0, [r4, #0]
 800caec:	4629      	mov	r1, r5
 800caee:	4630      	mov	r0, r6
 800caf0:	f000 f840 	bl	800cb74 <_sbrk_r>
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	d124      	bne.n	800cb42 <_malloc_r+0x92>
 800caf8:	230c      	movs	r3, #12
 800cafa:	6033      	str	r3, [r6, #0]
 800cafc:	4630      	mov	r0, r6
 800cafe:	f001 f9b5 	bl	800de6c <__malloc_unlock>
 800cb02:	e7e4      	b.n	800cace <_malloc_r+0x1e>
 800cb04:	680b      	ldr	r3, [r1, #0]
 800cb06:	1b5b      	subs	r3, r3, r5
 800cb08:	d418      	bmi.n	800cb3c <_malloc_r+0x8c>
 800cb0a:	2b0b      	cmp	r3, #11
 800cb0c:	d90f      	bls.n	800cb2e <_malloc_r+0x7e>
 800cb0e:	600b      	str	r3, [r1, #0]
 800cb10:	50cd      	str	r5, [r1, r3]
 800cb12:	18cc      	adds	r4, r1, r3
 800cb14:	4630      	mov	r0, r6
 800cb16:	f001 f9a9 	bl	800de6c <__malloc_unlock>
 800cb1a:	f104 000b 	add.w	r0, r4, #11
 800cb1e:	1d23      	adds	r3, r4, #4
 800cb20:	f020 0007 	bic.w	r0, r0, #7
 800cb24:	1ac3      	subs	r3, r0, r3
 800cb26:	d0d3      	beq.n	800cad0 <_malloc_r+0x20>
 800cb28:	425a      	negs	r2, r3
 800cb2a:	50e2      	str	r2, [r4, r3]
 800cb2c:	e7d0      	b.n	800cad0 <_malloc_r+0x20>
 800cb2e:	428c      	cmp	r4, r1
 800cb30:	684b      	ldr	r3, [r1, #4]
 800cb32:	bf16      	itet	ne
 800cb34:	6063      	strne	r3, [r4, #4]
 800cb36:	6013      	streq	r3, [r2, #0]
 800cb38:	460c      	movne	r4, r1
 800cb3a:	e7eb      	b.n	800cb14 <_malloc_r+0x64>
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	6849      	ldr	r1, [r1, #4]
 800cb40:	e7cc      	b.n	800cadc <_malloc_r+0x2c>
 800cb42:	1cc4      	adds	r4, r0, #3
 800cb44:	f024 0403 	bic.w	r4, r4, #3
 800cb48:	42a0      	cmp	r0, r4
 800cb4a:	d005      	beq.n	800cb58 <_malloc_r+0xa8>
 800cb4c:	1a21      	subs	r1, r4, r0
 800cb4e:	4630      	mov	r0, r6
 800cb50:	f000 f810 	bl	800cb74 <_sbrk_r>
 800cb54:	3001      	adds	r0, #1
 800cb56:	d0cf      	beq.n	800caf8 <_malloc_r+0x48>
 800cb58:	6025      	str	r5, [r4, #0]
 800cb5a:	e7db      	b.n	800cb14 <_malloc_r+0x64>
 800cb5c:	20000218 	.word	0x20000218
 800cb60:	2000021c 	.word	0x2000021c

0800cb64 <realloc>:
 800cb64:	4b02      	ldr	r3, [pc, #8]	; (800cb70 <realloc+0xc>)
 800cb66:	460a      	mov	r2, r1
 800cb68:	4601      	mov	r1, r0
 800cb6a:	6818      	ldr	r0, [r3, #0]
 800cb6c:	f001 bd8b 	b.w	800e686 <_realloc_r>
 800cb70:	20000018 	.word	0x20000018

0800cb74 <_sbrk_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4c06      	ldr	r4, [pc, #24]	; (800cb90 <_sbrk_r+0x1c>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	6023      	str	r3, [r4, #0]
 800cb80:	f7f7 f8b4 	bl	8003cec <_sbrk>
 800cb84:	1c43      	adds	r3, r0, #1
 800cb86:	d102      	bne.n	800cb8e <_sbrk_r+0x1a>
 800cb88:	6823      	ldr	r3, [r4, #0]
 800cb8a:	b103      	cbz	r3, 800cb8e <_sbrk_r+0x1a>
 800cb8c:	602b      	str	r3, [r5, #0]
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	200007ac 	.word	0x200007ac

0800cb94 <strncmp>:
 800cb94:	b510      	push	{r4, lr}
 800cb96:	b16a      	cbz	r2, 800cbb4 <strncmp+0x20>
 800cb98:	3901      	subs	r1, #1
 800cb9a:	1884      	adds	r4, r0, r2
 800cb9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cba0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d103      	bne.n	800cbb0 <strncmp+0x1c>
 800cba8:	42a0      	cmp	r0, r4
 800cbaa:	d001      	beq.n	800cbb0 <strncmp+0x1c>
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1f5      	bne.n	800cb9c <strncmp+0x8>
 800cbb0:	1a98      	subs	r0, r3, r2
 800cbb2:	bd10      	pop	{r4, pc}
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	e7fc      	b.n	800cbb2 <strncmp+0x1e>

0800cbb8 <sulp>:
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	4604      	mov	r4, r0
 800cbbc:	460d      	mov	r5, r1
 800cbbe:	ec45 4b10 	vmov	d0, r4, r5
 800cbc2:	4616      	mov	r6, r2
 800cbc4:	f001 fc1e 	bl	800e404 <__ulp>
 800cbc8:	ec51 0b10 	vmov	r0, r1, d0
 800cbcc:	b17e      	cbz	r6, 800cbee <sulp+0x36>
 800cbce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cbd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	dd09      	ble.n	800cbee <sulp+0x36>
 800cbda:	051b      	lsls	r3, r3, #20
 800cbdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cbe0:	2400      	movs	r4, #0
 800cbe2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cbe6:	4622      	mov	r2, r4
 800cbe8:	462b      	mov	r3, r5
 800cbea:	f7f3 fce3 	bl	80005b4 <__aeabi_dmul>
 800cbee:	bd70      	pop	{r4, r5, r6, pc}

0800cbf0 <_strtod_l>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	461f      	mov	r7, r3
 800cbf6:	b0a1      	sub	sp, #132	; 0x84
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4681      	mov	r9, r0
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	460e      	mov	r6, r1
 800cc00:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc02:	931c      	str	r3, [sp, #112]	; 0x70
 800cc04:	f001 f92f 	bl	800de66 <__localeconv_l>
 800cc08:	4680      	mov	r8, r0
 800cc0a:	6800      	ldr	r0, [r0, #0]
 800cc0c:	f7f3 fb0e 	bl	800022c <strlen>
 800cc10:	f04f 0a00 	mov.w	sl, #0
 800cc14:	4604      	mov	r4, r0
 800cc16:	f04f 0b00 	mov.w	fp, #0
 800cc1a:	961b      	str	r6, [sp, #108]	; 0x6c
 800cc1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc1e:	781a      	ldrb	r2, [r3, #0]
 800cc20:	2a0d      	cmp	r2, #13
 800cc22:	d832      	bhi.n	800cc8a <_strtod_l+0x9a>
 800cc24:	2a09      	cmp	r2, #9
 800cc26:	d236      	bcs.n	800cc96 <_strtod_l+0xa6>
 800cc28:	2a00      	cmp	r2, #0
 800cc2a:	d03e      	beq.n	800ccaa <_strtod_l+0xba>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	930d      	str	r3, [sp, #52]	; 0x34
 800cc30:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cc32:	782b      	ldrb	r3, [r5, #0]
 800cc34:	2b30      	cmp	r3, #48	; 0x30
 800cc36:	f040 80ac 	bne.w	800cd92 <_strtod_l+0x1a2>
 800cc3a:	786b      	ldrb	r3, [r5, #1]
 800cc3c:	2b58      	cmp	r3, #88	; 0x58
 800cc3e:	d001      	beq.n	800cc44 <_strtod_l+0x54>
 800cc40:	2b78      	cmp	r3, #120	; 0x78
 800cc42:	d167      	bne.n	800cd14 <_strtod_l+0x124>
 800cc44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	ab1c      	add	r3, sp, #112	; 0x70
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	9702      	str	r7, [sp, #8]
 800cc4e:	ab1d      	add	r3, sp, #116	; 0x74
 800cc50:	4a88      	ldr	r2, [pc, #544]	; (800ce74 <_strtod_l+0x284>)
 800cc52:	a91b      	add	r1, sp, #108	; 0x6c
 800cc54:	4648      	mov	r0, r9
 800cc56:	f000 fe2f 	bl	800d8b8 <__gethex>
 800cc5a:	f010 0407 	ands.w	r4, r0, #7
 800cc5e:	4606      	mov	r6, r0
 800cc60:	d005      	beq.n	800cc6e <_strtod_l+0x7e>
 800cc62:	2c06      	cmp	r4, #6
 800cc64:	d12b      	bne.n	800ccbe <_strtod_l+0xce>
 800cc66:	3501      	adds	r5, #1
 800cc68:	2300      	movs	r3, #0
 800cc6a:	951b      	str	r5, [sp, #108]	; 0x6c
 800cc6c:	930d      	str	r3, [sp, #52]	; 0x34
 800cc6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f040 859a 	bne.w	800d7aa <_strtod_l+0xbba>
 800cc76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc78:	b1e3      	cbz	r3, 800ccb4 <_strtod_l+0xc4>
 800cc7a:	4652      	mov	r2, sl
 800cc7c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cc80:	ec43 2b10 	vmov	d0, r2, r3
 800cc84:	b021      	add	sp, #132	; 0x84
 800cc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8a:	2a2b      	cmp	r2, #43	; 0x2b
 800cc8c:	d015      	beq.n	800ccba <_strtod_l+0xca>
 800cc8e:	2a2d      	cmp	r2, #45	; 0x2d
 800cc90:	d004      	beq.n	800cc9c <_strtod_l+0xac>
 800cc92:	2a20      	cmp	r2, #32
 800cc94:	d1ca      	bne.n	800cc2c <_strtod_l+0x3c>
 800cc96:	3301      	adds	r3, #1
 800cc98:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc9a:	e7bf      	b.n	800cc1c <_strtod_l+0x2c>
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	920d      	str	r2, [sp, #52]	; 0x34
 800cca0:	1c5a      	adds	r2, r3, #1
 800cca2:	921b      	str	r2, [sp, #108]	; 0x6c
 800cca4:	785b      	ldrb	r3, [r3, #1]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1c2      	bne.n	800cc30 <_strtod_l+0x40>
 800ccaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccac:	961b      	str	r6, [sp, #108]	; 0x6c
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f040 8579 	bne.w	800d7a6 <_strtod_l+0xbb6>
 800ccb4:	4652      	mov	r2, sl
 800ccb6:	465b      	mov	r3, fp
 800ccb8:	e7e2      	b.n	800cc80 <_strtod_l+0x90>
 800ccba:	2200      	movs	r2, #0
 800ccbc:	e7ef      	b.n	800cc9e <_strtod_l+0xae>
 800ccbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ccc0:	b13a      	cbz	r2, 800ccd2 <_strtod_l+0xe2>
 800ccc2:	2135      	movs	r1, #53	; 0x35
 800ccc4:	a81e      	add	r0, sp, #120	; 0x78
 800ccc6:	f001 fc95 	bl	800e5f4 <__copybits>
 800ccca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cccc:	4648      	mov	r0, r9
 800ccce:	f001 f902 	bl	800ded6 <_Bfree>
 800ccd2:	3c01      	subs	r4, #1
 800ccd4:	2c04      	cmp	r4, #4
 800ccd6:	d806      	bhi.n	800cce6 <_strtod_l+0xf6>
 800ccd8:	e8df f004 	tbb	[pc, r4]
 800ccdc:	1714030a 	.word	0x1714030a
 800cce0:	0a          	.byte	0x0a
 800cce1:	00          	.byte	0x00
 800cce2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800cce6:	0730      	lsls	r0, r6, #28
 800cce8:	d5c1      	bpl.n	800cc6e <_strtod_l+0x7e>
 800ccea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ccee:	e7be      	b.n	800cc6e <_strtod_l+0x7e>
 800ccf0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ccf4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ccf6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ccfa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ccfe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd02:	e7f0      	b.n	800cce6 <_strtod_l+0xf6>
 800cd04:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ce78 <_strtod_l+0x288>
 800cd08:	e7ed      	b.n	800cce6 <_strtod_l+0xf6>
 800cd0a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cd0e:	f04f 3aff 	mov.w	sl, #4294967295
 800cd12:	e7e8      	b.n	800cce6 <_strtod_l+0xf6>
 800cd14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd16:	1c5a      	adds	r2, r3, #1
 800cd18:	921b      	str	r2, [sp, #108]	; 0x6c
 800cd1a:	785b      	ldrb	r3, [r3, #1]
 800cd1c:	2b30      	cmp	r3, #48	; 0x30
 800cd1e:	d0f9      	beq.n	800cd14 <_strtod_l+0x124>
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d0a4      	beq.n	800cc6e <_strtod_l+0x7e>
 800cd24:	2301      	movs	r3, #1
 800cd26:	2500      	movs	r5, #0
 800cd28:	9306      	str	r3, [sp, #24]
 800cd2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd2c:	9308      	str	r3, [sp, #32]
 800cd2e:	9507      	str	r5, [sp, #28]
 800cd30:	9505      	str	r5, [sp, #20]
 800cd32:	220a      	movs	r2, #10
 800cd34:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800cd36:	7807      	ldrb	r7, [r0, #0]
 800cd38:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800cd3c:	b2d9      	uxtb	r1, r3
 800cd3e:	2909      	cmp	r1, #9
 800cd40:	d929      	bls.n	800cd96 <_strtod_l+0x1a6>
 800cd42:	4622      	mov	r2, r4
 800cd44:	f8d8 1000 	ldr.w	r1, [r8]
 800cd48:	f7ff ff24 	bl	800cb94 <strncmp>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d031      	beq.n	800cdb4 <_strtod_l+0x1c4>
 800cd50:	2000      	movs	r0, #0
 800cd52:	9c05      	ldr	r4, [sp, #20]
 800cd54:	9004      	str	r0, [sp, #16]
 800cd56:	463b      	mov	r3, r7
 800cd58:	4602      	mov	r2, r0
 800cd5a:	2b65      	cmp	r3, #101	; 0x65
 800cd5c:	d001      	beq.n	800cd62 <_strtod_l+0x172>
 800cd5e:	2b45      	cmp	r3, #69	; 0x45
 800cd60:	d114      	bne.n	800cd8c <_strtod_l+0x19c>
 800cd62:	b924      	cbnz	r4, 800cd6e <_strtod_l+0x17e>
 800cd64:	b910      	cbnz	r0, 800cd6c <_strtod_l+0x17c>
 800cd66:	9b06      	ldr	r3, [sp, #24]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d09e      	beq.n	800ccaa <_strtod_l+0xba>
 800cd6c:	2400      	movs	r4, #0
 800cd6e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800cd70:	1c73      	adds	r3, r6, #1
 800cd72:	931b      	str	r3, [sp, #108]	; 0x6c
 800cd74:	7873      	ldrb	r3, [r6, #1]
 800cd76:	2b2b      	cmp	r3, #43	; 0x2b
 800cd78:	d078      	beq.n	800ce6c <_strtod_l+0x27c>
 800cd7a:	2b2d      	cmp	r3, #45	; 0x2d
 800cd7c:	d070      	beq.n	800ce60 <_strtod_l+0x270>
 800cd7e:	f04f 0c00 	mov.w	ip, #0
 800cd82:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800cd86:	2f09      	cmp	r7, #9
 800cd88:	d97c      	bls.n	800ce84 <_strtod_l+0x294>
 800cd8a:	961b      	str	r6, [sp, #108]	; 0x6c
 800cd8c:	f04f 0e00 	mov.w	lr, #0
 800cd90:	e09a      	b.n	800cec8 <_strtod_l+0x2d8>
 800cd92:	2300      	movs	r3, #0
 800cd94:	e7c7      	b.n	800cd26 <_strtod_l+0x136>
 800cd96:	9905      	ldr	r1, [sp, #20]
 800cd98:	2908      	cmp	r1, #8
 800cd9a:	bfdd      	ittte	le
 800cd9c:	9907      	ldrle	r1, [sp, #28]
 800cd9e:	fb02 3301 	mlale	r3, r2, r1, r3
 800cda2:	9307      	strle	r3, [sp, #28]
 800cda4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800cda8:	9b05      	ldr	r3, [sp, #20]
 800cdaa:	3001      	adds	r0, #1
 800cdac:	3301      	adds	r3, #1
 800cdae:	9305      	str	r3, [sp, #20]
 800cdb0:	901b      	str	r0, [sp, #108]	; 0x6c
 800cdb2:	e7bf      	b.n	800cd34 <_strtod_l+0x144>
 800cdb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdb6:	191a      	adds	r2, r3, r4
 800cdb8:	921b      	str	r2, [sp, #108]	; 0x6c
 800cdba:	9a05      	ldr	r2, [sp, #20]
 800cdbc:	5d1b      	ldrb	r3, [r3, r4]
 800cdbe:	2a00      	cmp	r2, #0
 800cdc0:	d037      	beq.n	800ce32 <_strtod_l+0x242>
 800cdc2:	9c05      	ldr	r4, [sp, #20]
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cdca:	2909      	cmp	r1, #9
 800cdcc:	d913      	bls.n	800cdf6 <_strtod_l+0x206>
 800cdce:	2101      	movs	r1, #1
 800cdd0:	9104      	str	r1, [sp, #16]
 800cdd2:	e7c2      	b.n	800cd5a <_strtod_l+0x16a>
 800cdd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdd6:	1c5a      	adds	r2, r3, #1
 800cdd8:	921b      	str	r2, [sp, #108]	; 0x6c
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	3001      	adds	r0, #1
 800cdde:	2b30      	cmp	r3, #48	; 0x30
 800cde0:	d0f8      	beq.n	800cdd4 <_strtod_l+0x1e4>
 800cde2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cde6:	2a08      	cmp	r2, #8
 800cde8:	f200 84e4 	bhi.w	800d7b4 <_strtod_l+0xbc4>
 800cdec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cdee:	9208      	str	r2, [sp, #32]
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800cdfa:	f100 0101 	add.w	r1, r0, #1
 800cdfe:	d012      	beq.n	800ce26 <_strtod_l+0x236>
 800ce00:	440a      	add	r2, r1
 800ce02:	eb00 0c04 	add.w	ip, r0, r4
 800ce06:	4621      	mov	r1, r4
 800ce08:	270a      	movs	r7, #10
 800ce0a:	458c      	cmp	ip, r1
 800ce0c:	d113      	bne.n	800ce36 <_strtod_l+0x246>
 800ce0e:	1821      	adds	r1, r4, r0
 800ce10:	2908      	cmp	r1, #8
 800ce12:	f104 0401 	add.w	r4, r4, #1
 800ce16:	4404      	add	r4, r0
 800ce18:	dc19      	bgt.n	800ce4e <_strtod_l+0x25e>
 800ce1a:	9b07      	ldr	r3, [sp, #28]
 800ce1c:	210a      	movs	r1, #10
 800ce1e:	fb01 e303 	mla	r3, r1, r3, lr
 800ce22:	9307      	str	r3, [sp, #28]
 800ce24:	2100      	movs	r1, #0
 800ce26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce28:	1c58      	adds	r0, r3, #1
 800ce2a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ce2c:	785b      	ldrb	r3, [r3, #1]
 800ce2e:	4608      	mov	r0, r1
 800ce30:	e7c9      	b.n	800cdc6 <_strtod_l+0x1d6>
 800ce32:	9805      	ldr	r0, [sp, #20]
 800ce34:	e7d3      	b.n	800cdde <_strtod_l+0x1ee>
 800ce36:	2908      	cmp	r1, #8
 800ce38:	f101 0101 	add.w	r1, r1, #1
 800ce3c:	dc03      	bgt.n	800ce46 <_strtod_l+0x256>
 800ce3e:	9b07      	ldr	r3, [sp, #28]
 800ce40:	437b      	muls	r3, r7
 800ce42:	9307      	str	r3, [sp, #28]
 800ce44:	e7e1      	b.n	800ce0a <_strtod_l+0x21a>
 800ce46:	2910      	cmp	r1, #16
 800ce48:	bfd8      	it	le
 800ce4a:	437d      	mulle	r5, r7
 800ce4c:	e7dd      	b.n	800ce0a <_strtod_l+0x21a>
 800ce4e:	2c10      	cmp	r4, #16
 800ce50:	bfdc      	itt	le
 800ce52:	210a      	movle	r1, #10
 800ce54:	fb01 e505 	mlale	r5, r1, r5, lr
 800ce58:	e7e4      	b.n	800ce24 <_strtod_l+0x234>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	9304      	str	r3, [sp, #16]
 800ce5e:	e781      	b.n	800cd64 <_strtod_l+0x174>
 800ce60:	f04f 0c01 	mov.w	ip, #1
 800ce64:	1cb3      	adds	r3, r6, #2
 800ce66:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce68:	78b3      	ldrb	r3, [r6, #2]
 800ce6a:	e78a      	b.n	800cd82 <_strtod_l+0x192>
 800ce6c:	f04f 0c00 	mov.w	ip, #0
 800ce70:	e7f8      	b.n	800ce64 <_strtod_l+0x274>
 800ce72:	bf00      	nop
 800ce74:	0800f354 	.word	0x0800f354
 800ce78:	7ff00000 	.word	0x7ff00000
 800ce7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce7e:	1c5f      	adds	r7, r3, #1
 800ce80:	971b      	str	r7, [sp, #108]	; 0x6c
 800ce82:	785b      	ldrb	r3, [r3, #1]
 800ce84:	2b30      	cmp	r3, #48	; 0x30
 800ce86:	d0f9      	beq.n	800ce7c <_strtod_l+0x28c>
 800ce88:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ce8c:	2f08      	cmp	r7, #8
 800ce8e:	f63f af7d 	bhi.w	800cd8c <_strtod_l+0x19c>
 800ce92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ce96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce98:	930a      	str	r3, [sp, #40]	; 0x28
 800ce9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce9c:	1c5f      	adds	r7, r3, #1
 800ce9e:	971b      	str	r7, [sp, #108]	; 0x6c
 800cea0:	785b      	ldrb	r3, [r3, #1]
 800cea2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800cea6:	f1b8 0f09 	cmp.w	r8, #9
 800ceaa:	d937      	bls.n	800cf1c <_strtod_l+0x32c>
 800ceac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ceae:	1a7f      	subs	r7, r7, r1
 800ceb0:	2f08      	cmp	r7, #8
 800ceb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ceb6:	dc37      	bgt.n	800cf28 <_strtod_l+0x338>
 800ceb8:	45be      	cmp	lr, r7
 800ceba:	bfa8      	it	ge
 800cebc:	46be      	movge	lr, r7
 800cebe:	f1bc 0f00 	cmp.w	ip, #0
 800cec2:	d001      	beq.n	800cec8 <_strtod_l+0x2d8>
 800cec4:	f1ce 0e00 	rsb	lr, lr, #0
 800cec8:	2c00      	cmp	r4, #0
 800ceca:	d151      	bne.n	800cf70 <_strtod_l+0x380>
 800cecc:	2800      	cmp	r0, #0
 800cece:	f47f aece 	bne.w	800cc6e <_strtod_l+0x7e>
 800ced2:	9a06      	ldr	r2, [sp, #24]
 800ced4:	2a00      	cmp	r2, #0
 800ced6:	f47f aeca 	bne.w	800cc6e <_strtod_l+0x7e>
 800ceda:	9a04      	ldr	r2, [sp, #16]
 800cedc:	2a00      	cmp	r2, #0
 800cede:	f47f aee4 	bne.w	800ccaa <_strtod_l+0xba>
 800cee2:	2b4e      	cmp	r3, #78	; 0x4e
 800cee4:	d027      	beq.n	800cf36 <_strtod_l+0x346>
 800cee6:	dc21      	bgt.n	800cf2c <_strtod_l+0x33c>
 800cee8:	2b49      	cmp	r3, #73	; 0x49
 800ceea:	f47f aede 	bne.w	800ccaa <_strtod_l+0xba>
 800ceee:	49a0      	ldr	r1, [pc, #640]	; (800d170 <_strtod_l+0x580>)
 800cef0:	a81b      	add	r0, sp, #108	; 0x6c
 800cef2:	f000 ff14 	bl	800dd1e <__match>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	f43f aed7 	beq.w	800ccaa <_strtod_l+0xba>
 800cefc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cefe:	499d      	ldr	r1, [pc, #628]	; (800d174 <_strtod_l+0x584>)
 800cf00:	3b01      	subs	r3, #1
 800cf02:	a81b      	add	r0, sp, #108	; 0x6c
 800cf04:	931b      	str	r3, [sp, #108]	; 0x6c
 800cf06:	f000 ff0a 	bl	800dd1e <__match>
 800cf0a:	b910      	cbnz	r0, 800cf12 <_strtod_l+0x322>
 800cf0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf0e:	3301      	adds	r3, #1
 800cf10:	931b      	str	r3, [sp, #108]	; 0x6c
 800cf12:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d188 <_strtod_l+0x598>
 800cf16:	f04f 0a00 	mov.w	sl, #0
 800cf1a:	e6a8      	b.n	800cc6e <_strtod_l+0x7e>
 800cf1c:	210a      	movs	r1, #10
 800cf1e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800cf22:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cf26:	e7b8      	b.n	800ce9a <_strtod_l+0x2aa>
 800cf28:	46be      	mov	lr, r7
 800cf2a:	e7c8      	b.n	800cebe <_strtod_l+0x2ce>
 800cf2c:	2b69      	cmp	r3, #105	; 0x69
 800cf2e:	d0de      	beq.n	800ceee <_strtod_l+0x2fe>
 800cf30:	2b6e      	cmp	r3, #110	; 0x6e
 800cf32:	f47f aeba 	bne.w	800ccaa <_strtod_l+0xba>
 800cf36:	4990      	ldr	r1, [pc, #576]	; (800d178 <_strtod_l+0x588>)
 800cf38:	a81b      	add	r0, sp, #108	; 0x6c
 800cf3a:	f000 fef0 	bl	800dd1e <__match>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	f43f aeb3 	beq.w	800ccaa <_strtod_l+0xba>
 800cf44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b28      	cmp	r3, #40	; 0x28
 800cf4a:	d10e      	bne.n	800cf6a <_strtod_l+0x37a>
 800cf4c:	aa1e      	add	r2, sp, #120	; 0x78
 800cf4e:	498b      	ldr	r1, [pc, #556]	; (800d17c <_strtod_l+0x58c>)
 800cf50:	a81b      	add	r0, sp, #108	; 0x6c
 800cf52:	f000 fef8 	bl	800dd46 <__hexnan>
 800cf56:	2805      	cmp	r0, #5
 800cf58:	d107      	bne.n	800cf6a <_strtod_l+0x37a>
 800cf5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cf5c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800cf60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cf64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cf68:	e681      	b.n	800cc6e <_strtod_l+0x7e>
 800cf6a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d190 <_strtod_l+0x5a0>
 800cf6e:	e7d2      	b.n	800cf16 <_strtod_l+0x326>
 800cf70:	ebae 0302 	sub.w	r3, lr, r2
 800cf74:	9306      	str	r3, [sp, #24]
 800cf76:	9b05      	ldr	r3, [sp, #20]
 800cf78:	9807      	ldr	r0, [sp, #28]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	bf08      	it	eq
 800cf7e:	4623      	moveq	r3, r4
 800cf80:	2c10      	cmp	r4, #16
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	46a0      	mov	r8, r4
 800cf86:	bfa8      	it	ge
 800cf88:	f04f 0810 	movge.w	r8, #16
 800cf8c:	f7f3 fa98 	bl	80004c0 <__aeabi_ui2d>
 800cf90:	2c09      	cmp	r4, #9
 800cf92:	4682      	mov	sl, r0
 800cf94:	468b      	mov	fp, r1
 800cf96:	dc13      	bgt.n	800cfc0 <_strtod_l+0x3d0>
 800cf98:	9b06      	ldr	r3, [sp, #24]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	f43f ae67 	beq.w	800cc6e <_strtod_l+0x7e>
 800cfa0:	9b06      	ldr	r3, [sp, #24]
 800cfa2:	dd7a      	ble.n	800d09a <_strtod_l+0x4aa>
 800cfa4:	2b16      	cmp	r3, #22
 800cfa6:	dc61      	bgt.n	800d06c <_strtod_l+0x47c>
 800cfa8:	4a75      	ldr	r2, [pc, #468]	; (800d180 <_strtod_l+0x590>)
 800cfaa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800cfae:	e9de 0100 	ldrd	r0, r1, [lr]
 800cfb2:	4652      	mov	r2, sl
 800cfb4:	465b      	mov	r3, fp
 800cfb6:	f7f3 fafd 	bl	80005b4 <__aeabi_dmul>
 800cfba:	4682      	mov	sl, r0
 800cfbc:	468b      	mov	fp, r1
 800cfbe:	e656      	b.n	800cc6e <_strtod_l+0x7e>
 800cfc0:	4b6f      	ldr	r3, [pc, #444]	; (800d180 <_strtod_l+0x590>)
 800cfc2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cfc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cfca:	f7f3 faf3 	bl	80005b4 <__aeabi_dmul>
 800cfce:	4606      	mov	r6, r0
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	460f      	mov	r7, r1
 800cfd4:	f7f3 fa74 	bl	80004c0 <__aeabi_ui2d>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	460b      	mov	r3, r1
 800cfdc:	4630      	mov	r0, r6
 800cfde:	4639      	mov	r1, r7
 800cfe0:	f7f3 f932 	bl	8000248 <__adddf3>
 800cfe4:	2c0f      	cmp	r4, #15
 800cfe6:	4682      	mov	sl, r0
 800cfe8:	468b      	mov	fp, r1
 800cfea:	ddd5      	ble.n	800cf98 <_strtod_l+0x3a8>
 800cfec:	9b06      	ldr	r3, [sp, #24]
 800cfee:	eba4 0808 	sub.w	r8, r4, r8
 800cff2:	4498      	add	r8, r3
 800cff4:	f1b8 0f00 	cmp.w	r8, #0
 800cff8:	f340 8096 	ble.w	800d128 <_strtod_l+0x538>
 800cffc:	f018 030f 	ands.w	r3, r8, #15
 800d000:	d00a      	beq.n	800d018 <_strtod_l+0x428>
 800d002:	495f      	ldr	r1, [pc, #380]	; (800d180 <_strtod_l+0x590>)
 800d004:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d008:	4652      	mov	r2, sl
 800d00a:	465b      	mov	r3, fp
 800d00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d010:	f7f3 fad0 	bl	80005b4 <__aeabi_dmul>
 800d014:	4682      	mov	sl, r0
 800d016:	468b      	mov	fp, r1
 800d018:	f038 080f 	bics.w	r8, r8, #15
 800d01c:	d073      	beq.n	800d106 <_strtod_l+0x516>
 800d01e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d022:	dd47      	ble.n	800d0b4 <_strtod_l+0x4c4>
 800d024:	2400      	movs	r4, #0
 800d026:	46a0      	mov	r8, r4
 800d028:	9407      	str	r4, [sp, #28]
 800d02a:	9405      	str	r4, [sp, #20]
 800d02c:	2322      	movs	r3, #34	; 0x22
 800d02e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d188 <_strtod_l+0x598>
 800d032:	f8c9 3000 	str.w	r3, [r9]
 800d036:	f04f 0a00 	mov.w	sl, #0
 800d03a:	9b07      	ldr	r3, [sp, #28]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f43f ae16 	beq.w	800cc6e <_strtod_l+0x7e>
 800d042:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d044:	4648      	mov	r0, r9
 800d046:	f000 ff46 	bl	800ded6 <_Bfree>
 800d04a:	9905      	ldr	r1, [sp, #20]
 800d04c:	4648      	mov	r0, r9
 800d04e:	f000 ff42 	bl	800ded6 <_Bfree>
 800d052:	4641      	mov	r1, r8
 800d054:	4648      	mov	r0, r9
 800d056:	f000 ff3e 	bl	800ded6 <_Bfree>
 800d05a:	9907      	ldr	r1, [sp, #28]
 800d05c:	4648      	mov	r0, r9
 800d05e:	f000 ff3a 	bl	800ded6 <_Bfree>
 800d062:	4621      	mov	r1, r4
 800d064:	4648      	mov	r0, r9
 800d066:	f000 ff36 	bl	800ded6 <_Bfree>
 800d06a:	e600      	b.n	800cc6e <_strtod_l+0x7e>
 800d06c:	9a06      	ldr	r2, [sp, #24]
 800d06e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d072:	4293      	cmp	r3, r2
 800d074:	dbba      	blt.n	800cfec <_strtod_l+0x3fc>
 800d076:	4d42      	ldr	r5, [pc, #264]	; (800d180 <_strtod_l+0x590>)
 800d078:	f1c4 040f 	rsb	r4, r4, #15
 800d07c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d080:	4652      	mov	r2, sl
 800d082:	465b      	mov	r3, fp
 800d084:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d088:	f7f3 fa94 	bl	80005b4 <__aeabi_dmul>
 800d08c:	9b06      	ldr	r3, [sp, #24]
 800d08e:	1b1c      	subs	r4, r3, r4
 800d090:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d094:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d098:	e78d      	b.n	800cfb6 <_strtod_l+0x3c6>
 800d09a:	f113 0f16 	cmn.w	r3, #22
 800d09e:	dba5      	blt.n	800cfec <_strtod_l+0x3fc>
 800d0a0:	4a37      	ldr	r2, [pc, #220]	; (800d180 <_strtod_l+0x590>)
 800d0a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d0a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d0aa:	4650      	mov	r0, sl
 800d0ac:	4659      	mov	r1, fp
 800d0ae:	f7f3 fbab 	bl	8000808 <__aeabi_ddiv>
 800d0b2:	e782      	b.n	800cfba <_strtod_l+0x3ca>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	4e33      	ldr	r6, [pc, #204]	; (800d184 <_strtod_l+0x594>)
 800d0b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d0bc:	4650      	mov	r0, sl
 800d0be:	4659      	mov	r1, fp
 800d0c0:	461d      	mov	r5, r3
 800d0c2:	f1b8 0f01 	cmp.w	r8, #1
 800d0c6:	dc21      	bgt.n	800d10c <_strtod_l+0x51c>
 800d0c8:	b10b      	cbz	r3, 800d0ce <_strtod_l+0x4de>
 800d0ca:	4682      	mov	sl, r0
 800d0cc:	468b      	mov	fp, r1
 800d0ce:	4b2d      	ldr	r3, [pc, #180]	; (800d184 <_strtod_l+0x594>)
 800d0d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d0d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d0d8:	4652      	mov	r2, sl
 800d0da:	465b      	mov	r3, fp
 800d0dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d0e0:	f7f3 fa68 	bl	80005b4 <__aeabi_dmul>
 800d0e4:	4b28      	ldr	r3, [pc, #160]	; (800d188 <_strtod_l+0x598>)
 800d0e6:	460a      	mov	r2, r1
 800d0e8:	400b      	ands	r3, r1
 800d0ea:	4928      	ldr	r1, [pc, #160]	; (800d18c <_strtod_l+0x59c>)
 800d0ec:	428b      	cmp	r3, r1
 800d0ee:	4682      	mov	sl, r0
 800d0f0:	d898      	bhi.n	800d024 <_strtod_l+0x434>
 800d0f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d0f6:	428b      	cmp	r3, r1
 800d0f8:	bf86      	itte	hi
 800d0fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d194 <_strtod_l+0x5a4>
 800d0fe:	f04f 3aff 	movhi.w	sl, #4294967295
 800d102:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d106:	2300      	movs	r3, #0
 800d108:	9304      	str	r3, [sp, #16]
 800d10a:	e077      	b.n	800d1fc <_strtod_l+0x60c>
 800d10c:	f018 0f01 	tst.w	r8, #1
 800d110:	d006      	beq.n	800d120 <_strtod_l+0x530>
 800d112:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	f7f3 fa4b 	bl	80005b4 <__aeabi_dmul>
 800d11e:	2301      	movs	r3, #1
 800d120:	3501      	adds	r5, #1
 800d122:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d126:	e7cc      	b.n	800d0c2 <_strtod_l+0x4d2>
 800d128:	d0ed      	beq.n	800d106 <_strtod_l+0x516>
 800d12a:	f1c8 0800 	rsb	r8, r8, #0
 800d12e:	f018 020f 	ands.w	r2, r8, #15
 800d132:	d00a      	beq.n	800d14a <_strtod_l+0x55a>
 800d134:	4b12      	ldr	r3, [pc, #72]	; (800d180 <_strtod_l+0x590>)
 800d136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d13a:	4650      	mov	r0, sl
 800d13c:	4659      	mov	r1, fp
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	f7f3 fb61 	bl	8000808 <__aeabi_ddiv>
 800d146:	4682      	mov	sl, r0
 800d148:	468b      	mov	fp, r1
 800d14a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d14e:	d0da      	beq.n	800d106 <_strtod_l+0x516>
 800d150:	f1b8 0f1f 	cmp.w	r8, #31
 800d154:	dd20      	ble.n	800d198 <_strtod_l+0x5a8>
 800d156:	2400      	movs	r4, #0
 800d158:	46a0      	mov	r8, r4
 800d15a:	9407      	str	r4, [sp, #28]
 800d15c:	9405      	str	r4, [sp, #20]
 800d15e:	2322      	movs	r3, #34	; 0x22
 800d160:	f04f 0a00 	mov.w	sl, #0
 800d164:	f04f 0b00 	mov.w	fp, #0
 800d168:	f8c9 3000 	str.w	r3, [r9]
 800d16c:	e765      	b.n	800d03a <_strtod_l+0x44a>
 800d16e:	bf00      	nop
 800d170:	0800f346 	.word	0x0800f346
 800d174:	0800f349 	.word	0x0800f349
 800d178:	0800f34f 	.word	0x0800f34f
 800d17c:	0800f368 	.word	0x0800f368
 800d180:	0800f4d8 	.word	0x0800f4d8
 800d184:	0800f4b0 	.word	0x0800f4b0
 800d188:	7ff00000 	.word	0x7ff00000
 800d18c:	7ca00000 	.word	0x7ca00000
 800d190:	fff80000 	.word	0xfff80000
 800d194:	7fefffff 	.word	0x7fefffff
 800d198:	f018 0310 	ands.w	r3, r8, #16
 800d19c:	bf18      	it	ne
 800d19e:	236a      	movne	r3, #106	; 0x6a
 800d1a0:	4da0      	ldr	r5, [pc, #640]	; (800d424 <_strtod_l+0x834>)
 800d1a2:	9304      	str	r3, [sp, #16]
 800d1a4:	4650      	mov	r0, sl
 800d1a6:	4659      	mov	r1, fp
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	f1b8 0f00 	cmp.w	r8, #0
 800d1ae:	f300 810a 	bgt.w	800d3c6 <_strtod_l+0x7d6>
 800d1b2:	b10b      	cbz	r3, 800d1b8 <_strtod_l+0x5c8>
 800d1b4:	4682      	mov	sl, r0
 800d1b6:	468b      	mov	fp, r1
 800d1b8:	9b04      	ldr	r3, [sp, #16]
 800d1ba:	b1bb      	cbz	r3, 800d1ec <_strtod_l+0x5fc>
 800d1bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d1c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	4659      	mov	r1, fp
 800d1c8:	dd10      	ble.n	800d1ec <_strtod_l+0x5fc>
 800d1ca:	2b1f      	cmp	r3, #31
 800d1cc:	f340 8107 	ble.w	800d3de <_strtod_l+0x7ee>
 800d1d0:	2b34      	cmp	r3, #52	; 0x34
 800d1d2:	bfde      	ittt	le
 800d1d4:	3b20      	suble	r3, #32
 800d1d6:	f04f 32ff 	movle.w	r2, #4294967295
 800d1da:	fa02 f303 	lslle.w	r3, r2, r3
 800d1de:	f04f 0a00 	mov.w	sl, #0
 800d1e2:	bfcc      	ite	gt
 800d1e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d1e8:	ea03 0b01 	andle.w	fp, r3, r1
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	4650      	mov	r0, sl
 800d1f2:	4659      	mov	r1, fp
 800d1f4:	f7f3 fc46 	bl	8000a84 <__aeabi_dcmpeq>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d1ac      	bne.n	800d156 <_strtod_l+0x566>
 800d1fc:	9b07      	ldr	r3, [sp, #28]
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	9a05      	ldr	r2, [sp, #20]
 800d202:	9908      	ldr	r1, [sp, #32]
 800d204:	4623      	mov	r3, r4
 800d206:	4648      	mov	r0, r9
 800d208:	f000 feb7 	bl	800df7a <__s2b>
 800d20c:	9007      	str	r0, [sp, #28]
 800d20e:	2800      	cmp	r0, #0
 800d210:	f43f af08 	beq.w	800d024 <_strtod_l+0x434>
 800d214:	9a06      	ldr	r2, [sp, #24]
 800d216:	9b06      	ldr	r3, [sp, #24]
 800d218:	2a00      	cmp	r2, #0
 800d21a:	f1c3 0300 	rsb	r3, r3, #0
 800d21e:	bfa8      	it	ge
 800d220:	2300      	movge	r3, #0
 800d222:	930e      	str	r3, [sp, #56]	; 0x38
 800d224:	2400      	movs	r4, #0
 800d226:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d22a:	9316      	str	r3, [sp, #88]	; 0x58
 800d22c:	46a0      	mov	r8, r4
 800d22e:	9b07      	ldr	r3, [sp, #28]
 800d230:	4648      	mov	r0, r9
 800d232:	6859      	ldr	r1, [r3, #4]
 800d234:	f000 fe1b 	bl	800de6e <_Balloc>
 800d238:	9005      	str	r0, [sp, #20]
 800d23a:	2800      	cmp	r0, #0
 800d23c:	f43f aef6 	beq.w	800d02c <_strtod_l+0x43c>
 800d240:	9b07      	ldr	r3, [sp, #28]
 800d242:	691a      	ldr	r2, [r3, #16]
 800d244:	3202      	adds	r2, #2
 800d246:	f103 010c 	add.w	r1, r3, #12
 800d24a:	0092      	lsls	r2, r2, #2
 800d24c:	300c      	adds	r0, #12
 800d24e:	f7ff fbcd 	bl	800c9ec <memcpy>
 800d252:	aa1e      	add	r2, sp, #120	; 0x78
 800d254:	a91d      	add	r1, sp, #116	; 0x74
 800d256:	ec4b ab10 	vmov	d0, sl, fp
 800d25a:	4648      	mov	r0, r9
 800d25c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d260:	f001 f946 	bl	800e4f0 <__d2b>
 800d264:	901c      	str	r0, [sp, #112]	; 0x70
 800d266:	2800      	cmp	r0, #0
 800d268:	f43f aee0 	beq.w	800d02c <_strtod_l+0x43c>
 800d26c:	2101      	movs	r1, #1
 800d26e:	4648      	mov	r0, r9
 800d270:	f000 ff0f 	bl	800e092 <__i2b>
 800d274:	4680      	mov	r8, r0
 800d276:	2800      	cmp	r0, #0
 800d278:	f43f aed8 	beq.w	800d02c <_strtod_l+0x43c>
 800d27c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d27e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d280:	2e00      	cmp	r6, #0
 800d282:	bfab      	itete	ge
 800d284:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d286:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d288:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d28a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d28c:	bfac      	ite	ge
 800d28e:	18f7      	addge	r7, r6, r3
 800d290:	1b9d      	sublt	r5, r3, r6
 800d292:	9b04      	ldr	r3, [sp, #16]
 800d294:	1af6      	subs	r6, r6, r3
 800d296:	4416      	add	r6, r2
 800d298:	4b63      	ldr	r3, [pc, #396]	; (800d428 <_strtod_l+0x838>)
 800d29a:	3e01      	subs	r6, #1
 800d29c:	429e      	cmp	r6, r3
 800d29e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d2a2:	f280 80af 	bge.w	800d404 <_strtod_l+0x814>
 800d2a6:	1b9b      	subs	r3, r3, r6
 800d2a8:	2b1f      	cmp	r3, #31
 800d2aa:	eba2 0203 	sub.w	r2, r2, r3
 800d2ae:	f04f 0101 	mov.w	r1, #1
 800d2b2:	f300 809b 	bgt.w	800d3ec <_strtod_l+0x7fc>
 800d2b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d2ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2bc:	2300      	movs	r3, #0
 800d2be:	930a      	str	r3, [sp, #40]	; 0x28
 800d2c0:	18be      	adds	r6, r7, r2
 800d2c2:	9b04      	ldr	r3, [sp, #16]
 800d2c4:	42b7      	cmp	r7, r6
 800d2c6:	4415      	add	r5, r2
 800d2c8:	441d      	add	r5, r3
 800d2ca:	463b      	mov	r3, r7
 800d2cc:	bfa8      	it	ge
 800d2ce:	4633      	movge	r3, r6
 800d2d0:	42ab      	cmp	r3, r5
 800d2d2:	bfa8      	it	ge
 800d2d4:	462b      	movge	r3, r5
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	bfc2      	ittt	gt
 800d2da:	1af6      	subgt	r6, r6, r3
 800d2dc:	1aed      	subgt	r5, r5, r3
 800d2de:	1aff      	subgt	r7, r7, r3
 800d2e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2e2:	b1bb      	cbz	r3, 800d314 <_strtod_l+0x724>
 800d2e4:	4641      	mov	r1, r8
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	4648      	mov	r0, r9
 800d2ea:	f000 ff71 	bl	800e1d0 <__pow5mult>
 800d2ee:	4680      	mov	r8, r0
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	f43f ae9b 	beq.w	800d02c <_strtod_l+0x43c>
 800d2f6:	4601      	mov	r1, r0
 800d2f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d2fa:	4648      	mov	r0, r9
 800d2fc:	f000 fed2 	bl	800e0a4 <__multiply>
 800d300:	900c      	str	r0, [sp, #48]	; 0x30
 800d302:	2800      	cmp	r0, #0
 800d304:	f43f ae92 	beq.w	800d02c <_strtod_l+0x43c>
 800d308:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d30a:	4648      	mov	r0, r9
 800d30c:	f000 fde3 	bl	800ded6 <_Bfree>
 800d310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d312:	931c      	str	r3, [sp, #112]	; 0x70
 800d314:	2e00      	cmp	r6, #0
 800d316:	dc7a      	bgt.n	800d40e <_strtod_l+0x81e>
 800d318:	9b06      	ldr	r3, [sp, #24]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	dd08      	ble.n	800d330 <_strtod_l+0x740>
 800d31e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d320:	9905      	ldr	r1, [sp, #20]
 800d322:	4648      	mov	r0, r9
 800d324:	f000 ff54 	bl	800e1d0 <__pow5mult>
 800d328:	9005      	str	r0, [sp, #20]
 800d32a:	2800      	cmp	r0, #0
 800d32c:	f43f ae7e 	beq.w	800d02c <_strtod_l+0x43c>
 800d330:	2d00      	cmp	r5, #0
 800d332:	dd08      	ble.n	800d346 <_strtod_l+0x756>
 800d334:	462a      	mov	r2, r5
 800d336:	9905      	ldr	r1, [sp, #20]
 800d338:	4648      	mov	r0, r9
 800d33a:	f000 ff97 	bl	800e26c <__lshift>
 800d33e:	9005      	str	r0, [sp, #20]
 800d340:	2800      	cmp	r0, #0
 800d342:	f43f ae73 	beq.w	800d02c <_strtod_l+0x43c>
 800d346:	2f00      	cmp	r7, #0
 800d348:	dd08      	ble.n	800d35c <_strtod_l+0x76c>
 800d34a:	4641      	mov	r1, r8
 800d34c:	463a      	mov	r2, r7
 800d34e:	4648      	mov	r0, r9
 800d350:	f000 ff8c 	bl	800e26c <__lshift>
 800d354:	4680      	mov	r8, r0
 800d356:	2800      	cmp	r0, #0
 800d358:	f43f ae68 	beq.w	800d02c <_strtod_l+0x43c>
 800d35c:	9a05      	ldr	r2, [sp, #20]
 800d35e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d360:	4648      	mov	r0, r9
 800d362:	f000 fff1 	bl	800e348 <__mdiff>
 800d366:	4604      	mov	r4, r0
 800d368:	2800      	cmp	r0, #0
 800d36a:	f43f ae5f 	beq.w	800d02c <_strtod_l+0x43c>
 800d36e:	68c3      	ldr	r3, [r0, #12]
 800d370:	930c      	str	r3, [sp, #48]	; 0x30
 800d372:	2300      	movs	r3, #0
 800d374:	60c3      	str	r3, [r0, #12]
 800d376:	4641      	mov	r1, r8
 800d378:	f000 ffcc 	bl	800e314 <__mcmp>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	da55      	bge.n	800d42c <_strtod_l+0x83c>
 800d380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d382:	b9e3      	cbnz	r3, 800d3be <_strtod_l+0x7ce>
 800d384:	f1ba 0f00 	cmp.w	sl, #0
 800d388:	d119      	bne.n	800d3be <_strtod_l+0x7ce>
 800d38a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d38e:	b9b3      	cbnz	r3, 800d3be <_strtod_l+0x7ce>
 800d390:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d394:	0d1b      	lsrs	r3, r3, #20
 800d396:	051b      	lsls	r3, r3, #20
 800d398:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d39c:	d90f      	bls.n	800d3be <_strtod_l+0x7ce>
 800d39e:	6963      	ldr	r3, [r4, #20]
 800d3a0:	b913      	cbnz	r3, 800d3a8 <_strtod_l+0x7b8>
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	dd0a      	ble.n	800d3be <_strtod_l+0x7ce>
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	4648      	mov	r0, r9
 800d3ae:	f000 ff5d 	bl	800e26c <__lshift>
 800d3b2:	4641      	mov	r1, r8
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	f000 ffad 	bl	800e314 <__mcmp>
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	dc67      	bgt.n	800d48e <_strtod_l+0x89e>
 800d3be:	9b04      	ldr	r3, [sp, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d171      	bne.n	800d4a8 <_strtod_l+0x8b8>
 800d3c4:	e63d      	b.n	800d042 <_strtod_l+0x452>
 800d3c6:	f018 0f01 	tst.w	r8, #1
 800d3ca:	d004      	beq.n	800d3d6 <_strtod_l+0x7e6>
 800d3cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3d0:	f7f3 f8f0 	bl	80005b4 <__aeabi_dmul>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d3da:	3508      	adds	r5, #8
 800d3dc:	e6e5      	b.n	800d1aa <_strtod_l+0x5ba>
 800d3de:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e6:	ea03 0a0a 	and.w	sl, r3, sl
 800d3ea:	e6ff      	b.n	800d1ec <_strtod_l+0x5fc>
 800d3ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d3f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d3f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d3f8:	36e2      	adds	r6, #226	; 0xe2
 800d3fa:	fa01 f306 	lsl.w	r3, r1, r6
 800d3fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d400:	910f      	str	r1, [sp, #60]	; 0x3c
 800d402:	e75d      	b.n	800d2c0 <_strtod_l+0x6d0>
 800d404:	2300      	movs	r3, #0
 800d406:	930a      	str	r3, [sp, #40]	; 0x28
 800d408:	2301      	movs	r3, #1
 800d40a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d40c:	e758      	b.n	800d2c0 <_strtod_l+0x6d0>
 800d40e:	4632      	mov	r2, r6
 800d410:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d412:	4648      	mov	r0, r9
 800d414:	f000 ff2a 	bl	800e26c <__lshift>
 800d418:	901c      	str	r0, [sp, #112]	; 0x70
 800d41a:	2800      	cmp	r0, #0
 800d41c:	f47f af7c 	bne.w	800d318 <_strtod_l+0x728>
 800d420:	e604      	b.n	800d02c <_strtod_l+0x43c>
 800d422:	bf00      	nop
 800d424:	0800f380 	.word	0x0800f380
 800d428:	fffffc02 	.word	0xfffffc02
 800d42c:	465d      	mov	r5, fp
 800d42e:	f040 8086 	bne.w	800d53e <_strtod_l+0x94e>
 800d432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d434:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d438:	b32a      	cbz	r2, 800d486 <_strtod_l+0x896>
 800d43a:	4aaf      	ldr	r2, [pc, #700]	; (800d6f8 <_strtod_l+0xb08>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d153      	bne.n	800d4e8 <_strtod_l+0x8f8>
 800d440:	9b04      	ldr	r3, [sp, #16]
 800d442:	4650      	mov	r0, sl
 800d444:	b1d3      	cbz	r3, 800d47c <_strtod_l+0x88c>
 800d446:	4aad      	ldr	r2, [pc, #692]	; (800d6fc <_strtod_l+0xb0c>)
 800d448:	402a      	ands	r2, r5
 800d44a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d44e:	f04f 31ff 	mov.w	r1, #4294967295
 800d452:	d816      	bhi.n	800d482 <_strtod_l+0x892>
 800d454:	0d12      	lsrs	r2, r2, #20
 800d456:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d45a:	fa01 f303 	lsl.w	r3, r1, r3
 800d45e:	4298      	cmp	r0, r3
 800d460:	d142      	bne.n	800d4e8 <_strtod_l+0x8f8>
 800d462:	4ba7      	ldr	r3, [pc, #668]	; (800d700 <_strtod_l+0xb10>)
 800d464:	429d      	cmp	r5, r3
 800d466:	d102      	bne.n	800d46e <_strtod_l+0x87e>
 800d468:	3001      	adds	r0, #1
 800d46a:	f43f addf 	beq.w	800d02c <_strtod_l+0x43c>
 800d46e:	4ba3      	ldr	r3, [pc, #652]	; (800d6fc <_strtod_l+0xb0c>)
 800d470:	402b      	ands	r3, r5
 800d472:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d476:	f04f 0a00 	mov.w	sl, #0
 800d47a:	e7a0      	b.n	800d3be <_strtod_l+0x7ce>
 800d47c:	f04f 33ff 	mov.w	r3, #4294967295
 800d480:	e7ed      	b.n	800d45e <_strtod_l+0x86e>
 800d482:	460b      	mov	r3, r1
 800d484:	e7eb      	b.n	800d45e <_strtod_l+0x86e>
 800d486:	bb7b      	cbnz	r3, 800d4e8 <_strtod_l+0x8f8>
 800d488:	f1ba 0f00 	cmp.w	sl, #0
 800d48c:	d12c      	bne.n	800d4e8 <_strtod_l+0x8f8>
 800d48e:	9904      	ldr	r1, [sp, #16]
 800d490:	4a9a      	ldr	r2, [pc, #616]	; (800d6fc <_strtod_l+0xb0c>)
 800d492:	465b      	mov	r3, fp
 800d494:	b1f1      	cbz	r1, 800d4d4 <_strtod_l+0x8e4>
 800d496:	ea02 010b 	and.w	r1, r2, fp
 800d49a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d49e:	dc19      	bgt.n	800d4d4 <_strtod_l+0x8e4>
 800d4a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d4a4:	f77f ae5b 	ble.w	800d15e <_strtod_l+0x56e>
 800d4a8:	4a96      	ldr	r2, [pc, #600]	; (800d704 <_strtod_l+0xb14>)
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d4b0:	4650      	mov	r0, sl
 800d4b2:	4659      	mov	r1, fp
 800d4b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d4b8:	f7f3 f87c 	bl	80005b4 <__aeabi_dmul>
 800d4bc:	4682      	mov	sl, r0
 800d4be:	468b      	mov	fp, r1
 800d4c0:	2900      	cmp	r1, #0
 800d4c2:	f47f adbe 	bne.w	800d042 <_strtod_l+0x452>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f47f adbb 	bne.w	800d042 <_strtod_l+0x452>
 800d4cc:	2322      	movs	r3, #34	; 0x22
 800d4ce:	f8c9 3000 	str.w	r3, [r9]
 800d4d2:	e5b6      	b.n	800d042 <_strtod_l+0x452>
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d4da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d4de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d4e2:	f04f 3aff 	mov.w	sl, #4294967295
 800d4e6:	e76a      	b.n	800d3be <_strtod_l+0x7ce>
 800d4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ea:	b193      	cbz	r3, 800d512 <_strtod_l+0x922>
 800d4ec:	422b      	tst	r3, r5
 800d4ee:	f43f af66 	beq.w	800d3be <_strtod_l+0x7ce>
 800d4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4f4:	9a04      	ldr	r2, [sp, #16]
 800d4f6:	4650      	mov	r0, sl
 800d4f8:	4659      	mov	r1, fp
 800d4fa:	b173      	cbz	r3, 800d51a <_strtod_l+0x92a>
 800d4fc:	f7ff fb5c 	bl	800cbb8 <sulp>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d508:	f7f2 fe9e 	bl	8000248 <__adddf3>
 800d50c:	4682      	mov	sl, r0
 800d50e:	468b      	mov	fp, r1
 800d510:	e755      	b.n	800d3be <_strtod_l+0x7ce>
 800d512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d514:	ea13 0f0a 	tst.w	r3, sl
 800d518:	e7e9      	b.n	800d4ee <_strtod_l+0x8fe>
 800d51a:	f7ff fb4d 	bl	800cbb8 <sulp>
 800d51e:	4602      	mov	r2, r0
 800d520:	460b      	mov	r3, r1
 800d522:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d526:	f7f2 fe8d 	bl	8000244 <__aeabi_dsub>
 800d52a:	2200      	movs	r2, #0
 800d52c:	2300      	movs	r3, #0
 800d52e:	4682      	mov	sl, r0
 800d530:	468b      	mov	fp, r1
 800d532:	f7f3 faa7 	bl	8000a84 <__aeabi_dcmpeq>
 800d536:	2800      	cmp	r0, #0
 800d538:	f47f ae11 	bne.w	800d15e <_strtod_l+0x56e>
 800d53c:	e73f      	b.n	800d3be <_strtod_l+0x7ce>
 800d53e:	4641      	mov	r1, r8
 800d540:	4620      	mov	r0, r4
 800d542:	f001 f824 	bl	800e58e <__ratio>
 800d546:	ec57 6b10 	vmov	r6, r7, d0
 800d54a:	2200      	movs	r2, #0
 800d54c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d550:	ee10 0a10 	vmov	r0, s0
 800d554:	4639      	mov	r1, r7
 800d556:	f7f3 faa9 	bl	8000aac <__aeabi_dcmple>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d077      	beq.n	800d64e <_strtod_l+0xa5e>
 800d55e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d560:	2b00      	cmp	r3, #0
 800d562:	d04a      	beq.n	800d5fa <_strtod_l+0xa0a>
 800d564:	4b68      	ldr	r3, [pc, #416]	; (800d708 <_strtod_l+0xb18>)
 800d566:	2200      	movs	r2, #0
 800d568:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d56c:	4f66      	ldr	r7, [pc, #408]	; (800d708 <_strtod_l+0xb18>)
 800d56e:	2600      	movs	r6, #0
 800d570:	4b62      	ldr	r3, [pc, #392]	; (800d6fc <_strtod_l+0xb0c>)
 800d572:	402b      	ands	r3, r5
 800d574:	930f      	str	r3, [sp, #60]	; 0x3c
 800d576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d578:	4b64      	ldr	r3, [pc, #400]	; (800d70c <_strtod_l+0xb1c>)
 800d57a:	429a      	cmp	r2, r3
 800d57c:	f040 80ce 	bne.w	800d71c <_strtod_l+0xb2c>
 800d580:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d584:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d588:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d58c:	ec4b ab10 	vmov	d0, sl, fp
 800d590:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d594:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d598:	f000 ff34 	bl	800e404 <__ulp>
 800d59c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d5a0:	ec53 2b10 	vmov	r2, r3, d0
 800d5a4:	f7f3 f806 	bl	80005b4 <__aeabi_dmul>
 800d5a8:	4652      	mov	r2, sl
 800d5aa:	465b      	mov	r3, fp
 800d5ac:	f7f2 fe4c 	bl	8000248 <__adddf3>
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	4952      	ldr	r1, [pc, #328]	; (800d6fc <_strtod_l+0xb0c>)
 800d5b4:	4a56      	ldr	r2, [pc, #344]	; (800d710 <_strtod_l+0xb20>)
 800d5b6:	4019      	ands	r1, r3
 800d5b8:	4291      	cmp	r1, r2
 800d5ba:	4682      	mov	sl, r0
 800d5bc:	d95b      	bls.n	800d676 <_strtod_l+0xa86>
 800d5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d103      	bne.n	800d5d0 <_strtod_l+0x9e0>
 800d5c8:	9b08      	ldr	r3, [sp, #32]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	f43f ad2e 	beq.w	800d02c <_strtod_l+0x43c>
 800d5d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800d700 <_strtod_l+0xb10>
 800d5d4:	f04f 3aff 	mov.w	sl, #4294967295
 800d5d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d5da:	4648      	mov	r0, r9
 800d5dc:	f000 fc7b 	bl	800ded6 <_Bfree>
 800d5e0:	9905      	ldr	r1, [sp, #20]
 800d5e2:	4648      	mov	r0, r9
 800d5e4:	f000 fc77 	bl	800ded6 <_Bfree>
 800d5e8:	4641      	mov	r1, r8
 800d5ea:	4648      	mov	r0, r9
 800d5ec:	f000 fc73 	bl	800ded6 <_Bfree>
 800d5f0:	4621      	mov	r1, r4
 800d5f2:	4648      	mov	r0, r9
 800d5f4:	f000 fc6f 	bl	800ded6 <_Bfree>
 800d5f8:	e619      	b.n	800d22e <_strtod_l+0x63e>
 800d5fa:	f1ba 0f00 	cmp.w	sl, #0
 800d5fe:	d11a      	bne.n	800d636 <_strtod_l+0xa46>
 800d600:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d604:	b9eb      	cbnz	r3, 800d642 <_strtod_l+0xa52>
 800d606:	2200      	movs	r2, #0
 800d608:	4b3f      	ldr	r3, [pc, #252]	; (800d708 <_strtod_l+0xb18>)
 800d60a:	4630      	mov	r0, r6
 800d60c:	4639      	mov	r1, r7
 800d60e:	f7f3 fa43 	bl	8000a98 <__aeabi_dcmplt>
 800d612:	b9c8      	cbnz	r0, 800d648 <_strtod_l+0xa58>
 800d614:	4630      	mov	r0, r6
 800d616:	4639      	mov	r1, r7
 800d618:	2200      	movs	r2, #0
 800d61a:	4b3e      	ldr	r3, [pc, #248]	; (800d714 <_strtod_l+0xb24>)
 800d61c:	f7f2 ffca 	bl	80005b4 <__aeabi_dmul>
 800d620:	4606      	mov	r6, r0
 800d622:	460f      	mov	r7, r1
 800d624:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d628:	9618      	str	r6, [sp, #96]	; 0x60
 800d62a:	9319      	str	r3, [sp, #100]	; 0x64
 800d62c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d630:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d634:	e79c      	b.n	800d570 <_strtod_l+0x980>
 800d636:	f1ba 0f01 	cmp.w	sl, #1
 800d63a:	d102      	bne.n	800d642 <_strtod_l+0xa52>
 800d63c:	2d00      	cmp	r5, #0
 800d63e:	f43f ad8e 	beq.w	800d15e <_strtod_l+0x56e>
 800d642:	2200      	movs	r2, #0
 800d644:	4b34      	ldr	r3, [pc, #208]	; (800d718 <_strtod_l+0xb28>)
 800d646:	e78f      	b.n	800d568 <_strtod_l+0x978>
 800d648:	2600      	movs	r6, #0
 800d64a:	4f32      	ldr	r7, [pc, #200]	; (800d714 <_strtod_l+0xb24>)
 800d64c:	e7ea      	b.n	800d624 <_strtod_l+0xa34>
 800d64e:	4b31      	ldr	r3, [pc, #196]	; (800d714 <_strtod_l+0xb24>)
 800d650:	4630      	mov	r0, r6
 800d652:	4639      	mov	r1, r7
 800d654:	2200      	movs	r2, #0
 800d656:	f7f2 ffad 	bl	80005b4 <__aeabi_dmul>
 800d65a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d65c:	4606      	mov	r6, r0
 800d65e:	460f      	mov	r7, r1
 800d660:	b933      	cbnz	r3, 800d670 <_strtod_l+0xa80>
 800d662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d666:	9010      	str	r0, [sp, #64]	; 0x40
 800d668:	9311      	str	r3, [sp, #68]	; 0x44
 800d66a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d66e:	e7df      	b.n	800d630 <_strtod_l+0xa40>
 800d670:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d674:	e7f9      	b.n	800d66a <_strtod_l+0xa7a>
 800d676:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d67a:	9b04      	ldr	r3, [sp, #16]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1ab      	bne.n	800d5d8 <_strtod_l+0x9e8>
 800d680:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d684:	0d1b      	lsrs	r3, r3, #20
 800d686:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d688:	051b      	lsls	r3, r3, #20
 800d68a:	429a      	cmp	r2, r3
 800d68c:	465d      	mov	r5, fp
 800d68e:	d1a3      	bne.n	800d5d8 <_strtod_l+0x9e8>
 800d690:	4639      	mov	r1, r7
 800d692:	4630      	mov	r0, r6
 800d694:	f7f3 fa28 	bl	8000ae8 <__aeabi_d2iz>
 800d698:	f7f2 ff22 	bl	80004e0 <__aeabi_i2d>
 800d69c:	460b      	mov	r3, r1
 800d69e:	4602      	mov	r2, r0
 800d6a0:	4639      	mov	r1, r7
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	f7f2 fdce 	bl	8000244 <__aeabi_dsub>
 800d6a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6aa:	4606      	mov	r6, r0
 800d6ac:	460f      	mov	r7, r1
 800d6ae:	b933      	cbnz	r3, 800d6be <_strtod_l+0xace>
 800d6b0:	f1ba 0f00 	cmp.w	sl, #0
 800d6b4:	d103      	bne.n	800d6be <_strtod_l+0xace>
 800d6b6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800d6ba:	2d00      	cmp	r5, #0
 800d6bc:	d06d      	beq.n	800d79a <_strtod_l+0xbaa>
 800d6be:	a30a      	add	r3, pc, #40	; (adr r3, 800d6e8 <_strtod_l+0xaf8>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	4639      	mov	r1, r7
 800d6c8:	f7f3 f9e6 	bl	8000a98 <__aeabi_dcmplt>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	f47f acb8 	bne.w	800d042 <_strtod_l+0x452>
 800d6d2:	a307      	add	r3, pc, #28	; (adr r3, 800d6f0 <_strtod_l+0xb00>)
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	4630      	mov	r0, r6
 800d6da:	4639      	mov	r1, r7
 800d6dc:	f7f3 f9fa 	bl	8000ad4 <__aeabi_dcmpgt>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	f43f af79 	beq.w	800d5d8 <_strtod_l+0x9e8>
 800d6e6:	e4ac      	b.n	800d042 <_strtod_l+0x452>
 800d6e8:	94a03595 	.word	0x94a03595
 800d6ec:	3fdfffff 	.word	0x3fdfffff
 800d6f0:	35afe535 	.word	0x35afe535
 800d6f4:	3fe00000 	.word	0x3fe00000
 800d6f8:	000fffff 	.word	0x000fffff
 800d6fc:	7ff00000 	.word	0x7ff00000
 800d700:	7fefffff 	.word	0x7fefffff
 800d704:	39500000 	.word	0x39500000
 800d708:	3ff00000 	.word	0x3ff00000
 800d70c:	7fe00000 	.word	0x7fe00000
 800d710:	7c9fffff 	.word	0x7c9fffff
 800d714:	3fe00000 	.word	0x3fe00000
 800d718:	bff00000 	.word	0xbff00000
 800d71c:	9b04      	ldr	r3, [sp, #16]
 800d71e:	b333      	cbz	r3, 800d76e <_strtod_l+0xb7e>
 800d720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d722:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d726:	d822      	bhi.n	800d76e <_strtod_l+0xb7e>
 800d728:	a327      	add	r3, pc, #156	; (adr r3, 800d7c8 <_strtod_l+0xbd8>)
 800d72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72e:	4630      	mov	r0, r6
 800d730:	4639      	mov	r1, r7
 800d732:	f7f3 f9bb 	bl	8000aac <__aeabi_dcmple>
 800d736:	b1a0      	cbz	r0, 800d762 <_strtod_l+0xb72>
 800d738:	4639      	mov	r1, r7
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7f3 f9fc 	bl	8000b38 <__aeabi_d2uiz>
 800d740:	2800      	cmp	r0, #0
 800d742:	bf08      	it	eq
 800d744:	2001      	moveq	r0, #1
 800d746:	f7f2 febb 	bl	80004c0 <__aeabi_ui2d>
 800d74a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d74c:	4606      	mov	r6, r0
 800d74e:	460f      	mov	r7, r1
 800d750:	bb03      	cbnz	r3, 800d794 <_strtod_l+0xba4>
 800d752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d756:	9012      	str	r0, [sp, #72]	; 0x48
 800d758:	9313      	str	r3, [sp, #76]	; 0x4c
 800d75a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d75e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d766:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d76a:	1a9b      	subs	r3, r3, r2
 800d76c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d76e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d772:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d776:	f000 fe45 	bl	800e404 <__ulp>
 800d77a:	4650      	mov	r0, sl
 800d77c:	ec53 2b10 	vmov	r2, r3, d0
 800d780:	4659      	mov	r1, fp
 800d782:	f7f2 ff17 	bl	80005b4 <__aeabi_dmul>
 800d786:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d78a:	f7f2 fd5d 	bl	8000248 <__adddf3>
 800d78e:	4682      	mov	sl, r0
 800d790:	468b      	mov	fp, r1
 800d792:	e772      	b.n	800d67a <_strtod_l+0xa8a>
 800d794:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800d798:	e7df      	b.n	800d75a <_strtod_l+0xb6a>
 800d79a:	a30d      	add	r3, pc, #52	; (adr r3, 800d7d0 <_strtod_l+0xbe0>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f3 f97a 	bl	8000a98 <__aeabi_dcmplt>
 800d7a4:	e79c      	b.n	800d6e0 <_strtod_l+0xaf0>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	930d      	str	r3, [sp, #52]	; 0x34
 800d7aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d7ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7ae:	6013      	str	r3, [r2, #0]
 800d7b0:	f7ff ba61 	b.w	800cc76 <_strtod_l+0x86>
 800d7b4:	2b65      	cmp	r3, #101	; 0x65
 800d7b6:	f04f 0200 	mov.w	r2, #0
 800d7ba:	f43f ab4e 	beq.w	800ce5a <_strtod_l+0x26a>
 800d7be:	2101      	movs	r1, #1
 800d7c0:	4614      	mov	r4, r2
 800d7c2:	9104      	str	r1, [sp, #16]
 800d7c4:	f7ff bacb 	b.w	800cd5e <_strtod_l+0x16e>
 800d7c8:	ffc00000 	.word	0xffc00000
 800d7cc:	41dfffff 	.word	0x41dfffff
 800d7d0:	94a03595 	.word	0x94a03595
 800d7d4:	3fcfffff 	.word	0x3fcfffff

0800d7d8 <strtod>:
 800d7d8:	4b07      	ldr	r3, [pc, #28]	; (800d7f8 <strtod+0x20>)
 800d7da:	4a08      	ldr	r2, [pc, #32]	; (800d7fc <strtod+0x24>)
 800d7dc:	b410      	push	{r4}
 800d7de:	681c      	ldr	r4, [r3, #0]
 800d7e0:	6a23      	ldr	r3, [r4, #32]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	bf08      	it	eq
 800d7e6:	4613      	moveq	r3, r2
 800d7e8:	460a      	mov	r2, r1
 800d7ea:	4601      	mov	r1, r0
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7f2:	f7ff b9fd 	b.w	800cbf0 <_strtod_l>
 800d7f6:	bf00      	nop
 800d7f8:	20000018 	.word	0x20000018
 800d7fc:	2000007c 	.word	0x2000007c

0800d800 <__ascii_wctomb>:
 800d800:	b149      	cbz	r1, 800d816 <__ascii_wctomb+0x16>
 800d802:	2aff      	cmp	r2, #255	; 0xff
 800d804:	bf85      	ittet	hi
 800d806:	238a      	movhi	r3, #138	; 0x8a
 800d808:	6003      	strhi	r3, [r0, #0]
 800d80a:	700a      	strbls	r2, [r1, #0]
 800d80c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d810:	bf98      	it	ls
 800d812:	2001      	movls	r0, #1
 800d814:	4770      	bx	lr
 800d816:	4608      	mov	r0, r1
 800d818:	4770      	bx	lr

0800d81a <rshift>:
 800d81a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d81c:	6906      	ldr	r6, [r0, #16]
 800d81e:	114b      	asrs	r3, r1, #5
 800d820:	429e      	cmp	r6, r3
 800d822:	f100 0414 	add.w	r4, r0, #20
 800d826:	dd30      	ble.n	800d88a <rshift+0x70>
 800d828:	f011 011f 	ands.w	r1, r1, #31
 800d82c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d830:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d834:	d108      	bne.n	800d848 <rshift+0x2e>
 800d836:	4621      	mov	r1, r4
 800d838:	42b2      	cmp	r2, r6
 800d83a:	460b      	mov	r3, r1
 800d83c:	d211      	bcs.n	800d862 <rshift+0x48>
 800d83e:	f852 3b04 	ldr.w	r3, [r2], #4
 800d842:	f841 3b04 	str.w	r3, [r1], #4
 800d846:	e7f7      	b.n	800d838 <rshift+0x1e>
 800d848:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d84c:	f1c1 0c20 	rsb	ip, r1, #32
 800d850:	40cd      	lsrs	r5, r1
 800d852:	3204      	adds	r2, #4
 800d854:	4623      	mov	r3, r4
 800d856:	42b2      	cmp	r2, r6
 800d858:	4617      	mov	r7, r2
 800d85a:	d30c      	bcc.n	800d876 <rshift+0x5c>
 800d85c:	601d      	str	r5, [r3, #0]
 800d85e:	b105      	cbz	r5, 800d862 <rshift+0x48>
 800d860:	3304      	adds	r3, #4
 800d862:	1b1a      	subs	r2, r3, r4
 800d864:	42a3      	cmp	r3, r4
 800d866:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d86a:	bf08      	it	eq
 800d86c:	2300      	moveq	r3, #0
 800d86e:	6102      	str	r2, [r0, #16]
 800d870:	bf08      	it	eq
 800d872:	6143      	streq	r3, [r0, #20]
 800d874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d876:	683f      	ldr	r7, [r7, #0]
 800d878:	fa07 f70c 	lsl.w	r7, r7, ip
 800d87c:	433d      	orrs	r5, r7
 800d87e:	f843 5b04 	str.w	r5, [r3], #4
 800d882:	f852 5b04 	ldr.w	r5, [r2], #4
 800d886:	40cd      	lsrs	r5, r1
 800d888:	e7e5      	b.n	800d856 <rshift+0x3c>
 800d88a:	4623      	mov	r3, r4
 800d88c:	e7e9      	b.n	800d862 <rshift+0x48>

0800d88e <__hexdig_fun>:
 800d88e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d892:	2b09      	cmp	r3, #9
 800d894:	d802      	bhi.n	800d89c <__hexdig_fun+0xe>
 800d896:	3820      	subs	r0, #32
 800d898:	b2c0      	uxtb	r0, r0
 800d89a:	4770      	bx	lr
 800d89c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d8a0:	2b05      	cmp	r3, #5
 800d8a2:	d801      	bhi.n	800d8a8 <__hexdig_fun+0x1a>
 800d8a4:	3847      	subs	r0, #71	; 0x47
 800d8a6:	e7f7      	b.n	800d898 <__hexdig_fun+0xa>
 800d8a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d8ac:	2b05      	cmp	r3, #5
 800d8ae:	d801      	bhi.n	800d8b4 <__hexdig_fun+0x26>
 800d8b0:	3827      	subs	r0, #39	; 0x27
 800d8b2:	e7f1      	b.n	800d898 <__hexdig_fun+0xa>
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	4770      	bx	lr

0800d8b8 <__gethex>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	b08b      	sub	sp, #44	; 0x2c
 800d8be:	468a      	mov	sl, r1
 800d8c0:	9002      	str	r0, [sp, #8]
 800d8c2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d8c4:	9306      	str	r3, [sp, #24]
 800d8c6:	4690      	mov	r8, r2
 800d8c8:	f000 facd 	bl	800de66 <__localeconv_l>
 800d8cc:	6803      	ldr	r3, [r0, #0]
 800d8ce:	9303      	str	r3, [sp, #12]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7f2 fcab 	bl	800022c <strlen>
 800d8d6:	9b03      	ldr	r3, [sp, #12]
 800d8d8:	9001      	str	r0, [sp, #4]
 800d8da:	4403      	add	r3, r0
 800d8dc:	f04f 0b00 	mov.w	fp, #0
 800d8e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d8e4:	9307      	str	r3, [sp, #28]
 800d8e6:	f8da 3000 	ldr.w	r3, [sl]
 800d8ea:	3302      	adds	r3, #2
 800d8ec:	461f      	mov	r7, r3
 800d8ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d8f2:	2830      	cmp	r0, #48	; 0x30
 800d8f4:	d06c      	beq.n	800d9d0 <__gethex+0x118>
 800d8f6:	f7ff ffca 	bl	800d88e <__hexdig_fun>
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d16a      	bne.n	800d9d6 <__gethex+0x11e>
 800d900:	9a01      	ldr	r2, [sp, #4]
 800d902:	9903      	ldr	r1, [sp, #12]
 800d904:	4638      	mov	r0, r7
 800d906:	f7ff f945 	bl	800cb94 <strncmp>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d166      	bne.n	800d9dc <__gethex+0x124>
 800d90e:	9b01      	ldr	r3, [sp, #4]
 800d910:	5cf8      	ldrb	r0, [r7, r3]
 800d912:	18fe      	adds	r6, r7, r3
 800d914:	f7ff ffbb 	bl	800d88e <__hexdig_fun>
 800d918:	2800      	cmp	r0, #0
 800d91a:	d062      	beq.n	800d9e2 <__gethex+0x12a>
 800d91c:	4633      	mov	r3, r6
 800d91e:	7818      	ldrb	r0, [r3, #0]
 800d920:	2830      	cmp	r0, #48	; 0x30
 800d922:	461f      	mov	r7, r3
 800d924:	f103 0301 	add.w	r3, r3, #1
 800d928:	d0f9      	beq.n	800d91e <__gethex+0x66>
 800d92a:	f7ff ffb0 	bl	800d88e <__hexdig_fun>
 800d92e:	fab0 f580 	clz	r5, r0
 800d932:	096d      	lsrs	r5, r5, #5
 800d934:	4634      	mov	r4, r6
 800d936:	f04f 0b01 	mov.w	fp, #1
 800d93a:	463a      	mov	r2, r7
 800d93c:	4616      	mov	r6, r2
 800d93e:	3201      	adds	r2, #1
 800d940:	7830      	ldrb	r0, [r6, #0]
 800d942:	f7ff ffa4 	bl	800d88e <__hexdig_fun>
 800d946:	2800      	cmp	r0, #0
 800d948:	d1f8      	bne.n	800d93c <__gethex+0x84>
 800d94a:	9a01      	ldr	r2, [sp, #4]
 800d94c:	9903      	ldr	r1, [sp, #12]
 800d94e:	4630      	mov	r0, r6
 800d950:	f7ff f920 	bl	800cb94 <strncmp>
 800d954:	b950      	cbnz	r0, 800d96c <__gethex+0xb4>
 800d956:	b954      	cbnz	r4, 800d96e <__gethex+0xb6>
 800d958:	9b01      	ldr	r3, [sp, #4]
 800d95a:	18f4      	adds	r4, r6, r3
 800d95c:	4622      	mov	r2, r4
 800d95e:	4616      	mov	r6, r2
 800d960:	3201      	adds	r2, #1
 800d962:	7830      	ldrb	r0, [r6, #0]
 800d964:	f7ff ff93 	bl	800d88e <__hexdig_fun>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d1f8      	bne.n	800d95e <__gethex+0xa6>
 800d96c:	b10c      	cbz	r4, 800d972 <__gethex+0xba>
 800d96e:	1ba4      	subs	r4, r4, r6
 800d970:	00a4      	lsls	r4, r4, #2
 800d972:	7833      	ldrb	r3, [r6, #0]
 800d974:	2b50      	cmp	r3, #80	; 0x50
 800d976:	d001      	beq.n	800d97c <__gethex+0xc4>
 800d978:	2b70      	cmp	r3, #112	; 0x70
 800d97a:	d140      	bne.n	800d9fe <__gethex+0x146>
 800d97c:	7873      	ldrb	r3, [r6, #1]
 800d97e:	2b2b      	cmp	r3, #43	; 0x2b
 800d980:	d031      	beq.n	800d9e6 <__gethex+0x12e>
 800d982:	2b2d      	cmp	r3, #45	; 0x2d
 800d984:	d033      	beq.n	800d9ee <__gethex+0x136>
 800d986:	1c71      	adds	r1, r6, #1
 800d988:	f04f 0900 	mov.w	r9, #0
 800d98c:	7808      	ldrb	r0, [r1, #0]
 800d98e:	f7ff ff7e 	bl	800d88e <__hexdig_fun>
 800d992:	1e43      	subs	r3, r0, #1
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b18      	cmp	r3, #24
 800d998:	d831      	bhi.n	800d9fe <__gethex+0x146>
 800d99a:	f1a0 0210 	sub.w	r2, r0, #16
 800d99e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9a2:	f7ff ff74 	bl	800d88e <__hexdig_fun>
 800d9a6:	1e43      	subs	r3, r0, #1
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	2b18      	cmp	r3, #24
 800d9ac:	d922      	bls.n	800d9f4 <__gethex+0x13c>
 800d9ae:	f1b9 0f00 	cmp.w	r9, #0
 800d9b2:	d000      	beq.n	800d9b6 <__gethex+0xfe>
 800d9b4:	4252      	negs	r2, r2
 800d9b6:	4414      	add	r4, r2
 800d9b8:	f8ca 1000 	str.w	r1, [sl]
 800d9bc:	b30d      	cbz	r5, 800da02 <__gethex+0x14a>
 800d9be:	f1bb 0f00 	cmp.w	fp, #0
 800d9c2:	bf0c      	ite	eq
 800d9c4:	2706      	moveq	r7, #6
 800d9c6:	2700      	movne	r7, #0
 800d9c8:	4638      	mov	r0, r7
 800d9ca:	b00b      	add	sp, #44	; 0x2c
 800d9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d0:	f10b 0b01 	add.w	fp, fp, #1
 800d9d4:	e78a      	b.n	800d8ec <__gethex+0x34>
 800d9d6:	2500      	movs	r5, #0
 800d9d8:	462c      	mov	r4, r5
 800d9da:	e7ae      	b.n	800d93a <__gethex+0x82>
 800d9dc:	463e      	mov	r6, r7
 800d9de:	2501      	movs	r5, #1
 800d9e0:	e7c7      	b.n	800d972 <__gethex+0xba>
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	e7fb      	b.n	800d9de <__gethex+0x126>
 800d9e6:	f04f 0900 	mov.w	r9, #0
 800d9ea:	1cb1      	adds	r1, r6, #2
 800d9ec:	e7ce      	b.n	800d98c <__gethex+0xd4>
 800d9ee:	f04f 0901 	mov.w	r9, #1
 800d9f2:	e7fa      	b.n	800d9ea <__gethex+0x132>
 800d9f4:	230a      	movs	r3, #10
 800d9f6:	fb03 0202 	mla	r2, r3, r2, r0
 800d9fa:	3a10      	subs	r2, #16
 800d9fc:	e7cf      	b.n	800d99e <__gethex+0xe6>
 800d9fe:	4631      	mov	r1, r6
 800da00:	e7da      	b.n	800d9b8 <__gethex+0x100>
 800da02:	1bf3      	subs	r3, r6, r7
 800da04:	3b01      	subs	r3, #1
 800da06:	4629      	mov	r1, r5
 800da08:	2b07      	cmp	r3, #7
 800da0a:	dc49      	bgt.n	800daa0 <__gethex+0x1e8>
 800da0c:	9802      	ldr	r0, [sp, #8]
 800da0e:	f000 fa2e 	bl	800de6e <_Balloc>
 800da12:	9b01      	ldr	r3, [sp, #4]
 800da14:	f100 0914 	add.w	r9, r0, #20
 800da18:	f04f 0b00 	mov.w	fp, #0
 800da1c:	f1c3 0301 	rsb	r3, r3, #1
 800da20:	4605      	mov	r5, r0
 800da22:	f8cd 9010 	str.w	r9, [sp, #16]
 800da26:	46da      	mov	sl, fp
 800da28:	9308      	str	r3, [sp, #32]
 800da2a:	42b7      	cmp	r7, r6
 800da2c:	d33b      	bcc.n	800daa6 <__gethex+0x1ee>
 800da2e:	9804      	ldr	r0, [sp, #16]
 800da30:	f840 ab04 	str.w	sl, [r0], #4
 800da34:	eba0 0009 	sub.w	r0, r0, r9
 800da38:	1080      	asrs	r0, r0, #2
 800da3a:	6128      	str	r0, [r5, #16]
 800da3c:	0147      	lsls	r7, r0, #5
 800da3e:	4650      	mov	r0, sl
 800da40:	f000 fad9 	bl	800dff6 <__hi0bits>
 800da44:	f8d8 6000 	ldr.w	r6, [r8]
 800da48:	1a3f      	subs	r7, r7, r0
 800da4a:	42b7      	cmp	r7, r6
 800da4c:	dd64      	ble.n	800db18 <__gethex+0x260>
 800da4e:	1bbf      	subs	r7, r7, r6
 800da50:	4639      	mov	r1, r7
 800da52:	4628      	mov	r0, r5
 800da54:	f000 fde8 	bl	800e628 <__any_on>
 800da58:	4682      	mov	sl, r0
 800da5a:	b178      	cbz	r0, 800da7c <__gethex+0x1c4>
 800da5c:	1e7b      	subs	r3, r7, #1
 800da5e:	1159      	asrs	r1, r3, #5
 800da60:	f003 021f 	and.w	r2, r3, #31
 800da64:	f04f 0a01 	mov.w	sl, #1
 800da68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da6c:	fa0a f202 	lsl.w	r2, sl, r2
 800da70:	420a      	tst	r2, r1
 800da72:	d003      	beq.n	800da7c <__gethex+0x1c4>
 800da74:	4553      	cmp	r3, sl
 800da76:	dc46      	bgt.n	800db06 <__gethex+0x24e>
 800da78:	f04f 0a02 	mov.w	sl, #2
 800da7c:	4639      	mov	r1, r7
 800da7e:	4628      	mov	r0, r5
 800da80:	f7ff fecb 	bl	800d81a <rshift>
 800da84:	443c      	add	r4, r7
 800da86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da8a:	42a3      	cmp	r3, r4
 800da8c:	da52      	bge.n	800db34 <__gethex+0x27c>
 800da8e:	4629      	mov	r1, r5
 800da90:	9802      	ldr	r0, [sp, #8]
 800da92:	f000 fa20 	bl	800ded6 <_Bfree>
 800da96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da98:	2300      	movs	r3, #0
 800da9a:	6013      	str	r3, [r2, #0]
 800da9c:	27a3      	movs	r7, #163	; 0xa3
 800da9e:	e793      	b.n	800d9c8 <__gethex+0x110>
 800daa0:	3101      	adds	r1, #1
 800daa2:	105b      	asrs	r3, r3, #1
 800daa4:	e7b0      	b.n	800da08 <__gethex+0x150>
 800daa6:	1e73      	subs	r3, r6, #1
 800daa8:	9305      	str	r3, [sp, #20]
 800daaa:	9a07      	ldr	r2, [sp, #28]
 800daac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d018      	beq.n	800dae6 <__gethex+0x22e>
 800dab4:	f1bb 0f20 	cmp.w	fp, #32
 800dab8:	d107      	bne.n	800daca <__gethex+0x212>
 800daba:	9b04      	ldr	r3, [sp, #16]
 800dabc:	f8c3 a000 	str.w	sl, [r3]
 800dac0:	3304      	adds	r3, #4
 800dac2:	f04f 0a00 	mov.w	sl, #0
 800dac6:	9304      	str	r3, [sp, #16]
 800dac8:	46d3      	mov	fp, sl
 800daca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dace:	f7ff fede 	bl	800d88e <__hexdig_fun>
 800dad2:	f000 000f 	and.w	r0, r0, #15
 800dad6:	fa00 f00b 	lsl.w	r0, r0, fp
 800dada:	ea4a 0a00 	orr.w	sl, sl, r0
 800dade:	f10b 0b04 	add.w	fp, fp, #4
 800dae2:	9b05      	ldr	r3, [sp, #20]
 800dae4:	e00d      	b.n	800db02 <__gethex+0x24a>
 800dae6:	9b05      	ldr	r3, [sp, #20]
 800dae8:	9a08      	ldr	r2, [sp, #32]
 800daea:	4413      	add	r3, r2
 800daec:	42bb      	cmp	r3, r7
 800daee:	d3e1      	bcc.n	800dab4 <__gethex+0x1fc>
 800daf0:	4618      	mov	r0, r3
 800daf2:	9a01      	ldr	r2, [sp, #4]
 800daf4:	9903      	ldr	r1, [sp, #12]
 800daf6:	9309      	str	r3, [sp, #36]	; 0x24
 800daf8:	f7ff f84c 	bl	800cb94 <strncmp>
 800dafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dafe:	2800      	cmp	r0, #0
 800db00:	d1d8      	bne.n	800dab4 <__gethex+0x1fc>
 800db02:	461e      	mov	r6, r3
 800db04:	e791      	b.n	800da2a <__gethex+0x172>
 800db06:	1eb9      	subs	r1, r7, #2
 800db08:	4628      	mov	r0, r5
 800db0a:	f000 fd8d 	bl	800e628 <__any_on>
 800db0e:	2800      	cmp	r0, #0
 800db10:	d0b2      	beq.n	800da78 <__gethex+0x1c0>
 800db12:	f04f 0a03 	mov.w	sl, #3
 800db16:	e7b1      	b.n	800da7c <__gethex+0x1c4>
 800db18:	da09      	bge.n	800db2e <__gethex+0x276>
 800db1a:	1bf7      	subs	r7, r6, r7
 800db1c:	4629      	mov	r1, r5
 800db1e:	463a      	mov	r2, r7
 800db20:	9802      	ldr	r0, [sp, #8]
 800db22:	f000 fba3 	bl	800e26c <__lshift>
 800db26:	1be4      	subs	r4, r4, r7
 800db28:	4605      	mov	r5, r0
 800db2a:	f100 0914 	add.w	r9, r0, #20
 800db2e:	f04f 0a00 	mov.w	sl, #0
 800db32:	e7a8      	b.n	800da86 <__gethex+0x1ce>
 800db34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800db38:	42a0      	cmp	r0, r4
 800db3a:	dd6a      	ble.n	800dc12 <__gethex+0x35a>
 800db3c:	1b04      	subs	r4, r0, r4
 800db3e:	42a6      	cmp	r6, r4
 800db40:	dc2e      	bgt.n	800dba0 <__gethex+0x2e8>
 800db42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db46:	2b02      	cmp	r3, #2
 800db48:	d022      	beq.n	800db90 <__gethex+0x2d8>
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d024      	beq.n	800db98 <__gethex+0x2e0>
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d115      	bne.n	800db7e <__gethex+0x2c6>
 800db52:	42a6      	cmp	r6, r4
 800db54:	d113      	bne.n	800db7e <__gethex+0x2c6>
 800db56:	2e01      	cmp	r6, #1
 800db58:	dc0b      	bgt.n	800db72 <__gethex+0x2ba>
 800db5a:	9a06      	ldr	r2, [sp, #24]
 800db5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	2301      	movs	r3, #1
 800db64:	612b      	str	r3, [r5, #16]
 800db66:	f8c9 3000 	str.w	r3, [r9]
 800db6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db6c:	2762      	movs	r7, #98	; 0x62
 800db6e:	601d      	str	r5, [r3, #0]
 800db70:	e72a      	b.n	800d9c8 <__gethex+0x110>
 800db72:	1e71      	subs	r1, r6, #1
 800db74:	4628      	mov	r0, r5
 800db76:	f000 fd57 	bl	800e628 <__any_on>
 800db7a:	2800      	cmp	r0, #0
 800db7c:	d1ed      	bne.n	800db5a <__gethex+0x2a2>
 800db7e:	4629      	mov	r1, r5
 800db80:	9802      	ldr	r0, [sp, #8]
 800db82:	f000 f9a8 	bl	800ded6 <_Bfree>
 800db86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db88:	2300      	movs	r3, #0
 800db8a:	6013      	str	r3, [r2, #0]
 800db8c:	2750      	movs	r7, #80	; 0x50
 800db8e:	e71b      	b.n	800d9c8 <__gethex+0x110>
 800db90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db92:	2b00      	cmp	r3, #0
 800db94:	d0e1      	beq.n	800db5a <__gethex+0x2a2>
 800db96:	e7f2      	b.n	800db7e <__gethex+0x2c6>
 800db98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d1dd      	bne.n	800db5a <__gethex+0x2a2>
 800db9e:	e7ee      	b.n	800db7e <__gethex+0x2c6>
 800dba0:	1e67      	subs	r7, r4, #1
 800dba2:	f1ba 0f00 	cmp.w	sl, #0
 800dba6:	d131      	bne.n	800dc0c <__gethex+0x354>
 800dba8:	b127      	cbz	r7, 800dbb4 <__gethex+0x2fc>
 800dbaa:	4639      	mov	r1, r7
 800dbac:	4628      	mov	r0, r5
 800dbae:	f000 fd3b 	bl	800e628 <__any_on>
 800dbb2:	4682      	mov	sl, r0
 800dbb4:	117a      	asrs	r2, r7, #5
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	f007 071f 	and.w	r7, r7, #31
 800dbbc:	fa03 f707 	lsl.w	r7, r3, r7
 800dbc0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	421f      	tst	r7, r3
 800dbc8:	4628      	mov	r0, r5
 800dbca:	bf18      	it	ne
 800dbcc:	f04a 0a02 	orrne.w	sl, sl, #2
 800dbd0:	1b36      	subs	r6, r6, r4
 800dbd2:	f7ff fe22 	bl	800d81a <rshift>
 800dbd6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dbda:	2702      	movs	r7, #2
 800dbdc:	f1ba 0f00 	cmp.w	sl, #0
 800dbe0:	d048      	beq.n	800dc74 <__gethex+0x3bc>
 800dbe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	d015      	beq.n	800dc16 <__gethex+0x35e>
 800dbea:	2b03      	cmp	r3, #3
 800dbec:	d017      	beq.n	800dc1e <__gethex+0x366>
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d109      	bne.n	800dc06 <__gethex+0x34e>
 800dbf2:	f01a 0f02 	tst.w	sl, #2
 800dbf6:	d006      	beq.n	800dc06 <__gethex+0x34e>
 800dbf8:	f8d9 3000 	ldr.w	r3, [r9]
 800dbfc:	ea4a 0a03 	orr.w	sl, sl, r3
 800dc00:	f01a 0f01 	tst.w	sl, #1
 800dc04:	d10e      	bne.n	800dc24 <__gethex+0x36c>
 800dc06:	f047 0710 	orr.w	r7, r7, #16
 800dc0a:	e033      	b.n	800dc74 <__gethex+0x3bc>
 800dc0c:	f04f 0a01 	mov.w	sl, #1
 800dc10:	e7d0      	b.n	800dbb4 <__gethex+0x2fc>
 800dc12:	2701      	movs	r7, #1
 800dc14:	e7e2      	b.n	800dbdc <__gethex+0x324>
 800dc16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc18:	f1c3 0301 	rsb	r3, r3, #1
 800dc1c:	9315      	str	r3, [sp, #84]	; 0x54
 800dc1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d0f0      	beq.n	800dc06 <__gethex+0x34e>
 800dc24:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dc28:	f105 0314 	add.w	r3, r5, #20
 800dc2c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dc30:	eb03 010a 	add.w	r1, r3, sl
 800dc34:	f04f 0c00 	mov.w	ip, #0
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc42:	d01c      	beq.n	800dc7e <__gethex+0x3c6>
 800dc44:	3201      	adds	r2, #1
 800dc46:	6002      	str	r2, [r0, #0]
 800dc48:	2f02      	cmp	r7, #2
 800dc4a:	f105 0314 	add.w	r3, r5, #20
 800dc4e:	d138      	bne.n	800dcc2 <__gethex+0x40a>
 800dc50:	f8d8 2000 	ldr.w	r2, [r8]
 800dc54:	3a01      	subs	r2, #1
 800dc56:	42b2      	cmp	r2, r6
 800dc58:	d10a      	bne.n	800dc70 <__gethex+0x3b8>
 800dc5a:	1171      	asrs	r1, r6, #5
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f006 061f 	and.w	r6, r6, #31
 800dc62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc66:	fa02 f606 	lsl.w	r6, r2, r6
 800dc6a:	421e      	tst	r6, r3
 800dc6c:	bf18      	it	ne
 800dc6e:	4617      	movne	r7, r2
 800dc70:	f047 0720 	orr.w	r7, r7, #32
 800dc74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc76:	601d      	str	r5, [r3, #0]
 800dc78:	9b06      	ldr	r3, [sp, #24]
 800dc7a:	601c      	str	r4, [r3, #0]
 800dc7c:	e6a4      	b.n	800d9c8 <__gethex+0x110>
 800dc7e:	4299      	cmp	r1, r3
 800dc80:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc84:	d8d8      	bhi.n	800dc38 <__gethex+0x380>
 800dc86:	68ab      	ldr	r3, [r5, #8]
 800dc88:	4599      	cmp	r9, r3
 800dc8a:	db12      	blt.n	800dcb2 <__gethex+0x3fa>
 800dc8c:	6869      	ldr	r1, [r5, #4]
 800dc8e:	9802      	ldr	r0, [sp, #8]
 800dc90:	3101      	adds	r1, #1
 800dc92:	f000 f8ec 	bl	800de6e <_Balloc>
 800dc96:	692a      	ldr	r2, [r5, #16]
 800dc98:	3202      	adds	r2, #2
 800dc9a:	f105 010c 	add.w	r1, r5, #12
 800dc9e:	4683      	mov	fp, r0
 800dca0:	0092      	lsls	r2, r2, #2
 800dca2:	300c      	adds	r0, #12
 800dca4:	f7fe fea2 	bl	800c9ec <memcpy>
 800dca8:	4629      	mov	r1, r5
 800dcaa:	9802      	ldr	r0, [sp, #8]
 800dcac:	f000 f913 	bl	800ded6 <_Bfree>
 800dcb0:	465d      	mov	r5, fp
 800dcb2:	692b      	ldr	r3, [r5, #16]
 800dcb4:	1c5a      	adds	r2, r3, #1
 800dcb6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dcba:	612a      	str	r2, [r5, #16]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	615a      	str	r2, [r3, #20]
 800dcc0:	e7c2      	b.n	800dc48 <__gethex+0x390>
 800dcc2:	692a      	ldr	r2, [r5, #16]
 800dcc4:	454a      	cmp	r2, r9
 800dcc6:	dd0b      	ble.n	800dce0 <__gethex+0x428>
 800dcc8:	2101      	movs	r1, #1
 800dcca:	4628      	mov	r0, r5
 800dccc:	f7ff fda5 	bl	800d81a <rshift>
 800dcd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcd4:	3401      	adds	r4, #1
 800dcd6:	42a3      	cmp	r3, r4
 800dcd8:	f6ff aed9 	blt.w	800da8e <__gethex+0x1d6>
 800dcdc:	2701      	movs	r7, #1
 800dcde:	e7c7      	b.n	800dc70 <__gethex+0x3b8>
 800dce0:	f016 061f 	ands.w	r6, r6, #31
 800dce4:	d0fa      	beq.n	800dcdc <__gethex+0x424>
 800dce6:	449a      	add	sl, r3
 800dce8:	f1c6 0620 	rsb	r6, r6, #32
 800dcec:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800dcf0:	f000 f981 	bl	800dff6 <__hi0bits>
 800dcf4:	42b0      	cmp	r0, r6
 800dcf6:	dbe7      	blt.n	800dcc8 <__gethex+0x410>
 800dcf8:	e7f0      	b.n	800dcdc <__gethex+0x424>

0800dcfa <L_shift>:
 800dcfa:	f1c2 0208 	rsb	r2, r2, #8
 800dcfe:	0092      	lsls	r2, r2, #2
 800dd00:	b570      	push	{r4, r5, r6, lr}
 800dd02:	f1c2 0620 	rsb	r6, r2, #32
 800dd06:	6843      	ldr	r3, [r0, #4]
 800dd08:	6804      	ldr	r4, [r0, #0]
 800dd0a:	fa03 f506 	lsl.w	r5, r3, r6
 800dd0e:	432c      	orrs	r4, r5
 800dd10:	40d3      	lsrs	r3, r2
 800dd12:	6004      	str	r4, [r0, #0]
 800dd14:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd18:	4288      	cmp	r0, r1
 800dd1a:	d3f4      	bcc.n	800dd06 <L_shift+0xc>
 800dd1c:	bd70      	pop	{r4, r5, r6, pc}

0800dd1e <__match>:
 800dd1e:	b530      	push	{r4, r5, lr}
 800dd20:	6803      	ldr	r3, [r0, #0]
 800dd22:	3301      	adds	r3, #1
 800dd24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd28:	b914      	cbnz	r4, 800dd30 <__match+0x12>
 800dd2a:	6003      	str	r3, [r0, #0]
 800dd2c:	2001      	movs	r0, #1
 800dd2e:	bd30      	pop	{r4, r5, pc}
 800dd30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd34:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dd38:	2d19      	cmp	r5, #25
 800dd3a:	bf98      	it	ls
 800dd3c:	3220      	addls	r2, #32
 800dd3e:	42a2      	cmp	r2, r4
 800dd40:	d0f0      	beq.n	800dd24 <__match+0x6>
 800dd42:	2000      	movs	r0, #0
 800dd44:	e7f3      	b.n	800dd2e <__match+0x10>

0800dd46 <__hexnan>:
 800dd46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4a:	680b      	ldr	r3, [r1, #0]
 800dd4c:	6801      	ldr	r1, [r0, #0]
 800dd4e:	115f      	asrs	r7, r3, #5
 800dd50:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800dd54:	f013 031f 	ands.w	r3, r3, #31
 800dd58:	b087      	sub	sp, #28
 800dd5a:	bf18      	it	ne
 800dd5c:	3704      	addne	r7, #4
 800dd5e:	2500      	movs	r5, #0
 800dd60:	1f3e      	subs	r6, r7, #4
 800dd62:	4682      	mov	sl, r0
 800dd64:	4690      	mov	r8, r2
 800dd66:	9301      	str	r3, [sp, #4]
 800dd68:	f847 5c04 	str.w	r5, [r7, #-4]
 800dd6c:	46b1      	mov	r9, r6
 800dd6e:	4634      	mov	r4, r6
 800dd70:	9502      	str	r5, [sp, #8]
 800dd72:	46ab      	mov	fp, r5
 800dd74:	784a      	ldrb	r2, [r1, #1]
 800dd76:	1c4b      	adds	r3, r1, #1
 800dd78:	9303      	str	r3, [sp, #12]
 800dd7a:	b342      	cbz	r2, 800ddce <__hexnan+0x88>
 800dd7c:	4610      	mov	r0, r2
 800dd7e:	9105      	str	r1, [sp, #20]
 800dd80:	9204      	str	r2, [sp, #16]
 800dd82:	f7ff fd84 	bl	800d88e <__hexdig_fun>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d143      	bne.n	800de12 <__hexnan+0xcc>
 800dd8a:	9a04      	ldr	r2, [sp, #16]
 800dd8c:	9905      	ldr	r1, [sp, #20]
 800dd8e:	2a20      	cmp	r2, #32
 800dd90:	d818      	bhi.n	800ddc4 <__hexnan+0x7e>
 800dd92:	9b02      	ldr	r3, [sp, #8]
 800dd94:	459b      	cmp	fp, r3
 800dd96:	dd13      	ble.n	800ddc0 <__hexnan+0x7a>
 800dd98:	454c      	cmp	r4, r9
 800dd9a:	d206      	bcs.n	800ddaa <__hexnan+0x64>
 800dd9c:	2d07      	cmp	r5, #7
 800dd9e:	dc04      	bgt.n	800ddaa <__hexnan+0x64>
 800dda0:	462a      	mov	r2, r5
 800dda2:	4649      	mov	r1, r9
 800dda4:	4620      	mov	r0, r4
 800dda6:	f7ff ffa8 	bl	800dcfa <L_shift>
 800ddaa:	4544      	cmp	r4, r8
 800ddac:	d944      	bls.n	800de38 <__hexnan+0xf2>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f1a4 0904 	sub.w	r9, r4, #4
 800ddb4:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddb8:	f8cd b008 	str.w	fp, [sp, #8]
 800ddbc:	464c      	mov	r4, r9
 800ddbe:	461d      	mov	r5, r3
 800ddc0:	9903      	ldr	r1, [sp, #12]
 800ddc2:	e7d7      	b.n	800dd74 <__hexnan+0x2e>
 800ddc4:	2a29      	cmp	r2, #41	; 0x29
 800ddc6:	d14a      	bne.n	800de5e <__hexnan+0x118>
 800ddc8:	3102      	adds	r1, #2
 800ddca:	f8ca 1000 	str.w	r1, [sl]
 800ddce:	f1bb 0f00 	cmp.w	fp, #0
 800ddd2:	d044      	beq.n	800de5e <__hexnan+0x118>
 800ddd4:	454c      	cmp	r4, r9
 800ddd6:	d206      	bcs.n	800dde6 <__hexnan+0xa0>
 800ddd8:	2d07      	cmp	r5, #7
 800ddda:	dc04      	bgt.n	800dde6 <__hexnan+0xa0>
 800dddc:	462a      	mov	r2, r5
 800ddde:	4649      	mov	r1, r9
 800dde0:	4620      	mov	r0, r4
 800dde2:	f7ff ff8a 	bl	800dcfa <L_shift>
 800dde6:	4544      	cmp	r4, r8
 800dde8:	d928      	bls.n	800de3c <__hexnan+0xf6>
 800ddea:	4643      	mov	r3, r8
 800ddec:	f854 2b04 	ldr.w	r2, [r4], #4
 800ddf0:	f843 2b04 	str.w	r2, [r3], #4
 800ddf4:	42a6      	cmp	r6, r4
 800ddf6:	d2f9      	bcs.n	800ddec <__hexnan+0xa6>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f843 2b04 	str.w	r2, [r3], #4
 800ddfe:	429e      	cmp	r6, r3
 800de00:	d2fb      	bcs.n	800ddfa <__hexnan+0xb4>
 800de02:	6833      	ldr	r3, [r6, #0]
 800de04:	b91b      	cbnz	r3, 800de0e <__hexnan+0xc8>
 800de06:	4546      	cmp	r6, r8
 800de08:	d127      	bne.n	800de5a <__hexnan+0x114>
 800de0a:	2301      	movs	r3, #1
 800de0c:	6033      	str	r3, [r6, #0]
 800de0e:	2005      	movs	r0, #5
 800de10:	e026      	b.n	800de60 <__hexnan+0x11a>
 800de12:	3501      	adds	r5, #1
 800de14:	2d08      	cmp	r5, #8
 800de16:	f10b 0b01 	add.w	fp, fp, #1
 800de1a:	dd06      	ble.n	800de2a <__hexnan+0xe4>
 800de1c:	4544      	cmp	r4, r8
 800de1e:	d9cf      	bls.n	800ddc0 <__hexnan+0x7a>
 800de20:	2300      	movs	r3, #0
 800de22:	f844 3c04 	str.w	r3, [r4, #-4]
 800de26:	2501      	movs	r5, #1
 800de28:	3c04      	subs	r4, #4
 800de2a:	6822      	ldr	r2, [r4, #0]
 800de2c:	f000 000f 	and.w	r0, r0, #15
 800de30:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de34:	6020      	str	r0, [r4, #0]
 800de36:	e7c3      	b.n	800ddc0 <__hexnan+0x7a>
 800de38:	2508      	movs	r5, #8
 800de3a:	e7c1      	b.n	800ddc0 <__hexnan+0x7a>
 800de3c:	9b01      	ldr	r3, [sp, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d0df      	beq.n	800de02 <__hexnan+0xbc>
 800de42:	f04f 32ff 	mov.w	r2, #4294967295
 800de46:	f1c3 0320 	rsb	r3, r3, #32
 800de4a:	fa22 f303 	lsr.w	r3, r2, r3
 800de4e:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800de52:	401a      	ands	r2, r3
 800de54:	f847 2c04 	str.w	r2, [r7, #-4]
 800de58:	e7d3      	b.n	800de02 <__hexnan+0xbc>
 800de5a:	3e04      	subs	r6, #4
 800de5c:	e7d1      	b.n	800de02 <__hexnan+0xbc>
 800de5e:	2004      	movs	r0, #4
 800de60:	b007      	add	sp, #28
 800de62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de66 <__localeconv_l>:
 800de66:	30f0      	adds	r0, #240	; 0xf0
 800de68:	4770      	bx	lr

0800de6a <__malloc_lock>:
 800de6a:	4770      	bx	lr

0800de6c <__malloc_unlock>:
 800de6c:	4770      	bx	lr

0800de6e <_Balloc>:
 800de6e:	b570      	push	{r4, r5, r6, lr}
 800de70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de72:	4604      	mov	r4, r0
 800de74:	460e      	mov	r6, r1
 800de76:	b93d      	cbnz	r5, 800de88 <_Balloc+0x1a>
 800de78:	2010      	movs	r0, #16
 800de7a:	f7fe fd95 	bl	800c9a8 <malloc>
 800de7e:	6260      	str	r0, [r4, #36]	; 0x24
 800de80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de84:	6005      	str	r5, [r0, #0]
 800de86:	60c5      	str	r5, [r0, #12]
 800de88:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800de8a:	68eb      	ldr	r3, [r5, #12]
 800de8c:	b183      	cbz	r3, 800deb0 <_Balloc+0x42>
 800de8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800de96:	b9b8      	cbnz	r0, 800dec8 <_Balloc+0x5a>
 800de98:	2101      	movs	r1, #1
 800de9a:	fa01 f506 	lsl.w	r5, r1, r6
 800de9e:	1d6a      	adds	r2, r5, #5
 800dea0:	0092      	lsls	r2, r2, #2
 800dea2:	4620      	mov	r0, r4
 800dea4:	f000 fbe1 	bl	800e66a <_calloc_r>
 800dea8:	b160      	cbz	r0, 800dec4 <_Balloc+0x56>
 800deaa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800deae:	e00e      	b.n	800dece <_Balloc+0x60>
 800deb0:	2221      	movs	r2, #33	; 0x21
 800deb2:	2104      	movs	r1, #4
 800deb4:	4620      	mov	r0, r4
 800deb6:	f000 fbd8 	bl	800e66a <_calloc_r>
 800deba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800debc:	60e8      	str	r0, [r5, #12]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d1e4      	bne.n	800de8e <_Balloc+0x20>
 800dec4:	2000      	movs	r0, #0
 800dec6:	bd70      	pop	{r4, r5, r6, pc}
 800dec8:	6802      	ldr	r2, [r0, #0]
 800deca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dece:	2300      	movs	r3, #0
 800ded0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ded4:	e7f7      	b.n	800dec6 <_Balloc+0x58>

0800ded6 <_Bfree>:
 800ded6:	b570      	push	{r4, r5, r6, lr}
 800ded8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800deda:	4606      	mov	r6, r0
 800dedc:	460d      	mov	r5, r1
 800dede:	b93c      	cbnz	r4, 800def0 <_Bfree+0x1a>
 800dee0:	2010      	movs	r0, #16
 800dee2:	f7fe fd61 	bl	800c9a8 <malloc>
 800dee6:	6270      	str	r0, [r6, #36]	; 0x24
 800dee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800deec:	6004      	str	r4, [r0, #0]
 800deee:	60c4      	str	r4, [r0, #12]
 800def0:	b13d      	cbz	r5, 800df02 <_Bfree+0x2c>
 800def2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800def4:	686a      	ldr	r2, [r5, #4]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800defc:	6029      	str	r1, [r5, #0]
 800defe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800df02:	bd70      	pop	{r4, r5, r6, pc}

0800df04 <__multadd>:
 800df04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df08:	690d      	ldr	r5, [r1, #16]
 800df0a:	461f      	mov	r7, r3
 800df0c:	4606      	mov	r6, r0
 800df0e:	460c      	mov	r4, r1
 800df10:	f101 0c14 	add.w	ip, r1, #20
 800df14:	2300      	movs	r3, #0
 800df16:	f8dc 0000 	ldr.w	r0, [ip]
 800df1a:	b281      	uxth	r1, r0
 800df1c:	fb02 7101 	mla	r1, r2, r1, r7
 800df20:	0c0f      	lsrs	r7, r1, #16
 800df22:	0c00      	lsrs	r0, r0, #16
 800df24:	fb02 7000 	mla	r0, r2, r0, r7
 800df28:	b289      	uxth	r1, r1
 800df2a:	3301      	adds	r3, #1
 800df2c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800df30:	429d      	cmp	r5, r3
 800df32:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800df36:	f84c 1b04 	str.w	r1, [ip], #4
 800df3a:	dcec      	bgt.n	800df16 <__multadd+0x12>
 800df3c:	b1d7      	cbz	r7, 800df74 <__multadd+0x70>
 800df3e:	68a3      	ldr	r3, [r4, #8]
 800df40:	42ab      	cmp	r3, r5
 800df42:	dc12      	bgt.n	800df6a <__multadd+0x66>
 800df44:	6861      	ldr	r1, [r4, #4]
 800df46:	4630      	mov	r0, r6
 800df48:	3101      	adds	r1, #1
 800df4a:	f7ff ff90 	bl	800de6e <_Balloc>
 800df4e:	6922      	ldr	r2, [r4, #16]
 800df50:	3202      	adds	r2, #2
 800df52:	f104 010c 	add.w	r1, r4, #12
 800df56:	4680      	mov	r8, r0
 800df58:	0092      	lsls	r2, r2, #2
 800df5a:	300c      	adds	r0, #12
 800df5c:	f7fe fd46 	bl	800c9ec <memcpy>
 800df60:	4621      	mov	r1, r4
 800df62:	4630      	mov	r0, r6
 800df64:	f7ff ffb7 	bl	800ded6 <_Bfree>
 800df68:	4644      	mov	r4, r8
 800df6a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df6e:	3501      	adds	r5, #1
 800df70:	615f      	str	r7, [r3, #20]
 800df72:	6125      	str	r5, [r4, #16]
 800df74:	4620      	mov	r0, r4
 800df76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df7a <__s2b>:
 800df7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df7e:	460c      	mov	r4, r1
 800df80:	4615      	mov	r5, r2
 800df82:	461f      	mov	r7, r3
 800df84:	2209      	movs	r2, #9
 800df86:	3308      	adds	r3, #8
 800df88:	4606      	mov	r6, r0
 800df8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800df8e:	2100      	movs	r1, #0
 800df90:	2201      	movs	r2, #1
 800df92:	429a      	cmp	r2, r3
 800df94:	db20      	blt.n	800dfd8 <__s2b+0x5e>
 800df96:	4630      	mov	r0, r6
 800df98:	f7ff ff69 	bl	800de6e <_Balloc>
 800df9c:	9b08      	ldr	r3, [sp, #32]
 800df9e:	6143      	str	r3, [r0, #20]
 800dfa0:	2d09      	cmp	r5, #9
 800dfa2:	f04f 0301 	mov.w	r3, #1
 800dfa6:	6103      	str	r3, [r0, #16]
 800dfa8:	dd19      	ble.n	800dfde <__s2b+0x64>
 800dfaa:	f104 0809 	add.w	r8, r4, #9
 800dfae:	46c1      	mov	r9, r8
 800dfb0:	442c      	add	r4, r5
 800dfb2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800dfb6:	4601      	mov	r1, r0
 800dfb8:	3b30      	subs	r3, #48	; 0x30
 800dfba:	220a      	movs	r2, #10
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	f7ff ffa1 	bl	800df04 <__multadd>
 800dfc2:	45a1      	cmp	r9, r4
 800dfc4:	d1f5      	bne.n	800dfb2 <__s2b+0x38>
 800dfc6:	eb08 0405 	add.w	r4, r8, r5
 800dfca:	3c08      	subs	r4, #8
 800dfcc:	1b2d      	subs	r5, r5, r4
 800dfce:	1963      	adds	r3, r4, r5
 800dfd0:	42bb      	cmp	r3, r7
 800dfd2:	db07      	blt.n	800dfe4 <__s2b+0x6a>
 800dfd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd8:	0052      	lsls	r2, r2, #1
 800dfda:	3101      	adds	r1, #1
 800dfdc:	e7d9      	b.n	800df92 <__s2b+0x18>
 800dfde:	340a      	adds	r4, #10
 800dfe0:	2509      	movs	r5, #9
 800dfe2:	e7f3      	b.n	800dfcc <__s2b+0x52>
 800dfe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dfe8:	4601      	mov	r1, r0
 800dfea:	3b30      	subs	r3, #48	; 0x30
 800dfec:	220a      	movs	r2, #10
 800dfee:	4630      	mov	r0, r6
 800dff0:	f7ff ff88 	bl	800df04 <__multadd>
 800dff4:	e7eb      	b.n	800dfce <__s2b+0x54>

0800dff6 <__hi0bits>:
 800dff6:	0c02      	lsrs	r2, r0, #16
 800dff8:	0412      	lsls	r2, r2, #16
 800dffa:	4603      	mov	r3, r0
 800dffc:	b9b2      	cbnz	r2, 800e02c <__hi0bits+0x36>
 800dffe:	0403      	lsls	r3, r0, #16
 800e000:	2010      	movs	r0, #16
 800e002:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e006:	bf04      	itt	eq
 800e008:	021b      	lsleq	r3, r3, #8
 800e00a:	3008      	addeq	r0, #8
 800e00c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e010:	bf04      	itt	eq
 800e012:	011b      	lsleq	r3, r3, #4
 800e014:	3004      	addeq	r0, #4
 800e016:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e01a:	bf04      	itt	eq
 800e01c:	009b      	lsleq	r3, r3, #2
 800e01e:	3002      	addeq	r0, #2
 800e020:	2b00      	cmp	r3, #0
 800e022:	db06      	blt.n	800e032 <__hi0bits+0x3c>
 800e024:	005b      	lsls	r3, r3, #1
 800e026:	d503      	bpl.n	800e030 <__hi0bits+0x3a>
 800e028:	3001      	adds	r0, #1
 800e02a:	4770      	bx	lr
 800e02c:	2000      	movs	r0, #0
 800e02e:	e7e8      	b.n	800e002 <__hi0bits+0xc>
 800e030:	2020      	movs	r0, #32
 800e032:	4770      	bx	lr

0800e034 <__lo0bits>:
 800e034:	6803      	ldr	r3, [r0, #0]
 800e036:	f013 0207 	ands.w	r2, r3, #7
 800e03a:	4601      	mov	r1, r0
 800e03c:	d00b      	beq.n	800e056 <__lo0bits+0x22>
 800e03e:	07da      	lsls	r2, r3, #31
 800e040:	d423      	bmi.n	800e08a <__lo0bits+0x56>
 800e042:	0798      	lsls	r0, r3, #30
 800e044:	bf49      	itett	mi
 800e046:	085b      	lsrmi	r3, r3, #1
 800e048:	089b      	lsrpl	r3, r3, #2
 800e04a:	2001      	movmi	r0, #1
 800e04c:	600b      	strmi	r3, [r1, #0]
 800e04e:	bf5c      	itt	pl
 800e050:	600b      	strpl	r3, [r1, #0]
 800e052:	2002      	movpl	r0, #2
 800e054:	4770      	bx	lr
 800e056:	b298      	uxth	r0, r3
 800e058:	b9a8      	cbnz	r0, 800e086 <__lo0bits+0x52>
 800e05a:	0c1b      	lsrs	r3, r3, #16
 800e05c:	2010      	movs	r0, #16
 800e05e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e062:	bf04      	itt	eq
 800e064:	0a1b      	lsreq	r3, r3, #8
 800e066:	3008      	addeq	r0, #8
 800e068:	071a      	lsls	r2, r3, #28
 800e06a:	bf04      	itt	eq
 800e06c:	091b      	lsreq	r3, r3, #4
 800e06e:	3004      	addeq	r0, #4
 800e070:	079a      	lsls	r2, r3, #30
 800e072:	bf04      	itt	eq
 800e074:	089b      	lsreq	r3, r3, #2
 800e076:	3002      	addeq	r0, #2
 800e078:	07da      	lsls	r2, r3, #31
 800e07a:	d402      	bmi.n	800e082 <__lo0bits+0x4e>
 800e07c:	085b      	lsrs	r3, r3, #1
 800e07e:	d006      	beq.n	800e08e <__lo0bits+0x5a>
 800e080:	3001      	adds	r0, #1
 800e082:	600b      	str	r3, [r1, #0]
 800e084:	4770      	bx	lr
 800e086:	4610      	mov	r0, r2
 800e088:	e7e9      	b.n	800e05e <__lo0bits+0x2a>
 800e08a:	2000      	movs	r0, #0
 800e08c:	4770      	bx	lr
 800e08e:	2020      	movs	r0, #32
 800e090:	4770      	bx	lr

0800e092 <__i2b>:
 800e092:	b510      	push	{r4, lr}
 800e094:	460c      	mov	r4, r1
 800e096:	2101      	movs	r1, #1
 800e098:	f7ff fee9 	bl	800de6e <_Balloc>
 800e09c:	2201      	movs	r2, #1
 800e09e:	6144      	str	r4, [r0, #20]
 800e0a0:	6102      	str	r2, [r0, #16]
 800e0a2:	bd10      	pop	{r4, pc}

0800e0a4 <__multiply>:
 800e0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a8:	4614      	mov	r4, r2
 800e0aa:	690a      	ldr	r2, [r1, #16]
 800e0ac:	6923      	ldr	r3, [r4, #16]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	bfb8      	it	lt
 800e0b2:	460b      	movlt	r3, r1
 800e0b4:	4688      	mov	r8, r1
 800e0b6:	bfbc      	itt	lt
 800e0b8:	46a0      	movlt	r8, r4
 800e0ba:	461c      	movlt	r4, r3
 800e0bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e0c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e0c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e0cc:	eb07 0609 	add.w	r6, r7, r9
 800e0d0:	42b3      	cmp	r3, r6
 800e0d2:	bfb8      	it	lt
 800e0d4:	3101      	addlt	r1, #1
 800e0d6:	f7ff feca 	bl	800de6e <_Balloc>
 800e0da:	f100 0514 	add.w	r5, r0, #20
 800e0de:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e0e2:	462b      	mov	r3, r5
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	4573      	cmp	r3, lr
 800e0e8:	d316      	bcc.n	800e118 <__multiply+0x74>
 800e0ea:	f104 0214 	add.w	r2, r4, #20
 800e0ee:	f108 0114 	add.w	r1, r8, #20
 800e0f2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e0f6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e0fa:	9300      	str	r3, [sp, #0]
 800e0fc:	9b00      	ldr	r3, [sp, #0]
 800e0fe:	9201      	str	r2, [sp, #4]
 800e100:	4293      	cmp	r3, r2
 800e102:	d80c      	bhi.n	800e11e <__multiply+0x7a>
 800e104:	2e00      	cmp	r6, #0
 800e106:	dd03      	ble.n	800e110 <__multiply+0x6c>
 800e108:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d05d      	beq.n	800e1cc <__multiply+0x128>
 800e110:	6106      	str	r6, [r0, #16]
 800e112:	b003      	add	sp, #12
 800e114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e118:	f843 2b04 	str.w	r2, [r3], #4
 800e11c:	e7e3      	b.n	800e0e6 <__multiply+0x42>
 800e11e:	f8b2 b000 	ldrh.w	fp, [r2]
 800e122:	f1bb 0f00 	cmp.w	fp, #0
 800e126:	d023      	beq.n	800e170 <__multiply+0xcc>
 800e128:	4689      	mov	r9, r1
 800e12a:	46ac      	mov	ip, r5
 800e12c:	f04f 0800 	mov.w	r8, #0
 800e130:	f859 4b04 	ldr.w	r4, [r9], #4
 800e134:	f8dc a000 	ldr.w	sl, [ip]
 800e138:	b2a3      	uxth	r3, r4
 800e13a:	fa1f fa8a 	uxth.w	sl, sl
 800e13e:	fb0b a303 	mla	r3, fp, r3, sl
 800e142:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e146:	f8dc 4000 	ldr.w	r4, [ip]
 800e14a:	4443      	add	r3, r8
 800e14c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e150:	fb0b 840a 	mla	r4, fp, sl, r8
 800e154:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e158:	46e2      	mov	sl, ip
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e160:	454f      	cmp	r7, r9
 800e162:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e166:	f84a 3b04 	str.w	r3, [sl], #4
 800e16a:	d82b      	bhi.n	800e1c4 <__multiply+0x120>
 800e16c:	f8cc 8004 	str.w	r8, [ip, #4]
 800e170:	9b01      	ldr	r3, [sp, #4]
 800e172:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e176:	3204      	adds	r2, #4
 800e178:	f1ba 0f00 	cmp.w	sl, #0
 800e17c:	d020      	beq.n	800e1c0 <__multiply+0x11c>
 800e17e:	682b      	ldr	r3, [r5, #0]
 800e180:	4689      	mov	r9, r1
 800e182:	46a8      	mov	r8, r5
 800e184:	f04f 0b00 	mov.w	fp, #0
 800e188:	f8b9 c000 	ldrh.w	ip, [r9]
 800e18c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e190:	fb0a 440c 	mla	r4, sl, ip, r4
 800e194:	445c      	add	r4, fp
 800e196:	46c4      	mov	ip, r8
 800e198:	b29b      	uxth	r3, r3
 800e19a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e19e:	f84c 3b04 	str.w	r3, [ip], #4
 800e1a2:	f859 3b04 	ldr.w	r3, [r9], #4
 800e1a6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e1aa:	0c1b      	lsrs	r3, r3, #16
 800e1ac:	fb0a b303 	mla	r3, sl, r3, fp
 800e1b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e1b4:	454f      	cmp	r7, r9
 800e1b6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e1ba:	d805      	bhi.n	800e1c8 <__multiply+0x124>
 800e1bc:	f8c8 3004 	str.w	r3, [r8, #4]
 800e1c0:	3504      	adds	r5, #4
 800e1c2:	e79b      	b.n	800e0fc <__multiply+0x58>
 800e1c4:	46d4      	mov	ip, sl
 800e1c6:	e7b3      	b.n	800e130 <__multiply+0x8c>
 800e1c8:	46e0      	mov	r8, ip
 800e1ca:	e7dd      	b.n	800e188 <__multiply+0xe4>
 800e1cc:	3e01      	subs	r6, #1
 800e1ce:	e799      	b.n	800e104 <__multiply+0x60>

0800e1d0 <__pow5mult>:
 800e1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1d4:	4615      	mov	r5, r2
 800e1d6:	f012 0203 	ands.w	r2, r2, #3
 800e1da:	4606      	mov	r6, r0
 800e1dc:	460f      	mov	r7, r1
 800e1de:	d007      	beq.n	800e1f0 <__pow5mult+0x20>
 800e1e0:	3a01      	subs	r2, #1
 800e1e2:	4c21      	ldr	r4, [pc, #132]	; (800e268 <__pow5mult+0x98>)
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1ea:	f7ff fe8b 	bl	800df04 <__multadd>
 800e1ee:	4607      	mov	r7, r0
 800e1f0:	10ad      	asrs	r5, r5, #2
 800e1f2:	d035      	beq.n	800e260 <__pow5mult+0x90>
 800e1f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e1f6:	b93c      	cbnz	r4, 800e208 <__pow5mult+0x38>
 800e1f8:	2010      	movs	r0, #16
 800e1fa:	f7fe fbd5 	bl	800c9a8 <malloc>
 800e1fe:	6270      	str	r0, [r6, #36]	; 0x24
 800e200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e204:	6004      	str	r4, [r0, #0]
 800e206:	60c4      	str	r4, [r0, #12]
 800e208:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e20c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e210:	b94c      	cbnz	r4, 800e226 <__pow5mult+0x56>
 800e212:	f240 2171 	movw	r1, #625	; 0x271
 800e216:	4630      	mov	r0, r6
 800e218:	f7ff ff3b 	bl	800e092 <__i2b>
 800e21c:	2300      	movs	r3, #0
 800e21e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e222:	4604      	mov	r4, r0
 800e224:	6003      	str	r3, [r0, #0]
 800e226:	f04f 0800 	mov.w	r8, #0
 800e22a:	07eb      	lsls	r3, r5, #31
 800e22c:	d50a      	bpl.n	800e244 <__pow5mult+0x74>
 800e22e:	4639      	mov	r1, r7
 800e230:	4622      	mov	r2, r4
 800e232:	4630      	mov	r0, r6
 800e234:	f7ff ff36 	bl	800e0a4 <__multiply>
 800e238:	4639      	mov	r1, r7
 800e23a:	4681      	mov	r9, r0
 800e23c:	4630      	mov	r0, r6
 800e23e:	f7ff fe4a 	bl	800ded6 <_Bfree>
 800e242:	464f      	mov	r7, r9
 800e244:	106d      	asrs	r5, r5, #1
 800e246:	d00b      	beq.n	800e260 <__pow5mult+0x90>
 800e248:	6820      	ldr	r0, [r4, #0]
 800e24a:	b938      	cbnz	r0, 800e25c <__pow5mult+0x8c>
 800e24c:	4622      	mov	r2, r4
 800e24e:	4621      	mov	r1, r4
 800e250:	4630      	mov	r0, r6
 800e252:	f7ff ff27 	bl	800e0a4 <__multiply>
 800e256:	6020      	str	r0, [r4, #0]
 800e258:	f8c0 8000 	str.w	r8, [r0]
 800e25c:	4604      	mov	r4, r0
 800e25e:	e7e4      	b.n	800e22a <__pow5mult+0x5a>
 800e260:	4638      	mov	r0, r7
 800e262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e266:	bf00      	nop
 800e268:	0800f5a0 	.word	0x0800f5a0

0800e26c <__lshift>:
 800e26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e270:	460c      	mov	r4, r1
 800e272:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	6849      	ldr	r1, [r1, #4]
 800e27a:	eb0a 0903 	add.w	r9, sl, r3
 800e27e:	68a3      	ldr	r3, [r4, #8]
 800e280:	4607      	mov	r7, r0
 800e282:	4616      	mov	r6, r2
 800e284:	f109 0501 	add.w	r5, r9, #1
 800e288:	42ab      	cmp	r3, r5
 800e28a:	db32      	blt.n	800e2f2 <__lshift+0x86>
 800e28c:	4638      	mov	r0, r7
 800e28e:	f7ff fdee 	bl	800de6e <_Balloc>
 800e292:	2300      	movs	r3, #0
 800e294:	4680      	mov	r8, r0
 800e296:	f100 0114 	add.w	r1, r0, #20
 800e29a:	461a      	mov	r2, r3
 800e29c:	4553      	cmp	r3, sl
 800e29e:	db2b      	blt.n	800e2f8 <__lshift+0x8c>
 800e2a0:	6920      	ldr	r0, [r4, #16]
 800e2a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2a6:	f104 0314 	add.w	r3, r4, #20
 800e2aa:	f016 021f 	ands.w	r2, r6, #31
 800e2ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2b6:	d025      	beq.n	800e304 <__lshift+0x98>
 800e2b8:	f1c2 0e20 	rsb	lr, r2, #32
 800e2bc:	2000      	movs	r0, #0
 800e2be:	681e      	ldr	r6, [r3, #0]
 800e2c0:	468a      	mov	sl, r1
 800e2c2:	4096      	lsls	r6, r2
 800e2c4:	4330      	orrs	r0, r6
 800e2c6:	f84a 0b04 	str.w	r0, [sl], #4
 800e2ca:	f853 0b04 	ldr.w	r0, [r3], #4
 800e2ce:	459c      	cmp	ip, r3
 800e2d0:	fa20 f00e 	lsr.w	r0, r0, lr
 800e2d4:	d814      	bhi.n	800e300 <__lshift+0x94>
 800e2d6:	6048      	str	r0, [r1, #4]
 800e2d8:	b108      	cbz	r0, 800e2de <__lshift+0x72>
 800e2da:	f109 0502 	add.w	r5, r9, #2
 800e2de:	3d01      	subs	r5, #1
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	f8c8 5010 	str.w	r5, [r8, #16]
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	f7ff fdf5 	bl	800ded6 <_Bfree>
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2f2:	3101      	adds	r1, #1
 800e2f4:	005b      	lsls	r3, r3, #1
 800e2f6:	e7c7      	b.n	800e288 <__lshift+0x1c>
 800e2f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	e7cd      	b.n	800e29c <__lshift+0x30>
 800e300:	4651      	mov	r1, sl
 800e302:	e7dc      	b.n	800e2be <__lshift+0x52>
 800e304:	3904      	subs	r1, #4
 800e306:	f853 2b04 	ldr.w	r2, [r3], #4
 800e30a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e30e:	459c      	cmp	ip, r3
 800e310:	d8f9      	bhi.n	800e306 <__lshift+0x9a>
 800e312:	e7e4      	b.n	800e2de <__lshift+0x72>

0800e314 <__mcmp>:
 800e314:	6903      	ldr	r3, [r0, #16]
 800e316:	690a      	ldr	r2, [r1, #16]
 800e318:	1a9b      	subs	r3, r3, r2
 800e31a:	b530      	push	{r4, r5, lr}
 800e31c:	d10c      	bne.n	800e338 <__mcmp+0x24>
 800e31e:	0092      	lsls	r2, r2, #2
 800e320:	3014      	adds	r0, #20
 800e322:	3114      	adds	r1, #20
 800e324:	1884      	adds	r4, r0, r2
 800e326:	4411      	add	r1, r2
 800e328:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e32c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e330:	4295      	cmp	r5, r2
 800e332:	d003      	beq.n	800e33c <__mcmp+0x28>
 800e334:	d305      	bcc.n	800e342 <__mcmp+0x2e>
 800e336:	2301      	movs	r3, #1
 800e338:	4618      	mov	r0, r3
 800e33a:	bd30      	pop	{r4, r5, pc}
 800e33c:	42a0      	cmp	r0, r4
 800e33e:	d3f3      	bcc.n	800e328 <__mcmp+0x14>
 800e340:	e7fa      	b.n	800e338 <__mcmp+0x24>
 800e342:	f04f 33ff 	mov.w	r3, #4294967295
 800e346:	e7f7      	b.n	800e338 <__mcmp+0x24>

0800e348 <__mdiff>:
 800e348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e34c:	460d      	mov	r5, r1
 800e34e:	4607      	mov	r7, r0
 800e350:	4611      	mov	r1, r2
 800e352:	4628      	mov	r0, r5
 800e354:	4614      	mov	r4, r2
 800e356:	f7ff ffdd 	bl	800e314 <__mcmp>
 800e35a:	1e06      	subs	r6, r0, #0
 800e35c:	d108      	bne.n	800e370 <__mdiff+0x28>
 800e35e:	4631      	mov	r1, r6
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff fd84 	bl	800de6e <_Balloc>
 800e366:	2301      	movs	r3, #1
 800e368:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e370:	bfa4      	itt	ge
 800e372:	4623      	movge	r3, r4
 800e374:	462c      	movge	r4, r5
 800e376:	4638      	mov	r0, r7
 800e378:	6861      	ldr	r1, [r4, #4]
 800e37a:	bfa6      	itte	ge
 800e37c:	461d      	movge	r5, r3
 800e37e:	2600      	movge	r6, #0
 800e380:	2601      	movlt	r6, #1
 800e382:	f7ff fd74 	bl	800de6e <_Balloc>
 800e386:	692b      	ldr	r3, [r5, #16]
 800e388:	60c6      	str	r6, [r0, #12]
 800e38a:	6926      	ldr	r6, [r4, #16]
 800e38c:	f105 0914 	add.w	r9, r5, #20
 800e390:	f104 0214 	add.w	r2, r4, #20
 800e394:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e398:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e39c:	f100 0514 	add.w	r5, r0, #20
 800e3a0:	f04f 0e00 	mov.w	lr, #0
 800e3a4:	f852 ab04 	ldr.w	sl, [r2], #4
 800e3a8:	f859 4b04 	ldr.w	r4, [r9], #4
 800e3ac:	fa1e f18a 	uxtah	r1, lr, sl
 800e3b0:	b2a3      	uxth	r3, r4
 800e3b2:	1ac9      	subs	r1, r1, r3
 800e3b4:	0c23      	lsrs	r3, r4, #16
 800e3b6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e3ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e3be:	b289      	uxth	r1, r1
 800e3c0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e3c4:	45c8      	cmp	r8, r9
 800e3c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e3ca:	4694      	mov	ip, r2
 800e3cc:	f845 3b04 	str.w	r3, [r5], #4
 800e3d0:	d8e8      	bhi.n	800e3a4 <__mdiff+0x5c>
 800e3d2:	45bc      	cmp	ip, r7
 800e3d4:	d304      	bcc.n	800e3e0 <__mdiff+0x98>
 800e3d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e3da:	b183      	cbz	r3, 800e3fe <__mdiff+0xb6>
 800e3dc:	6106      	str	r6, [r0, #16]
 800e3de:	e7c5      	b.n	800e36c <__mdiff+0x24>
 800e3e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e3e4:	fa1e f381 	uxtah	r3, lr, r1
 800e3e8:	141a      	asrs	r2, r3, #16
 800e3ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e3f8:	f845 3b04 	str.w	r3, [r5], #4
 800e3fc:	e7e9      	b.n	800e3d2 <__mdiff+0x8a>
 800e3fe:	3e01      	subs	r6, #1
 800e400:	e7e9      	b.n	800e3d6 <__mdiff+0x8e>
	...

0800e404 <__ulp>:
 800e404:	4b12      	ldr	r3, [pc, #72]	; (800e450 <__ulp+0x4c>)
 800e406:	ee10 2a90 	vmov	r2, s1
 800e40a:	401a      	ands	r2, r3
 800e40c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e410:	2b00      	cmp	r3, #0
 800e412:	dd04      	ble.n	800e41e <__ulp+0x1a>
 800e414:	2000      	movs	r0, #0
 800e416:	4619      	mov	r1, r3
 800e418:	ec41 0b10 	vmov	d0, r0, r1
 800e41c:	4770      	bx	lr
 800e41e:	425b      	negs	r3, r3
 800e420:	151b      	asrs	r3, r3, #20
 800e422:	2b13      	cmp	r3, #19
 800e424:	f04f 0000 	mov.w	r0, #0
 800e428:	f04f 0100 	mov.w	r1, #0
 800e42c:	dc04      	bgt.n	800e438 <__ulp+0x34>
 800e42e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e432:	fa42 f103 	asr.w	r1, r2, r3
 800e436:	e7ef      	b.n	800e418 <__ulp+0x14>
 800e438:	3b14      	subs	r3, #20
 800e43a:	2b1e      	cmp	r3, #30
 800e43c:	f04f 0201 	mov.w	r2, #1
 800e440:	bfda      	itte	le
 800e442:	f1c3 031f 	rsble	r3, r3, #31
 800e446:	fa02 f303 	lslle.w	r3, r2, r3
 800e44a:	4613      	movgt	r3, r2
 800e44c:	4618      	mov	r0, r3
 800e44e:	e7e3      	b.n	800e418 <__ulp+0x14>
 800e450:	7ff00000 	.word	0x7ff00000

0800e454 <__b2d>:
 800e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e456:	6905      	ldr	r5, [r0, #16]
 800e458:	f100 0714 	add.w	r7, r0, #20
 800e45c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e460:	1f2e      	subs	r6, r5, #4
 800e462:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e466:	4620      	mov	r0, r4
 800e468:	f7ff fdc5 	bl	800dff6 <__hi0bits>
 800e46c:	f1c0 0320 	rsb	r3, r0, #32
 800e470:	280a      	cmp	r0, #10
 800e472:	600b      	str	r3, [r1, #0]
 800e474:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e4ec <__b2d+0x98>
 800e478:	dc14      	bgt.n	800e4a4 <__b2d+0x50>
 800e47a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e47e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e482:	42b7      	cmp	r7, r6
 800e484:	ea41 030c 	orr.w	r3, r1, ip
 800e488:	bf34      	ite	cc
 800e48a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e48e:	2100      	movcs	r1, #0
 800e490:	3015      	adds	r0, #21
 800e492:	fa04 f000 	lsl.w	r0, r4, r0
 800e496:	fa21 f10e 	lsr.w	r1, r1, lr
 800e49a:	ea40 0201 	orr.w	r2, r0, r1
 800e49e:	ec43 2b10 	vmov	d0, r2, r3
 800e4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4a4:	42b7      	cmp	r7, r6
 800e4a6:	bf3a      	itte	cc
 800e4a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e4ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e4b0:	2100      	movcs	r1, #0
 800e4b2:	380b      	subs	r0, #11
 800e4b4:	d015      	beq.n	800e4e2 <__b2d+0x8e>
 800e4b6:	4084      	lsls	r4, r0
 800e4b8:	f1c0 0520 	rsb	r5, r0, #32
 800e4bc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e4c0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e4c4:	42be      	cmp	r6, r7
 800e4c6:	fa21 fc05 	lsr.w	ip, r1, r5
 800e4ca:	ea44 030c 	orr.w	r3, r4, ip
 800e4ce:	bf8c      	ite	hi
 800e4d0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e4d4:	2400      	movls	r4, #0
 800e4d6:	fa01 f000 	lsl.w	r0, r1, r0
 800e4da:	40ec      	lsrs	r4, r5
 800e4dc:	ea40 0204 	orr.w	r2, r0, r4
 800e4e0:	e7dd      	b.n	800e49e <__b2d+0x4a>
 800e4e2:	ea44 030c 	orr.w	r3, r4, ip
 800e4e6:	460a      	mov	r2, r1
 800e4e8:	e7d9      	b.n	800e49e <__b2d+0x4a>
 800e4ea:	bf00      	nop
 800e4ec:	3ff00000 	.word	0x3ff00000

0800e4f0 <__d2b>:
 800e4f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4f4:	460e      	mov	r6, r1
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	ec59 8b10 	vmov	r8, r9, d0
 800e4fc:	4615      	mov	r5, r2
 800e4fe:	f7ff fcb6 	bl	800de6e <_Balloc>
 800e502:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e506:	4607      	mov	r7, r0
 800e508:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e50c:	bb34      	cbnz	r4, 800e55c <__d2b+0x6c>
 800e50e:	9301      	str	r3, [sp, #4]
 800e510:	f1b8 0300 	subs.w	r3, r8, #0
 800e514:	d027      	beq.n	800e566 <__d2b+0x76>
 800e516:	a802      	add	r0, sp, #8
 800e518:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e51c:	f7ff fd8a 	bl	800e034 <__lo0bits>
 800e520:	9900      	ldr	r1, [sp, #0]
 800e522:	b1f0      	cbz	r0, 800e562 <__d2b+0x72>
 800e524:	9a01      	ldr	r2, [sp, #4]
 800e526:	f1c0 0320 	rsb	r3, r0, #32
 800e52a:	fa02 f303 	lsl.w	r3, r2, r3
 800e52e:	430b      	orrs	r3, r1
 800e530:	40c2      	lsrs	r2, r0
 800e532:	617b      	str	r3, [r7, #20]
 800e534:	9201      	str	r2, [sp, #4]
 800e536:	9b01      	ldr	r3, [sp, #4]
 800e538:	61bb      	str	r3, [r7, #24]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	bf14      	ite	ne
 800e53e:	2102      	movne	r1, #2
 800e540:	2101      	moveq	r1, #1
 800e542:	6139      	str	r1, [r7, #16]
 800e544:	b1c4      	cbz	r4, 800e578 <__d2b+0x88>
 800e546:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e54a:	4404      	add	r4, r0
 800e54c:	6034      	str	r4, [r6, #0]
 800e54e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e552:	6028      	str	r0, [r5, #0]
 800e554:	4638      	mov	r0, r7
 800e556:	b003      	add	sp, #12
 800e558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e55c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e560:	e7d5      	b.n	800e50e <__d2b+0x1e>
 800e562:	6179      	str	r1, [r7, #20]
 800e564:	e7e7      	b.n	800e536 <__d2b+0x46>
 800e566:	a801      	add	r0, sp, #4
 800e568:	f7ff fd64 	bl	800e034 <__lo0bits>
 800e56c:	9b01      	ldr	r3, [sp, #4]
 800e56e:	617b      	str	r3, [r7, #20]
 800e570:	2101      	movs	r1, #1
 800e572:	6139      	str	r1, [r7, #16]
 800e574:	3020      	adds	r0, #32
 800e576:	e7e5      	b.n	800e544 <__d2b+0x54>
 800e578:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e57c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e580:	6030      	str	r0, [r6, #0]
 800e582:	6918      	ldr	r0, [r3, #16]
 800e584:	f7ff fd37 	bl	800dff6 <__hi0bits>
 800e588:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e58c:	e7e1      	b.n	800e552 <__d2b+0x62>

0800e58e <__ratio>:
 800e58e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e592:	4688      	mov	r8, r1
 800e594:	4669      	mov	r1, sp
 800e596:	4681      	mov	r9, r0
 800e598:	f7ff ff5c 	bl	800e454 <__b2d>
 800e59c:	a901      	add	r1, sp, #4
 800e59e:	4640      	mov	r0, r8
 800e5a0:	ec57 6b10 	vmov	r6, r7, d0
 800e5a4:	f7ff ff56 	bl	800e454 <__b2d>
 800e5a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e5b0:	eba3 0c02 	sub.w	ip, r3, r2
 800e5b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e5b8:	1a9b      	subs	r3, r3, r2
 800e5ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e5be:	ec5b ab10 	vmov	sl, fp, d0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	bfce      	itee	gt
 800e5c6:	463a      	movgt	r2, r7
 800e5c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e5cc:	465a      	movle	r2, fp
 800e5ce:	4659      	mov	r1, fp
 800e5d0:	463d      	mov	r5, r7
 800e5d2:	bfd4      	ite	le
 800e5d4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e5d8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e5dc:	4630      	mov	r0, r6
 800e5de:	ee10 2a10 	vmov	r2, s0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	f7f2 f90f 	bl	8000808 <__aeabi_ddiv>
 800e5ea:	ec41 0b10 	vmov	d0, r0, r1
 800e5ee:	b003      	add	sp, #12
 800e5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5f4 <__copybits>:
 800e5f4:	3901      	subs	r1, #1
 800e5f6:	b510      	push	{r4, lr}
 800e5f8:	1149      	asrs	r1, r1, #5
 800e5fa:	6914      	ldr	r4, [r2, #16]
 800e5fc:	3101      	adds	r1, #1
 800e5fe:	f102 0314 	add.w	r3, r2, #20
 800e602:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e606:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e60a:	42a3      	cmp	r3, r4
 800e60c:	4602      	mov	r2, r0
 800e60e:	d303      	bcc.n	800e618 <__copybits+0x24>
 800e610:	2300      	movs	r3, #0
 800e612:	428a      	cmp	r2, r1
 800e614:	d305      	bcc.n	800e622 <__copybits+0x2e>
 800e616:	bd10      	pop	{r4, pc}
 800e618:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61c:	f840 2b04 	str.w	r2, [r0], #4
 800e620:	e7f3      	b.n	800e60a <__copybits+0x16>
 800e622:	f842 3b04 	str.w	r3, [r2], #4
 800e626:	e7f4      	b.n	800e612 <__copybits+0x1e>

0800e628 <__any_on>:
 800e628:	f100 0214 	add.w	r2, r0, #20
 800e62c:	6900      	ldr	r0, [r0, #16]
 800e62e:	114b      	asrs	r3, r1, #5
 800e630:	4298      	cmp	r0, r3
 800e632:	b510      	push	{r4, lr}
 800e634:	db11      	blt.n	800e65a <__any_on+0x32>
 800e636:	dd0a      	ble.n	800e64e <__any_on+0x26>
 800e638:	f011 011f 	ands.w	r1, r1, #31
 800e63c:	d007      	beq.n	800e64e <__any_on+0x26>
 800e63e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e642:	fa24 f001 	lsr.w	r0, r4, r1
 800e646:	fa00 f101 	lsl.w	r1, r0, r1
 800e64a:	428c      	cmp	r4, r1
 800e64c:	d10b      	bne.n	800e666 <__any_on+0x3e>
 800e64e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e652:	4293      	cmp	r3, r2
 800e654:	d803      	bhi.n	800e65e <__any_on+0x36>
 800e656:	2000      	movs	r0, #0
 800e658:	bd10      	pop	{r4, pc}
 800e65a:	4603      	mov	r3, r0
 800e65c:	e7f7      	b.n	800e64e <__any_on+0x26>
 800e65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e662:	2900      	cmp	r1, #0
 800e664:	d0f5      	beq.n	800e652 <__any_on+0x2a>
 800e666:	2001      	movs	r0, #1
 800e668:	e7f6      	b.n	800e658 <__any_on+0x30>

0800e66a <_calloc_r>:
 800e66a:	b538      	push	{r3, r4, r5, lr}
 800e66c:	fb02 f401 	mul.w	r4, r2, r1
 800e670:	4621      	mov	r1, r4
 800e672:	f7fe fa1d 	bl	800cab0 <_malloc_r>
 800e676:	4605      	mov	r5, r0
 800e678:	b118      	cbz	r0, 800e682 <_calloc_r+0x18>
 800e67a:	4622      	mov	r2, r4
 800e67c:	2100      	movs	r1, #0
 800e67e:	f7fe f9c0 	bl	800ca02 <memset>
 800e682:	4628      	mov	r0, r5
 800e684:	bd38      	pop	{r3, r4, r5, pc}

0800e686 <_realloc_r>:
 800e686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e688:	4607      	mov	r7, r0
 800e68a:	4614      	mov	r4, r2
 800e68c:	460e      	mov	r6, r1
 800e68e:	b921      	cbnz	r1, 800e69a <_realloc_r+0x14>
 800e690:	4611      	mov	r1, r2
 800e692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e696:	f7fe ba0b 	b.w	800cab0 <_malloc_r>
 800e69a:	b922      	cbnz	r2, 800e6a6 <_realloc_r+0x20>
 800e69c:	f7fe f9ba 	bl	800ca14 <_free_r>
 800e6a0:	4625      	mov	r5, r4
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a6:	f000 f814 	bl	800e6d2 <_malloc_usable_size_r>
 800e6aa:	42a0      	cmp	r0, r4
 800e6ac:	d20f      	bcs.n	800e6ce <_realloc_r+0x48>
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	4638      	mov	r0, r7
 800e6b2:	f7fe f9fd 	bl	800cab0 <_malloc_r>
 800e6b6:	4605      	mov	r5, r0
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d0f2      	beq.n	800e6a2 <_realloc_r+0x1c>
 800e6bc:	4631      	mov	r1, r6
 800e6be:	4622      	mov	r2, r4
 800e6c0:	f7fe f994 	bl	800c9ec <memcpy>
 800e6c4:	4631      	mov	r1, r6
 800e6c6:	4638      	mov	r0, r7
 800e6c8:	f7fe f9a4 	bl	800ca14 <_free_r>
 800e6cc:	e7e9      	b.n	800e6a2 <_realloc_r+0x1c>
 800e6ce:	4635      	mov	r5, r6
 800e6d0:	e7e7      	b.n	800e6a2 <_realloc_r+0x1c>

0800e6d2 <_malloc_usable_size_r>:
 800e6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6d6:	1f18      	subs	r0, r3, #4
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	bfbc      	itt	lt
 800e6dc:	580b      	ldrlt	r3, [r1, r0]
 800e6de:	18c0      	addlt	r0, r0, r3
 800e6e0:	4770      	bx	lr

0800e6e2 <atan2f>:
 800e6e2:	f000 b851 	b.w	800e788 <__ieee754_atan2f>
	...

0800e6e8 <sqrtf>:
 800e6e8:	b510      	push	{r4, lr}
 800e6ea:	ed2d 8b02 	vpush	{d8}
 800e6ee:	b08a      	sub	sp, #40	; 0x28
 800e6f0:	eeb0 8a40 	vmov.f32	s16, s0
 800e6f4:	f000 f8f6 	bl	800e8e4 <__ieee754_sqrtf>
 800e6f8:	4b21      	ldr	r3, [pc, #132]	; (800e780 <sqrtf+0x98>)
 800e6fa:	f993 4000 	ldrsb.w	r4, [r3]
 800e6fe:	1c63      	adds	r3, r4, #1
 800e700:	d02c      	beq.n	800e75c <sqrtf+0x74>
 800e702:	eeb4 8a48 	vcmp.f32	s16, s16
 800e706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e70a:	d627      	bvs.n	800e75c <sqrtf+0x74>
 800e70c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e714:	d522      	bpl.n	800e75c <sqrtf+0x74>
 800e716:	2301      	movs	r3, #1
 800e718:	9300      	str	r3, [sp, #0]
 800e71a:	4b1a      	ldr	r3, [pc, #104]	; (800e784 <sqrtf+0x9c>)
 800e71c:	9301      	str	r3, [sp, #4]
 800e71e:	ee18 0a10 	vmov	r0, s16
 800e722:	2300      	movs	r3, #0
 800e724:	9308      	str	r3, [sp, #32]
 800e726:	f7f1 feed 	bl	8000504 <__aeabi_f2d>
 800e72a:	2200      	movs	r2, #0
 800e72c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e734:	2300      	movs	r3, #0
 800e736:	b9ac      	cbnz	r4, 800e764 <sqrtf+0x7c>
 800e738:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e73c:	4668      	mov	r0, sp
 800e73e:	f000 f8d4 	bl	800e8ea <matherr>
 800e742:	b1b8      	cbz	r0, 800e774 <sqrtf+0x8c>
 800e744:	9b08      	ldr	r3, [sp, #32]
 800e746:	b11b      	cbz	r3, 800e750 <sqrtf+0x68>
 800e748:	f7fe f8f6 	bl	800c938 <__errno>
 800e74c:	9b08      	ldr	r3, [sp, #32]
 800e74e:	6003      	str	r3, [r0, #0]
 800e750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e754:	f7f2 fa10 	bl	8000b78 <__aeabi_d2f>
 800e758:	ee00 0a10 	vmov	s0, r0
 800e75c:	b00a      	add	sp, #40	; 0x28
 800e75e:	ecbd 8b02 	vpop	{d8}
 800e762:	bd10      	pop	{r4, pc}
 800e764:	4610      	mov	r0, r2
 800e766:	4619      	mov	r1, r3
 800e768:	f7f2 f84e 	bl	8000808 <__aeabi_ddiv>
 800e76c:	2c02      	cmp	r4, #2
 800e76e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e772:	d1e3      	bne.n	800e73c <sqrtf+0x54>
 800e774:	f7fe f8e0 	bl	800c938 <__errno>
 800e778:	2321      	movs	r3, #33	; 0x21
 800e77a:	6003      	str	r3, [r0, #0]
 800e77c:	e7e2      	b.n	800e744 <sqrtf+0x5c>
 800e77e:	bf00      	nop
 800e780:	200001e8 	.word	0x200001e8
 800e784:	0800f60c 	.word	0x0800f60c

0800e788 <__ieee754_atan2f>:
 800e788:	ee10 2a90 	vmov	r2, s1
 800e78c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e790:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e794:	b510      	push	{r4, lr}
 800e796:	eef0 7a40 	vmov.f32	s15, s0
 800e79a:	dc06      	bgt.n	800e7aa <__ieee754_atan2f+0x22>
 800e79c:	ee10 0a10 	vmov	r0, s0
 800e7a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e7a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e7a8:	dd04      	ble.n	800e7b4 <__ieee754_atan2f+0x2c>
 800e7aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e7ae:	eeb0 0a67 	vmov.f32	s0, s15
 800e7b2:	bd10      	pop	{r4, pc}
 800e7b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e7b8:	d103      	bne.n	800e7c2 <__ieee754_atan2f+0x3a>
 800e7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7be:	f000 b897 	b.w	800e8f0 <atanf>
 800e7c2:	1794      	asrs	r4, r2, #30
 800e7c4:	f004 0402 	and.w	r4, r4, #2
 800e7c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e7cc:	b943      	cbnz	r3, 800e7e0 <__ieee754_atan2f+0x58>
 800e7ce:	2c02      	cmp	r4, #2
 800e7d0:	d06e      	beq.n	800e8b0 <__ieee754_atan2f+0x128>
 800e7d2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800e8b8 <__ieee754_atan2f+0x130>
 800e7d6:	2c03      	cmp	r4, #3
 800e7d8:	bf08      	it	eq
 800e7da:	eef0 7a47 	vmoveq.f32	s15, s14
 800e7de:	e7e6      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e7e0:	b941      	cbnz	r1, 800e7f4 <__ieee754_atan2f+0x6c>
 800e7e2:	eddf 7a36 	vldr	s15, [pc, #216]	; 800e8bc <__ieee754_atan2f+0x134>
 800e7e6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e8c0 <__ieee754_atan2f+0x138>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	bfb8      	it	lt
 800e7ee:	eef0 7a47 	vmovlt.f32	s15, s14
 800e7f2:	e7dc      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e7f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e7f8:	d122      	bne.n	800e840 <__ieee754_atan2f+0xb8>
 800e7fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e7fe:	d112      	bne.n	800e826 <__ieee754_atan2f+0x9e>
 800e800:	2c02      	cmp	r4, #2
 800e802:	d00a      	beq.n	800e81a <__ieee754_atan2f+0x92>
 800e804:	2c03      	cmp	r4, #3
 800e806:	d00b      	beq.n	800e820 <__ieee754_atan2f+0x98>
 800e808:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e8c4 <__ieee754_atan2f+0x13c>
 800e80c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800e8c8 <__ieee754_atan2f+0x140>
 800e810:	2c01      	cmp	r4, #1
 800e812:	bf18      	it	ne
 800e814:	eef0 7a47 	vmovne.f32	s15, s14
 800e818:	e7c9      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e81a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800e8cc <__ieee754_atan2f+0x144>
 800e81e:	e7c6      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e820:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e8d0 <__ieee754_atan2f+0x148>
 800e824:	e7c3      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e826:	2c02      	cmp	r4, #2
 800e828:	d042      	beq.n	800e8b0 <__ieee754_atan2f+0x128>
 800e82a:	2c03      	cmp	r4, #3
 800e82c:	d005      	beq.n	800e83a <__ieee754_atan2f+0xb2>
 800e82e:	2c01      	cmp	r4, #1
 800e830:	eddf 7a28 	vldr	s15, [pc, #160]	; 800e8d4 <__ieee754_atan2f+0x14c>
 800e834:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800e8d8 <__ieee754_atan2f+0x150>
 800e838:	e7eb      	b.n	800e812 <__ieee754_atan2f+0x8a>
 800e83a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e8b8 <__ieee754_atan2f+0x130>
 800e83e:	e7b6      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e840:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e844:	d0cd      	beq.n	800e7e2 <__ieee754_atan2f+0x5a>
 800e846:	1a5b      	subs	r3, r3, r1
 800e848:	15db      	asrs	r3, r3, #23
 800e84a:	2b3c      	cmp	r3, #60	; 0x3c
 800e84c:	dc1a      	bgt.n	800e884 <__ieee754_atan2f+0xfc>
 800e84e:	2a00      	cmp	r2, #0
 800e850:	da01      	bge.n	800e856 <__ieee754_atan2f+0xce>
 800e852:	333c      	adds	r3, #60	; 0x3c
 800e854:	db19      	blt.n	800e88a <__ieee754_atan2f+0x102>
 800e856:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e85a:	f000 f91d 	bl	800ea98 <fabsf>
 800e85e:	f000 f847 	bl	800e8f0 <atanf>
 800e862:	eef0 7a40 	vmov.f32	s15, s0
 800e866:	2c01      	cmp	r4, #1
 800e868:	d012      	beq.n	800e890 <__ieee754_atan2f+0x108>
 800e86a:	2c02      	cmp	r4, #2
 800e86c:	d017      	beq.n	800e89e <__ieee754_atan2f+0x116>
 800e86e:	2c00      	cmp	r4, #0
 800e870:	d09d      	beq.n	800e7ae <__ieee754_atan2f+0x26>
 800e872:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800e8dc <__ieee754_atan2f+0x154>
 800e876:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e87a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e8e0 <__ieee754_atan2f+0x158>
 800e87e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e882:	e794      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e884:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e8bc <__ieee754_atan2f+0x134>
 800e888:	e7ed      	b.n	800e866 <__ieee754_atan2f+0xde>
 800e88a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800e8d8 <__ieee754_atan2f+0x150>
 800e88e:	e7ea      	b.n	800e866 <__ieee754_atan2f+0xde>
 800e890:	ee17 3a90 	vmov	r3, s15
 800e894:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e898:	ee07 3a90 	vmov	s15, r3
 800e89c:	e787      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e89e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800e8dc <__ieee754_atan2f+0x154>
 800e8a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e8e0 <__ieee754_atan2f+0x158>
 800e8aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8ae:	e77e      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e8b0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e8e0 <__ieee754_atan2f+0x158>
 800e8b4:	e77b      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e8b6:	bf00      	nop
 800e8b8:	c0490fdb 	.word	0xc0490fdb
 800e8bc:	3fc90fdb 	.word	0x3fc90fdb
 800e8c0:	bfc90fdb 	.word	0xbfc90fdb
 800e8c4:	bf490fdb 	.word	0xbf490fdb
 800e8c8:	3f490fdb 	.word	0x3f490fdb
 800e8cc:	4016cbe4 	.word	0x4016cbe4
 800e8d0:	c016cbe4 	.word	0xc016cbe4
 800e8d4:	80000000 	.word	0x80000000
 800e8d8:	00000000 	.word	0x00000000
 800e8dc:	33bbbd2e 	.word	0x33bbbd2e
 800e8e0:	40490fdb 	.word	0x40490fdb

0800e8e4 <__ieee754_sqrtf>:
 800e8e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e8e8:	4770      	bx	lr

0800e8ea <matherr>:
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	4770      	bx	lr
	...

0800e8f0 <atanf>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	ee10 5a10 	vmov	r5, s0
 800e8f6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e8fa:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800e8fe:	eef0 7a40 	vmov.f32	s15, s0
 800e902:	db10      	blt.n	800e926 <atanf+0x36>
 800e904:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e908:	dd04      	ble.n	800e914 <atanf+0x24>
 800e90a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e90e:	eeb0 0a67 	vmov.f32	s0, s15
 800e912:	bd38      	pop	{r3, r4, r5, pc}
 800e914:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800ea4c <atanf+0x15c>
 800e918:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ea50 <atanf+0x160>
 800e91c:	2d00      	cmp	r5, #0
 800e91e:	bfd8      	it	le
 800e920:	eef0 7a47 	vmovle.f32	s15, s14
 800e924:	e7f3      	b.n	800e90e <atanf+0x1e>
 800e926:	4b4b      	ldr	r3, [pc, #300]	; (800ea54 <atanf+0x164>)
 800e928:	429c      	cmp	r4, r3
 800e92a:	dc10      	bgt.n	800e94e <atanf+0x5e>
 800e92c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800e930:	da0a      	bge.n	800e948 <atanf+0x58>
 800e932:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ea58 <atanf+0x168>
 800e936:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e93e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e946:	dce2      	bgt.n	800e90e <atanf+0x1e>
 800e948:	f04f 33ff 	mov.w	r3, #4294967295
 800e94c:	e013      	b.n	800e976 <atanf+0x86>
 800e94e:	f000 f8a3 	bl	800ea98 <fabsf>
 800e952:	4b42      	ldr	r3, [pc, #264]	; (800ea5c <atanf+0x16c>)
 800e954:	429c      	cmp	r4, r3
 800e956:	dc4f      	bgt.n	800e9f8 <atanf+0x108>
 800e958:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e95c:	429c      	cmp	r4, r3
 800e95e:	dc41      	bgt.n	800e9e4 <atanf+0xf4>
 800e960:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e964:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e968:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e96c:	2300      	movs	r3, #0
 800e96e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e972:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e976:	1c5a      	adds	r2, r3, #1
 800e978:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e97c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ea60 <atanf+0x170>
 800e980:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ea64 <atanf+0x174>
 800e984:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ea68 <atanf+0x178>
 800e988:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e98c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e990:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ea6c <atanf+0x17c>
 800e994:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e998:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ea70 <atanf+0x180>
 800e99c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e9a0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ea74 <atanf+0x184>
 800e9a4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e9a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ea78 <atanf+0x188>
 800e9ac:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e9b0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ea7c <atanf+0x18c>
 800e9b4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e9b8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ea80 <atanf+0x190>
 800e9bc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e9c0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ea84 <atanf+0x194>
 800e9c4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e9c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ea88 <atanf+0x198>
 800e9cc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e9d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e9d4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e9d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9dc:	d121      	bne.n	800ea22 <atanf+0x132>
 800e9de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9e2:	e794      	b.n	800e90e <atanf+0x1e>
 800e9e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e9e8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e9ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e9f6:	e7be      	b.n	800e976 <atanf+0x86>
 800e9f8:	4b24      	ldr	r3, [pc, #144]	; (800ea8c <atanf+0x19c>)
 800e9fa:	429c      	cmp	r4, r3
 800e9fc:	dc0b      	bgt.n	800ea16 <atanf+0x126>
 800e9fe:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ea02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea06:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ea0a:	2302      	movs	r3, #2
 800ea0c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ea10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea14:	e7af      	b.n	800e976 <atanf+0x86>
 800ea16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ea1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ea1e:	2303      	movs	r3, #3
 800ea20:	e7a9      	b.n	800e976 <atanf+0x86>
 800ea22:	4a1b      	ldr	r2, [pc, #108]	; (800ea90 <atanf+0x1a0>)
 800ea24:	491b      	ldr	r1, [pc, #108]	; (800ea94 <atanf+0x1a4>)
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	441a      	add	r2, r3
 800ea2a:	440b      	add	r3, r1
 800ea2c:	edd3 6a00 	vldr	s13, [r3]
 800ea30:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ea34:	2d00      	cmp	r5, #0
 800ea36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea3a:	ed92 7a00 	vldr	s14, [r2]
 800ea3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea42:	bfb8      	it	lt
 800ea44:	eef1 7a67 	vneglt.f32	s15, s15
 800ea48:	e761      	b.n	800e90e <atanf+0x1e>
 800ea4a:	bf00      	nop
 800ea4c:	bfc90fdb 	.word	0xbfc90fdb
 800ea50:	3fc90fdb 	.word	0x3fc90fdb
 800ea54:	3edfffff 	.word	0x3edfffff
 800ea58:	7149f2ca 	.word	0x7149f2ca
 800ea5c:	3f97ffff 	.word	0x3f97ffff
 800ea60:	3c8569d7 	.word	0x3c8569d7
 800ea64:	3d4bda59 	.word	0x3d4bda59
 800ea68:	bd6ef16b 	.word	0xbd6ef16b
 800ea6c:	3d886b35 	.word	0x3d886b35
 800ea70:	3dba2e6e 	.word	0x3dba2e6e
 800ea74:	3e124925 	.word	0x3e124925
 800ea78:	3eaaaaab 	.word	0x3eaaaaab
 800ea7c:	bd15a221 	.word	0xbd15a221
 800ea80:	bd9d8795 	.word	0xbd9d8795
 800ea84:	bde38e38 	.word	0xbde38e38
 800ea88:	be4ccccd 	.word	0xbe4ccccd
 800ea8c:	401bffff 	.word	0x401bffff
 800ea90:	0800f614 	.word	0x0800f614
 800ea94:	0800f624 	.word	0x0800f624

0800ea98 <fabsf>:
 800ea98:	ee10 3a10 	vmov	r3, s0
 800ea9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eaa0:	ee00 3a10 	vmov	s0, r3
 800eaa4:	4770      	bx	lr
	...

0800eaa8 <_init>:
 800eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaaa:	bf00      	nop
 800eaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaae:	bc08      	pop	{r3}
 800eab0:	469e      	mov	lr, r3
 800eab2:	4770      	bx	lr

0800eab4 <_fini>:
 800eab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab6:	bf00      	nop
 800eab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaba:	bc08      	pop	{r3}
 800eabc:	469e      	mov	lr, r3
 800eabe:	4770      	bx	lr
