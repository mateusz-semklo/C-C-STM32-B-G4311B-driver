
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c0  080065c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c8  080065c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080065d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000010  080065e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080065e0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115a5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a0  00000000  00000000  000315e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00033888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000348d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df10  00000000  00000000  000357f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc16  00000000  00000000  00053700  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ef6  00000000  00000000  00061316  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012420c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  00124288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006580 	.word	0x08006580

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08006580 	.word	0x08006580

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0xac>)
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_GPIO_Init+0xb0>)
 80005a4:	f001 f8d6 	bl	8001754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f001 f836 	bl	800161e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f001 f84d 	bl	8001652 <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10110000 	.word	0x10110000
 80005c8:	48000800 	.word	0x48000800

080005cc <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005dc:	f040 8141 	bne.w	8000862 <HAL_GPIO_EXTI_Callback+0x296>
	{

		licznik++;
 80005e0:	4b82      	ldr	r3, [pc, #520]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a81      	ldr	r2, [pc, #516]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80005e8:	6013      	str	r3, [r2, #0]


							switch (licznik)
 80005ea:	4b80      	ldr	r3, [pc, #512]	; (80007ec <HAL_GPIO_EXTI_Callback+0x220>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b05      	cmp	r3, #5
 80005f0:	f200 812f 	bhi.w	8000852 <HAL_GPIO_EXTI_Callback+0x286>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <HAL_GPIO_EXTI_Callback+0x30>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	080007f5 	.word	0x080007f5
 8000600:	08000615 	.word	0x08000615
 8000604:	08000673 	.word	0x08000673
 8000608:	080006d1 	.word	0x080006d1
 800060c:	0800072f 	.word	0x0800072f
 8000610:	0800078d 	.word	0x0800078d
							{
							case 1:
								 TIM1->CCR1=34000;
 8000614:	4b76      	ldr	r3, [pc, #472]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000616:	f248 42d0 	movw	r2, #34000	; 0x84d0
 800061a:	635a      	str	r2, [r3, #52]	; 0x34
								 TIM1->CCR2=0;
 800061c:	4b74      	ldr	r3, [pc, #464]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800061e:	2200      	movs	r2, #0
 8000620:	639a      	str	r2, [r3, #56]	; 0x38
								 TIM1->CCR3=0;
 8000622:	4b73      	ldr	r3, [pc, #460]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000624:	2200      	movs	r2, #0
 8000626:	63da      	str	r2, [r3, #60]	; 0x3c

								 SET_CC1_T1;
 8000628:	4b71      	ldr	r3, [pc, #452]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800062a:	6a1b      	ldr	r3, [r3, #32]
 800062c:	4a70      	ldr	r2, [pc, #448]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6213      	str	r3, [r2, #32]
								 SET_CC1N_T2;
 8000634:	4b6e      	ldr	r3, [pc, #440]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000636:	6a1b      	ldr	r3, [r3, #32]
 8000638:	4a6d      	ldr	r2, [pc, #436]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6213      	str	r3, [r2, #32]
								 SET_CC2_T3;
 8000640:	4b6b      	ldr	r3, [pc, #428]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000642:	6a1b      	ldr	r3, [r3, #32]
 8000644:	4a6a      	ldr	r2, [pc, #424]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6213      	str	r3, [r2, #32]
								 SET_CC2N_T4;
 800064c:	4b68      	ldr	r3, [pc, #416]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	4a67      	ldr	r2, [pc, #412]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000656:	6213      	str	r3, [r2, #32]
								 RESET_CC3_T5;
 8000658:	4b65      	ldr	r3, [pc, #404]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800065a:	6a1b      	ldr	r3, [r3, #32]
 800065c:	4a64      	ldr	r2, [pc, #400]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800065e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000662:	6213      	str	r3, [r2, #32]
								 RESET_CC3N_T6;
 8000664:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	4a61      	ldr	r2, [pc, #388]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800066a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800066e:	6213      	str	r3, [r2, #32]

						    break;
 8000670:	e0ef      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>

							case 2:
								 TIM1->CCR1=34000;
 8000672:	4b5f      	ldr	r3, [pc, #380]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000674:	f248 42d0 	movw	r2, #34000	; 0x84d0
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
								 TIM1->CCR2=0;
 800067a:	4b5d      	ldr	r3, [pc, #372]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800067c:	2200      	movs	r2, #0
 800067e:	639a      	str	r2, [r3, #56]	; 0x38
								 TIM1->CCR3=0;
 8000680:	4b5b      	ldr	r3, [pc, #364]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000682:	2200      	movs	r2, #0
 8000684:	63da      	str	r2, [r3, #60]	; 0x3c

								 SET_CC1_T1;
 8000686:	4b5a      	ldr	r3, [pc, #360]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000688:	6a1b      	ldr	r3, [r3, #32]
 800068a:	4a59      	ldr	r2, [pc, #356]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6213      	str	r3, [r2, #32]
								 SET_CC1N_T2;
 8000692:	4b57      	ldr	r3, [pc, #348]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	4a56      	ldr	r2, [pc, #344]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6213      	str	r3, [r2, #32]
								 RESET_CC2_T3;
 800069e:	4b54      	ldr	r3, [pc, #336]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006a0:	6a1b      	ldr	r3, [r3, #32]
 80006a2:	4a53      	ldr	r2, [pc, #332]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006a4:	f023 0310 	bic.w	r3, r3, #16
 80006a8:	6213      	str	r3, [r2, #32]
								 RESET_CC2N_T4;
 80006aa:	4b51      	ldr	r3, [pc, #324]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006ac:	6a1b      	ldr	r3, [r3, #32]
 80006ae:	4a50      	ldr	r2, [pc, #320]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b4:	6213      	str	r3, [r2, #32]
								 SET_CC3_T5;
 80006b6:	4b4e      	ldr	r3, [pc, #312]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006b8:	6a1b      	ldr	r3, [r3, #32]
 80006ba:	4a4d      	ldr	r2, [pc, #308]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6213      	str	r3, [r2, #32]
								 SET_CC3N_T6;
 80006c2:	4b4b      	ldr	r3, [pc, #300]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006c4:	6a1b      	ldr	r3, [r3, #32]
 80006c6:	4a4a      	ldr	r2, [pc, #296]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006cc:	6213      	str	r3, [r2, #32]

						    break;
 80006ce:	e0c0      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>

							case 3:

								TIM1->CCR1=0;
 80006d0:	4b47      	ldr	r3, [pc, #284]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->CCR2=34000;
 80006d6:	4b46      	ldr	r3, [pc, #280]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006d8:	f248 42d0 	movw	r2, #34000	; 0x84d0
 80006dc:	639a      	str	r2, [r3, #56]	; 0x38
								TIM1->CCR3=0;
 80006de:	4b44      	ldr	r3, [pc, #272]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	63da      	str	r2, [r3, #60]	; 0x3c

								RESET_CC1_T1;
 80006e4:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006e6:	6a1b      	ldr	r3, [r3, #32]
 80006e8:	4a41      	ldr	r2, [pc, #260]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006ea:	f023 0301 	bic.w	r3, r3, #1
 80006ee:	6213      	str	r3, [r2, #32]
								RESET_CC1N_T2;
 80006f0:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	4a3e      	ldr	r2, [pc, #248]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006f6:	f023 0304 	bic.w	r3, r3, #4
 80006fa:	6213      	str	r3, [r2, #32]
								SET_CC2_T3;
 80006fc:	4b3c      	ldr	r3, [pc, #240]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a3b      	ldr	r2, [pc, #236]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6213      	str	r3, [r2, #32]
								SET_CC2N_T4;
 8000708:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800070e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000712:	6213      	str	r3, [r2, #32]
								SET_CC3_T5;
 8000714:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000716:	6a1b      	ldr	r3, [r3, #32]
 8000718:	4a35      	ldr	r2, [pc, #212]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800071a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800071e:	6213      	str	r3, [r2, #32]
								SET_CC3N_T6;
 8000720:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800072a:	6213      	str	r3, [r2, #32]


						    break;
 800072c:	e091      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>

						    case 4:

						    	TIM1->CCR1=0;
 800072e:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=34000;
 8000734:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000736:	f248 42d0 	movw	r2, #34000	; 0x84d0
 800073a:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=0;
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	; 0x3c

						    	SET_CC1_T1;
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000744:	6a1b      	ldr	r3, [r3, #32]
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6213      	str	r3, [r2, #32]
						    	SET_CC1N_T2;
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6213      	str	r3, [r2, #32]
						    	SET_CC2_T3;
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800075c:	6a1b      	ldr	r3, [r3, #32]
 800075e:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	6213      	str	r3, [r2, #32]
						    	SET_CC2N_T4;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000768:	6a1b      	ldr	r3, [r3, #32]
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	6213      	str	r3, [r2, #32]
						    	RESET_CC3_T5;
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000774:	6a1b      	ldr	r3, [r3, #32]
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800077c:	6213      	str	r3, [r2, #32]
						    	RESET_CC3N_T6;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000788:	6213      	str	r3, [r2, #32]

							break;
 800078a:	e062      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>

						    case 5:
						    	TIM1->CCR1=0;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800078e:	2200      	movs	r2, #0
 8000790:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=0;;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8000794:	2200      	movs	r2, #0
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=34000;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 800079a:	f248 42d0 	movw	r2, #34000	; 0x84d0
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c

						    	SET_CC1_T1;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6213      	str	r3, [r2, #32]
						    	SET_CC1N_T2;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007ae:	6a1b      	ldr	r3, [r3, #32]
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6213      	str	r3, [r2, #32]
						    	RESET_CC2_T3;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007ba:	6a1b      	ldr	r3, [r3, #32]
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007be:	f023 0310 	bic.w	r3, r3, #16
 80007c2:	6213      	str	r3, [r2, #32]
						    	RESET_CC2N_T4;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007c6:	6a1b      	ldr	r3, [r3, #32]
 80007c8:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ce:	6213      	str	r3, [r2, #32]
						    	SET_CC3_T5;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	6213      	str	r3, [r2, #32]
						    	SET_CC3N_T6;
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007de:	6a1b      	ldr	r3, [r3, #32]
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e6:	6213      	str	r3, [r2, #32]

						    break;
 80007e8:	e033      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x286>
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000
 80007f0:	40012c00 	.word	0x40012c00

						    case 0:
						    	TIM1->CCR1=0;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
						    	TIM1->CCR2=0;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	639a      	str	r2, [r3, #56]	; 0x38
						    	TIM1->CCR3=34000;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000802:	f248 42d0 	movw	r2, #34000	; 0x84d0
 8000806:	63da      	str	r2, [r3, #60]	; 0x3c

						    	RESET_CC1_T1;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800080a:	6a1b      	ldr	r3, [r3, #32]
 800080c:	4a18      	ldr	r2, [pc, #96]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800080e:	f023 0301 	bic.w	r3, r3, #1
 8000812:	6213      	str	r3, [r2, #32]
						    	RESET_CC1N_T2;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000816:	6a1b      	ldr	r3, [r3, #32]
 8000818:	4a15      	ldr	r2, [pc, #84]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800081a:	f023 0304 	bic.w	r3, r3, #4
 800081e:	6213      	str	r3, [r2, #32]
						    	SET_CC2_T3;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000822:	6a1b      	ldr	r3, [r3, #32]
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6213      	str	r3, [r2, #32]
						    	SET_CC2N_T4;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800082e:	6a1b      	ldr	r3, [r3, #32]
 8000830:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000836:	6213      	str	r3, [r2, #32]
						    	SET_CC3_T5;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800083a:	6a1b      	ldr	r3, [r3, #32]
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800083e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000842:	6213      	str	r3, [r2, #32]
						    	SET_CC3N_T6;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	4a09      	ldr	r2, [pc, #36]	; (8000870 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800084a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084e:	6213      	str	r3, [r2, #32]

						    break;
 8000850:	bf00      	nop
							}



							if(licznik>5)
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b05      	cmp	r3, #5
 8000858:	dd03      	ble.n	8000862 <HAL_GPIO_EXTI_Callback+0x296>
							licznik=-1;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800085c:	f04f 32ff 	mov.w	r2, #4294967295
 8000860:	601a      	str	r2, [r3, #0]




	}
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40012c00 	.word	0x40012c00
 8000874:	20000000 	.word	0x20000000

08000878 <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
	{


	}
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	//i++;
	if(htim->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		//  TIM1->CCR2=TIM2->CCR2;
		//  TIM1->CCR3=TIM2->CCR2;
		}
	}

}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fd6b 	bl	8001386 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f8bc 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f7ff fe30 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008b8:	f000 f9b6 	bl	8000c28 <MX_TIM1_Init>
  MX_TIM4_Init();
 80008bc:	f000 fb34 	bl	8000f28 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 fca0 	bl	8001204 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008c4:	f000 fa96 	bl	8000df4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //////// konfiguracja Timer 2  ////////////
    TIM2->ARR=0xFFFE;
 80008c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->PSC=0;
 80008d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  //  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
  // 	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);


  //////// konfiguracja Timer 4  ////////////
    TIM4->ARR=0xFFFE;
 80008da:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <main+0x158>)
 80008dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->PSC=499;
 80008e2:	4b47      	ldr	r3, [pc, #284]	; (8000a00 <main+0x158>)
 80008e4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->CCR2=1;
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <main+0x158>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	639a      	str	r2, [r3, #56]	; 0x38

   // HAL_TIMEx_HallSensor_Start(&htim4);

    //////// konfiguracja Timer 1  ////////////
    TIM1->ARR=0xFFFF;
 80008f0:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <main+0x15c>)
 80008f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC=100;
 80008f8:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <main+0x15c>)
 80008fa:	2264      	movs	r2, #100	; 0x64
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->CCR1=0;
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <main+0x15c>)
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2=0;
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <main+0x15c>)
 8000906:	2200      	movs	r2, #0
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3=0;
 800090a:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <main+0x15c>)
 800090c:	2200      	movs	r2, #0
 800090e:	63da      	str	r2, [r3, #60]	; 0x3c
   // TIM1->CCR3=34000;
  //  HAL_TIMEx_ConfigCommutEvent_IT(&htim1,TIM_TS_ITR3, TIM_COMMUTATION_TRGI);



    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	483d      	ldr	r0, [pc, #244]	; (8000a08 <main+0x160>)
 8000914:	f002 f950 	bl	8002bb8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000918:	2100      	movs	r1, #0
 800091a:	483b      	ldr	r0, [pc, #236]	; (8000a08 <main+0x160>)
 800091c:	f003 fdb8 	bl	8004490 <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000920:	2104      	movs	r1, #4
 8000922:	4839      	ldr	r0, [pc, #228]	; (8000a08 <main+0x160>)
 8000924:	f002 f948 	bl	8002bb8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000928:	2104      	movs	r1, #4
 800092a:	4837      	ldr	r0, [pc, #220]	; (8000a08 <main+0x160>)
 800092c:	f003 fdb0 	bl	8004490 <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000930:	2108      	movs	r1, #8
 8000932:	4835      	ldr	r0, [pc, #212]	; (8000a08 <main+0x160>)
 8000934:	f002 f940 	bl	8002bb8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000938:	2108      	movs	r1, #8
 800093a:	4833      	ldr	r0, [pc, #204]	; (8000a08 <main+0x160>)
 800093c:	f003 fda8 	bl	8004490 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f001 f886 	bl	8001a58 <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d003      	beq.n	800095a <main+0xb2>
		  ch1=1;
 8000952:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <main+0x164>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	e002      	b.n	8000960 <main+0xb8>
	  else
		  ch1=0;
 800095a:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <main+0x164>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <main+0x168>)
 8000966:	f001 f877 	bl	8001a58 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <main+0xd0>
		  ch1N=1;
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <main+0x16c>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e002      	b.n	800097e <main+0xd6>
	  else
		  ch1N=0;
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <main+0x16c>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 800097e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f001 f867 	bl	8001a58 <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <main+0xf0>
		  ch2=1;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <main+0x170>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e002      	b.n	800099e <main+0xf6>
	  else
		  ch2=0;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <main+0x170>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 800099e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f001 f857 	bl	8001a58 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <main+0x110>
		  ch2N=1;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <main+0x174>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	e002      	b.n	80009be <main+0x116>
	  else
		  ch2N=0;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <main+0x174>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 80009be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f001 f847 	bl	8001a58 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <main+0x130>
	  	  ch3=1;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <main+0x178>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e002      	b.n	80009de <main+0x136>
	  else
	  	  ch3=0;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <main+0x178>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 80009de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e2:	4810      	ldr	r0, [pc, #64]	; (8000a24 <main+0x17c>)
 80009e4:	f001 f838 	bl	8001a58 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <main+0x14e>
	  	  ch3N=1;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <main+0x180>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	e7a4      	b.n	8000940 <main+0x98>
	  else
	  	  ch3N=0;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <main+0x180>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 80009fc:	e7a0      	b.n	8000940 <main+0x98>
 80009fe:	bf00      	nop
 8000a00:	40000800 	.word	0x40000800
 8000a04:	40012c00 	.word	0x40012c00
 8000a08:	20000084 	.word	0x20000084
 8000a0c:	20000036 	.word	0x20000036
 8000a10:	48000800 	.word	0x48000800
 8000a14:	2000002e 	.word	0x2000002e
 8000a18:	20000033 	.word	0x20000033
 8000a1c:	20000032 	.word	0x20000032
 8000a20:	2000002f 	.word	0x2000002f
 8000a24:	48000400 	.word	0x48000400
 8000a28:	2000002c 	.word	0x2000002c

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0a4      	sub	sp, #144	; 0x90
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a36:	2238      	movs	r2, #56	; 0x38
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f005 fd98 	bl	8006570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2244      	movs	r2, #68	; 0x44
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 fd8a 	bl	8006570 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f001 f82b 	bl	8001ab8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a62:	2301      	movs	r3, #1
 8000a64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a70:	2303      	movs	r3, #3
 8000a72:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a78:	2350      	movs	r3, #80	; 0x50
 8000a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 f8b3 	bl	8001c00 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000aa0:	f000 f826 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ab8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000abc:	2107      	movs	r1, #7
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fbb6 	bl	8002230 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000aca:	f000 f811 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fdc5 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ae4:	f000 f804 	bl	8000af0 <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3790      	adds	r7, #144	; 0x90
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0e:	6093      	str	r3, [r2, #8]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40007000 	.word	0x40007000

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x44>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6613      	str	r3, [r2, #96]	; 0x60
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x44>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x44>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000b56:	f7ff ffd3 	bl	8000b00 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 fc36 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000bca:	f002 f928 	bl	8002e1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000084 	.word	0x20000084

08000bd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <USART2_IRQHandler+0x10>)
 8000bde:	f003 feab 	bl	8004938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000011c 	.word	0x2000011c

08000bec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000bf0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bf4:	f000 ff48 	bl	8001a88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <SystemInit+0x28>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <SystemInit+0x28>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SystemInit+0x28>)
 8000c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c16:	609a      	str	r2, [r3, #8]
#endif
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0a0      	sub	sp, #128	; 0x80
 8000c2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2234      	movs	r2, #52	; 0x34
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f005 fc7c 	bl	8006570 <memset>

  htim1.Instance = TIM1;
 8000c78:	4b5c      	ldr	r3, [pc, #368]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000c7a:	4a5d      	ldr	r2, [pc, #372]	; (8000df0 <MX_TIM1_Init+0x1c8>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c7e:	4b5b      	ldr	r3, [pc, #364]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b59      	ldr	r3, [pc, #356]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000c8a:	4b58      	ldr	r3, [pc, #352]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b56      	ldr	r3, [pc, #344]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c96:	4b55      	ldr	r3, [pc, #340]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b53      	ldr	r3, [pc, #332]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ca2:	4852      	ldr	r0, [pc, #328]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000ca4:	f001 fed0 	bl	8002a48 <HAL_TIM_Base_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000cae:	f7ff ff1f 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	484b      	ldr	r0, [pc, #300]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000cc0:	f002 fbd0 	bl	8003464 <HAL_TIM_ConfigClockSource>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cca:	f7ff ff11 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cce:	4847      	ldr	r0, [pc, #284]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000cd0:	f001 ff11 	bl	8002af6 <HAL_TIM_PWM_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000cda:	f7ff ff09 	bl	8000af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000ce2:	2330      	movs	r3, #48	; 0x30
 8000ce4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ce6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cea:	4619      	mov	r1, r3
 8000cec:	483f      	ldr	r0, [pc, #252]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000cee:	f002 fc97 	bl	8003620 <HAL_TIM_SlaveConfigSynchro>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000cf8:	f7ff fefa 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000cfc:	2370      	movs	r3, #112	; 0x70
 8000cfe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4837      	ldr	r0, [pc, #220]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000d10:	f003 fc3e 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000d1a:	f7ff fee9 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1e:	2360      	movs	r3, #96	; 0x60
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4619      	mov	r1, r3
 8000d42:	482a      	ldr	r0, [pc, #168]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000d44:	f002 fa7e 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d4e:	f7ff fecf 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4823      	ldr	r0, [pc, #140]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000d60:	f002 fa70 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000d6a:	f7ff fec1 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d76:	2208      	movs	r2, #8
 8000d78:	4619      	mov	r1, r3
 8000d7a:	481c      	ldr	r0, [pc, #112]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000d7c:	f002 fa62 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000d86:	f7ff feb3 	bl	8000af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d8e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_3;
 8000d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8000d9c:	2344      	movs	r3, #68	; 0x44
 8000d9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000db2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000dd0:	f003 fc60 	bl	8004694 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0x1b6>
  {
    Error_Handler();
 8000dda:	f7ff fe89 	bl	8000af0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000dde:	4803      	ldr	r0, [pc, #12]	; (8000dec <MX_TIM1_Init+0x1c4>)
 8000de0:	f000 f99a 	bl	8001118 <HAL_TIM_MspPostInit>

}
 8000de4:	bf00      	nop
 8000de6:	3780      	adds	r7, #128	; 0x80
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000084 	.word	0x20000084
 8000df0:	40012c00 	.word	0x40012c00

08000df4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	; 0x40
 8000df8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e38:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000e44:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e56:	4833      	ldr	r0, [pc, #204]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000e58:	f001 fdf6 	bl	8002a48 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e62:	f7ff fe45 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e70:	4619      	mov	r1, r3
 8000e72:	482c      	ldr	r0, [pc, #176]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000e74:	f002 faf6 	bl	8003464 <HAL_TIM_ConfigClockSource>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e7e:	f7ff fe37 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e82:	4828      	ldr	r0, [pc, #160]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000e84:	f001 ff6a 	bl	8002d5c <HAL_TIM_IC_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e8e:	f7ff fe2f 	bl	8000af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e92:	2304      	movs	r3, #4
 8000e94:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e96:	2350      	movs	r3, #80	; 0x50
 8000e98:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481e      	ldr	r0, [pc, #120]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000eaa:	f002 fbb9 	bl	8003620 <HAL_TIM_SlaveConfigSynchro>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000eb4:	f7ff fe1c 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4817      	ldr	r0, [pc, #92]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000ec8:	f003 fb62 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000ed2:	f7ff fe0d 	bl	8000af0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eda:	2301      	movs	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4619      	mov	r1, r3
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000eee:	f002 f915 	bl	800311c <HAL_TIM_IC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000ef8:	f7ff fdfa 	bl	8000af0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000efc:	2302      	movs	r3, #2
 8000efe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f00:	2302      	movs	r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	2204      	movs	r2, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_TIM2_Init+0x130>)
 8000f0c:	f002 f906 	bl	800311c <HAL_TIM_IC_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000f16:	f7ff fdeb 	bl	8000af0 <Error_Handler>
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3740      	adds	r7, #64	; 0x40
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000d0 	.word	0x200000d0

08000f28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000f56:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <MX_TIM4_Init+0xcc>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f78:	481d      	ldr	r0, [pc, #116]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000f7a:	f001 fd65 	bl	8002a48 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000f84:	f7ff fdb4 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	4619      	mov	r1, r3
 8000f94:	4816      	ldr	r0, [pc, #88]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000f96:	f002 fa65 	bl	8003464 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000fa0:	f7ff fda6 	bl	8000af0 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000fbc:	f003 f9af 	bl	800431e <HAL_TIMEx_HallSensor_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000fc6:	f7ff fd93 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000fca:	2350      	movs	r3, #80	; 0x50
 8000fcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <MX_TIM4_Init+0xc8>)
 8000fd8:	f003 fada 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000fe2:	f7ff fd85 	bl	8000af0 <Error_Handler>
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	; 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000038 	.word	0x20000038
 8000ff4:	40000800 	.word	0x40000800

08000ff8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a3c      	ldr	r2, [pc, #240]	; (8001108 <HAL_TIM_Base_MspInit+0x110>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d114      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	4a3b      	ldr	r2, [pc, #236]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 8001020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	4b39      	ldr	r3, [pc, #228]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2102      	movs	r1, #2
 8001036:	201a      	movs	r0, #26
 8001038:	f000 faf1 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800103c:	201a      	movs	r0, #26
 800103e:	f000 fb08 	bl	8001652 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001042:	e05d      	b.n	8001100 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800104c:	d12a      	bne.n	80010a4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104e:	4b2f      	ldr	r3, [pc, #188]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	4a2e      	ldr	r2, [pc, #184]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6593      	str	r3, [r2, #88]	; 0x58
 800105a:	4b2c      	ldr	r3, [pc, #176]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a28      	ldr	r2, [pc, #160]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 800107e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001088:	2302      	movs	r3, #2
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108c:	2302      	movs	r3, #2
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001090:	2301      	movs	r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f000 fb59 	bl	8001754 <HAL_GPIO_Init>
}
 80010a2:	e02d      	b.n	8001100 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM4)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_TIM_Base_MspInit+0x118>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d128      	bne.n	8001100 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	4a16      	ldr	r2, [pc, #88]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_TIM_Base_MspInit+0x114>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_W_TIM4_Pin|HALL_U_TIM4_Pin|HALL_V_TIM4_Pin;
 80010de:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ec:	2302      	movs	r3, #2
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <HAL_TIM_Base_MspInit+0x11c>)
 80010fc:	f000 fb2a 	bl	8001754 <HAL_GPIO_Init>
}
 8001100:	bf00      	nop
 8001102:	3730      	adds	r7, #48	; 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40012c00 	.word	0x40012c00
 800110c:	40021000 	.word	0x40021000
 8001110:	40000800 	.word	0x40000800
 8001114:	48000400 	.word	0x48000400

08001118 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a2f      	ldr	r2, [pc, #188]	; (80011f4 <HAL_TIM_MspPostInit+0xdc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d157      	bne.n	80011ea <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <HAL_TIM_MspPostInit+0xe0>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <HAL_TIM_MspPostInit+0xe0>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <HAL_TIM_MspPostInit+0xe0>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HAL_TIM_MspPostInit+0xe0>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <HAL_TIM_MspPostInit+0xe0>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_TIM_MspPostInit+0xe0>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_TIM_MspPostInit+0xe0>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_TIM_MspPostInit+0xe0>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_TIM_MspPostInit+0xe0>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118c:	2302      	movs	r3, #2
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001194:	2304      	movs	r3, #4
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4817      	ldr	r0, [pc, #92]	; (80011fc <HAL_TIM_MspPostInit+0xe4>)
 80011a0:	f000 fad8 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b2:	2302      	movs	r3, #2
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80011b6:	2304      	movs	r3, #4
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <HAL_TIM_MspPostInit+0xe8>)
 80011c2:	f000 fac7 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80011c6:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011d8:	2306      	movs	r3, #6
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f000 fab5 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40012c00 	.word	0x40012c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000800 	.word	0x48000800
 8001200:	48000400 	.word	0x48000400

08001204 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <MX_USART2_UART_Init+0x90>)
 800120a:	4a23      	ldr	r2, [pc, #140]	; (8001298 <MX_USART2_UART_Init+0x94>)
 800120c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_USART2_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_USART2_UART_Init+0x90>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_USART2_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <MX_USART2_UART_Init+0x90>)
 800124e:	f003 fb22 	bl	8004896 <HAL_UART_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001258:	f7ff fc4a 	bl	8000af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001260:	f005 f87e 	bl	8006360 <HAL_UARTEx_SetTxFifoThreshold>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800126a:	f7ff fc41 	bl	8000af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4808      	ldr	r0, [pc, #32]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001272:	f005 f8b3 	bl	80063dc <HAL_UARTEx_SetRxFifoThreshold>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800127c:	f7ff fc38 	bl	8000af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_USART2_UART_Init+0x90>)
 8001282:	f005 f834 	bl	80062ee <HAL_UARTEx_DisableFifoMode>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800128c:	f7ff fc30 	bl	8000af0 <Error_Handler>
  }

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000011c 	.word	0x2000011c
 8001298:	40004400 	.word	0x40004400

0800129c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <HAL_UART_MspInit+0x8c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12f      	bne.n	800131e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_UART_MspInit+0x90>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	4a1a      	ldr	r2, [pc, #104]	; (800132c <HAL_UART_MspInit+0x90>)
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_UART_MspInit+0x90>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_UART_MspInit+0x90>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_UART_MspInit+0x90>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_UART_MspInit+0x90>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012ee:	2318      	movs	r3, #24
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fe:	2307      	movs	r3, #7
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <HAL_UART_MspInit+0x94>)
 800130a:	f000 fa23 	bl	8001754 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2103      	movs	r1, #3
 8001312:	2026      	movs	r0, #38	; 0x26
 8001314:	f000 f983 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001318:	2026      	movs	r0, #38	; 0x26
 800131a:	f000 f99a 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40004400 	.word	0x40004400
 800132c:	40021000 	.word	0x40021000
 8001330:	48000400 	.word	0x48000400

08001334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001336:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <LoopForever+0x6>)
  ldr r1, =_edata
 800133a:	490e      	ldr	r1, [pc, #56]	; (8001374 <LoopForever+0xa>)
  ldr r2, =_sidata
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <LoopForever+0xe>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001350:	4c0b      	ldr	r4, [pc, #44]	; (8001380 <LoopForever+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800135e:	f7ff fc4d 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001362:	f005 f8e1 	bl	8006528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001366:	f7ff fa9f 	bl	80008a8 <main>

0800136a <LoopForever>:

LoopForever:
    b LoopForever
 800136a:	e7fe      	b.n	800136a <LoopForever>
  ldr   r0, =_estack
 800136c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001378:	080065d0 	.word	0x080065d0
  ldr r2, =_sbss
 800137c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001380:	200001ac 	.word	0x200001ac

08001384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC1_2_IRQHandler>

08001386 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 f939 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001396:	2000      	movs	r0, #0
 8001398:	f000 f80e 	bl	80013b8 <HAL_InitTick>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	e001      	b.n	80013ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a8:	f7ff fbba 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ac:	79fb      	ldrb	r3, [r7, #7]

}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_InitTick+0x68>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d022      	beq.n	8001412 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_InitTick+0x6c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_InitTick+0x68>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f944 	bl	800166e <HAL_SYSTICK_Config>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10f      	bne.n	800140c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	d809      	bhi.n	8001406 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f2:	2200      	movs	r2, #0
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	f04f 30ff 	mov.w	r0, #4294967295
 80013fa:	f000 f910 	bl	800161e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_InitTick+0x70>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e007      	b.n	8001416 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e004      	b.n	8001416 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e001      	b.n	8001416 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000000c 	.word	0x2000000c
 8001424:	20000004 	.word	0x20000004
 8001428:	20000008 	.word	0x20000008

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x1c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x20>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4413      	add	r3, r2
 800143a:	4a03      	ldr	r2, [pc, #12]	; (8001448 <HAL_IncTick+0x1c>)
 800143c:	6013      	str	r3, [r2, #0]
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200001a8 	.word	0x200001a8
 800144c:	2000000c 	.word	0x2000000c

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200001a8 	.word	0x200001a8

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	; (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff29 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff40 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff90 	bl	800155c <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5f 	bl	8001508 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff33 	bl	80014cc <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa4 	bl	80015c4 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d00d      	beq.n	80016ba <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2204      	movs	r2, #4
 80016a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e047      	b.n	800174a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f003 021f 	and.w	r2, r3, #31
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001706:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00c      	beq.n	800172a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800171e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001728:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
    }
  }
  return status;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001762:	e15a      	b.n	8001a1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 814c 	beq.w	8001a14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d00b      	beq.n	800179c <HAL_GPIO_Init+0x48>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d007      	beq.n	800179c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001790:	2b11      	cmp	r3, #17
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b12      	cmp	r3, #18
 800179a:	d130      	bne.n	80017fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d2:	2201      	movs	r2, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	f003 0201 	and.w	r2, r3, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0xea>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b12      	cmp	r3, #18
 800183c:	d123      	bne.n	8001886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	6939      	ldr	r1, [r7, #16]
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80a6 	beq.w	8001a14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	4b5b      	ldr	r3, [pc, #364]	; (8001a38 <HAL_GPIO_Init+0x2e4>)
 80018ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018cc:	4a5a      	ldr	r2, [pc, #360]	; (8001a38 <HAL_GPIO_Init+0x2e4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6613      	str	r3, [r2, #96]	; 0x60
 80018d4:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <HAL_GPIO_Init+0x2e4>)
 80018d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e0:	4a56      	ldr	r2, [pc, #344]	; (8001a3c <HAL_GPIO_Init+0x2e8>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800190a:	d01f      	beq.n	800194c <HAL_GPIO_Init+0x1f8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_GPIO_Init+0x2ec>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d019      	beq.n	8001948 <HAL_GPIO_Init+0x1f4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d013      	beq.n	8001944 <HAL_GPIO_Init+0x1f0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <HAL_GPIO_Init+0x2f4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d00d      	beq.n	8001940 <HAL_GPIO_Init+0x1ec>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <HAL_GPIO_Init+0x2f8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d007      	beq.n	800193c <HAL_GPIO_Init+0x1e8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <HAL_GPIO_Init+0x2fc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_GPIO_Init+0x1e4>
 8001934:	2305      	movs	r3, #5
 8001936:	e00a      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001938:	2306      	movs	r3, #6
 800193a:	e008      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 800193c:	2304      	movs	r3, #4
 800193e:	e006      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001940:	2303      	movs	r3, #3
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001944:	2302      	movs	r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 800194c:	2300      	movs	r3, #0
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195e:	4937      	ldr	r1, [pc, #220]	; (8001a3c <HAL_GPIO_Init+0x2e8>)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800196c:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <HAL_GPIO_Init+0x300>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001990:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <HAL_GPIO_Init+0x300>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_GPIO_Init+0x300>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ba:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <HAL_GPIO_Init+0x300>)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_GPIO_Init+0x300>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <HAL_GPIO_Init+0x300>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_GPIO_Init+0x300>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <HAL_GPIO_Init+0x300>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f ae9d 	bne.w	8001764 <HAL_GPIO_Init+0x10>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	48000c00 	.word	0x48000c00
 8001a4c:	48001000 	.word	0x48001000
 8001a50:	48001400 	.word	0x48001400
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd90 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d141      	bne.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d131      	bne.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad4:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ada:	4a46      	ldr	r2, [pc, #280]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aec:	4a41      	ldr	r2, [pc, #260]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af4:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2232      	movs	r2, #50	; 0x32
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a3f      	ldr	r2, [pc, #252]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	0c9b      	lsrs	r3, r3, #18
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0a:	e002      	b.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1e:	d102      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f2      	bne.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b32:	d158      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e057      	b.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b48:	e04d      	b.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b50:	d141      	bne.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5e:	d131      	bne.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b78:	4a1e      	ldr	r2, [pc, #120]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2232      	movs	r2, #50	; 0x32
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0c9b      	lsrs	r3, r3, #18
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b96:	e002      	b.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001baa:	d102      	bne.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f2      	bne.n	8001b98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d112      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e011      	b.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bd4:	e007      	b.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	431bde83 	.word	0x431bde83

08001c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e308      	b.n	8002224 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d075      	beq.n	8001d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1e:	4ba3      	ldr	r3, [pc, #652]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c28:	4ba0      	ldr	r3, [pc, #640]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b0c      	cmp	r3, #12
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3e>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_OscConfig+0x44>
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d10b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	4b99      	ldr	r3, [pc, #612]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d05b      	beq.n	8001d08 <HAL_RCC_OscConfig+0x108>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d157      	bne.n	8001d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e2e3      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d106      	bne.n	8001c74 <HAL_RCC_OscConfig+0x74>
 8001c66:	4b91      	ldr	r3, [pc, #580]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a90      	ldr	r2, [pc, #576]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x98>
 8001c7e:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a8a      	ldr	r2, [pc, #552]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a87      	ldr	r2, [pc, #540]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c98:	4b84      	ldr	r3, [pc, #528]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a83      	ldr	r2, [pc, #524]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a80      	ldr	r2, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fbca 	bl	8001450 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fbc6 	bl	8001450 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e2a8      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd2:	4b76      	ldr	r3, [pc, #472]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xc0>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fbb6 	bl	8001450 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fbb2 	bl	8001450 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e294      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfa:	4b6c      	ldr	r3, [pc, #432]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xe8>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d075      	beq.n	8001e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d16:	4b65      	ldr	r3, [pc, #404]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d20:	4b62      	ldr	r3, [pc, #392]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	2b0c      	cmp	r3, #12
 8001d2e:	d102      	bne.n	8001d36 <HAL_RCC_OscConfig+0x136>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_OscConfig+0x13c>
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d11f      	bne.n	8001d7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3c:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_OscConfig+0x154>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e267      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	4952      	ldr	r1, [pc, #328]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d68:	4b51      	ldr	r3, [pc, #324]	; (8001eb0 <HAL_RCC_OscConfig+0x2b0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fb23 	bl	80013b8 <HAL_InitTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d043      	beq.n	8001e00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e253      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d023      	beq.n	8001dcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d84:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fb5e 	bl	8001450 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fb5a 	bl	8001450 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e23c      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	061b      	lsls	r3, r3, #24
 8001dc4:	4939      	ldr	r1, [pc, #228]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
 8001dca:	e01a      	b.n	8001e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dcc:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a36      	ldr	r2, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fb3a 	bl	8001450 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de0:	f7ff fb36 	bl	8001450 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e218      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df2:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x1e0>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d03c      	beq.n	8001e88 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff fb13 	bl	8001450 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fb0f 	bl	8001450 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1f1      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ef      	beq.n	8001e2e <HAL_RCC_OscConfig+0x22e>
 8001e4e:	e01b      	b.n	8001e88 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff faf6 	bl	8001450 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff faf2 	bl	8001450 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1d4      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ef      	bne.n	8001e68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80ab 	beq.w	8001fec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2b4>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e005      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2b6>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4baf      	ldr	r3, [pc, #700]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4aae      	ldr	r2, [pc, #696]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec6:	4bac      	ldr	r3, [pc, #688]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed6:	4ba9      	ldr	r3, [pc, #676]	; (800217c <HAL_RCC_OscConfig+0x57c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ee2:	4ba6      	ldr	r3, [pc, #664]	; (800217c <HAL_RCC_OscConfig+0x57c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4aa5      	ldr	r2, [pc, #660]	; (800217c <HAL_RCC_OscConfig+0x57c>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7ff faaf 	bl	8001450 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7ff faab 	bl	8001450 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e18d      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f08:	4b9c      	ldr	r3, [pc, #624]	; (800217c <HAL_RCC_OscConfig+0x57c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d108      	bne.n	8001f2e <HAL_RCC_OscConfig+0x32e>
 8001f1c:	4b96      	ldr	r3, [pc, #600]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a95      	ldr	r2, [pc, #596]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f2c:	e024      	b.n	8001f78 <HAL_RCC_OscConfig+0x378>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d110      	bne.n	8001f58 <HAL_RCC_OscConfig+0x358>
 8001f36:	4b90      	ldr	r3, [pc, #576]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	4a8e      	ldr	r2, [pc, #568]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f46:	4b8c      	ldr	r3, [pc, #560]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	4a8a      	ldr	r2, [pc, #552]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f56:	e00f      	b.n	8001f78 <HAL_RCC_OscConfig+0x378>
 8001f58:	4b87      	ldr	r3, [pc, #540]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a86      	ldr	r2, [pc, #536]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f68:	4b83      	ldr	r3, [pc, #524]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	4a82      	ldr	r2, [pc, #520]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d016      	beq.n	8001fae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff fa66 	bl	8001450 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7ff fa62 	bl	8001450 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e142      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9e:	4b76      	ldr	r3, [pc, #472]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ed      	beq.n	8001f88 <HAL_RCC_OscConfig+0x388>
 8001fac:	e015      	b.n	8001fda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7ff fa4f 	bl	8001450 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7ff fa4b 	bl	8001450 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e12b      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ed      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fda:	7ffb      	ldrb	r3, [r7, #31]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	4b65      	ldr	r3, [pc, #404]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4a64      	ldr	r2, [pc, #400]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8001fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d03c      	beq.n	8002072 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01c      	beq.n	800203a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002000:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002006:	4a5c      	ldr	r2, [pc, #368]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002010:	f7ff fa1e 	bl	8001450 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002018:	f7ff fa1a 	bl	8001450 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e0fc      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800202a:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800202c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ef      	beq.n	8002018 <HAL_RCC_OscConfig+0x418>
 8002038:	e01b      	b.n	8002072 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800203c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002040:	4a4d      	ldr	r2, [pc, #308]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204a:	f7ff fa01 	bl	8001450 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002052:	f7ff f9fd 	bl	8001450 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0df      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002064:	4b44      	ldr	r3, [pc, #272]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002066:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ef      	bne.n	8002052 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80d3 	beq.w	8002222 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800207c:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b0c      	cmp	r3, #12
 8002086:	f000 808d 	beq.w	80021a4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d15a      	bne.n	8002148 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a38      	ldr	r2, [pc, #224]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7ff f9d7 	bl	8001450 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7ff f9d3 	bl	8001450 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0b5      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_RCC_OscConfig+0x580>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6a11      	ldr	r1, [r2, #32]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020d4:	3a01      	subs	r2, #1
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	4311      	orrs	r1, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80020de:	0212      	lsls	r2, r2, #8
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020e6:	0852      	lsrs	r2, r2, #1
 80020e8:	3a01      	subs	r2, #1
 80020ea:	0552      	lsls	r2, r2, #21
 80020ec:	4311      	orrs	r1, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020f2:	0852      	lsrs	r2, r2, #1
 80020f4:	3a01      	subs	r2, #1
 80020f6:	0652      	lsls	r2, r2, #25
 80020f8:	4311      	orrs	r1, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020fe:	06d2      	lsls	r2, r2, #27
 8002100:	430a      	orrs	r2, r1
 8002102:	491d      	ldr	r1, [pc, #116]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002104:	4313      	orrs	r3, r2
 8002106:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1a      	ldr	r2, [pc, #104]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff f996 	bl	8001450 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff f992 	bl	8001450 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e074      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x528>
 8002146:	e06c      	b.n	8002222 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800214e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002152:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_RCC_OscConfig+0x578>)
 8002166:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff f96e 	bl	8001450 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002176:	e00e      	b.n	8002196 <HAL_RCC_OscConfig+0x596>
 8002178:	40021000 	.word	0x40021000
 800217c:	40007000 	.word	0x40007000
 8002180:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff f964 	bl	8001450 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e046      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <HAL_RCC_OscConfig+0x62c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x584>
 80021a2:	e03e      	b.n	8002222 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e039      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021b0:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_RCC_OscConfig+0x62c>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d12c      	bne.n	800221e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	3b01      	subs	r3, #1
 80021d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d123      	bne.n	800221e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d11b      	bne.n	800221e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d113      	bne.n	800221e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d109      	bne.n	800221e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	3b01      	subs	r3, #1
 8002218:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e11e      	b.n	8002486 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b91      	ldr	r3, [pc, #580]	; (8002490 <HAL_RCC_ClockConfig+0x260>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d910      	bls.n	8002278 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b8e      	ldr	r3, [pc, #568]	; (8002490 <HAL_RCC_ClockConfig+0x260>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 020f 	bic.w	r2, r3, #15
 800225e:	498c      	ldr	r1, [pc, #560]	; (8002490 <HAL_RCC_ClockConfig+0x260>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b8a      	ldr	r3, [pc, #552]	; (8002490 <HAL_RCC_ClockConfig+0x260>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e106      	b.n	8002486 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d073      	beq.n	800236c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d129      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228c:	4b81      	ldr	r3, [pc, #516]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0f4      	b.n	8002486 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800229c:	f000 f99e 	bl	80025dc <RCC_GetSysClockFreqFromPLLSource>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4a7c      	ldr	r2, [pc, #496]	; (8002498 <HAL_RCC_ClockConfig+0x268>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d93f      	bls.n	800232a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022aa:	4b7a      	ldr	r3, [pc, #488]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d033      	beq.n	800232a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d12f      	bne.n	800232a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022d2:	4a70      	ldr	r2, [pc, #448]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80022d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e024      	b.n	800232a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0c6      	b.n	8002486 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f8:	4b66      	ldr	r3, [pc, #408]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0be      	b.n	8002486 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002308:	f000 f8ce 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 800230c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4a61      	ldr	r2, [pc, #388]	; (8002498 <HAL_RCC_ClockConfig+0x268>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d909      	bls.n	800232a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002316:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231e:	4a5d      	ldr	r2, [pc, #372]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 8002320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002324:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b5a      	ldr	r3, [pc, #360]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4957      	ldr	r1, [pc, #348]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233c:	f7ff f888 	bl	8001450 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7ff f884 	bl	8001450 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e095      	b.n	8002486 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b4e      	ldr	r3, [pc, #312]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d023      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002384:	4b43      	ldr	r3, [pc, #268]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a42      	ldr	r2, [pc, #264]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 800238a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800238e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800239c:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80023a4:	4a3b      	ldr	r2, [pc, #236]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80023a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4936      	ldr	r1, [pc, #216]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
 80023be:	e008      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b80      	cmp	r3, #128	; 0x80
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023c6:	4b33      	ldr	r3, [pc, #204]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4a32      	ldr	r2, [pc, #200]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 80023cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d2:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <HAL_RCC_ClockConfig+0x260>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d21d      	bcs.n	800241c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_ClockConfig+0x260>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 020f 	bic.w	r2, r3, #15
 80023e8:	4929      	ldr	r1, [pc, #164]	; (8002490 <HAL_RCC_ClockConfig+0x260>)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023f0:	f7ff f82e 	bl	8001450 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff f82a 	bl	8001450 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e03b      	b.n	8002486 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_RCC_ClockConfig+0x260>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d1ed      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4917      	ldr	r1, [pc, #92]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490f      	ldr	r1, [pc, #60]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800245a:	f000 f825 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 800245e:	4601      	mov	r1, r0
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_RCC_ClockConfig+0x264>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	4a0c      	ldr	r2, [pc, #48]	; (800249c <HAL_RCC_ClockConfig+0x26c>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	fa21 f303 	lsr.w	r3, r1, r3
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x270>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_ClockConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe ff9a 	bl	80013b8 <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000
 8002494:	40021000 	.word	0x40021000
 8002498:	04c4b400 	.word	0x04c4b400
 800249c:	080065a8 	.word	0x080065a8
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000008 	.word	0x20000008

080024a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024ae:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	e047      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	e03e      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d136      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3301      	adds	r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d10c      	bne.n	8002516 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024fc:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	4a16      	ldr	r2, [pc, #88]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002506:	68d2      	ldr	r2, [r2, #12]
 8002508:	0a12      	lsrs	r2, r2, #8
 800250a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
      break;
 8002514:	e00c      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002520:	68d2      	ldr	r2, [r2, #12]
 8002522:	0a12      	lsrs	r2, r2, #8
 8002524:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
      break;
 800252e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0e5b      	lsrs	r3, r3, #25
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	3301      	adds	r3, #1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e001      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002550:	693b      	ldr	r3, [r7, #16]
}
 8002552:	4618      	mov	r0, r3
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	00f42400 	.word	0x00f42400
 8002568:	007a1200 	.word	0x007a1200

0800256c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_RCC_GetHCLKFreq+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000004 	.word	0x20000004

08002584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002588:	f7ff fff0 	bl	800256c <HAL_RCC_GetHCLKFreq>
 800258c:	4601      	mov	r1, r0
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	080065b8 	.word	0x080065b8

080025b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025b4:	f7ff ffda 	bl	800256c <HAL_RCC_GetHCLKFreq>
 80025b8:	4601      	mov	r1, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0adb      	lsrs	r3, r3, #11
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	080065b8 	.word	0x080065b8

080025dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3301      	adds	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d10c      	bne.n	800261a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002600:	4a17      	ldr	r2, [pc, #92]	; (8002660 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800260a:	68d2      	ldr	r2, [r2, #12]
 800260c:	0a12      	lsrs	r2, r2, #8
 800260e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
    break;
 8002618:	e00c      	b.n	8002634 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800261a:	4a12      	ldr	r2, [pc, #72]	; (8002664 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002624:	68d2      	ldr	r2, [r2, #12]
 8002626:	0a12      	lsrs	r2, r2, #8
 8002628:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
    break;
 8002632:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0e5b      	lsrs	r3, r3, #25
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	3301      	adds	r3, #1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800264e:	687b      	ldr	r3, [r7, #4]
}
 8002650:	4618      	mov	r0, r3
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40021000 	.word	0x40021000
 8002660:	007a1200 	.word	0x007a1200
 8002664:	00f42400 	.word	0x00f42400

08002668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002670:	2300      	movs	r3, #0
 8002672:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002674:	2300      	movs	r3, #0
 8002676:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8098 	beq.w	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b40      	ldr	r3, [pc, #256]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	4a3f      	ldr	r2, [pc, #252]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	6593      	str	r3, [r2, #88]	; 0x58
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a39      	ldr	r2, [pc, #228]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026be:	f7fe fec7 	bl	8001450 <HAL_GetTick>
 80026c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c4:	e009      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7fe fec3 	bl	8001450 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d902      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	74fb      	strb	r3, [r7, #19]
        break;
 80026d8:	e005      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026da:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0ef      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d159      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01e      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	d019      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002712:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800272c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002734:	4a18      	ldr	r2, [pc, #96]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7fe fe83 	bl	8001450 <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274c:	e00b      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe fe7f 	bl	8001450 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d902      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	74fb      	strb	r3, [r7, #19]
            break;
 8002764:	e006      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ec      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10b      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4903      	ldr	r1, [pc, #12]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002790:	e008      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	74bb      	strb	r3, [r7, #18]
 8002796:	e005      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a4:	7c7b      	ldrb	r3, [r7, #17]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4ba6      	ldr	r3, [pc, #664]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	4aa5      	ldr	r2, [pc, #660]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c2:	4ba0      	ldr	r3, [pc, #640]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f023 0203 	bic.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	499c      	ldr	r1, [pc, #624]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e4:	4b97      	ldr	r3, [pc, #604]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f023 020c 	bic.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4994      	ldr	r1, [pc, #592]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002806:	4b8f      	ldr	r3, [pc, #572]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	498b      	ldr	r1, [pc, #556]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002828:	4b86      	ldr	r3, [pc, #536]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	4983      	ldr	r1, [pc, #524]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800284a:	4b7e      	ldr	r3, [pc, #504]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	497a      	ldr	r1, [pc, #488]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800286c:	4b75      	ldr	r3, [pc, #468]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	4972      	ldr	r1, [pc, #456]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800288e:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	4969      	ldr	r1, [pc, #420]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b0:	4b64      	ldr	r3, [pc, #400]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4961      	ldr	r1, [pc, #388]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028d2:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	4958      	ldr	r1, [pc, #352]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f4:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	4950      	ldr	r1, [pc, #320]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002912:	d105      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a4a      	ldr	r2, [pc, #296]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800291e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800292c:	4b45      	ldr	r3, [pc, #276]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	4942      	ldr	r1, [pc, #264]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d105      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294c:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a3c      	ldr	r2, [pc, #240]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002956:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002964:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4934      	ldr	r1, [pc, #208]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002982:	d105      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002984:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d015      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	4926      	ldr	r1, [pc, #152]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ba:	d105      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a20      	ldr	r2, [pc, #128]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	4918      	ldr	r1, [pc, #96]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f2:	d105      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d015      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	490a      	ldr	r1, [pc, #40]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a38:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e049      	b.n	8002aee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fac2 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f000 fe34 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e049      	b.n	8002b9c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f841 	bl	8002ba4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f000 fddd 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_TIM_PWM_Start+0x24>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e03c      	b.n	8002c56 <HAL_TIM_PWM_Start+0x9e>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d109      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x3e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	bf14      	ite	ne
 8002bee:	2301      	movne	r3, #1
 8002bf0:	2300      	moveq	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	e02f      	b.n	8002c56 <HAL_TIM_PWM_Start+0x9e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d109      	bne.n	8002c10 <HAL_TIM_PWM_Start+0x58>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	bf14      	ite	ne
 8002c08:	2301      	movne	r3, #1
 8002c0a:	2300      	moveq	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e022      	b.n	8002c56 <HAL_TIM_PWM_Start+0x9e>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d109      	bne.n	8002c2a <HAL_TIM_PWM_Start+0x72>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e015      	b.n	8002c56 <HAL_TIM_PWM_Start+0x9e>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d109      	bne.n	8002c44 <HAL_TIM_PWM_Start+0x8c>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e008      	b.n	8002c56 <HAL_TIM_PWM_Start+0x9e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06e      	b.n	8002d3c <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0xb6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c6c:	e023      	b.n	8002cb6 <HAL_TIM_PWM_Start+0xfe>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_PWM_Start+0xc6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c7c:	e01b      	b.n	8002cb6 <HAL_TIM_PWM_Start+0xfe>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d104      	bne.n	8002c8e <HAL_TIM_PWM_Start+0xd6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c8c:	e013      	b.n	8002cb6 <HAL_TIM_PWM_Start+0xfe>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_PWM_Start+0xe6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c9c:	e00b      	b.n	8002cb6 <HAL_TIM_PWM_Start+0xfe>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_PWM_Start+0xf6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cac:	e003      	b.n	8002cb6 <HAL_TIM_PWM_Start+0xfe>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	6839      	ldr	r1, [r7, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f001 fb08 	bl	80042d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_TIM_PWM_Start+0x18c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x13e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_TIM_PWM_Start+0x190>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x13e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_TIM_PWM_Start+0x194>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x13e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	; (8002d50 <HAL_TIM_PWM_Start+0x198>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x13e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <HAL_TIM_PWM_Start+0x19c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x142>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_PWM_Start+0x144>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_TIM_PWM_Start+0x1a0>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d00b      	beq.n	8002d3a <HAL_TIM_PWM_Start+0x182>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d007      	beq.n	8002d3a <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40013400 	.word	0x40013400
 8002d4c:	40014000 	.word	0x40014000
 8002d50:	40014400 	.word	0x40014400
 8002d54:	40014800 	.word	0x40014800
 8002d58:	00010007 	.word	0x00010007

08002d5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e049      	b.n	8002e02 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f841 	bl	8002e0a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 fcaa 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d122      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d11b      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 0202 	mvn.w	r2, #2
 8002e4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7fd fd13 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002e66:	e005      	b.n	8002e74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fc25 	bl	80036b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fc2c 	bl	80036cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d122      	bne.n	8002ece <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d11b      	bne.n	8002ece <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f06f 0204 	mvn.w	r2, #4
 8002e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fd fce9 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002eba:	e005      	b.n	8002ec8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fbfb 	bl	80036b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fc02 	bl	80036cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d122      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d11b      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0208 	mvn.w	r2, #8
 8002ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fd fcbf 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002f0e:	e005      	b.n	8002f1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fbd1 	bl	80036b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fbd8 	bl	80036cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b10      	cmp	r3, #16
 8002f2e:	d122      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d11b      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f06f 0210 	mvn.w	r2, #16
 8002f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7fd fc95 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002f62:	e005      	b.n	8002f70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fba7 	bl	80036b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fbae 	bl	80036cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10e      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0201 	mvn.w	r2, #1
 8002f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fb81 	bl	80036a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d10e      	bne.n	8002fce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d107      	bne.n	8002fce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f001 fc03 	bl	80047d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe8:	2b80      	cmp	r3, #128	; 0x80
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f001 fbf6 	bl	80047e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d10e      	bne.n	8003028 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d107      	bne.n	8003028 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fb5c 	bl	80036e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b20      	cmp	r3, #32
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b20      	cmp	r3, #32
 8003042:	d107      	bne.n	8003054 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0220 	mvn.w	r2, #32
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fd fc12 	bl	8000878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003062:	d10f      	bne.n	8003084 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003072:	d107      	bne.n	8003084 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f001 fbbc 	bl	80047fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800308e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003092:	d10f      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f001 fbae 	bl	8004810 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c2:	d10f      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f001 fba0 	bl	8004824 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030f2:	d10f      	bne.n	8003114 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003102:	d107      	bne.n	8003114 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f001 fb92 	bl	8004838 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003132:	2302      	movs	r3, #2
 8003134:	e082      	b.n	800323c <HAL_TIM_IC_ConfigChannel+0x120>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f000 ff04 	bl	8003f60 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 020c 	bic.w	r2, r2, #12
 8003166:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6999      	ldr	r1, [r3, #24]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	619a      	str	r2, [r3, #24]
 800317a:	e05a      	b.n	8003232 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d11c      	bne.n	80031bc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6819      	ldr	r1, [r3, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f000 ff7c 	bl	800408e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6999      	ldr	r1, [r3, #24]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	021a      	lsls	r2, r3, #8
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	619a      	str	r2, [r3, #24]
 80031ba:	e03a      	b.n	8003232 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d11b      	bne.n	80031fa <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f000 ffc9 	bl	8004168 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020c 	bic.w	r2, r2, #12
 80031e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	61da      	str	r2, [r3, #28]
 80031f8:	e01b      	b.n	8003232 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f000 ffe9 	bl	80041e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800321c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	021a      	lsls	r2, r3, #8
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800325a:	2302      	movs	r3, #2
 800325c:	e0fd      	b.n	800345a <HAL_TIM_PWM_ConfigChannel+0x216>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b14      	cmp	r3, #20
 800326a:	f200 80f0 	bhi.w	800344e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	080032c9 	.word	0x080032c9
 8003278:	0800344f 	.word	0x0800344f
 800327c:	0800344f 	.word	0x0800344f
 8003280:	0800344f 	.word	0x0800344f
 8003284:	08003309 	.word	0x08003309
 8003288:	0800344f 	.word	0x0800344f
 800328c:	0800344f 	.word	0x0800344f
 8003290:	0800344f 	.word	0x0800344f
 8003294:	0800334b 	.word	0x0800334b
 8003298:	0800344f 	.word	0x0800344f
 800329c:	0800344f 	.word	0x0800344f
 80032a0:	0800344f 	.word	0x0800344f
 80032a4:	0800338b 	.word	0x0800338b
 80032a8:	0800344f 	.word	0x0800344f
 80032ac:	0800344f 	.word	0x0800344f
 80032b0:	0800344f 	.word	0x0800344f
 80032b4:	080033cd 	.word	0x080033cd
 80032b8:	0800344f 	.word	0x0800344f
 80032bc:	0800344f 	.word	0x0800344f
 80032c0:	0800344f 	.word	0x0800344f
 80032c4:	0800340d 	.word	0x0800340d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 faa0 	bl	8003814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0208 	orr.w	r2, r2, #8
 80032e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0204 	bic.w	r2, r2, #4
 80032f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6999      	ldr	r1, [r3, #24]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	619a      	str	r2, [r3, #24]
      break;
 8003306:	e0a3      	b.n	8003450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fb10 	bl	8003934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6999      	ldr	r1, [r3, #24]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	021a      	lsls	r2, r3, #8
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	619a      	str	r2, [r3, #24]
      break;
 8003348:	e082      	b.n	8003450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fb79 	bl	8003a48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0208 	orr.w	r2, r2, #8
 8003364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0204 	bic.w	r2, r2, #4
 8003374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69d9      	ldr	r1, [r3, #28]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	61da      	str	r2, [r3, #28]
      break;
 8003388:	e062      	b.n	8003450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fbe1 	bl	8003b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	021a      	lsls	r2, r3, #8
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	61da      	str	r2, [r3, #28]
      break;
 80033ca:	e041      	b.n	8003450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fc4a 	bl	8003c6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0208 	orr.w	r2, r2, #8
 80033e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800340a:	e021      	b.n	8003450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fc8e 	bl	8003d34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003426:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003436:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	021a      	lsls	r2, r3, #8
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800344c:	e000      	b.n	8003450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800344e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop

08003464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIM_ConfigClockSource+0x18>
 8003478:	2302      	movs	r3, #2
 800347a:	e0c3      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x1a0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800349a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800349e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d038      	beq.n	800352a <HAL_TIM_ConfigClockSource+0xc6>
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d815      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0x84>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	f000 808e 	beq.w	80035de <HAL_TIM_ConfigClockSource+0x17a>
 80034c2:	2b30      	cmp	r3, #48	; 0x30
 80034c4:	d809      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x76>
 80034c6:	2b10      	cmp	r3, #16
 80034c8:	f000 8089 	beq.w	80035de <HAL_TIM_ConfigClockSource+0x17a>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	f000 8086 	beq.w	80035de <HAL_TIM_ConfigClockSource+0x17a>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8083 	beq.w	80035de <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034d8:	e08b      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034da:	2b50      	cmp	r3, #80	; 0x50
 80034dc:	d04f      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x11a>
 80034de:	2b60      	cmp	r3, #96	; 0x60
 80034e0:	d05d      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x13a>
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d06b      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80034e6:	e084      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80034e8:	4a48      	ldr	r2, [pc, #288]	; (800360c <HAL_TIM_ConfigClockSource+0x1a8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d077      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x17a>
 80034ee:	4a47      	ldr	r2, [pc, #284]	; (800360c <HAL_TIM_ConfigClockSource+0x1a8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d809      	bhi.n	8003508 <HAL_TIM_ConfigClockSource+0xa4>
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f8:	d02e      	beq.n	8003558 <HAL_TIM_ConfigClockSource+0xf4>
 80034fa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80034fe:	d06e      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x17a>
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d074      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8003506:	e074      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003508:	4a41      	ldr	r2, [pc, #260]	; (8003610 <HAL_TIM_ConfigClockSource+0x1ac>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d067      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x17a>
 800350e:	4a40      	ldr	r2, [pc, #256]	; (8003610 <HAL_TIM_ConfigClockSource+0x1ac>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d803      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0xb8>
 8003514:	4a3f      	ldr	r2, [pc, #252]	; (8003614 <HAL_TIM_ConfigClockSource+0x1b0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d061      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800351a:	e06a      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800351c:	4a3e      	ldr	r2, [pc, #248]	; (8003618 <HAL_TIM_ConfigClockSource+0x1b4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d05d      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x17a>
 8003522:	4a3e      	ldr	r2, [pc, #248]	; (800361c <HAL_TIM_ConfigClockSource+0x1b8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d05a      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003528:	e063      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f000 feab 	bl	8004294 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800354c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	609a      	str	r2, [r3, #8]
      break;
 8003556:	e04c      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f000 fe94 	bl	8004294 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800357a:	609a      	str	r2, [r3, #8]
      break;
 800357c:	e039      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	461a      	mov	r2, r3
 800358c:	f000 fd50 	bl	8004030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2150      	movs	r1, #80	; 0x50
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fe5f 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 800359c:	e029      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f000 fdac 	bl	8004108 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2160      	movs	r1, #96	; 0x60
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fe4f 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 80035bc:	e019      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f000 fd30 	bl	8004030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fe3f 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 80035dc:	e009      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4619      	mov	r1, r3
 80035e8:	4610      	mov	r0, r2
 80035ea:	f000 fe36 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 80035ee:	e000      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80035f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	00100020 	.word	0x00100020
 8003610:	00100040 	.word	0x00100040
 8003614:	00100030 	.word	0x00100030
 8003618:	00100060 	.word	0x00100060
 800361c:	00100070 	.word	0x00100070

08003620 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e031      	b.n	800369c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fbd8 	bl	8003e00 <TIM_SlaveTimer_SetConfig>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e018      	b.n	800369c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003678:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003688:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <TIM_Base_SetConfig+0x104>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00f      	beq.n	800372c <TIM_Base_SetConfig+0x38>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0x38>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a39      	ldr	r2, [pc, #228]	; (80037fc <TIM_Base_SetConfig+0x108>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0x38>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a38      	ldr	r2, [pc, #224]	; (8003800 <TIM_Base_SetConfig+0x10c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0x38>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a37      	ldr	r2, [pc, #220]	; (8003804 <TIM_Base_SetConfig+0x110>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2d      	ldr	r2, [pc, #180]	; (80037f8 <TIM_Base_SetConfig+0x104>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01b      	beq.n	800377e <TIM_Base_SetConfig+0x8a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d017      	beq.n	800377e <TIM_Base_SetConfig+0x8a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <TIM_Base_SetConfig+0x108>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <TIM_Base_SetConfig+0x8a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a29      	ldr	r2, [pc, #164]	; (8003800 <TIM_Base_SetConfig+0x10c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00f      	beq.n	800377e <TIM_Base_SetConfig+0x8a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a28      	ldr	r2, [pc, #160]	; (8003804 <TIM_Base_SetConfig+0x110>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00b      	beq.n	800377e <TIM_Base_SetConfig+0x8a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <TIM_Base_SetConfig+0x114>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <TIM_Base_SetConfig+0x8a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a26      	ldr	r2, [pc, #152]	; (800380c <TIM_Base_SetConfig+0x118>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d003      	beq.n	800377e <TIM_Base_SetConfig+0x8a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a25      	ldr	r2, [pc, #148]	; (8003810 <TIM_Base_SetConfig+0x11c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d108      	bne.n	8003790 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <TIM_Base_SetConfig+0x104>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00f      	beq.n	80037dc <TIM_Base_SetConfig+0xe8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a11      	ldr	r2, [pc, #68]	; (8003804 <TIM_Base_SetConfig+0x110>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00b      	beq.n	80037dc <TIM_Base_SetConfig+0xe8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a10      	ldr	r2, [pc, #64]	; (8003808 <TIM_Base_SetConfig+0x114>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d007      	beq.n	80037dc <TIM_Base_SetConfig+0xe8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a0f      	ldr	r2, [pc, #60]	; (800380c <TIM_Base_SetConfig+0x118>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_Base_SetConfig+0xe8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <TIM_Base_SetConfig+0x11c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d103      	bne.n	80037e4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	615a      	str	r2, [r3, #20]
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800
 8003804:	40013400 	.word	0x40013400
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800

08003814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f023 0201 	bic.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f023 0302 	bic.w	r3, r3, #2
 8003860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a2c      	ldr	r2, [pc, #176]	; (8003920 <TIM_OC1_SetConfig+0x10c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00f      	beq.n	8003894 <TIM_OC1_SetConfig+0x80>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a2b      	ldr	r2, [pc, #172]	; (8003924 <TIM_OC1_SetConfig+0x110>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00b      	beq.n	8003894 <TIM_OC1_SetConfig+0x80>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <TIM_OC1_SetConfig+0x114>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <TIM_OC1_SetConfig+0x80>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <TIM_OC1_SetConfig+0x118>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_OC1_SetConfig+0x80>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a28      	ldr	r2, [pc, #160]	; (8003930 <TIM_OC1_SetConfig+0x11c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d10c      	bne.n	80038ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0308 	bic.w	r3, r3, #8
 800389a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <TIM_OC1_SetConfig+0x10c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00f      	beq.n	80038d6 <TIM_OC1_SetConfig+0xc2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <TIM_OC1_SetConfig+0x110>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <TIM_OC1_SetConfig+0xc2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <TIM_OC1_SetConfig+0x114>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <TIM_OC1_SetConfig+0xc2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a18      	ldr	r2, [pc, #96]	; (800392c <TIM_OC1_SetConfig+0x118>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_OC1_SetConfig+0xc2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a17      	ldr	r2, [pc, #92]	; (8003930 <TIM_OC1_SetConfig+0x11c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d111      	bne.n	80038fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40013400 	.word	0x40013400
 8003928:	40014000 	.word	0x40014000
 800392c:	40014400 	.word	0x40014400
 8003930:	40014800 	.word	0x40014800

08003934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f023 0210 	bic.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0320 	bic.w	r3, r3, #32
 8003982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a28      	ldr	r2, [pc, #160]	; (8003a34 <TIM_OC2_SetConfig+0x100>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_OC2_SetConfig+0x6c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <TIM_OC2_SetConfig+0x104>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10d      	bne.n	80039bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <TIM_OC2_SetConfig+0x100>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00f      	beq.n	80039e4 <TIM_OC2_SetConfig+0xb0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <TIM_OC2_SetConfig+0x104>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_OC2_SetConfig+0xb0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <TIM_OC2_SetConfig+0x108>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_OC2_SetConfig+0xb0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a1a      	ldr	r2, [pc, #104]	; (8003a40 <TIM_OC2_SetConfig+0x10c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC2_SetConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <TIM_OC2_SetConfig+0x110>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d113      	bne.n	8003a0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40013400 	.word	0x40013400
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40014400 	.word	0x40014400
 8003a44:	40014800 	.word	0x40014800

08003a48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <TIM_OC3_SetConfig+0xfc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_OC3_SetConfig+0x6a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <TIM_OC3_SetConfig+0x100>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10d      	bne.n	8003ace <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <TIM_OC3_SetConfig+0xfc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00f      	beq.n	8003af6 <TIM_OC3_SetConfig+0xae>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <TIM_OC3_SetConfig+0x100>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_OC3_SetConfig+0xae>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <TIM_OC3_SetConfig+0x104>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <TIM_OC3_SetConfig+0xae>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <TIM_OC3_SetConfig+0x108>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_OC3_SetConfig+0xae>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <TIM_OC3_SetConfig+0x10c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d113      	bne.n	8003b1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	621a      	str	r2, [r3, #32]
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40013400 	.word	0x40013400
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800

08003b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	031b      	lsls	r3, r3, #12
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <TIM_OC4_SetConfig+0x100>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_OC4_SetConfig+0x6c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <TIM_OC4_SetConfig+0x104>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10d      	bne.n	8003be0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	031b      	lsls	r3, r3, #12
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <TIM_OC4_SetConfig+0x100>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00f      	beq.n	8003c08 <TIM_OC4_SetConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <TIM_OC4_SetConfig+0x104>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <TIM_OC4_SetConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <TIM_OC4_SetConfig+0x108>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <TIM_OC4_SetConfig+0xb0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <TIM_OC4_SetConfig+0x10c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC4_SetConfig+0xb0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a19      	ldr	r2, [pc, #100]	; (8003c68 <TIM_OC4_SetConfig+0x110>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d113      	bne.n	8003c30 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c16:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	019b      	lsls	r3, r3, #6
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	40013400 	.word	0x40013400
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800

08003c6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003cb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <TIM_OC5_SetConfig+0xb4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00f      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x7a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <TIM_OC5_SetConfig+0xb8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x7a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <TIM_OC5_SetConfig+0xbc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d007      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x7a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <TIM_OC5_SetConfig+0xc0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x7a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <TIM_OC5_SetConfig+0xc4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d109      	bne.n	8003cfa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40013400 	.word	0x40013400
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40014400 	.word	0x40014400
 8003d30:	40014800 	.word	0x40014800

08003d34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	051b      	lsls	r3, r3, #20
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a18      	ldr	r2, [pc, #96]	; (8003dec <TIM_OC6_SetConfig+0xb8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00f      	beq.n	8003db0 <TIM_OC6_SetConfig+0x7c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <TIM_OC6_SetConfig+0xbc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_OC6_SetConfig+0x7c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <TIM_OC6_SetConfig+0xc0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_OC6_SetConfig+0x7c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <TIM_OC6_SetConfig+0xc4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_OC6_SetConfig+0x7c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <TIM_OC6_SetConfig+0xc8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d109      	bne.n	8003dc4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	029b      	lsls	r3, r3, #10
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	40013400 	.word	0x40013400
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40014400 	.word	0x40014400
 8003dfc:	40014800 	.word	0x40014800

08003e00 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2e:	f023 0307 	bic.w	r3, r3, #7
 8003e32:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b60      	cmp	r3, #96	; 0x60
 8003e4c:	d06d      	beq.n	8003f2a <TIM_SlaveTimer_SetConfig+0x12a>
 8003e4e:	2b60      	cmp	r3, #96	; 0x60
 8003e50:	d80f      	bhi.n	8003e72 <TIM_SlaveTimer_SetConfig+0x72>
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d073      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d804      	bhi.n	8003e64 <TIM_SlaveTimer_SetConfig+0x64>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d06f      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d06d      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8003e62:	e06d      	b.n	8003f40 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d028      	beq.n	8003eba <TIM_SlaveTimer_SetConfig+0xba>
 8003e68:	2b50      	cmp	r3, #80	; 0x50
 8003e6a:	d054      	beq.n	8003f16 <TIM_SlaveTimer_SetConfig+0x116>
 8003e6c:	2b30      	cmp	r3, #48	; 0x30
 8003e6e:	d066      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003e70:	e066      	b.n	8003f40 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e72:	4a36      	ldr	r2, [pc, #216]	; (8003f4c <TIM_SlaveTimer_SetConfig+0x14c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d062      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
 8003e78:	4a34      	ldr	r2, [pc, #208]	; (8003f4c <TIM_SlaveTimer_SetConfig+0x14c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d808      	bhi.n	8003e90 <TIM_SlaveTimer_SetConfig+0x90>
 8003e7e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e82:	d05c      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
 8003e84:	4a32      	ldr	r2, [pc, #200]	; (8003f50 <TIM_SlaveTimer_SetConfig+0x150>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d059      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
 8003e8a:	2b70      	cmp	r3, #112	; 0x70
 8003e8c:	d00a      	beq.n	8003ea4 <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8003e8e:	e057      	b.n	8003f40 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003e90:	4a30      	ldr	r2, [pc, #192]	; (8003f54 <TIM_SlaveTimer_SetConfig+0x154>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d053      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
 8003e96:	4a30      	ldr	r2, [pc, #192]	; (8003f58 <TIM_SlaveTimer_SetConfig+0x158>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d050      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
 8003e9c:	4a2f      	ldr	r2, [pc, #188]	; (8003f5c <TIM_SlaveTimer_SetConfig+0x15c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d04d      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003ea2:	e04d      	b.n	8003f40 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68d9      	ldr	r1, [r3, #12]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f000 f9ee 	bl	8004294 <TIM_ETR_SetConfig>
      break;
 8003eb8:	e042      	b.n	8003f40 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d004      	beq.n	8003ecc <TIM_SlaveTimer_SetConfig+0xcc>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003eca:	d101      	bne.n	8003ed0 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e038      	b.n	8003f42 <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	621a      	str	r2, [r3, #32]
      break;
 8003f14:	e014      	b.n	8003f40 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6899      	ldr	r1, [r3, #8]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 f884 	bl	8004030 <TIM_TI1_ConfigInputStage>
      break;
 8003f28:	e00a      	b.n	8003f40 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 f8e6 	bl	8004108 <TIM_TI2_ConfigInputStage>
      break;
 8003f3c:	e000      	b.n	8003f40 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8003f3e:	bf00      	nop
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	00100030 	.word	0x00100030
 8003f50:	00100020 	.word	0x00100020
 8003f54:	00100060 	.word	0x00100060
 8003f58:	00100070 	.word	0x00100070
 8003f5c:	00100040 	.word	0x00100040

08003f60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a24      	ldr	r2, [pc, #144]	; (800401c <TIM_TI1_SetConfig+0xbc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <TIM_TI1_SetConfig+0x56>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d00f      	beq.n	8003fb6 <TIM_TI1_SetConfig+0x56>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4a21      	ldr	r2, [pc, #132]	; (8004020 <TIM_TI1_SetConfig+0xc0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_TI1_SetConfig+0x56>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a20      	ldr	r2, [pc, #128]	; (8004024 <TIM_TI1_SetConfig+0xc4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_TI1_SetConfig+0x56>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <TIM_TI1_SetConfig+0xc8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_TI1_SetConfig+0x56>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a1e      	ldr	r2, [pc, #120]	; (800402c <TIM_TI1_SetConfig+0xcc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <TIM_TI1_SetConfig+0x5a>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <TIM_TI1_SetConfig+0x5c>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	e003      	b.n	8003fda <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f023 030a 	bic.w	r3, r3, #10
 8003ff4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 030a 	and.w	r3, r3, #10
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40013400 	.word	0x40013400
 800402c:	40014000 	.word	0x40014000

08004030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0201 	bic.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 030a 	bic.w	r3, r3, #10
 800406c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800408e:	b480      	push	{r7}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f023 0210 	bic.w	r2, r3, #16
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	031b      	lsls	r3, r3, #12
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	621a      	str	r2, [r3, #32]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0210 	bic.w	r2, r3, #16
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004132:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	031b      	lsls	r3, r3, #12
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004144:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	621a      	str	r2, [r3, #32]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 0303 	bic.w	r3, r3, #3
 8004194:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80041b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	031b      	lsls	r3, r3, #12
 8004224:	b29b      	uxth	r3, r3
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004232:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	031b      	lsls	r3, r3, #12
 8004238:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	f043 0307 	orr.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	021a      	lsls	r2, r3, #8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2201      	movs	r2, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1a      	ldr	r2, [r3, #32]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	401a      	ands	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b08a      	sub	sp, #40	; 0x28
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0a0      	b.n	8004474 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f898 	bl	800447c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7ff f9c8 	bl	80036f4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6819      	ldr	r1, [r3, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2203      	movs	r2, #3
 8004372:	f7ff fdf5 	bl	8003f60 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699a      	ldr	r2, [r3, #24]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 020c 	bic.w	r2, r2, #12
 8004384:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6999      	ldr	r1, [r3, #24]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043a6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ca:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	f023 0307 	bic.w	r3, r3, #7
 80043de:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0204 	orr.w	r2, r2, #4
 80043ee:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043f4:	2300      	movs	r3, #0
 80043f6:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80043f8:	2370      	movs	r3, #112	; 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043fc:	2300      	movs	r3, #0
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f107 020c 	add.w	r2, r7, #12
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fa8b 	bl	8003934 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004440:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3728      	adds	r7, #40	; 0x28
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_TIMEx_PWMN_Start+0x24>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e022      	b.n	80044fa <HAL_TIMEx_PWMN_Start+0x6a>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d109      	bne.n	80044ce <HAL_TIMEx_PWMN_Start+0x3e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	e015      	b.n	80044fa <HAL_TIMEx_PWMN_Start+0x6a>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d109      	bne.n	80044e8 <HAL_TIMEx_PWMN_Start+0x58>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e008      	b.n	80044fa <HAL_TIMEx_PWMN_Start+0x6a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e040      	b.n	8004584 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <HAL_TIMEx_PWMN_Start+0x82>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004510:	e013      	b.n	800453a <HAL_TIMEx_PWMN_Start+0xaa>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d104      	bne.n	8004522 <HAL_TIMEx_PWMN_Start+0x92>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004520:	e00b      	b.n	800453a <HAL_TIMEx_PWMN_Start+0xaa>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d104      	bne.n	8004532 <HAL_TIMEx_PWMN_Start+0xa2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004530:	e003      	b.n	800453a <HAL_TIMEx_PWMN_Start+0xaa>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2204      	movs	r2, #4
 8004540:	6839      	ldr	r1, [r7, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f982 	bl	800484c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004556:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_TIMEx_PWMN_Start+0xfc>)
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b06      	cmp	r3, #6
 8004568:	d00b      	beq.n	8004582 <HAL_TIMEx_PWMN_Start+0xf2>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d007      	beq.n	8004582 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	00010007 	.word	0x00010007

08004590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e065      	b.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2b      	ldr	r2, [pc, #172]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80045f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d018      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d013      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00e      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a17      	ldr	r2, [pc, #92]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a12      	ldr	r2, [pc, #72]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a13      	ldr	r2, [pc, #76]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10c      	bne.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4313      	orrs	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40014000 	.word	0x40014000

08004694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e087      	b.n	80047c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a27      	ldr	r2, [pc, #156]	; (80047cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d106      	bne.n	800474c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d126      	bne.n	80047ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	051b      	lsls	r3, r3, #20
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d106      	bne.n	80047ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40013400 	.word	0x40013400

080047d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2204      	movs	r2, #4
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1a      	ldr	r2, [r3, #32]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	43db      	mvns	r3, r3
 800486e:	401a      	ands	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1a      	ldr	r2, [r3, #32]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	431a      	orrs	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e042      	b.n	800492e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc fcee 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	; 0x24
 80048c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f9a9 	bl	8004c30 <UART_SetConfig>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e022      	b.n	800492e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 fb57 	bl	8005fa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004904:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004914:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f001 fbde 	bl	80060e8 <UART_CheckIdleState>
 800492c:	4603      	mov	r3, r0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d118      	bne.n	8004998 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d013      	beq.n	8004998 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d104      	bne.n	8004984 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d009      	beq.n	8004998 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 812e 	beq.w	8004bea <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
      }
      return;
 8004996:	e128      	b.n	8004bea <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80d1 	beq.w	8004b42 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4b96      	ldr	r3, [pc, #600]	; (8004bfc <HAL_UART_IRQHandler+0x2c4>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d105      	bne.n	80049b6 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80c6 	beq.w	8004b42 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <HAL_UART_IRQHandler+0xaa>
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2201      	movs	r2, #1
 80049d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d010      	beq.n	8004a0e <HAL_UART_IRQHandler+0xd6>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2202      	movs	r2, #2
 80049fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f043 0204 	orr.w	r2, r3, #4
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <HAL_UART_IRQHandler+0x102>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2204      	movs	r2, #4
 8004a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	f043 0202 	orr.w	r2, r3, #2
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d015      	beq.n	8004a70 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d104      	bne.n	8004a58 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4b6a      	ldr	r3, [pc, #424]	; (8004bfc <HAL_UART_IRQHandler+0x2c4>)
 8004a52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00b      	beq.n	8004a70 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a66:	f043 0208 	orr.w	r2, r3, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80b9 	beq.w	8004bee <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d004      	beq.n	8004aca <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d031      	beq.n	8004b2e <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 fb9e 	bl	800620c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d123      	bne.n	8004b26 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d013      	beq.n	8004b1e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afa:	4a41      	ldr	r2, [pc, #260]	; (8004c00 <HAL_UART_IRQHandler+0x2c8>)
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fc fdbf 	bl	8001686 <HAL_DMA_Abort_IT>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d017      	beq.n	8004b3e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	e00f      	b.n	8004b3e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f87a 	bl	8004c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	e00b      	b.n	8004b3e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f876 	bl	8004c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2c:	e007      	b.n	8004b3e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f872 	bl	8004c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004b3c:	e057      	b.n	8004bee <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3e:	bf00      	nop
    return;
 8004b40:	e055      	b.n	8004bee <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <HAL_UART_IRQHandler+0x230>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f001 fba6 	bl	80062b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b66:	e045      	b.n	8004bf4 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d012      	beq.n	8004b98 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d104      	bne.n	8004b86 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d031      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
    }
    return;
 8004b96:	e02c      	b.n	8004bf2 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x27c>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f001 fb66 	bl	800627e <UART_EndTransmit_IT>
    return;
 8004bb2:	e01f      	b.n	8004bf4 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d008      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x298>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 fb86 	bl	80062da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bce:	e011      	b.n	8004bf4 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x2bc>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	da09      	bge.n	8004bf4 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f001 fb70 	bl	80062c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004be6:	bf00      	nop
 8004be8:	e004      	b.n	8004bf4 <HAL_UART_IRQHandler+0x2bc>
      return;
 8004bea:	bf00      	nop
 8004bec:	e002      	b.n	8004bf4 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004bf2:	bf00      	nop
  }
}
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	10000001 	.word	0x10000001
 8004c00:	08006253 	.word	0x08006253

08004c04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	0000      	movs	r0, r0
	...

08004c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c30:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c34:	b08a      	sub	sp, #40	; 0x28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c64:	4313      	orrs	r3, r2
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4ba4      	ldr	r3, [pc, #656]	; (8004f00 <UART_SetConfig+0x2d0>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a99      	ldr	r2, [pc, #612]	; (8004f04 <UART_SetConfig+0x2d4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	f023 010f 	bic.w	r1, r3, #15
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a8a      	ldr	r2, [pc, #552]	; (8004f08 <UART_SetConfig+0x2d8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d126      	bne.n	8004d32 <UART_SetConfig+0x102>
 8004ce4:	4b89      	ldr	r3, [pc, #548]	; (8004f0c <UART_SetConfig+0x2dc>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d81a      	bhi.n	8004d28 <UART_SetConfig+0xf8>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0xc8>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d19 	.word	0x08004d19
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e0d6      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e0d2      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e0ce      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004d20:	2308      	movs	r3, #8
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d26:	e0ca      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	bf00      	nop
 8004d30:	e0c5      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a76      	ldr	r2, [pc, #472]	; (8004f10 <UART_SetConfig+0x2e0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d138      	bne.n	8004dae <UART_SetConfig+0x17e>
 8004d3c:	4b73      	ldr	r3, [pc, #460]	; (8004f0c <UART_SetConfig+0x2dc>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b0c      	cmp	r3, #12
 8004d48:	d82c      	bhi.n	8004da4 <UART_SetConfig+0x174>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0x120>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004da5 	.word	0x08004da5
 8004d5c:	08004da5 	.word	0x08004da5
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004da5 	.word	0x08004da5
 8004d68:	08004da5 	.word	0x08004da5
 8004d6c:	08004da5 	.word	0x08004da5
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	08004da5 	.word	0x08004da5
 8004d78:	08004da5 	.word	0x08004da5
 8004d7c:	08004da5 	.word	0x08004da5
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e098      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e094      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e090      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e08c      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	bf00      	nop
 8004dac:	e087      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a58      	ldr	r2, [pc, #352]	; (8004f14 <UART_SetConfig+0x2e4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d125      	bne.n	8004e04 <UART_SetConfig+0x1d4>
 8004db8:	4b54      	ldr	r3, [pc, #336]	; (8004f0c <UART_SetConfig+0x2dc>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d011      	beq.n	8004dea <UART_SetConfig+0x1ba>
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d802      	bhi.n	8004dd0 <UART_SetConfig+0x1a0>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <UART_SetConfig+0x1aa>
 8004dce:	e014      	b.n	8004dfa <UART_SetConfig+0x1ca>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d006      	beq.n	8004de2 <UART_SetConfig+0x1b2>
 8004dd4:	2b30      	cmp	r3, #48	; 0x30
 8004dd6:	d00c      	beq.n	8004df2 <UART_SetConfig+0x1c2>
 8004dd8:	e00f      	b.n	8004dfa <UART_SetConfig+0x1ca>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de0:	e06d      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004de2:	2302      	movs	r3, #2
 8004de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de8:	e069      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004dea:	2304      	movs	r3, #4
 8004dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df0:	e065      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004df2:	2308      	movs	r3, #8
 8004df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df8:	e061      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004dfa:	2310      	movs	r3, #16
 8004dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e00:	bf00      	nop
 8004e02:	e05c      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a43      	ldr	r2, [pc, #268]	; (8004f18 <UART_SetConfig+0x2e8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d125      	bne.n	8004e5a <UART_SetConfig+0x22a>
 8004e0e:	4b3f      	ldr	r3, [pc, #252]	; (8004f0c <UART_SetConfig+0x2dc>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d011      	beq.n	8004e40 <UART_SetConfig+0x210>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d802      	bhi.n	8004e26 <UART_SetConfig+0x1f6>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <UART_SetConfig+0x200>
 8004e24:	e014      	b.n	8004e50 <UART_SetConfig+0x220>
 8004e26:	2b80      	cmp	r3, #128	; 0x80
 8004e28:	d006      	beq.n	8004e38 <UART_SetConfig+0x208>
 8004e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e2c:	d00c      	beq.n	8004e48 <UART_SetConfig+0x218>
 8004e2e:	e00f      	b.n	8004e50 <UART_SetConfig+0x220>
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e042      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e03e      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004e40:	2304      	movs	r3, #4
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e03a      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e036      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	bf00      	nop
 8004e58:	e031      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <UART_SetConfig+0x2d4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d129      	bne.n	8004eb8 <UART_SetConfig+0x288>
 8004e64:	4b29      	ldr	r3, [pc, #164]	; (8004f0c <UART_SetConfig+0x2dc>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d014      	beq.n	8004e9e <UART_SetConfig+0x26e>
 8004e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e78:	d802      	bhi.n	8004e80 <UART_SetConfig+0x250>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <UART_SetConfig+0x25e>
 8004e7e:	e016      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e84:	d007      	beq.n	8004e96 <UART_SetConfig+0x266>
 8004e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e8a:	d00c      	beq.n	8004ea6 <UART_SetConfig+0x276>
 8004e8c:	e00f      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e94:	e013      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004e96:	2302      	movs	r3, #2
 8004e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9c:	e00f      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea4:	e00b      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eac:	e007      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004eae:	2310      	movs	r3, #16
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <UART_SetConfig+0x28e>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <UART_SetConfig+0x2d4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	f040 842e 	bne.w	8005726 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	f200 8169 	bhi.w	80051a6 <UART_SetConfig+0x576>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <UART_SetConfig+0x2ac>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f1d 	.word	0x08004f1d
 8004ee0:	080051a7 	.word	0x080051a7
 8004ee4:	08004fbf 	.word	0x08004fbf
 8004ee8:	080051a7 	.word	0x080051a7
 8004eec:	08005057 	.word	0x08005057
 8004ef0:	080051a7 	.word	0x080051a7
 8004ef4:	080051a7 	.word	0x080051a7
 8004ef8:	080051a7 	.word	0x080051a7
 8004efc:	080050f9 	.word	0x080050f9
 8004f00:	cfff69f3 	.word	0xcfff69f3
 8004f04:	40008000 	.word	0x40008000
 8004f08:	40013800 	.word	0x40013800
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40004400 	.word	0x40004400
 8004f14:	40004800 	.word	0x40004800
 8004f18:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f1c:	f7fd fb32 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d044      	beq.n	8004fb4 <UART_SetConfig+0x384>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d03e      	beq.n	8004fb0 <UART_SetConfig+0x380>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d038      	beq.n	8004fac <UART_SetConfig+0x37c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d032      	beq.n	8004fa8 <UART_SetConfig+0x378>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d02c      	beq.n	8004fa4 <UART_SetConfig+0x374>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d026      	beq.n	8004fa0 <UART_SetConfig+0x370>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2b06      	cmp	r3, #6
 8004f58:	d020      	beq.n	8004f9c <UART_SetConfig+0x36c>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b07      	cmp	r3, #7
 8004f60:	d01a      	beq.n	8004f98 <UART_SetConfig+0x368>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d014      	beq.n	8004f94 <UART_SetConfig+0x364>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	2b09      	cmp	r3, #9
 8004f70:	d00e      	beq.n	8004f90 <UART_SetConfig+0x360>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b0a      	cmp	r3, #10
 8004f78:	d008      	beq.n	8004f8c <UART_SetConfig+0x35c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b0b      	cmp	r3, #11
 8004f80:	d102      	bne.n	8004f88 <UART_SetConfig+0x358>
 8004f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f86:	e016      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e014      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	e012      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004f90:	2340      	movs	r3, #64	; 0x40
 8004f92:	e010      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004f94:	2320      	movs	r3, #32
 8004f96:	e00e      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	e00c      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004f9c:	230c      	movs	r3, #12
 8004f9e:	e00a      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004fa0:	230a      	movs	r3, #10
 8004fa2:	e008      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	e006      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004fa8:	2306      	movs	r3, #6
 8004faa:	e004      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004fac:	2304      	movs	r3, #4
 8004fae:	e002      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e000      	b.n	8004fb6 <UART_SetConfig+0x386>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	617b      	str	r3, [r7, #20]
        break;
 8004fbc:	e0f6      	b.n	80051ac <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d044      	beq.n	8005050 <UART_SetConfig+0x420>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d03e      	beq.n	800504c <UART_SetConfig+0x41c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d038      	beq.n	8005048 <UART_SetConfig+0x418>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d032      	beq.n	8005044 <UART_SetConfig+0x414>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d02c      	beq.n	8005040 <UART_SetConfig+0x410>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	d026      	beq.n	800503c <UART_SetConfig+0x40c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d020      	beq.n	8005038 <UART_SetConfig+0x408>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	2b07      	cmp	r3, #7
 8004ffc:	d01a      	beq.n	8005034 <UART_SetConfig+0x404>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	2b08      	cmp	r3, #8
 8005004:	d014      	beq.n	8005030 <UART_SetConfig+0x400>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2b09      	cmp	r3, #9
 800500c:	d00e      	beq.n	800502c <UART_SetConfig+0x3fc>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	2b0a      	cmp	r3, #10
 8005014:	d008      	beq.n	8005028 <UART_SetConfig+0x3f8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b0b      	cmp	r3, #11
 800501c:	d102      	bne.n	8005024 <UART_SetConfig+0x3f4>
 800501e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005022:	e016      	b.n	8005052 <UART_SetConfig+0x422>
 8005024:	4ba1      	ldr	r3, [pc, #644]	; (80052ac <UART_SetConfig+0x67c>)
 8005026:	e014      	b.n	8005052 <UART_SetConfig+0x422>
 8005028:	4ba1      	ldr	r3, [pc, #644]	; (80052b0 <UART_SetConfig+0x680>)
 800502a:	e012      	b.n	8005052 <UART_SetConfig+0x422>
 800502c:	4ba1      	ldr	r3, [pc, #644]	; (80052b4 <UART_SetConfig+0x684>)
 800502e:	e010      	b.n	8005052 <UART_SetConfig+0x422>
 8005030:	4ba1      	ldr	r3, [pc, #644]	; (80052b8 <UART_SetConfig+0x688>)
 8005032:	e00e      	b.n	8005052 <UART_SetConfig+0x422>
 8005034:	4ba1      	ldr	r3, [pc, #644]	; (80052bc <UART_SetConfig+0x68c>)
 8005036:	e00c      	b.n	8005052 <UART_SetConfig+0x422>
 8005038:	4ba1      	ldr	r3, [pc, #644]	; (80052c0 <UART_SetConfig+0x690>)
 800503a:	e00a      	b.n	8005052 <UART_SetConfig+0x422>
 800503c:	4ba1      	ldr	r3, [pc, #644]	; (80052c4 <UART_SetConfig+0x694>)
 800503e:	e008      	b.n	8005052 <UART_SetConfig+0x422>
 8005040:	4ba1      	ldr	r3, [pc, #644]	; (80052c8 <UART_SetConfig+0x698>)
 8005042:	e006      	b.n	8005052 <UART_SetConfig+0x422>
 8005044:	4ba1      	ldr	r3, [pc, #644]	; (80052cc <UART_SetConfig+0x69c>)
 8005046:	e004      	b.n	8005052 <UART_SetConfig+0x422>
 8005048:	4ba1      	ldr	r3, [pc, #644]	; (80052d0 <UART_SetConfig+0x6a0>)
 800504a:	e002      	b.n	8005052 <UART_SetConfig+0x422>
 800504c:	4ba1      	ldr	r3, [pc, #644]	; (80052d4 <UART_SetConfig+0x6a4>)
 800504e:	e000      	b.n	8005052 <UART_SetConfig+0x422>
 8005050:	4b96      	ldr	r3, [pc, #600]	; (80052ac <UART_SetConfig+0x67c>)
 8005052:	617b      	str	r3, [r7, #20]
        break;
 8005054:	e0aa      	b.n	80051ac <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005056:	f7fd fa27 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 800505a:	4602      	mov	r2, r0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d044      	beq.n	80050ee <UART_SetConfig+0x4be>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b01      	cmp	r3, #1
 800506a:	d03e      	beq.n	80050ea <UART_SetConfig+0x4ba>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b02      	cmp	r3, #2
 8005072:	d038      	beq.n	80050e6 <UART_SetConfig+0x4b6>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2b03      	cmp	r3, #3
 800507a:	d032      	beq.n	80050e2 <UART_SetConfig+0x4b2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	2b04      	cmp	r3, #4
 8005082:	d02c      	beq.n	80050de <UART_SetConfig+0x4ae>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b05      	cmp	r3, #5
 800508a:	d026      	beq.n	80050da <UART_SetConfig+0x4aa>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b06      	cmp	r3, #6
 8005092:	d020      	beq.n	80050d6 <UART_SetConfig+0x4a6>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2b07      	cmp	r3, #7
 800509a:	d01a      	beq.n	80050d2 <UART_SetConfig+0x4a2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d014      	beq.n	80050ce <UART_SetConfig+0x49e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b09      	cmp	r3, #9
 80050aa:	d00e      	beq.n	80050ca <UART_SetConfig+0x49a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	2b0a      	cmp	r3, #10
 80050b2:	d008      	beq.n	80050c6 <UART_SetConfig+0x496>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	2b0b      	cmp	r3, #11
 80050ba:	d102      	bne.n	80050c2 <UART_SetConfig+0x492>
 80050bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050c0:	e016      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e014      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	e012      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050ca:	2340      	movs	r3, #64	; 0x40
 80050cc:	e010      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050ce:	2320      	movs	r3, #32
 80050d0:	e00e      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050d2:	2310      	movs	r3, #16
 80050d4:	e00c      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050d6:	230c      	movs	r3, #12
 80050d8:	e00a      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050da:	230a      	movs	r3, #10
 80050dc:	e008      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050de:	2308      	movs	r3, #8
 80050e0:	e006      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050e2:	2306      	movs	r3, #6
 80050e4:	e004      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050e6:	2304      	movs	r3, #4
 80050e8:	e002      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e000      	b.n	80050f0 <UART_SetConfig+0x4c0>
 80050ee:	2301      	movs	r3, #1
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]
        break;
 80050f6:	e059      	b.n	80051ac <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d04e      	beq.n	800519e <UART_SetConfig+0x56e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b01      	cmp	r3, #1
 8005106:	d047      	beq.n	8005198 <UART_SetConfig+0x568>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b02      	cmp	r3, #2
 800510e:	d040      	beq.n	8005192 <UART_SetConfig+0x562>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	2b03      	cmp	r3, #3
 8005116:	d039      	beq.n	800518c <UART_SetConfig+0x55c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2b04      	cmp	r3, #4
 800511e:	d032      	beq.n	8005186 <UART_SetConfig+0x556>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b05      	cmp	r3, #5
 8005126:	d02b      	beq.n	8005180 <UART_SetConfig+0x550>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b06      	cmp	r3, #6
 800512e:	d024      	beq.n	800517a <UART_SetConfig+0x54a>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	2b07      	cmp	r3, #7
 8005136:	d01d      	beq.n	8005174 <UART_SetConfig+0x544>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	2b08      	cmp	r3, #8
 800513e:	d016      	beq.n	800516e <UART_SetConfig+0x53e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2b09      	cmp	r3, #9
 8005146:	d00f      	beq.n	8005168 <UART_SetConfig+0x538>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	2b0a      	cmp	r3, #10
 800514e:	d008      	beq.n	8005162 <UART_SetConfig+0x532>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b0b      	cmp	r3, #11
 8005156:	d101      	bne.n	800515c <UART_SetConfig+0x52c>
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	e022      	b.n	80051a2 <UART_SetConfig+0x572>
 800515c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005160:	e01f      	b.n	80051a2 <UART_SetConfig+0x572>
 8005162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005166:	e01c      	b.n	80051a2 <UART_SetConfig+0x572>
 8005168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800516c:	e019      	b.n	80051a2 <UART_SetConfig+0x572>
 800516e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005172:	e016      	b.n	80051a2 <UART_SetConfig+0x572>
 8005174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005178:	e013      	b.n	80051a2 <UART_SetConfig+0x572>
 800517a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800517e:	e010      	b.n	80051a2 <UART_SetConfig+0x572>
 8005180:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005184:	e00d      	b.n	80051a2 <UART_SetConfig+0x572>
 8005186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800518a:	e00a      	b.n	80051a2 <UART_SetConfig+0x572>
 800518c:	f241 5355 	movw	r3, #5461	; 0x1555
 8005190:	e007      	b.n	80051a2 <UART_SetConfig+0x572>
 8005192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005196:	e004      	b.n	80051a2 <UART_SetConfig+0x572>
 8005198:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800519c:	e001      	b.n	80051a2 <UART_SetConfig+0x572>
 800519e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a2:	617b      	str	r3, [r7, #20]
        break;
 80051a4:	e002      	b.n	80051ac <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	76fb      	strb	r3, [r7, #27]
        break;
 80051aa:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 86cd 	beq.w	8005f4e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	4413      	add	r3, r2
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d305      	bcc.n	80051d0 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d903      	bls.n	80051d8 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	76fb      	strb	r3, [r7, #27]
 80051d4:	f000 bebb 	b.w	8005f4e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80051d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051dc:	2b08      	cmp	r3, #8
 80051de:	f200 828d 	bhi.w	80056fc <UART_SetConfig+0xacc>
 80051e2:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0x5b8>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	080056fd 	.word	0x080056fd
 80051f0:	08005377 	.word	0x08005377
 80051f4:	080056fd 	.word	0x080056fd
 80051f8:	0800546d 	.word	0x0800546d
 80051fc:	080056fd 	.word	0x080056fd
 8005200:	080056fd 	.word	0x080056fd
 8005204:	080056fd 	.word	0x080056fd
 8005208:	080055ab 	.word	0x080055ab
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7fd f9ba 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8005210:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4618      	mov	r0, r3
 8005216:	f04f 0100 	mov.w	r1, #0
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	d07d      	beq.n	800531e <UART_SetConfig+0x6ee>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	2b01      	cmp	r3, #1
 8005228:	d074      	beq.n	8005314 <UART_SetConfig+0x6e4>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2b02      	cmp	r3, #2
 8005230:	d06b      	beq.n	800530a <UART_SetConfig+0x6da>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	2b03      	cmp	r3, #3
 8005238:	d062      	beq.n	8005300 <UART_SetConfig+0x6d0>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b04      	cmp	r3, #4
 8005240:	d059      	beq.n	80052f6 <UART_SetConfig+0x6c6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b05      	cmp	r3, #5
 8005248:	d050      	beq.n	80052ec <UART_SetConfig+0x6bc>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b06      	cmp	r3, #6
 8005250:	d047      	beq.n	80052e2 <UART_SetConfig+0x6b2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b07      	cmp	r3, #7
 8005258:	d03e      	beq.n	80052d8 <UART_SetConfig+0x6a8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	2b08      	cmp	r3, #8
 8005260:	d01f      	beq.n	80052a2 <UART_SetConfig+0x672>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	2b09      	cmp	r3, #9
 8005268:	d016      	beq.n	8005298 <UART_SetConfig+0x668>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b0a      	cmp	r3, #10
 8005270:	d00d      	beq.n	800528e <UART_SetConfig+0x65e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b0b      	cmp	r3, #11
 8005278:	d104      	bne.n	8005284 <UART_SetConfig+0x654>
 800527a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800527e:	f04f 0400 	mov.w	r4, #0
 8005282:	e050      	b.n	8005326 <UART_SetConfig+0x6f6>
 8005284:	f04f 0301 	mov.w	r3, #1
 8005288:	f04f 0400 	mov.w	r4, #0
 800528c:	e04b      	b.n	8005326 <UART_SetConfig+0x6f6>
 800528e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005292:	f04f 0400 	mov.w	r4, #0
 8005296:	e046      	b.n	8005326 <UART_SetConfig+0x6f6>
 8005298:	f04f 0340 	mov.w	r3, #64	; 0x40
 800529c:	f04f 0400 	mov.w	r4, #0
 80052a0:	e041      	b.n	8005326 <UART_SetConfig+0x6f6>
 80052a2:	f04f 0320 	mov.w	r3, #32
 80052a6:	f04f 0400 	mov.w	r4, #0
 80052aa:	e03c      	b.n	8005326 <UART_SetConfig+0x6f6>
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	0001e848 	.word	0x0001e848
 80052b4:	0003d090 	.word	0x0003d090
 80052b8:	0007a120 	.word	0x0007a120
 80052bc:	000f4240 	.word	0x000f4240
 80052c0:	00145855 	.word	0x00145855
 80052c4:	00186a00 	.word	0x00186a00
 80052c8:	001e8480 	.word	0x001e8480
 80052cc:	0028b0aa 	.word	0x0028b0aa
 80052d0:	003d0900 	.word	0x003d0900
 80052d4:	007a1200 	.word	0x007a1200
 80052d8:	f04f 0310 	mov.w	r3, #16
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	e021      	b.n	8005326 <UART_SetConfig+0x6f6>
 80052e2:	f04f 030c 	mov.w	r3, #12
 80052e6:	f04f 0400 	mov.w	r4, #0
 80052ea:	e01c      	b.n	8005326 <UART_SetConfig+0x6f6>
 80052ec:	f04f 030a 	mov.w	r3, #10
 80052f0:	f04f 0400 	mov.w	r4, #0
 80052f4:	e017      	b.n	8005326 <UART_SetConfig+0x6f6>
 80052f6:	f04f 0308 	mov.w	r3, #8
 80052fa:	f04f 0400 	mov.w	r4, #0
 80052fe:	e012      	b.n	8005326 <UART_SetConfig+0x6f6>
 8005300:	f04f 0306 	mov.w	r3, #6
 8005304:	f04f 0400 	mov.w	r4, #0
 8005308:	e00d      	b.n	8005326 <UART_SetConfig+0x6f6>
 800530a:	f04f 0304 	mov.w	r3, #4
 800530e:	f04f 0400 	mov.w	r4, #0
 8005312:	e008      	b.n	8005326 <UART_SetConfig+0x6f6>
 8005314:	f04f 0302 	mov.w	r3, #2
 8005318:	f04f 0400 	mov.w	r4, #0
 800531c:	e003      	b.n	8005326 <UART_SetConfig+0x6f6>
 800531e:	f04f 0301 	mov.w	r3, #1
 8005322:	f04f 0400 	mov.w	r4, #0
 8005326:	461a      	mov	r2, r3
 8005328:	4623      	mov	r3, r4
 800532a:	f7fa ff75 	bl	8000218 <__aeabi_uldivmod>
 800532e:	4603      	mov	r3, r0
 8005330:	460c      	mov	r4, r1
 8005332:	4619      	mov	r1, r3
 8005334:	4622      	mov	r2, r4
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	f04f 0400 	mov.w	r4, #0
 800533e:	0214      	lsls	r4, r2, #8
 8005340:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005344:	020b      	lsls	r3, r1, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6852      	ldr	r2, [r2, #4]
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	4611      	mov	r1, r2
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	eb13 0b01 	adds.w	fp, r3, r1
 8005356:	eb44 0c02 	adc.w	ip, r4, r2
 800535a:	4658      	mov	r0, fp
 800535c:	4661      	mov	r1, ip
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f04f 0400 	mov.w	r4, #0
 8005366:	461a      	mov	r2, r3
 8005368:	4623      	mov	r3, r4
 800536a:	f7fa ff55 	bl	8000218 <__aeabi_uldivmod>
 800536e:	4603      	mov	r3, r0
 8005370:	460c      	mov	r4, r1
 8005372:	61fb      	str	r3, [r7, #28]
            break;
 8005374:	e1c5      	b.n	8005702 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d05b      	beq.n	8005436 <UART_SetConfig+0x806>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	2b01      	cmp	r3, #1
 8005384:	d053      	beq.n	800542e <UART_SetConfig+0x7fe>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2b02      	cmp	r3, #2
 800538c:	d04b      	beq.n	8005426 <UART_SetConfig+0x7f6>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b03      	cmp	r3, #3
 8005394:	d043      	beq.n	800541e <UART_SetConfig+0x7ee>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b04      	cmp	r3, #4
 800539c:	d03b      	beq.n	8005416 <UART_SetConfig+0x7e6>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d033      	beq.n	800540e <UART_SetConfig+0x7de>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d02b      	beq.n	8005406 <UART_SetConfig+0x7d6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	2b07      	cmp	r3, #7
 80053b4:	d023      	beq.n	80053fe <UART_SetConfig+0x7ce>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d01b      	beq.n	80053f6 <UART_SetConfig+0x7c6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	d013      	beq.n	80053ee <UART_SetConfig+0x7be>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b0a      	cmp	r3, #10
 80053cc:	d00b      	beq.n	80053e6 <UART_SetConfig+0x7b6>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b0b      	cmp	r3, #11
 80053d4:	d103      	bne.n	80053de <UART_SetConfig+0x7ae>
 80053d6:	4bae      	ldr	r3, [pc, #696]	; (8005690 <UART_SetConfig+0xa60>)
 80053d8:	f04f 0400 	mov.w	r4, #0
 80053dc:	e02e      	b.n	800543c <UART_SetConfig+0x80c>
 80053de:	4bad      	ldr	r3, [pc, #692]	; (8005694 <UART_SetConfig+0xa64>)
 80053e0:	f04f 0400 	mov.w	r4, #0
 80053e4:	e02a      	b.n	800543c <UART_SetConfig+0x80c>
 80053e6:	4bac      	ldr	r3, [pc, #688]	; (8005698 <UART_SetConfig+0xa68>)
 80053e8:	f04f 0400 	mov.w	r4, #0
 80053ec:	e026      	b.n	800543c <UART_SetConfig+0x80c>
 80053ee:	4bab      	ldr	r3, [pc, #684]	; (800569c <UART_SetConfig+0xa6c>)
 80053f0:	f04f 0400 	mov.w	r4, #0
 80053f4:	e022      	b.n	800543c <UART_SetConfig+0x80c>
 80053f6:	4baa      	ldr	r3, [pc, #680]	; (80056a0 <UART_SetConfig+0xa70>)
 80053f8:	f04f 0400 	mov.w	r4, #0
 80053fc:	e01e      	b.n	800543c <UART_SetConfig+0x80c>
 80053fe:	4ba9      	ldr	r3, [pc, #676]	; (80056a4 <UART_SetConfig+0xa74>)
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	e01a      	b.n	800543c <UART_SetConfig+0x80c>
 8005406:	a49e      	add	r4, pc, #632	; (adr r4, 8005680 <UART_SetConfig+0xa50>)
 8005408:	e9d4 3400 	ldrd	r3, r4, [r4]
 800540c:	e016      	b.n	800543c <UART_SetConfig+0x80c>
 800540e:	4ba6      	ldr	r3, [pc, #664]	; (80056a8 <UART_SetConfig+0xa78>)
 8005410:	f04f 0400 	mov.w	r4, #0
 8005414:	e012      	b.n	800543c <UART_SetConfig+0x80c>
 8005416:	4ba5      	ldr	r3, [pc, #660]	; (80056ac <UART_SetConfig+0xa7c>)
 8005418:	f04f 0400 	mov.w	r4, #0
 800541c:	e00e      	b.n	800543c <UART_SetConfig+0x80c>
 800541e:	a49a      	add	r4, pc, #616	; (adr r4, 8005688 <UART_SetConfig+0xa58>)
 8005420:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005424:	e00a      	b.n	800543c <UART_SetConfig+0x80c>
 8005426:	4ba2      	ldr	r3, [pc, #648]	; (80056b0 <UART_SetConfig+0xa80>)
 8005428:	f04f 0400 	mov.w	r4, #0
 800542c:	e006      	b.n	800543c <UART_SetConfig+0x80c>
 800542e:	4ba1      	ldr	r3, [pc, #644]	; (80056b4 <UART_SetConfig+0xa84>)
 8005430:	f04f 0400 	mov.w	r4, #0
 8005434:	e002      	b.n	800543c <UART_SetConfig+0x80c>
 8005436:	4b97      	ldr	r3, [pc, #604]	; (8005694 <UART_SetConfig+0xa64>)
 8005438:	f04f 0400 	mov.w	r4, #0
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6852      	ldr	r2, [r2, #4]
 8005440:	0852      	lsrs	r2, r2, #1
 8005442:	4611      	mov	r1, r2
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	eb13 0b01 	adds.w	fp, r3, r1
 800544c:	eb44 0c02 	adc.w	ip, r4, r2
 8005450:	4658      	mov	r0, fp
 8005452:	4661      	mov	r1, ip
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f04f 0400 	mov.w	r4, #0
 800545c:	461a      	mov	r2, r3
 800545e:	4623      	mov	r3, r4
 8005460:	f7fa feda 	bl	8000218 <__aeabi_uldivmod>
 8005464:	4603      	mov	r3, r0
 8005466:	460c      	mov	r4, r1
 8005468:	61fb      	str	r3, [r7, #28]
            break;
 800546a:	e14a      	b.n	8005702 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800546c:	f7fd f81c 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8005470:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4618      	mov	r0, r3
 8005476:	f04f 0100 	mov.w	r1, #0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d067      	beq.n	8005552 <UART_SetConfig+0x922>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b01      	cmp	r3, #1
 8005488:	d05e      	beq.n	8005548 <UART_SetConfig+0x918>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b02      	cmp	r3, #2
 8005490:	d055      	beq.n	800553e <UART_SetConfig+0x90e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b03      	cmp	r3, #3
 8005498:	d04c      	beq.n	8005534 <UART_SetConfig+0x904>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d043      	beq.n	800552a <UART_SetConfig+0x8fa>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d03a      	beq.n	8005520 <UART_SetConfig+0x8f0>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	2b06      	cmp	r3, #6
 80054b0:	d031      	beq.n	8005516 <UART_SetConfig+0x8e6>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b07      	cmp	r3, #7
 80054b8:	d028      	beq.n	800550c <UART_SetConfig+0x8dc>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d01f      	beq.n	8005502 <UART_SetConfig+0x8d2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2b09      	cmp	r3, #9
 80054c8:	d016      	beq.n	80054f8 <UART_SetConfig+0x8c8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b0a      	cmp	r3, #10
 80054d0:	d00d      	beq.n	80054ee <UART_SetConfig+0x8be>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b0b      	cmp	r3, #11
 80054d8:	d104      	bne.n	80054e4 <UART_SetConfig+0x8b4>
 80054da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054de:	f04f 0400 	mov.w	r4, #0
 80054e2:	e03a      	b.n	800555a <UART_SetConfig+0x92a>
 80054e4:	f04f 0301 	mov.w	r3, #1
 80054e8:	f04f 0400 	mov.w	r4, #0
 80054ec:	e035      	b.n	800555a <UART_SetConfig+0x92a>
 80054ee:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054f2:	f04f 0400 	mov.w	r4, #0
 80054f6:	e030      	b.n	800555a <UART_SetConfig+0x92a>
 80054f8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80054fc:	f04f 0400 	mov.w	r4, #0
 8005500:	e02b      	b.n	800555a <UART_SetConfig+0x92a>
 8005502:	f04f 0320 	mov.w	r3, #32
 8005506:	f04f 0400 	mov.w	r4, #0
 800550a:	e026      	b.n	800555a <UART_SetConfig+0x92a>
 800550c:	f04f 0310 	mov.w	r3, #16
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	e021      	b.n	800555a <UART_SetConfig+0x92a>
 8005516:	f04f 030c 	mov.w	r3, #12
 800551a:	f04f 0400 	mov.w	r4, #0
 800551e:	e01c      	b.n	800555a <UART_SetConfig+0x92a>
 8005520:	f04f 030a 	mov.w	r3, #10
 8005524:	f04f 0400 	mov.w	r4, #0
 8005528:	e017      	b.n	800555a <UART_SetConfig+0x92a>
 800552a:	f04f 0308 	mov.w	r3, #8
 800552e:	f04f 0400 	mov.w	r4, #0
 8005532:	e012      	b.n	800555a <UART_SetConfig+0x92a>
 8005534:	f04f 0306 	mov.w	r3, #6
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	e00d      	b.n	800555a <UART_SetConfig+0x92a>
 800553e:	f04f 0304 	mov.w	r3, #4
 8005542:	f04f 0400 	mov.w	r4, #0
 8005546:	e008      	b.n	800555a <UART_SetConfig+0x92a>
 8005548:	f04f 0302 	mov.w	r3, #2
 800554c:	f04f 0400 	mov.w	r4, #0
 8005550:	e003      	b.n	800555a <UART_SetConfig+0x92a>
 8005552:	f04f 0301 	mov.w	r3, #1
 8005556:	f04f 0400 	mov.w	r4, #0
 800555a:	461a      	mov	r2, r3
 800555c:	4623      	mov	r3, r4
 800555e:	f7fa fe5b 	bl	8000218 <__aeabi_uldivmod>
 8005562:	4603      	mov	r3, r0
 8005564:	460c      	mov	r4, r1
 8005566:	4619      	mov	r1, r3
 8005568:	4622      	mov	r2, r4
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	f04f 0400 	mov.w	r4, #0
 8005572:	0214      	lsls	r4, r2, #8
 8005574:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005578:	020b      	lsls	r3, r1, #8
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6852      	ldr	r2, [r2, #4]
 800557e:	0852      	lsrs	r2, r2, #1
 8005580:	4611      	mov	r1, r2
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	eb13 0b01 	adds.w	fp, r3, r1
 800558a:	eb44 0c02 	adc.w	ip, r4, r2
 800558e:	4658      	mov	r0, fp
 8005590:	4661      	mov	r1, ip
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f04f 0400 	mov.w	r4, #0
 800559a:	461a      	mov	r2, r3
 800559c:	4623      	mov	r3, r4
 800559e:	f7fa fe3b 	bl	8000218 <__aeabi_uldivmod>
 80055a2:	4603      	mov	r3, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	61fb      	str	r3, [r7, #28]
            break;
 80055a8:	e0ab      	b.n	8005702 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 8088 	beq.w	80056c4 <UART_SetConfig+0xa94>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d05b      	beq.n	8005674 <UART_SetConfig+0xa44>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d052      	beq.n	800566a <UART_SetConfig+0xa3a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d04a      	beq.n	8005662 <UART_SetConfig+0xa32>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d041      	beq.n	8005658 <UART_SetConfig+0xa28>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	2b05      	cmp	r3, #5
 80055da:	d039      	beq.n	8005650 <UART_SetConfig+0xa20>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d031      	beq.n	8005648 <UART_SetConfig+0xa18>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b07      	cmp	r3, #7
 80055ea:	d028      	beq.n	800563e <UART_SetConfig+0xa0e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d01f      	beq.n	8005634 <UART_SetConfig+0xa04>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	2b09      	cmp	r3, #9
 80055fa:	d016      	beq.n	800562a <UART_SetConfig+0x9fa>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	2b0a      	cmp	r3, #10
 8005602:	d00d      	beq.n	8005620 <UART_SetConfig+0x9f0>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2b0b      	cmp	r3, #11
 800560a:	d104      	bne.n	8005616 <UART_SetConfig+0x9e6>
 800560c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005610:	f04f 0400 	mov.w	r4, #0
 8005614:	e05a      	b.n	80056cc <UART_SetConfig+0xa9c>
 8005616:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800561a:	f04f 0400 	mov.w	r4, #0
 800561e:	e055      	b.n	80056cc <UART_SetConfig+0xa9c>
 8005620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005624:	f04f 0400 	mov.w	r4, #0
 8005628:	e050      	b.n	80056cc <UART_SetConfig+0xa9c>
 800562a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800562e:	f04f 0400 	mov.w	r4, #0
 8005632:	e04b      	b.n	80056cc <UART_SetConfig+0xa9c>
 8005634:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005638:	f04f 0400 	mov.w	r4, #0
 800563c:	e046      	b.n	80056cc <UART_SetConfig+0xa9c>
 800563e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005642:	f04f 0400 	mov.w	r4, #0
 8005646:	e041      	b.n	80056cc <UART_SetConfig+0xa9c>
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <UART_SetConfig+0xa88>)
 800564a:	f04f 0400 	mov.w	r4, #0
 800564e:	e03d      	b.n	80056cc <UART_SetConfig+0xa9c>
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <UART_SetConfig+0xa8c>)
 8005652:	f04f 0400 	mov.w	r4, #0
 8005656:	e039      	b.n	80056cc <UART_SetConfig+0xa9c>
 8005658:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800565c:	f04f 0400 	mov.w	r4, #0
 8005660:	e034      	b.n	80056cc <UART_SetConfig+0xa9c>
 8005662:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <UART_SetConfig+0xa90>)
 8005664:	f04f 0400 	mov.w	r4, #0
 8005668:	e030      	b.n	80056cc <UART_SetConfig+0xa9c>
 800566a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800566e:	f04f 0400 	mov.w	r4, #0
 8005672:	e02b      	b.n	80056cc <UART_SetConfig+0xa9c>
 8005674:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005678:	f04f 0400 	mov.w	r4, #0
 800567c:	e026      	b.n	80056cc <UART_SetConfig+0xa9c>
 800567e:	bf00      	nop
 8005680:	14585500 	.word	0x14585500
 8005684:	00000000 	.word	0x00000000
 8005688:	28b0aa00 	.word	0x28b0aa00
 800568c:	00000000 	.word	0x00000000
 8005690:	00f42400 	.word	0x00f42400
 8005694:	f4240000 	.word	0xf4240000
 8005698:	01e84800 	.word	0x01e84800
 800569c:	03d09000 	.word	0x03d09000
 80056a0:	07a12000 	.word	0x07a12000
 80056a4:	0f424000 	.word	0x0f424000
 80056a8:	186a0000 	.word	0x186a0000
 80056ac:	1e848000 	.word	0x1e848000
 80056b0:	3d090000 	.word	0x3d090000
 80056b4:	7a120000 	.word	0x7a120000
 80056b8:	000aaa00 	.word	0x000aaa00
 80056bc:	000ccc00 	.word	0x000ccc00
 80056c0:	00155500 	.word	0x00155500
 80056c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056c8:	f04f 0400 	mov.w	r4, #0
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6852      	ldr	r2, [r2, #4]
 80056d0:	0852      	lsrs	r2, r2, #1
 80056d2:	4611      	mov	r1, r2
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	eb13 0b01 	adds.w	fp, r3, r1
 80056dc:	eb44 0c02 	adc.w	ip, r4, r2
 80056e0:	4658      	mov	r0, fp
 80056e2:	4661      	mov	r1, ip
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f04f 0400 	mov.w	r4, #0
 80056ec:	461a      	mov	r2, r3
 80056ee:	4623      	mov	r3, r4
 80056f0:	f7fa fd92 	bl	8000218 <__aeabi_uldivmod>
 80056f4:	4603      	mov	r3, r0
 80056f6:	460c      	mov	r4, r1
 80056f8:	61fb      	str	r3, [r7, #28]
            break;
 80056fa:	e002      	b.n	8005702 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	76fb      	strb	r3, [r7, #27]
            break;
 8005700:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005708:	d309      	bcc.n	800571e <UART_SetConfig+0xaee>
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005710:	d205      	bcs.n	800571e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	f000 bc18 	b.w	8005f4e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	76fb      	strb	r3, [r7, #27]
 8005722:	f000 bc14 	b.w	8005f4e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572e:	f040 8204 	bne.w	8005b3a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8005732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005736:	2b08      	cmp	r3, #8
 8005738:	f200 81df 	bhi.w	8005afa <UART_SetConfig+0xeca>
 800573c:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <UART_SetConfig+0xb14>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	08005769 	.word	0x08005769
 8005748:	08005821 	.word	0x08005821
 800574c:	080058d9 	.word	0x080058d9
 8005750:	08005afb 	.word	0x08005afb
 8005754:	08005981 	.word	0x08005981
 8005758:	08005afb 	.word	0x08005afb
 800575c:	08005afb 	.word	0x08005afb
 8005760:	08005afb 	.word	0x08005afb
 8005764:	08005a39 	.word	0x08005a39
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005768:	f7fc ff0c 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 800576c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	d044      	beq.n	8005800 <UART_SetConfig+0xbd0>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b01      	cmp	r3, #1
 800577c:	d03e      	beq.n	80057fc <UART_SetConfig+0xbcc>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b02      	cmp	r3, #2
 8005784:	d038      	beq.n	80057f8 <UART_SetConfig+0xbc8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b03      	cmp	r3, #3
 800578c:	d032      	beq.n	80057f4 <UART_SetConfig+0xbc4>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	2b04      	cmp	r3, #4
 8005794:	d02c      	beq.n	80057f0 <UART_SetConfig+0xbc0>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b05      	cmp	r3, #5
 800579c:	d026      	beq.n	80057ec <UART_SetConfig+0xbbc>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2b06      	cmp	r3, #6
 80057a4:	d020      	beq.n	80057e8 <UART_SetConfig+0xbb8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	d01a      	beq.n	80057e4 <UART_SetConfig+0xbb4>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d014      	beq.n	80057e0 <UART_SetConfig+0xbb0>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	2b09      	cmp	r3, #9
 80057bc:	d00e      	beq.n	80057dc <UART_SetConfig+0xbac>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	2b0a      	cmp	r3, #10
 80057c4:	d008      	beq.n	80057d8 <UART_SetConfig+0xba8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b0b      	cmp	r3, #11
 80057cc:	d102      	bne.n	80057d4 <UART_SetConfig+0xba4>
 80057ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d2:	e016      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e014      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	e012      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057dc:	2340      	movs	r3, #64	; 0x40
 80057de:	e010      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057e0:	2320      	movs	r3, #32
 80057e2:	e00e      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057e4:	2310      	movs	r3, #16
 80057e6:	e00c      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057e8:	230c      	movs	r3, #12
 80057ea:	e00a      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057ec:	230a      	movs	r3, #10
 80057ee:	e008      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057f0:	2308      	movs	r3, #8
 80057f2:	e006      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057f4:	2306      	movs	r3, #6
 80057f6:	e004      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057f8:	2304      	movs	r3, #4
 80057fa:	e002      	b.n	8005802 <UART_SetConfig+0xbd2>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e000      	b.n	8005802 <UART_SetConfig+0xbd2>
 8005800:	2301      	movs	r3, #1
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	005a      	lsls	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	441a      	add	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	fbb2 f3f3 	udiv	r3, r2, r3
 800581a:	b29b      	uxth	r3, r3
 800581c:	61fb      	str	r3, [r7, #28]
        break;
 800581e:	e16f      	b.n	8005b00 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fc fec6 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8005824:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d044      	beq.n	80058b8 <UART_SetConfig+0xc88>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b01      	cmp	r3, #1
 8005834:	d03e      	beq.n	80058b4 <UART_SetConfig+0xc84>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b02      	cmp	r3, #2
 800583c:	d038      	beq.n	80058b0 <UART_SetConfig+0xc80>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b03      	cmp	r3, #3
 8005844:	d032      	beq.n	80058ac <UART_SetConfig+0xc7c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b04      	cmp	r3, #4
 800584c:	d02c      	beq.n	80058a8 <UART_SetConfig+0xc78>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b05      	cmp	r3, #5
 8005854:	d026      	beq.n	80058a4 <UART_SetConfig+0xc74>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b06      	cmp	r3, #6
 800585c:	d020      	beq.n	80058a0 <UART_SetConfig+0xc70>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b07      	cmp	r3, #7
 8005864:	d01a      	beq.n	800589c <UART_SetConfig+0xc6c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b08      	cmp	r3, #8
 800586c:	d014      	beq.n	8005898 <UART_SetConfig+0xc68>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b09      	cmp	r3, #9
 8005874:	d00e      	beq.n	8005894 <UART_SetConfig+0xc64>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b0a      	cmp	r3, #10
 800587c:	d008      	beq.n	8005890 <UART_SetConfig+0xc60>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b0b      	cmp	r3, #11
 8005884:	d102      	bne.n	800588c <UART_SetConfig+0xc5c>
 8005886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800588a:	e016      	b.n	80058ba <UART_SetConfig+0xc8a>
 800588c:	2301      	movs	r3, #1
 800588e:	e014      	b.n	80058ba <UART_SetConfig+0xc8a>
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	e012      	b.n	80058ba <UART_SetConfig+0xc8a>
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	e010      	b.n	80058ba <UART_SetConfig+0xc8a>
 8005898:	2320      	movs	r3, #32
 800589a:	e00e      	b.n	80058ba <UART_SetConfig+0xc8a>
 800589c:	2310      	movs	r3, #16
 800589e:	e00c      	b.n	80058ba <UART_SetConfig+0xc8a>
 80058a0:	230c      	movs	r3, #12
 80058a2:	e00a      	b.n	80058ba <UART_SetConfig+0xc8a>
 80058a4:	230a      	movs	r3, #10
 80058a6:	e008      	b.n	80058ba <UART_SetConfig+0xc8a>
 80058a8:	2308      	movs	r3, #8
 80058aa:	e006      	b.n	80058ba <UART_SetConfig+0xc8a>
 80058ac:	2306      	movs	r3, #6
 80058ae:	e004      	b.n	80058ba <UART_SetConfig+0xc8a>
 80058b0:	2304      	movs	r3, #4
 80058b2:	e002      	b.n	80058ba <UART_SetConfig+0xc8a>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e000      	b.n	80058ba <UART_SetConfig+0xc8a>
 80058b8:	2301      	movs	r3, #1
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	005a      	lsls	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	441a      	add	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	61fb      	str	r3, [r7, #28]
        break;
 80058d6:	e113      	b.n	8005b00 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d043      	beq.n	8005968 <UART_SetConfig+0xd38>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d03d      	beq.n	8005964 <UART_SetConfig+0xd34>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d037      	beq.n	8005960 <UART_SetConfig+0xd30>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d031      	beq.n	800595c <UART_SetConfig+0xd2c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d02b      	beq.n	8005958 <UART_SetConfig+0xd28>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b05      	cmp	r3, #5
 8005906:	d025      	beq.n	8005954 <UART_SetConfig+0xd24>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b06      	cmp	r3, #6
 800590e:	d01f      	beq.n	8005950 <UART_SetConfig+0xd20>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b07      	cmp	r3, #7
 8005916:	d019      	beq.n	800594c <UART_SetConfig+0xd1c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b08      	cmp	r3, #8
 800591e:	d013      	beq.n	8005948 <UART_SetConfig+0xd18>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	2b09      	cmp	r3, #9
 8005926:	d00d      	beq.n	8005944 <UART_SetConfig+0xd14>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b0a      	cmp	r3, #10
 800592e:	d007      	beq.n	8005940 <UART_SetConfig+0xd10>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b0b      	cmp	r3, #11
 8005936:	d101      	bne.n	800593c <UART_SetConfig+0xd0c>
 8005938:	4b8d      	ldr	r3, [pc, #564]	; (8005b70 <UART_SetConfig+0xf40>)
 800593a:	e016      	b.n	800596a <UART_SetConfig+0xd3a>
 800593c:	4b8d      	ldr	r3, [pc, #564]	; (8005b74 <UART_SetConfig+0xf44>)
 800593e:	e014      	b.n	800596a <UART_SetConfig+0xd3a>
 8005940:	4b8d      	ldr	r3, [pc, #564]	; (8005b78 <UART_SetConfig+0xf48>)
 8005942:	e012      	b.n	800596a <UART_SetConfig+0xd3a>
 8005944:	4b8d      	ldr	r3, [pc, #564]	; (8005b7c <UART_SetConfig+0xf4c>)
 8005946:	e010      	b.n	800596a <UART_SetConfig+0xd3a>
 8005948:	4b8d      	ldr	r3, [pc, #564]	; (8005b80 <UART_SetConfig+0xf50>)
 800594a:	e00e      	b.n	800596a <UART_SetConfig+0xd3a>
 800594c:	4b8d      	ldr	r3, [pc, #564]	; (8005b84 <UART_SetConfig+0xf54>)
 800594e:	e00c      	b.n	800596a <UART_SetConfig+0xd3a>
 8005950:	4b8d      	ldr	r3, [pc, #564]	; (8005b88 <UART_SetConfig+0xf58>)
 8005952:	e00a      	b.n	800596a <UART_SetConfig+0xd3a>
 8005954:	4b8d      	ldr	r3, [pc, #564]	; (8005b8c <UART_SetConfig+0xf5c>)
 8005956:	e008      	b.n	800596a <UART_SetConfig+0xd3a>
 8005958:	4b8d      	ldr	r3, [pc, #564]	; (8005b90 <UART_SetConfig+0xf60>)
 800595a:	e006      	b.n	800596a <UART_SetConfig+0xd3a>
 800595c:	4b8d      	ldr	r3, [pc, #564]	; (8005b94 <UART_SetConfig+0xf64>)
 800595e:	e004      	b.n	800596a <UART_SetConfig+0xd3a>
 8005960:	4b8d      	ldr	r3, [pc, #564]	; (8005b98 <UART_SetConfig+0xf68>)
 8005962:	e002      	b.n	800596a <UART_SetConfig+0xd3a>
 8005964:	4b8d      	ldr	r3, [pc, #564]	; (8005b9c <UART_SetConfig+0xf6c>)
 8005966:	e000      	b.n	800596a <UART_SetConfig+0xd3a>
 8005968:	4b82      	ldr	r3, [pc, #520]	; (8005b74 <UART_SetConfig+0xf44>)
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6852      	ldr	r2, [r2, #4]
 800596e:	0852      	lsrs	r2, r2, #1
 8005970:	441a      	add	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	b29b      	uxth	r3, r3
 800597c:	61fb      	str	r3, [r7, #28]
        break;
 800597e:	e0bf      	b.n	8005b00 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005980:	f7fc fd92 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8005984:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d044      	beq.n	8005a18 <UART_SetConfig+0xde8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b01      	cmp	r3, #1
 8005994:	d03e      	beq.n	8005a14 <UART_SetConfig+0xde4>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b02      	cmp	r3, #2
 800599c:	d038      	beq.n	8005a10 <UART_SetConfig+0xde0>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d032      	beq.n	8005a0c <UART_SetConfig+0xddc>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d02c      	beq.n	8005a08 <UART_SetConfig+0xdd8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b05      	cmp	r3, #5
 80059b4:	d026      	beq.n	8005a04 <UART_SetConfig+0xdd4>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2b06      	cmp	r3, #6
 80059bc:	d020      	beq.n	8005a00 <UART_SetConfig+0xdd0>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	2b07      	cmp	r3, #7
 80059c4:	d01a      	beq.n	80059fc <UART_SetConfig+0xdcc>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d014      	beq.n	80059f8 <UART_SetConfig+0xdc8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b09      	cmp	r3, #9
 80059d4:	d00e      	beq.n	80059f4 <UART_SetConfig+0xdc4>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b0a      	cmp	r3, #10
 80059dc:	d008      	beq.n	80059f0 <UART_SetConfig+0xdc0>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	2b0b      	cmp	r3, #11
 80059e4:	d102      	bne.n	80059ec <UART_SetConfig+0xdbc>
 80059e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ea:	e016      	b.n	8005a1a <UART_SetConfig+0xdea>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e014      	b.n	8005a1a <UART_SetConfig+0xdea>
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	e012      	b.n	8005a1a <UART_SetConfig+0xdea>
 80059f4:	2340      	movs	r3, #64	; 0x40
 80059f6:	e010      	b.n	8005a1a <UART_SetConfig+0xdea>
 80059f8:	2320      	movs	r3, #32
 80059fa:	e00e      	b.n	8005a1a <UART_SetConfig+0xdea>
 80059fc:	2310      	movs	r3, #16
 80059fe:	e00c      	b.n	8005a1a <UART_SetConfig+0xdea>
 8005a00:	230c      	movs	r3, #12
 8005a02:	e00a      	b.n	8005a1a <UART_SetConfig+0xdea>
 8005a04:	230a      	movs	r3, #10
 8005a06:	e008      	b.n	8005a1a <UART_SetConfig+0xdea>
 8005a08:	2308      	movs	r3, #8
 8005a0a:	e006      	b.n	8005a1a <UART_SetConfig+0xdea>
 8005a0c:	2306      	movs	r3, #6
 8005a0e:	e004      	b.n	8005a1a <UART_SetConfig+0xdea>
 8005a10:	2304      	movs	r3, #4
 8005a12:	e002      	b.n	8005a1a <UART_SetConfig+0xdea>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e000      	b.n	8005a1a <UART_SetConfig+0xdea>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	005a      	lsls	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	441a      	add	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	61fb      	str	r3, [r7, #28]
        break;
 8005a36:	e063      	b.n	8005b00 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d04f      	beq.n	8005ae0 <UART_SetConfig+0xeb0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d048      	beq.n	8005ada <UART_SetConfig+0xeaa>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d041      	beq.n	8005ad4 <UART_SetConfig+0xea4>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d03a      	beq.n	8005ace <UART_SetConfig+0xe9e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d033      	beq.n	8005ac8 <UART_SetConfig+0xe98>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d02c      	beq.n	8005ac2 <UART_SetConfig+0xe92>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	2b06      	cmp	r3, #6
 8005a6e:	d025      	beq.n	8005abc <UART_SetConfig+0xe8c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b07      	cmp	r3, #7
 8005a76:	d01e      	beq.n	8005ab6 <UART_SetConfig+0xe86>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d017      	beq.n	8005ab0 <UART_SetConfig+0xe80>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b09      	cmp	r3, #9
 8005a86:	d010      	beq.n	8005aaa <UART_SetConfig+0xe7a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b0a      	cmp	r3, #10
 8005a8e:	d009      	beq.n	8005aa4 <UART_SetConfig+0xe74>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b0b      	cmp	r3, #11
 8005a96:	d102      	bne.n	8005a9e <UART_SetConfig+0xe6e>
 8005a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a9c:	e022      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aa2:	e01f      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa8:	e01c      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aae:	e019      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ab4:	e016      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aba:	e013      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005abc:	f241 5354 	movw	r3, #5460	; 0x1554
 8005ac0:	e010      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005ac2:	f641 1398 	movw	r3, #6552	; 0x1998
 8005ac6:	e00d      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005acc:	e00a      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005ace:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005ad2:	e007      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005ad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ad8:	e004      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ade:	e001      	b.n	8005ae4 <UART_SetConfig+0xeb4>
 8005ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6852      	ldr	r2, [r2, #4]
 8005ae8:	0852      	lsrs	r2, r2, #1
 8005aea:	441a      	add	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	61fb      	str	r3, [r7, #28]
        break;
 8005af8:	e002      	b.n	8005b00 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	76fb      	strb	r3, [r7, #27]
        break;
 8005afe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b0f      	cmp	r3, #15
 8005b04:	d916      	bls.n	8005b34 <UART_SetConfig+0xf04>
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b0c:	d212      	bcs.n	8005b34 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f023 030f 	bic.w	r3, r3, #15
 8005b16:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	89fb      	ldrh	r3, [r7, #14]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	89fa      	ldrh	r2, [r7, #14]
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	e20c      	b.n	8005f4e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	76fb      	strb	r3, [r7, #27]
 8005b38:	e209      	b.n	8005f4e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8005b3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	f200 81f4 	bhi.w	8005f2c <UART_SetConfig+0x12fc>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0xf1c>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005c57 	.word	0x08005c57
 8005b54:	08005d0d 	.word	0x08005d0d
 8005b58:	08005f2d 	.word	0x08005f2d
 8005b5c:	08005db7 	.word	0x08005db7
 8005b60:	08005f2d 	.word	0x08005f2d
 8005b64:	08005f2d 	.word	0x08005f2d
 8005b68:	08005f2d 	.word	0x08005f2d
 8005b6c:	08005e6d 	.word	0x08005e6d
 8005b70:	0001e848 	.word	0x0001e848
 8005b74:	01e84800 	.word	0x01e84800
 8005b78:	0003d090 	.word	0x0003d090
 8005b7c:	0007a120 	.word	0x0007a120
 8005b80:	000f4240 	.word	0x000f4240
 8005b84:	001e8480 	.word	0x001e8480
 8005b88:	0028b0aa 	.word	0x0028b0aa
 8005b8c:	0030d400 	.word	0x0030d400
 8005b90:	003d0900 	.word	0x003d0900
 8005b94:	00516154 	.word	0x00516154
 8005b98:	007a1200 	.word	0x007a1200
 8005b9c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba0:	f7fc fcf0 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8005ba4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d044      	beq.n	8005c38 <UART_SetConfig+0x1008>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d03e      	beq.n	8005c34 <UART_SetConfig+0x1004>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d038      	beq.n	8005c30 <UART_SetConfig+0x1000>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d032      	beq.n	8005c2c <UART_SetConfig+0xffc>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d02c      	beq.n	8005c28 <UART_SetConfig+0xff8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	d026      	beq.n	8005c24 <UART_SetConfig+0xff4>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b06      	cmp	r3, #6
 8005bdc:	d020      	beq.n	8005c20 <UART_SetConfig+0xff0>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b07      	cmp	r3, #7
 8005be4:	d01a      	beq.n	8005c1c <UART_SetConfig+0xfec>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d014      	beq.n	8005c18 <UART_SetConfig+0xfe8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b09      	cmp	r3, #9
 8005bf4:	d00e      	beq.n	8005c14 <UART_SetConfig+0xfe4>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b0a      	cmp	r3, #10
 8005bfc:	d008      	beq.n	8005c10 <UART_SetConfig+0xfe0>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b0b      	cmp	r3, #11
 8005c04:	d102      	bne.n	8005c0c <UART_SetConfig+0xfdc>
 8005c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c0a:	e016      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e014      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	e012      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c14:	2340      	movs	r3, #64	; 0x40
 8005c16:	e010      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c18:	2320      	movs	r3, #32
 8005c1a:	e00e      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	e00c      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c20:	230c      	movs	r3, #12
 8005c22:	e00a      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c24:	230a      	movs	r3, #10
 8005c26:	e008      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	e006      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c2c:	2306      	movs	r3, #6
 8005c2e:	e004      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c30:	2304      	movs	r3, #4
 8005c32:	e002      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e000      	b.n	8005c3a <UART_SetConfig+0x100a>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	441a      	add	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	61fb      	str	r3, [r7, #28]
        break;
 8005c54:	e16d      	b.n	8005f32 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c56:	f7fc fcab 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8005c5a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d044      	beq.n	8005cee <UART_SetConfig+0x10be>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d03e      	beq.n	8005cea <UART_SetConfig+0x10ba>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d038      	beq.n	8005ce6 <UART_SetConfig+0x10b6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d032      	beq.n	8005ce2 <UART_SetConfig+0x10b2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d02c      	beq.n	8005cde <UART_SetConfig+0x10ae>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b05      	cmp	r3, #5
 8005c8a:	d026      	beq.n	8005cda <UART_SetConfig+0x10aa>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b06      	cmp	r3, #6
 8005c92:	d020      	beq.n	8005cd6 <UART_SetConfig+0x10a6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b07      	cmp	r3, #7
 8005c9a:	d01a      	beq.n	8005cd2 <UART_SetConfig+0x10a2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d014      	beq.n	8005cce <UART_SetConfig+0x109e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b09      	cmp	r3, #9
 8005caa:	d00e      	beq.n	8005cca <UART_SetConfig+0x109a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b0a      	cmp	r3, #10
 8005cb2:	d008      	beq.n	8005cc6 <UART_SetConfig+0x1096>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b0b      	cmp	r3, #11
 8005cba:	d102      	bne.n	8005cc2 <UART_SetConfig+0x1092>
 8005cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cc0:	e016      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e014      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	e012      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cca:	2340      	movs	r3, #64	; 0x40
 8005ccc:	e010      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cce:	2320      	movs	r3, #32
 8005cd0:	e00e      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cd2:	2310      	movs	r3, #16
 8005cd4:	e00c      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	e00a      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cda:	230a      	movs	r3, #10
 8005cdc:	e008      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cde:	2308      	movs	r3, #8
 8005ce0:	e006      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005ce2:	2306      	movs	r3, #6
 8005ce4:	e004      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005ce6:	2304      	movs	r3, #4
 8005ce8:	e002      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e000      	b.n	8005cf0 <UART_SetConfig+0x10c0>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	61fb      	str	r3, [r7, #28]
        break;
 8005d0a:	e112      	b.n	8005f32 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d044      	beq.n	8005d9e <UART_SetConfig+0x116e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d03e      	beq.n	8005d9a <UART_SetConfig+0x116a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d038      	beq.n	8005d96 <UART_SetConfig+0x1166>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d032      	beq.n	8005d92 <UART_SetConfig+0x1162>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d02c      	beq.n	8005d8e <UART_SetConfig+0x115e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d026      	beq.n	8005d8a <UART_SetConfig+0x115a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	d020      	beq.n	8005d86 <UART_SetConfig+0x1156>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b07      	cmp	r3, #7
 8005d4a:	d01a      	beq.n	8005d82 <UART_SetConfig+0x1152>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d014      	beq.n	8005d7e <UART_SetConfig+0x114e>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b09      	cmp	r3, #9
 8005d5a:	d00e      	beq.n	8005d7a <UART_SetConfig+0x114a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b0a      	cmp	r3, #10
 8005d62:	d008      	beq.n	8005d76 <UART_SetConfig+0x1146>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b0b      	cmp	r3, #11
 8005d6a:	d102      	bne.n	8005d72 <UART_SetConfig+0x1142>
 8005d6c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005d70:	e016      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d72:	4b81      	ldr	r3, [pc, #516]	; (8005f78 <UART_SetConfig+0x1348>)
 8005d74:	e014      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d76:	4b81      	ldr	r3, [pc, #516]	; (8005f7c <UART_SetConfig+0x134c>)
 8005d78:	e012      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d7a:	4b81      	ldr	r3, [pc, #516]	; (8005f80 <UART_SetConfig+0x1350>)
 8005d7c:	e010      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d7e:	4b81      	ldr	r3, [pc, #516]	; (8005f84 <UART_SetConfig+0x1354>)
 8005d80:	e00e      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d82:	4b81      	ldr	r3, [pc, #516]	; (8005f88 <UART_SetConfig+0x1358>)
 8005d84:	e00c      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d86:	4b81      	ldr	r3, [pc, #516]	; (8005f8c <UART_SetConfig+0x135c>)
 8005d88:	e00a      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d8a:	4b81      	ldr	r3, [pc, #516]	; (8005f90 <UART_SetConfig+0x1360>)
 8005d8c:	e008      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d8e:	4b81      	ldr	r3, [pc, #516]	; (8005f94 <UART_SetConfig+0x1364>)
 8005d90:	e006      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d92:	4b81      	ldr	r3, [pc, #516]	; (8005f98 <UART_SetConfig+0x1368>)
 8005d94:	e004      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d96:	4b81      	ldr	r3, [pc, #516]	; (8005f9c <UART_SetConfig+0x136c>)
 8005d98:	e002      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d9a:	4b81      	ldr	r3, [pc, #516]	; (8005fa0 <UART_SetConfig+0x1370>)
 8005d9c:	e000      	b.n	8005da0 <UART_SetConfig+0x1170>
 8005d9e:	4b76      	ldr	r3, [pc, #472]	; (8005f78 <UART_SetConfig+0x1348>)
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6852      	ldr	r2, [r2, #4]
 8005da4:	0852      	lsrs	r2, r2, #1
 8005da6:	441a      	add	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	61fb      	str	r3, [r7, #28]
        break;
 8005db4:	e0bd      	b.n	8005f32 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db6:	f7fc fb77 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8005dba:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d044      	beq.n	8005e4e <UART_SetConfig+0x121e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d03e      	beq.n	8005e4a <UART_SetConfig+0x121a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d038      	beq.n	8005e46 <UART_SetConfig+0x1216>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d032      	beq.n	8005e42 <UART_SetConfig+0x1212>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d02c      	beq.n	8005e3e <UART_SetConfig+0x120e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d026      	beq.n	8005e3a <UART_SetConfig+0x120a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b06      	cmp	r3, #6
 8005df2:	d020      	beq.n	8005e36 <UART_SetConfig+0x1206>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b07      	cmp	r3, #7
 8005dfa:	d01a      	beq.n	8005e32 <UART_SetConfig+0x1202>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d014      	beq.n	8005e2e <UART_SetConfig+0x11fe>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	2b09      	cmp	r3, #9
 8005e0a:	d00e      	beq.n	8005e2a <UART_SetConfig+0x11fa>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b0a      	cmp	r3, #10
 8005e12:	d008      	beq.n	8005e26 <UART_SetConfig+0x11f6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b0b      	cmp	r3, #11
 8005e1a:	d102      	bne.n	8005e22 <UART_SetConfig+0x11f2>
 8005e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e20:	e016      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e014      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	e012      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e2a:	2340      	movs	r3, #64	; 0x40
 8005e2c:	e010      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e2e:	2320      	movs	r3, #32
 8005e30:	e00e      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e32:	2310      	movs	r3, #16
 8005e34:	e00c      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e36:	230c      	movs	r3, #12
 8005e38:	e00a      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e3a:	230a      	movs	r3, #10
 8005e3c:	e008      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	e006      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e42:	2306      	movs	r3, #6
 8005e44:	e004      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e46:	2304      	movs	r3, #4
 8005e48:	e002      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e000      	b.n	8005e50 <UART_SetConfig+0x1220>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	441a      	add	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	61fb      	str	r3, [r7, #28]
        break;
 8005e6a:	e062      	b.n	8005f32 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d04e      	beq.n	8005f12 <UART_SetConfig+0x12e2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d047      	beq.n	8005f0c <UART_SetConfig+0x12dc>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d040      	beq.n	8005f06 <UART_SetConfig+0x12d6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d039      	beq.n	8005f00 <UART_SetConfig+0x12d0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d032      	beq.n	8005efa <UART_SetConfig+0x12ca>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	d02b      	beq.n	8005ef4 <UART_SetConfig+0x12c4>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b06      	cmp	r3, #6
 8005ea2:	d024      	beq.n	8005eee <UART_SetConfig+0x12be>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2b07      	cmp	r3, #7
 8005eaa:	d01d      	beq.n	8005ee8 <UART_SetConfig+0x12b8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d016      	beq.n	8005ee2 <UART_SetConfig+0x12b2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b09      	cmp	r3, #9
 8005eba:	d00f      	beq.n	8005edc <UART_SetConfig+0x12ac>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	2b0a      	cmp	r3, #10
 8005ec2:	d008      	beq.n	8005ed6 <UART_SetConfig+0x12a6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	2b0b      	cmp	r3, #11
 8005eca:	d101      	bne.n	8005ed0 <UART_SetConfig+0x12a0>
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	e022      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed4:	e01f      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eda:	e01c      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee0:	e019      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee6:	e016      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005eec:	e013      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005eee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005ef2:	e010      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005ef4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005ef8:	e00d      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005efe:	e00a      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005f00:	f241 5355 	movw	r3, #5461	; 0x1555
 8005f04:	e007      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f0a:	e004      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005f0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f10:	e001      	b.n	8005f16 <UART_SetConfig+0x12e6>
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6852      	ldr	r2, [r2, #4]
 8005f1a:	0852      	lsrs	r2, r2, #1
 8005f1c:	441a      	add	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	61fb      	str	r3, [r7, #28]
        break;
 8005f2a:	e002      	b.n	8005f32 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	76fb      	strb	r3, [r7, #27]
        break;
 8005f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d908      	bls.n	8005f4a <UART_SetConfig+0x131a>
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3e:	d204      	bcs.n	8005f4a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	60da      	str	r2, [r3, #12]
 8005f48:	e001      	b.n	8005f4e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005f6a:	7efb      	ldrb	r3, [r7, #27]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3728      	adds	r7, #40	; 0x28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005f76:	bf00      	nop
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	0001e848 	.word	0x0001e848
 8005f80:	0003d090 	.word	0x0003d090
 8005f84:	0007a120 	.word	0x0007a120
 8005f88:	000f4240 	.word	0x000f4240
 8005f8c:	00145855 	.word	0x00145855
 8005f90:	00186a00 	.word	0x00186a00
 8005f94:	001e8480 	.word	0x001e8480
 8005f98:	0028b0aa 	.word	0x0028b0aa
 8005f9c:	003d0900 	.word	0x003d0900
 8005fa0:	007a1200 	.word	0x007a1200

08005fa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01a      	beq.n	80060ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a2:	d10a      	bne.n	80060ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	605a      	str	r2, [r3, #4]
  }
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80060f8:	f7fb f9aa 	bl	8001450 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b08      	cmp	r3, #8
 800610a:	d10e      	bne.n	800612a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800610c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f82c 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e022      	b.n	8006170 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b04      	cmp	r3, #4
 8006136:	d10e      	bne.n	8006156 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f816 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e00c      	b.n	8006170 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006188:	e02c      	b.n	80061e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d028      	beq.n	80061e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006192:	f7fb f95d 	bl	8001450 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d11d      	bne.n	80061e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061b6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0201 	bic.w	r2, r2, #1
 80061c6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e00f      	b.n	8006204 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69da      	ldr	r2, [r3, #28]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4013      	ands	r3, r2
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d0c3      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006222:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7fe fcd1 	bl	8004c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006294:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fe fcad 	bl	8004c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_UARTEx_DisableFifoMode+0x16>
 8006300:	2302      	movs	r3, #2
 8006302:	e027      	b.n	8006354 <HAL_UARTEx_DisableFifoMode+0x66>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2224      	movs	r2, #36	; 0x24
 8006310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006332:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006374:	2302      	movs	r3, #2
 8006376:	e02d      	b.n	80063d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2224      	movs	r2, #36	; 0x24
 8006384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f84f 	bl	8006458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e02d      	b.n	8006450 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2224      	movs	r2, #36	; 0x24
 8006400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0201 	bic.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f811 	bl	8006458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b089      	sub	sp, #36	; 0x24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006460:	4a2f      	ldr	r2, [pc, #188]	; (8006520 <UARTEx_SetNbDataToProcess+0xc8>)
 8006462:	f107 0314 	add.w	r3, r7, #20
 8006466:	e892 0003 	ldmia.w	r2, {r0, r1}
 800646a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800646e:	4a2d      	ldr	r2, [pc, #180]	; (8006524 <UARTEx_SetNbDataToProcess+0xcc>)
 8006470:	f107 030c 	add.w	r3, r7, #12
 8006474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006478:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006480:	2b00      	cmp	r3, #0
 8006482:	d108      	bne.n	8006496 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006494:	e03d      	b.n	8006512 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006496:	2308      	movs	r3, #8
 8006498:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800649a:	2308      	movs	r3, #8
 800649c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	0e5b      	lsrs	r3, r3, #25
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	0f5b      	lsrs	r3, r3, #29
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80064be:	7fbb      	ldrb	r3, [r7, #30]
 80064c0:	7f3a      	ldrb	r2, [r7, #28]
 80064c2:	f107 0120 	add.w	r1, r7, #32
 80064c6:	440a      	add	r2, r1
 80064c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80064cc:	fb02 f303 	mul.w	r3, r2, r3
 80064d0:	7f3a      	ldrb	r2, [r7, #28]
 80064d2:	f107 0120 	add.w	r1, r7, #32
 80064d6:	440a      	add	r2, r1
 80064d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80064dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80064e8:	7ffb      	ldrb	r3, [r7, #31]
 80064ea:	7f7a      	ldrb	r2, [r7, #29]
 80064ec:	f107 0120 	add.w	r1, r7, #32
 80064f0:	440a      	add	r2, r1
 80064f2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80064f6:	fb02 f303 	mul.w	r3, r2, r3
 80064fa:	7f7a      	ldrb	r2, [r7, #29]
 80064fc:	f107 0120 	add.w	r1, r7, #32
 8006500:	440a      	add	r2, r1
 8006502:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006506:	fb93 f3f2 	sdiv	r3, r3, r2
 800650a:	b29a      	uxth	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006512:	bf00      	nop
 8006514:	3724      	adds	r7, #36	; 0x24
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	08006598 	.word	0x08006598
 8006524:	080065a0 	.word	0x080065a0

08006528 <__libc_init_array>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	4e0d      	ldr	r6, [pc, #52]	; (8006560 <__libc_init_array+0x38>)
 800652c:	4c0d      	ldr	r4, [pc, #52]	; (8006564 <__libc_init_array+0x3c>)
 800652e:	1ba4      	subs	r4, r4, r6
 8006530:	10a4      	asrs	r4, r4, #2
 8006532:	2500      	movs	r5, #0
 8006534:	42a5      	cmp	r5, r4
 8006536:	d109      	bne.n	800654c <__libc_init_array+0x24>
 8006538:	4e0b      	ldr	r6, [pc, #44]	; (8006568 <__libc_init_array+0x40>)
 800653a:	4c0c      	ldr	r4, [pc, #48]	; (800656c <__libc_init_array+0x44>)
 800653c:	f000 f820 	bl	8006580 <_init>
 8006540:	1ba4      	subs	r4, r4, r6
 8006542:	10a4      	asrs	r4, r4, #2
 8006544:	2500      	movs	r5, #0
 8006546:	42a5      	cmp	r5, r4
 8006548:	d105      	bne.n	8006556 <__libc_init_array+0x2e>
 800654a:	bd70      	pop	{r4, r5, r6, pc}
 800654c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006550:	4798      	blx	r3
 8006552:	3501      	adds	r5, #1
 8006554:	e7ee      	b.n	8006534 <__libc_init_array+0xc>
 8006556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800655a:	4798      	blx	r3
 800655c:	3501      	adds	r5, #1
 800655e:	e7f2      	b.n	8006546 <__libc_init_array+0x1e>
 8006560:	080065c8 	.word	0x080065c8
 8006564:	080065c8 	.word	0x080065c8
 8006568:	080065c8 	.word	0x080065c8
 800656c:	080065cc 	.word	0x080065cc

08006570 <memset>:
 8006570:	4402      	add	r2, r0
 8006572:	4603      	mov	r3, r0
 8006574:	4293      	cmp	r3, r2
 8006576:	d100      	bne.n	800657a <memset+0xa>
 8006578:	4770      	bx	lr
 800657a:	f803 1b01 	strb.w	r1, [r3], #1
 800657e:	e7f9      	b.n	8006574 <memset+0x4>

08006580 <_init>:
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	bf00      	nop
 8006584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006586:	bc08      	pop	{r3}
 8006588:	469e      	mov	lr, r3
 800658a:	4770      	bx	lr

0800658c <_fini>:
 800658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658e:	bf00      	nop
 8006590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006592:	bc08      	pop	{r3}
 8006594:	469e      	mov	lr, r3
 8006596:	4770      	bx	lr
