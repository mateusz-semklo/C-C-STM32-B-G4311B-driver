
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080066b8  080066b8  000166b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e0  080066e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e8  080066e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e8  080066e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080066f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000000c  080066fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080066fc  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001148d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a0  00000000  00000000  000314c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000347b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df10  00000000  00000000  000356d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc11  00000000  00000000  000535e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ee7  00000000  00000000  000611f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001240e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  0012415c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080066a0 	.word	0x080066a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080066a0 	.word	0x080066a0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xa8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0xac>)
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_GPIO_Init+0xb0>)
 80005a4:	f001 f866 	bl	8001674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f000 ffc6 	bl	800153e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 ffdd 	bl	8001572 <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	10110000 	.word	0x10110000
 80005c8:	48000800 	.word	0x48000800

080005cc <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005dc:	d122      	bne.n	8000624 <HAL_GPIO_EXTI_Callback+0x58>
	{
				 HAL_TIMEx_HallSensor_Start(&htim4);
 80005de:	4813      	ldr	r0, [pc, #76]	; (800062c <HAL_GPIO_EXTI_Callback+0x60>)
 80005e0:	f003 fec0 	bl	8004364 <HAL_TIMEx_HallSensor_Start>

				 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 80005e4:	2100      	movs	r1, #0
 80005e6:	4812      	ldr	r0, [pc, #72]	; (8000630 <HAL_GPIO_EXTI_Callback+0x64>)
 80005e8:	f003 ff12 	bl	8004410 <HAL_TIMEx_PWMN_Start_IT>
				 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 80005ec:	2104      	movs	r1, #4
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <HAL_GPIO_EXTI_Callback+0x64>)
 80005f0:	f003 ff0e 	bl	8004410 <HAL_TIMEx_PWMN_Start_IT>
				 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 80005f4:	2108      	movs	r1, #8
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <HAL_GPIO_EXTI_Callback+0x64>)
 80005f8:	f003 ff0a 	bl	8004410 <HAL_TIMEx_PWMN_Start_IT>

				 HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80005fc:	2100      	movs	r1, #0
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <HAL_GPIO_EXTI_Callback+0x68>)
 8000600:	f002 fab4 	bl	8002b6c <HAL_TIM_IC_Start>
				 HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000604:	2104      	movs	r1, #4
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <HAL_GPIO_EXTI_Callback+0x68>)
 8000608:	f002 fab0 	bl	8002b6c <HAL_TIM_IC_Start>

				 TIM4->CNT=0;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_GPIO_EXTI_Callback+0x6c>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
				 TIM4->CCR1=0;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000614:	2200      	movs	r2, #0
 8000616:	635a      	str	r2, [r3, #52]	; 0x34


				 start_stop=1;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_GPIO_EXTI_Callback+0x70>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
				 licznik=0;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <HAL_GPIO_EXTI_Callback+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]

	}
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000030 	.word	0x20000030
 8000630:	2000007c 	.word	0x2000007c
 8000634:	200000c8 	.word	0x200000c8
 8000638:	40000800 	.word	0x40000800
 800063c:	2000002d 	.word	0x2000002d
 8000640:	2000002c 	.word	0x2000002c

08000644 <HAL_TIMEx_CommutCallback>:

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a8b      	ldr	r2, [pc, #556]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	f040 810d 	bne.w	8000872 <HAL_TIMEx_CommutCallback+0x22e>
	{

	if (start_stop==1)
 8000658:	4b8a      	ldr	r3, [pc, #552]	; (8000884 <HAL_TIMEx_CommutCallback+0x240>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b01      	cmp	r3, #1
 8000660:	f040 8104 	bne.w	800086c <HAL_TIMEx_CommutCallback+0x228>
	{
					switch (licznik)
 8000664:	4b88      	ldr	r3, [pc, #544]	; (8000888 <HAL_TIMEx_CommutCallback+0x244>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b05      	cmp	r3, #5
 800066c:	f200 80ee 	bhi.w	800084c <HAL_TIMEx_CommutCallback+0x208>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_TIMEx_CommutCallback+0x34>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000691 	.word	0x08000691
 800067c:	080006db 	.word	0x080006db
 8000680:	08000725 	.word	0x08000725
 8000684:	0800076f 	.word	0x0800076f
 8000688:	080007b9 	.word	0x080007b9
 800068c:	08000803 	.word	0x08000803
					{
					case 0:
										SET_CC1_T1;
 8000690:	4b7b      	ldr	r3, [pc, #492]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000692:	6a1b      	ldr	r3, [r3, #32]
 8000694:	4a7a      	ldr	r2, [pc, #488]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6213      	str	r3, [r2, #32]
										RESET_CC1N_T2;
 800069c:	4b78      	ldr	r3, [pc, #480]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	4a77      	ldr	r2, [pc, #476]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006a2:	f023 0304 	bic.w	r3, r3, #4
 80006a6:	6213      	str	r3, [r2, #32]
										RESET_CC2_T3;
 80006a8:	4b75      	ldr	r3, [pc, #468]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	4a74      	ldr	r2, [pc, #464]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006ae:	f023 0310 	bic.w	r3, r3, #16
 80006b2:	6213      	str	r3, [r2, #32]
										SET_CC2N_T4;
 80006b4:	4b72      	ldr	r3, [pc, #456]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	4a71      	ldr	r2, [pc, #452]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006be:	6213      	str	r3, [r2, #32]
										RESET_CC3_T5;
 80006c0:	4b6f      	ldr	r3, [pc, #444]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	4a6e      	ldr	r2, [pc, #440]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006ca:	6213      	str	r3, [r2, #32]
										RESET_CC3N_T6;
 80006cc:	4b6c      	ldr	r3, [pc, #432]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	4a6b      	ldr	r2, [pc, #428]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006d6:	6213      	str	r3, [r2, #32]
				    break;
 80006d8:	e0b8      	b.n	800084c <HAL_TIMEx_CommutCallback+0x208>

					case 1:
										SET_CC1_T1;
 80006da:	4b69      	ldr	r3, [pc, #420]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006dc:	6a1b      	ldr	r3, [r3, #32]
 80006de:	4a68      	ldr	r2, [pc, #416]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6213      	str	r3, [r2, #32]
										RESET_CC1N_T2;
 80006e6:	4b66      	ldr	r3, [pc, #408]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006e8:	6a1b      	ldr	r3, [r3, #32]
 80006ea:	4a65      	ldr	r2, [pc, #404]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006ec:	f023 0304 	bic.w	r3, r3, #4
 80006f0:	6213      	str	r3, [r2, #32]
										RESET_CC2_T3;
 80006f2:	4b63      	ldr	r3, [pc, #396]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	4a62      	ldr	r2, [pc, #392]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80006f8:	f023 0310 	bic.w	r3, r3, #16
 80006fc:	6213      	str	r3, [r2, #32]
										RESET_CC2N_T4;
 80006fe:	4b60      	ldr	r3, [pc, #384]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	4a5f      	ldr	r2, [pc, #380]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000708:	6213      	str	r3, [r2, #32]
										RESET_CC3_T5;
 800070a:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	4a5c      	ldr	r2, [pc, #368]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000714:	6213      	str	r3, [r2, #32]
										SET_CC3N_T6;
 8000716:	4b5a      	ldr	r3, [pc, #360]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	4a59      	ldr	r2, [pc, #356]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800071c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000720:	6213      	str	r3, [r2, #32]
				    break;
 8000722:	e093      	b.n	800084c <HAL_TIMEx_CommutCallback+0x208>

					case 2:
										RESET_CC1_T1;
 8000724:	4b56      	ldr	r3, [pc, #344]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000726:	6a1b      	ldr	r3, [r3, #32]
 8000728:	4a55      	ldr	r2, [pc, #340]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800072a:	f023 0301 	bic.w	r3, r3, #1
 800072e:	6213      	str	r3, [r2, #32]
										RESET_CC1N_T2;
 8000730:	4b53      	ldr	r3, [pc, #332]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	4a52      	ldr	r2, [pc, #328]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000736:	f023 0304 	bic.w	r3, r3, #4
 800073a:	6213      	str	r3, [r2, #32]
										SET_CC2_T3;
 800073c:	4b50      	ldr	r3, [pc, #320]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	4a4f      	ldr	r2, [pc, #316]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6213      	str	r3, [r2, #32]
										RESET_CC2N_T4;
 8000748:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	4a4c      	ldr	r2, [pc, #304]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800074e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000752:	6213      	str	r3, [r2, #32]
										RESET_CC3_T5;
 8000754:	4b4a      	ldr	r3, [pc, #296]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000756:	6a1b      	ldr	r3, [r3, #32]
 8000758:	4a49      	ldr	r2, [pc, #292]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800075a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800075e:	6213      	str	r3, [r2, #32]
										SET_CC3N_T6;
 8000760:	4b47      	ldr	r3, [pc, #284]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000762:	6a1b      	ldr	r3, [r3, #32]
 8000764:	4a46      	ldr	r2, [pc, #280]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800076a:	6213      	str	r3, [r2, #32]
				    break;
 800076c:	e06e      	b.n	800084c <HAL_TIMEx_CommutCallback+0x208>

				    case 3:
				    					RESET_CC1_T1;
 800076e:	4b44      	ldr	r3, [pc, #272]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000770:	6a1b      	ldr	r3, [r3, #32]
 8000772:	4a43      	ldr	r2, [pc, #268]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	6213      	str	r3, [r2, #32]
				    					SET_CC1N_T2;
 800077a:	4b41      	ldr	r3, [pc, #260]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a40      	ldr	r2, [pc, #256]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6213      	str	r3, [r2, #32]
				    					SET_CC2_T3;
 8000786:	4b3e      	ldr	r3, [pc, #248]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	4a3d      	ldr	r2, [pc, #244]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6213      	str	r3, [r2, #32]
				    					RESET_CC2N_T4;
 8000792:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	4a3a      	ldr	r2, [pc, #232]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800079c:	6213      	str	r3, [r2, #32]
				    					RESET_CC3_T5;
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007a0:	6a1b      	ldr	r3, [r3, #32]
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007a8:	6213      	str	r3, [r2, #32]
				    					RESET_CC3N_T6;
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	4a34      	ldr	r2, [pc, #208]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007b4:	6213      	str	r3, [r2, #32]
					break;
 80007b6:	e049      	b.n	800084c <HAL_TIMEx_CommutCallback+0x208>

				    case 4:
				    					RESET_CC1_T1;
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007ba:	6a1b      	ldr	r3, [r3, #32]
 80007bc:	4a30      	ldr	r2, [pc, #192]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	6213      	str	r3, [r2, #32]
				    					SET_CC1N_T2;
 80007c4:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007c6:	6a1b      	ldr	r3, [r3, #32]
 80007c8:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6213      	str	r3, [r2, #32]
				    					RESET_CC2_T3;
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	4a2a      	ldr	r2, [pc, #168]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007d6:	f023 0310 	bic.w	r3, r3, #16
 80007da:	6213      	str	r3, [r2, #32]
				    					RESET_CC2N_T4;
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007de:	6a1b      	ldr	r3, [r3, #32]
 80007e0:	4a27      	ldr	r2, [pc, #156]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007e6:	6213      	str	r3, [r2, #32]
				    					SET_CC3_T5;
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007ea:	6a1b      	ldr	r3, [r3, #32]
 80007ec:	4a24      	ldr	r2, [pc, #144]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f2:	6213      	str	r3, [r2, #32]
				    					RESET_CC3N_T6;
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007f6:	6a1b      	ldr	r3, [r3, #32]
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 80007fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007fe:	6213      	str	r3, [r2, #32]
				    break;
 8000800:	e024      	b.n	800084c <HAL_TIMEx_CommutCallback+0x208>

				    case 5:
				    					RESET_CC1_T1;
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000808:	f023 0301 	bic.w	r3, r3, #1
 800080c:	6213      	str	r3, [r2, #32]
				    					RESET_CC1N_T2;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000810:	6a1b      	ldr	r3, [r3, #32]
 8000812:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000814:	f023 0304 	bic.w	r3, r3, #4
 8000818:	6213      	str	r3, [r2, #32]
				    					RESET_CC2_T3;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800081c:	6a1b      	ldr	r3, [r3, #32]
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000820:	f023 0310 	bic.w	r3, r3, #16
 8000824:	6213      	str	r3, [r2, #32]
				    					SET_CC2N_T4;
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000828:	6a1b      	ldr	r3, [r3, #32]
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 800082c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000830:	6213      	str	r3, [r2, #32]
				    					SET_CC3_T5;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000834:	6a1b      	ldr	r3, [r3, #32]
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083c:	6213      	str	r3, [r2, #32]
				    					RESET_CC3N_T6;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000840:	6a1b      	ldr	r3, [r3, #32]
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_TIMEx_CommutCallback+0x23c>)
 8000844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000848:	6213      	str	r3, [r2, #32]
				    break;
 800084a:	bf00      	nop
					}
					licznik++;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_TIMEx_CommutCallback+0x244>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	3301      	adds	r3, #1
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_TIMEx_CommutCallback+0x244>)
 8000858:	701a      	strb	r2, [r3, #0]
					if(licznik>5)
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_TIMEx_CommutCallback+0x244>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b05      	cmp	r3, #5
 8000862:	d906      	bls.n	8000872 <HAL_TIMEx_CommutCallback+0x22e>
					licznik=0;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_TIMEx_CommutCallback+0x244>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
	else
	{
		licznik=0;
	}
	}
}
 800086a:	e002      	b.n	8000872 <HAL_TIMEx_CommutCallback+0x22e>
		licznik=0;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_TIMEx_CommutCallback+0x244>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40012c00 	.word	0x40012c00
 8000884:	2000002d 	.word	0x2000002d
 8000888:	2000002c 	.word	0x2000002c

0800088c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	//i++;
	if(htim->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		//  TIM1->CCR2=TIM2->CCR2;
		//  TIM1->CCR3=TIM2->CCR2;
		}
	}

}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fcfb 	bl	80012a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f84e 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f7ff fe30 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008b8:	f000 f948 	bl	8000b4c <MX_TIM1_Init>
  MX_TIM4_Init();
 80008bc:	f000 fac4 	bl	8000e48 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 fc30 	bl	8001124 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008c4:	f000 fa26 	bl	8000d14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //////// konfiguracja Timer 2  ////////////
    TIM2->ARR=0xFFFF;
 80008c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->PSC=0;
 80008d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28

  //////// konfiguracja Timer 4  ////////////
    TIM4->ARR=0xFFFF;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <main+0x9c>)
 80008dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->PSC=500;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <main+0x9c>)
 80008e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->CCR2=2;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <main+0x9c>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	639a      	str	r2, [r3, #56]	; 0x38

    //////// konfiguracja Timer 1  ////////////
    TIM1->ARR=0;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <main+0xa0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->PSC=0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <main+0xa0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->CCR1=0;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <main+0xa0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2=0;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <main+0xa0>)
 8000904:	2200      	movs	r2, #0
 8000906:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3=0;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <main+0xa0>)
 800090a:	2200      	movs	r2, #0
 800090c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_TIMEx_ConfigCommutEvent_IT(&htim1,TIM_TS_ITR3, TIM_COMMUTATION_TRGI);
 800090e:	2204      	movs	r2, #4
 8000910:	2130      	movs	r1, #48	; 0x30
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <main+0xa4>)
 8000914:	f003 fe4a 	bl	80045ac <HAL_TIMEx_ConfigCommutEvent_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  TIM1->ARR=TIM2->CCR1;
 8000918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <main+0xa0>)
 800091e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000920:	62d3      	str	r3, [r2, #44]	; 0x2c
	  TIM1->CCR1=TIM2->CCR2;
 8000922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <main+0xa0>)
 8000928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800092a:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1->CCR2=TIM2->CCR2;
 800092c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000930:	4a05      	ldr	r2, [pc, #20]	; (8000948 <main+0xa0>)
 8000932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000934:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM1->CCR3=TIM2->CCR2;
 8000936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800093a:	4a03      	ldr	r2, [pc, #12]	; (8000948 <main+0xa0>)
 800093c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093e:	63d3      	str	r3, [r2, #60]	; 0x3c
	  TIM1->ARR=TIM2->CCR1;
 8000940:	e7ea      	b.n	8000918 <main+0x70>
 8000942:	bf00      	nop
 8000944:	40000800 	.word	0x40000800
 8000948:	40012c00 	.word	0x40012c00
 800094c:	2000007c 	.word	0x2000007c

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0a4      	sub	sp, #144	; 0x90
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800095a:	2238      	movs	r2, #56	; 0x38
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fe96 	bl	8006690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2244      	movs	r2, #68	; 0x44
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f005 fe88 	bl	8006690 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000980:	2000      	movs	r0, #0
 8000982:	f001 f811 	bl	80019a8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000986:	2301      	movs	r3, #1
 8000988:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000994:	2303      	movs	r3, #3
 8000996:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000998:	2302      	movs	r3, #2
 800099a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800099c:	2350      	movs	r3, #80	; 0x50
 800099e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 f899 	bl	8001af0 <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009c4:	f000 f826 	bl	8000a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c8:	230f      	movs	r3, #15
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009cc:	2303      	movs	r3, #3
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009e0:	2107      	movs	r1, #7
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fb9c 	bl	8002120 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009ee:	f000 f811 	bl	8000a14 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fdab 	bl	8002558 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000a08:	f000 f804 	bl	8000a14 <Error_Handler>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3790      	adds	r7, #144	; 0x90
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6093      	str	r3, [r2, #8]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40007000 	.word	0x40007000

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6613      	str	r3, [r2, #96]	; 0x60
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000a7a:	f7ff ffd3 	bl	8000a24 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 fc34 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000aee:	f002 f8ff 	bl	8002cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000007c 	.word	0x2000007c

08000afc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <USART2_IRQHandler+0x10>)
 8000b02:	f003 ffab 	bl	8004a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000114 	.word	0x20000114

08000b10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000b14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b18:	f000 ff2e 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <SystemInit+0x28>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <SystemInit+0x28>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <SystemInit+0x28>)
 8000b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0a0      	sub	sp, #128	; 0x80
 8000b50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b90:	463b      	mov	r3, r7
 8000b92:	2234      	movs	r2, #52	; 0x34
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f005 fd7a 	bl	8006690 <memset>

  htim1.Instance = TIM1;
 8000b9c:	4b5b      	ldr	r3, [pc, #364]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000b9e:	4a5c      	ldr	r2, [pc, #368]	; (8000d10 <MX_TIM1_Init+0x1c4>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ba2:	4b5a      	ldr	r3, [pc, #360]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000bae:	4b57      	ldr	r3, [pc, #348]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b55      	ldr	r3, [pc, #340]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bba:	4b54      	ldr	r3, [pc, #336]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc0:	4b52      	ldr	r3, [pc, #328]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bc6:	4851      	ldr	r0, [pc, #324]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000bc8:	f001 feb6 	bl	8002938 <HAL_TIM_Base_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000bd2:	f7ff ff1f 	bl	8000a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bda:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bdc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000be0:	4619      	mov	r1, r3
 8000be2:	484a      	ldr	r0, [pc, #296]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000be4:	f002 fba8 	bl	8003338 <HAL_TIM_ConfigClockSource>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bee:	f7ff ff11 	bl	8000a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bf2:	4846      	ldr	r0, [pc, #280]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000bf4:	f001 fef7 	bl	80029e6 <HAL_TIM_PWM_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000bfe:	f7ff ff09 	bl	8000a14 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000c06:	2330      	movs	r3, #48	; 0x30
 8000c08:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000c0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	483e      	ldr	r0, [pc, #248]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000c12:	f002 fc6f 	bl	80034f4 <HAL_TIM_SlaveConfigSynchro>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000c1c:	f7ff fefa 	bl	8000a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000c20:	2370      	movs	r3, #112	; 0x70
 8000c22:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c30:	4619      	mov	r1, r3
 8000c32:	4836      	ldr	r0, [pc, #216]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000c34:	f003 fd3e 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000c3e:	f7ff fee9 	bl	8000a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c42:	2360      	movs	r3, #96	; 0x60
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c62:	2200      	movs	r2, #0
 8000c64:	4619      	mov	r1, r3
 8000c66:	4829      	ldr	r0, [pc, #164]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000c68:	f002 fa56 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000c72:	f7ff fecf 	bl	8000a14 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c7e:	2204      	movs	r2, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4822      	ldr	r0, [pc, #136]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000c84:	f002 fa48 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000c8e:	f7ff fec1 	bl	8000a14 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481b      	ldr	r0, [pc, #108]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000ca0:	f002 fa3a 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000caa:	f7ff feb3 	bl	8000a14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8000cbe:	2344      	movs	r3, #68	; 0x44
 8000cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4807      	ldr	r0, [pc, #28]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000cf0:	f003 fd62 	bl	80047b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8000cfa:	f7ff fe8b 	bl	8000a14 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <MX_TIM1_Init+0x1c0>)
 8000d00:	f000 f99a 	bl	8001038 <HAL_TIM_MspPostInit>

}
 8000d04:	bf00      	nop
 8000d06:	3780      	adds	r7, #128	; 0x80
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000007c 	.word	0x2000007c
 8000d10:	40012c00 	.word	0x40012c00

08000d14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b090      	sub	sp, #64	; 0x40
 8000d18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000d50:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000d64:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d76:	4833      	ldr	r0, [pc, #204]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000d78:	f001 fdde 	bl	8002938 <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d82:	f7ff fe47 	bl	8000a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d90:	4619      	mov	r1, r3
 8000d92:	482c      	ldr	r0, [pc, #176]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000d94:	f002 fad0 	bl	8003338 <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d9e:	f7ff fe39 	bl	8000a14 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000da2:	4828      	ldr	r0, [pc, #160]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000da4:	f001 fe80 	bl	8002aa8 <HAL_TIM_IC_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000dae:	f7ff fe31 	bl	8000a14 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000db2:	2304      	movs	r3, #4
 8000db4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000db6:	2350      	movs	r3, #80	; 0x50
 8000db8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481e      	ldr	r0, [pc, #120]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000dca:	f002 fb93 	bl	80034f4 <HAL_TIM_SlaveConfigSynchro>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000dd4:	f7ff fe1e 	bl	8000a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	4817      	ldr	r0, [pc, #92]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000de8:	f003 fc64 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000df2:	f7ff fe0f 	bl	8000a14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000e0e:	f002 f8ee 	bl	8002fee <HAL_TIM_IC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000e18:	f7ff fdfc 	bl	8000a14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e20:	2302      	movs	r3, #2
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	2204      	movs	r2, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_TIM2_Init+0x130>)
 8000e2c:	f002 f8df 	bl	8002fee <HAL_TIM_IC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000e36:	f7ff fded 	bl	8000a14 <Error_Handler>
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3740      	adds	r7, #64	; 0x40
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000c8 	.word	0x200000c8

08000e48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000e76:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <MX_TIM4_Init+0xcc>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e98:	481d      	ldr	r0, [pc, #116]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000e9a:	f001 fd4d 	bl	8002938 <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000ea4:	f7ff fdb6 	bl	8000a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4816      	ldr	r0, [pc, #88]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000eb6:	f002 fa3f 	bl	8003338 <HAL_TIM_ConfigClockSource>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ec0:	f7ff fda8 	bl	8000a14 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000edc:	f003 f989 	bl	80041f2 <HAL_TIMEx_HallSensor_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000ee6:	f7ff fd95 	bl	8000a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000eea:	2350      	movs	r3, #80	; 0x50
 8000eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_TIM4_Init+0xc8>)
 8000ef8:	f003 fbdc 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000f02:	f7ff fd87 	bl	8000a14 <Error_Handler>
  }

}
 8000f06:	bf00      	nop
 8000f08:	3730      	adds	r7, #48	; 0x30
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000030 	.word	0x20000030
 8000f14:	40000800 	.word	0x40000800

08000f18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a3c      	ldr	r2, [pc, #240]	; (8001028 <HAL_TIM_Base_MspInit+0x110>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d114      	bne.n	8000f64 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f3a:	4b3c      	ldr	r3, [pc, #240]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	4a3b      	ldr	r2, [pc, #236]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000f40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	4b39      	ldr	r3, [pc, #228]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	201a      	movs	r0, #26
 8000f58:	f000 faf1 	bl	800153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000f5c:	201a      	movs	r0, #26
 8000f5e:	f000 fb08 	bl	8001572 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f62:	e05d      	b.n	8001020 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f6c:	d12a      	bne.n	8000fc4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	4a2e      	ldr	r2, [pc, #184]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a28      	ldr	r2, [pc, #160]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 8000f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fac:	2302      	movs	r3, #2
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f000 fb59 	bl	8001674 <HAL_GPIO_Init>
}
 8000fc2:	e02d      	b.n	8001020 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM4)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <HAL_TIM_Base_MspInit+0x118>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d128      	bne.n	8001020 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_TIM_Base_MspInit+0x114>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_W_TIM4_Pin|HALL_U_TIM4_Pin|HALL_V_TIM4_Pin;
 8000ffe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100c:	2302      	movs	r3, #2
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001010:	2302      	movs	r3, #2
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <HAL_TIM_Base_MspInit+0x11c>)
 800101c:	f000 fb2a 	bl	8001674 <HAL_GPIO_Init>
}
 8001020:	bf00      	nop
 8001022:	3730      	adds	r7, #48	; 0x30
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40012c00 	.word	0x40012c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40000800 	.word	0x40000800
 8001034:	48000400 	.word	0x48000400

08001038 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a2f      	ldr	r2, [pc, #188]	; (8001114 <HAL_TIM_MspPostInit+0xdc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d157      	bne.n	800110a <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <HAL_TIM_MspPostInit+0xe0>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a2e      	ldr	r2, [pc, #184]	; (8001118 <HAL_TIM_MspPostInit+0xe0>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <HAL_TIM_MspPostInit+0xe0>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <HAL_TIM_MspPostInit+0xe0>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a28      	ldr	r2, [pc, #160]	; (8001118 <HAL_TIM_MspPostInit+0xe0>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_TIM_MspPostInit+0xe0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_TIM_MspPostInit+0xe0>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <HAL_TIM_MspPostInit+0xe0>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_TIM_MspPostInit+0xe0>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80010b4:	2304      	movs	r3, #4
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4817      	ldr	r0, [pc, #92]	; (800111c <HAL_TIM_MspPostInit+0xe4>)
 80010c0:	f000 fad8 	bl	8001674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2302      	movs	r3, #2
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80010d6:	2304      	movs	r3, #4
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480f      	ldr	r0, [pc, #60]	; (8001120 <HAL_TIM_MspPostInit+0xe8>)
 80010e2:	f000 fac7 	bl	8001674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80010e6:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f000 fab5 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012c00 	.word	0x40012c00
 8001118:	40021000 	.word	0x40021000
 800111c:	48000800 	.word	0x48000800
 8001120:	48000400 	.word	0x48000400

08001124 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 800112a:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <MX_USART2_UART_Init+0x94>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 800116e:	f003 fc24 	bl	80049ba <HAL_UART_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001178:	f7ff fc4c 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117c:	2100      	movs	r1, #0
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 8001180:	f005 f97e 	bl	8006480 <HAL_UARTEx_SetTxFifoThreshold>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800118a:	f7ff fc43 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118e:	2100      	movs	r1, #0
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 8001192:	f005 f9b3 	bl	80064fc <HAL_UARTEx_SetRxFifoThreshold>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800119c:	f7ff fc3a 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_USART2_UART_Init+0x90>)
 80011a2:	f005 f934 	bl	800640e <HAL_UARTEx_DisableFifoMode>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011ac:	f7ff fc32 	bl	8000a14 <Error_Handler>
  }

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000114 	.word	0x20000114
 80011b8:	40004400 	.word	0x40004400

080011bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <HAL_UART_MspInit+0x8c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12f      	bne.n	800123e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_UART_MspInit+0x90>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <HAL_UART_MspInit+0x90>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_UART_MspInit+0x90>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_MspInit+0x90>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_UART_MspInit+0x90>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_UART_MspInit+0x90>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800120e:	2318      	movs	r3, #24
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800121e:	2307      	movs	r3, #7
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <HAL_UART_MspInit+0x94>)
 800122a:	f000 fa23 	bl	8001674 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2103      	movs	r1, #3
 8001232:	2026      	movs	r0, #38	; 0x26
 8001234:	f000 f983 	bl	800153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001238:	2026      	movs	r0, #38	; 0x26
 800123a:	f000 f99a 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40004400 	.word	0x40004400
 800124c:	40021000 	.word	0x40021000
 8001250:	48000400 	.word	0x48000400

08001254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001256:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <LoopForever+0x6>)
  ldr r1, =_edata
 800125a:	490e      	ldr	r1, [pc, #56]	; (8001294 <LoopForever+0xa>)
  ldr r2, =_sidata
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <LoopForever+0xe>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001270:	4c0b      	ldr	r4, [pc, #44]	; (80012a0 <LoopForever+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800127e:	f7ff fc4f 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f005 f9e1 	bl	8006648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001286:	f7ff fb0f 	bl	80008a8 <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   r0, =_estack
 800128c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001298:	080066f0 	.word	0x080066f0
  ldr r2, =_sbss
 800129c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012a0:	200001a4 	.word	0x200001a4

080012a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_2_IRQHandler>

080012a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f939 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f80e 	bl	80012d8 <HAL_InitTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e001      	b.n	80012cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c8:	f7ff fbbc 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012cc:	79fb      	ldrb	r3, [r7, #7]

}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_InitTick+0x68>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d022      	beq.n	8001332 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_InitTick+0x6c>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_InitTick+0x68>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f944 	bl	800158e <HAL_SYSTICK_Config>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10f      	bne.n	800132c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	d809      	bhi.n	8001326 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001312:	2200      	movs	r2, #0
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	f04f 30ff 	mov.w	r0, #4294967295
 800131a:	f000 f910 	bl	800153e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_InitTick+0x70>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e007      	b.n	8001336 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e004      	b.n	8001336 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e001      	b.n	8001336 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000008 	.word	0x20000008
 8001344:	20000000 	.word	0x20000000
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x1c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x20>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4413      	add	r3, r2
 800135a:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_IncTick+0x1c>)
 800135c:	6013      	str	r3, [r2, #0]
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	200001a0 	.word	0x200001a0
 800136c:	20000008 	.word	0x20000008

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200001a0 	.word	0x200001a0

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <__NVIC_EnableIRQ+0x38>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f7ff ff8e 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff29 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff40 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff90 	bl	800147c <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5f 	bl	8001428 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff33 	bl	80013ec <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa4 	bl	80014e4 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d00d      	beq.n	80015da <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2204      	movs	r2, #4
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e047      	b.n	800166a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 020e 	bic.w	r2, r2, #14
 80015e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001608:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f003 021f 	and.w	r2, r3, #31
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001626:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00c      	beq.n	800164a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001648:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
    }
  }
  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001682:	e15a      	b.n	800193a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 814c 	beq.w	8001934 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d00b      	beq.n	80016bc <HAL_GPIO_Init+0x48>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b0:	2b11      	cmp	r3, #17
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b12      	cmp	r3, #18
 80016ba:	d130      	bne.n	800171e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f2:	2201      	movs	r2, #1
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f003 0201 	and.w	r2, r3, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0xea>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b12      	cmp	r3, #18
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	6939      	ldr	r1, [r7, #16]
 80017a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a6 	beq.w	8001934 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <HAL_GPIO_Init+0x2e4>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	4a5a      	ldr	r2, [pc, #360]	; (8001958 <HAL_GPIO_Init+0x2e4>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6613      	str	r3, [r2, #96]	; 0x60
 80017f4:	4b58      	ldr	r3, [pc, #352]	; (8001958 <HAL_GPIO_Init+0x2e4>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001800:	4a56      	ldr	r2, [pc, #344]	; (800195c <HAL_GPIO_Init+0x2e8>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800182a:	d01f      	beq.n	800186c <HAL_GPIO_Init+0x1f8>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_GPIO_Init+0x2ec>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d019      	beq.n	8001868 <HAL_GPIO_Init+0x1f4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_GPIO_Init+0x2f0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_GPIO_Init+0x1f0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a4a      	ldr	r2, [pc, #296]	; (8001968 <HAL_GPIO_Init+0x2f4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00d      	beq.n	8001860 <HAL_GPIO_Init+0x1ec>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_GPIO_Init+0x2f8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_GPIO_Init+0x1e8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a48      	ldr	r2, [pc, #288]	; (8001970 <HAL_GPIO_Init+0x2fc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001854:	2305      	movs	r3, #5
 8001856:	e00a      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001858:	2306      	movs	r3, #6
 800185a:	e008      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 800185c:	2304      	movs	r3, #4
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001860:	2303      	movs	r3, #3
 8001862:	e004      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001864:	2302      	movs	r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 800186c:	2300      	movs	r3, #0
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	f002 0203 	and.w	r2, r2, #3
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	4093      	lsls	r3, r2
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800187e:	4937      	ldr	r1, [pc, #220]	; (800195c <HAL_GPIO_Init+0x2e8>)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_GPIO_Init+0x300>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b0:	4a30      	ldr	r2, [pc, #192]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018da:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_GPIO_Init+0x300>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	f47f ae9d 	bne.w	8001684 <HAL_GPIO_Init+0x10>
  }
}
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	48000c00 	.word	0x48000c00
 800196c:	48001000 	.word	0x48001000
 8001970:	48001400 	.word	0x48001400
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fe18 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d141      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c2:	d131      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ca:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019dc:	4a41      	ldr	r2, [pc, #260]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2232      	movs	r2, #50	; 0x32
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	4a3f      	ldr	r2, [pc, #252]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0c9b      	lsrs	r3, r3, #18
 80019f6:	3301      	adds	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019fa:	e002      	b.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d102      	bne.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f2      	bne.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d158      	bne.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e057      	b.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a28:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a38:	e04d      	b.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a40:	d141      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4e:	d131      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a56:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2232      	movs	r2, #50	; 0x32
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	3301      	adds	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a86:	e002      	b.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9a:	d102      	bne.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f2      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aae:	d112      	bne.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e011      	b.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ac4:	e007      	b.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	431bde83 	.word	0x431bde83

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e308      	b.n	8002114 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d075      	beq.n	8001bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0e:	4ba3      	ldr	r3, [pc, #652]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b18:	4ba0      	ldr	r3, [pc, #640]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3e>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_OscConfig+0x44>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d10b      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	4b99      	ldr	r3, [pc, #612]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d05b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x108>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d157      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e2e3      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x74>
 8001b56:	4b91      	ldr	r3, [pc, #580]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a8a      	ldr	r2, [pc, #552]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a87      	ldr	r2, [pc, #540]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b88:	4b84      	ldr	r3, [pc, #528]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a83      	ldr	r2, [pc, #524]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b81      	ldr	r3, [pc, #516]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a80      	ldr	r2, [pc, #512]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fbe2 	bl	8001370 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fbde 	bl	8001370 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e2a8      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xc0>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fbce 	bl	8001370 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fbca 	bl	8001370 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e294      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xe8>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d075      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b65      	ldr	r3, [pc, #404]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x136>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_OscConfig+0x13c>
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d11f      	bne.n	8001c6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2c:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_OscConfig+0x154>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e267      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b55      	ldr	r3, [pc, #340]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	4952      	ldr	r1, [pc, #328]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c58:	4b51      	ldr	r3, [pc, #324]	; (8001da0 <HAL_RCC_OscConfig+0x2b0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fb3b 	bl	80012d8 <HAL_InitTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d043      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e253      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d023      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb76 	bl	8001370 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff fb72 	bl	8001370 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e23c      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	061b      	lsls	r3, r3, #24
 8001cb4:	4939      	ldr	r1, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbc:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a36      	ldr	r2, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fb52 	bl	8001370 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fb4e 	bl	8001370 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e218      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1e0>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb2b 	bl	8001370 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fb27 	bl	8001370 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1f1      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ef      	beq.n	8001d1e <HAL_RCC_OscConfig+0x22e>
 8001d3e:	e01b      	b.n	8001d78 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff fb0e 	bl	8001370 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fb0a 	bl	8001370 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1d4      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ef      	bne.n	8001d58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80ab 	beq.w	8001edc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2b4>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e005      	b.n	8001da6 <HAL_RCC_OscConfig+0x2b6>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	20000004 	.word	0x20000004
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4baf      	ldr	r3, [pc, #700]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	4aae      	ldr	r2, [pc, #696]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
 8001db6:	4bac      	ldr	r3, [pc, #688]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	4ba9      	ldr	r3, [pc, #676]	; (800206c <HAL_RCC_OscConfig+0x57c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd2:	4ba6      	ldr	r3, [pc, #664]	; (800206c <HAL_RCC_OscConfig+0x57c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4aa5      	ldr	r2, [pc, #660]	; (800206c <HAL_RCC_OscConfig+0x57c>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fac7 	bl	8001370 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7ff fac3 	bl	8001370 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e18d      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	4b9c      	ldr	r3, [pc, #624]	; (800206c <HAL_RCC_OscConfig+0x57c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_RCC_OscConfig+0x32e>
 8001e0c:	4b96      	ldr	r3, [pc, #600]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	4a95      	ldr	r2, [pc, #596]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1c:	e024      	b.n	8001e68 <HAL_RCC_OscConfig+0x378>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d110      	bne.n	8001e48 <HAL_RCC_OscConfig+0x358>
 8001e26:	4b90      	ldr	r3, [pc, #576]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2c:	4a8e      	ldr	r2, [pc, #568]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e36:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	4a8a      	ldr	r2, [pc, #552]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e46:	e00f      	b.n	8001e68 <HAL_RCC_OscConfig+0x378>
 8001e48:	4b87      	ldr	r3, [pc, #540]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a86      	ldr	r2, [pc, #536]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e58:	4b83      	ldr	r3, [pc, #524]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	4a82      	ldr	r2, [pc, #520]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d016      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff fa7e 	bl	8001370 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7ff fa7a 	bl	8001370 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e142      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ed      	beq.n	8001e78 <HAL_RCC_OscConfig+0x388>
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fa67 	bl	8001370 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7ff fa63 	bl	8001370 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e12b      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1ed      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	4a64      	ldr	r2, [pc, #400]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef0:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ef6:	4a5c      	ldr	r2, [pc, #368]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff fa36 	bl	8001370 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f08:	f7ff fa32 	bl	8001370 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0fc      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ef      	beq.n	8001f08 <HAL_RCC_OscConfig+0x418>
 8001f28:	e01b      	b.n	8001f62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f2a:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f30:	4a4d      	ldr	r2, [pc, #308]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fa19 	bl	8001370 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f42:	f7ff fa15 	bl	8001370 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0df      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f54:	4b44      	ldr	r3, [pc, #272]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ef      	bne.n	8001f42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80d3 	beq.w	8002112 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	f000 808d 	beq.w	8002094 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d15a      	bne.n	8002038 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a38      	ldr	r2, [pc, #224]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f9ef 	bl	8001370 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff f9eb 	bl	8001370 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0b5      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_OscConfig+0x580>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6a11      	ldr	r1, [r2, #32]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	4311      	orrs	r1, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fce:	0212      	lsls	r2, r2, #8
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fd6:	0852      	lsrs	r2, r2, #1
 8001fd8:	3a01      	subs	r2, #1
 8001fda:	0552      	lsls	r2, r2, #21
 8001fdc:	4311      	orrs	r1, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fe2:	0852      	lsrs	r2, r2, #1
 8001fe4:	3a01      	subs	r2, #1
 8001fe6:	0652      	lsls	r2, r2, #25
 8001fe8:	4311      	orrs	r1, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fee:	06d2      	lsls	r2, r2, #27
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	491d      	ldr	r1, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff f9ae 	bl	8001370 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f9aa 	bl	8001370 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e074      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x528>
 8002036:	e06c      	b.n	8002112 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800203e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8002056:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f986 	bl	8001370 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002066:	e00e      	b.n	8002086 <HAL_RCC_OscConfig+0x596>
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff f97c 	bl	8001370 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e046      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_RCC_OscConfig+0x62c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x584>
 8002092:	e03e      	b.n	8002112 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e039      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_RCC_OscConfig+0x62c>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d12c      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	3b01      	subs	r3, #1
 80020c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d123      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d11b      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d113      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d109      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e11e      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b91      	ldr	r3, [pc, #580]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b8e      	ldr	r3, [pc, #568]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 020f 	bic.w	r2, r3, #15
 800214e:	498c      	ldr	r1, [pc, #560]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b8a      	ldr	r3, [pc, #552]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e106      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d073      	beq.n	800225c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d129      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217c:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0f4      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800218c:	f000 f99e 	bl	80024cc <RCC_GetSysClockFreqFromPLLSource>
 8002190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4a7c      	ldr	r2, [pc, #496]	; (8002388 <HAL_RCC_ClockConfig+0x268>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d93f      	bls.n	800221a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800219a:	4b7a      	ldr	r3, [pc, #488]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d033      	beq.n	800221a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d12f      	bne.n	800221a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ba:	4b72      	ldr	r3, [pc, #456]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c2:	4a70      	ldr	r2, [pc, #448]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e024      	b.n	800221a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0c6      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e8:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0be      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021f8:	f000 f8ce 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4a61      	ldr	r2, [pc, #388]	; (8002388 <HAL_RCC_ClockConfig+0x268>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d909      	bls.n	800221a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800220e:	4a5d      	ldr	r2, [pc, #372]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4957      	ldr	r1, [pc, #348]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222c:	f7ff f8a0 	bl	8001370 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff f89c 	bl	8001370 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e095      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b4e      	ldr	r3, [pc, #312]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800227a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800227e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800228c:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002294:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800229a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4936      	ldr	r1, [pc, #216]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d21d      	bcs.n	800230c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 020f 	bic.w	r2, r3, #15
 80022d8:	4929      	ldr	r1, [pc, #164]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e0:	f7ff f846 	bl	8001370 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7ff f842 	bl	8001370 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e03b      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d1ed      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4917      	ldr	r1, [pc, #92]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	490f      	ldr	r1, [pc, #60]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234a:	f000 f825 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_RCC_ClockConfig+0x26c>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	fa21 f303 	lsr.w	r3, r1, r3
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x270>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x274>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe ffb2 	bl	80012d8 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	04c4b400 	.word	0x04c4b400
 800238c:	080066c8 	.word	0x080066c8
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800239e:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e047      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d102      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e03e      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d136      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3301      	adds	r3, #1
 80023e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ec:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	4a16      	ldr	r2, [pc, #88]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f6:	68d2      	ldr	r2, [r2, #12]
 80023f8:	0a12      	lsrs	r2, r2, #8
 80023fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	617b      	str	r3, [r7, #20]
      break;
 8002404:	e00c      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	0a12      	lsrs	r2, r2, #8
 8002414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002418:	fb02 f303 	mul.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
      break;
 800241e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0e5b      	lsrs	r3, r3, #25
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	3301      	adds	r3, #1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	e001      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002440:	693b      	ldr	r3, [r7, #16]
}
 8002442:	4618      	mov	r0, r3
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	00f42400 	.word	0x00f42400
 8002458:	007a1200 	.word	0x007a1200

0800245c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_RCC_GetHCLKFreq+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000000 	.word	0x20000000

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002478:	f7ff fff0 	bl	800245c <HAL_RCC_GetHCLKFreq>
 800247c:	4601      	mov	r1, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_RCC_GetPCLK1Freq+0x28>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	080066d8 	.word	0x080066d8

080024a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024a4:	f7ff ffda 	bl	800245c <HAL_RCC_GetHCLKFreq>
 80024a8:	4601      	mov	r1, r0
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0adb      	lsrs	r3, r3, #11
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	080066d8 	.word	0x080066d8

080024cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3301      	adds	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d10c      	bne.n	800250a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024fa:	68d2      	ldr	r2, [r2, #12]
 80024fc:	0a12      	lsrs	r2, r2, #8
 80024fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
    break;
 8002508:	e00c      	b.n	8002524 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	4a0e      	ldr	r2, [pc, #56]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002514:	68d2      	ldr	r2, [r2, #12]
 8002516:	0a12      	lsrs	r2, r2, #8
 8002518:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    break;
 8002522:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0e5b      	lsrs	r3, r3, #25
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	3301      	adds	r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800253e:	687b      	ldr	r3, [r7, #4]
}
 8002540:	4618      	mov	r0, r3
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	007a1200 	.word	0x007a1200
 8002554:	00f42400 	.word	0x00f42400

08002558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002560:	2300      	movs	r3, #0
 8002562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002564:	2300      	movs	r3, #0
 8002566:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8098 	beq.w	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257a:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b40      	ldr	r3, [pc, #256]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259e:	2301      	movs	r3, #1
 80025a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a39      	ldr	r2, [pc, #228]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025ae:	f7fe fedf 	bl	8001370 <HAL_GetTick>
 80025b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025b4:	e009      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe fedb 	bl	8001370 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d902      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	74fb      	strb	r3, [r7, #19]
        break;
 80025c8:	e005      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ca:	4b30      	ldr	r3, [pc, #192]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ef      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d159      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01e      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d019      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002602:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002614:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002624:	4a18      	ldr	r2, [pc, #96]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7fe fe9b 	bl	8001370 <HAL_GetTick>
 800263a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263c:	e00b      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe fe97 	bl	8001370 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d902      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	74fb      	strb	r3, [r7, #19]
            break;
 8002654:	e006      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ec      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10b      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002680:	e008      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	74bb      	strb	r3, [r7, #18]
 8002686:	e005      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002688:	40021000 	.word	0x40021000
 800268c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002694:	7c7b      	ldrb	r3, [r7, #17]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	4ba6      	ldr	r3, [pc, #664]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	4aa5      	ldr	r2, [pc, #660]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b2:	4ba0      	ldr	r3, [pc, #640]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	f023 0203 	bic.w	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	499c      	ldr	r1, [pc, #624]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d4:	4b97      	ldr	r3, [pc, #604]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 020c 	bic.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4994      	ldr	r1, [pc, #592]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026f6:	4b8f      	ldr	r3, [pc, #572]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	498b      	ldr	r1, [pc, #556]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002718:	4b86      	ldr	r3, [pc, #536]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	4983      	ldr	r1, [pc, #524]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800273a:	4b7e      	ldr	r3, [pc, #504]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	497a      	ldr	r1, [pc, #488]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800275c:	4b75      	ldr	r3, [pc, #468]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	4972      	ldr	r1, [pc, #456]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800277e:	4b6d      	ldr	r3, [pc, #436]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4969      	ldr	r1, [pc, #420]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027a0:	4b64      	ldr	r3, [pc, #400]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4961      	ldr	r1, [pc, #388]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027c2:	4b5c      	ldr	r3, [pc, #368]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	4958      	ldr	r1, [pc, #352]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d015      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	4950      	ldr	r1, [pc, #320]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002802:	d105      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002818:	2b00      	cmp	r3, #0
 800281a:	d015      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800281c:	4b45      	ldr	r3, [pc, #276]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	4942      	ldr	r1, [pc, #264]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283a:	d105      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a3c      	ldr	r2, [pc, #240]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002854:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4934      	ldr	r1, [pc, #208]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002872:	d105      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a2e      	ldr	r2, [pc, #184]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800288c:	4b29      	ldr	r3, [pc, #164]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	4926      	ldr	r1, [pc, #152]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028aa:	d105      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ac:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	4918      	ldr	r1, [pc, #96]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e2:	d105      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a12      	ldr	r2, [pc, #72]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800291a:	d105      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002926:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002928:	7cbb      	ldrb	r3, [r7, #18]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000

08002938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e049      	b.n	80029de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fada 	bl	8000f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 fe26 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e049      	b.n	8002a8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f841 	bl	8002a94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2202      	movs	r2, #2
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f000 fdcf 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e049      	b.n	8002b4e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f841 	bl	8002b56 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fd6e 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_IC_Start+0x1a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	e023      	b.n	8002bce <HAL_TIM_IC_Start+0x62>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_IC_Start+0x2a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	e01b      	b.n	8002bce <HAL_TIM_IC_Start+0x62>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_IC_Start+0x3a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	e013      	b.n	8002bce <HAL_TIM_IC_Start+0x62>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_IC_Start+0x4a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e00b      	b.n	8002bce <HAL_TIM_IC_Start+0x62>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_IC_Start+0x5a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e003      	b.n	8002bce <HAL_TIM_IC_Start+0x62>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d104      	bne.n	8002be0 <HAL_TIM_IC_Start+0x74>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e013      	b.n	8002c08 <HAL_TIM_IC_Start+0x9c>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d104      	bne.n	8002bf0 <HAL_TIM_IC_Start+0x84>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e00b      	b.n	8002c08 <HAL_TIM_IC_Start+0x9c>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d104      	bne.n	8002c00 <HAL_TIM_IC_Start+0x94>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e003      	b.n	8002c08 <HAL_TIM_IC_Start+0x9c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d102      	bne.n	8002c16 <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c10:	7bbb      	ldrb	r3, [r7, #14]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d001      	beq.n	8002c1a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e064      	b.n	8002ce4 <HAL_TIM_IC_Start+0x178>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <HAL_TIM_IC_Start+0xbe>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c28:	e023      	b.n	8002c72 <HAL_TIM_IC_Start+0x106>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d104      	bne.n	8002c3a <HAL_TIM_IC_Start+0xce>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c38:	e01b      	b.n	8002c72 <HAL_TIM_IC_Start+0x106>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d104      	bne.n	8002c4a <HAL_TIM_IC_Start+0xde>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c48:	e013      	b.n	8002c72 <HAL_TIM_IC_Start+0x106>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d104      	bne.n	8002c5a <HAL_TIM_IC_Start+0xee>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c58:	e00b      	b.n	8002c72 <HAL_TIM_IC_Start+0x106>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d104      	bne.n	8002c6a <HAL_TIM_IC_Start+0xfe>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c68:	e003      	b.n	8002c72 <HAL_TIM_IC_Start+0x106>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_IC_Start+0x116>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c80:	e013      	b.n	8002caa <HAL_TIM_IC_Start+0x13e>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_IC_Start+0x126>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c90:	e00b      	b.n	8002caa <HAL_TIM_IC_Start+0x13e>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_IC_Start+0x136>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ca0:	e003      	b.n	8002caa <HAL_TIM_IC_Start+0x13e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	6839      	ldr	r1, [r7, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 fa78 	bl	80041a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_TIM_IC_Start+0x180>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_TIM_IC_Start+0x176>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d007      	beq.n	8002ce2 <HAL_TIM_IC_Start+0x176>
  {
    __HAL_TIM_ENABLE(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	00010007 	.word	0x00010007

08002cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d122      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d11b      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0202 	mvn.w	r2, #2
 8002d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fdaa 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fc26 	bl	800358c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fc2d 	bl	80035a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d122      	bne.n	8002da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0204 	mvn.w	r2, #4
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fd80 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fbfc 	bl	800358c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fc03 	bl	80035a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0208 	mvn.w	r2, #8
 8002dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2204      	movs	r2, #4
 8002dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fd fd56 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fbd2 	bl	800358c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fbd9 	bl	80035a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d122      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d11b      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0210 	mvn.w	r2, #16
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fd fd2c 	bl	800088c <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fba8 	bl	800358c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fbaf 	bl	80035a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0201 	mvn.w	r2, #1
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fb82 	bl	8003578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7e:	2b80      	cmp	r3, #128	; 0x80
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f001 fd2c 	bl	80048f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eae:	d10e      	bne.n	8002ece <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	2b80      	cmp	r3, #128	; 0x80
 8002ebc:	d107      	bne.n	8002ece <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f001 fd1f 	bl	800490c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d10e      	bne.n	8002efa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d107      	bne.n	8002efa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fb5d 	bl	80035b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d10e      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d107      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0220 	mvn.w	r2, #32
 8002f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7fd fb8f 	bl	8000644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f34:	d10f      	bne.n	8002f56 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f44:	d107      	bne.n	8002f56 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f001 fce5 	bl	8004920 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f64:	d10f      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f74:	d107      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f001 fcd7 	bl	8004934 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f94:	d10f      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa4:	d107      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f001 fcc9 	bl	8004948 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fd4:	d107      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f001 fcbb 	bl	800495c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003004:	2302      	movs	r3, #2
 8003006:	e082      	b.n	800310e <HAL_TIM_IC_ConfigChannel+0x120>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11b      	bne.n	800304e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f000 ff05 	bl	8003e34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 020c 	bic.w	r2, r2, #12
 8003038:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6999      	ldr	r1, [r3, #24]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	619a      	str	r2, [r3, #24]
 800304c:	e05a      	b.n	8003104 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d11c      	bne.n	800308e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f000 ff7d 	bl	8003f62 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003076:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6999      	ldr	r1, [r3, #24]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	021a      	lsls	r2, r3, #8
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]
 800308c:	e03a      	b.n	8003104 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f000 ffca 	bl	800403c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 020c 	bic.w	r2, r2, #12
 80030b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69d9      	ldr	r1, [r3, #28]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	61da      	str	r2, [r3, #28]
 80030ca:	e01b      	b.n	8003104 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	6819      	ldr	r1, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f000 ffea 	bl	80040b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69d9      	ldr	r1, [r3, #28]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	021a      	lsls	r2, r3, #8
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800312e:	2302      	movs	r3, #2
 8003130:	e0fd      	b.n	800332e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b14      	cmp	r3, #20
 800313e:	f200 80f0 	bhi.w	8003322 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800319d 	.word	0x0800319d
 800314c:	08003323 	.word	0x08003323
 8003150:	08003323 	.word	0x08003323
 8003154:	08003323 	.word	0x08003323
 8003158:	080031dd 	.word	0x080031dd
 800315c:	08003323 	.word	0x08003323
 8003160:	08003323 	.word	0x08003323
 8003164:	08003323 	.word	0x08003323
 8003168:	0800321f 	.word	0x0800321f
 800316c:	08003323 	.word	0x08003323
 8003170:	08003323 	.word	0x08003323
 8003174:	08003323 	.word	0x08003323
 8003178:	0800325f 	.word	0x0800325f
 800317c:	08003323 	.word	0x08003323
 8003180:	08003323 	.word	0x08003323
 8003184:	08003323 	.word	0x08003323
 8003188:	080032a1 	.word	0x080032a1
 800318c:	08003323 	.word	0x08003323
 8003190:	08003323 	.word	0x08003323
 8003194:	08003323 	.word	0x08003323
 8003198:	080032e1 	.word	0x080032e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 faa0 	bl	80036e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0208 	orr.w	r2, r2, #8
 80031b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6999      	ldr	r1, [r3, #24]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	619a      	str	r2, [r3, #24]
      break;
 80031da:	e0a3      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fb10 	bl	8003808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6999      	ldr	r1, [r3, #24]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	021a      	lsls	r2, r3, #8
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	619a      	str	r2, [r3, #24]
      break;
 800321c:	e082      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fb79 	bl	800391c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0208 	orr.w	r2, r2, #8
 8003238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0204 	bic.w	r2, r2, #4
 8003248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69d9      	ldr	r1, [r3, #28]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	61da      	str	r2, [r3, #28]
      break;
 800325c:	e062      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fbe1 	bl	8003a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	021a      	lsls	r2, r3, #8
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	61da      	str	r2, [r3, #28]
      break;
 800329e:	e041      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fc4a 	bl	8003b40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0208 	orr.w	r2, r2, #8
 80032ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0204 	bic.w	r2, r2, #4
 80032ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80032de:	e021      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fc8e 	bl	8003c08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	021a      	lsls	r2, r3, #8
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003320:	e000      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003322:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop

08003338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIM_ConfigClockSource+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e0c3      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x1a0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800336e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800337a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b70      	cmp	r3, #112	; 0x70
 800338a:	d038      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0xc6>
 800338c:	2b70      	cmp	r3, #112	; 0x70
 800338e:	d815      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x84>
 8003390:	2b30      	cmp	r3, #48	; 0x30
 8003392:	f000 808e 	beq.w	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
 8003396:	2b30      	cmp	r3, #48	; 0x30
 8003398:	d809      	bhi.n	80033ae <HAL_TIM_ConfigClockSource+0x76>
 800339a:	2b10      	cmp	r3, #16
 800339c:	f000 8089 	beq.w	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	f000 8086 	beq.w	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8083 	beq.w	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033ac:	e08b      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80033ae:	2b50      	cmp	r3, #80	; 0x50
 80033b0:	d04f      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x11a>
 80033b2:	2b60      	cmp	r3, #96	; 0x60
 80033b4:	d05d      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x13a>
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d06b      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80033ba:	e084      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80033bc:	4a48      	ldr	r2, [pc, #288]	; (80034e0 <HAL_TIM_ConfigClockSource+0x1a8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d077      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
 80033c2:	4a47      	ldr	r2, [pc, #284]	; (80034e0 <HAL_TIM_ConfigClockSource+0x1a8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d809      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0xa4>
 80033c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033cc:	d02e      	beq.n	800342c <HAL_TIM_ConfigClockSource+0xf4>
 80033ce:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80033d2:	d06e      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	d074      	beq.n	80034c4 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80033da:	e074      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80033dc:	4a41      	ldr	r2, [pc, #260]	; (80034e4 <HAL_TIM_ConfigClockSource+0x1ac>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d067      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
 80033e2:	4a40      	ldr	r2, [pc, #256]	; (80034e4 <HAL_TIM_ConfigClockSource+0x1ac>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d803      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0xb8>
 80033e8:	4a3f      	ldr	r2, [pc, #252]	; (80034e8 <HAL_TIM_ConfigClockSource+0x1b0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d061      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80033ee:	e06a      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80033f0:	4a3e      	ldr	r2, [pc, #248]	; (80034ec <HAL_TIM_ConfigClockSource+0x1b4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d05d      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
 80033f6:	4a3e      	ldr	r2, [pc, #248]	; (80034f0 <HAL_TIM_ConfigClockSource+0x1b8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d05a      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80033fc:	e063      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6899      	ldr	r1, [r3, #8]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f000 feab 	bl	8004168 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003420:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	609a      	str	r2, [r3, #8]
      break;
 800342a:	e04c      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6899      	ldr	r1, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f000 fe94 	bl	8004168 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800344e:	609a      	str	r2, [r3, #8]
      break;
 8003450:	e039      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	461a      	mov	r2, r3
 8003460:	f000 fd50 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2150      	movs	r1, #80	; 0x50
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fe5f 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003470:	e029      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	461a      	mov	r2, r3
 8003480:	f000 fdac 	bl	8003fdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2160      	movs	r1, #96	; 0x60
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fe4f 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003490:	e019      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	461a      	mov	r2, r3
 80034a0:	f000 fd30 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2140      	movs	r1, #64	; 0x40
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fe3f 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 80034b0:	e009      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f000 fe36 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 80034c2:	e000      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80034c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	00100020 	.word	0x00100020
 80034e4:	00100040 	.word	0x00100040
 80034e8:	00100030 	.word	0x00100030
 80034ec:	00100060 	.word	0x00100060
 80034f0:	00100070 	.word	0x00100070

080034f4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003508:	2302      	movs	r3, #2
 800350a:	e031      	b.n	8003570 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800351c:	6839      	ldr	r1, [r7, #0]
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fbd8 	bl	8003cd4 <TIM_SlaveTimer_SetConfig>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e018      	b.n	8003570 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800355c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3c      	ldr	r2, [pc, #240]	; (80036cc <TIM_Base_SetConfig+0x104>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00f      	beq.n	8003600 <TIM_Base_SetConfig+0x38>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d00b      	beq.n	8003600 <TIM_Base_SetConfig+0x38>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a39      	ldr	r2, [pc, #228]	; (80036d0 <TIM_Base_SetConfig+0x108>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <TIM_Base_SetConfig+0x38>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a38      	ldr	r2, [pc, #224]	; (80036d4 <TIM_Base_SetConfig+0x10c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_Base_SetConfig+0x38>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a37      	ldr	r2, [pc, #220]	; (80036d8 <TIM_Base_SetConfig+0x110>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2d      	ldr	r2, [pc, #180]	; (80036cc <TIM_Base_SetConfig+0x104>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01b      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d017      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2a      	ldr	r2, [pc, #168]	; (80036d0 <TIM_Base_SetConfig+0x108>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <TIM_Base_SetConfig+0x10c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00f      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a28      	ldr	r2, [pc, #160]	; (80036d8 <TIM_Base_SetConfig+0x110>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00b      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a27      	ldr	r2, [pc, #156]	; (80036dc <TIM_Base_SetConfig+0x114>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d007      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <TIM_Base_SetConfig+0x118>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d003      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <TIM_Base_SetConfig+0x11c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d108      	bne.n	8003664 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a10      	ldr	r2, [pc, #64]	; (80036cc <TIM_Base_SetConfig+0x104>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00f      	beq.n	80036b0 <TIM_Base_SetConfig+0xe8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <TIM_Base_SetConfig+0x110>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00b      	beq.n	80036b0 <TIM_Base_SetConfig+0xe8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <TIM_Base_SetConfig+0x114>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <TIM_Base_SetConfig+0xe8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <TIM_Base_SetConfig+0x118>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_Base_SetConfig+0xe8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a0e      	ldr	r2, [pc, #56]	; (80036e4 <TIM_Base_SetConfig+0x11c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d103      	bne.n	80036b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	615a      	str	r2, [r3, #20]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40013400 	.word	0x40013400
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800

080036e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0201 	bic.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 0302 	bic.w	r3, r3, #2
 8003734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <TIM_OC1_SetConfig+0x10c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00f      	beq.n	8003768 <TIM_OC1_SetConfig+0x80>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <TIM_OC1_SetConfig+0x110>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00b      	beq.n	8003768 <TIM_OC1_SetConfig+0x80>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <TIM_OC1_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d007      	beq.n	8003768 <TIM_OC1_SetConfig+0x80>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a29      	ldr	r2, [pc, #164]	; (8003800 <TIM_OC1_SetConfig+0x118>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_OC1_SetConfig+0x80>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a28      	ldr	r2, [pc, #160]	; (8003804 <TIM_OC1_SetConfig+0x11c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10c      	bne.n	8003782 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0308 	bic.w	r3, r3, #8
 800376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <TIM_OC1_SetConfig+0x10c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00f      	beq.n	80037aa <TIM_OC1_SetConfig+0xc2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a1a      	ldr	r2, [pc, #104]	; (80037f8 <TIM_OC1_SetConfig+0x110>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00b      	beq.n	80037aa <TIM_OC1_SetConfig+0xc2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <TIM_OC1_SetConfig+0x114>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <TIM_OC1_SetConfig+0xc2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a18      	ldr	r2, [pc, #96]	; (8003800 <TIM_OC1_SetConfig+0x118>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_OC1_SetConfig+0xc2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a17      	ldr	r2, [pc, #92]	; (8003804 <TIM_OC1_SetConfig+0x11c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d111      	bne.n	80037ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40013400 	.word	0x40013400
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800

08003808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f023 0210 	bic.w	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f023 0320 	bic.w	r3, r3, #32
 8003856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a28      	ldr	r2, [pc, #160]	; (8003908 <TIM_OC2_SetConfig+0x100>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_OC2_SetConfig+0x6c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a27      	ldr	r2, [pc, #156]	; (800390c <TIM_OC2_SetConfig+0x104>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d10d      	bne.n	8003890 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800387a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800388e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <TIM_OC2_SetConfig+0x100>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00f      	beq.n	80038b8 <TIM_OC2_SetConfig+0xb0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <TIM_OC2_SetConfig+0x104>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_OC2_SetConfig+0xb0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <TIM_OC2_SetConfig+0x108>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_OC2_SetConfig+0xb0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <TIM_OC2_SetConfig+0x10c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_OC2_SetConfig+0xb0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a19      	ldr	r2, [pc, #100]	; (8003918 <TIM_OC2_SetConfig+0x110>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d113      	bne.n	80038e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40013400 	.word	0x40013400
 8003910:	40014000 	.word	0x40014000
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800

0800391c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a27      	ldr	r2, [pc, #156]	; (8003a18 <TIM_OC3_SetConfig+0xfc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_OC3_SetConfig+0x6a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <TIM_OC3_SetConfig+0x100>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10d      	bne.n	80039a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800398c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <TIM_OC3_SetConfig+0xfc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00f      	beq.n	80039ca <TIM_OC3_SetConfig+0xae>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <TIM_OC3_SetConfig+0x100>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_OC3_SetConfig+0xae>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <TIM_OC3_SetConfig+0x104>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_OC3_SetConfig+0xae>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <TIM_OC3_SetConfig+0x108>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_OC3_SetConfig+0xae>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <TIM_OC3_SetConfig+0x10c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d113      	bne.n	80039f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	621a      	str	r2, [r3, #32]
}
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40013400 	.word	0x40013400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800

08003a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	031b      	lsls	r3, r3, #12
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <TIM_OC4_SetConfig+0x100>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_OC4_SetConfig+0x6c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <TIM_OC4_SetConfig+0x104>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10d      	bne.n	8003ab4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	031b      	lsls	r3, r3, #12
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <TIM_OC4_SetConfig+0x100>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00f      	beq.n	8003adc <TIM_OC4_SetConfig+0xb0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <TIM_OC4_SetConfig+0x104>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <TIM_OC4_SetConfig+0xb0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	; (8003b34 <TIM_OC4_SetConfig+0x108>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_OC4_SetConfig+0xb0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a1a      	ldr	r2, [pc, #104]	; (8003b38 <TIM_OC4_SetConfig+0x10c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_OC4_SetConfig+0xb0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a19      	ldr	r2, [pc, #100]	; (8003b3c <TIM_OC4_SetConfig+0x110>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d113      	bne.n	8003b04 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003aea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	019b      	lsls	r3, r3, #6
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	621a      	str	r2, [r3, #32]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40013400 	.word	0x40013400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800

08003b40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <TIM_OC5_SetConfig+0xb4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00f      	beq.n	8003bba <TIM_OC5_SetConfig+0x7a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <TIM_OC5_SetConfig+0xb8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <TIM_OC5_SetConfig+0x7a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <TIM_OC5_SetConfig+0xbc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <TIM_OC5_SetConfig+0x7a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <TIM_OC5_SetConfig+0xc0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_OC5_SetConfig+0x7a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <TIM_OC5_SetConfig+0xc4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d109      	bne.n	8003bce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	621a      	str	r2, [r3, #32]
}
 8003be8:	bf00      	nop
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40013400 	.word	0x40013400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800

08003c08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	051b      	lsls	r3, r3, #20
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <TIM_OC6_SetConfig+0xb8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00f      	beq.n	8003c84 <TIM_OC6_SetConfig+0x7c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <TIM_OC6_SetConfig+0xbc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00b      	beq.n	8003c84 <TIM_OC6_SetConfig+0x7c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <TIM_OC6_SetConfig+0xc0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d007      	beq.n	8003c84 <TIM_OC6_SetConfig+0x7c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <TIM_OC6_SetConfig+0xc4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_OC6_SetConfig+0x7c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <TIM_OC6_SetConfig+0xc8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d109      	bne.n	8003c98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	029b      	lsls	r3, r3, #10
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40013400 	.word	0x40013400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800

08003cd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d02:	f023 0307 	bic.w	r3, r3, #7
 8003d06:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b60      	cmp	r3, #96	; 0x60
 8003d20:	d06d      	beq.n	8003dfe <TIM_SlaveTimer_SetConfig+0x12a>
 8003d22:	2b60      	cmp	r3, #96	; 0x60
 8003d24:	d80f      	bhi.n	8003d46 <TIM_SlaveTimer_SetConfig+0x72>
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d073      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d804      	bhi.n	8003d38 <TIM_SlaveTimer_SetConfig+0x64>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06f      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d06d      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8003d36:	e06d      	b.n	8003e14 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d028      	beq.n	8003d8e <TIM_SlaveTimer_SetConfig+0xba>
 8003d3c:	2b50      	cmp	r3, #80	; 0x50
 8003d3e:	d054      	beq.n	8003dea <TIM_SlaveTimer_SetConfig+0x116>
 8003d40:	2b30      	cmp	r3, #48	; 0x30
 8003d42:	d066      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003d44:	e066      	b.n	8003e14 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003d46:	4a36      	ldr	r2, [pc, #216]	; (8003e20 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d062      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003d4c:	4a34      	ldr	r2, [pc, #208]	; (8003e20 <TIM_SlaveTimer_SetConfig+0x14c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d808      	bhi.n	8003d64 <TIM_SlaveTimer_SetConfig+0x90>
 8003d52:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d56:	d05c      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003d58:	4a32      	ldr	r2, [pc, #200]	; (8003e24 <TIM_SlaveTimer_SetConfig+0x150>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d059      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003d5e:	2b70      	cmp	r3, #112	; 0x70
 8003d60:	d00a      	beq.n	8003d78 <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8003d62:	e057      	b.n	8003e14 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8003d64:	4a30      	ldr	r2, [pc, #192]	; (8003e28 <TIM_SlaveTimer_SetConfig+0x154>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d053      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003d6a:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <TIM_SlaveTimer_SetConfig+0x158>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d050      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
 8003d70:	4a2f      	ldr	r2, [pc, #188]	; (8003e30 <TIM_SlaveTimer_SetConfig+0x15c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d04d      	beq.n	8003e12 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8003d76:	e04d      	b.n	8003e14 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68d9      	ldr	r1, [r3, #12]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f000 f9ee 	bl	8004168 <TIM_ETR_SetConfig>
      break;
 8003d8c:	e042      	b.n	8003e14 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d004      	beq.n	8003da0 <TIM_SlaveTimer_SetConfig+0xcc>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003d9e:	d101      	bne.n	8003da4 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e038      	b.n	8003e16 <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dca:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	621a      	str	r2, [r3, #32]
      break;
 8003de8:	e014      	b.n	8003e14 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6899      	ldr	r1, [r3, #8]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f000 f884 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      break;
 8003dfc:	e00a      	b.n	8003e14 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6899      	ldr	r1, [r3, #8]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f000 f8e6 	bl	8003fdc <TIM_TI2_ConfigInputStage>
      break;
 8003e10:	e000      	b.n	8003e14 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8003e12:	bf00      	nop
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	00100030 	.word	0x00100030
 8003e24:	00100020 	.word	0x00100020
 8003e28:	00100060 	.word	0x00100060
 8003e2c:	00100070 	.word	0x00100070
 8003e30:	00100040 	.word	0x00100040

08003e34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f023 0201 	bic.w	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <TIM_TI1_SetConfig+0xbc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <TIM_TI1_SetConfig+0x56>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d00f      	beq.n	8003e8a <TIM_TI1_SetConfig+0x56>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <TIM_TI1_SetConfig+0xc0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00b      	beq.n	8003e8a <TIM_TI1_SetConfig+0x56>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a20      	ldr	r2, [pc, #128]	; (8003ef8 <TIM_TI1_SetConfig+0xc4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <TIM_TI1_SetConfig+0x56>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <TIM_TI1_SetConfig+0xc8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d003      	beq.n	8003e8a <TIM_TI1_SetConfig+0x56>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <TIM_TI1_SetConfig+0xcc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <TIM_TI1_SetConfig+0x5a>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <TIM_TI1_SetConfig+0x5c>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e003      	b.n	8003eae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f023 030a 	bic.w	r3, r3, #10
 8003ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f003 030a 	and.w	r3, r3, #10
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40013400 	.word	0x40013400
 8003f00:	40014000 	.word	0x40014000

08003f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0201 	bic.w	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 030a 	bic.w	r3, r3, #10
 8003f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f023 0210 	bic.w	r2, r3, #16
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	031b      	lsls	r3, r3, #12
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	621a      	str	r2, [r3, #32]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f023 0210 	bic.w	r2, r3, #16
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004006:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	031b      	lsls	r3, r3, #12
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004018:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	621a      	str	r2, [r3, #32]
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 0303 	bic.w	r3, r3, #3
 8004068:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004078:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	b2db      	uxtb	r3, r3
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800408c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	031b      	lsls	r3, r3, #12
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004106:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	031b      	lsls	r3, r3, #12
 800410c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	f043 0307 	orr.w	r3, r3, #7
 8004154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	021a      	lsls	r2, r3, #8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	431a      	orrs	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4313      	orrs	r3, r2
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	609a      	str	r2, [r3, #8]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	2201      	movs	r2, #1
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1a      	ldr	r2, [r3, #32]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	401a      	ands	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1a      	ldr	r2, [r3, #32]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	fa01 f303 	lsl.w	r3, r1, r3
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b08a      	sub	sp, #40	; 0x28
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0a0      	b.n	8004348 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f898 	bl	8004350 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f7ff f9c8 	bl	80035c8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2203      	movs	r2, #3
 8004246:	f7ff fdf5 	bl	8003e34 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 020c 	bic.w	r2, r2, #12
 8004258:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6999      	ldr	r1, [r3, #24]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800427a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800429e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	f023 0307 	bic.w	r3, r3, #7
 80042b2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0204 	orr.w	r2, r2, #4
 80042c2:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042c8:	2300      	movs	r3, #0
 80042ca:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80042cc:	2370      	movs	r3, #112	; 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f107 020c 	add.w	r2, r7, #12
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fa8b 	bl	8003808 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004304:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004314:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3728      	adds	r7, #40	; 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004372:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800437a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004382:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800438a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d108      	bne.n	80043a4 <HAL_TIMEx_HallSensor_Start+0x40>
   || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004392:	7bbb      	ldrb	r3, [r7, #14]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d105      	bne.n	80043a4 <HAL_TIMEx_HallSensor_Start+0x40>
   || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004398:	7b7b      	ldrb	r3, [r7, #13]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_TIMEx_HallSensor_Start+0x40>
   || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800439e:	7b3b      	ldrb	r3, [r7, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e02c      	b.n	8004402 <HAL_TIMEx_HallSensor_Start+0x9e>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fee9 	bl	80041a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_TIMEx_HallSensor_Start+0xa8>)
 80043de:	4013      	ands	r3, r2
 80043e0:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b06      	cmp	r3, #6
 80043e6:	d00b      	beq.n	8004400 <HAL_TIMEx_HallSensor_Start+0x9c>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ee:	d007      	beq.n	8004400 <HAL_TIMEx_HallSensor_Start+0x9c>
  {
    __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	00010007 	.word	0x00010007

08004410 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <HAL_TIMEx_PWMN_Start_IT+0x24>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e022      	b.n	800447a <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b04      	cmp	r3, #4
 8004438:	d109      	bne.n	800444e <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	bf14      	ite	ne
 8004446:	2301      	movne	r3, #1
 8004448:	2300      	moveq	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	e015      	b.n	800447a <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d109      	bne.n	8004468 <HAL_TIMEx_PWMN_Start_IT+0x58>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	e008      	b.n	800447a <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e08e      	b.n	80045a0 <HAL_TIMEx_PWMN_Start_IT+0x190>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <HAL_TIMEx_PWMN_Start_IT+0x82>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004490:	e013      	b.n	80044ba <HAL_TIMEx_PWMN_Start_IT+0xaa>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b04      	cmp	r3, #4
 8004496:	d104      	bne.n	80044a2 <HAL_TIMEx_PWMN_Start_IT+0x92>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a0:	e00b      	b.n	80044ba <HAL_TIMEx_PWMN_Start_IT+0xaa>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d104      	bne.n	80044b2 <HAL_TIMEx_PWMN_Start_IT+0xa2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044b0:	e003      	b.n	80044ba <HAL_TIMEx_PWMN_Start_IT+0xaa>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b0c      	cmp	r3, #12
 80044be:	d841      	bhi.n	8004544 <HAL_TIMEx_PWMN_Start_IT+0x134>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <HAL_TIMEx_PWMN_Start_IT+0xb8>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	08004545 	.word	0x08004545
 80044d0:	08004545 	.word	0x08004545
 80044d4:	08004545 	.word	0x08004545
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	08004545 	.word	0x08004545
 80044e0:	08004545 	.word	0x08004545
 80044e4:	08004545 	.word	0x08004545
 80044e8:	08004521 	.word	0x08004521
 80044ec:	08004545 	.word	0x08004545
 80044f0:	08004545 	.word	0x08004545
 80044f4:	08004545 	.word	0x08004545
 80044f8:	08004533 	.word	0x08004533
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0202 	orr.w	r2, r2, #2
 800450a:	60da      	str	r2, [r3, #12]
      break;
 800450c:	e01b      	b.n	8004546 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0204 	orr.w	r2, r2, #4
 800451c:	60da      	str	r2, [r3, #12]
      break;
 800451e:	e012      	b.n	8004546 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0208 	orr.w	r2, r2, #8
 800452e:	60da      	str	r2, [r3, #12]
      break;
 8004530:	e009      	b.n	8004546 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0210 	orr.w	r2, r2, #16
 8004540:	60da      	str	r2, [r3, #12]
      break;
 8004542:	e000      	b.n	8004546 <HAL_TIMEx_PWMN_Start_IT+0x136>
    }

    default:
      break;
 8004544:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004554:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2204      	movs	r2, #4
 800455c:	6839      	ldr	r1, [r7, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fa06 	bl	8004970 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004572:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_TIMEx_PWMN_Start_IT+0x198>)
 800457c:	4013      	ands	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b06      	cmp	r3, #6
 8004584:	d00b      	beq.n	800459e <HAL_TIMEx_PWMN_Start_IT+0x18e>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d007      	beq.n	800459e <HAL_TIMEx_PWMN_Start_IT+0x18e>
  {
    __HAL_TIM_ENABLE(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0201 	orr.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	00010007 	.word	0x00010007

080045ac <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE(htim->Instance, InputTrigger));

  __HAL_LOCK(htim);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e066      	b.n	8004694 <HAL_TIMEx_ConfigCommutEvent_IT+0xe8>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      (InputTrigger == TIM_TS_ITR4)  || (InputTrigger == TIM_TS_ITR5) ||
      (InputTrigger == TIM_TS_ITR6)  || (InputTrigger == TIM_TS_ITR7) ||
      (InputTrigger == TIM_TS_ITR8)  || (InputTrigger == TIM_TS_ITR10) ||
      (InputTrigger == TIM_TS_ITR11))
#else
  if ((InputTrigger == TIM_TS_ITR0)  || (InputTrigger == TIM_TS_ITR1) ||
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	d01d      	beq.n	8004616 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d01a      	beq.n	8004616 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR2)  || (InputTrigger == TIM_TS_ITR3) ||
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b30      	cmp	r3, #48	; 0x30
 80045e4:	d017      	beq.n	8004616 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045ec:	d013      	beq.n	8004616 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR5)  || (InputTrigger == TIM_TS_ITR6) ||
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <HAL_TIMEx_ConfigCommutEvent_IT+0xf4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00f      	beq.n	8004616 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <HAL_TIMEx_ConfigCommutEvent_IT+0xf8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00b      	beq.n	8004616 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR7)  || (InputTrigger == TIM_TS_ITR8) ||
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <HAL_TIMEx_ConfigCommutEvent_IT+0xfc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d007      	beq.n	8004616 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a28      	ldr	r2, [pc, #160]	; (80046ac <HAL_TIMEx_ConfigCommutEvent_IT+0x100>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d003      	beq.n	8004616 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
      (InputTrigger == TIM_TS_ITR10) || (InputTrigger == TIM_TS_ITR11))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4a27      	ldr	r2, [pc, #156]	; (80046b0 <HAL_TIMEx_ConfigCommutEvent_IT+0x104>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d111      	bne.n	800463a <HAL_TIMEx_ConfigCommutEvent_IT+0x8e>
#endif /* TIM5 && TIM20 */
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	6093      	str	r3, [r2, #8]
    htim->Instance->SMCR |= InputTrigger;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6899      	ldr	r1, [r3, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0204 	bic.w	r2, r2, #4
 8004658:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6859      	ldr	r1, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004678:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0220 	orr.w	r2, r2, #32
 8004688:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	00100020 	.word	0x00100020
 80046a4:	00100030 	.word	0x00100030
 80046a8:	00100040 	.word	0x00100040
 80046ac:	00100060 	.word	0x00100060
 80046b0:	00100070 	.word	0x00100070

080046b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e065      	b.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2c      	ldr	r2, [pc, #176]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a2b      	ldr	r2, [pc, #172]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d108      	bne.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004706:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1b      	ldr	r2, [pc, #108]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d018      	beq.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004742:	d013      	beq.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d10c      	bne.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	4313      	orrs	r3, r2
 800477c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	40013400 	.word	0x40013400
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40000800 	.word	0x40000800
 80047b4:	40014000 	.word	0x40014000

080047b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e087      	b.n	80048e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a25      	ldr	r2, [pc, #148]	; (80048f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d106      	bne.n	8004870 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d126      	bne.n	80048d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	051b      	lsls	r3, r3, #20
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0e      	ldr	r2, [pc, #56]	; (80048f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d106      	bne.n	80048d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40013400 	.word	0x40013400

080048f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	2204      	movs	r2, #4
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1a      	ldr	r2, [r3, #32]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	43db      	mvns	r3, r3
 8004992:	401a      	ands	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1a      	ldr	r2, [r3, #32]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	fa01 f303 	lsl.w	r3, r1, r3
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e042      	b.n	8004a52 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fc fbec 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2224      	movs	r2, #36	; 0x24
 80049e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f9a7 	bl	8004d50 <UART_SetConfig>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e022      	b.n	8004a52 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fb55 	bl	80060c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f001 fbdc 	bl	8006208 <UART_CheckIdleState>
 8004a50:	4603      	mov	r3, r0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d118      	bne.n	8004abc <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d013      	beq.n	8004abc <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 812e 	beq.w	8004d0e <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
      }
      return;
 8004aba:	e128      	b.n	8004d0e <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80d1 	beq.w	8004c66 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4b96      	ldr	r3, [pc, #600]	; (8004d20 <HAL_UART_IRQHandler+0x2c4>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d105      	bne.n	8004ada <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80c6 	beq.w	8004c66 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <HAL_UART_IRQHandler+0xaa>
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00b      	beq.n	8004b06 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2201      	movs	r2, #1
 8004af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f043 0201 	orr.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d010      	beq.n	8004b32 <HAL_UART_IRQHandler+0xd6>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f043 0204 	orr.w	r2, r3, #4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d010      	beq.n	8004b5e <HAL_UART_IRQHandler+0x102>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f043 0202 	orr.w	r2, r3, #2
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d015      	beq.n	8004b94 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d104      	bne.n	8004b7c <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4b6a      	ldr	r3, [pc, #424]	; (8004d20 <HAL_UART_IRQHandler+0x2c4>)
 8004b76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2208      	movs	r2, #8
 8004b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	f043 0208 	orr.w	r2, r3, #8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80b9 	beq.w	8004d12 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d011      	beq.n	8004bce <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d104      	bne.n	8004bbe <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d004      	beq.n	8004bee <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d031      	beq.n	8004c52 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f001 fb9c 	bl	800632c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d123      	bne.n	8004c4a <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d013      	beq.n	8004c42 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c1e:	4a41      	ldr	r2, [pc, #260]	; (8004d24 <HAL_UART_IRQHandler+0x2c8>)
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fc fcbd 	bl	80015a6 <HAL_DMA_Abort_IT>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d017      	beq.n	8004c62 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e00f      	b.n	8004c62 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f87a 	bl	8004d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	e00b      	b.n	8004c62 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f876 	bl	8004d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e007      	b.n	8004c62 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f872 	bl	8004d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004c60:	e057      	b.n	8004d12 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c62:	bf00      	nop
    return;
 8004c64:	e055      	b.n	8004d12 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00d      	beq.n	8004c8c <HAL_UART_IRQHandler+0x230>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f001 fba4 	bl	80063d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c8a:	e045      	b.n	8004d18 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d012      	beq.n	8004cbc <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d008      	beq.n	8004cbc <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d031      	beq.n	8004d16 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
    }
    return;
 8004cba:	e02c      	b.n	8004d16 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d008      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x27c>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 fb64 	bl	800639e <UART_EndTransmit_IT>
    return;
 8004cd6:	e01f      	b.n	8004d18 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x298>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f001 fb84 	bl	80063fa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cf2:	e011      	b.n	8004d18 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_UART_IRQHandler+0x2bc>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	da09      	bge.n	8004d18 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f001 fb6e 	bl	80063e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d0a:	bf00      	nop
 8004d0c:	e004      	b.n	8004d18 <HAL_UART_IRQHandler+0x2bc>
      return;
 8004d0e:	bf00      	nop
 8004d10:	e002      	b.n	8004d18 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004d16:	bf00      	nop
  }
}
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	10000001 	.word	0x10000001
 8004d24:	08006373 	.word	0x08006373

08004d28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d50:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004d54:	b08a      	sub	sp, #40	; 0x28
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	4313      	orrs	r3, r2
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4ba4      	ldr	r3, [pc, #656]	; (8005020 <UART_SetConfig+0x2d0>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a99      	ldr	r2, [pc, #612]	; (8005024 <UART_SetConfig+0x2d4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004dd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	f023 010f 	bic.w	r1, r3, #15
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a8a      	ldr	r2, [pc, #552]	; (8005028 <UART_SetConfig+0x2d8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d126      	bne.n	8004e52 <UART_SetConfig+0x102>
 8004e04:	4b89      	ldr	r3, [pc, #548]	; (800502c <UART_SetConfig+0x2dc>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d81a      	bhi.n	8004e48 <UART_SetConfig+0xf8>
 8004e12:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0xc8>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e39 	.word	0x08004e39
 8004e20:	08004e31 	.word	0x08004e31
 8004e24:	08004e41 	.word	0x08004e41
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2e:	e0d6      	b.n	8004fde <UART_SetConfig+0x28e>
 8004e30:	2302      	movs	r3, #2
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e0d2      	b.n	8004fde <UART_SetConfig+0x28e>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e0ce      	b.n	8004fde <UART_SetConfig+0x28e>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e0ca      	b.n	8004fde <UART_SetConfig+0x28e>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	bf00      	nop
 8004e50:	e0c5      	b.n	8004fde <UART_SetConfig+0x28e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a76      	ldr	r2, [pc, #472]	; (8005030 <UART_SetConfig+0x2e0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d138      	bne.n	8004ece <UART_SetConfig+0x17e>
 8004e5c:	4b73      	ldr	r3, [pc, #460]	; (800502c <UART_SetConfig+0x2dc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	d82c      	bhi.n	8004ec4 <UART_SetConfig+0x174>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <UART_SetConfig+0x120>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004ea5 	.word	0x08004ea5
 8004e74:	08004ec5 	.word	0x08004ec5
 8004e78:	08004ec5 	.word	0x08004ec5
 8004e7c:	08004ec5 	.word	0x08004ec5
 8004e80:	08004eb5 	.word	0x08004eb5
 8004e84:	08004ec5 	.word	0x08004ec5
 8004e88:	08004ec5 	.word	0x08004ec5
 8004e8c:	08004ec5 	.word	0x08004ec5
 8004e90:	08004ead 	.word	0x08004ead
 8004e94:	08004ec5 	.word	0x08004ec5
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	08004ec5 	.word	0x08004ec5
 8004ea0:	08004ebd 	.word	0x08004ebd
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eaa:	e098      	b.n	8004fde <UART_SetConfig+0x28e>
 8004eac:	2302      	movs	r3, #2
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb2:	e094      	b.n	8004fde <UART_SetConfig+0x28e>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eba:	e090      	b.n	8004fde <UART_SetConfig+0x28e>
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec2:	e08c      	b.n	8004fde <UART_SetConfig+0x28e>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eca:	bf00      	nop
 8004ecc:	e087      	b.n	8004fde <UART_SetConfig+0x28e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a58      	ldr	r2, [pc, #352]	; (8005034 <UART_SetConfig+0x2e4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d125      	bne.n	8004f24 <UART_SetConfig+0x1d4>
 8004ed8:	4b54      	ldr	r3, [pc, #336]	; (800502c <UART_SetConfig+0x2dc>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d011      	beq.n	8004f0a <UART_SetConfig+0x1ba>
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d802      	bhi.n	8004ef0 <UART_SetConfig+0x1a0>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <UART_SetConfig+0x1aa>
 8004eee:	e014      	b.n	8004f1a <UART_SetConfig+0x1ca>
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d006      	beq.n	8004f02 <UART_SetConfig+0x1b2>
 8004ef4:	2b30      	cmp	r3, #48	; 0x30
 8004ef6:	d00c      	beq.n	8004f12 <UART_SetConfig+0x1c2>
 8004ef8:	e00f      	b.n	8004f1a <UART_SetConfig+0x1ca>
 8004efa:	2300      	movs	r3, #0
 8004efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f00:	e06d      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f02:	2302      	movs	r3, #2
 8004f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f08:	e069      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f10:	e065      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f12:	2308      	movs	r3, #8
 8004f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f18:	e061      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f1a:	2310      	movs	r3, #16
 8004f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f20:	bf00      	nop
 8004f22:	e05c      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a43      	ldr	r2, [pc, #268]	; (8005038 <UART_SetConfig+0x2e8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d125      	bne.n	8004f7a <UART_SetConfig+0x22a>
 8004f2e:	4b3f      	ldr	r3, [pc, #252]	; (800502c <UART_SetConfig+0x2dc>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d011      	beq.n	8004f60 <UART_SetConfig+0x210>
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d802      	bhi.n	8004f46 <UART_SetConfig+0x1f6>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <UART_SetConfig+0x200>
 8004f44:	e014      	b.n	8004f70 <UART_SetConfig+0x220>
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d006      	beq.n	8004f58 <UART_SetConfig+0x208>
 8004f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f4c:	d00c      	beq.n	8004f68 <UART_SetConfig+0x218>
 8004f4e:	e00f      	b.n	8004f70 <UART_SetConfig+0x220>
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f56:	e042      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e03e      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e03a      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6e:	e036      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f76:	bf00      	nop
 8004f78:	e031      	b.n	8004fde <UART_SetConfig+0x28e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a29      	ldr	r2, [pc, #164]	; (8005024 <UART_SetConfig+0x2d4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d129      	bne.n	8004fd8 <UART_SetConfig+0x288>
 8004f84:	4b29      	ldr	r3, [pc, #164]	; (800502c <UART_SetConfig+0x2dc>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f92:	d014      	beq.n	8004fbe <UART_SetConfig+0x26e>
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d802      	bhi.n	8004fa0 <UART_SetConfig+0x250>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <UART_SetConfig+0x25e>
 8004f9e:	e016      	b.n	8004fce <UART_SetConfig+0x27e>
 8004fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa4:	d007      	beq.n	8004fb6 <UART_SetConfig+0x266>
 8004fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004faa:	d00c      	beq.n	8004fc6 <UART_SetConfig+0x276>
 8004fac:	e00f      	b.n	8004fce <UART_SetConfig+0x27e>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb4:	e013      	b.n	8004fde <UART_SetConfig+0x28e>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fbc:	e00f      	b.n	8004fde <UART_SetConfig+0x28e>
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc4:	e00b      	b.n	8004fde <UART_SetConfig+0x28e>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fcc:	e007      	b.n	8004fde <UART_SetConfig+0x28e>
 8004fce:	2310      	movs	r3, #16
 8004fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd4:	bf00      	nop
 8004fd6:	e002      	b.n	8004fde <UART_SetConfig+0x28e>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a10      	ldr	r2, [pc, #64]	; (8005024 <UART_SetConfig+0x2d4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	f040 842e 	bne.w	8005846 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	f200 8169 	bhi.w	80052c6 <UART_SetConfig+0x576>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0x2ac>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	080052c7 	.word	0x080052c7
 8005004:	080050df 	.word	0x080050df
 8005008:	080052c7 	.word	0x080052c7
 800500c:	08005177 	.word	0x08005177
 8005010:	080052c7 	.word	0x080052c7
 8005014:	080052c7 	.word	0x080052c7
 8005018:	080052c7 	.word	0x080052c7
 800501c:	08005219 	.word	0x08005219
 8005020:	cfff69f3 	.word	0xcfff69f3
 8005024:	40008000 	.word	0x40008000
 8005028:	40013800 	.word	0x40013800
 800502c:	40021000 	.word	0x40021000
 8005030:	40004400 	.word	0x40004400
 8005034:	40004800 	.word	0x40004800
 8005038:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800503c:	f7fd fa1a 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8005040:	4602      	mov	r2, r0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	2b00      	cmp	r3, #0
 8005048:	d044      	beq.n	80050d4 <UART_SetConfig+0x384>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b01      	cmp	r3, #1
 8005050:	d03e      	beq.n	80050d0 <UART_SetConfig+0x380>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b02      	cmp	r3, #2
 8005058:	d038      	beq.n	80050cc <UART_SetConfig+0x37c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b03      	cmp	r3, #3
 8005060:	d032      	beq.n	80050c8 <UART_SetConfig+0x378>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2b04      	cmp	r3, #4
 8005068:	d02c      	beq.n	80050c4 <UART_SetConfig+0x374>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b05      	cmp	r3, #5
 8005070:	d026      	beq.n	80050c0 <UART_SetConfig+0x370>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b06      	cmp	r3, #6
 8005078:	d020      	beq.n	80050bc <UART_SetConfig+0x36c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b07      	cmp	r3, #7
 8005080:	d01a      	beq.n	80050b8 <UART_SetConfig+0x368>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b08      	cmp	r3, #8
 8005088:	d014      	beq.n	80050b4 <UART_SetConfig+0x364>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b09      	cmp	r3, #9
 8005090:	d00e      	beq.n	80050b0 <UART_SetConfig+0x360>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2b0a      	cmp	r3, #10
 8005098:	d008      	beq.n	80050ac <UART_SetConfig+0x35c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b0b      	cmp	r3, #11
 80050a0:	d102      	bne.n	80050a8 <UART_SetConfig+0x358>
 80050a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a6:	e016      	b.n	80050d6 <UART_SetConfig+0x386>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e014      	b.n	80050d6 <UART_SetConfig+0x386>
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	e012      	b.n	80050d6 <UART_SetConfig+0x386>
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	e010      	b.n	80050d6 <UART_SetConfig+0x386>
 80050b4:	2320      	movs	r3, #32
 80050b6:	e00e      	b.n	80050d6 <UART_SetConfig+0x386>
 80050b8:	2310      	movs	r3, #16
 80050ba:	e00c      	b.n	80050d6 <UART_SetConfig+0x386>
 80050bc:	230c      	movs	r3, #12
 80050be:	e00a      	b.n	80050d6 <UART_SetConfig+0x386>
 80050c0:	230a      	movs	r3, #10
 80050c2:	e008      	b.n	80050d6 <UART_SetConfig+0x386>
 80050c4:	2308      	movs	r3, #8
 80050c6:	e006      	b.n	80050d6 <UART_SetConfig+0x386>
 80050c8:	2306      	movs	r3, #6
 80050ca:	e004      	b.n	80050d6 <UART_SetConfig+0x386>
 80050cc:	2304      	movs	r3, #4
 80050ce:	e002      	b.n	80050d6 <UART_SetConfig+0x386>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e000      	b.n	80050d6 <UART_SetConfig+0x386>
 80050d4:	2301      	movs	r3, #1
 80050d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050da:	617b      	str	r3, [r7, #20]
        break;
 80050dc:	e0f6      	b.n	80052cc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d044      	beq.n	8005170 <UART_SetConfig+0x420>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d03e      	beq.n	800516c <UART_SetConfig+0x41c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d038      	beq.n	8005168 <UART_SetConfig+0x418>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d032      	beq.n	8005164 <UART_SetConfig+0x414>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b04      	cmp	r3, #4
 8005104:	d02c      	beq.n	8005160 <UART_SetConfig+0x410>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2b05      	cmp	r3, #5
 800510c:	d026      	beq.n	800515c <UART_SetConfig+0x40c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2b06      	cmp	r3, #6
 8005114:	d020      	beq.n	8005158 <UART_SetConfig+0x408>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b07      	cmp	r3, #7
 800511c:	d01a      	beq.n	8005154 <UART_SetConfig+0x404>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b08      	cmp	r3, #8
 8005124:	d014      	beq.n	8005150 <UART_SetConfig+0x400>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	2b09      	cmp	r3, #9
 800512c:	d00e      	beq.n	800514c <UART_SetConfig+0x3fc>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b0a      	cmp	r3, #10
 8005134:	d008      	beq.n	8005148 <UART_SetConfig+0x3f8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b0b      	cmp	r3, #11
 800513c:	d102      	bne.n	8005144 <UART_SetConfig+0x3f4>
 800513e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005142:	e016      	b.n	8005172 <UART_SetConfig+0x422>
 8005144:	4ba1      	ldr	r3, [pc, #644]	; (80053cc <UART_SetConfig+0x67c>)
 8005146:	e014      	b.n	8005172 <UART_SetConfig+0x422>
 8005148:	4ba1      	ldr	r3, [pc, #644]	; (80053d0 <UART_SetConfig+0x680>)
 800514a:	e012      	b.n	8005172 <UART_SetConfig+0x422>
 800514c:	4ba1      	ldr	r3, [pc, #644]	; (80053d4 <UART_SetConfig+0x684>)
 800514e:	e010      	b.n	8005172 <UART_SetConfig+0x422>
 8005150:	4ba1      	ldr	r3, [pc, #644]	; (80053d8 <UART_SetConfig+0x688>)
 8005152:	e00e      	b.n	8005172 <UART_SetConfig+0x422>
 8005154:	4ba1      	ldr	r3, [pc, #644]	; (80053dc <UART_SetConfig+0x68c>)
 8005156:	e00c      	b.n	8005172 <UART_SetConfig+0x422>
 8005158:	4ba1      	ldr	r3, [pc, #644]	; (80053e0 <UART_SetConfig+0x690>)
 800515a:	e00a      	b.n	8005172 <UART_SetConfig+0x422>
 800515c:	4ba1      	ldr	r3, [pc, #644]	; (80053e4 <UART_SetConfig+0x694>)
 800515e:	e008      	b.n	8005172 <UART_SetConfig+0x422>
 8005160:	4ba1      	ldr	r3, [pc, #644]	; (80053e8 <UART_SetConfig+0x698>)
 8005162:	e006      	b.n	8005172 <UART_SetConfig+0x422>
 8005164:	4ba1      	ldr	r3, [pc, #644]	; (80053ec <UART_SetConfig+0x69c>)
 8005166:	e004      	b.n	8005172 <UART_SetConfig+0x422>
 8005168:	4ba1      	ldr	r3, [pc, #644]	; (80053f0 <UART_SetConfig+0x6a0>)
 800516a:	e002      	b.n	8005172 <UART_SetConfig+0x422>
 800516c:	4ba1      	ldr	r3, [pc, #644]	; (80053f4 <UART_SetConfig+0x6a4>)
 800516e:	e000      	b.n	8005172 <UART_SetConfig+0x422>
 8005170:	4b96      	ldr	r3, [pc, #600]	; (80053cc <UART_SetConfig+0x67c>)
 8005172:	617b      	str	r3, [r7, #20]
        break;
 8005174:	e0aa      	b.n	80052cc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005176:	f7fd f90f 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 800517a:	4602      	mov	r2, r0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b00      	cmp	r3, #0
 8005182:	d044      	beq.n	800520e <UART_SetConfig+0x4be>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b01      	cmp	r3, #1
 800518a:	d03e      	beq.n	800520a <UART_SetConfig+0x4ba>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b02      	cmp	r3, #2
 8005192:	d038      	beq.n	8005206 <UART_SetConfig+0x4b6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2b03      	cmp	r3, #3
 800519a:	d032      	beq.n	8005202 <UART_SetConfig+0x4b2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d02c      	beq.n	80051fe <UART_SetConfig+0x4ae>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d026      	beq.n	80051fa <UART_SetConfig+0x4aa>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2b06      	cmp	r3, #6
 80051b2:	d020      	beq.n	80051f6 <UART_SetConfig+0x4a6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	2b07      	cmp	r3, #7
 80051ba:	d01a      	beq.n	80051f2 <UART_SetConfig+0x4a2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d014      	beq.n	80051ee <UART_SetConfig+0x49e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b09      	cmp	r3, #9
 80051ca:	d00e      	beq.n	80051ea <UART_SetConfig+0x49a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2b0a      	cmp	r3, #10
 80051d2:	d008      	beq.n	80051e6 <UART_SetConfig+0x496>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2b0b      	cmp	r3, #11
 80051da:	d102      	bne.n	80051e2 <UART_SetConfig+0x492>
 80051dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e0:	e016      	b.n	8005210 <UART_SetConfig+0x4c0>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e014      	b.n	8005210 <UART_SetConfig+0x4c0>
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	e012      	b.n	8005210 <UART_SetConfig+0x4c0>
 80051ea:	2340      	movs	r3, #64	; 0x40
 80051ec:	e010      	b.n	8005210 <UART_SetConfig+0x4c0>
 80051ee:	2320      	movs	r3, #32
 80051f0:	e00e      	b.n	8005210 <UART_SetConfig+0x4c0>
 80051f2:	2310      	movs	r3, #16
 80051f4:	e00c      	b.n	8005210 <UART_SetConfig+0x4c0>
 80051f6:	230c      	movs	r3, #12
 80051f8:	e00a      	b.n	8005210 <UART_SetConfig+0x4c0>
 80051fa:	230a      	movs	r3, #10
 80051fc:	e008      	b.n	8005210 <UART_SetConfig+0x4c0>
 80051fe:	2308      	movs	r3, #8
 8005200:	e006      	b.n	8005210 <UART_SetConfig+0x4c0>
 8005202:	2306      	movs	r3, #6
 8005204:	e004      	b.n	8005210 <UART_SetConfig+0x4c0>
 8005206:	2304      	movs	r3, #4
 8005208:	e002      	b.n	8005210 <UART_SetConfig+0x4c0>
 800520a:	2302      	movs	r3, #2
 800520c:	e000      	b.n	8005210 <UART_SetConfig+0x4c0>
 800520e:	2301      	movs	r3, #1
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
        break;
 8005216:	e059      	b.n	80052cc <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d04e      	beq.n	80052be <UART_SetConfig+0x56e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2b01      	cmp	r3, #1
 8005226:	d047      	beq.n	80052b8 <UART_SetConfig+0x568>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b02      	cmp	r3, #2
 800522e:	d040      	beq.n	80052b2 <UART_SetConfig+0x562>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b03      	cmp	r3, #3
 8005236:	d039      	beq.n	80052ac <UART_SetConfig+0x55c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	2b04      	cmp	r3, #4
 800523e:	d032      	beq.n	80052a6 <UART_SetConfig+0x556>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	2b05      	cmp	r3, #5
 8005246:	d02b      	beq.n	80052a0 <UART_SetConfig+0x550>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2b06      	cmp	r3, #6
 800524e:	d024      	beq.n	800529a <UART_SetConfig+0x54a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	2b07      	cmp	r3, #7
 8005256:	d01d      	beq.n	8005294 <UART_SetConfig+0x544>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	2b08      	cmp	r3, #8
 800525e:	d016      	beq.n	800528e <UART_SetConfig+0x53e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	2b09      	cmp	r3, #9
 8005266:	d00f      	beq.n	8005288 <UART_SetConfig+0x538>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	2b0a      	cmp	r3, #10
 800526e:	d008      	beq.n	8005282 <UART_SetConfig+0x532>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2b0b      	cmp	r3, #11
 8005276:	d101      	bne.n	800527c <UART_SetConfig+0x52c>
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	e022      	b.n	80052c2 <UART_SetConfig+0x572>
 800527c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005280:	e01f      	b.n	80052c2 <UART_SetConfig+0x572>
 8005282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005286:	e01c      	b.n	80052c2 <UART_SetConfig+0x572>
 8005288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800528c:	e019      	b.n	80052c2 <UART_SetConfig+0x572>
 800528e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005292:	e016      	b.n	80052c2 <UART_SetConfig+0x572>
 8005294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005298:	e013      	b.n	80052c2 <UART_SetConfig+0x572>
 800529a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800529e:	e010      	b.n	80052c2 <UART_SetConfig+0x572>
 80052a0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80052a4:	e00d      	b.n	80052c2 <UART_SetConfig+0x572>
 80052a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052aa:	e00a      	b.n	80052c2 <UART_SetConfig+0x572>
 80052ac:	f241 5355 	movw	r3, #5461	; 0x1555
 80052b0:	e007      	b.n	80052c2 <UART_SetConfig+0x572>
 80052b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052b6:	e004      	b.n	80052c2 <UART_SetConfig+0x572>
 80052b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052bc:	e001      	b.n	80052c2 <UART_SetConfig+0x572>
 80052be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c2:	617b      	str	r3, [r7, #20]
        break;
 80052c4:	e002      	b.n	80052cc <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	76fb      	strb	r3, [r7, #27]
        break;
 80052ca:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 86cd 	beq.w	800606e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d305      	bcc.n	80052f0 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d903      	bls.n	80052f8 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	76fb      	strb	r3, [r7, #27]
 80052f4:	f000 bebb 	b.w	800606e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80052f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	f200 828d 	bhi.w	800581c <UART_SetConfig+0xacc>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x5b8>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800532d 	.word	0x0800532d
 800530c:	0800581d 	.word	0x0800581d
 8005310:	08005497 	.word	0x08005497
 8005314:	0800581d 	.word	0x0800581d
 8005318:	0800558d 	.word	0x0800558d
 800531c:	0800581d 	.word	0x0800581d
 8005320:	0800581d 	.word	0x0800581d
 8005324:	0800581d 	.word	0x0800581d
 8005328:	080056cb 	.word	0x080056cb
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fd f8a2 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8005330:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4618      	mov	r0, r3
 8005336:	f04f 0100 	mov.w	r1, #0
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d07d      	beq.n	800543e <UART_SetConfig+0x6ee>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b01      	cmp	r3, #1
 8005348:	d074      	beq.n	8005434 <UART_SetConfig+0x6e4>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	2b02      	cmp	r3, #2
 8005350:	d06b      	beq.n	800542a <UART_SetConfig+0x6da>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b03      	cmp	r3, #3
 8005358:	d062      	beq.n	8005420 <UART_SetConfig+0x6d0>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b04      	cmp	r3, #4
 8005360:	d059      	beq.n	8005416 <UART_SetConfig+0x6c6>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b05      	cmp	r3, #5
 8005368:	d050      	beq.n	800540c <UART_SetConfig+0x6bc>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b06      	cmp	r3, #6
 8005370:	d047      	beq.n	8005402 <UART_SetConfig+0x6b2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b07      	cmp	r3, #7
 8005378:	d03e      	beq.n	80053f8 <UART_SetConfig+0x6a8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b08      	cmp	r3, #8
 8005380:	d01f      	beq.n	80053c2 <UART_SetConfig+0x672>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b09      	cmp	r3, #9
 8005388:	d016      	beq.n	80053b8 <UART_SetConfig+0x668>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b0a      	cmp	r3, #10
 8005390:	d00d      	beq.n	80053ae <UART_SetConfig+0x65e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b0b      	cmp	r3, #11
 8005398:	d104      	bne.n	80053a4 <UART_SetConfig+0x654>
 800539a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800539e:	f04f 0400 	mov.w	r4, #0
 80053a2:	e050      	b.n	8005446 <UART_SetConfig+0x6f6>
 80053a4:	f04f 0301 	mov.w	r3, #1
 80053a8:	f04f 0400 	mov.w	r4, #0
 80053ac:	e04b      	b.n	8005446 <UART_SetConfig+0x6f6>
 80053ae:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053b2:	f04f 0400 	mov.w	r4, #0
 80053b6:	e046      	b.n	8005446 <UART_SetConfig+0x6f6>
 80053b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80053bc:	f04f 0400 	mov.w	r4, #0
 80053c0:	e041      	b.n	8005446 <UART_SetConfig+0x6f6>
 80053c2:	f04f 0320 	mov.w	r3, #32
 80053c6:	f04f 0400 	mov.w	r4, #0
 80053ca:	e03c      	b.n	8005446 <UART_SetConfig+0x6f6>
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	0001e848 	.word	0x0001e848
 80053d4:	0003d090 	.word	0x0003d090
 80053d8:	0007a120 	.word	0x0007a120
 80053dc:	000f4240 	.word	0x000f4240
 80053e0:	00145855 	.word	0x00145855
 80053e4:	00186a00 	.word	0x00186a00
 80053e8:	001e8480 	.word	0x001e8480
 80053ec:	0028b0aa 	.word	0x0028b0aa
 80053f0:	003d0900 	.word	0x003d0900
 80053f4:	007a1200 	.word	0x007a1200
 80053f8:	f04f 0310 	mov.w	r3, #16
 80053fc:	f04f 0400 	mov.w	r4, #0
 8005400:	e021      	b.n	8005446 <UART_SetConfig+0x6f6>
 8005402:	f04f 030c 	mov.w	r3, #12
 8005406:	f04f 0400 	mov.w	r4, #0
 800540a:	e01c      	b.n	8005446 <UART_SetConfig+0x6f6>
 800540c:	f04f 030a 	mov.w	r3, #10
 8005410:	f04f 0400 	mov.w	r4, #0
 8005414:	e017      	b.n	8005446 <UART_SetConfig+0x6f6>
 8005416:	f04f 0308 	mov.w	r3, #8
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	e012      	b.n	8005446 <UART_SetConfig+0x6f6>
 8005420:	f04f 0306 	mov.w	r3, #6
 8005424:	f04f 0400 	mov.w	r4, #0
 8005428:	e00d      	b.n	8005446 <UART_SetConfig+0x6f6>
 800542a:	f04f 0304 	mov.w	r3, #4
 800542e:	f04f 0400 	mov.w	r4, #0
 8005432:	e008      	b.n	8005446 <UART_SetConfig+0x6f6>
 8005434:	f04f 0302 	mov.w	r3, #2
 8005438:	f04f 0400 	mov.w	r4, #0
 800543c:	e003      	b.n	8005446 <UART_SetConfig+0x6f6>
 800543e:	f04f 0301 	mov.w	r3, #1
 8005442:	f04f 0400 	mov.w	r4, #0
 8005446:	461a      	mov	r2, r3
 8005448:	4623      	mov	r3, r4
 800544a:	f7fa fee5 	bl	8000218 <__aeabi_uldivmod>
 800544e:	4603      	mov	r3, r0
 8005450:	460c      	mov	r4, r1
 8005452:	4619      	mov	r1, r3
 8005454:	4622      	mov	r2, r4
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	f04f 0400 	mov.w	r4, #0
 800545e:	0214      	lsls	r4, r2, #8
 8005460:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005464:	020b      	lsls	r3, r1, #8
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6852      	ldr	r2, [r2, #4]
 800546a:	0852      	lsrs	r2, r2, #1
 800546c:	4611      	mov	r1, r2
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	eb13 0b01 	adds.w	fp, r3, r1
 8005476:	eb44 0c02 	adc.w	ip, r4, r2
 800547a:	4658      	mov	r0, fp
 800547c:	4661      	mov	r1, ip
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f04f 0400 	mov.w	r4, #0
 8005486:	461a      	mov	r2, r3
 8005488:	4623      	mov	r3, r4
 800548a:	f7fa fec5 	bl	8000218 <__aeabi_uldivmod>
 800548e:	4603      	mov	r3, r0
 8005490:	460c      	mov	r4, r1
 8005492:	61fb      	str	r3, [r7, #28]
            break;
 8005494:	e1c5      	b.n	8005822 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	d05b      	beq.n	8005556 <UART_SetConfig+0x806>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d053      	beq.n	800554e <UART_SetConfig+0x7fe>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d04b      	beq.n	8005546 <UART_SetConfig+0x7f6>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d043      	beq.n	800553e <UART_SetConfig+0x7ee>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d03b      	beq.n	8005536 <UART_SetConfig+0x7e6>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	d033      	beq.n	800552e <UART_SetConfig+0x7de>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d02b      	beq.n	8005526 <UART_SetConfig+0x7d6>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b07      	cmp	r3, #7
 80054d4:	d023      	beq.n	800551e <UART_SetConfig+0x7ce>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d01b      	beq.n	8005516 <UART_SetConfig+0x7c6>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b09      	cmp	r3, #9
 80054e4:	d013      	beq.n	800550e <UART_SetConfig+0x7be>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2b0a      	cmp	r3, #10
 80054ec:	d00b      	beq.n	8005506 <UART_SetConfig+0x7b6>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b0b      	cmp	r3, #11
 80054f4:	d103      	bne.n	80054fe <UART_SetConfig+0x7ae>
 80054f6:	4bae      	ldr	r3, [pc, #696]	; (80057b0 <UART_SetConfig+0xa60>)
 80054f8:	f04f 0400 	mov.w	r4, #0
 80054fc:	e02e      	b.n	800555c <UART_SetConfig+0x80c>
 80054fe:	4bad      	ldr	r3, [pc, #692]	; (80057b4 <UART_SetConfig+0xa64>)
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	e02a      	b.n	800555c <UART_SetConfig+0x80c>
 8005506:	4bac      	ldr	r3, [pc, #688]	; (80057b8 <UART_SetConfig+0xa68>)
 8005508:	f04f 0400 	mov.w	r4, #0
 800550c:	e026      	b.n	800555c <UART_SetConfig+0x80c>
 800550e:	4bab      	ldr	r3, [pc, #684]	; (80057bc <UART_SetConfig+0xa6c>)
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	e022      	b.n	800555c <UART_SetConfig+0x80c>
 8005516:	4baa      	ldr	r3, [pc, #680]	; (80057c0 <UART_SetConfig+0xa70>)
 8005518:	f04f 0400 	mov.w	r4, #0
 800551c:	e01e      	b.n	800555c <UART_SetConfig+0x80c>
 800551e:	4ba9      	ldr	r3, [pc, #676]	; (80057c4 <UART_SetConfig+0xa74>)
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e01a      	b.n	800555c <UART_SetConfig+0x80c>
 8005526:	a49e      	add	r4, pc, #632	; (adr r4, 80057a0 <UART_SetConfig+0xa50>)
 8005528:	e9d4 3400 	ldrd	r3, r4, [r4]
 800552c:	e016      	b.n	800555c <UART_SetConfig+0x80c>
 800552e:	4ba6      	ldr	r3, [pc, #664]	; (80057c8 <UART_SetConfig+0xa78>)
 8005530:	f04f 0400 	mov.w	r4, #0
 8005534:	e012      	b.n	800555c <UART_SetConfig+0x80c>
 8005536:	4ba5      	ldr	r3, [pc, #660]	; (80057cc <UART_SetConfig+0xa7c>)
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	e00e      	b.n	800555c <UART_SetConfig+0x80c>
 800553e:	a49a      	add	r4, pc, #616	; (adr r4, 80057a8 <UART_SetConfig+0xa58>)
 8005540:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005544:	e00a      	b.n	800555c <UART_SetConfig+0x80c>
 8005546:	4ba2      	ldr	r3, [pc, #648]	; (80057d0 <UART_SetConfig+0xa80>)
 8005548:	f04f 0400 	mov.w	r4, #0
 800554c:	e006      	b.n	800555c <UART_SetConfig+0x80c>
 800554e:	4ba1      	ldr	r3, [pc, #644]	; (80057d4 <UART_SetConfig+0xa84>)
 8005550:	f04f 0400 	mov.w	r4, #0
 8005554:	e002      	b.n	800555c <UART_SetConfig+0x80c>
 8005556:	4b97      	ldr	r3, [pc, #604]	; (80057b4 <UART_SetConfig+0xa64>)
 8005558:	f04f 0400 	mov.w	r4, #0
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6852      	ldr	r2, [r2, #4]
 8005560:	0852      	lsrs	r2, r2, #1
 8005562:	4611      	mov	r1, r2
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	eb13 0b01 	adds.w	fp, r3, r1
 800556c:	eb44 0c02 	adc.w	ip, r4, r2
 8005570:	4658      	mov	r0, fp
 8005572:	4661      	mov	r1, ip
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f04f 0400 	mov.w	r4, #0
 800557c:	461a      	mov	r2, r3
 800557e:	4623      	mov	r3, r4
 8005580:	f7fa fe4a 	bl	8000218 <__aeabi_uldivmod>
 8005584:	4603      	mov	r3, r0
 8005586:	460c      	mov	r4, r1
 8005588:	61fb      	str	r3, [r7, #28]
            break;
 800558a:	e14a      	b.n	8005822 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800558c:	f7fc ff04 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8005590:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4618      	mov	r0, r3
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d067      	beq.n	8005672 <UART_SetConfig+0x922>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d05e      	beq.n	8005668 <UART_SetConfig+0x918>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d055      	beq.n	800565e <UART_SetConfig+0x90e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d04c      	beq.n	8005654 <UART_SetConfig+0x904>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d043      	beq.n	800564a <UART_SetConfig+0x8fa>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d03a      	beq.n	8005640 <UART_SetConfig+0x8f0>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d031      	beq.n	8005636 <UART_SetConfig+0x8e6>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b07      	cmp	r3, #7
 80055d8:	d028      	beq.n	800562c <UART_SetConfig+0x8dc>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d01f      	beq.n	8005622 <UART_SetConfig+0x8d2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b09      	cmp	r3, #9
 80055e8:	d016      	beq.n	8005618 <UART_SetConfig+0x8c8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b0a      	cmp	r3, #10
 80055f0:	d00d      	beq.n	800560e <UART_SetConfig+0x8be>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b0b      	cmp	r3, #11
 80055f8:	d104      	bne.n	8005604 <UART_SetConfig+0x8b4>
 80055fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055fe:	f04f 0400 	mov.w	r4, #0
 8005602:	e03a      	b.n	800567a <UART_SetConfig+0x92a>
 8005604:	f04f 0301 	mov.w	r3, #1
 8005608:	f04f 0400 	mov.w	r4, #0
 800560c:	e035      	b.n	800567a <UART_SetConfig+0x92a>
 800560e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005612:	f04f 0400 	mov.w	r4, #0
 8005616:	e030      	b.n	800567a <UART_SetConfig+0x92a>
 8005618:	f04f 0340 	mov.w	r3, #64	; 0x40
 800561c:	f04f 0400 	mov.w	r4, #0
 8005620:	e02b      	b.n	800567a <UART_SetConfig+0x92a>
 8005622:	f04f 0320 	mov.w	r3, #32
 8005626:	f04f 0400 	mov.w	r4, #0
 800562a:	e026      	b.n	800567a <UART_SetConfig+0x92a>
 800562c:	f04f 0310 	mov.w	r3, #16
 8005630:	f04f 0400 	mov.w	r4, #0
 8005634:	e021      	b.n	800567a <UART_SetConfig+0x92a>
 8005636:	f04f 030c 	mov.w	r3, #12
 800563a:	f04f 0400 	mov.w	r4, #0
 800563e:	e01c      	b.n	800567a <UART_SetConfig+0x92a>
 8005640:	f04f 030a 	mov.w	r3, #10
 8005644:	f04f 0400 	mov.w	r4, #0
 8005648:	e017      	b.n	800567a <UART_SetConfig+0x92a>
 800564a:	f04f 0308 	mov.w	r3, #8
 800564e:	f04f 0400 	mov.w	r4, #0
 8005652:	e012      	b.n	800567a <UART_SetConfig+0x92a>
 8005654:	f04f 0306 	mov.w	r3, #6
 8005658:	f04f 0400 	mov.w	r4, #0
 800565c:	e00d      	b.n	800567a <UART_SetConfig+0x92a>
 800565e:	f04f 0304 	mov.w	r3, #4
 8005662:	f04f 0400 	mov.w	r4, #0
 8005666:	e008      	b.n	800567a <UART_SetConfig+0x92a>
 8005668:	f04f 0302 	mov.w	r3, #2
 800566c:	f04f 0400 	mov.w	r4, #0
 8005670:	e003      	b.n	800567a <UART_SetConfig+0x92a>
 8005672:	f04f 0301 	mov.w	r3, #1
 8005676:	f04f 0400 	mov.w	r4, #0
 800567a:	461a      	mov	r2, r3
 800567c:	4623      	mov	r3, r4
 800567e:	f7fa fdcb 	bl	8000218 <__aeabi_uldivmod>
 8005682:	4603      	mov	r3, r0
 8005684:	460c      	mov	r4, r1
 8005686:	4619      	mov	r1, r3
 8005688:	4622      	mov	r2, r4
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	f04f 0400 	mov.w	r4, #0
 8005692:	0214      	lsls	r4, r2, #8
 8005694:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005698:	020b      	lsls	r3, r1, #8
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6852      	ldr	r2, [r2, #4]
 800569e:	0852      	lsrs	r2, r2, #1
 80056a0:	4611      	mov	r1, r2
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	eb13 0b01 	adds.w	fp, r3, r1
 80056aa:	eb44 0c02 	adc.w	ip, r4, r2
 80056ae:	4658      	mov	r0, fp
 80056b0:	4661      	mov	r1, ip
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f04f 0400 	mov.w	r4, #0
 80056ba:	461a      	mov	r2, r3
 80056bc:	4623      	mov	r3, r4
 80056be:	f7fa fdab 	bl	8000218 <__aeabi_uldivmod>
 80056c2:	4603      	mov	r3, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	61fb      	str	r3, [r7, #28]
            break;
 80056c8:	e0ab      	b.n	8005822 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8088 	beq.w	80057e4 <UART_SetConfig+0xa94>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d05b      	beq.n	8005794 <UART_SetConfig+0xa44>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d052      	beq.n	800578a <UART_SetConfig+0xa3a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d04a      	beq.n	8005782 <UART_SetConfig+0xa32>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d041      	beq.n	8005778 <UART_SetConfig+0xa28>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b05      	cmp	r3, #5
 80056fa:	d039      	beq.n	8005770 <UART_SetConfig+0xa20>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	2b06      	cmp	r3, #6
 8005702:	d031      	beq.n	8005768 <UART_SetConfig+0xa18>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b07      	cmp	r3, #7
 800570a:	d028      	beq.n	800575e <UART_SetConfig+0xa0e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b08      	cmp	r3, #8
 8005712:	d01f      	beq.n	8005754 <UART_SetConfig+0xa04>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b09      	cmp	r3, #9
 800571a:	d016      	beq.n	800574a <UART_SetConfig+0x9fa>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2b0a      	cmp	r3, #10
 8005722:	d00d      	beq.n	8005740 <UART_SetConfig+0x9f0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b0b      	cmp	r3, #11
 800572a:	d104      	bne.n	8005736 <UART_SetConfig+0x9e6>
 800572c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005730:	f04f 0400 	mov.w	r4, #0
 8005734:	e05a      	b.n	80057ec <UART_SetConfig+0xa9c>
 8005736:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800573a:	f04f 0400 	mov.w	r4, #0
 800573e:	e055      	b.n	80057ec <UART_SetConfig+0xa9c>
 8005740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005744:	f04f 0400 	mov.w	r4, #0
 8005748:	e050      	b.n	80057ec <UART_SetConfig+0xa9c>
 800574a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800574e:	f04f 0400 	mov.w	r4, #0
 8005752:	e04b      	b.n	80057ec <UART_SetConfig+0xa9c>
 8005754:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005758:	f04f 0400 	mov.w	r4, #0
 800575c:	e046      	b.n	80057ec <UART_SetConfig+0xa9c>
 800575e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005762:	f04f 0400 	mov.w	r4, #0
 8005766:	e041      	b.n	80057ec <UART_SetConfig+0xa9c>
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <UART_SetConfig+0xa88>)
 800576a:	f04f 0400 	mov.w	r4, #0
 800576e:	e03d      	b.n	80057ec <UART_SetConfig+0xa9c>
 8005770:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <UART_SetConfig+0xa8c>)
 8005772:	f04f 0400 	mov.w	r4, #0
 8005776:	e039      	b.n	80057ec <UART_SetConfig+0xa9c>
 8005778:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800577c:	f04f 0400 	mov.w	r4, #0
 8005780:	e034      	b.n	80057ec <UART_SetConfig+0xa9c>
 8005782:	4b17      	ldr	r3, [pc, #92]	; (80057e0 <UART_SetConfig+0xa90>)
 8005784:	f04f 0400 	mov.w	r4, #0
 8005788:	e030      	b.n	80057ec <UART_SetConfig+0xa9c>
 800578a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800578e:	f04f 0400 	mov.w	r4, #0
 8005792:	e02b      	b.n	80057ec <UART_SetConfig+0xa9c>
 8005794:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005798:	f04f 0400 	mov.w	r4, #0
 800579c:	e026      	b.n	80057ec <UART_SetConfig+0xa9c>
 800579e:	bf00      	nop
 80057a0:	14585500 	.word	0x14585500
 80057a4:	00000000 	.word	0x00000000
 80057a8:	28b0aa00 	.word	0x28b0aa00
 80057ac:	00000000 	.word	0x00000000
 80057b0:	00f42400 	.word	0x00f42400
 80057b4:	f4240000 	.word	0xf4240000
 80057b8:	01e84800 	.word	0x01e84800
 80057bc:	03d09000 	.word	0x03d09000
 80057c0:	07a12000 	.word	0x07a12000
 80057c4:	0f424000 	.word	0x0f424000
 80057c8:	186a0000 	.word	0x186a0000
 80057cc:	1e848000 	.word	0x1e848000
 80057d0:	3d090000 	.word	0x3d090000
 80057d4:	7a120000 	.word	0x7a120000
 80057d8:	000aaa00 	.word	0x000aaa00
 80057dc:	000ccc00 	.word	0x000ccc00
 80057e0:	00155500 	.word	0x00155500
 80057e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80057e8:	f04f 0400 	mov.w	r4, #0
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6852      	ldr	r2, [r2, #4]
 80057f0:	0852      	lsrs	r2, r2, #1
 80057f2:	4611      	mov	r1, r2
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	eb13 0b01 	adds.w	fp, r3, r1
 80057fc:	eb44 0c02 	adc.w	ip, r4, r2
 8005800:	4658      	mov	r0, fp
 8005802:	4661      	mov	r1, ip
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f04f 0400 	mov.w	r4, #0
 800580c:	461a      	mov	r2, r3
 800580e:	4623      	mov	r3, r4
 8005810:	f7fa fd02 	bl	8000218 <__aeabi_uldivmod>
 8005814:	4603      	mov	r3, r0
 8005816:	460c      	mov	r4, r1
 8005818:	61fb      	str	r3, [r7, #28]
            break;
 800581a:	e002      	b.n	8005822 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	76fb      	strb	r3, [r7, #27]
            break;
 8005820:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005828:	d309      	bcc.n	800583e <UART_SetConfig+0xaee>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005830:	d205      	bcs.n	800583e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	f000 bc18 	b.w	800606e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	76fb      	strb	r3, [r7, #27]
 8005842:	f000 bc14 	b.w	800606e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584e:	f040 8204 	bne.w	8005c5a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8005852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005856:	2b08      	cmp	r3, #8
 8005858:	f200 81df 	bhi.w	8005c1a <UART_SetConfig+0xeca>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0xb14>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005889 	.word	0x08005889
 8005868:	08005941 	.word	0x08005941
 800586c:	080059f9 	.word	0x080059f9
 8005870:	08005c1b 	.word	0x08005c1b
 8005874:	08005aa1 	.word	0x08005aa1
 8005878:	08005c1b 	.word	0x08005c1b
 800587c:	08005c1b 	.word	0x08005c1b
 8005880:	08005c1b 	.word	0x08005c1b
 8005884:	08005b59 	.word	0x08005b59
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fc fdf4 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 800588c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d044      	beq.n	8005920 <UART_SetConfig+0xbd0>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b01      	cmp	r3, #1
 800589c:	d03e      	beq.n	800591c <UART_SetConfig+0xbcc>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d038      	beq.n	8005918 <UART_SetConfig+0xbc8>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d032      	beq.n	8005914 <UART_SetConfig+0xbc4>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d02c      	beq.n	8005910 <UART_SetConfig+0xbc0>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d026      	beq.n	800590c <UART_SetConfig+0xbbc>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d020      	beq.n	8005908 <UART_SetConfig+0xbb8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b07      	cmp	r3, #7
 80058cc:	d01a      	beq.n	8005904 <UART_SetConfig+0xbb4>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d014      	beq.n	8005900 <UART_SetConfig+0xbb0>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b09      	cmp	r3, #9
 80058dc:	d00e      	beq.n	80058fc <UART_SetConfig+0xbac>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2b0a      	cmp	r3, #10
 80058e4:	d008      	beq.n	80058f8 <UART_SetConfig+0xba8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b0b      	cmp	r3, #11
 80058ec:	d102      	bne.n	80058f4 <UART_SetConfig+0xba4>
 80058ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058f2:	e016      	b.n	8005922 <UART_SetConfig+0xbd2>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e014      	b.n	8005922 <UART_SetConfig+0xbd2>
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	e012      	b.n	8005922 <UART_SetConfig+0xbd2>
 80058fc:	2340      	movs	r3, #64	; 0x40
 80058fe:	e010      	b.n	8005922 <UART_SetConfig+0xbd2>
 8005900:	2320      	movs	r3, #32
 8005902:	e00e      	b.n	8005922 <UART_SetConfig+0xbd2>
 8005904:	2310      	movs	r3, #16
 8005906:	e00c      	b.n	8005922 <UART_SetConfig+0xbd2>
 8005908:	230c      	movs	r3, #12
 800590a:	e00a      	b.n	8005922 <UART_SetConfig+0xbd2>
 800590c:	230a      	movs	r3, #10
 800590e:	e008      	b.n	8005922 <UART_SetConfig+0xbd2>
 8005910:	2308      	movs	r3, #8
 8005912:	e006      	b.n	8005922 <UART_SetConfig+0xbd2>
 8005914:	2306      	movs	r3, #6
 8005916:	e004      	b.n	8005922 <UART_SetConfig+0xbd2>
 8005918:	2304      	movs	r3, #4
 800591a:	e002      	b.n	8005922 <UART_SetConfig+0xbd2>
 800591c:	2302      	movs	r3, #2
 800591e:	e000      	b.n	8005922 <UART_SetConfig+0xbd2>
 8005920:	2301      	movs	r3, #1
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	005a      	lsls	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	441a      	add	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	b29b      	uxth	r3, r3
 800593c:	61fb      	str	r3, [r7, #28]
        break;
 800593e:	e16f      	b.n	8005c20 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005940:	f7fc fdae 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8005944:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	2b00      	cmp	r3, #0
 800594c:	d044      	beq.n	80059d8 <UART_SetConfig+0xc88>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b01      	cmp	r3, #1
 8005954:	d03e      	beq.n	80059d4 <UART_SetConfig+0xc84>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b02      	cmp	r3, #2
 800595c:	d038      	beq.n	80059d0 <UART_SetConfig+0xc80>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b03      	cmp	r3, #3
 8005964:	d032      	beq.n	80059cc <UART_SetConfig+0xc7c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b04      	cmp	r3, #4
 800596c:	d02c      	beq.n	80059c8 <UART_SetConfig+0xc78>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b05      	cmp	r3, #5
 8005974:	d026      	beq.n	80059c4 <UART_SetConfig+0xc74>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b06      	cmp	r3, #6
 800597c:	d020      	beq.n	80059c0 <UART_SetConfig+0xc70>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b07      	cmp	r3, #7
 8005984:	d01a      	beq.n	80059bc <UART_SetConfig+0xc6c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b08      	cmp	r3, #8
 800598c:	d014      	beq.n	80059b8 <UART_SetConfig+0xc68>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b09      	cmp	r3, #9
 8005994:	d00e      	beq.n	80059b4 <UART_SetConfig+0xc64>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b0a      	cmp	r3, #10
 800599c:	d008      	beq.n	80059b0 <UART_SetConfig+0xc60>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b0b      	cmp	r3, #11
 80059a4:	d102      	bne.n	80059ac <UART_SetConfig+0xc5c>
 80059a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059aa:	e016      	b.n	80059da <UART_SetConfig+0xc8a>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e014      	b.n	80059da <UART_SetConfig+0xc8a>
 80059b0:	2380      	movs	r3, #128	; 0x80
 80059b2:	e012      	b.n	80059da <UART_SetConfig+0xc8a>
 80059b4:	2340      	movs	r3, #64	; 0x40
 80059b6:	e010      	b.n	80059da <UART_SetConfig+0xc8a>
 80059b8:	2320      	movs	r3, #32
 80059ba:	e00e      	b.n	80059da <UART_SetConfig+0xc8a>
 80059bc:	2310      	movs	r3, #16
 80059be:	e00c      	b.n	80059da <UART_SetConfig+0xc8a>
 80059c0:	230c      	movs	r3, #12
 80059c2:	e00a      	b.n	80059da <UART_SetConfig+0xc8a>
 80059c4:	230a      	movs	r3, #10
 80059c6:	e008      	b.n	80059da <UART_SetConfig+0xc8a>
 80059c8:	2308      	movs	r3, #8
 80059ca:	e006      	b.n	80059da <UART_SetConfig+0xc8a>
 80059cc:	2306      	movs	r3, #6
 80059ce:	e004      	b.n	80059da <UART_SetConfig+0xc8a>
 80059d0:	2304      	movs	r3, #4
 80059d2:	e002      	b.n	80059da <UART_SetConfig+0xc8a>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e000      	b.n	80059da <UART_SetConfig+0xc8a>
 80059d8:	2301      	movs	r3, #1
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e0:	005a      	lsls	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	441a      	add	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	61fb      	str	r3, [r7, #28]
        break;
 80059f6:	e113      	b.n	8005c20 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d043      	beq.n	8005a88 <UART_SetConfig+0xd38>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d03d      	beq.n	8005a84 <UART_SetConfig+0xd34>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d037      	beq.n	8005a80 <UART_SetConfig+0xd30>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d031      	beq.n	8005a7c <UART_SetConfig+0xd2c>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d02b      	beq.n	8005a78 <UART_SetConfig+0xd28>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b05      	cmp	r3, #5
 8005a26:	d025      	beq.n	8005a74 <UART_SetConfig+0xd24>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b06      	cmp	r3, #6
 8005a2e:	d01f      	beq.n	8005a70 <UART_SetConfig+0xd20>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b07      	cmp	r3, #7
 8005a36:	d019      	beq.n	8005a6c <UART_SetConfig+0xd1c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d013      	beq.n	8005a68 <UART_SetConfig+0xd18>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b09      	cmp	r3, #9
 8005a46:	d00d      	beq.n	8005a64 <UART_SetConfig+0xd14>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b0a      	cmp	r3, #10
 8005a4e:	d007      	beq.n	8005a60 <UART_SetConfig+0xd10>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b0b      	cmp	r3, #11
 8005a56:	d101      	bne.n	8005a5c <UART_SetConfig+0xd0c>
 8005a58:	4b8d      	ldr	r3, [pc, #564]	; (8005c90 <UART_SetConfig+0xf40>)
 8005a5a:	e016      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a5c:	4b8d      	ldr	r3, [pc, #564]	; (8005c94 <UART_SetConfig+0xf44>)
 8005a5e:	e014      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a60:	4b8d      	ldr	r3, [pc, #564]	; (8005c98 <UART_SetConfig+0xf48>)
 8005a62:	e012      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a64:	4b8d      	ldr	r3, [pc, #564]	; (8005c9c <UART_SetConfig+0xf4c>)
 8005a66:	e010      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a68:	4b8d      	ldr	r3, [pc, #564]	; (8005ca0 <UART_SetConfig+0xf50>)
 8005a6a:	e00e      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a6c:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <UART_SetConfig+0xf54>)
 8005a6e:	e00c      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a70:	4b8d      	ldr	r3, [pc, #564]	; (8005ca8 <UART_SetConfig+0xf58>)
 8005a72:	e00a      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a74:	4b8d      	ldr	r3, [pc, #564]	; (8005cac <UART_SetConfig+0xf5c>)
 8005a76:	e008      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a78:	4b8d      	ldr	r3, [pc, #564]	; (8005cb0 <UART_SetConfig+0xf60>)
 8005a7a:	e006      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a7c:	4b8d      	ldr	r3, [pc, #564]	; (8005cb4 <UART_SetConfig+0xf64>)
 8005a7e:	e004      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a80:	4b8d      	ldr	r3, [pc, #564]	; (8005cb8 <UART_SetConfig+0xf68>)
 8005a82:	e002      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a84:	4b8d      	ldr	r3, [pc, #564]	; (8005cbc <UART_SetConfig+0xf6c>)
 8005a86:	e000      	b.n	8005a8a <UART_SetConfig+0xd3a>
 8005a88:	4b82      	ldr	r3, [pc, #520]	; (8005c94 <UART_SetConfig+0xf44>)
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6852      	ldr	r2, [r2, #4]
 8005a8e:	0852      	lsrs	r2, r2, #1
 8005a90:	441a      	add	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	61fb      	str	r3, [r7, #28]
        break;
 8005a9e:	e0bf      	b.n	8005c20 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aa0:	f7fc fc7a 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8005aa4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d044      	beq.n	8005b38 <UART_SetConfig+0xde8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d03e      	beq.n	8005b34 <UART_SetConfig+0xde4>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d038      	beq.n	8005b30 <UART_SetConfig+0xde0>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d032      	beq.n	8005b2c <UART_SetConfig+0xddc>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d02c      	beq.n	8005b28 <UART_SetConfig+0xdd8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b05      	cmp	r3, #5
 8005ad4:	d026      	beq.n	8005b24 <UART_SetConfig+0xdd4>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	2b06      	cmp	r3, #6
 8005adc:	d020      	beq.n	8005b20 <UART_SetConfig+0xdd0>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b07      	cmp	r3, #7
 8005ae4:	d01a      	beq.n	8005b1c <UART_SetConfig+0xdcc>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d014      	beq.n	8005b18 <UART_SetConfig+0xdc8>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	d00e      	beq.n	8005b14 <UART_SetConfig+0xdc4>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b0a      	cmp	r3, #10
 8005afc:	d008      	beq.n	8005b10 <UART_SetConfig+0xdc0>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b0b      	cmp	r3, #11
 8005b04:	d102      	bne.n	8005b0c <UART_SetConfig+0xdbc>
 8005b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b0a:	e016      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e014      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	e012      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b14:	2340      	movs	r3, #64	; 0x40
 8005b16:	e010      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b18:	2320      	movs	r3, #32
 8005b1a:	e00e      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	e00c      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b20:	230c      	movs	r3, #12
 8005b22:	e00a      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b24:	230a      	movs	r3, #10
 8005b26:	e008      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	e006      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b2c:	2306      	movs	r3, #6
 8005b2e:	e004      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b30:	2304      	movs	r3, #4
 8005b32:	e002      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e000      	b.n	8005b3a <UART_SetConfig+0xdea>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b40:	005a      	lsls	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	441a      	add	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	61fb      	str	r3, [r7, #28]
        break;
 8005b56:	e063      	b.n	8005c20 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d04f      	beq.n	8005c00 <UART_SetConfig+0xeb0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d048      	beq.n	8005bfa <UART_SetConfig+0xeaa>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d041      	beq.n	8005bf4 <UART_SetConfig+0xea4>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d03a      	beq.n	8005bee <UART_SetConfig+0xe9e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d033      	beq.n	8005be8 <UART_SetConfig+0xe98>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2b05      	cmp	r3, #5
 8005b86:	d02c      	beq.n	8005be2 <UART_SetConfig+0xe92>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d025      	beq.n	8005bdc <UART_SetConfig+0xe8c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b07      	cmp	r3, #7
 8005b96:	d01e      	beq.n	8005bd6 <UART_SetConfig+0xe86>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d017      	beq.n	8005bd0 <UART_SetConfig+0xe80>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b09      	cmp	r3, #9
 8005ba6:	d010      	beq.n	8005bca <UART_SetConfig+0xe7a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b0a      	cmp	r3, #10
 8005bae:	d009      	beq.n	8005bc4 <UART_SetConfig+0xe74>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	2b0b      	cmp	r3, #11
 8005bb6:	d102      	bne.n	8005bbe <UART_SetConfig+0xe6e>
 8005bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bbc:	e022      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bc2:	e01f      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bc8:	e01c      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bce:	e019      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005bd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bd4:	e016      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bda:	e013      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005bdc:	f241 5354 	movw	r3, #5460	; 0x1554
 8005be0:	e010      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005be2:	f641 1398 	movw	r3, #6552	; 0x1998
 8005be6:	e00d      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bec:	e00a      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005bee:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005bf2:	e007      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005bf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bf8:	e004      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfe:	e001      	b.n	8005c04 <UART_SetConfig+0xeb4>
 8005c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6852      	ldr	r2, [r2, #4]
 8005c08:	0852      	lsrs	r2, r2, #1
 8005c0a:	441a      	add	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	61fb      	str	r3, [r7, #28]
        break;
 8005c18:	e002      	b.n	8005c20 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	76fb      	strb	r3, [r7, #27]
        break;
 8005c1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2b0f      	cmp	r3, #15
 8005c24:	d916      	bls.n	8005c54 <UART_SetConfig+0xf04>
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2c:	d212      	bcs.n	8005c54 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f023 030f 	bic.w	r3, r3, #15
 8005c36:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	89fb      	ldrh	r3, [r7, #14]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	89fa      	ldrh	r2, [r7, #14]
 8005c50:	60da      	str	r2, [r3, #12]
 8005c52:	e20c      	b.n	800606e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	76fb      	strb	r3, [r7, #27]
 8005c58:	e209      	b.n	800606e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8005c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	f200 81f4 	bhi.w	800604c <UART_SetConfig+0x12fc>
 8005c64:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <UART_SetConfig+0xf1c>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005d77 	.word	0x08005d77
 8005c74:	08005e2d 	.word	0x08005e2d
 8005c78:	0800604d 	.word	0x0800604d
 8005c7c:	08005ed7 	.word	0x08005ed7
 8005c80:	0800604d 	.word	0x0800604d
 8005c84:	0800604d 	.word	0x0800604d
 8005c88:	0800604d 	.word	0x0800604d
 8005c8c:	08005f8d 	.word	0x08005f8d
 8005c90:	0001e848 	.word	0x0001e848
 8005c94:	01e84800 	.word	0x01e84800
 8005c98:	0003d090 	.word	0x0003d090
 8005c9c:	0007a120 	.word	0x0007a120
 8005ca0:	000f4240 	.word	0x000f4240
 8005ca4:	001e8480 	.word	0x001e8480
 8005ca8:	0028b0aa 	.word	0x0028b0aa
 8005cac:	0030d400 	.word	0x0030d400
 8005cb0:	003d0900 	.word	0x003d0900
 8005cb4:	00516154 	.word	0x00516154
 8005cb8:	007a1200 	.word	0x007a1200
 8005cbc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc0:	f7fc fbd8 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8005cc4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d044      	beq.n	8005d58 <UART_SetConfig+0x1008>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d03e      	beq.n	8005d54 <UART_SetConfig+0x1004>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d038      	beq.n	8005d50 <UART_SetConfig+0x1000>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d032      	beq.n	8005d4c <UART_SetConfig+0xffc>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d02c      	beq.n	8005d48 <UART_SetConfig+0xff8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d026      	beq.n	8005d44 <UART_SetConfig+0xff4>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b06      	cmp	r3, #6
 8005cfc:	d020      	beq.n	8005d40 <UART_SetConfig+0xff0>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b07      	cmp	r3, #7
 8005d04:	d01a      	beq.n	8005d3c <UART_SetConfig+0xfec>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d014      	beq.n	8005d38 <UART_SetConfig+0xfe8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b09      	cmp	r3, #9
 8005d14:	d00e      	beq.n	8005d34 <UART_SetConfig+0xfe4>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b0a      	cmp	r3, #10
 8005d1c:	d008      	beq.n	8005d30 <UART_SetConfig+0xfe0>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b0b      	cmp	r3, #11
 8005d24:	d102      	bne.n	8005d2c <UART_SetConfig+0xfdc>
 8005d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d2a:	e016      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e014      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	e012      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d34:	2340      	movs	r3, #64	; 0x40
 8005d36:	e010      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d38:	2320      	movs	r3, #32
 8005d3a:	e00e      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	e00c      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d40:	230c      	movs	r3, #12
 8005d42:	e00a      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d44:	230a      	movs	r3, #10
 8005d46:	e008      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	e006      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d4c:	2306      	movs	r3, #6
 8005d4e:	e004      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d50:	2304      	movs	r3, #4
 8005d52:	e002      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e000      	b.n	8005d5a <UART_SetConfig+0x100a>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	441a      	add	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	61fb      	str	r3, [r7, #28]
        break;
 8005d74:	e16d      	b.n	8006052 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d76:	f7fc fb93 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8005d7a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d044      	beq.n	8005e0e <UART_SetConfig+0x10be>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d03e      	beq.n	8005e0a <UART_SetConfig+0x10ba>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d038      	beq.n	8005e06 <UART_SetConfig+0x10b6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d032      	beq.n	8005e02 <UART_SetConfig+0x10b2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d02c      	beq.n	8005dfe <UART_SetConfig+0x10ae>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b05      	cmp	r3, #5
 8005daa:	d026      	beq.n	8005dfa <UART_SetConfig+0x10aa>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b06      	cmp	r3, #6
 8005db2:	d020      	beq.n	8005df6 <UART_SetConfig+0x10a6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b07      	cmp	r3, #7
 8005dba:	d01a      	beq.n	8005df2 <UART_SetConfig+0x10a2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d014      	beq.n	8005dee <UART_SetConfig+0x109e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b09      	cmp	r3, #9
 8005dca:	d00e      	beq.n	8005dea <UART_SetConfig+0x109a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b0a      	cmp	r3, #10
 8005dd2:	d008      	beq.n	8005de6 <UART_SetConfig+0x1096>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b0b      	cmp	r3, #11
 8005dda:	d102      	bne.n	8005de2 <UART_SetConfig+0x1092>
 8005ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005de0:	e016      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e014      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	e012      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005dea:	2340      	movs	r3, #64	; 0x40
 8005dec:	e010      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005dee:	2320      	movs	r3, #32
 8005df0:	e00e      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005df2:	2310      	movs	r3, #16
 8005df4:	e00c      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005df6:	230c      	movs	r3, #12
 8005df8:	e00a      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005dfa:	230a      	movs	r3, #10
 8005dfc:	e008      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	e006      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005e02:	2306      	movs	r3, #6
 8005e04:	e004      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005e06:	2304      	movs	r3, #4
 8005e08:	e002      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e000      	b.n	8005e10 <UART_SetConfig+0x10c0>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	441a      	add	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	61fb      	str	r3, [r7, #28]
        break;
 8005e2a:	e112      	b.n	8006052 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d044      	beq.n	8005ebe <UART_SetConfig+0x116e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d03e      	beq.n	8005eba <UART_SetConfig+0x116a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d038      	beq.n	8005eb6 <UART_SetConfig+0x1166>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d032      	beq.n	8005eb2 <UART_SetConfig+0x1162>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d02c      	beq.n	8005eae <UART_SetConfig+0x115e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b05      	cmp	r3, #5
 8005e5a:	d026      	beq.n	8005eaa <UART_SetConfig+0x115a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b06      	cmp	r3, #6
 8005e62:	d020      	beq.n	8005ea6 <UART_SetConfig+0x1156>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b07      	cmp	r3, #7
 8005e6a:	d01a      	beq.n	8005ea2 <UART_SetConfig+0x1152>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d014      	beq.n	8005e9e <UART_SetConfig+0x114e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b09      	cmp	r3, #9
 8005e7a:	d00e      	beq.n	8005e9a <UART_SetConfig+0x114a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b0a      	cmp	r3, #10
 8005e82:	d008      	beq.n	8005e96 <UART_SetConfig+0x1146>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b0b      	cmp	r3, #11
 8005e8a:	d102      	bne.n	8005e92 <UART_SetConfig+0x1142>
 8005e8c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005e90:	e016      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005e92:	4b81      	ldr	r3, [pc, #516]	; (8006098 <UART_SetConfig+0x1348>)
 8005e94:	e014      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005e96:	4b81      	ldr	r3, [pc, #516]	; (800609c <UART_SetConfig+0x134c>)
 8005e98:	e012      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005e9a:	4b81      	ldr	r3, [pc, #516]	; (80060a0 <UART_SetConfig+0x1350>)
 8005e9c:	e010      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005e9e:	4b81      	ldr	r3, [pc, #516]	; (80060a4 <UART_SetConfig+0x1354>)
 8005ea0:	e00e      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005ea2:	4b81      	ldr	r3, [pc, #516]	; (80060a8 <UART_SetConfig+0x1358>)
 8005ea4:	e00c      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005ea6:	4b81      	ldr	r3, [pc, #516]	; (80060ac <UART_SetConfig+0x135c>)
 8005ea8:	e00a      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005eaa:	4b81      	ldr	r3, [pc, #516]	; (80060b0 <UART_SetConfig+0x1360>)
 8005eac:	e008      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005eae:	4b81      	ldr	r3, [pc, #516]	; (80060b4 <UART_SetConfig+0x1364>)
 8005eb0:	e006      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005eb2:	4b81      	ldr	r3, [pc, #516]	; (80060b8 <UART_SetConfig+0x1368>)
 8005eb4:	e004      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005eb6:	4b81      	ldr	r3, [pc, #516]	; (80060bc <UART_SetConfig+0x136c>)
 8005eb8:	e002      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005eba:	4b81      	ldr	r3, [pc, #516]	; (80060c0 <UART_SetConfig+0x1370>)
 8005ebc:	e000      	b.n	8005ec0 <UART_SetConfig+0x1170>
 8005ebe:	4b76      	ldr	r3, [pc, #472]	; (8006098 <UART_SetConfig+0x1348>)
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6852      	ldr	r2, [r2, #4]
 8005ec4:	0852      	lsrs	r2, r2, #1
 8005ec6:	441a      	add	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	61fb      	str	r3, [r7, #28]
        break;
 8005ed4:	e0bd      	b.n	8006052 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed6:	f7fc fa5f 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8005eda:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d044      	beq.n	8005f6e <UART_SetConfig+0x121e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d03e      	beq.n	8005f6a <UART_SetConfig+0x121a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d038      	beq.n	8005f66 <UART_SetConfig+0x1216>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d032      	beq.n	8005f62 <UART_SetConfig+0x1212>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d02c      	beq.n	8005f5e <UART_SetConfig+0x120e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	d026      	beq.n	8005f5a <UART_SetConfig+0x120a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b06      	cmp	r3, #6
 8005f12:	d020      	beq.n	8005f56 <UART_SetConfig+0x1206>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	2b07      	cmp	r3, #7
 8005f1a:	d01a      	beq.n	8005f52 <UART_SetConfig+0x1202>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d014      	beq.n	8005f4e <UART_SetConfig+0x11fe>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b09      	cmp	r3, #9
 8005f2a:	d00e      	beq.n	8005f4a <UART_SetConfig+0x11fa>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b0a      	cmp	r3, #10
 8005f32:	d008      	beq.n	8005f46 <UART_SetConfig+0x11f6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b0b      	cmp	r3, #11
 8005f3a:	d102      	bne.n	8005f42 <UART_SetConfig+0x11f2>
 8005f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f40:	e016      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e014      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f46:	2380      	movs	r3, #128	; 0x80
 8005f48:	e012      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f4a:	2340      	movs	r3, #64	; 0x40
 8005f4c:	e010      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f4e:	2320      	movs	r3, #32
 8005f50:	e00e      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f52:	2310      	movs	r3, #16
 8005f54:	e00c      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f56:	230c      	movs	r3, #12
 8005f58:	e00a      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f5a:	230a      	movs	r3, #10
 8005f5c:	e008      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	e006      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f62:	2306      	movs	r3, #6
 8005f64:	e004      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f66:	2304      	movs	r3, #4
 8005f68:	e002      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e000      	b.n	8005f70 <UART_SetConfig+0x1220>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	441a      	add	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	61fb      	str	r3, [r7, #28]
        break;
 8005f8a:	e062      	b.n	8006052 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d04e      	beq.n	8006032 <UART_SetConfig+0x12e2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d047      	beq.n	800602c <UART_SetConfig+0x12dc>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d040      	beq.n	8006026 <UART_SetConfig+0x12d6>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d039      	beq.n	8006020 <UART_SetConfig+0x12d0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d032      	beq.n	800601a <UART_SetConfig+0x12ca>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b05      	cmp	r3, #5
 8005fba:	d02b      	beq.n	8006014 <UART_SetConfig+0x12c4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	2b06      	cmp	r3, #6
 8005fc2:	d024      	beq.n	800600e <UART_SetConfig+0x12be>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b07      	cmp	r3, #7
 8005fca:	d01d      	beq.n	8006008 <UART_SetConfig+0x12b8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d016      	beq.n	8006002 <UART_SetConfig+0x12b2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	d00f      	beq.n	8005ffc <UART_SetConfig+0x12ac>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b0a      	cmp	r3, #10
 8005fe2:	d008      	beq.n	8005ff6 <UART_SetConfig+0x12a6>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b0b      	cmp	r3, #11
 8005fea:	d101      	bne.n	8005ff0 <UART_SetConfig+0x12a0>
 8005fec:	2380      	movs	r3, #128	; 0x80
 8005fee:	e022      	b.n	8006036 <UART_SetConfig+0x12e6>
 8005ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff4:	e01f      	b.n	8006036 <UART_SetConfig+0x12e6>
 8005ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ffa:	e01c      	b.n	8006036 <UART_SetConfig+0x12e6>
 8005ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006000:	e019      	b.n	8006036 <UART_SetConfig+0x12e6>
 8006002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006006:	e016      	b.n	8006036 <UART_SetConfig+0x12e6>
 8006008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800600c:	e013      	b.n	8006036 <UART_SetConfig+0x12e6>
 800600e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006012:	e010      	b.n	8006036 <UART_SetConfig+0x12e6>
 8006014:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006018:	e00d      	b.n	8006036 <UART_SetConfig+0x12e6>
 800601a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601e:	e00a      	b.n	8006036 <UART_SetConfig+0x12e6>
 8006020:	f241 5355 	movw	r3, #5461	; 0x1555
 8006024:	e007      	b.n	8006036 <UART_SetConfig+0x12e6>
 8006026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800602a:	e004      	b.n	8006036 <UART_SetConfig+0x12e6>
 800602c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006030:	e001      	b.n	8006036 <UART_SetConfig+0x12e6>
 8006032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6852      	ldr	r2, [r2, #4]
 800603a:	0852      	lsrs	r2, r2, #1
 800603c:	441a      	add	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	fbb2 f3f3 	udiv	r3, r2, r3
 8006046:	b29b      	uxth	r3, r3
 8006048:	61fb      	str	r3, [r7, #28]
        break;
 800604a:	e002      	b.n	8006052 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	76fb      	strb	r3, [r7, #27]
        break;
 8006050:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	2b0f      	cmp	r3, #15
 8006056:	d908      	bls.n	800606a <UART_SetConfig+0x131a>
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605e:	d204      	bcs.n	800606a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	60da      	str	r2, [r3, #12]
 8006068:	e001      	b.n	800606e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800608a:	7efb      	ldrb	r3, [r7, #27]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3728      	adds	r7, #40	; 0x28
 8006090:	46bd      	mov	sp, r7
 8006092:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006096:	bf00      	nop
 8006098:	00f42400 	.word	0x00f42400
 800609c:	0001e848 	.word	0x0001e848
 80060a0:	0003d090 	.word	0x0003d090
 80060a4:	0007a120 	.word	0x0007a120
 80060a8:	000f4240 	.word	0x000f4240
 80060ac:	00145855 	.word	0x00145855
 80060b0:	00186a00 	.word	0x00186a00
 80060b4:	001e8480 	.word	0x001e8480
 80060b8:	0028b0aa 	.word	0x0028b0aa
 80060bc:	003d0900 	.word	0x003d0900
 80060c0:	007a1200 	.word	0x007a1200

080060c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01a      	beq.n	80061da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c2:	d10a      	bne.n	80061da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]
  }
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af02      	add	r7, sp, #8
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006218:	f7fb f8aa 	bl	8001370 <HAL_GetTick>
 800621c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b08      	cmp	r3, #8
 800622a:	d10e      	bne.n	800624a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800622c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f82c 	bl	8006298 <UART_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e022      	b.n	8006290 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b04      	cmp	r3, #4
 8006256:	d10e      	bne.n	8006276 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f816 	bl	8006298 <UART_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e00c      	b.n	8006290 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a8:	e02c      	b.n	8006304 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b0:	d028      	beq.n	8006304 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b2:	f7fb f85d 	bl	8001370 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d302      	bcc.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11d      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e00f      	b.n	8006324 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69da      	ldr	r2, [r3, #28]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4013      	ands	r3, r2
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	429a      	cmp	r2, r3
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	429a      	cmp	r2, r3
 8006320:	d0c3      	beq.n	80062aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006342:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7fe fcd3 	bl	8004d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7fe fcaf 	bl	8004d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_UARTEx_DisableFifoMode+0x16>
 8006420:	2302      	movs	r3, #2
 8006422:	e027      	b.n	8006474 <HAL_UARTEx_DisableFifoMode+0x66>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2224      	movs	r2, #36	; 0x24
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006452:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006494:	2302      	movs	r3, #2
 8006496:	e02d      	b.n	80064f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2224      	movs	r2, #36	; 0x24
 80064a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0201 	bic.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f84f 	bl	8006578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006510:	2302      	movs	r3, #2
 8006512:	e02d      	b.n	8006570 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2224      	movs	r2, #36	; 0x24
 8006520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f811 	bl	8006578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006580:	4a2f      	ldr	r2, [pc, #188]	; (8006640 <UARTEx_SetNbDataToProcess+0xc8>)
 8006582:	f107 0314 	add.w	r3, r7, #20
 8006586:	e892 0003 	ldmia.w	r2, {r0, r1}
 800658a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800658e:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <UARTEx_SetNbDataToProcess+0xcc>)
 8006590:	f107 030c 	add.w	r3, r7, #12
 8006594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006598:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d108      	bne.n	80065b6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065b4:	e03d      	b.n	8006632 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065b6:	2308      	movs	r3, #8
 80065b8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065ba:	2308      	movs	r3, #8
 80065bc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	0e5b      	lsrs	r3, r3, #25
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	0f5b      	lsrs	r3, r3, #29
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80065de:	7fbb      	ldrb	r3, [r7, #30]
 80065e0:	7f3a      	ldrb	r2, [r7, #28]
 80065e2:	f107 0120 	add.w	r1, r7, #32
 80065e6:	440a      	add	r2, r1
 80065e8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	7f3a      	ldrb	r2, [r7, #28]
 80065f2:	f107 0120 	add.w	r1, r7, #32
 80065f6:	440a      	add	r2, r1
 80065f8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80065fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006600:	b29a      	uxth	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006608:	7ffb      	ldrb	r3, [r7, #31]
 800660a:	7f7a      	ldrb	r2, [r7, #29]
 800660c:	f107 0120 	add.w	r1, r7, #32
 8006610:	440a      	add	r2, r1
 8006612:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006616:	fb02 f303 	mul.w	r3, r2, r3
 800661a:	7f7a      	ldrb	r2, [r7, #29]
 800661c:	f107 0120 	add.w	r1, r7, #32
 8006620:	440a      	add	r2, r1
 8006622:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006626:	fb93 f3f2 	sdiv	r3, r3, r2
 800662a:	b29a      	uxth	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006632:	bf00      	nop
 8006634:	3724      	adds	r7, #36	; 0x24
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	080066b8 	.word	0x080066b8
 8006644:	080066c0 	.word	0x080066c0

08006648 <__libc_init_array>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	4e0d      	ldr	r6, [pc, #52]	; (8006680 <__libc_init_array+0x38>)
 800664c:	4c0d      	ldr	r4, [pc, #52]	; (8006684 <__libc_init_array+0x3c>)
 800664e:	1ba4      	subs	r4, r4, r6
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	2500      	movs	r5, #0
 8006654:	42a5      	cmp	r5, r4
 8006656:	d109      	bne.n	800666c <__libc_init_array+0x24>
 8006658:	4e0b      	ldr	r6, [pc, #44]	; (8006688 <__libc_init_array+0x40>)
 800665a:	4c0c      	ldr	r4, [pc, #48]	; (800668c <__libc_init_array+0x44>)
 800665c:	f000 f820 	bl	80066a0 <_init>
 8006660:	1ba4      	subs	r4, r4, r6
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	2500      	movs	r5, #0
 8006666:	42a5      	cmp	r5, r4
 8006668:	d105      	bne.n	8006676 <__libc_init_array+0x2e>
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006670:	4798      	blx	r3
 8006672:	3501      	adds	r5, #1
 8006674:	e7ee      	b.n	8006654 <__libc_init_array+0xc>
 8006676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800667a:	4798      	blx	r3
 800667c:	3501      	adds	r5, #1
 800667e:	e7f2      	b.n	8006666 <__libc_init_array+0x1e>
 8006680:	080066e8 	.word	0x080066e8
 8006684:	080066e8 	.word	0x080066e8
 8006688:	080066e8 	.word	0x080066e8
 800668c:	080066ec 	.word	0x080066ec

08006690 <memset>:
 8006690:	4402      	add	r2, r0
 8006692:	4603      	mov	r3, r0
 8006694:	4293      	cmp	r3, r2
 8006696:	d100      	bne.n	800669a <memset+0xa>
 8006698:	4770      	bx	lr
 800669a:	f803 1b01 	strb.w	r1, [r3], #1
 800669e:	e7f9      	b.n	8006694 <memset+0x4>

080066a0 <_init>:
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	bf00      	nop
 80066a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a6:	bc08      	pop	{r3}
 80066a8:	469e      	mov	lr, r3
 80066aa:	4770      	bx	lr

080066ac <_fini>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	bf00      	nop
 80066b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b2:	bc08      	pop	{r3}
 80066b4:	469e      	mov	lr, r3
 80066b6:	4770      	bx	lr
