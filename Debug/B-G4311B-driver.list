
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ac0  08008ac0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ac0  08008ac0  00018ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac8  08008ac8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac8  08008ac8  00018ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008acc  08008acc  00018acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  2000000c  08008adc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08008adc  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190a1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e3c  00000000  00000000  000390dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0003bf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  0003d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219f6  00000000  00000000  0003e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001309c  00000000  00000000  000602de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de0d1  00000000  00000000  0007337a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015144b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc0  00000000  00000000  001514c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008a80 	.word	0x08008a80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008a80 	.word	0x08008a80

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b092      	sub	sp, #72	; 0x48
 800051c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800051e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	223c      	movs	r2, #60	; 0x3c
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f008 fa9d 	bl	8008a70 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000536:	4b43      	ldr	r3, [pc, #268]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800053c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800053e:	4b41      	ldr	r3, [pc, #260]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000540:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000544:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000546:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054c:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <MX_ADC1_Init+0x12c>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000552:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000558:	4b3a      	ldr	r3, [pc, #232]	; (8000644 <MX_ADC1_Init+0x12c>)
 800055a:	2201      	movs	r2, #1
 800055c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b39      	ldr	r3, [pc, #228]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000560:	2204      	movs	r2, #4
 8000562:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000564:	4b37      	ldr	r3, [pc, #220]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000566:	2200      	movs	r2, #0
 8000568:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056a:	4b36      	ldr	r3, [pc, #216]	; (8000644 <MX_ADC1_Init+0x12c>)
 800056c:	2200      	movs	r2, #0
 800056e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000570:	4b34      	ldr	r3, [pc, #208]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000572:	2201      	movs	r2, #1
 8000574:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b33      	ldr	r3, [pc, #204]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057e:	4b31      	ldr	r3, [pc, #196]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000588:	2200      	movs	r2, #0
 800058a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800058c:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <MX_ADC1_Init+0x12c>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	482b      	ldr	r0, [pc, #172]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000596:	f001 fb49 	bl	8001c2c <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005a0:	f000 fc11 	bl	8000dc6 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ac:	4619      	mov	r1, r3
 80005ae:	4825      	ldr	r0, [pc, #148]	; (8000644 <MX_ADC1_Init+0x12c>)
 80005b0:	f003 f83c 	bl	800362c <HAL_ADCEx_MultiModeConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005ba:	f000 fc04 	bl	8000dc6 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <MX_ADC1_Init+0x130>)
 80005c0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80005ca:	237f      	movs	r3, #127	; 0x7f
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80005ce:	2304      	movs	r3, #4
 80005d0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T2_TRGO;
 80005ec:	2388      	movs	r3, #136	; 0x88
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <MX_ADC1_Init+0x12c>)
 8000600:	f002 fbbc 	bl	8002d7c <HAL_ADCEx_InjectedConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800060a:	f000 fbdc 	bl	8000dc6 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x134>)
 8000610:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000612:	f240 130f 	movw	r3, #271	; 0x10f
 8000616:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 800061c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000620:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 8000622:	2301      	movs	r3, #1
 8000624:	773b      	strb	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	4619      	mov	r1, r3
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <MX_ADC1_Init+0x12c>)
 800062c:	f002 fba6 	bl	8002d7c <HAL_ADCEx_InjectedConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000636:	f000 fbc6 	bl	8000dc6 <Error_Handler>
  }

}
 800063a:	bf00      	nop
 800063c:	3748      	adds	r7, #72	; 0x48
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000098 	.word	0x20000098
 8000648:	0c900008 	.word	0x0c900008
 800064c:	32601000 	.word	0x32601000

08000650 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b090      	sub	sp, #64	; 0x40
 8000654:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	223c      	movs	r2, #60	; 0x3c
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f008 fa07 	bl	8008a70 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000664:	4a34      	ldr	r2, [pc, #208]	; (8000738 <MX_ADC2_Init+0xe8>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <MX_ADC2_Init+0xe4>)
 800066a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800066e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_ADC2_Init+0xe4>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_ADC2_Init+0xe4>)
 800068a:	2204      	movs	r2, #4
 800068c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000690:	2200      	movs	r2, #0
 8000692:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_ADC2_Init+0xe4>)
 8000696:	2200      	movs	r2, #0
 8000698:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <MX_ADC2_Init+0xe4>)
 800069c:	2201      	movs	r2, #1
 800069e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006be:	481d      	ldr	r0, [pc, #116]	; (8000734 <MX_ADC2_Init+0xe4>)
 80006c0:	f001 fab4 	bl	8001c2c <HAL_ADC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80006ca:	f000 fb7c 	bl	8000dc6 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC2_Init+0xec>)
 80006d0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006d2:	2309      	movs	r3, #9
 80006d4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006da:	237f      	movs	r3, #127	; 0x7f
 80006dc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 80006e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ea:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T2_TRGO;
 8000708:	2388      	movs	r3, #136	; 0x88
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_ADC2_Init+0xe4>)
 800071c:	f002 fb2e 	bl	8002d7c <HAL_ADCEx_InjectedConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8000726:	f000 fb4e 	bl	8000dc6 <Error_Handler>
  }

}
 800072a:	bf00      	nop
 800072c:	3740      	adds	r7, #64	; 0x40
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000002c 	.word	0x2000002c
 8000738:	50000100 	.word	0x50000100
 800073c:	0c900008 	.word	0x0c900008

08000740 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000760:	d14e      	bne.n	8000800 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000762:	4b47      	ldr	r3, [pc, #284]	; (8000880 <HAL_ADC_MspInit+0x140>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	4a45      	ldr	r2, [pc, #276]	; (8000880 <HAL_ADC_MspInit+0x140>)
 800076a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800076c:	4b44      	ldr	r3, [pc, #272]	; (8000880 <HAL_ADC_MspInit+0x140>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10b      	bne.n	800078c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000774:	4b43      	ldr	r3, [pc, #268]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000778:	4a42      	ldr	r2, [pc, #264]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800077a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800077e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000780:	4b40      	ldr	r3, [pc, #256]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800078e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000790:	4a3c      	ldr	r2, [pc, #240]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000798:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_ADC_MspInit+0x144>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	4a36      	ldr	r2, [pc, #216]	; (8000884 <HAL_ADC_MspInit+0x144>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b0:	4b34      	ldr	r3, [pc, #208]	; (8000884 <HAL_ADC_MspInit+0x144>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80007bc:	2305      	movs	r3, #5
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c0:	2303      	movs	r3, #3
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f003 f941 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4827      	ldr	r0, [pc, #156]	; (8000888 <HAL_ADC_MspInit+0x148>)
 80007ea:	f003 f935 	bl	8003a58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2101      	movs	r1, #1
 80007f2:	2012      	movs	r0, #18
 80007f4:	f003 f895 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007f8:	2012      	movs	r0, #18
 80007fa:	f003 f8ac 	bl	8003956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007fe:	e03a      	b.n	8000876 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <HAL_ADC_MspInit+0x14c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d135      	bne.n	8000876 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <HAL_ADC_MspInit+0x140>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <HAL_ADC_MspInit+0x140>)
 8000812:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <HAL_ADC_MspInit+0x140>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d10b      	bne.n	8000834 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	4a18      	ldr	r2, [pc, #96]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <HAL_ADC_MspInit+0x144>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_ADC_MspInit+0x144>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800084c:	2340      	movs	r3, #64	; 0x40
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000850:	2303      	movs	r3, #3
 8000852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f003 f8f9 	bl	8003a58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2101      	movs	r1, #1
 800086a:	2012      	movs	r0, #18
 800086c:	f003 f859 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000870:	2012      	movs	r0, #18
 8000872:	f003 f870 	bl	8003956 <HAL_NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3730      	adds	r7, #48	; 0x30
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000028 	.word	0x20000028
 8000884:	40021000 	.word	0x40021000
 8000888:	48000400 	.word	0x48000400
 800088c:	50000100 	.word	0x50000100

08000890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_GPIO_Init+0xa8>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_GPIO_Init+0xac>)
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_GPIO_Init+0xb0>)
 800091c:	f003 f89c 	bl	8003a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	210f      	movs	r1, #15
 8000924:	2028      	movs	r0, #40	; 0x28
 8000926:	f002 fffc 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092a:	2028      	movs	r0, #40	; 0x28
 800092c:	f003 f813 	bl	8003956 <HAL_NVIC_EnableIRQ>

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	10110000 	.word	0x10110000
 8000940:	48000800 	.word	0x48000800

08000944 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	; 0x40
 8000948:	af00      	add	r7, sp, #0


	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 800094a:	217f      	movs	r1, #127	; 0x7f
 800094c:	4831      	ldr	r0, [pc, #196]	; (8000a14 <start_up+0xd0>)
 800094e:	f002 f829 	bl	80029a4 <HAL_ADCEx_Calibration_Start>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d008      	beq.n	800096a <start_up+0x26>
 8000958:	217f      	movs	r1, #127	; 0x7f
 800095a:	482f      	ldr	r0, [pc, #188]	; (8000a18 <start_up+0xd4>)
 800095c:	f002 f822 	bl	80029a4 <HAL_ADCEx_Calibration_Start>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <start_up+0x26>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <start_up+0x28>
 800096a:	2300      	movs	r3, #0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d14c      	bne.n	8000a0a <start_up+0xc6>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)));
 8000970:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <start_up+0xd8>)
 8000972:	492b      	ldr	r1, [pc, #172]	; (8000a20 <start_up+0xdc>)
 8000974:	482b      	ldr	r0, [pc, #172]	; (8000a24 <start_up+0xe0>)
 8000976:	f003 fb0a 	bl	8003f8e <HAL_OPAMPEx_SelfCalibrateAll>
		{
			ADC_InjectionConfTypeDef sConfigInjected;

			//////// start OPAMP 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 800097a:	482a      	ldr	r0, [pc, #168]	; (8000a24 <start_up+0xe0>)
 800097c:	f003 fad6 	bl	8003f2c <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 8000980:	4827      	ldr	r0, [pc, #156]	; (8000a20 <start_up+0xdc>)
 8000982:	f003 fad3 	bl	8003f2c <HAL_OPAMP_Start>

			//////// start ADC 1 2 ///////////////////////////////////



			HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000986:	4823      	ldr	r0, [pc, #140]	; (8000a14 <start_up+0xd0>)
 8000988:	f002 f86e 	bl	8002a68 <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 800098c:	4822      	ldr	r0, [pc, #136]	; (8000a18 <start_up+0xd4>)
 800098e:	f002 f86b 	bl	8002a68 <HAL_ADCEx_InjectedStart_IT>





			TIM2->ARR= TIM2_ARR;
 8000992:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000996:	f240 2257 	movw	r2, #599	; 0x257
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM2->PSC= TIM2_PSC;
 800099c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28

			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <start_up+0xe4>)
 80009a8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <start_up+0xe4>)
 80009b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR4=(TIM1->ARR-2);
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <start_up+0xe4>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <start_up+0xe4>)
 80009bc:	3b02      	subs	r3, #2
 80009be:	6413      	str	r3, [r2, #64]	; 0x40

			TIM1->CCR1=0;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <start_up+0xe4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
			//TIM1->CCR1=30000;

			HAL_TIM_Base_Start_IT(&htim2);
 80009c6:	4819      	ldr	r0, [pc, #100]	; (8000a2c <start_up+0xe8>)
 80009c8:	f004 fdf6 	bl	80055b8 <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009cc:	2100      	movs	r1, #0
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <start_up+0xe8>)
 80009d0:	f004 fe8a 	bl	80056e8 <HAL_TIM_PWM_Start>

			HAL_TIM_Base_Start_IT(&htim1);
 80009d4:	4816      	ldr	r0, [pc, #88]	; (8000a30 <start_up+0xec>)
 80009d6:	f004 fdef 	bl	80055b8 <HAL_TIM_Base_Start_IT>

				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009da:	2100      	movs	r1, #0
 80009dc:	4814      	ldr	r0, [pc, #80]	; (8000a30 <start_up+0xec>)
 80009de:	f004 fe83 	bl	80056e8 <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80009e2:	2100      	movs	r1, #0
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <start_up+0xec>)
 80009e6:	f005 ffcb 	bl	8006980 <HAL_TIMEx_PWMN_Start>
			   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009ea:	2104      	movs	r1, #4
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <start_up+0xec>)
 80009ee:	f004 fe7b 	bl	80056e8 <HAL_TIM_PWM_Start>
			   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80009f2:	2104      	movs	r1, #4
 80009f4:	480e      	ldr	r0, [pc, #56]	; (8000a30 <start_up+0xec>)
 80009f6:	f005 ffc3 	bl	8006980 <HAL_TIMEx_PWMN_Start>
			    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009fa:	2108      	movs	r1, #8
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <start_up+0xec>)
 80009fe:	f004 fe73 	bl	80056e8 <HAL_TIM_PWM_Start>
			    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000a02:	2108      	movs	r1, #8
 8000a04:	480a      	ldr	r0, [pc, #40]	; (8000a30 <start_up+0xec>)
 8000a06:	f005 ffbb 	bl	8006980 <HAL_TIMEx_PWMN_Start>
		}


	   }

}
 8000a0a:	bf00      	nop
 8000a0c:	3740      	adds	r7, #64	; 0x40
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000098 	.word	0x20000098
 8000a18:	2000002c 	.word	0x2000002c
 8000a1c:	20000258 	.word	0x20000258
 8000a20:	2000021c 	.word	0x2000021c
 8000a24:	20000294 	.word	0x20000294
 8000a28:	40012c00 	.word	0x40012c00
 8000a2c:	20000368 	.word	0x20000368
 8000a30:	2000031c 	.word	0x2000031c

08000a34 <HAL_ADCEx_InjectedConvCpltCallback>:
	else{}
}


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b092      	sub	sp, #72	; 0x48
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	ADC_InjectionConfTypeDef sConfigInjected;


	index_event_adc++;
 8000a3c:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a42      	ldr	r2, [pc, #264]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8000a44:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000a46:	2109      	movs	r1, #9
 8000a48:	4841      	ldr	r0, [pc, #260]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a4a:	f002 f93d 	bl	8002cc8 <HAL_ADCEx_InjectedGetValue>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000a52:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8000a54:	bf00      	nop
 8000a56:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a3c      	ldr	r2, [pc, #240]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	f003 0320 	and.w	r3, r3, #32
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1f5      	bne.n	8000a56 <HAL_ADCEx_InjectedConvCpltCallback+0x22>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8000a6a:	f240 110f 	movw	r1, #271	; 0x10f
 8000a6e:	4838      	ldr	r0, [pc, #224]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a70:	f002 f92a 	bl	8002cc8 <HAL_ADCEx_InjectedGetValue>
 8000a74:	4602      	mov	r2, r0
 8000a76:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 8000a78:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8000a7a:	bf00      	nop
 8000a7c:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a33      	ldr	r2, [pc, #204]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	f003 0320 	and.w	r3, r3, #32
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f5      	bne.n	8000a7c <HAL_ADCEx_InjectedConvCpltCallback+0x48>
    adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8000a90:	2109      	movs	r1, #9
 8000a92:	4832      	ldr	r0, [pc, #200]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000a94:	f002 f918 	bl	8002cc8 <HAL_ADCEx_InjectedGetValue>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8000a9c:	601a      	str	r2, [r3, #0]
    while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8000a9e:	bf00      	nop
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2d      	ldr	r2, [pc, #180]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f5      	bne.n	8000aa0 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>


	if(index_event_adc<500)
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000abc:	d206      	bcs.n	8000acc <HAL_ADCEx_InjectedConvCpltCallback+0x98>
	{


	    HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000abe:	4824      	ldr	r0, [pc, #144]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000ac0:	f001 ffd2 	bl	8002a68 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000ac4:	4825      	ldr	r0, [pc, #148]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000ac6:	f001 ffcf 	bl	8002a68 <HAL_ADCEx_InjectedStart_IT>


	// HAL_ADCEx_InjectedStart_IT(&hadc1);
	// HAL_ADCEx_InjectedStart_IT(&hadc2);

}
 8000aca:	e03b      	b.n	8000b44 <HAL_ADCEx_InjectedConvCpltCallback+0x110>
	else if(index_event_adc == 500)
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ad4:	d130      	bne.n	8000b38 <HAL_ADCEx_InjectedConvCpltCallback+0x104>
		       HAL_ADCEx_InjectedStop_IT(&hadc1);
 8000ad6:	481e      	ldr	r0, [pc, #120]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000ad8:	f002 f8ac 	bl	8002c34 <HAL_ADCEx_InjectedStop_IT>
			   HAL_ADCEx_InjectedStop_IT(&hadc2);
 8000adc:	481f      	ldr	r0, [pc, #124]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000ade:	f002 f8a9 	bl	8002c34 <HAL_ADCEx_InjectedStop_IT>
			    offset1=adc_Ia-adc_Ic;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8000aee:	6013      	str	r3, [r2, #0]
			    offset2=adc_Ia-adc_Ib;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <HAL_ADCEx_InjectedConvCpltCallback+0x134>)
 8000afc:	6013      	str	r3, [r2, #0]
			    ADC1->OFR1=ADC1->OFR1 | (adc_Ia-adc_Ic);
 8000afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000b06:	6819      	ldr	r1, [r3, #0]
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <HAL_ADCEx_InjectedConvCpltCallback+0x124>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1acb      	subs	r3, r1, r3
 8000b0e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000b12:	4313      	orrs	r3, r2
 8000b14:	660b      	str	r3, [r1, #96]	; 0x60
			    ADC2->OFR1=ADC2->OFR1 | (adc_Ia-adc_Ib);
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8000b18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_ADCEx_InjectedConvCpltCallback+0x120>)
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_ADCEx_InjectedConvCpltCallback+0x12c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1acb      	subs	r3, r1, r3
 8000b24:	4911      	ldr	r1, [pc, #68]	; (8000b6c <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8000b26:	4313      	orrs	r3, r2
 8000b28:	660b      	str	r3, [r1, #96]	; 0x60
			    HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000b2a:	4809      	ldr	r0, [pc, #36]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000b2c:	f001 ff9c 	bl	8002a68 <HAL_ADCEx_InjectedStart_IT>
			    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000b32:	f001 ff99 	bl	8002a68 <HAL_ADCEx_InjectedStart_IT>
}
 8000b36:	e005      	b.n	8000b44 <HAL_ADCEx_InjectedConvCpltCallback+0x110>
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 8000b3a:	f001 ff95 	bl	8002a68 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <HAL_ADCEx_InjectedConvCpltCallback+0x128>)
 8000b40:	f001 ff92 	bl	8002a68 <HAL_ADCEx_InjectedStart_IT>
}
 8000b44:	bf00      	nop
 8000b46:	3748      	adds	r7, #72	; 0x48
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200001f4 	.word	0x200001f4
 8000b50:	20000098 	.word	0x20000098
 8000b54:	20000190 	.word	0x20000190
 8000b58:	20000200 	.word	0x20000200
 8000b5c:	2000002c 	.word	0x2000002c
 8000b60:	2000012c 	.word	0x2000012c
 8000b64:	20000124 	.word	0x20000124
 8000b68:	20000164 	.word	0x20000164
 8000b6c:	50000100 	.word	0x50000100

08000b70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b80:	d16f      	bne.n	8000c62 <HAL_GPIO_EXTI_Callback+0xf2>
	{
		switch (licznik)
 8000b82:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x100>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d85f      	bhi.n	8000c4a <HAL_GPIO_EXTI_Callback+0xda>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <HAL_GPIO_EXTI_Callback+0x20>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000c37 	.word	0x08000c37
 8000b94:	08000c21 	.word	0x08000c21
 8000b98:	08000bad 	.word	0x08000bad
 8000b9c:	08000bc5 	.word	0x08000bc5
 8000ba0:	08000bdb 	.word	0x08000bdb
 8000ba4:	08000bf3 	.word	0x08000bf3
 8000ba8:	08000c09 	.word	0x08000c09
								{
								case 2:
									TIM1->CCR1=30000;
 8000bac:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bae:	f247 5230 	movw	r2, #30000	; 0x7530
 8000bb2:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=30000;
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bb6:	f247 5230 	movw	r2, #30000	; 0x7530
 8000bba:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	63da      	str	r2, [r3, #60]	; 0x3c



							    break;
 8000bc2:	e042      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0xda>

								case 3:
									TIM1->CCR1=0;
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=30000;
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bcc:	f247 5230 	movw	r2, #30000	; 0x7530
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8000bd8:	e037      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0xda>

								case 4:
									TIM1->CCR1=0;
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=30000;
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000be2:	f247 5230 	movw	r2, #30000	; 0x7530
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=30000;
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bea:	f247 5230 	movw	r2, #30000	; 0x7530
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8000bf0:	e02b      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0xda>

							    case 5:
							    	TIM1->CCR1=0;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=30000;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c00:	f247 5230 	movw	r2, #30000	; 0x7530
 8000c04:	63da      	str	r2, [r3, #60]	; 0x3c


								break;
 8000c06:	e020      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0xda>

							    case 6:
							    	TIM1->CCR1=30000;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c0a:	f247 5230 	movw	r2, #30000	; 0x7530
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=30000;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c18:	f247 5230 	movw	r2, #30000	; 0x7530
 8000c1c:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8000c1e:	e014      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0xda>

							    case 1:
							    TIM1->CCR1=30000;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c22:	f247 5230 	movw	r2, #30000	; 0x7530
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
							    TIM1->CCR2=0;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
							    TIM1->CCR3=0;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c
							    break;
 8000c34:	e009      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0xda>

							    case 0:
							   							    TIM1->CCR1=0;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
							   							    TIM1->CCR2=0;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
							   							    TIM1->CCR3=0;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
							   							    break;
 8000c48:	bf00      	nop
								}

								licznik++;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x100>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x100>)
 8000c52:	6013      	str	r3, [r2, #0]



								if(licznik>6)
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x100>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b06      	cmp	r3, #6
 8000c5a:	d902      	bls.n	8000c62 <HAL_GPIO_EXTI_Callback+0xf2>
								licznik=0;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x100>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]




	}
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200001e8 	.word	0x200001e8
 8000c74:	40012c00 	.word	0x40012c00

08000c78 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d103      	bne.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		if(TIM1->CNT >= ((TIM1->ARR)-10))
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	}



}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40012c00 	.word	0x40012c00

08000ca4 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000


		}
	}

}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f000 fddf 	bl	8001886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc8:	f000 f817 	bl	8000cfa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f7ff fde0 	bl	8000890 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cd0:	f000 fa2c 	bl	800112c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000cd4:	f000 fb80 	bl	80013d8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000cd8:	f000 fd14 	bl	8001704 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cdc:	f000 fb06 	bl	80012ec <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ce0:	f7ff fc1a 	bl	8000518 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ce4:	f7ff fcb4 	bl	8000650 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8000ce8:	f000 f874 	bl	8000dd4 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000cec:	f000 f8a0 	bl	8000e30 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8000cf0:	f000 f8cc 	bl	8000e8c <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


    start_up();
 8000cf4:	f7ff fe26 	bl	8000944 <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <main+0x38>

08000cfa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b0a4      	sub	sp, #144	; 0x90
 8000cfe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d04:	2238      	movs	r2, #56	; 0x38
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f007 feb1 	bl	8008a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2244      	movs	r2, #68	; 0x44
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f007 fea3 	bl	8008a70 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f003 fc24 	bl	8004578 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d30:	2301      	movs	r3, #1
 8000d32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000d46:	2350      	movs	r3, #80	; 0x50
 8000d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 fcac 	bl	80046c0 <HAL_RCC_OscConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000d6e:	f000 f82a 	bl	8000dc6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d72:	230f      	movs	r3, #15
 8000d74:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d76:	2303      	movs	r3, #3
 8000d78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d8a:	2107      	movs	r1, #7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f003 ffaf 	bl	8004cf0 <HAL_RCC_ClockConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d98:	f000 f815 	bl	8000dc6 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000d9c:	f248 0302 	movw	r3, #32770	; 0x8002
 8000da0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000da6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	4618      	mov	r0, r3
 8000db0:	f004 f9ba 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dba:	f000 f804 	bl	8000dc6 <Error_Handler>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3790      	adds	r7, #144	; 0x90
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <MX_OPAMP1_Init+0x58>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000de6:	2240      	movs	r2, #64	; 0x40
 8000de8:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000dfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000e06:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_OPAMP1_Init+0x54>)
 8000e14:	f002 ffba 	bl	8003d8c <HAL_OPAMP_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8000e1e:	f7ff ffd2 	bl	8000dc6 <Error_Handler>
  }

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000294 	.word	0x20000294
 8000e2c:	40010300 	.word	0x40010300

08000e30 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <MX_OPAMP2_Init+0x58>)
 8000e38:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e42:	2240      	movs	r2, #64	; 0x40
 8000e44:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e62:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_OPAMP2_Init+0x54>)
 8000e70:	f002 ff8c 	bl	8003d8c <HAL_OPAMP_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8000e7a:	f7ff ffa4 	bl	8000dc6 <Error_Handler>
  }

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000021c 	.word	0x2000021c
 8000e88:	40010304 	.word	0x40010304

08000e8c <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <MX_OPAMP3_Init+0x58>)
 8000e94:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000ebe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_OPAMP3_Init+0x54>)
 8000ecc:	f002 ff5e 	bl	8003d8c <HAL_OPAMP_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8000ed6:	f7ff ff76 	bl	8000dc6 <Error_Handler>
  }

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000258 	.word	0x20000258
 8000ee4:	40010308 	.word	0x40010308

08000ee8 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a2e      	ldr	r2, [pc, #184]	; (8000fc0 <HAL_OPAMP_MspInit+0xd8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d119      	bne.n	8000f3e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <HAL_OPAMP_MspInit+0xdc>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a2d      	ldr	r2, [pc, #180]	; (8000fc4 <HAL_OPAMP_MspInit+0xdc>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <HAL_OPAMP_MspInit+0xdc>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f22:	230e      	movs	r3, #14
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f002 fd8e 	bl	8003a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8000f3c:	e03b      	b.n	8000fb6 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <HAL_OPAMP_MspInit+0xe0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d119      	bne.n	8000f7c <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_OPAMP_MspInit+0xdc>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_OPAMP_MspInit+0xdc>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_OPAMP_MspInit+0xdc>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f60:	23e0      	movs	r3, #224	; 0xe0
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f64:	2303      	movs	r3, #3
 8000f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f002 fd6f 	bl	8003a58 <HAL_GPIO_Init>
}
 8000f7a:	e01c      	b.n	8000fb6 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <HAL_OPAMP_MspInit+0xe4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d117      	bne.n	8000fb6 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_OPAMP_MspInit+0xdc>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_OPAMP_MspInit+0xdc>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_OPAMP_MspInit+0xdc>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <HAL_OPAMP_MspInit+0xe8>)
 8000fb2:	f002 fd51 	bl	8003a58 <HAL_GPIO_Init>
}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40010300 	.word	0x40010300
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010304 	.word	0x40010304
 8000fcc:	40010308 	.word	0x40010308
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6093      	str	r3, [r2, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_MspInit+0x44>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_MspInit+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6613      	str	r3, [r2, #96]	; 0x60
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_MspInit+0x44>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_MspInit+0x44>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x44>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800102a:	f7ff ffd3 	bl	8000fd4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 fc4c 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <ADC1_2_IRQHandler+0x14>)
 800109e:	f000 ff4d 	bl	8001f3c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <ADC1_2_IRQHandler+0x18>)
 80010a4:	f000 ff4a 	bl	8001f3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000098 	.word	0x20000098
 80010b0:	2000002c 	.word	0x2000002c

080010b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80010ba:	f004 fc8d 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000031c 	.word	0x2000031c

080010c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TIM2_IRQHandler+0x10>)
 80010ce:	f004 fc83 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000368 	.word	0x20000368

080010dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <USART2_IRQHandler+0x10>)
 80010e2:	f005 feab 	bl	8006e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200003b4 	.word	0x200003b4

080010f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010f8:	f002 fe30 	bl	8003d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <SystemInit+0x28>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <SystemInit+0x28>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SystemInit+0x28>)
 8001116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800111a:	609a      	str	r2, [r3, #8]
#endif
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b09c      	sub	sp, #112	; 0x70
 8001130:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2234      	movs	r2, #52	; 0x34
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f007 fc82 	bl	8008a70 <memset>

  htim1.Instance = TIM1;
 800116c:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 800116e:	4a5e      	ldr	r2, [pc, #376]	; (80012e8 <MX_TIM1_Init+0x1bc>)
 8001170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001172:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001178:	4b5a      	ldr	r3, [pc, #360]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 800117a:	2220      	movs	r2, #32
 800117c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800117e:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118a:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001196:	4853      	ldr	r0, [pc, #332]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 8001198:	f004 f9b6 	bl	8005508 <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011a2:	f7ff fe10 	bl	8000dc6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011b0:	4619      	mov	r1, r3
 80011b2:	484c      	ldr	r0, [pc, #304]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 80011b4:	f004 fea0 	bl	8005ef8 <HAL_TIM_ConfigClockSource>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011be:	f7ff fe02 	bl	8000dc6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c2:	4848      	ldr	r0, [pc, #288]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 80011c4:	f004 fa2e 	bl	8005624 <HAL_TIM_PWM_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011ce:	f7ff fdfa 	bl	8000dc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80011d2:	2370      	movs	r3, #112	; 0x70
 80011d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011e2:	4619      	mov	r1, r3
 80011e4:	483f      	ldr	r0, [pc, #252]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 80011e6:	f005 fc4b 	bl	8006a80 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80011f0:	f7ff fde9 	bl	8000dc6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f4:	2360      	movs	r3, #96	; 0x60
 80011f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001200:	2300      	movs	r3, #0
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001210:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	4832      	ldr	r0, [pc, #200]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 800121a:	f004 fd5d 	bl	8005cd8 <HAL_TIM_PWM_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001224:	f7ff fdcf 	bl	8000dc6 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800122c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001230:	2204      	movs	r2, #4
 8001232:	4619      	mov	r1, r3
 8001234:	482b      	ldr	r0, [pc, #172]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 8001236:	f004 fd4f 	bl	8005cd8 <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001240:	f7ff fdc1 	bl	8000dc6 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001248:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800124c:	2208      	movs	r2, #8
 800124e:	4619      	mov	r1, r3
 8001250:	4824      	ldr	r0, [pc, #144]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 8001252:	f004 fd41 	bl	8005cd8 <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800125c:	f7ff fdb3 	bl	8000dc6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001260:	2370      	movs	r3, #112	; 0x70
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001268:	2300      	movs	r3, #0
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800126c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001270:	220c      	movs	r2, #12
 8001272:	4619      	mov	r1, r3
 8001274:	481b      	ldr	r0, [pc, #108]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 8001276:	f004 fd2f 	bl	8005cd8 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001280:	f7ff fda1 	bl	8000dc6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001288:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800128a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8001294:	2344      	movs	r3, #68	; 0x44
 8001296:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800129c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 80012b4:	2303      	movs	r3, #3
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4807      	ldr	r0, [pc, #28]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 80012c6:	f005 fc5d 	bl	8006b84 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 80012d0:	f7ff fd79 	bl	8000dc6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <MX_TIM1_Init+0x1b8>)
 80012d6:	f000 f969 	bl	80015ac <HAL_TIM_MspPostInit>

}
 80012da:	bf00      	nop
 80012dc:	3770      	adds	r7, #112	; 0x70
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000031c 	.word	0x2000031c
 80012e8:	40012c00 	.word	0x40012c00

080012ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_TIM2_Init+0xe8>)
 8001320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001324:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_TIM2_Init+0xe8>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_TIM2_Init+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_TIM2_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_TIM2_Init+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_TIM2_Init+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001344:	4823      	ldr	r0, [pc, #140]	; (80013d4 <MX_TIM2_Init+0xe8>)
 8001346:	f004 f8df 	bl	8005508 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001350:	f7ff fd39 	bl	8000dc6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	4619      	mov	r1, r3
 8001360:	481c      	ldr	r0, [pc, #112]	; (80013d4 <MX_TIM2_Init+0xe8>)
 8001362:	f004 fdc9 	bl	8005ef8 <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800136c:	f7ff fd2b 	bl	8000dc6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <MX_TIM2_Init+0xe8>)
 8001372:	f004 f957 	bl	8005624 <HAL_TIM_PWM_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800137c:	f7ff fd23 	bl	8000dc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001380:	2320      	movs	r3, #32
 8001382:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_TIM2_Init+0xe8>)
 8001390:	f005 fb76 	bl	8006a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800139a:	f7ff fd14 	bl	8000dc6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139e:	2360      	movs	r3, #96	; 0x60
 80013a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM2_Init+0xe8>)
 80013b6:	f004 fc8f 	bl	8005cd8 <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013c0:	f7ff fd01 	bl	8000dc6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM2_Init+0xe8>)
 80013c6:	f000 f8f1 	bl	80015ac <HAL_TIM_MspPostInit>

}
 80013ca:	bf00      	nop
 80013cc:	3738      	adds	r7, #56	; 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000368 	.word	0x20000368

080013d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	2224      	movs	r2, #36	; 0x24
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 fb42 	bl	8008a70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <MX_TIM4_Init+0xa0>)
 80013f8:	4a20      	ldr	r2, [pc, #128]	; (800147c <MX_TIM4_Init+0xa4>)
 80013fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_TIM4_Init+0xa0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_TIM4_Init+0xa0>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_TIM4_Init+0xa0>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_TIM4_Init+0xa0>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_TIM4_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_TIM4_Init+0xa8>)
 800141c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001422:	2301      	movs	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001432:	2301      	movs	r3, #1
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <MX_TIM4_Init+0xa0>)
 8001446:	f004 fa21 	bl	800588c <HAL_TIM_Encoder_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001450:	f7ff fcb9 	bl	8000dc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_TIM4_Init+0xa0>)
 8001462:	f005 fb0d 	bl	8006a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800146c:	f7ff fcab 	bl	8000dc6 <Error_Handler>
  }

}
 8001470:	bf00      	nop
 8001472:	3730      	adds	r7, #48	; 0x30
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002d0 	.word	0x200002d0
 800147c:	40000800 	.word	0x40000800
 8001480:	00010006 	.word	0x00010006

08001484 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <HAL_TIM_Base_MspInit+0x78>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d114      	bne.n	80014c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_TIM_Base_MspInit+0x7c>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	4a19      	ldr	r2, [pc, #100]	; (8001500 <HAL_TIM_Base_MspInit+0x7c>)
 800149c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a0:	6613      	str	r3, [r2, #96]	; 0x60
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_TIM_Base_MspInit+0x7c>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2019      	movs	r0, #25
 80014b4:	f002 fa35 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014b8:	2019      	movs	r0, #25
 80014ba:	f002 fa4c 	bl	8003956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014be:	e018      	b.n	80014f2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c8:	d113      	bne.n	80014f2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_TIM_Base_MspInit+0x7c>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <HAL_TIM_Base_MspInit+0x7c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6593      	str	r3, [r2, #88]	; 0x58
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_TIM_Base_MspInit+0x7c>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2103      	movs	r1, #3
 80014e6:	201c      	movs	r0, #28
 80014e8:	f002 fa1b 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014ec:	201c      	movs	r0, #28
 80014ee:	f002 fa32 	bl	8003956 <HAL_NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40012c00 	.word	0x40012c00
 8001500:	40021000 	.word	0x40021000

08001504 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d138      	bne.n	8001598 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6593      	str	r3, [r2, #88]	; 0x58
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_TIM_Encoder_MspInit+0xa0>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 8001556:	23c0      	movs	r3, #192	; 0xc0
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2302      	movs	r3, #2
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001566:	2302      	movs	r3, #2
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001572:	f002 fa71 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 8001576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001584:	2302      	movs	r3, #2
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001588:	2302      	movs	r3, #2
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001594:	f002 fa60 	bl	8003a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40000800 	.word	0x40000800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400

080015ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a4a      	ldr	r2, [pc, #296]	; (80016f4 <HAL_TIM_MspPostInit+0x148>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d16a      	bne.n	80016a4 <HAL_TIM_MspPostInit+0xf8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	4a49      	ldr	r2, [pc, #292]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001620:	2302      	movs	r3, #2
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001628:	2304      	movs	r3, #4
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	4832      	ldr	r0, [pc, #200]	; (80016fc <HAL_TIM_MspPostInit+0x150>)
 8001634:	f002 fa10 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001642:	2302      	movs	r3, #2
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800164a:	2304      	movs	r3, #4
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	482a      	ldr	r0, [pc, #168]	; (8001700 <HAL_TIM_MspPostInit+0x154>)
 8001656:	f002 f9ff 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800165a:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001664:	2302      	movs	r3, #2
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001668:	2302      	movs	r3, #2
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800166c:	2306      	movs	r3, #6
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f002 f9ed 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800167e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001690:	230b      	movs	r3, #11
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f002 f9db 	bl	8003a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016a2:	e022      	b.n	80016ea <HAL_TIM_MspPostInit+0x13e>
  else if(timHandle->Instance==TIM2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ac:	d11d      	bne.n	80016ea <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_TIM_MspPostInit+0x14c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 80016c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016d0:	2302      	movs	r3, #2
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016d8:	2301      	movs	r3, #1
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f002 f9b7 	bl	8003a58 <HAL_GPIO_Init>
}
 80016ea:	bf00      	nop
 80016ec:	3730      	adds	r7, #48	; 0x30
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	48000800 	.word	0x48000800
 8001700:	48000400 	.word	0x48000400

08001704 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <MX_USART2_UART_Init+0x90>)
 800170a:	4a23      	ldr	r2, [pc, #140]	; (8001798 <MX_USART2_UART_Init+0x94>)
 800170c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_USART2_UART_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_USART2_UART_Init+0x90>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_USART2_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <MX_USART2_UART_Init+0x90>)
 800174e:	f005 fb24 	bl	8006d9a <HAL_UART_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001758:	f7ff fb35 	bl	8000dc6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175c:	2100      	movs	r1, #0
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001760:	f007 f87e 	bl	8008860 <HAL_UARTEx_SetTxFifoThreshold>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800176a:	f7ff fb2c 	bl	8000dc6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176e:	2100      	movs	r1, #0
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001772:	f007 f8b3 	bl	80088dc <HAL_UARTEx_SetRxFifoThreshold>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800177c:	f7ff fb23 	bl	8000dc6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_USART2_UART_Init+0x90>)
 8001782:	f007 f834 	bl	80087ee <HAL_UARTEx_DisableFifoMode>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800178c:	f7ff fb1b 	bl	8000dc6 <Error_Handler>
  }

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200003b4 	.word	0x200003b4
 8001798:	40004400 	.word	0x40004400

0800179c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <HAL_UART_MspInit+0x8c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d12f      	bne.n	800181e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_UART_MspInit+0x90>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	4a1a      	ldr	r2, [pc, #104]	; (800182c <HAL_UART_MspInit+0x90>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_UART_MspInit+0x90>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_UART_MspInit+0x90>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_UART_MspInit+0x90>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_UART_MspInit+0x90>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80017ee:	2318      	movs	r3, #24
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fe:	2307      	movs	r3, #7
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4809      	ldr	r0, [pc, #36]	; (8001830 <HAL_UART_MspInit+0x94>)
 800180a:	f002 f925 	bl	8003a58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2108      	movs	r1, #8
 8001812:	2026      	movs	r0, #38	; 0x26
 8001814:	f002 f885 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001818:	2026      	movs	r0, #38	; 0x26
 800181a:	f002 f89c 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40004400 	.word	0x40004400
 800182c:	40021000 	.word	0x40021000
 8001830:	48000400 	.word	0x48000400

08001834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001836:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <LoopForever+0x6>)
  ldr r1, =_edata
 800183a:	490e      	ldr	r1, [pc, #56]	; (8001874 <LoopForever+0xa>)
  ldr r2, =_sidata
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <LoopForever+0xe>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001850:	4c0b      	ldr	r4, [pc, #44]	; (8001880 <LoopForever+0x16>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800185e:	f7ff fc4f 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001862:	f007 f8e1 	bl	8008a28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001866:	f7ff fa2b 	bl	8000cc0 <main>

0800186a <LoopForever>:

LoopForever:
    b LoopForever
 800186a:	e7fe      	b.n	800186a <LoopForever>
  ldr   r0, =_estack
 800186c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001878:	08008ad0 	.word	0x08008ad0
  ldr r2, =_sbss
 800187c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001880:	20000444 	.word	0x20000444

08001884 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <COMP1_2_3_IRQHandler>

08001886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f002 f83b 	bl	800390c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001896:	2000      	movs	r0, #0
 8001898:	f000 f80e 	bl	80018b8 <HAL_InitTick>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	71fb      	strb	r3, [r7, #7]
 80018a6:	e001      	b.n	80018ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018a8:	f7ff fba4 	bl	8000ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ac:	79fb      	ldrb	r3, [r7, #7]

}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_InitTick+0x68>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d022      	beq.n	8001912 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_InitTick+0x6c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_InitTick+0x68>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 f846 	bl	8003972 <HAL_SYSTICK_Config>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10f      	bne.n	800190c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	d809      	bhi.n	8001906 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f2:	2200      	movs	r2, #0
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	f04f 30ff 	mov.w	r0, #4294967295
 80018fa:	f002 f812 	bl	8003922 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_InitTick+0x70>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e007      	b.n	8001916 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	e004      	b.n	8001916 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	e001      	b.n	8001916 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000008 	.word	0x20000008
 8001924:	20000000 	.word	0x20000000
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_IncTick+0x1c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x20>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4413      	add	r3, r2
 800193a:	4a03      	ldr	r2, [pc, #12]	; (8001948 <HAL_IncTick+0x1c>)
 800193c:	6013      	str	r3, [r2, #0]
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	20000440 	.word	0x20000440
 800194c:	20000008 	.word	0x20000008

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000440 	.word	0x20000440

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d004      	beq.n	800198c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_Delay+0x40>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198c:	bf00      	nop
 800198e:	f7ff ffdf 	bl	8001950 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	429a      	cmp	r2, r3
 800199c:	d8f7      	bhi.n	800198e <HAL_Delay+0x26>
  {
  }
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008

080019ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	609a      	str	r2, [r3, #8]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6093      	str	r3, [r2, #8]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a8e:	d101      	bne.n	8001a94 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ab2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ab6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ade:	d101      	bne.n	8001ae4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b2e:	f043 0202 	orr.w	r2, r3, #2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_IsEnabled+0x18>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_IsEnabled+0x1a>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d101      	bne.n	8001b80 <LL_ADC_IsDisableOngoing+0x18>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <LL_ADC_IsDisableOngoing+0x1a>
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba2:	f043 0210 	orr.w	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d101      	bne.n	8001bce <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf0:	f043 0220 	orr.w	r2, r3, #32
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d101      	bne.n	8001c1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e16b      	b.n	8001f1e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7fe fd73 	bl	8000740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff04 	bl	8001a7a <LL_ADC_IsDeepPowerDownEnabled>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff feea 	bl	8001a56 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff1f 	bl	8001aca <LL_ADC_IsInternalRegulatorEnabled>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d113      	bne.n	8001cba <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff03 	bl	8001aa2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c9c:	4ba2      	ldr	r3, [pc, #648]	; (8001f28 <HAL_ADC_Init+0x2fc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	4aa2      	ldr	r2, [pc, #648]	; (8001f2c <HAL_ADC_Init+0x300>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cac:	e002      	b.n	8001cb4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f9      	bne.n	8001cae <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff03 	bl	8001aca <LL_ADC_IsInternalRegulatorEnabled>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	f043 0210 	orr.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff63 	bl	8001bb6 <LL_ADC_REG_IsConversionOngoing>
 8001cf0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 8106 	bne.w	8001f0c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 8102 	bne.w	8001f0c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d10:	f043 0202 	orr.w	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff10 	bl	8001b42 <LL_ADC_IsEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d111      	bne.n	8001d4c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d2c:	f7ff ff09 	bl	8001b42 <LL_ADC_IsEnabled>
 8001d30:	4604      	mov	r4, r0
 8001d32:	487f      	ldr	r0, [pc, #508]	; (8001f30 <HAL_ADC_Init+0x304>)
 8001d34:	f7ff ff05 	bl	8001b42 <LL_ADC_IsEnabled>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4619      	mov	r1, r3
 8001d46:	487b      	ldr	r0, [pc, #492]	; (8001f34 <HAL_ADC_Init+0x308>)
 8001d48:	f7ff fe30 	bl	80019ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7f5b      	ldrb	r3, [r3, #29]
 8001d50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d106      	bne.n	8001d88 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	045b      	lsls	r3, r3, #17
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <HAL_ADC_Init+0x30c>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff feef 	bl	8001bb6 <LL_ADC_REG_IsConversionOngoing>
 8001dd8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff10 	bl	8001c04 <LL_ADC_INJ_IsConversionOngoing>
 8001de4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d16d      	bne.n	8001ec8 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d16a      	bne.n	8001ec8 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001df6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dfe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e0e:	f023 0302 	bic.w	r3, r3, #2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d017      	beq.n	8001e54 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6911      	ldr	r1, [r2, #16]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001e52:	e013      	b.n	8001e7c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d118      	bne.n	8001eb8 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e9c:	4311      	orrs	r1, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	611a      	str	r2, [r3, #16]
 8001eb6:	e007      	b.n	8001ec8 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d10c      	bne.n	8001eea <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f023 010f 	bic.w	r1, r3, #15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	1e5a      	subs	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee8:	e007      	b.n	8001efa <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 020f 	bic.w	r2, r2, #15
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	f043 0201 	orr.w	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f0a:	e007      	b.n	8001f1c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	f043 0210 	orr.w	r2, r3, #16
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd90      	pop	{r4, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	053e2d63 	.word	0x053e2d63
 8001f30:	50000100 	.word	0x50000100
 8001f34:	50000300 	.word	0x50000300
 8001f38:	fff04007 	.word	0xfff04007

08001f3c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f58:	4883      	ldr	r0, [pc, #524]	; (8002168 <HAL_ADC_IRQHandler+0x22c>)
 8001f5a:	f7ff fd60 	bl	8001a1e <LL_ADC_GetMultimode>
 8001f5e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d017      	beq.n	8001f9a <HAL_ADC_IRQHandler+0x5e>
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d012      	beq.n	8001f9a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 feeb 	bl	8002d68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2202      	movs	r2, #2
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <HAL_ADC_IRQHandler+0x72>
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8085 	beq.w	80020c4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d07f      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fcf6 	bl	80019d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d064      	beq.n	80020b6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a5e      	ldr	r2, [pc, #376]	; (800216c <HAL_ADC_IRQHandler+0x230>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d002      	beq.n	8001ffc <HAL_ADC_IRQHandler+0xc0>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	e001      	b.n	8002000 <HAL_ADC_IRQHandler+0xc4>
 8001ffc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	4293      	cmp	r3, r2
 8002006:	d008      	beq.n	800201a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b05      	cmp	r3, #5
 8002012:	d002      	beq.n	800201a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b09      	cmp	r3, #9
 8002018:	d104      	bne.n	8002024 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	623b      	str	r3, [r7, #32]
 8002022:	e00d      	b.n	8002040 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a50      	ldr	r2, [pc, #320]	; (800216c <HAL_ADC_IRQHandler+0x230>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d002      	beq.n	8002034 <HAL_ADC_IRQHandler+0xf8>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e001      	b.n	8002038 <HAL_ADC_IRQHandler+0xfc>
 8002034:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002038:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d135      	bne.n	80020b6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b08      	cmp	r3, #8
 8002056:	d12e      	bne.n	80020b6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fdaa 	bl	8001bb6 <LL_ADC_REG_IsConversionOngoing>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11a      	bne.n	800209e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 020c 	bic.w	r2, r2, #12
 8002076:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d112      	bne.n	80020b6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	65da      	str	r2, [r3, #92]	; 0x5c
 800209c:	e00b      	b.n	80020b6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f95a 	bl	8002370 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	220c      	movs	r2, #12
 80020c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x19c>
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 809e 	beq.w	8002220 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8098 	beq.w	8002220 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fc73 	bl	80019f8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002112:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fc5a 	bl	80019d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800211e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_ADC_IRQHandler+0x230>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d002      	beq.n	8002130 <HAL_ADC_IRQHandler+0x1f4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	e001      	b.n	8002134 <HAL_ADC_IRQHandler+0x1f8>
 8002130:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	4293      	cmp	r3, r2
 800213a:	d008      	beq.n	800214e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b06      	cmp	r3, #6
 8002146:	d002      	beq.n	800214e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b07      	cmp	r3, #7
 800214c:	d104      	bne.n	8002158 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	623b      	str	r3, [r7, #32]
 8002156:	e011      	b.n	800217c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a03      	ldr	r2, [pc, #12]	; (800216c <HAL_ADC_IRQHandler+0x230>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d006      	beq.n	8002170 <HAL_ADC_IRQHandler+0x234>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	e005      	b.n	8002174 <HAL_ADC_IRQHandler+0x238>
 8002168:	50000300 	.word	0x50000300
 800216c:	50000100 	.word	0x50000100
 8002170:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002174:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002188:	2b00      	cmp	r3, #0
 800218a:	d142      	bne.n	8002212 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03f      	beq.n	8002212 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002198:	2b00      	cmp	r3, #0
 800219a:	d13a      	bne.n	8002212 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a6:	2b40      	cmp	r3, #64	; 0x40
 80021a8:	d133      	bne.n	8002212 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d12e      	bne.n	8002212 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fd23 	bl	8001c04 <LL_ADC_INJ_IsConversionOngoing>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11a      	bne.n	80021fa <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021d2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d112      	bne.n	8002212 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80021f8:	e00b      	b.n	8002212 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	f043 0210 	orr.w	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fc0e 	bl	8000a34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2260      	movs	r2, #96	; 0x60
 800221e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d011      	beq.n	800224e <HAL_ADC_IRQHandler+0x312>
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00c      	beq.n	800224e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f89f 	bl	8002384 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d012      	beq.n	800227e <HAL_ADC_IRQHandler+0x342>
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fd66 	bl	8002d40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <HAL_ADC_IRQHandler+0x372>
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00d      	beq.n	80022ae <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fd58 	bl	8002d54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d036      	beq.n	8002326 <HAL_ADC_IRQHandler+0x3ea>
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d031      	beq.n	8002326 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80022ca:	2301      	movs	r3, #1
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
 80022ce:	e014      	b.n	80022fa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022d6:	4825      	ldr	r0, [pc, #148]	; (800236c <HAL_ADC_IRQHandler+0x430>)
 80022d8:	f7ff fbaf 	bl	8001a3a <LL_ADC_GetMultiDMATransfer>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80022e2:	2301      	movs	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	e008      	b.n	80022fa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80022f6:	2301      	movs	r3, #1
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10e      	bne.n	800231e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002310:	f043 0202 	orr.w	r2, r3, #2
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f83d 	bl	8002398 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2210      	movs	r2, #16
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d018      	beq.n	8002362 <HAL_ADC_IRQHandler+0x426>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002336:	2b00      	cmp	r3, #0
 8002338:	d013      	beq.n	8002362 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	f043 0208 	orr.w	r2, r3, #8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fce5 	bl	8002d2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	50000300 	.word	0x50000300

08002370 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fbf7 	bl	8001bb6 <LL_ADC_REG_IsConversionOngoing>
 80023c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fc18 	bl	8001c04 <LL_ADC_INJ_IsConversionOngoing>
 80023d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8090 	beq.w	8002504 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d02a      	beq.n	8002448 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7f5b      	ldrb	r3, [r3, #29]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d126      	bne.n	8002448 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7f1b      	ldrb	r3, [r3, #28]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d122      	bne.n	8002448 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002406:	e014      	b.n	8002432 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	4a41      	ldr	r2, [pc, #260]	; (8002510 <ADC_ConversionStop+0x164>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d90d      	bls.n	800242c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	f043 0210 	orr.w	r2, r3, #16
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e06c      	b.n	8002506 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d1e3      	bne.n	8002408 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d014      	beq.n	8002478 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fbaf 	bl	8001bb6 <LL_ADC_REG_IsConversionOngoing>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00c      	beq.n	8002478 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fb80 	bl	8001b68 <LL_ADC_IsDisableOngoing>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d104      	bne.n	8002478 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fb8b 	bl	8001b8e <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d014      	beq.n	80024a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fbbe 	bl	8001c04 <LL_ADC_INJ_IsConversionOngoing>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fb68 	bl	8001b68 <LL_ADC_IsDisableOngoing>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d104      	bne.n	80024a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fb9a 	bl	8001bdc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d004      	beq.n	80024b8 <ADC_ConversionStop+0x10c>
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d105      	bne.n	80024be <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80024b2:	230c      	movs	r3, #12
 80024b4:	617b      	str	r3, [r7, #20]
        break;
 80024b6:	e005      	b.n	80024c4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80024b8:	2308      	movs	r3, #8
 80024ba:	617b      	str	r3, [r7, #20]
        break;
 80024bc:	e002      	b.n	80024c4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80024be:	2304      	movs	r3, #4
 80024c0:	617b      	str	r3, [r7, #20]
        break;
 80024c2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80024c4:	f7ff fa44 	bl	8001950 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80024ca:	e014      	b.n	80024f6 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80024cc:	f7ff fa40 	bl	8001950 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d90d      	bls.n	80024f6 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e007      	b.n	8002506 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e3      	bne.n	80024cc <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	a33fffff 	.word	0xa33fffff

08002514 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fb0e 	bl	8001b42 <LL_ADC_IsEnabled>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d146      	bne.n	80025ba <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <ADC_Enable+0xb0>)
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	f043 0210 	orr.w	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e032      	b.n	80025bc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fac9 	bl	8001af2 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002560:	f7ff f9f6 	bl	8001950 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002566:	e021      	b.n	80025ac <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fae8 	bl	8001b42 <LL_ADC_IsEnabled>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d104      	bne.n	8002582 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fab8 	bl	8001af2 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002582:	f7ff f9e5 	bl	8001950 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d90d      	bls.n	80025ac <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	f043 0210 	orr.w	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e007      	b.n	80025bc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d1d6      	bne.n	8002568 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	8000003f 	.word	0x8000003f

080025c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fac7 	bl	8001b68 <LL_ADC_IsDisableOngoing>
 80025da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff faae 	bl	8001b42 <LL_ADC_IsEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d040      	beq.n	800266e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d13d      	bne.n	800266e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030d 	and.w	r3, r3, #13
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d10c      	bne.n	800261a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fa88 	bl	8001b1a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2203      	movs	r2, #3
 8002610:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002612:	f7ff f99d 	bl	8001950 <HAL_GetTick>
 8002616:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002618:	e022      	b.n	8002660 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e01c      	b.n	8002670 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002636:	f7ff f98b 	bl	8001950 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d90d      	bls.n	8002660 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	f043 0210 	orr.w	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e007      	b.n	8002670 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e3      	bne.n	8002636 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <LL_ADC_SetCommonPathInternalCh>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_ADC_GetCommonPathInternalCh>:
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <LL_ADC_SetOffset>:
{
 80026bc:	b490      	push	{r4, r7}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3360      	adds	r3, #96	; 0x60
 80026ce:	461a      	mov	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80026d8:	6822      	ldr	r2, [r4, #0]
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <LL_ADC_SetOffset+0x40>)
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ee:	6023      	str	r3, [r4, #0]
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc90      	pop	{r4, r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	03fff000 	.word	0x03fff000

08002700 <LL_ADC_GetOffsetChannel>:
{
 8002700:	b490      	push	{r4, r7}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3360      	adds	r3, #96	; 0x60
 800270e:	461a      	mov	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bc90      	pop	{r4, r7}
 8002726:	4770      	bx	lr

08002728 <LL_ADC_SetOffsetState>:
{
 8002728:	b490      	push	{r4, r7}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3360      	adds	r3, #96	; 0x60
 8002738:	461a      	mov	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4313      	orrs	r3, r2
 800274c:	6023      	str	r3, [r4, #0]
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bc90      	pop	{r4, r7}
 8002756:	4770      	bx	lr

08002758 <LL_ADC_SetOffsetSign>:
{
 8002758:	b490      	push	{r4, r7}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3360      	adds	r3, #96	; 0x60
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4313      	orrs	r3, r2
 800277c:	6023      	str	r3, [r4, #0]
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bc90      	pop	{r4, r7}
 8002786:	4770      	bx	lr

08002788 <LL_ADC_SetOffsetSaturation>:
{
 8002788:	b490      	push	{r4, r7}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3360      	adds	r3, #96	; 0x60
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	6023      	str	r3, [r4, #0]
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc90      	pop	{r4, r7}
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	615a      	str	r2, [r3, #20]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_INJ_GetTrigAuto>:
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_SetChannelSamplingTime>:
{
 80027fa:	b490      	push	{r4, r7}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3314      	adds	r3, #20
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	0e5b      	lsrs	r3, r3, #25
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	4413      	add	r3, r2
 8002818:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800281a:	6822      	ldr	r2, [r4, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	0d1b      	lsrs	r3, r3, #20
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2107      	movs	r1, #7
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	401a      	ands	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	0d1b      	lsrs	r3, r3, #20
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	4313      	orrs	r3, r2
 800283e:	6023      	str	r3, [r4, #0]
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bc90      	pop	{r4, r7}
 8002848:	4770      	bx	lr
	...

0800284c <LL_ADC_SetChannelSingleDiff>:
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002864:	43db      	mvns	r3, r3
 8002866:	401a      	ands	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0318 	and.w	r3, r3, #24
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002870:	40d9      	lsrs	r1, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	400b      	ands	r3, r1
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287a:	431a      	orrs	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	0007ffff 	.word	0x0007ffff

08002894 <LL_ADC_GetMultimode>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 031f 	and.w	r3, r3, #31
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_IsEnabled>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <LL_ADC_IsEnabled+0x18>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <LL_ADC_IsEnabled+0x1a>
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_ADC_StartCalibration>:
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80028e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_IsCalibrationOnGoing>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800291c:	d101      	bne.n	8002922 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_ADC_REG_IsConversionOngoing>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d101      	bne.n	8002948 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_ADC_INJ_StartConversion>:
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002966:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800296a:	f043 0208 	orr.w	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	609a      	str	r2, [r3, #8]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_ADC_INJ_IsConversionOngoing>:
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b08      	cmp	r3, #8
 8002990:	d101      	bne.n	8002996 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_ADCEx_Calibration_Start+0x1c>
 80029bc:	2302      	movs	r3, #2
 80029be:	e04d      	b.n	8002a5c <HAL_ADCEx_Calibration_Start+0xb8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fdfd 	bl	80025c8 <ADC_Disable>
 80029ce:	4603      	mov	r3, r0
 80029d0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d136      	bne.n	8002a46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029e0:	f023 0302 	bic.w	r3, r3, #2
 80029e4:	f043 0202 	orr.w	r2, r3, #2
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6839      	ldr	r1, [r7, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff6f 	bl	80028d6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80029f8:	e014      	b.n	8002a24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d90d      	bls.n	8002a24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	f023 0312 	bic.w	r3, r3, #18
 8002a10:	f043 0210 	orr.w	r2, r3, #16
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e01b      	b.n	8002a5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff6d 	bl	8002908 <LL_ADC_IsCalibrationOnGoing>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e2      	bne.n	80029fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	f023 0303 	bic.w	r3, r3, #3
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a44:	e005      	b.n	8002a52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	0004de01 	.word	0x0004de01

08002a68 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a70:	486e      	ldr	r0, [pc, #440]	; (8002c2c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8002a72:	f7ff ff0f 	bl	8002894 <LL_ADC_GetMultimode>
 8002a76:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff7e 	bl	800297e <LL_ADC_INJ_IsConversionOngoing>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e0ca      	b.n	8002c22 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a96:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b2      	b.n	8002c22 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_ADCEx_InjectedStart_IT+0x62>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0ab      	b.n	8002c22 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fd1e 	bl	8002514 <ADC_Enable>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 809a 	bne.w	8002c18 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d006      	beq.n	8002afe <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af4:	f023 0208 	bic.w	r2, r3, #8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	661a      	str	r2, [r3, #96]	; 0x60
 8002afc:	e002      	b.n	8002b04 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a44      	ldr	r2, [pc, #272]	; (8002c30 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d002      	beq.n	8002b28 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	e001      	b.n	8002b2c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8002b28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d002      	beq.n	8002b3a <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2260      	movs	r2, #96	; 0x60
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b72:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d110      	bne.n	8002b9e <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0220 	bic.w	r2, r2, #32
 8002b8a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b9a:	605a      	str	r2, [r3, #4]
          break;
 8002b9c:	e010      	b.n	8002bc0 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bac:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0220 	orr.w	r2, r2, #32
 8002bbc:	605a      	str	r2, [r3, #4]
          break;
 8002bbe:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d002      	beq.n	8002bd0 <HAL_ADCEx_InjectedStart_IT+0x168>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	e001      	b.n	8002bd4 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8002bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d008      	beq.n	8002bee <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b06      	cmp	r3, #6
 8002be6:	d002      	beq.n	8002bee <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b07      	cmp	r3, #7
 8002bec:	d10d      	bne.n	8002c0a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fdf3 	bl	80027de <LL_ADC_INJ_GetTrigAuto>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d110      	bne.n	8002c20 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fea7 	bl	8002956 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002c08:	e00a      	b.n	8002c20 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c16:	e003      	b.n	8002c20 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	50000300 	.word	0x50000300
 8002c30:	50000100 	.word	0x50000100

08002c34 <HAL_ADCEx_InjectedStop_IT>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop() must be used.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef *hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_ADCEx_InjectedStop_IT+0x16>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e03a      	b.n	8002cc0 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going on injected group only. */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 8002c52:	2102      	movs	r1, #2
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fba9 	bl	80023ac <ADC_ConversionStop>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if injected conversions are effectively stopped   */
  /* and if no conversion on the other group (regular group) is intended to   */
  /* continue.                                                                */
  if (tmp_hal_status == HAL_OK)
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d128      	bne.n	8002cb6 <HAL_ADCEx_InjectedStop_IT+0x82>
  {
    /* Disable ADC end of conversion interrupt for injected channels */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_FLAG_JQOVF));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 628c 	bic.w	r2, r2, #1120	; 0x460
 8002c72:	605a      	str	r2, [r3, #4]

    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fe59 	bl	8002930 <LL_ADC_REG_IsConversionOngoing>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d112      	bne.n	8002caa <HAL_ADCEx_InjectedStop_IT+0x76>
    {
      /* 2. Disable the ADC peripheral */
      tmp_hal_status = ADC_Disable(hadc);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff fc9f 	bl	80025c8 <ADC_Disable>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	73fb      	strb	r3, [r7, #15]

      /* Check if ADC is effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d110      	bne.n	8002cb6 <HAL_ADCEx_InjectedStop_IT+0x82>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ca8:	e005      	b.n	8002cb6 <HAL_ADCEx_InjectedStop_IT+0x82>
    /* Conversion on injected group is stopped, but ADC not disabled since    */
    /* conversion on regular group is still running.                          */
    else
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f240 2215 	movw	r2, #533	; 0x215
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00e      	beq.n	8002cfa <HAL_ADCEx_InjectedGetValue+0x32>
 8002cdc:	f240 321b 	movw	r2, #795	; 0x31b
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_ADCEx_InjectedGetValue+0x26>
 8002ce4:	f240 120f 	movw	r2, #271	; 0x10f
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00c      	beq.n	8002d06 <HAL_ADCEx_InjectedGetValue+0x3e>
 8002cec:	e011      	b.n	8002d12 <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf6:	60fb      	str	r3, [r7, #12]
      break;
 8002cf8:	e011      	b.n	8002d1e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	60fb      	str	r3, [r7, #12]
      break;
 8002d04:	e00b      	b.n	8002d1e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0e:	60fb      	str	r3, [r7, #12]
      break;
 8002d10:	e005      	b.n	8002d1e <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1a:	60fb      	str	r3, [r7, #12]
      break;
 8002d1c:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0a8      	sub	sp, #160	; 0xa0
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002da0:	2302      	movs	r3, #2
 8002da2:	f000 bc39 	b.w	8003618 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d130      	bne.n	8002e20 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b09      	cmp	r3, #9
 8002dc4:	d179      	bne.n	8002eba <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	025b      	lsls	r3, r3, #9
 8002dd6:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002de2:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dee:	e007      	b.n	8002e00 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	025b      	lsls	r3, r3, #9
 8002df8:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8002dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e06:	4ba3      	ldr	r3, [pc, #652]	; (8003094 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002e12:	430b      	orrs	r3, r1
 8002e14:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e1c:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002e1e:	e04c      	b.n	8002eba <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d11d      	bne.n	8002e64 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002e4c:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e58:	e004      	b.n	8002e64 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 021f 	and.w	r2, r3, #31
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e88:	1e5a      	subs	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eaa:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fd5d 	bl	800297e <LL_ADC_INJ_IsConversionOngoing>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d124      	bne.n	8002f14 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d112      	bne.n	8002efa <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ee4:	055a      	lsls	r2, r3, #21
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eec:	051b      	lsls	r3, r3, #20
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	e00c      	b.n	8002f14 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002f0a:	055a      	lsls	r2, r3, #21
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fd09 	bl	8002930 <LL_ADC_REG_IsConversionOngoing>
 8002f1e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fd29 	bl	800297e <LL_ADC_INJ_IsConversionOngoing>
 8002f2c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 81d4 	bne.w	80032e2 <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 81cf 	bne.w	80032e2 <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d116      	bne.n	8002f82 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d108      	bne.n	8002f70 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002f6c:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002f6e:	e01f      	b.n	8002fb0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002f7e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002f80:	e016      	b.n	8002fb0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d109      	bne.n	8002fa0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002f9e:	e007      	b.n	8002fb0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002fae:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d110      	bne.n	8002fdc <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0202 	orr.w	r2, r2, #2
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	e007      	b.n	8002fec <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0202 	bic.w	r2, r2, #2
 8002fea:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff4:	d10f      	bne.n	8003016 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	4619      	mov	r1, r3
 8003002:	f7ff fbfa 	bl	80027fa <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fbd2 	bl	80027b8 <LL_ADC_SetSamplingTimeCommonConfig>
 8003014:	e00e      	b.n	8003034 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	461a      	mov	r2, r3
 8003024:	f7ff fbe9 	bl	80027fa <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fbc2 	bl	80027b8 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	08db      	lsrs	r3, r3, #3
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d025      	beq.n	80030a2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003066:	f7ff fb29 	bl	80026bc <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6919      	ldr	r1, [r3, #16]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	461a      	mov	r2, r3
 8003078:	f7ff fb6e 	bl	8002758 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800308c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003090:	e003      	b.n	800309a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003092:	bf00      	nop
 8003094:	04104000 	.word	0x04104000
 8003098:	2300      	movs	r3, #0
 800309a:	461a      	mov	r2, r3
 800309c:	f7ff fb74 	bl	8002788 <LL_ADC_SetOffsetSaturation>
 80030a0:	e11f      	b.n	80032e2 <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fb29 	bl	8002700 <LL_ADC_GetOffsetChannel>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <HAL_ADCEx_InjectedConfigChannel+0x352>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fb1e 	bl	8002700 <LL_ADC_GetOffsetChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	0e9b      	lsrs	r3, r3, #26
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	e014      	b.n	80030f8 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fb13 	bl	8002700 <LL_ADC_GetOffsetChannel>
 80030da:	4603      	mov	r3, r0
 80030dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	0e9b      	lsrs	r3, r3, #26
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	e00a      	b.n	8003126 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800311e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	429a      	cmp	r2, r3
 8003128:	d106      	bne.n	8003138 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff faf8 	bl	8002728 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fade 	bl	8002700 <LL_ADC_GetOffsetChannel>
 8003144:	4603      	mov	r3, r0
 8003146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fad3 	bl	8002700 <LL_ADC_GetOffsetChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	0e9b      	lsrs	r3, r3, #26
 800315e:	f003 021f 	and.w	r2, r3, #31
 8003162:	e010      	b.n	8003186 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fac8 	bl	8002700 <LL_ADC_GetOffsetChannel>
 8003170:	4603      	mov	r3, r0
 8003172:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800317c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <HAL_ADCEx_InjectedConfigChannel+0x422>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0e9b      	lsrs	r3, r3, #26
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	e00a      	b.n	80031b4 <HAL_ADCEx_InjectedConfigChannel+0x438>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 80031ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d106      	bne.n	80031c6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2200      	movs	r2, #0
 80031be:	2101      	movs	r1, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fab1 	bl	8002728 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2102      	movs	r1, #2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fa97 	bl	8002700 <LL_ADC_GetOffsetChannel>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <HAL_ADCEx_InjectedConfigChannel+0x476>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2102      	movs	r1, #2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fa8c 	bl	8002700 <LL_ADC_GetOffsetChannel>
 80031e8:	4603      	mov	r3, r0
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	f003 021f 	and.w	r2, r3, #31
 80031f0:	e010      	b.n	8003214 <HAL_ADCEx_InjectedConfigChannel+0x498>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2102      	movs	r1, #2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fa81 	bl	8002700 <LL_ADC_GetOffsetChannel>
 80031fe:	4603      	mov	r3, r0
 8003200:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800320a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	e00a      	b.n	8003242 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800323a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	429a      	cmp	r2, r3
 8003244:	d106      	bne.n	8003254 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2200      	movs	r2, #0
 800324c:	2102      	movs	r1, #2
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fa6a 	bl	8002728 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2103      	movs	r1, #3
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fa50 	bl	8002700 <LL_ADC_GetOffsetChannel>
 8003260:	4603      	mov	r3, r0
 8003262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <HAL_ADCEx_InjectedConfigChannel+0x504>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2103      	movs	r1, #3
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fa45 	bl	8002700 <LL_ADC_GetOffsetChannel>
 8003276:	4603      	mov	r3, r0
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	f003 021f 	and.w	r2, r3, #31
 800327e:	e010      	b.n	80032a2 <HAL_ADCEx_InjectedConfigChannel+0x526>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2103      	movs	r1, #3
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fa3a 	bl	8002700 <LL_ADC_GetOffsetChannel>
 800328c:	4603      	mov	r3, r0
 800328e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8003298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d105      	bne.n	80032ba <HAL_ADCEx_InjectedConfigChannel+0x53e>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	e00a      	b.n	80032d0 <HAL_ADCEx_InjectedConfigChannel+0x554>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d106      	bne.n	80032e2 <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2200      	movs	r2, #0
 80032da:	2103      	movs	r1, #3
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fa23 	bl	8002728 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fae2 	bl	80028b0 <LL_ADC_IsEnabled>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f040 810c 	bne.w	800350c <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	461a      	mov	r2, r3
 8003302:	f7ff faa3 	bl	800284c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	4aab      	ldr	r2, [pc, #684]	; (80035b8 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	f040 80fd 	bne.w	800350c <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <HAL_ADCEx_InjectedConfigChannel+0x5be>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	3301      	adds	r3, #1
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2b09      	cmp	r3, #9
 8003330:	bf94      	ite	ls
 8003332:	2301      	movls	r3, #1
 8003334:	2300      	movhi	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e012      	b.n	8003360 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3301      	adds	r3, #1
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2b09      	cmp	r3, #9
 8003358:	bf94      	ite	ls
 800335a:	2301      	movls	r3, #1
 800335c:	2300      	movhi	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d064      	beq.n	800342e <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336c:	2b00      	cmp	r3, #0
 800336e:	d107      	bne.n	8003380 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0e9b      	lsrs	r3, r3, #26
 8003376:	3301      	adds	r3, #1
 8003378:	069b      	lsls	r3, r3, #26
 800337a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800337e:	e00e      	b.n	800339e <HAL_ADCEx_InjectedConfigChannel+0x622>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	069b      	lsls	r3, r3, #26
 800339a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_ADCEx_InjectedConfigChannel+0x642>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	0e9b      	lsrs	r3, r3, #26
 80033b0:	3301      	adds	r3, #1
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	e010      	b.n	80033e0 <HAL_ADCEx_InjectedConfigChannel+0x664>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	ea42 0103 	orr.w	r1, r2, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_ADCEx_InjectedConfigChannel+0x68a>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0e9b      	lsrs	r3, r3, #26
 80033f6:	3301      	adds	r3, #1
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	051b      	lsls	r3, r3, #20
 8003404:	e011      	b.n	800342a <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3301      	adds	r3, #1
 800341e:	f003 021f 	and.w	r2, r3, #31
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	051b      	lsls	r3, r3, #20
 800342a:	430b      	orrs	r3, r1
 800342c:	e069      	b.n	8003502 <HAL_ADCEx_InjectedConfigChannel+0x786>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d107      	bne.n	800344a <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	3301      	adds	r3, #1
 8003442:	069b      	lsls	r3, r3, #26
 8003444:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003448:	e00e      	b.n	8003468 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	623b      	str	r3, [r7, #32]
  return result;
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	3301      	adds	r3, #1
 8003462:	069b      	lsls	r3, r3, #26
 8003464:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	3301      	adds	r3, #1
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	e010      	b.n	80034aa <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	61bb      	str	r3, [r7, #24]
  return result;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	ea42 0103 	orr.w	r1, r2, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10d      	bne.n	80034d6 <HAL_ADCEx_InjectedConfigChannel+0x75a>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	0e9b      	lsrs	r3, r3, #26
 80034c0:	3301      	adds	r3, #1
 80034c2:	f003 021f 	and.w	r2, r3, #31
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	3b1e      	subs	r3, #30
 80034ce:	051b      	lsls	r3, r3, #20
 80034d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034d4:	e014      	b.n	8003500 <HAL_ADCEx_InjectedConfigChannel+0x784>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	613b      	str	r3, [r7, #16]
  return result;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	f003 021f 	and.w	r2, r3, #31
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	3b1e      	subs	r3, #30
 80034fa:	051b      	lsls	r3, r3, #20
 80034fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003500:	430b      	orrs	r3, r1
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	6892      	ldr	r2, [r2, #8]
 8003506:	4619      	mov	r1, r3
 8003508:	f7ff f977 	bl	80027fa <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d079      	beq.n	800360c <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003518:	4829      	ldr	r0, [pc, #164]	; (80035c0 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800351a:	f7ff f8c0 	bl	800269e <LL_ADC_GetCommonPathInternalCh>
 800351e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a27      	ldr	r2, [pc, #156]	; (80035c4 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d126      	bne.n	8003584 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800353a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d120      	bne.n	8003584 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800354a:	d15f      	bne.n	800360c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800354c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003550:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003554:	4619      	mov	r1, r3
 8003556:	481a      	ldr	r0, [pc, #104]	; (80035c0 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8003558:	f7ff f88e 	bl	8002678 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_ADCEx_InjectedConfigChannel+0x850>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	099a      	lsrs	r2, r3, #6
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8003574:	e002      	b.n	800357c <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b01      	subs	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f9      	bne.n	8003576 <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003582:	e043      	b.n	800360c <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d126      	bne.n	80035dc <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800358e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d120      	bne.n	80035dc <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d033      	beq.n	800360c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ac:	4619      	mov	r1, r3
 80035ae:	4804      	ldr	r0, [pc, #16]	; (80035c0 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80035b0:	f7ff f862 	bl	8002678 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b4:	e02a      	b.n	800360c <HAL_ADCEx_InjectedConfigChannel+0x890>
 80035b6:	bf00      	nop
 80035b8:	407f0000 	.word	0x407f0000
 80035bc:	80080000 	.word	0x80080000
 80035c0:	50000300 	.word	0x50000300
 80035c4:	c3210000 	.word	0xc3210000
 80035c8:	90c00010 	.word	0x90c00010
 80035cc:	20000000 	.word	0x20000000
 80035d0:	053e2d63 	.word	0x053e2d63
 80035d4:	c7520000 	.word	0xc7520000
 80035d8:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0f      	ldr	r2, [pc, #60]	; (8003620 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d112      	bne.n	800360c <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10c      	bne.n	800360c <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003604:	4619      	mov	r1, r3
 8003606:	4808      	ldr	r0, [pc, #32]	; (8003628 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 8003608:	f7ff f836 	bl	8002678 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003614:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8003618:	4618      	mov	r0, r3
 800361a:	37a0      	adds	r7, #160	; 0xa0
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	cb840000 	.word	0xcb840000
 8003624:	50000100 	.word	0x50000100
 8003628:	50000300 	.word	0x50000300

0800362c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b0a1      	sub	sp, #132	; 0x84
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003646:	2302      	movs	r3, #2
 8003648:	e087      	b.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800365a:	d102      	bne.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800365c:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	e001      	b.n	8003666 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10b      	bne.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e06a      	b.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f952 	bl	8002930 <LL_ADC_REG_IsConversionOngoing>
 800368c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff f94c 	bl	8002930 <LL_ADC_REG_IsConversionOngoing>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d14c      	bne.n	8003738 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800369e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d149      	bne.n	8003738 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036a4:	4b30      	ldr	r3, [pc, #192]	; (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80036a6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d028      	beq.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036c2:	035b      	lsls	r3, r3, #13
 80036c4:	430b      	orrs	r3, r1
 80036c6:	431a      	orrs	r2, r3
 80036c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036d0:	f7ff f8ee 	bl	80028b0 <LL_ADC_IsEnabled>
 80036d4:	4604      	mov	r4, r0
 80036d6:	4823      	ldr	r0, [pc, #140]	; (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80036d8:	f7ff f8ea 	bl	80028b0 <LL_ADC_IsEnabled>
 80036dc:	4603      	mov	r3, r0
 80036de:	4323      	orrs	r3, r4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d133      	bne.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036ec:	f023 030f 	bic.w	r3, r3, #15
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	6811      	ldr	r1, [r2, #0]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	431a      	orrs	r2, r3
 80036fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003700:	e024      	b.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800370c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800370e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003712:	f7ff f8cd 	bl	80028b0 <LL_ADC_IsEnabled>
 8003716:	4604      	mov	r4, r0
 8003718:	4812      	ldr	r0, [pc, #72]	; (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800371a:	f7ff f8c9 	bl	80028b0 <LL_ADC_IsEnabled>
 800371e:	4603      	mov	r3, r0
 8003720:	4323      	orrs	r3, r4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d112      	bne.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800372e:	f023 030f 	bic.w	r3, r3, #15
 8003732:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003734:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003736:	e009      	b.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800374a:	e000      	b.n	800374e <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800374c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003756:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800375a:	4618      	mov	r0, r3
 800375c:	3784      	adds	r7, #132	; 0x84
 800375e:	46bd      	mov	sp, r7
 8003760:	bd90      	pop	{r4, r7, pc}
 8003762:	bf00      	nop
 8003764:	50000100 	.word	0x50000100
 8003768:	50000300 	.word	0x50000300

0800376c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4907      	ldr	r1, [pc, #28]	; (8003808 <__NVIC_EnableIRQ+0x38>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db0a      	blt.n	8003836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	490c      	ldr	r1, [pc, #48]	; (8003858 <__NVIC_SetPriority+0x4c>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003834:	e00a      	b.n	800384c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4908      	ldr	r1, [pc, #32]	; (800385c <__NVIC_SetPriority+0x50>)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3b04      	subs	r3, #4
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	440b      	add	r3, r1
 800384a:	761a      	strb	r2, [r3, #24]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000e100 	.word	0xe000e100
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf28      	it	cs
 800387e:	2304      	movcs	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3304      	adds	r3, #4
 8003886:	2b06      	cmp	r3, #6
 8003888:	d902      	bls.n	8003890 <NVIC_EncodePriority+0x30>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3b03      	subs	r3, #3
 800388e:	e000      	b.n	8003892 <NVIC_EncodePriority+0x32>
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	401a      	ands	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	4313      	orrs	r3, r2
         );
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	; 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d8:	d301      	bcc.n	80038de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038da:	2301      	movs	r3, #1
 80038dc:	e00f      	b.n	80038fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <SysTick_Config+0x40>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e6:	210f      	movs	r1, #15
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	f7ff ff8e 	bl	800380c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <SysTick_Config+0x40>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <SysTick_Config+0x40>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	e000e010 	.word	0xe000e010

0800390c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff29 	bl	800376c <__NVIC_SetPriorityGrouping>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003930:	f7ff ff40 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 8003934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff ff90 	bl	8003860 <NVIC_EncodePriority>
 8003940:	4602      	mov	r2, r0
 8003942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff5f 	bl	800380c <__NVIC_SetPriority>
}
 800394e:	bf00      	nop
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff33 	bl	80037d0 <__NVIC_EnableIRQ>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ffa4 	bl	80038c8 <SysTick_Config>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d00d      	beq.n	80039be <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2204      	movs	r2, #4
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e047      	b.n	8003a4e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 020e 	bic.w	r2, r2, #14
 80039cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	f003 021f 	and.w	r2, r3, #31
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003a00:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a2c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
    }
  }
  return status;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a66:	e15a      	b.n	8003d1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	4013      	ands	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 814c 	beq.w	8003d18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d00b      	beq.n	8003aa0 <HAL_GPIO_Init+0x48>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d007      	beq.n	8003aa0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a94:	2b11      	cmp	r3, #17
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b12      	cmp	r3, #18
 8003a9e:	d130      	bne.n	8003b02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f003 0201 	and.w	r2, r3, #1
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0xea>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b12      	cmp	r3, #18
 8003b40:	d123      	bne.n	8003b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	08da      	lsrs	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3208      	adds	r2, #8
 8003b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	220f      	movs	r2, #15
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	08da      	lsrs	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3208      	adds	r2, #8
 8003b84:	6939      	ldr	r1, [r7, #16]
 8003b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80a6 	beq.w	8003d18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bcc:	4b5b      	ldr	r3, [pc, #364]	; (8003d3c <HAL_GPIO_Init+0x2e4>)
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	4a5a      	ldr	r2, [pc, #360]	; (8003d3c <HAL_GPIO_Init+0x2e4>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bd8:	4b58      	ldr	r3, [pc, #352]	; (8003d3c <HAL_GPIO_Init+0x2e4>)
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003be4:	4a56      	ldr	r2, [pc, #344]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	3302      	adds	r3, #2
 8003bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c0e:	d01f      	beq.n	8003c50 <HAL_GPIO_Init+0x1f8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <HAL_GPIO_Init+0x2ec>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d019      	beq.n	8003c4c <HAL_GPIO_Init+0x1f4>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a4b      	ldr	r2, [pc, #300]	; (8003d48 <HAL_GPIO_Init+0x2f0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d013      	beq.n	8003c48 <HAL_GPIO_Init+0x1f0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_GPIO_Init+0x2f4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00d      	beq.n	8003c44 <HAL_GPIO_Init+0x1ec>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a49      	ldr	r2, [pc, #292]	; (8003d50 <HAL_GPIO_Init+0x2f8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <HAL_GPIO_Init+0x1e8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a48      	ldr	r2, [pc, #288]	; (8003d54 <HAL_GPIO_Init+0x2fc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_GPIO_Init+0x1e4>
 8003c38:	2305      	movs	r3, #5
 8003c3a:	e00a      	b.n	8003c52 <HAL_GPIO_Init+0x1fa>
 8003c3c:	2306      	movs	r3, #6
 8003c3e:	e008      	b.n	8003c52 <HAL_GPIO_Init+0x1fa>
 8003c40:	2304      	movs	r3, #4
 8003c42:	e006      	b.n	8003c52 <HAL_GPIO_Init+0x1fa>
 8003c44:	2303      	movs	r3, #3
 8003c46:	e004      	b.n	8003c52 <HAL_GPIO_Init+0x1fa>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e002      	b.n	8003c52 <HAL_GPIO_Init+0x1fa>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_GPIO_Init+0x1fa>
 8003c50:	2300      	movs	r3, #0
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	f002 0203 	and.w	r2, r2, #3
 8003c58:	0092      	lsls	r2, r2, #2
 8003c5a:	4093      	lsls	r3, r2
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c62:	4937      	ldr	r1, [pc, #220]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	3302      	adds	r3, #2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c70:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c94:	4a30      	ldr	r2, [pc, #192]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cbe:	4a26      	ldr	r2, [pc, #152]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cee:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d12:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f47f ae9d 	bne.w	8003a68 <HAL_GPIO_Init+0x10>
  }
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40010000 	.word	0x40010000
 8003d44:	48000400 	.word	0x48000400
 8003d48:	48000800 	.word	0x48000800
 8003d4c:	48000c00 	.word	0x48000c00
 8003d50:	48001000 	.word	0x48001000
 8003d54:	48001400 	.word	0x48001400
 8003d58:	40010400 	.word	0x40010400

08003d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d72:	4a05      	ldr	r2, [pc, #20]	; (8003d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fc fef8 	bl	8000b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40010400 	.word	0x40010400

08003d8c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0bb      	b.n	8003f1a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d101      	bne.n	8003db2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0b3      	b.n	8003f1a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d101      	bne.n	8003dc2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0ab      	b.n	8003f1a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	4b58      	ldr	r3, [pc, #352]	; (8003f24 <HAL_OPAMP_Init+0x198>)
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc6:	4a57      	ldr	r2, [pc, #348]	; (8003f24 <HAL_OPAMP_Init+0x198>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8003dce:	4b55      	ldr	r3, [pc, #340]	; (8003f24 <HAL_OPAMP_Init+0x198>)
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d103      	bne.n	8003dee <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd f87a 	bl	8000ee8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d003      	beq.n	8003e04 <HAL_OPAMP_Init+0x78>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b60      	cmp	r3, #96	; 0x60
 8003e02:	d133      	bne.n	8003e6c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 0110 	bic.w	r1, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <HAL_OPAMP_Init+0x19c>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6851      	ldr	r1, [r2, #4]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6892      	ldr	r2, [r2, #8]
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6912      	ldr	r2, [r2, #16]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	7d09      	ldrb	r1, [r1, #20]
 8003e38:	2901      	cmp	r1, #1
 8003e3a:	d102      	bne.n	8003e42 <HAL_OPAMP_Init+0xb6>
 8003e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e40:	e000      	b.n	8003e44 <HAL_OPAMP_Init+0xb8>
 8003e42:	2100      	movs	r1, #0
 8003e44:	4311      	orrs	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e56:	04d2      	lsls	r2, r2, #19
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e5e:	0612      	lsls	r2, r2, #24
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	430b      	orrs	r3, r1
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e035      	b.n	8003ed8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 0110 	bic.w	r1, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <HAL_OPAMP_Init+0x19c>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6851      	ldr	r1, [r2, #4]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6892      	ldr	r2, [r2, #8]
 8003e94:	4311      	orrs	r1, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68d2      	ldr	r2, [r2, #12]
 8003e9a:	4311      	orrs	r1, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6912      	ldr	r2, [r2, #16]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	7d09      	ldrb	r1, [r1, #20]
 8003ea6:	2901      	cmp	r1, #1
 8003ea8:	d102      	bne.n	8003eb0 <HAL_OPAMP_Init+0x124>
 8003eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eae:	e000      	b.n	8003eb2 <HAL_OPAMP_Init+0x126>
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ec4:	04d2      	lsls	r2, r2, #19
 8003ec6:	4311      	orrs	r1, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ecc:	0612      	lsls	r2, r2, #24
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	db10      	blt.n	8003f04 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
 8003f28:	e0003e11 	.word	0xe0003e11

08003f2c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	e01d      	b.n	8003f80 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b05      	cmp	r3, #5
 8003f4e:	d102      	bne.n	8003f56 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	e014      	b.n	8003f80 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10c      	bne.n	8003f7c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0201 	orr.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2204      	movs	r2, #4
 8003f76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003f7a:	e001      	b.n	8003f80 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08c      	sub	sp, #48	; 0x30
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e2df      	b.n	8004570 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d001      	beq.n	8003fc0 <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e2d7      	b.n	8004570 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d001      	beq.n	8003fd0 <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e2cf      	b.n	8004570 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d001      	beq.n	8003fe0 <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e2c7      	b.n	8004570 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0202 	orr.w	r2, r2, #2
 8003fee:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0202 	orr.w	r2, r2, #2
 8003ffe:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0202 	orr.w	r2, r2, #2
 800400e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0210 	orr.w	r2, r2, #16
 800401e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0210 	orr.w	r2, r2, #16
 800402e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0210 	orr.w	r2, r2, #16
 800403e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800404e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800405e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406e:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800407e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800408e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800409e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 80040d0:	2310      	movs	r3, #16
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 80040d4:	2310      	movs	r3, #16
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 80040d8:	2310      	movs	r3, #16
 80040da:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 80040dc:	2308      	movs	r3, #8
 80040de:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 80040e0:	e056      	b.n	8004190 <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	061a      	lsls	r2, r3, #24
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	061a      	lsls	r2, r3, #24
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	061a      	lsls	r2, r3, #24
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8004124:	2002      	movs	r0, #2
 8004126:	f7fd fc1f 	bl	8001968 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8004138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	4413      	add	r3, r2
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004140:	e003      	b.n	800414a <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 8004142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8004158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	4413      	add	r3, r2
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	e003      	b.n	800416a <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 8004162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	4413      	add	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	e003      	b.n	800418a <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	085b      	lsrs	r3, r3, #1
 800418e:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1a5      	bne.n	80040e2 <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	061a      	lsls	r2, r3, #24
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	061a      	lsls	r2, r3, #24
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	061a      	lsls	r2, r3, #24
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 80041d8:	2002      	movs	r0, #2
 80041da:	f7fd fbc5 	bl	8001968 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	3301      	adds	r3, #1
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	061a      	lsls	r2, r3, #24
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	3301      	adds	r3, #1
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	061a      	lsls	r2, r3, #24
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	061a      	lsls	r2, r3, #24
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800426e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004282:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004296:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 8004298:	2310      	movs	r3, #16
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 800429c:	2310      	movs	r3, #16
 800429e:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 80042a0:	2310      	movs	r3, #16
 80042a2:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 80042a4:	2308      	movs	r3, #8
 80042a6:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 80042a8:	e056      	b.n	8004358 <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	04da      	lsls	r2, r3, #19
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	04da      	lsls	r2, r3, #19
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	04da      	lsls	r2, r3, #19
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 80042ec:	2002      	movs	r0, #2
 80042ee:	f7fd fb3b 	bl	8001968 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 8004300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4413      	add	r3, r2
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
 8004308:	e003      	b.n	8004312 <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 800430a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	4413      	add	r3, r2
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	e003      	b.n	8004332 <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 800432a:	6a3a      	ldr	r2, [r7, #32]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4413      	add	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	e003      	b.n	8004352 <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1a5      	bne.n	80042aa <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	04da      	lsls	r2, r3, #19
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	04da      	lsls	r2, r3, #19
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	04da      	lsls	r2, r3, #19
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 80043a0:	2002      	movs	r0, #2
 80043a2:	f7fd fae1 	bl	8001968 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	3301      	adds	r3, #1
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	04da      	lsls	r2, r3, #19
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	3301      	adds	r3, #1
 80043e2:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	04da      	lsls	r2, r3, #19
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00d      	beq.n	8004424 <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	3301      	adds	r3, #1
 800440c:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	04da      	lsls	r2, r3, #19
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004432:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004442:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004452:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0202 	bic.w	r2, r2, #2
 8004492:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0202 	bic.w	r2, r2, #2
 80044a2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0202 	bic.w	r2, r2, #2
 80044b2:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b8:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044be:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6a3a      	ldr	r2, [r7, #32]
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2210      	movs	r2, #16
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2210      	movs	r2, #16
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2210      	movs	r2, #16
 80044e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	061a      	lsls	r2, r3, #24
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	061a      	lsls	r2, r3, #24
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	061a      	lsls	r2, r3, #24
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	04da      	lsls	r2, r3, #19
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	04da      	lsls	r2, r3, #19
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	04da      	lsls	r2, r3, #19
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3730      	adds	r7, #48	; 0x30
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d141      	bne.n	800460a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004586:	4b4b      	ldr	r3, [pc, #300]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800458e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004592:	d131      	bne.n	80045f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004594:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459a:	4a46      	ldr	r2, [pc, #280]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800459c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045ac:	4a41      	ldr	r2, [pc, #260]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045b4:	4b40      	ldr	r3, [pc, #256]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2232      	movs	r2, #50	; 0x32
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	4a3f      	ldr	r2, [pc, #252]	; (80046bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	0c9b      	lsrs	r3, r3, #18
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ca:	e002      	b.n	80045d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045d2:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045de:	d102      	bne.n	80045e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f2      	bne.n	80045cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045e6:	4b33      	ldr	r3, [pc, #204]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f2:	d158      	bne.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e057      	b.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045f8:	4b2e      	ldr	r3, [pc, #184]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045fe:	4a2d      	ldr	r2, [pc, #180]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004608:	e04d      	b.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004610:	d141      	bne.n	8004696 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004612:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d131      	bne.n	8004684 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004626:	4a23      	ldr	r2, [pc, #140]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004630:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004638:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800463e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2232      	movs	r2, #50	; 0x32
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800464c:	fba2 2303 	umull	r2, r3, r2, r3
 8004650:	0c9b      	lsrs	r3, r3, #18
 8004652:	3301      	adds	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004656:	e002      	b.n	800465e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b01      	subs	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466a:	d102      	bne.n	8004672 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f2      	bne.n	8004658 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467e:	d112      	bne.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e011      	b.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004694:	e007      	b.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004696:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800469e:	4a05      	ldr	r2, [pc, #20]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	40007000 	.word	0x40007000
 80046b8:	20000000 	.word	0x20000000
 80046bc:	431bde83 	.word	0x431bde83

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e308      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d075      	beq.n	80047ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046de:	4ba3      	ldr	r3, [pc, #652]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046e8:	4ba0      	ldr	r3, [pc, #640]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	d102      	bne.n	80046fe <HAL_RCC_OscConfig+0x3e>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d002      	beq.n	8004704 <HAL_RCC_OscConfig+0x44>
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d10b      	bne.n	800471c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	4b99      	ldr	r3, [pc, #612]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d05b      	beq.n	80047c8 <HAL_RCC_OscConfig+0x108>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d157      	bne.n	80047c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e2e3      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004724:	d106      	bne.n	8004734 <HAL_RCC_OscConfig+0x74>
 8004726:	4b91      	ldr	r3, [pc, #580]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a90      	ldr	r2, [pc, #576]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e01d      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x98>
 800473e:	4b8b      	ldr	r3, [pc, #556]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a8a      	ldr	r2, [pc, #552]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4b88      	ldr	r3, [pc, #544]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a87      	ldr	r2, [pc, #540]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004758:	4b84      	ldr	r3, [pc, #528]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a83      	ldr	r2, [pc, #524]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800475e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b81      	ldr	r3, [pc, #516]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a80      	ldr	r2, [pc, #512]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800476a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd f8ea 	bl	8001950 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fd f8e6 	bl	8001950 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e2a8      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004792:	4b76      	ldr	r3, [pc, #472]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0xc0>
 800479e:	e014      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd f8d6 	bl	8001950 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fd f8d2 	bl	8001950 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e294      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ba:	4b6c      	ldr	r3, [pc, #432]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0xe8>
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d075      	beq.n	80048c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d6:	4b65      	ldr	r3, [pc, #404]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e0:	4b62      	ldr	r3, [pc, #392]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b0c      	cmp	r3, #12
 80047ee:	d102      	bne.n	80047f6 <HAL_RCC_OscConfig+0x136>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d002      	beq.n	80047fc <HAL_RCC_OscConfig+0x13c>
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d11f      	bne.n	800483c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047fc:	4b5b      	ldr	r3, [pc, #364]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_OscConfig+0x154>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e267      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b55      	ldr	r3, [pc, #340]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	061b      	lsls	r3, r3, #24
 8004822:	4952      	ldr	r1, [pc, #328]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004828:	4b51      	ldr	r3, [pc, #324]	; (8004970 <HAL_RCC_OscConfig+0x2b0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7fd f843 	bl	80018b8 <HAL_InitTick>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d043      	beq.n	80048c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e253      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d023      	beq.n	800488c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004844:	4b49      	ldr	r3, [pc, #292]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a48      	ldr	r2, [pc, #288]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800484a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd f87e 	bl	8001950 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004858:	f7fd f87a 	bl	8001950 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e23c      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800486a:	4b40      	ldr	r3, [pc, #256]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004876:	4b3d      	ldr	r3, [pc, #244]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	061b      	lsls	r3, r3, #24
 8004884:	4939      	ldr	r1, [pc, #228]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004886:	4313      	orrs	r3, r2
 8004888:	604b      	str	r3, [r1, #4]
 800488a:	e01a      	b.n	80048c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488c:	4b37      	ldr	r3, [pc, #220]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a36      	ldr	r2, [pc, #216]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fd f85a 	bl	8001950 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a0:	f7fd f856 	bl	8001950 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e218      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b2:	4b2e      	ldr	r3, [pc, #184]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x1e0>
 80048be:	e000      	b.n	80048c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d03c      	beq.n	8004948 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01c      	beq.n	8004910 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d6:	4b25      	ldr	r3, [pc, #148]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048dc:	4a23      	ldr	r2, [pc, #140]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fd f833 	bl	8001950 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ee:	f7fd f82f 	bl	8001950 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e1f1      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004900:	4b1a      	ldr	r3, [pc, #104]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ef      	beq.n	80048ee <HAL_RCC_OscConfig+0x22e>
 800490e:	e01b      	b.n	8004948 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004910:	4b16      	ldr	r3, [pc, #88]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004916:	4a15      	ldr	r2, [pc, #84]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fd f816 	bl	8001950 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004928:	f7fd f812 	bl	8001950 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e1d4      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800493a:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800493c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1ef      	bne.n	8004928 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80ab 	beq.w	8004aac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004956:	2300      	movs	r3, #0
 8004958:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800495a:	4b04      	ldr	r3, [pc, #16]	; (800496c <HAL_RCC_OscConfig+0x2ac>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_RCC_OscConfig+0x2b4>
 8004966:	2301      	movs	r3, #1
 8004968:	e005      	b.n	8004976 <HAL_RCC_OscConfig+0x2b6>
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
 8004970:	20000004 	.word	0x20000004
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497a:	4baf      	ldr	r3, [pc, #700]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	4aae      	ldr	r2, [pc, #696]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004984:	6593      	str	r3, [r2, #88]	; 0x58
 8004986:	4bac      	ldr	r3, [pc, #688]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004992:	2301      	movs	r3, #1
 8004994:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004996:	4ba9      	ldr	r3, [pc, #676]	; (8004c3c <HAL_RCC_OscConfig+0x57c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d118      	bne.n	80049d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a2:	4ba6      	ldr	r3, [pc, #664]	; (8004c3c <HAL_RCC_OscConfig+0x57c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4aa5      	ldr	r2, [pc, #660]	; (8004c3c <HAL_RCC_OscConfig+0x57c>)
 80049a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ae:	f7fc ffcf 	bl	8001950 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b6:	f7fc ffcb 	bl	8001950 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e18d      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c8:	4b9c      	ldr	r3, [pc, #624]	; (8004c3c <HAL_RCC_OscConfig+0x57c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d108      	bne.n	80049ee <HAL_RCC_OscConfig+0x32e>
 80049dc:	4b96      	ldr	r3, [pc, #600]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	4a95      	ldr	r2, [pc, #596]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ec:	e024      	b.n	8004a38 <HAL_RCC_OscConfig+0x378>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d110      	bne.n	8004a18 <HAL_RCC_OscConfig+0x358>
 80049f6:	4b90      	ldr	r3, [pc, #576]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	4a8e      	ldr	r2, [pc, #568]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 80049fe:	f043 0304 	orr.w	r3, r3, #4
 8004a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a06:	4b8c      	ldr	r3, [pc, #560]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	4a8a      	ldr	r2, [pc, #552]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a16:	e00f      	b.n	8004a38 <HAL_RCC_OscConfig+0x378>
 8004a18:	4b87      	ldr	r3, [pc, #540]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	4a86      	ldr	r2, [pc, #536]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a28:	4b83      	ldr	r3, [pc, #524]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	4a82      	ldr	r2, [pc, #520]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d016      	beq.n	8004a6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fc ff86 	bl	8001950 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fc ff82 	bl	8001950 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e142      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5e:	4b76      	ldr	r3, [pc, #472]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ed      	beq.n	8004a48 <HAL_RCC_OscConfig+0x388>
 8004a6c:	e015      	b.n	8004a9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6e:	f7fc ff6f 	bl	8001950 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fc ff6b 	bl	8001950 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e12b      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a8c:	4b6a      	ldr	r3, [pc, #424]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ed      	bne.n	8004a76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a9a:	7ffb      	ldrb	r3, [r7, #31]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa0:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	4a64      	ldr	r2, [pc, #400]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d03c      	beq.n	8004b32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01c      	beq.n	8004afa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ac0:	4b5d      	ldr	r3, [pc, #372]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac6:	4a5c      	ldr	r2, [pc, #368]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad0:	f7fc ff3e 	bl	8001950 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ad8:	f7fc ff3a 	bl	8001950 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e0fc      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aea:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ef      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x418>
 8004af8:	e01b      	b.n	8004b32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004afa:	4b4f      	ldr	r3, [pc, #316]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b00:	4a4d      	ldr	r2, [pc, #308]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0a:	f7fc ff21 	bl	8001950 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b12:	f7fc ff1d 	bl	8001950 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e0df      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b24:	4b44      	ldr	r3, [pc, #272]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ef      	bne.n	8004b12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 80d3 	beq.w	8004ce2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b3c:	4b3e      	ldr	r3, [pc, #248]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	f000 808d 	beq.w	8004c64 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d15a      	bne.n	8004c08 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a38      	ldr	r2, [pc, #224]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fc fef7 	bl	8001950 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fc fef3 	bl	8001950 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e0b5      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b78:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b84:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	4b2d      	ldr	r3, [pc, #180]	; (8004c40 <HAL_RCC_OscConfig+0x580>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6a11      	ldr	r1, [r2, #32]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b94:	3a01      	subs	r2, #1
 8004b96:	0112      	lsls	r2, r2, #4
 8004b98:	4311      	orrs	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b9e:	0212      	lsls	r2, r2, #8
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ba6:	0852      	lsrs	r2, r2, #1
 8004ba8:	3a01      	subs	r2, #1
 8004baa:	0552      	lsls	r2, r2, #21
 8004bac:	4311      	orrs	r1, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bb2:	0852      	lsrs	r2, r2, #1
 8004bb4:	3a01      	subs	r2, #1
 8004bb6:	0652      	lsls	r2, r2, #25
 8004bb8:	4311      	orrs	r1, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bbe:	06d2      	lsls	r2, r2, #27
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	491d      	ldr	r1, [pc, #116]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bd4:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fc feb6 	bl	8001950 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be8:	f7fc feb2 	bl	8001950 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e074      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x528>
 8004c06:	e06c      	b.n	8004ce2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c12:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c14:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4a07      	ldr	r2, [pc, #28]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <HAL_RCC_OscConfig+0x578>)
 8004c26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fc fe8e 	bl	8001950 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c36:	e00e      	b.n	8004c56 <HAL_RCC_OscConfig+0x596>
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fc fe84 	bl	8001950 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e046      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c56:	4b25      	ldr	r3, [pc, #148]	; (8004cec <HAL_RCC_OscConfig+0x62c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x584>
 8004c62:	e03e      	b.n	8004ce2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e039      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c70:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <HAL_RCC_OscConfig+0x62c>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f003 0203 	and.w	r2, r3, #3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d12c      	bne.n	8004cde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d123      	bne.n	8004cde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d11b      	bne.n	8004cde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d113      	bne.n	8004cde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d109      	bne.n	8004cde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d001      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40021000 	.word	0x40021000

08004cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e11e      	b.n	8004f46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d08:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d910      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d16:	4b8e      	ldr	r3, [pc, #568]	; (8004f50 <HAL_RCC_ClockConfig+0x260>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f023 020f 	bic.w	r2, r3, #15
 8004d1e:	498c      	ldr	r1, [pc, #560]	; (8004f50 <HAL_RCC_ClockConfig+0x260>)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b8a      	ldr	r3, [pc, #552]	; (8004f50 <HAL_RCC_ClockConfig+0x260>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e106      	b.n	8004f46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d073      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d129      	bne.n	8004da0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4c:	4b81      	ldr	r3, [pc, #516]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0f4      	b.n	8004f46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d5c:	f000 f99e 	bl	800509c <RCC_GetSysClockFreqFromPLLSource>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4a7c      	ldr	r2, [pc, #496]	; (8004f58 <HAL_RCC_ClockConfig+0x268>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d93f      	bls.n	8004dea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d6a:	4b7a      	ldr	r3, [pc, #488]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d033      	beq.n	8004dea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d12f      	bne.n	8004dea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d8a:	4b72      	ldr	r3, [pc, #456]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d92:	4a70      	ldr	r2, [pc, #448]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e024      	b.n	8004dea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d107      	bne.n	8004db8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da8:	4b6a      	ldr	r3, [pc, #424]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0c6      	b.n	8004f46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004db8:	4b66      	ldr	r3, [pc, #408]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0be      	b.n	8004f46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004dc8:	f000 f8ce 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4a61      	ldr	r2, [pc, #388]	; (8004f58 <HAL_RCC_ClockConfig+0x268>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d909      	bls.n	8004dea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dde:	4a5d      	ldr	r2, [pc, #372]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dea:	4b5a      	ldr	r3, [pc, #360]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4957      	ldr	r1, [pc, #348]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfc:	f7fc fda8 	bl	8001950 <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e04:	f7fc fda4 	bl	8001950 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e095      	b.n	8004f46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1a:	4b4e      	ldr	r3, [pc, #312]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 020c 	and.w	r2, r3, #12
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1eb      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d023      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e44:	4b43      	ldr	r3, [pc, #268]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4a42      	ldr	r2, [pc, #264]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004e4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e5c:	4b3d      	ldr	r3, [pc, #244]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e64:	4a3b      	ldr	r2, [pc, #236]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4936      	ldr	r1, [pc, #216]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b80      	cmp	r3, #128	; 0x80
 8004e84:	d105      	bne.n	8004e92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e86:	4b33      	ldr	r3, [pc, #204]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4a32      	ldr	r2, [pc, #200]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e92:	4b2f      	ldr	r3, [pc, #188]	; (8004f50 <HAL_RCC_ClockConfig+0x260>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d21d      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_RCC_ClockConfig+0x260>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 020f 	bic.w	r2, r3, #15
 8004ea8:	4929      	ldr	r1, [pc, #164]	; (8004f50 <HAL_RCC_ClockConfig+0x260>)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004eb0:	f7fc fd4e 	bl	8001950 <HAL_GetTick>
 8004eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb8:	f7fc fd4a 	bl	8001950 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e03b      	b.n	8004f46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_RCC_ClockConfig+0x260>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d1ed      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee8:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4917      	ldr	r1, [pc, #92]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f06:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	490f      	ldr	r1, [pc, #60]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f1a:	f000 f825 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8004f1e:	4601      	mov	r1, r0
 8004f20:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <HAL_RCC_ClockConfig+0x264>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	4a0c      	ldr	r2, [pc, #48]	; (8004f5c <HAL_RCC_ClockConfig+0x26c>)
 8004f2c:	5cd3      	ldrb	r3, [r2, r3]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	fa21 f303 	lsr.w	r3, r1, r3
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <HAL_RCC_ClockConfig+0x270>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <HAL_RCC_ClockConfig+0x274>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fc fcba 	bl	80018b8 <HAL_InitTick>
 8004f44:	4603      	mov	r3, r0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40022000 	.word	0x40022000
 8004f54:	40021000 	.word	0x40021000
 8004f58:	04c4b400 	.word	0x04c4b400
 8004f5c:	08008aa8 	.word	0x08008aa8
 8004f60:	20000000 	.word	0x20000000
 8004f64:	20000004 	.word	0x20000004

08004f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f6e:	4b2c      	ldr	r3, [pc, #176]	; (8005020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d102      	bne.n	8004f80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f7a:	4b2a      	ldr	r3, [pc, #168]	; (8005024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	e047      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f80:	4b27      	ldr	r3, [pc, #156]	; (8005020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d102      	bne.n	8004f92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f8c:	4b26      	ldr	r3, [pc, #152]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	e03e      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f92:	4b23      	ldr	r3, [pc, #140]	; (8005020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b0c      	cmp	r3, #12
 8004f9c:	d136      	bne.n	800500c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f9e:	4b20      	ldr	r3, [pc, #128]	; (8005020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d10c      	bne.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fbc:	4a1a      	ldr	r2, [pc, #104]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	4a16      	ldr	r2, [pc, #88]	; (8005020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fc6:	68d2      	ldr	r2, [r2, #12]
 8004fc8:	0a12      	lsrs	r2, r2, #8
 8004fca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	617b      	str	r3, [r7, #20]
      break;
 8004fd4:	e00c      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fd6:	4a13      	ldr	r2, [pc, #76]	; (8005024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fde:	4a10      	ldr	r2, [pc, #64]	; (8005020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fe0:	68d2      	ldr	r2, [r2, #12]
 8004fe2:	0a12      	lsrs	r2, r2, #8
 8004fe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fe8:	fb02 f303 	mul.w	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
      break;
 8004fee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	0e5b      	lsrs	r3, r3, #25
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	e001      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005010:	693b      	ldr	r3, [r7, #16]
}
 8005012:	4618      	mov	r0, r3
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40021000 	.word	0x40021000
 8005024:	00f42400 	.word	0x00f42400
 8005028:	007a1200 	.word	0x007a1200

0800502c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005030:	4b03      	ldr	r3, [pc, #12]	; (8005040 <HAL_RCC_GetHCLKFreq+0x14>)
 8005032:	681b      	ldr	r3, [r3, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000000 	.word	0x20000000

08005044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005048:	f7ff fff0 	bl	800502c <HAL_RCC_GetHCLKFreq>
 800504c:	4601      	mov	r1, r0
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_RCC_GetPCLK1Freq+0x28>)
 800505a:	5cd3      	ldrb	r3, [r2, r3]
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005064:	4618      	mov	r0, r3
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40021000 	.word	0x40021000
 800506c:	08008ab8 	.word	0x08008ab8

08005070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005074:	f7ff ffda 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8005078:	4601      	mov	r1, r0
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	0adb      	lsrs	r3, r3, #11
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	4a04      	ldr	r2, [pc, #16]	; (8005098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005086:	5cd3      	ldrb	r3, [r2, r3]
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005090:	4618      	mov	r0, r3
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40021000 	.word	0x40021000
 8005098:	08008ab8 	.word	0x08008ab8

0800509c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050a2:	4b1e      	ldr	r3, [pc, #120]	; (800511c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3301      	adds	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d10c      	bne.n	80050da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050c0:	4a17      	ldr	r2, [pc, #92]	; (8005120 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	4a14      	ldr	r2, [pc, #80]	; (800511c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050ca:	68d2      	ldr	r2, [r2, #12]
 80050cc:	0a12      	lsrs	r2, r2, #8
 80050ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	617b      	str	r3, [r7, #20]
    break;
 80050d8:	e00c      	b.n	80050f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050da:	4a12      	ldr	r2, [pc, #72]	; (8005124 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	4a0e      	ldr	r2, [pc, #56]	; (800511c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050e4:	68d2      	ldr	r2, [r2, #12]
 80050e6:	0a12      	lsrs	r2, r2, #8
 80050e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ec:	fb02 f303 	mul.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]
    break;
 80050f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050f4:	4b09      	ldr	r3, [pc, #36]	; (800511c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	0e5b      	lsrs	r3, r3, #25
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	3301      	adds	r3, #1
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800510e:	687b      	ldr	r3, [r7, #4]
}
 8005110:	4618      	mov	r0, r3
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40021000 	.word	0x40021000
 8005120:	007a1200 	.word	0x007a1200
 8005124:	00f42400 	.word	0x00f42400

08005128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005130:	2300      	movs	r3, #0
 8005132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005134:	2300      	movs	r3, #0
 8005136:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 8098 	beq.w	8005276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005146:	2300      	movs	r3, #0
 8005148:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800514a:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005156:	4b40      	ldr	r3, [pc, #256]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	4a3f      	ldr	r2, [pc, #252]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005160:	6593      	str	r3, [r2, #88]	; 0x58
 8005162:	4b3d      	ldr	r3, [pc, #244]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516e:	2301      	movs	r3, #1
 8005170:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005172:	4b3a      	ldr	r3, [pc, #232]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a39      	ldr	r2, [pc, #228]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800517e:	f7fc fbe7 	bl	8001950 <HAL_GetTick>
 8005182:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005184:	e009      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005186:	f7fc fbe3 	bl	8001950 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d902      	bls.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	74fb      	strb	r3, [r7, #19]
        break;
 8005198:	e005      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800519a:	4b30      	ldr	r3, [pc, #192]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0ef      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d159      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051ac:	4b2a      	ldr	r3, [pc, #168]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01e      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d019      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051c8:	4b23      	ldr	r3, [pc, #140]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051d4:	4b20      	ldr	r3, [pc, #128]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051e4:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051f4:	4a18      	ldr	r2, [pc, #96]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005206:	f7fc fba3 	bl	8001950 <HAL_GetTick>
 800520a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520c:	e00b      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fc fb9f 	bl	8001950 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d902      	bls.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	74fb      	strb	r3, [r7, #19]
            break;
 8005224:	e006      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0ec      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800523a:	4b07      	ldr	r3, [pc, #28]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	4903      	ldr	r1, [pc, #12]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005250:	e008      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005252:	7cfb      	ldrb	r3, [r7, #19]
 8005254:	74bb      	strb	r3, [r7, #18]
 8005256:	e005      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005258:	40021000 	.word	0x40021000
 800525c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005264:	7c7b      	ldrb	r3, [r7, #17]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d105      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800526a:	4ba6      	ldr	r3, [pc, #664]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	4aa5      	ldr	r2, [pc, #660]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005274:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005282:	4ba0      	ldr	r3, [pc, #640]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f023 0203 	bic.w	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	499c      	ldr	r1, [pc, #624]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052a4:	4b97      	ldr	r3, [pc, #604]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f023 020c 	bic.w	r2, r3, #12
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	4994      	ldr	r1, [pc, #592]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052c6:	4b8f      	ldr	r3, [pc, #572]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	498b      	ldr	r1, [pc, #556]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052e8:	4b86      	ldr	r3, [pc, #536]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	4983      	ldr	r1, [pc, #524]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800530a:	4b7e      	ldr	r3, [pc, #504]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	497a      	ldr	r1, [pc, #488]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800532c:	4b75      	ldr	r3, [pc, #468]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	4972      	ldr	r1, [pc, #456]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800534e:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	4969      	ldr	r1, [pc, #420]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005370:	4b64      	ldr	r3, [pc, #400]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	4961      	ldr	r1, [pc, #388]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005392:	4b5c      	ldr	r3, [pc, #368]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	4958      	ldr	r1, [pc, #352]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d015      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053b4:	4b53      	ldr	r3, [pc, #332]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	4950      	ldr	r1, [pc, #320]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d2:	d105      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053d4:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4a4a      	ldr	r2, [pc, #296]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d015      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053ec:	4b45      	ldr	r3, [pc, #276]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	4942      	ldr	r1, [pc, #264]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800540a:	d105      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800540c:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a3c      	ldr	r2, [pc, #240]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005416:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d015      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005424:	4b37      	ldr	r3, [pc, #220]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	4934      	ldr	r1, [pc, #208]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005442:	d105      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005444:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	4a2e      	ldr	r2, [pc, #184]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800544e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d015      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800545c:	4b29      	ldr	r3, [pc, #164]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546a:	4926      	ldr	r1, [pc, #152]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800547a:	d105      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800547c:	4b21      	ldr	r3, [pc, #132]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4a20      	ldr	r2, [pc, #128]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005486:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d015      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005494:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	4918      	ldr	r1, [pc, #96]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b2:	d105      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b4:	4b13      	ldr	r3, [pc, #76]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a12      	ldr	r2, [pc, #72]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d015      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054cc:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	490a      	ldr	r1, [pc, #40]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ea:	d105      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a04      	ldr	r2, [pc, #16]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80054f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000

08005508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e049      	b.n	80055ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fb ffa8 	bl	8001484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3304      	adds	r3, #4
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f000 fdd2 	bl	80060f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d001      	beq.n	80055d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e021      	b.n	8005614 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <HAL_TIM_Base_Start_IT+0x68>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	d00b      	beq.n	8005612 <HAL_TIM_Base_Start_IT+0x5a>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005600:	d007      	beq.n	8005612 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	00010007 	.word	0x00010007

08005624 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e049      	b.n	80056ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f841 	bl	80056d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 fd44 	bl	80060f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <HAL_TIM_PWM_Start+0x24>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e03c      	b.n	8005786 <HAL_TIM_PWM_Start+0x9e>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b04      	cmp	r3, #4
 8005710:	d109      	bne.n	8005726 <HAL_TIM_PWM_Start+0x3e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	bf14      	ite	ne
 800571e:	2301      	movne	r3, #1
 8005720:	2300      	moveq	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e02f      	b.n	8005786 <HAL_TIM_PWM_Start+0x9e>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d109      	bne.n	8005740 <HAL_TIM_PWM_Start+0x58>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e022      	b.n	8005786 <HAL_TIM_PWM_Start+0x9e>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b0c      	cmp	r3, #12
 8005744:	d109      	bne.n	800575a <HAL_TIM_PWM_Start+0x72>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b01      	cmp	r3, #1
 8005750:	bf14      	ite	ne
 8005752:	2301      	movne	r3, #1
 8005754:	2300      	moveq	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	e015      	b.n	8005786 <HAL_TIM_PWM_Start+0x9e>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b10      	cmp	r3, #16
 800575e:	d109      	bne.n	8005774 <HAL_TIM_PWM_Start+0x8c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	e008      	b.n	8005786 <HAL_TIM_PWM_Start+0x9e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e06e      	b.n	800586c <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <HAL_TIM_PWM_Start+0xb6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579c:	e023      	b.n	80057e6 <HAL_TIM_PWM_Start+0xfe>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d104      	bne.n	80057ae <HAL_TIM_PWM_Start+0xc6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ac:	e01b      	b.n	80057e6 <HAL_TIM_PWM_Start+0xfe>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d104      	bne.n	80057be <HAL_TIM_PWM_Start+0xd6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057bc:	e013      	b.n	80057e6 <HAL_TIM_PWM_Start+0xfe>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_PWM_Start+0xe6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057cc:	e00b      	b.n	80057e6 <HAL_TIM_PWM_Start+0xfe>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d104      	bne.n	80057de <HAL_TIM_PWM_Start+0xf6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057dc:	e003      	b.n	80057e6 <HAL_TIM_PWM_Start+0xfe>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2201      	movs	r2, #1
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 f8a0 	bl	8006934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <HAL_TIM_PWM_Start+0x18c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <HAL_TIM_PWM_Start+0x13e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <HAL_TIM_PWM_Start+0x190>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00e      	beq.n	8005826 <HAL_TIM_PWM_Start+0x13e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1b      	ldr	r2, [pc, #108]	; (800587c <HAL_TIM_PWM_Start+0x194>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d009      	beq.n	8005826 <HAL_TIM_PWM_Start+0x13e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <HAL_TIM_PWM_Start+0x198>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_TIM_PWM_Start+0x13e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a18      	ldr	r2, [pc, #96]	; (8005884 <HAL_TIM_PWM_Start+0x19c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d101      	bne.n	800582a <HAL_TIM_PWM_Start+0x142>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <HAL_TIM_PWM_Start+0x144>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800583e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <HAL_TIM_PWM_Start+0x1a0>)
 8005848:	4013      	ands	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b06      	cmp	r3, #6
 8005850:	d00b      	beq.n	800586a <HAL_TIM_PWM_Start+0x182>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005858:	d007      	beq.n	800586a <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40013400 	.word	0x40013400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800
 8005888:	00010007 	.word	0x00010007

0800588c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e097      	b.n	80059d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fb fe25 	bl	8001504 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80058d0:	f023 0307 	bic.w	r3, r3, #7
 80058d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f000 fc05 	bl	80060f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590e:	f023 0303 	bic.w	r3, r3, #3
 8005912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	4313      	orrs	r3, r2
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800592c:	f023 030c 	bic.w	r3, r3, #12
 8005930:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800593c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	4313      	orrs	r3, r2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	011a      	lsls	r2, r3, #4
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	031b      	lsls	r3, r3, #12
 800595c:	4313      	orrs	r3, r2
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005972:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	4313      	orrs	r3, r2
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d122      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0202 	mvn.w	r2, #2
 8005a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fb f942 	bl	8000ca4 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb46 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fb4d 	bl	80060c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d122      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d11b      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0204 	mvn.w	r2, #4
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fb f918 	bl	8000ca4 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fb1c 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fb23 	bl	80060c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0208 	mvn.w	r2, #8
 8005aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb f8ee 	bl	8000ca4 <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 faf2 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 faf9 	bl	80060c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0210 	mvn.w	r2, #16
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2208      	movs	r2, #8
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb f8c4 	bl	8000ca4 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fac8 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 facf 	bl	80060c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10e      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0201 	mvn.w	r2, #1
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fb f88e 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b66:	2b80      	cmp	r3, #128	; 0x80
 8005b68:	d10e      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b74:	2b80      	cmp	r3, #128	; 0x80
 8005b76:	d107      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f001 f8a8 	bl	8006cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b96:	d10e      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b80      	cmp	r3, #128	; 0x80
 8005ba4:	d107      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 f89b 	bl	8006cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d10e      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d107      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa7d 	bl	80060dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d10e      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d107      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f06f 0220 	mvn.w	r2, #32
 8005c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 f85b 	bl	8006cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c1c:	d10f      	bne.n	8005c3e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c2c:	d107      	bne.n	8005c3e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 f861 	bl	8006d00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c4c:	d10f      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c5c:	d107      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 f853 	bl	8006d14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c7c:	d10f      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c8c:	d107      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 f845 	bl	8006d28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cac:	d10f      	bne.n	8005cce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cbc:	d107      	bne.n	8005cce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 f837 	bl	8006d3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e0fd      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x216>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b14      	cmp	r3, #20
 8005cfe:	f200 80f0 	bhi.w	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005d02:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d5d 	.word	0x08005d5d
 8005d0c:	08005ee3 	.word	0x08005ee3
 8005d10:	08005ee3 	.word	0x08005ee3
 8005d14:	08005ee3 	.word	0x08005ee3
 8005d18:	08005d9d 	.word	0x08005d9d
 8005d1c:	08005ee3 	.word	0x08005ee3
 8005d20:	08005ee3 	.word	0x08005ee3
 8005d24:	08005ee3 	.word	0x08005ee3
 8005d28:	08005ddf 	.word	0x08005ddf
 8005d2c:	08005ee3 	.word	0x08005ee3
 8005d30:	08005ee3 	.word	0x08005ee3
 8005d34:	08005ee3 	.word	0x08005ee3
 8005d38:	08005e1f 	.word	0x08005e1f
 8005d3c:	08005ee3 	.word	0x08005ee3
 8005d40:	08005ee3 	.word	0x08005ee3
 8005d44:	08005ee3 	.word	0x08005ee3
 8005d48:	08005e61 	.word	0x08005e61
 8005d4c:	08005ee3 	.word	0x08005ee3
 8005d50:	08005ee3 	.word	0x08005ee3
 8005d54:	08005ee3 	.word	0x08005ee3
 8005d58:	08005ea1 	.word	0x08005ea1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fa54 	bl	8006210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0208 	orr.w	r2, r2, #8
 8005d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0204 	bic.w	r2, r2, #4
 8005d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6999      	ldr	r1, [r3, #24]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	619a      	str	r2, [r3, #24]
      break;
 8005d9a:	e0a3      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fac4 	bl	8006330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6999      	ldr	r1, [r3, #24]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	021a      	lsls	r2, r3, #8
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	619a      	str	r2, [r3, #24]
      break;
 8005ddc:	e082      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fb2d 	bl	8006444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0208 	orr.w	r2, r2, #8
 8005df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0204 	bic.w	r2, r2, #4
 8005e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69d9      	ldr	r1, [r3, #28]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	61da      	str	r2, [r3, #28]
      break;
 8005e1c:	e062      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fb95 	bl	8006554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69d9      	ldr	r1, [r3, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	021a      	lsls	r2, r3, #8
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	61da      	str	r2, [r3, #28]
      break;
 8005e5e:	e041      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fbfe 	bl	8006668 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0208 	orr.w	r2, r2, #8
 8005e7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0204 	bic.w	r2, r2, #4
 8005e8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e9e:	e021      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fc42 	bl	8006730 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	021a      	lsls	r2, r3, #8
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005ee0:	e000      	b.n	8005ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005ee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop

08005ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_ConfigClockSource+0x18>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e0c3      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x1a0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b70      	cmp	r3, #112	; 0x70
 8005f4a:	d038      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0xc6>
 8005f4c:	2b70      	cmp	r3, #112	; 0x70
 8005f4e:	d815      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x84>
 8005f50:	2b30      	cmp	r3, #48	; 0x30
 8005f52:	f000 808e 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x17a>
 8005f56:	2b30      	cmp	r3, #48	; 0x30
 8005f58:	d809      	bhi.n	8005f6e <HAL_TIM_ConfigClockSource+0x76>
 8005f5a:	2b10      	cmp	r3, #16
 8005f5c:	f000 8089 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x17a>
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	f000 8086 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x17a>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 8083 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005f6c:	e08b      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005f6e:	2b50      	cmp	r3, #80	; 0x50
 8005f70:	d04f      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0x11a>
 8005f72:	2b60      	cmp	r3, #96	; 0x60
 8005f74:	d05d      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x13a>
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d06b      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8005f7a:	e084      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005f7c:	4a48      	ldr	r2, [pc, #288]	; (80060a0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d077      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x17a>
 8005f82:	4a47      	ldr	r2, [pc, #284]	; (80060a0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d809      	bhi.n	8005f9c <HAL_TIM_ConfigClockSource+0xa4>
 8005f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8c:	d02e      	beq.n	8005fec <HAL_TIM_ConfigClockSource+0xf4>
 8005f8e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f92:	d06e      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x17a>
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f98:	d074      	beq.n	8006084 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8005f9a:	e074      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005f9c:	4a41      	ldr	r2, [pc, #260]	; (80060a4 <HAL_TIM_ConfigClockSource+0x1ac>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d067      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x17a>
 8005fa2:	4a40      	ldr	r2, [pc, #256]	; (80060a4 <HAL_TIM_ConfigClockSource+0x1ac>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d803      	bhi.n	8005fb0 <HAL_TIM_ConfigClockSource+0xb8>
 8005fa8:	4a3f      	ldr	r2, [pc, #252]	; (80060a8 <HAL_TIM_ConfigClockSource+0x1b0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d061      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005fae:	e06a      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005fb0:	4a3e      	ldr	r2, [pc, #248]	; (80060ac <HAL_TIM_ConfigClockSource+0x1b4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d05d      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x17a>
 8005fb6:	4a3e      	ldr	r2, [pc, #248]	; (80060b0 <HAL_TIM_ConfigClockSource+0x1b8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d05a      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005fbc:	e063      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6899      	ldr	r1, [r3, #8]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f000 fc91 	bl	80068f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	609a      	str	r2, [r3, #8]
      break;
 8005fea:	e04c      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6899      	ldr	r1, [r3, #8]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f000 fc7a 	bl	80068f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800600e:	609a      	str	r2, [r3, #8]
      break;
 8006010:	e039      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	461a      	mov	r2, r3
 8006020:	f000 fbec 	bl	80067fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2150      	movs	r1, #80	; 0x50
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fc45 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 8006030:	e029      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6859      	ldr	r1, [r3, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	461a      	mov	r2, r3
 8006040:	f000 fc0b 	bl	800685a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2160      	movs	r1, #96	; 0x60
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fc35 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 8006050:	e019      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	461a      	mov	r2, r3
 8006060:	f000 fbcc 	bl	80067fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2140      	movs	r1, #64	; 0x40
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fc25 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 8006070:	e009      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f000 fc1c 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 8006082:	e000      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8006084:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	00100020 	.word	0x00100020
 80060a4:	00100040 	.word	0x00100040
 80060a8:	00100030 	.word	0x00100030
 80060ac:	00100060 	.word	0x00100060
 80060b0:	00100070 	.word	0x00100070

080060b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a3c      	ldr	r2, [pc, #240]	; (80061f4 <TIM_Base_SetConfig+0x104>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00f      	beq.n	8006128 <TIM_Base_SetConfig+0x38>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d00b      	beq.n	8006128 <TIM_Base_SetConfig+0x38>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a39      	ldr	r2, [pc, #228]	; (80061f8 <TIM_Base_SetConfig+0x108>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d007      	beq.n	8006128 <TIM_Base_SetConfig+0x38>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a38      	ldr	r2, [pc, #224]	; (80061fc <TIM_Base_SetConfig+0x10c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_Base_SetConfig+0x38>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a37      	ldr	r2, [pc, #220]	; (8006200 <TIM_Base_SetConfig+0x110>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d108      	bne.n	800613a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2d      	ldr	r2, [pc, #180]	; (80061f4 <TIM_Base_SetConfig+0x104>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01b      	beq.n	800617a <TIM_Base_SetConfig+0x8a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d017      	beq.n	800617a <TIM_Base_SetConfig+0x8a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2a      	ldr	r2, [pc, #168]	; (80061f8 <TIM_Base_SetConfig+0x108>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <TIM_Base_SetConfig+0x8a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a29      	ldr	r2, [pc, #164]	; (80061fc <TIM_Base_SetConfig+0x10c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00f      	beq.n	800617a <TIM_Base_SetConfig+0x8a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a28      	ldr	r2, [pc, #160]	; (8006200 <TIM_Base_SetConfig+0x110>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_Base_SetConfig+0x8a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a27      	ldr	r2, [pc, #156]	; (8006204 <TIM_Base_SetConfig+0x114>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <TIM_Base_SetConfig+0x8a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a26      	ldr	r2, [pc, #152]	; (8006208 <TIM_Base_SetConfig+0x118>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_Base_SetConfig+0x8a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a25      	ldr	r2, [pc, #148]	; (800620c <TIM_Base_SetConfig+0x11c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d108      	bne.n	800618c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a10      	ldr	r2, [pc, #64]	; (80061f4 <TIM_Base_SetConfig+0x104>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00f      	beq.n	80061d8 <TIM_Base_SetConfig+0xe8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a11      	ldr	r2, [pc, #68]	; (8006200 <TIM_Base_SetConfig+0x110>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00b      	beq.n	80061d8 <TIM_Base_SetConfig+0xe8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a10      	ldr	r2, [pc, #64]	; (8006204 <TIM_Base_SetConfig+0x114>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_Base_SetConfig+0xe8>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a0f      	ldr	r2, [pc, #60]	; (8006208 <TIM_Base_SetConfig+0x118>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_Base_SetConfig+0xe8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a0e      	ldr	r2, [pc, #56]	; (800620c <TIM_Base_SetConfig+0x11c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d103      	bne.n	80061e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	615a      	str	r2, [r3, #20]
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40000800 	.word	0x40000800
 8006200:	40013400 	.word	0x40013400
 8006204:	40014000 	.word	0x40014000
 8006208:	40014400 	.word	0x40014400
 800620c:	40014800 	.word	0x40014800

08006210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 0302 	bic.w	r3, r3, #2
 800625c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a2c      	ldr	r2, [pc, #176]	; (800631c <TIM_OC1_SetConfig+0x10c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00f      	beq.n	8006290 <TIM_OC1_SetConfig+0x80>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a2b      	ldr	r2, [pc, #172]	; (8006320 <TIM_OC1_SetConfig+0x110>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00b      	beq.n	8006290 <TIM_OC1_SetConfig+0x80>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a2a      	ldr	r2, [pc, #168]	; (8006324 <TIM_OC1_SetConfig+0x114>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d007      	beq.n	8006290 <TIM_OC1_SetConfig+0x80>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a29      	ldr	r2, [pc, #164]	; (8006328 <TIM_OC1_SetConfig+0x118>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_OC1_SetConfig+0x80>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a28      	ldr	r2, [pc, #160]	; (800632c <TIM_OC1_SetConfig+0x11c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d10c      	bne.n	80062aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0308 	bic.w	r3, r3, #8
 8006296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 0304 	bic.w	r3, r3, #4
 80062a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a1b      	ldr	r2, [pc, #108]	; (800631c <TIM_OC1_SetConfig+0x10c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00f      	beq.n	80062d2 <TIM_OC1_SetConfig+0xc2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a1a      	ldr	r2, [pc, #104]	; (8006320 <TIM_OC1_SetConfig+0x110>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00b      	beq.n	80062d2 <TIM_OC1_SetConfig+0xc2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a19      	ldr	r2, [pc, #100]	; (8006324 <TIM_OC1_SetConfig+0x114>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d007      	beq.n	80062d2 <TIM_OC1_SetConfig+0xc2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a18      	ldr	r2, [pc, #96]	; (8006328 <TIM_OC1_SetConfig+0x118>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_OC1_SetConfig+0xc2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a17      	ldr	r2, [pc, #92]	; (800632c <TIM_OC1_SetConfig+0x11c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d111      	bne.n	80062f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40013400 	.word	0x40013400
 8006324:	40014000 	.word	0x40014000
 8006328:	40014400 	.word	0x40014400
 800632c:	40014800 	.word	0x40014800

08006330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f023 0210 	bic.w	r2, r3, #16
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f023 0320 	bic.w	r3, r3, #32
 800637e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a28      	ldr	r2, [pc, #160]	; (8006430 <TIM_OC2_SetConfig+0x100>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d003      	beq.n	800639c <TIM_OC2_SetConfig+0x6c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a27      	ldr	r2, [pc, #156]	; (8006434 <TIM_OC2_SetConfig+0x104>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d10d      	bne.n	80063b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <TIM_OC2_SetConfig+0x100>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00f      	beq.n	80063e0 <TIM_OC2_SetConfig+0xb0>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <TIM_OC2_SetConfig+0x104>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <TIM_OC2_SetConfig+0xb0>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a1b      	ldr	r2, [pc, #108]	; (8006438 <TIM_OC2_SetConfig+0x108>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d007      	beq.n	80063e0 <TIM_OC2_SetConfig+0xb0>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a1a      	ldr	r2, [pc, #104]	; (800643c <TIM_OC2_SetConfig+0x10c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_OC2_SetConfig+0xb0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a19      	ldr	r2, [pc, #100]	; (8006440 <TIM_OC2_SetConfig+0x110>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d113      	bne.n	8006408 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40012c00 	.word	0x40012c00
 8006434:	40013400 	.word	0x40013400
 8006438:	40014000 	.word	0x40014000
 800643c:	40014400 	.word	0x40014400
 8006440:	40014800 	.word	0x40014800

08006444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0303 	bic.w	r3, r3, #3
 800647e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a27      	ldr	r2, [pc, #156]	; (8006540 <TIM_OC3_SetConfig+0xfc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC3_SetConfig+0x6a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a26      	ldr	r2, [pc, #152]	; (8006544 <TIM_OC3_SetConfig+0x100>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d10d      	bne.n	80064ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <TIM_OC3_SetConfig+0xfc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00f      	beq.n	80064f2 <TIM_OC3_SetConfig+0xae>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <TIM_OC3_SetConfig+0x100>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00b      	beq.n	80064f2 <TIM_OC3_SetConfig+0xae>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1a      	ldr	r2, [pc, #104]	; (8006548 <TIM_OC3_SetConfig+0x104>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d007      	beq.n	80064f2 <TIM_OC3_SetConfig+0xae>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a19      	ldr	r2, [pc, #100]	; (800654c <TIM_OC3_SetConfig+0x108>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d003      	beq.n	80064f2 <TIM_OC3_SetConfig+0xae>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a18      	ldr	r2, [pc, #96]	; (8006550 <TIM_OC3_SetConfig+0x10c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d113      	bne.n	800651a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	621a      	str	r2, [r3, #32]
}
 8006534:	bf00      	nop
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40013400 	.word	0x40013400
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800

08006554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	031b      	lsls	r3, r3, #12
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a28      	ldr	r2, [pc, #160]	; (8006654 <TIM_OC4_SetConfig+0x100>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_OC4_SetConfig+0x6c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a27      	ldr	r2, [pc, #156]	; (8006658 <TIM_OC4_SetConfig+0x104>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10d      	bne.n	80065dc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	031b      	lsls	r3, r3, #12
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a1d      	ldr	r2, [pc, #116]	; (8006654 <TIM_OC4_SetConfig+0x100>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00f      	beq.n	8006604 <TIM_OC4_SetConfig+0xb0>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a1c      	ldr	r2, [pc, #112]	; (8006658 <TIM_OC4_SetConfig+0x104>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00b      	beq.n	8006604 <TIM_OC4_SetConfig+0xb0>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a1b      	ldr	r2, [pc, #108]	; (800665c <TIM_OC4_SetConfig+0x108>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d007      	beq.n	8006604 <TIM_OC4_SetConfig+0xb0>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1a      	ldr	r2, [pc, #104]	; (8006660 <TIM_OC4_SetConfig+0x10c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d003      	beq.n	8006604 <TIM_OC4_SetConfig+0xb0>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a19      	ldr	r2, [pc, #100]	; (8006664 <TIM_OC4_SetConfig+0x110>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d113      	bne.n	800662c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006612:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	019b      	lsls	r3, r3, #6
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	019b      	lsls	r3, r3, #6
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40012c00 	.word	0x40012c00
 8006658:	40013400 	.word	0x40013400
 800665c:	40014000 	.word	0x40014000
 8006660:	40014400 	.word	0x40014400
 8006664:	40014800 	.word	0x40014800

08006668 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a17      	ldr	r2, [pc, #92]	; (800671c <TIM_OC5_SetConfig+0xb4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00f      	beq.n	80066e2 <TIM_OC5_SetConfig+0x7a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a16      	ldr	r2, [pc, #88]	; (8006720 <TIM_OC5_SetConfig+0xb8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <TIM_OC5_SetConfig+0x7a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a15      	ldr	r2, [pc, #84]	; (8006724 <TIM_OC5_SetConfig+0xbc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_OC5_SetConfig+0x7a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a14      	ldr	r2, [pc, #80]	; (8006728 <TIM_OC5_SetConfig+0xc0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_OC5_SetConfig+0x7a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a13      	ldr	r2, [pc, #76]	; (800672c <TIM_OC5_SetConfig+0xc4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d109      	bne.n	80066f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	621a      	str	r2, [r3, #32]
}
 8006710:	bf00      	nop
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	40012c00 	.word	0x40012c00
 8006720:	40013400 	.word	0x40013400
 8006724:	40014000 	.word	0x40014000
 8006728:	40014400 	.word	0x40014400
 800672c:	40014800 	.word	0x40014800

08006730 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800675e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	051b      	lsls	r3, r3, #20
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <TIM_OC6_SetConfig+0xb8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00f      	beq.n	80067ac <TIM_OC6_SetConfig+0x7c>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a17      	ldr	r2, [pc, #92]	; (80067ec <TIM_OC6_SetConfig+0xbc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00b      	beq.n	80067ac <TIM_OC6_SetConfig+0x7c>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <TIM_OC6_SetConfig+0xc0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d007      	beq.n	80067ac <TIM_OC6_SetConfig+0x7c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <TIM_OC6_SetConfig+0xc4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <TIM_OC6_SetConfig+0x7c>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <TIM_OC6_SetConfig+0xc8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d109      	bne.n	80067c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	029b      	lsls	r3, r3, #10
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40013400 	.word	0x40013400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400
 80067f8:	40014800 	.word	0x40014800

080067fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f023 0201 	bic.w	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f023 030a 	bic.w	r3, r3, #10
 8006838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800685a:	b480      	push	{r7}
 800685c:	b087      	sub	sp, #28
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0210 	bic.w	r2, r3, #16
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	031b      	lsls	r3, r3, #12
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006896:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80068d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	f043 0307 	orr.w	r3, r3, #7
 80068e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	609a      	str	r2, [r3, #8]
}
 80068e8:	bf00      	nop
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800690e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	021a      	lsls	r2, r3, #8
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	431a      	orrs	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4313      	orrs	r3, r2
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	609a      	str	r2, [r3, #8]
}
 8006928:	bf00      	nop
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	2201      	movs	r2, #1
 8006948:	fa02 f303 	lsl.w	r3, r2, r3
 800694c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a1a      	ldr	r2, [r3, #32]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	43db      	mvns	r3, r3
 8006956:	401a      	ands	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1a      	ldr	r2, [r3, #32]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	fa01 f303 	lsl.w	r3, r1, r3
 800696c:	431a      	orrs	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	621a      	str	r2, [r3, #32]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d109      	bne.n	80069a4 <HAL_TIMEx_PWMN_Start+0x24>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	bf14      	ite	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2300      	moveq	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	e022      	b.n	80069ea <HAL_TIMEx_PWMN_Start+0x6a>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d109      	bne.n	80069be <HAL_TIMEx_PWMN_Start+0x3e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	bf14      	ite	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	2300      	moveq	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	e015      	b.n	80069ea <HAL_TIMEx_PWMN_Start+0x6a>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d109      	bne.n	80069d8 <HAL_TIMEx_PWMN_Start+0x58>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	e008      	b.n	80069ea <HAL_TIMEx_PWMN_Start+0x6a>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	bf14      	ite	ne
 80069e4:	2301      	movne	r3, #1
 80069e6:	2300      	moveq	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e040      	b.n	8006a74 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <HAL_TIMEx_PWMN_Start+0x82>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a00:	e013      	b.n	8006a2a <HAL_TIMEx_PWMN_Start+0xaa>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d104      	bne.n	8006a12 <HAL_TIMEx_PWMN_Start+0x92>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a10:	e00b      	b.n	8006a2a <HAL_TIMEx_PWMN_Start+0xaa>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d104      	bne.n	8006a22 <HAL_TIMEx_PWMN_Start+0xa2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a20:	e003      	b.n	8006a2a <HAL_TIMEx_PWMN_Start+0xaa>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f98c 	bl	8006d50 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_TIMEx_PWMN_Start+0xfc>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b06      	cmp	r3, #6
 8006a58:	d00b      	beq.n	8006a72 <HAL_TIMEx_PWMN_Start+0xf2>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a60:	d007      	beq.n	8006a72 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0201 	orr.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	00010007 	.word	0x00010007

08006a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e065      	b.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a2c      	ldr	r2, [pc, #176]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d004      	beq.n	8006acc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a2b      	ldr	r2, [pc, #172]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d108      	bne.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ad2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1b      	ldr	r2, [pc, #108]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d018      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d013      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00e      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a17      	ldr	r2, [pc, #92]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d009      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a12      	ldr	r2, [pc, #72]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d004      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a13      	ldr	r2, [pc, #76]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d10c      	bne.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	40012c00 	.word	0x40012c00
 8006b74:	40013400 	.word	0x40013400
 8006b78:	40000400 	.word	0x40000400
 8006b7c:	40000800 	.word	0x40000800
 8006b80:	40014000 	.word	0x40014000

08006b84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e087      	b.n	8006cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	041b      	lsls	r3, r3, #16
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a27      	ldr	r2, [pc, #156]	; (8006cbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d004      	beq.n	8006c2e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a25      	ldr	r2, [pc, #148]	; (8006cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d106      	bne.n	8006c3c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1e      	ldr	r2, [pc, #120]	; (8006cbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d126      	bne.n	8006c9e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	051b      	lsls	r3, r3, #20
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a0e      	ldr	r2, [pc, #56]	; (8006cbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a0d      	ldr	r2, [pc, #52]	; (8006cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d106      	bne.n	8006c9e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40013400 	.word	0x40013400

08006cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2204      	movs	r2, #4
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1a      	ldr	r2, [r3, #32]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	401a      	ands	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1a      	ldr	r2, [r3, #32]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	fa01 f303 	lsl.w	r3, r1, r3
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e042      	b.n	8006e32 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fa fcec 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	; 0x24
 8006dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0201 	bic.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f9a7 	bl	8007130 <UART_SetConfig>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e022      	b.n	8006e32 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fb55 	bl	80084a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0201 	orr.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fbdc 	bl	80085e8 <UART_CheckIdleState>
 8006e30:	4603      	mov	r3, r0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d118      	bne.n	8006e9c <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d013      	beq.n	8006e9c <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d009      	beq.n	8006e9c <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 812e 	beq.w	80070ee <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
      }
      return;
 8006e9a:	e128      	b.n	80070ee <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 80d1 	beq.w	8007046 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4b96      	ldr	r3, [pc, #600]	; (8007100 <HAL_UART_IRQHandler+0x2c4>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d105      	bne.n	8006eba <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80c6 	beq.w	8007046 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d010      	beq.n	8006ee6 <HAL_UART_IRQHandler+0xaa>
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00b      	beq.n	8006ee6 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006edc:	f043 0201 	orr.w	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d010      	beq.n	8006f12 <HAL_UART_IRQHandler+0xd6>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00b      	beq.n	8006f12 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2202      	movs	r2, #2
 8006f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f08:	f043 0204 	orr.w	r2, r3, #4
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d010      	beq.n	8006f3e <HAL_UART_IRQHandler+0x102>
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00b      	beq.n	8006f3e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f34:	f043 0202 	orr.w	r2, r3, #2
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d015      	beq.n	8006f74 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4b6a      	ldr	r3, [pc, #424]	; (8007100 <HAL_UART_IRQHandler+0x2c4>)
 8006f56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2208      	movs	r2, #8
 8006f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6a:	f043 0208 	orr.w	r2, r3, #8
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 80b9 	beq.w	80070f2 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d011      	beq.n	8006fae <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	2b40      	cmp	r3, #64	; 0x40
 8006fc2:	d004      	beq.n	8006fce <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d031      	beq.n	8007032 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f001 fb9c 	bl	800870c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d123      	bne.n	800702a <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d013      	beq.n	8007022 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ffe:	4a41      	ldr	r2, [pc, #260]	; (8007104 <HAL_UART_IRQHandler+0x2c8>)
 8007000:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007006:	4618      	mov	r0, r3
 8007008:	f7fc fcbf 	bl	800398a <HAL_DMA_Abort_IT>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d017      	beq.n	8007042 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007020:	e00f      	b.n	8007042 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f87a 	bl	800711c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007028:	e00b      	b.n	8007042 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f876 	bl	800711c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007030:	e007      	b.n	8007042 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f872 	bl	800711c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007040:	e057      	b.n	80070f2 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007042:	bf00      	nop
    return;
 8007044:	e055      	b.n	80070f2 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00d      	beq.n	800706c <HAL_UART_IRQHandler+0x230>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fba4 	bl	80087b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800706a:	e045      	b.n	80070f8 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007072:	2b00      	cmp	r3, #0
 8007074:	d012      	beq.n	800709c <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d008      	beq.n	800709c <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	2b00      	cmp	r3, #0
 8007090:	d031      	beq.n	80070f6 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
    }
    return;
 800709a:	e02c      	b.n	80070f6 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <HAL_UART_IRQHandler+0x27c>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 fb64 	bl	800877e <UART_EndTransmit_IT>
    return;
 80070b6:	e01f      	b.n	80070f8 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d008      	beq.n	80070d4 <HAL_UART_IRQHandler+0x298>
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 fb84 	bl	80087da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070d2:	e011      	b.n	80070f8 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00c      	beq.n	80070f8 <HAL_UART_IRQHandler+0x2bc>
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da09      	bge.n	80070f8 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fb6e 	bl	80087c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ea:	bf00      	nop
 80070ec:	e004      	b.n	80070f8 <HAL_UART_IRQHandler+0x2bc>
      return;
 80070ee:	bf00      	nop
 80070f0:	e002      	b.n	80070f8 <HAL_UART_IRQHandler+0x2bc>
    return;
 80070f2:	bf00      	nop
 80070f4:	e000      	b.n	80070f8 <HAL_UART_IRQHandler+0x2bc>
    return;
 80070f6:	bf00      	nop
  }
}
 80070f8:	3720      	adds	r7, #32
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	10000001 	.word	0x10000001
 8007104:	08008753 	.word	0x08008753

08007108 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007130:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007134:	b08a      	sub	sp, #40	; 0x28
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800713a:	2300      	movs	r3, #0
 800713c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	4313      	orrs	r3, r2
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007164:	4313      	orrs	r3, r2
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4ba4      	ldr	r3, [pc, #656]	; (8007400 <UART_SetConfig+0x2d0>)
 8007170:	4013      	ands	r3, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007178:	430b      	orrs	r3, r1
 800717a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a99      	ldr	r2, [pc, #612]	; (8007404 <UART_SetConfig+0x2d4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a8:	4313      	orrs	r3, r2
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071c0:	430b      	orrs	r3, r1
 80071c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	f023 010f 	bic.w	r1, r3, #15
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a8a      	ldr	r2, [pc, #552]	; (8007408 <UART_SetConfig+0x2d8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d126      	bne.n	8007232 <UART_SetConfig+0x102>
 80071e4:	4b89      	ldr	r3, [pc, #548]	; (800740c <UART_SetConfig+0x2dc>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d81a      	bhi.n	8007228 <UART_SetConfig+0xf8>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <UART_SetConfig+0xc8>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007209 	.word	0x08007209
 80071fc:	08007219 	.word	0x08007219
 8007200:	08007211 	.word	0x08007211
 8007204:	08007221 	.word	0x08007221
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800720e:	e0d6      	b.n	80073be <UART_SetConfig+0x28e>
 8007210:	2302      	movs	r3, #2
 8007212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007216:	e0d2      	b.n	80073be <UART_SetConfig+0x28e>
 8007218:	2304      	movs	r3, #4
 800721a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800721e:	e0ce      	b.n	80073be <UART_SetConfig+0x28e>
 8007220:	2308      	movs	r3, #8
 8007222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007226:	e0ca      	b.n	80073be <UART_SetConfig+0x28e>
 8007228:	2310      	movs	r3, #16
 800722a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722e:	bf00      	nop
 8007230:	e0c5      	b.n	80073be <UART_SetConfig+0x28e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a76      	ldr	r2, [pc, #472]	; (8007410 <UART_SetConfig+0x2e0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d138      	bne.n	80072ae <UART_SetConfig+0x17e>
 800723c:	4b73      	ldr	r3, [pc, #460]	; (800740c <UART_SetConfig+0x2dc>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f003 030c 	and.w	r3, r3, #12
 8007246:	2b0c      	cmp	r3, #12
 8007248:	d82c      	bhi.n	80072a4 <UART_SetConfig+0x174>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0x120>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007285 	.word	0x08007285
 8007254:	080072a5 	.word	0x080072a5
 8007258:	080072a5 	.word	0x080072a5
 800725c:	080072a5 	.word	0x080072a5
 8007260:	08007295 	.word	0x08007295
 8007264:	080072a5 	.word	0x080072a5
 8007268:	080072a5 	.word	0x080072a5
 800726c:	080072a5 	.word	0x080072a5
 8007270:	0800728d 	.word	0x0800728d
 8007274:	080072a5 	.word	0x080072a5
 8007278:	080072a5 	.word	0x080072a5
 800727c:	080072a5 	.word	0x080072a5
 8007280:	0800729d 	.word	0x0800729d
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800728a:	e098      	b.n	80073be <UART_SetConfig+0x28e>
 800728c:	2302      	movs	r3, #2
 800728e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007292:	e094      	b.n	80073be <UART_SetConfig+0x28e>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800729a:	e090      	b.n	80073be <UART_SetConfig+0x28e>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072a2:	e08c      	b.n	80073be <UART_SetConfig+0x28e>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072aa:	bf00      	nop
 80072ac:	e087      	b.n	80073be <UART_SetConfig+0x28e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a58      	ldr	r2, [pc, #352]	; (8007414 <UART_SetConfig+0x2e4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d125      	bne.n	8007304 <UART_SetConfig+0x1d4>
 80072b8:	4b54      	ldr	r3, [pc, #336]	; (800740c <UART_SetConfig+0x2dc>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	d011      	beq.n	80072ea <UART_SetConfig+0x1ba>
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d802      	bhi.n	80072d0 <UART_SetConfig+0x1a0>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <UART_SetConfig+0x1aa>
 80072ce:	e014      	b.n	80072fa <UART_SetConfig+0x1ca>
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d006      	beq.n	80072e2 <UART_SetConfig+0x1b2>
 80072d4:	2b30      	cmp	r3, #48	; 0x30
 80072d6:	d00c      	beq.n	80072f2 <UART_SetConfig+0x1c2>
 80072d8:	e00f      	b.n	80072fa <UART_SetConfig+0x1ca>
 80072da:	2300      	movs	r3, #0
 80072dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e0:	e06d      	b.n	80073be <UART_SetConfig+0x28e>
 80072e2:	2302      	movs	r3, #2
 80072e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e8:	e069      	b.n	80073be <UART_SetConfig+0x28e>
 80072ea:	2304      	movs	r3, #4
 80072ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f0:	e065      	b.n	80073be <UART_SetConfig+0x28e>
 80072f2:	2308      	movs	r3, #8
 80072f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f8:	e061      	b.n	80073be <UART_SetConfig+0x28e>
 80072fa:	2310      	movs	r3, #16
 80072fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007300:	bf00      	nop
 8007302:	e05c      	b.n	80073be <UART_SetConfig+0x28e>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a43      	ldr	r2, [pc, #268]	; (8007418 <UART_SetConfig+0x2e8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d125      	bne.n	800735a <UART_SetConfig+0x22a>
 800730e:	4b3f      	ldr	r3, [pc, #252]	; (800740c <UART_SetConfig+0x2dc>)
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007314:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d011      	beq.n	8007340 <UART_SetConfig+0x210>
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	d802      	bhi.n	8007326 <UART_SetConfig+0x1f6>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d005      	beq.n	8007330 <UART_SetConfig+0x200>
 8007324:	e014      	b.n	8007350 <UART_SetConfig+0x220>
 8007326:	2b80      	cmp	r3, #128	; 0x80
 8007328:	d006      	beq.n	8007338 <UART_SetConfig+0x208>
 800732a:	2bc0      	cmp	r3, #192	; 0xc0
 800732c:	d00c      	beq.n	8007348 <UART_SetConfig+0x218>
 800732e:	e00f      	b.n	8007350 <UART_SetConfig+0x220>
 8007330:	2300      	movs	r3, #0
 8007332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007336:	e042      	b.n	80073be <UART_SetConfig+0x28e>
 8007338:	2302      	movs	r3, #2
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733e:	e03e      	b.n	80073be <UART_SetConfig+0x28e>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007346:	e03a      	b.n	80073be <UART_SetConfig+0x28e>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800734e:	e036      	b.n	80073be <UART_SetConfig+0x28e>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007356:	bf00      	nop
 8007358:	e031      	b.n	80073be <UART_SetConfig+0x28e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a29      	ldr	r2, [pc, #164]	; (8007404 <UART_SetConfig+0x2d4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d129      	bne.n	80073b8 <UART_SetConfig+0x288>
 8007364:	4b29      	ldr	r3, [pc, #164]	; (800740c <UART_SetConfig+0x2dc>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800736e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007372:	d014      	beq.n	800739e <UART_SetConfig+0x26e>
 8007374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007378:	d802      	bhi.n	8007380 <UART_SetConfig+0x250>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <UART_SetConfig+0x25e>
 800737e:	e016      	b.n	80073ae <UART_SetConfig+0x27e>
 8007380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007384:	d007      	beq.n	8007396 <UART_SetConfig+0x266>
 8007386:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800738a:	d00c      	beq.n	80073a6 <UART_SetConfig+0x276>
 800738c:	e00f      	b.n	80073ae <UART_SetConfig+0x27e>
 800738e:	2300      	movs	r3, #0
 8007390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007394:	e013      	b.n	80073be <UART_SetConfig+0x28e>
 8007396:	2302      	movs	r3, #2
 8007398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800739c:	e00f      	b.n	80073be <UART_SetConfig+0x28e>
 800739e:	2304      	movs	r3, #4
 80073a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073a4:	e00b      	b.n	80073be <UART_SetConfig+0x28e>
 80073a6:	2308      	movs	r3, #8
 80073a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ac:	e007      	b.n	80073be <UART_SetConfig+0x28e>
 80073ae:	2310      	movs	r3, #16
 80073b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073b4:	bf00      	nop
 80073b6:	e002      	b.n	80073be <UART_SetConfig+0x28e>
 80073b8:	2310      	movs	r3, #16
 80073ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a10      	ldr	r2, [pc, #64]	; (8007404 <UART_SetConfig+0x2d4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	f040 842e 	bne.w	8007c26 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ce:	2b08      	cmp	r3, #8
 80073d0:	f200 8169 	bhi.w	80076a6 <UART_SetConfig+0x576>
 80073d4:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <UART_SetConfig+0x2ac>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	080076a7 	.word	0x080076a7
 80073e4:	080074bf 	.word	0x080074bf
 80073e8:	080076a7 	.word	0x080076a7
 80073ec:	08007557 	.word	0x08007557
 80073f0:	080076a7 	.word	0x080076a7
 80073f4:	080076a7 	.word	0x080076a7
 80073f8:	080076a7 	.word	0x080076a7
 80073fc:	080075f9 	.word	0x080075f9
 8007400:	cfff69f3 	.word	0xcfff69f3
 8007404:	40008000 	.word	0x40008000
 8007408:	40013800 	.word	0x40013800
 800740c:	40021000 	.word	0x40021000
 8007410:	40004400 	.word	0x40004400
 8007414:	40004800 	.word	0x40004800
 8007418:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800741c:	f7fd fe12 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8007420:	4602      	mov	r2, r0
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d044      	beq.n	80074b4 <UART_SetConfig+0x384>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b01      	cmp	r3, #1
 8007430:	d03e      	beq.n	80074b0 <UART_SetConfig+0x380>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b02      	cmp	r3, #2
 8007438:	d038      	beq.n	80074ac <UART_SetConfig+0x37c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	2b03      	cmp	r3, #3
 8007440:	d032      	beq.n	80074a8 <UART_SetConfig+0x378>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b04      	cmp	r3, #4
 8007448:	d02c      	beq.n	80074a4 <UART_SetConfig+0x374>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	2b05      	cmp	r3, #5
 8007450:	d026      	beq.n	80074a0 <UART_SetConfig+0x370>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b06      	cmp	r3, #6
 8007458:	d020      	beq.n	800749c <UART_SetConfig+0x36c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b07      	cmp	r3, #7
 8007460:	d01a      	beq.n	8007498 <UART_SetConfig+0x368>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b08      	cmp	r3, #8
 8007468:	d014      	beq.n	8007494 <UART_SetConfig+0x364>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b09      	cmp	r3, #9
 8007470:	d00e      	beq.n	8007490 <UART_SetConfig+0x360>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b0a      	cmp	r3, #10
 8007478:	d008      	beq.n	800748c <UART_SetConfig+0x35c>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b0b      	cmp	r3, #11
 8007480:	d102      	bne.n	8007488 <UART_SetConfig+0x358>
 8007482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007486:	e016      	b.n	80074b6 <UART_SetConfig+0x386>
 8007488:	2301      	movs	r3, #1
 800748a:	e014      	b.n	80074b6 <UART_SetConfig+0x386>
 800748c:	2380      	movs	r3, #128	; 0x80
 800748e:	e012      	b.n	80074b6 <UART_SetConfig+0x386>
 8007490:	2340      	movs	r3, #64	; 0x40
 8007492:	e010      	b.n	80074b6 <UART_SetConfig+0x386>
 8007494:	2320      	movs	r3, #32
 8007496:	e00e      	b.n	80074b6 <UART_SetConfig+0x386>
 8007498:	2310      	movs	r3, #16
 800749a:	e00c      	b.n	80074b6 <UART_SetConfig+0x386>
 800749c:	230c      	movs	r3, #12
 800749e:	e00a      	b.n	80074b6 <UART_SetConfig+0x386>
 80074a0:	230a      	movs	r3, #10
 80074a2:	e008      	b.n	80074b6 <UART_SetConfig+0x386>
 80074a4:	2308      	movs	r3, #8
 80074a6:	e006      	b.n	80074b6 <UART_SetConfig+0x386>
 80074a8:	2306      	movs	r3, #6
 80074aa:	e004      	b.n	80074b6 <UART_SetConfig+0x386>
 80074ac:	2304      	movs	r3, #4
 80074ae:	e002      	b.n	80074b6 <UART_SetConfig+0x386>
 80074b0:	2302      	movs	r3, #2
 80074b2:	e000      	b.n	80074b6 <UART_SetConfig+0x386>
 80074b4:	2301      	movs	r3, #1
 80074b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ba:	617b      	str	r3, [r7, #20]
        break;
 80074bc:	e0f6      	b.n	80076ac <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d044      	beq.n	8007550 <UART_SetConfig+0x420>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d03e      	beq.n	800754c <UART_SetConfig+0x41c>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d038      	beq.n	8007548 <UART_SetConfig+0x418>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d032      	beq.n	8007544 <UART_SetConfig+0x414>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d02c      	beq.n	8007540 <UART_SetConfig+0x410>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	d026      	beq.n	800753c <UART_SetConfig+0x40c>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2b06      	cmp	r3, #6
 80074f4:	d020      	beq.n	8007538 <UART_SetConfig+0x408>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b07      	cmp	r3, #7
 80074fc:	d01a      	beq.n	8007534 <UART_SetConfig+0x404>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	2b08      	cmp	r3, #8
 8007504:	d014      	beq.n	8007530 <UART_SetConfig+0x400>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	2b09      	cmp	r3, #9
 800750c:	d00e      	beq.n	800752c <UART_SetConfig+0x3fc>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b0a      	cmp	r3, #10
 8007514:	d008      	beq.n	8007528 <UART_SetConfig+0x3f8>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	2b0b      	cmp	r3, #11
 800751c:	d102      	bne.n	8007524 <UART_SetConfig+0x3f4>
 800751e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007522:	e016      	b.n	8007552 <UART_SetConfig+0x422>
 8007524:	4ba1      	ldr	r3, [pc, #644]	; (80077ac <UART_SetConfig+0x67c>)
 8007526:	e014      	b.n	8007552 <UART_SetConfig+0x422>
 8007528:	4ba1      	ldr	r3, [pc, #644]	; (80077b0 <UART_SetConfig+0x680>)
 800752a:	e012      	b.n	8007552 <UART_SetConfig+0x422>
 800752c:	4ba1      	ldr	r3, [pc, #644]	; (80077b4 <UART_SetConfig+0x684>)
 800752e:	e010      	b.n	8007552 <UART_SetConfig+0x422>
 8007530:	4ba1      	ldr	r3, [pc, #644]	; (80077b8 <UART_SetConfig+0x688>)
 8007532:	e00e      	b.n	8007552 <UART_SetConfig+0x422>
 8007534:	4ba1      	ldr	r3, [pc, #644]	; (80077bc <UART_SetConfig+0x68c>)
 8007536:	e00c      	b.n	8007552 <UART_SetConfig+0x422>
 8007538:	4ba1      	ldr	r3, [pc, #644]	; (80077c0 <UART_SetConfig+0x690>)
 800753a:	e00a      	b.n	8007552 <UART_SetConfig+0x422>
 800753c:	4ba1      	ldr	r3, [pc, #644]	; (80077c4 <UART_SetConfig+0x694>)
 800753e:	e008      	b.n	8007552 <UART_SetConfig+0x422>
 8007540:	4ba1      	ldr	r3, [pc, #644]	; (80077c8 <UART_SetConfig+0x698>)
 8007542:	e006      	b.n	8007552 <UART_SetConfig+0x422>
 8007544:	4ba1      	ldr	r3, [pc, #644]	; (80077cc <UART_SetConfig+0x69c>)
 8007546:	e004      	b.n	8007552 <UART_SetConfig+0x422>
 8007548:	4ba1      	ldr	r3, [pc, #644]	; (80077d0 <UART_SetConfig+0x6a0>)
 800754a:	e002      	b.n	8007552 <UART_SetConfig+0x422>
 800754c:	4ba1      	ldr	r3, [pc, #644]	; (80077d4 <UART_SetConfig+0x6a4>)
 800754e:	e000      	b.n	8007552 <UART_SetConfig+0x422>
 8007550:	4b96      	ldr	r3, [pc, #600]	; (80077ac <UART_SetConfig+0x67c>)
 8007552:	617b      	str	r3, [r7, #20]
        break;
 8007554:	e0aa      	b.n	80076ac <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007556:	f7fd fd07 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 800755a:	4602      	mov	r2, r0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	d044      	beq.n	80075ee <UART_SetConfig+0x4be>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	2b01      	cmp	r3, #1
 800756a:	d03e      	beq.n	80075ea <UART_SetConfig+0x4ba>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	2b02      	cmp	r3, #2
 8007572:	d038      	beq.n	80075e6 <UART_SetConfig+0x4b6>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	2b03      	cmp	r3, #3
 800757a:	d032      	beq.n	80075e2 <UART_SetConfig+0x4b2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	2b04      	cmp	r3, #4
 8007582:	d02c      	beq.n	80075de <UART_SetConfig+0x4ae>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b05      	cmp	r3, #5
 800758a:	d026      	beq.n	80075da <UART_SetConfig+0x4aa>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	2b06      	cmp	r3, #6
 8007592:	d020      	beq.n	80075d6 <UART_SetConfig+0x4a6>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b07      	cmp	r3, #7
 800759a:	d01a      	beq.n	80075d2 <UART_SetConfig+0x4a2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d014      	beq.n	80075ce <UART_SetConfig+0x49e>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b09      	cmp	r3, #9
 80075aa:	d00e      	beq.n	80075ca <UART_SetConfig+0x49a>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	2b0a      	cmp	r3, #10
 80075b2:	d008      	beq.n	80075c6 <UART_SetConfig+0x496>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b0b      	cmp	r3, #11
 80075ba:	d102      	bne.n	80075c2 <UART_SetConfig+0x492>
 80075bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075c0:	e016      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e014      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075c6:	2380      	movs	r3, #128	; 0x80
 80075c8:	e012      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075ca:	2340      	movs	r3, #64	; 0x40
 80075cc:	e010      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075ce:	2320      	movs	r3, #32
 80075d0:	e00e      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075d2:	2310      	movs	r3, #16
 80075d4:	e00c      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075d6:	230c      	movs	r3, #12
 80075d8:	e00a      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075da:	230a      	movs	r3, #10
 80075dc:	e008      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075de:	2308      	movs	r3, #8
 80075e0:	e006      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075e2:	2306      	movs	r3, #6
 80075e4:	e004      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075e6:	2304      	movs	r3, #4
 80075e8:	e002      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e000      	b.n	80075f0 <UART_SetConfig+0x4c0>
 80075ee:	2301      	movs	r3, #1
 80075f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f4:	617b      	str	r3, [r7, #20]
        break;
 80075f6:	e059      	b.n	80076ac <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d04e      	beq.n	800769e <UART_SetConfig+0x56e>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b01      	cmp	r3, #1
 8007606:	d047      	beq.n	8007698 <UART_SetConfig+0x568>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b02      	cmp	r3, #2
 800760e:	d040      	beq.n	8007692 <UART_SetConfig+0x562>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	2b03      	cmp	r3, #3
 8007616:	d039      	beq.n	800768c <UART_SetConfig+0x55c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	2b04      	cmp	r3, #4
 800761e:	d032      	beq.n	8007686 <UART_SetConfig+0x556>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	2b05      	cmp	r3, #5
 8007626:	d02b      	beq.n	8007680 <UART_SetConfig+0x550>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b06      	cmp	r3, #6
 800762e:	d024      	beq.n	800767a <UART_SetConfig+0x54a>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	2b07      	cmp	r3, #7
 8007636:	d01d      	beq.n	8007674 <UART_SetConfig+0x544>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b08      	cmp	r3, #8
 800763e:	d016      	beq.n	800766e <UART_SetConfig+0x53e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	2b09      	cmp	r3, #9
 8007646:	d00f      	beq.n	8007668 <UART_SetConfig+0x538>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b0a      	cmp	r3, #10
 800764e:	d008      	beq.n	8007662 <UART_SetConfig+0x532>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b0b      	cmp	r3, #11
 8007656:	d101      	bne.n	800765c <UART_SetConfig+0x52c>
 8007658:	2380      	movs	r3, #128	; 0x80
 800765a:	e022      	b.n	80076a2 <UART_SetConfig+0x572>
 800765c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007660:	e01f      	b.n	80076a2 <UART_SetConfig+0x572>
 8007662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007666:	e01c      	b.n	80076a2 <UART_SetConfig+0x572>
 8007668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800766c:	e019      	b.n	80076a2 <UART_SetConfig+0x572>
 800766e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007672:	e016      	b.n	80076a2 <UART_SetConfig+0x572>
 8007674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007678:	e013      	b.n	80076a2 <UART_SetConfig+0x572>
 800767a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800767e:	e010      	b.n	80076a2 <UART_SetConfig+0x572>
 8007680:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007684:	e00d      	b.n	80076a2 <UART_SetConfig+0x572>
 8007686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800768a:	e00a      	b.n	80076a2 <UART_SetConfig+0x572>
 800768c:	f241 5355 	movw	r3, #5461	; 0x1555
 8007690:	e007      	b.n	80076a2 <UART_SetConfig+0x572>
 8007692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007696:	e004      	b.n	80076a2 <UART_SetConfig+0x572>
 8007698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800769c:	e001      	b.n	80076a2 <UART_SetConfig+0x572>
 800769e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a2:	617b      	str	r3, [r7, #20]
        break;
 80076a4:	e002      	b.n	80076ac <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	76fb      	strb	r3, [r7, #27]
        break;
 80076aa:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 86cd 	beq.w	800844e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	4613      	mov	r3, r2
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	4413      	add	r3, r2
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d305      	bcc.n	80076d0 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d903      	bls.n	80076d8 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	76fb      	strb	r3, [r7, #27]
 80076d4:	f000 bebb 	b.w	800844e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80076d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076dc:	2b08      	cmp	r3, #8
 80076de:	f200 828d 	bhi.w	8007bfc <UART_SetConfig+0xacc>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0x5b8>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	08007bfd 	.word	0x08007bfd
 80076f0:	08007877 	.word	0x08007877
 80076f4:	08007bfd 	.word	0x08007bfd
 80076f8:	0800796d 	.word	0x0800796d
 80076fc:	08007bfd 	.word	0x08007bfd
 8007700:	08007bfd 	.word	0x08007bfd
 8007704:	08007bfd 	.word	0x08007bfd
 8007708:	08007aab 	.word	0x08007aab
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fd fc9a 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8007710:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	4618      	mov	r0, r3
 8007716:	f04f 0100 	mov.w	r1, #0
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	2b00      	cmp	r3, #0
 8007720:	d07d      	beq.n	800781e <UART_SetConfig+0x6ee>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	2b01      	cmp	r3, #1
 8007728:	d074      	beq.n	8007814 <UART_SetConfig+0x6e4>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	2b02      	cmp	r3, #2
 8007730:	d06b      	beq.n	800780a <UART_SetConfig+0x6da>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	2b03      	cmp	r3, #3
 8007738:	d062      	beq.n	8007800 <UART_SetConfig+0x6d0>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	2b04      	cmp	r3, #4
 8007740:	d059      	beq.n	80077f6 <UART_SetConfig+0x6c6>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	2b05      	cmp	r3, #5
 8007748:	d050      	beq.n	80077ec <UART_SetConfig+0x6bc>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	2b06      	cmp	r3, #6
 8007750:	d047      	beq.n	80077e2 <UART_SetConfig+0x6b2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	2b07      	cmp	r3, #7
 8007758:	d03e      	beq.n	80077d8 <UART_SetConfig+0x6a8>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	2b08      	cmp	r3, #8
 8007760:	d01f      	beq.n	80077a2 <UART_SetConfig+0x672>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	2b09      	cmp	r3, #9
 8007768:	d016      	beq.n	8007798 <UART_SetConfig+0x668>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	2b0a      	cmp	r3, #10
 8007770:	d00d      	beq.n	800778e <UART_SetConfig+0x65e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	2b0b      	cmp	r3, #11
 8007778:	d104      	bne.n	8007784 <UART_SetConfig+0x654>
 800777a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800777e:	f04f 0400 	mov.w	r4, #0
 8007782:	e050      	b.n	8007826 <UART_SetConfig+0x6f6>
 8007784:	f04f 0301 	mov.w	r3, #1
 8007788:	f04f 0400 	mov.w	r4, #0
 800778c:	e04b      	b.n	8007826 <UART_SetConfig+0x6f6>
 800778e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007792:	f04f 0400 	mov.w	r4, #0
 8007796:	e046      	b.n	8007826 <UART_SetConfig+0x6f6>
 8007798:	f04f 0340 	mov.w	r3, #64	; 0x40
 800779c:	f04f 0400 	mov.w	r4, #0
 80077a0:	e041      	b.n	8007826 <UART_SetConfig+0x6f6>
 80077a2:	f04f 0320 	mov.w	r3, #32
 80077a6:	f04f 0400 	mov.w	r4, #0
 80077aa:	e03c      	b.n	8007826 <UART_SetConfig+0x6f6>
 80077ac:	00f42400 	.word	0x00f42400
 80077b0:	0001e848 	.word	0x0001e848
 80077b4:	0003d090 	.word	0x0003d090
 80077b8:	0007a120 	.word	0x0007a120
 80077bc:	000f4240 	.word	0x000f4240
 80077c0:	00145855 	.word	0x00145855
 80077c4:	00186a00 	.word	0x00186a00
 80077c8:	001e8480 	.word	0x001e8480
 80077cc:	0028b0aa 	.word	0x0028b0aa
 80077d0:	003d0900 	.word	0x003d0900
 80077d4:	007a1200 	.word	0x007a1200
 80077d8:	f04f 0310 	mov.w	r3, #16
 80077dc:	f04f 0400 	mov.w	r4, #0
 80077e0:	e021      	b.n	8007826 <UART_SetConfig+0x6f6>
 80077e2:	f04f 030c 	mov.w	r3, #12
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	e01c      	b.n	8007826 <UART_SetConfig+0x6f6>
 80077ec:	f04f 030a 	mov.w	r3, #10
 80077f0:	f04f 0400 	mov.w	r4, #0
 80077f4:	e017      	b.n	8007826 <UART_SetConfig+0x6f6>
 80077f6:	f04f 0308 	mov.w	r3, #8
 80077fa:	f04f 0400 	mov.w	r4, #0
 80077fe:	e012      	b.n	8007826 <UART_SetConfig+0x6f6>
 8007800:	f04f 0306 	mov.w	r3, #6
 8007804:	f04f 0400 	mov.w	r4, #0
 8007808:	e00d      	b.n	8007826 <UART_SetConfig+0x6f6>
 800780a:	f04f 0304 	mov.w	r3, #4
 800780e:	f04f 0400 	mov.w	r4, #0
 8007812:	e008      	b.n	8007826 <UART_SetConfig+0x6f6>
 8007814:	f04f 0302 	mov.w	r3, #2
 8007818:	f04f 0400 	mov.w	r4, #0
 800781c:	e003      	b.n	8007826 <UART_SetConfig+0x6f6>
 800781e:	f04f 0301 	mov.w	r3, #1
 8007822:	f04f 0400 	mov.w	r4, #0
 8007826:	461a      	mov	r2, r3
 8007828:	4623      	mov	r3, r4
 800782a:	f7f8 fcf5 	bl	8000218 <__aeabi_uldivmod>
 800782e:	4603      	mov	r3, r0
 8007830:	460c      	mov	r4, r1
 8007832:	4619      	mov	r1, r3
 8007834:	4622      	mov	r2, r4
 8007836:	f04f 0300 	mov.w	r3, #0
 800783a:	f04f 0400 	mov.w	r4, #0
 800783e:	0214      	lsls	r4, r2, #8
 8007840:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007844:	020b      	lsls	r3, r1, #8
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6852      	ldr	r2, [r2, #4]
 800784a:	0852      	lsrs	r2, r2, #1
 800784c:	4611      	mov	r1, r2
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	eb13 0b01 	adds.w	fp, r3, r1
 8007856:	eb44 0c02 	adc.w	ip, r4, r2
 800785a:	4658      	mov	r0, fp
 800785c:	4661      	mov	r1, ip
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f04f 0400 	mov.w	r4, #0
 8007866:	461a      	mov	r2, r3
 8007868:	4623      	mov	r3, r4
 800786a:	f7f8 fcd5 	bl	8000218 <__aeabi_uldivmod>
 800786e:	4603      	mov	r3, r0
 8007870:	460c      	mov	r4, r1
 8007872:	61fb      	str	r3, [r7, #28]
            break;
 8007874:	e1c5      	b.n	8007c02 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	2b00      	cmp	r3, #0
 800787c:	d05b      	beq.n	8007936 <UART_SetConfig+0x806>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	2b01      	cmp	r3, #1
 8007884:	d053      	beq.n	800792e <UART_SetConfig+0x7fe>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	2b02      	cmp	r3, #2
 800788c:	d04b      	beq.n	8007926 <UART_SetConfig+0x7f6>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	2b03      	cmp	r3, #3
 8007894:	d043      	beq.n	800791e <UART_SetConfig+0x7ee>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	2b04      	cmp	r3, #4
 800789c:	d03b      	beq.n	8007916 <UART_SetConfig+0x7e6>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b05      	cmp	r3, #5
 80078a4:	d033      	beq.n	800790e <UART_SetConfig+0x7de>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	2b06      	cmp	r3, #6
 80078ac:	d02b      	beq.n	8007906 <UART_SetConfig+0x7d6>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	2b07      	cmp	r3, #7
 80078b4:	d023      	beq.n	80078fe <UART_SetConfig+0x7ce>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d01b      	beq.n	80078f6 <UART_SetConfig+0x7c6>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	2b09      	cmp	r3, #9
 80078c4:	d013      	beq.n	80078ee <UART_SetConfig+0x7be>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	2b0a      	cmp	r3, #10
 80078cc:	d00b      	beq.n	80078e6 <UART_SetConfig+0x7b6>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	2b0b      	cmp	r3, #11
 80078d4:	d103      	bne.n	80078de <UART_SetConfig+0x7ae>
 80078d6:	4bae      	ldr	r3, [pc, #696]	; (8007b90 <UART_SetConfig+0xa60>)
 80078d8:	f04f 0400 	mov.w	r4, #0
 80078dc:	e02e      	b.n	800793c <UART_SetConfig+0x80c>
 80078de:	4bad      	ldr	r3, [pc, #692]	; (8007b94 <UART_SetConfig+0xa64>)
 80078e0:	f04f 0400 	mov.w	r4, #0
 80078e4:	e02a      	b.n	800793c <UART_SetConfig+0x80c>
 80078e6:	4bac      	ldr	r3, [pc, #688]	; (8007b98 <UART_SetConfig+0xa68>)
 80078e8:	f04f 0400 	mov.w	r4, #0
 80078ec:	e026      	b.n	800793c <UART_SetConfig+0x80c>
 80078ee:	4bab      	ldr	r3, [pc, #684]	; (8007b9c <UART_SetConfig+0xa6c>)
 80078f0:	f04f 0400 	mov.w	r4, #0
 80078f4:	e022      	b.n	800793c <UART_SetConfig+0x80c>
 80078f6:	4baa      	ldr	r3, [pc, #680]	; (8007ba0 <UART_SetConfig+0xa70>)
 80078f8:	f04f 0400 	mov.w	r4, #0
 80078fc:	e01e      	b.n	800793c <UART_SetConfig+0x80c>
 80078fe:	4ba9      	ldr	r3, [pc, #676]	; (8007ba4 <UART_SetConfig+0xa74>)
 8007900:	f04f 0400 	mov.w	r4, #0
 8007904:	e01a      	b.n	800793c <UART_SetConfig+0x80c>
 8007906:	a49e      	add	r4, pc, #632	; (adr r4, 8007b80 <UART_SetConfig+0xa50>)
 8007908:	e9d4 3400 	ldrd	r3, r4, [r4]
 800790c:	e016      	b.n	800793c <UART_SetConfig+0x80c>
 800790e:	4ba6      	ldr	r3, [pc, #664]	; (8007ba8 <UART_SetConfig+0xa78>)
 8007910:	f04f 0400 	mov.w	r4, #0
 8007914:	e012      	b.n	800793c <UART_SetConfig+0x80c>
 8007916:	4ba5      	ldr	r3, [pc, #660]	; (8007bac <UART_SetConfig+0xa7c>)
 8007918:	f04f 0400 	mov.w	r4, #0
 800791c:	e00e      	b.n	800793c <UART_SetConfig+0x80c>
 800791e:	a49a      	add	r4, pc, #616	; (adr r4, 8007b88 <UART_SetConfig+0xa58>)
 8007920:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007924:	e00a      	b.n	800793c <UART_SetConfig+0x80c>
 8007926:	4ba2      	ldr	r3, [pc, #648]	; (8007bb0 <UART_SetConfig+0xa80>)
 8007928:	f04f 0400 	mov.w	r4, #0
 800792c:	e006      	b.n	800793c <UART_SetConfig+0x80c>
 800792e:	4ba1      	ldr	r3, [pc, #644]	; (8007bb4 <UART_SetConfig+0xa84>)
 8007930:	f04f 0400 	mov.w	r4, #0
 8007934:	e002      	b.n	800793c <UART_SetConfig+0x80c>
 8007936:	4b97      	ldr	r3, [pc, #604]	; (8007b94 <UART_SetConfig+0xa64>)
 8007938:	f04f 0400 	mov.w	r4, #0
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6852      	ldr	r2, [r2, #4]
 8007940:	0852      	lsrs	r2, r2, #1
 8007942:	4611      	mov	r1, r2
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	eb13 0b01 	adds.w	fp, r3, r1
 800794c:	eb44 0c02 	adc.w	ip, r4, r2
 8007950:	4658      	mov	r0, fp
 8007952:	4661      	mov	r1, ip
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f04f 0400 	mov.w	r4, #0
 800795c:	461a      	mov	r2, r3
 800795e:	4623      	mov	r3, r4
 8007960:	f7f8 fc5a 	bl	8000218 <__aeabi_uldivmod>
 8007964:	4603      	mov	r3, r0
 8007966:	460c      	mov	r4, r1
 8007968:	61fb      	str	r3, [r7, #28]
            break;
 800796a:	e14a      	b.n	8007c02 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800796c:	f7fd fafc 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8007970:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	4618      	mov	r0, r3
 8007976:	f04f 0100 	mov.w	r1, #0
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	2b00      	cmp	r3, #0
 8007980:	d067      	beq.n	8007a52 <UART_SetConfig+0x922>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	2b01      	cmp	r3, #1
 8007988:	d05e      	beq.n	8007a48 <UART_SetConfig+0x918>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	2b02      	cmp	r3, #2
 8007990:	d055      	beq.n	8007a3e <UART_SetConfig+0x90e>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	2b03      	cmp	r3, #3
 8007998:	d04c      	beq.n	8007a34 <UART_SetConfig+0x904>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d043      	beq.n	8007a2a <UART_SetConfig+0x8fa>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	2b05      	cmp	r3, #5
 80079a8:	d03a      	beq.n	8007a20 <UART_SetConfig+0x8f0>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	2b06      	cmp	r3, #6
 80079b0:	d031      	beq.n	8007a16 <UART_SetConfig+0x8e6>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	2b07      	cmp	r3, #7
 80079b8:	d028      	beq.n	8007a0c <UART_SetConfig+0x8dc>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d01f      	beq.n	8007a02 <UART_SetConfig+0x8d2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	2b09      	cmp	r3, #9
 80079c8:	d016      	beq.n	80079f8 <UART_SetConfig+0x8c8>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	2b0a      	cmp	r3, #10
 80079d0:	d00d      	beq.n	80079ee <UART_SetConfig+0x8be>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	2b0b      	cmp	r3, #11
 80079d8:	d104      	bne.n	80079e4 <UART_SetConfig+0x8b4>
 80079da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079de:	f04f 0400 	mov.w	r4, #0
 80079e2:	e03a      	b.n	8007a5a <UART_SetConfig+0x92a>
 80079e4:	f04f 0301 	mov.w	r3, #1
 80079e8:	f04f 0400 	mov.w	r4, #0
 80079ec:	e035      	b.n	8007a5a <UART_SetConfig+0x92a>
 80079ee:	f04f 0380 	mov.w	r3, #128	; 0x80
 80079f2:	f04f 0400 	mov.w	r4, #0
 80079f6:	e030      	b.n	8007a5a <UART_SetConfig+0x92a>
 80079f8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079fc:	f04f 0400 	mov.w	r4, #0
 8007a00:	e02b      	b.n	8007a5a <UART_SetConfig+0x92a>
 8007a02:	f04f 0320 	mov.w	r3, #32
 8007a06:	f04f 0400 	mov.w	r4, #0
 8007a0a:	e026      	b.n	8007a5a <UART_SetConfig+0x92a>
 8007a0c:	f04f 0310 	mov.w	r3, #16
 8007a10:	f04f 0400 	mov.w	r4, #0
 8007a14:	e021      	b.n	8007a5a <UART_SetConfig+0x92a>
 8007a16:	f04f 030c 	mov.w	r3, #12
 8007a1a:	f04f 0400 	mov.w	r4, #0
 8007a1e:	e01c      	b.n	8007a5a <UART_SetConfig+0x92a>
 8007a20:	f04f 030a 	mov.w	r3, #10
 8007a24:	f04f 0400 	mov.w	r4, #0
 8007a28:	e017      	b.n	8007a5a <UART_SetConfig+0x92a>
 8007a2a:	f04f 0308 	mov.w	r3, #8
 8007a2e:	f04f 0400 	mov.w	r4, #0
 8007a32:	e012      	b.n	8007a5a <UART_SetConfig+0x92a>
 8007a34:	f04f 0306 	mov.w	r3, #6
 8007a38:	f04f 0400 	mov.w	r4, #0
 8007a3c:	e00d      	b.n	8007a5a <UART_SetConfig+0x92a>
 8007a3e:	f04f 0304 	mov.w	r3, #4
 8007a42:	f04f 0400 	mov.w	r4, #0
 8007a46:	e008      	b.n	8007a5a <UART_SetConfig+0x92a>
 8007a48:	f04f 0302 	mov.w	r3, #2
 8007a4c:	f04f 0400 	mov.w	r4, #0
 8007a50:	e003      	b.n	8007a5a <UART_SetConfig+0x92a>
 8007a52:	f04f 0301 	mov.w	r3, #1
 8007a56:	f04f 0400 	mov.w	r4, #0
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	4623      	mov	r3, r4
 8007a5e:	f7f8 fbdb 	bl	8000218 <__aeabi_uldivmod>
 8007a62:	4603      	mov	r3, r0
 8007a64:	460c      	mov	r4, r1
 8007a66:	4619      	mov	r1, r3
 8007a68:	4622      	mov	r2, r4
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	f04f 0400 	mov.w	r4, #0
 8007a72:	0214      	lsls	r4, r2, #8
 8007a74:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007a78:	020b      	lsls	r3, r1, #8
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6852      	ldr	r2, [r2, #4]
 8007a7e:	0852      	lsrs	r2, r2, #1
 8007a80:	4611      	mov	r1, r2
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	eb13 0b01 	adds.w	fp, r3, r1
 8007a8a:	eb44 0c02 	adc.w	ip, r4, r2
 8007a8e:	4658      	mov	r0, fp
 8007a90:	4661      	mov	r1, ip
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f04f 0400 	mov.w	r4, #0
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	4623      	mov	r3, r4
 8007a9e:	f7f8 fbbb 	bl	8000218 <__aeabi_uldivmod>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	61fb      	str	r3, [r7, #28]
            break;
 8007aa8:	e0ab      	b.n	8007c02 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 8088 	beq.w	8007bc4 <UART_SetConfig+0xa94>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d05b      	beq.n	8007b74 <UART_SetConfig+0xa44>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d052      	beq.n	8007b6a <UART_SetConfig+0xa3a>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d04a      	beq.n	8007b62 <UART_SetConfig+0xa32>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d041      	beq.n	8007b58 <UART_SetConfig+0xa28>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b05      	cmp	r3, #5
 8007ada:	d039      	beq.n	8007b50 <UART_SetConfig+0xa20>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b06      	cmp	r3, #6
 8007ae2:	d031      	beq.n	8007b48 <UART_SetConfig+0xa18>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b07      	cmp	r3, #7
 8007aea:	d028      	beq.n	8007b3e <UART_SetConfig+0xa0e>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d01f      	beq.n	8007b34 <UART_SetConfig+0xa04>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b09      	cmp	r3, #9
 8007afa:	d016      	beq.n	8007b2a <UART_SetConfig+0x9fa>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	2b0a      	cmp	r3, #10
 8007b02:	d00d      	beq.n	8007b20 <UART_SetConfig+0x9f0>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	2b0b      	cmp	r3, #11
 8007b0a:	d104      	bne.n	8007b16 <UART_SetConfig+0x9e6>
 8007b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b10:	f04f 0400 	mov.w	r4, #0
 8007b14:	e05a      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b16:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b1a:	f04f 0400 	mov.w	r4, #0
 8007b1e:	e055      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b24:	f04f 0400 	mov.w	r4, #0
 8007b28:	e050      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b2e:	f04f 0400 	mov.w	r4, #0
 8007b32:	e04b      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b38:	f04f 0400 	mov.w	r4, #0
 8007b3c:	e046      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b42:	f04f 0400 	mov.w	r4, #0
 8007b46:	e041      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b48:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <UART_SetConfig+0xa88>)
 8007b4a:	f04f 0400 	mov.w	r4, #0
 8007b4e:	e03d      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b50:	4b1a      	ldr	r3, [pc, #104]	; (8007bbc <UART_SetConfig+0xa8c>)
 8007b52:	f04f 0400 	mov.w	r4, #0
 8007b56:	e039      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b5c:	f04f 0400 	mov.w	r4, #0
 8007b60:	e034      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b62:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <UART_SetConfig+0xa90>)
 8007b64:	f04f 0400 	mov.w	r4, #0
 8007b68:	e030      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b6e:	f04f 0400 	mov.w	r4, #0
 8007b72:	e02b      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b78:	f04f 0400 	mov.w	r4, #0
 8007b7c:	e026      	b.n	8007bcc <UART_SetConfig+0xa9c>
 8007b7e:	bf00      	nop
 8007b80:	14585500 	.word	0x14585500
 8007b84:	00000000 	.word	0x00000000
 8007b88:	28b0aa00 	.word	0x28b0aa00
 8007b8c:	00000000 	.word	0x00000000
 8007b90:	00f42400 	.word	0x00f42400
 8007b94:	f4240000 	.word	0xf4240000
 8007b98:	01e84800 	.word	0x01e84800
 8007b9c:	03d09000 	.word	0x03d09000
 8007ba0:	07a12000 	.word	0x07a12000
 8007ba4:	0f424000 	.word	0x0f424000
 8007ba8:	186a0000 	.word	0x186a0000
 8007bac:	1e848000 	.word	0x1e848000
 8007bb0:	3d090000 	.word	0x3d090000
 8007bb4:	7a120000 	.word	0x7a120000
 8007bb8:	000aaa00 	.word	0x000aaa00
 8007bbc:	000ccc00 	.word	0x000ccc00
 8007bc0:	00155500 	.word	0x00155500
 8007bc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007bc8:	f04f 0400 	mov.w	r4, #0
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6852      	ldr	r2, [r2, #4]
 8007bd0:	0852      	lsrs	r2, r2, #1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	eb13 0b01 	adds.w	fp, r3, r1
 8007bdc:	eb44 0c02 	adc.w	ip, r4, r2
 8007be0:	4658      	mov	r0, fp
 8007be2:	4661      	mov	r1, ip
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f04f 0400 	mov.w	r4, #0
 8007bec:	461a      	mov	r2, r3
 8007bee:	4623      	mov	r3, r4
 8007bf0:	f7f8 fb12 	bl	8000218 <__aeabi_uldivmod>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	61fb      	str	r3, [r7, #28]
            break;
 8007bfa:	e002      	b.n	8007c02 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	76fb      	strb	r3, [r7, #27]
            break;
 8007c00:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c08:	d309      	bcc.n	8007c1e <UART_SetConfig+0xaee>
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c10:	d205      	bcs.n	8007c1e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	60da      	str	r2, [r3, #12]
 8007c1a:	f000 bc18 	b.w	800844e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	76fb      	strb	r3, [r7, #27]
 8007c22:	f000 bc14 	b.w	800844e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c2e:	f040 8204 	bne.w	800803a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8007c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	f200 81df 	bhi.w	8007ffa <UART_SetConfig+0xeca>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <UART_SetConfig+0xb14>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007d21 	.word	0x08007d21
 8007c4c:	08007dd9 	.word	0x08007dd9
 8007c50:	08007ffb 	.word	0x08007ffb
 8007c54:	08007e81 	.word	0x08007e81
 8007c58:	08007ffb 	.word	0x08007ffb
 8007c5c:	08007ffb 	.word	0x08007ffb
 8007c60:	08007ffb 	.word	0x08007ffb
 8007c64:	08007f39 	.word	0x08007f39
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c68:	f7fd f9ec 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8007c6c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d044      	beq.n	8007d00 <UART_SetConfig+0xbd0>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d03e      	beq.n	8007cfc <UART_SetConfig+0xbcc>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d038      	beq.n	8007cf8 <UART_SetConfig+0xbc8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d032      	beq.n	8007cf4 <UART_SetConfig+0xbc4>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d02c      	beq.n	8007cf0 <UART_SetConfig+0xbc0>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	d026      	beq.n	8007cec <UART_SetConfig+0xbbc>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	2b06      	cmp	r3, #6
 8007ca4:	d020      	beq.n	8007ce8 <UART_SetConfig+0xbb8>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	2b07      	cmp	r3, #7
 8007cac:	d01a      	beq.n	8007ce4 <UART_SetConfig+0xbb4>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d014      	beq.n	8007ce0 <UART_SetConfig+0xbb0>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	2b09      	cmp	r3, #9
 8007cbc:	d00e      	beq.n	8007cdc <UART_SetConfig+0xbac>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2b0a      	cmp	r3, #10
 8007cc4:	d008      	beq.n	8007cd8 <UART_SetConfig+0xba8>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	2b0b      	cmp	r3, #11
 8007ccc:	d102      	bne.n	8007cd4 <UART_SetConfig+0xba4>
 8007cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cd2:	e016      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e014      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007cd8:	2380      	movs	r3, #128	; 0x80
 8007cda:	e012      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007cdc:	2340      	movs	r3, #64	; 0x40
 8007cde:	e010      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	e00e      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	e00c      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007ce8:	230c      	movs	r3, #12
 8007cea:	e00a      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007cec:	230a      	movs	r3, #10
 8007cee:	e008      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	e006      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007cf4:	2306      	movs	r3, #6
 8007cf6:	e004      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007cf8:	2304      	movs	r3, #4
 8007cfa:	e002      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e000      	b.n	8007d02 <UART_SetConfig+0xbd2>
 8007d00:	2301      	movs	r3, #1
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d08:	005a      	lsls	r2, r3, #1
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	441a      	add	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	61fb      	str	r3, [r7, #28]
        break;
 8007d1e:	e16f      	b.n	8008000 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d20:	f7fd f9a6 	bl	8005070 <HAL_RCC_GetPCLK2Freq>
 8007d24:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d044      	beq.n	8007db8 <UART_SetConfig+0xc88>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d03e      	beq.n	8007db4 <UART_SetConfig+0xc84>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d038      	beq.n	8007db0 <UART_SetConfig+0xc80>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d032      	beq.n	8007dac <UART_SetConfig+0xc7c>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d02c      	beq.n	8007da8 <UART_SetConfig+0xc78>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	2b05      	cmp	r3, #5
 8007d54:	d026      	beq.n	8007da4 <UART_SetConfig+0xc74>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	2b06      	cmp	r3, #6
 8007d5c:	d020      	beq.n	8007da0 <UART_SetConfig+0xc70>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	2b07      	cmp	r3, #7
 8007d64:	d01a      	beq.n	8007d9c <UART_SetConfig+0xc6c>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d014      	beq.n	8007d98 <UART_SetConfig+0xc68>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	2b09      	cmp	r3, #9
 8007d74:	d00e      	beq.n	8007d94 <UART_SetConfig+0xc64>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	2b0a      	cmp	r3, #10
 8007d7c:	d008      	beq.n	8007d90 <UART_SetConfig+0xc60>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	2b0b      	cmp	r3, #11
 8007d84:	d102      	bne.n	8007d8c <UART_SetConfig+0xc5c>
 8007d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d8a:	e016      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e014      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	e012      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	e010      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007d98:	2320      	movs	r3, #32
 8007d9a:	e00e      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	e00c      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007da0:	230c      	movs	r3, #12
 8007da2:	e00a      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007da4:	230a      	movs	r3, #10
 8007da6:	e008      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007da8:	2308      	movs	r3, #8
 8007daa:	e006      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007dac:	2306      	movs	r3, #6
 8007dae:	e004      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007db0:	2304      	movs	r3, #4
 8007db2:	e002      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e000      	b.n	8007dba <UART_SetConfig+0xc8a>
 8007db8:	2301      	movs	r3, #1
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	005a      	lsls	r2, r3, #1
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	441a      	add	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	61fb      	str	r3, [r7, #28]
        break;
 8007dd6:	e113      	b.n	8008000 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d043      	beq.n	8007e68 <UART_SetConfig+0xd38>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d03d      	beq.n	8007e64 <UART_SetConfig+0xd34>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d037      	beq.n	8007e60 <UART_SetConfig+0xd30>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d031      	beq.n	8007e5c <UART_SetConfig+0xd2c>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d02b      	beq.n	8007e58 <UART_SetConfig+0xd28>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	2b05      	cmp	r3, #5
 8007e06:	d025      	beq.n	8007e54 <UART_SetConfig+0xd24>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	2b06      	cmp	r3, #6
 8007e0e:	d01f      	beq.n	8007e50 <UART_SetConfig+0xd20>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	2b07      	cmp	r3, #7
 8007e16:	d019      	beq.n	8007e4c <UART_SetConfig+0xd1c>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d013      	beq.n	8007e48 <UART_SetConfig+0xd18>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	2b09      	cmp	r3, #9
 8007e26:	d00d      	beq.n	8007e44 <UART_SetConfig+0xd14>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	2b0a      	cmp	r3, #10
 8007e2e:	d007      	beq.n	8007e40 <UART_SetConfig+0xd10>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	2b0b      	cmp	r3, #11
 8007e36:	d101      	bne.n	8007e3c <UART_SetConfig+0xd0c>
 8007e38:	4b8d      	ldr	r3, [pc, #564]	; (8008070 <UART_SetConfig+0xf40>)
 8007e3a:	e016      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e3c:	4b8d      	ldr	r3, [pc, #564]	; (8008074 <UART_SetConfig+0xf44>)
 8007e3e:	e014      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e40:	4b8d      	ldr	r3, [pc, #564]	; (8008078 <UART_SetConfig+0xf48>)
 8007e42:	e012      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e44:	4b8d      	ldr	r3, [pc, #564]	; (800807c <UART_SetConfig+0xf4c>)
 8007e46:	e010      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e48:	4b8d      	ldr	r3, [pc, #564]	; (8008080 <UART_SetConfig+0xf50>)
 8007e4a:	e00e      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e4c:	4b8d      	ldr	r3, [pc, #564]	; (8008084 <UART_SetConfig+0xf54>)
 8007e4e:	e00c      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e50:	4b8d      	ldr	r3, [pc, #564]	; (8008088 <UART_SetConfig+0xf58>)
 8007e52:	e00a      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e54:	4b8d      	ldr	r3, [pc, #564]	; (800808c <UART_SetConfig+0xf5c>)
 8007e56:	e008      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e58:	4b8d      	ldr	r3, [pc, #564]	; (8008090 <UART_SetConfig+0xf60>)
 8007e5a:	e006      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e5c:	4b8d      	ldr	r3, [pc, #564]	; (8008094 <UART_SetConfig+0xf64>)
 8007e5e:	e004      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e60:	4b8d      	ldr	r3, [pc, #564]	; (8008098 <UART_SetConfig+0xf68>)
 8007e62:	e002      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e64:	4b8d      	ldr	r3, [pc, #564]	; (800809c <UART_SetConfig+0xf6c>)
 8007e66:	e000      	b.n	8007e6a <UART_SetConfig+0xd3a>
 8007e68:	4b82      	ldr	r3, [pc, #520]	; (8008074 <UART_SetConfig+0xf44>)
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6852      	ldr	r2, [r2, #4]
 8007e6e:	0852      	lsrs	r2, r2, #1
 8007e70:	441a      	add	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	61fb      	str	r3, [r7, #28]
        break;
 8007e7e:	e0bf      	b.n	8008000 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e80:	f7fd f872 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8007e84:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d044      	beq.n	8007f18 <UART_SetConfig+0xde8>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d03e      	beq.n	8007f14 <UART_SetConfig+0xde4>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d038      	beq.n	8007f10 <UART_SetConfig+0xde0>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d032      	beq.n	8007f0c <UART_SetConfig+0xddc>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d02c      	beq.n	8007f08 <UART_SetConfig+0xdd8>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b05      	cmp	r3, #5
 8007eb4:	d026      	beq.n	8007f04 <UART_SetConfig+0xdd4>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b06      	cmp	r3, #6
 8007ebc:	d020      	beq.n	8007f00 <UART_SetConfig+0xdd0>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2b07      	cmp	r3, #7
 8007ec4:	d01a      	beq.n	8007efc <UART_SetConfig+0xdcc>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d014      	beq.n	8007ef8 <UART_SetConfig+0xdc8>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	2b09      	cmp	r3, #9
 8007ed4:	d00e      	beq.n	8007ef4 <UART_SetConfig+0xdc4>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	2b0a      	cmp	r3, #10
 8007edc:	d008      	beq.n	8007ef0 <UART_SetConfig+0xdc0>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	2b0b      	cmp	r3, #11
 8007ee4:	d102      	bne.n	8007eec <UART_SetConfig+0xdbc>
 8007ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eea:	e016      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e014      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007ef0:	2380      	movs	r3, #128	; 0x80
 8007ef2:	e012      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	e010      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007ef8:	2320      	movs	r3, #32
 8007efa:	e00e      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007efc:	2310      	movs	r3, #16
 8007efe:	e00c      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007f00:	230c      	movs	r3, #12
 8007f02:	e00a      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007f04:	230a      	movs	r3, #10
 8007f06:	e008      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007f08:	2308      	movs	r3, #8
 8007f0a:	e006      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007f0c:	2306      	movs	r3, #6
 8007f0e:	e004      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007f10:	2304      	movs	r3, #4
 8007f12:	e002      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e000      	b.n	8007f1a <UART_SetConfig+0xdea>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f20:	005a      	lsls	r2, r3, #1
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	441a      	add	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	61fb      	str	r3, [r7, #28]
        break;
 8007f36:	e063      	b.n	8008000 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d04f      	beq.n	8007fe0 <UART_SetConfig+0xeb0>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d048      	beq.n	8007fda <UART_SetConfig+0xeaa>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d041      	beq.n	8007fd4 <UART_SetConfig+0xea4>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d03a      	beq.n	8007fce <UART_SetConfig+0xe9e>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d033      	beq.n	8007fc8 <UART_SetConfig+0xe98>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	2b05      	cmp	r3, #5
 8007f66:	d02c      	beq.n	8007fc2 <UART_SetConfig+0xe92>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	2b06      	cmp	r3, #6
 8007f6e:	d025      	beq.n	8007fbc <UART_SetConfig+0xe8c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	2b07      	cmp	r3, #7
 8007f76:	d01e      	beq.n	8007fb6 <UART_SetConfig+0xe86>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d017      	beq.n	8007fb0 <UART_SetConfig+0xe80>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	2b09      	cmp	r3, #9
 8007f86:	d010      	beq.n	8007faa <UART_SetConfig+0xe7a>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	2b0a      	cmp	r3, #10
 8007f8e:	d009      	beq.n	8007fa4 <UART_SetConfig+0xe74>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	2b0b      	cmp	r3, #11
 8007f96:	d102      	bne.n	8007f9e <UART_SetConfig+0xe6e>
 8007f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f9c:	e022      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fa2:	e01f      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fa8:	e01c      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fae:	e019      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fb4:	e016      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fba:	e013      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fbc:	f241 5354 	movw	r3, #5460	; 0x1554
 8007fc0:	e010      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fc2:	f641 1398 	movw	r3, #6552	; 0x1998
 8007fc6:	e00d      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fcc:	e00a      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fce:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007fd2:	e007      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fd8:	e004      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fde:	e001      	b.n	8007fe4 <UART_SetConfig+0xeb4>
 8007fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6852      	ldr	r2, [r2, #4]
 8007fe8:	0852      	lsrs	r2, r2, #1
 8007fea:	441a      	add	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	61fb      	str	r3, [r7, #28]
        break;
 8007ff8:	e002      	b.n	8008000 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	76fb      	strb	r3, [r7, #27]
        break;
 8007ffe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	2b0f      	cmp	r3, #15
 8008004:	d916      	bls.n	8008034 <UART_SetConfig+0xf04>
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800800c:	d212      	bcs.n	8008034 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	b29b      	uxth	r3, r3
 8008012:	f023 030f 	bic.w	r3, r3, #15
 8008016:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	b29b      	uxth	r3, r3
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	b29a      	uxth	r2, r3
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	4313      	orrs	r3, r2
 8008028:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	89fa      	ldrh	r2, [r7, #14]
 8008030:	60da      	str	r2, [r3, #12]
 8008032:	e20c      	b.n	800844e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	76fb      	strb	r3, [r7, #27]
 8008038:	e209      	b.n	800844e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 800803a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800803e:	2b08      	cmp	r3, #8
 8008040:	f200 81f4 	bhi.w	800842c <UART_SetConfig+0x12fc>
 8008044:	a201      	add	r2, pc, #4	; (adr r2, 800804c <UART_SetConfig+0xf1c>)
 8008046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804a:	bf00      	nop
 800804c:	080080a1 	.word	0x080080a1
 8008050:	08008157 	.word	0x08008157
 8008054:	0800820d 	.word	0x0800820d
 8008058:	0800842d 	.word	0x0800842d
 800805c:	080082b7 	.word	0x080082b7
 8008060:	0800842d 	.word	0x0800842d
 8008064:	0800842d 	.word	0x0800842d
 8008068:	0800842d 	.word	0x0800842d
 800806c:	0800836d 	.word	0x0800836d
 8008070:	0001e848 	.word	0x0001e848
 8008074:	01e84800 	.word	0x01e84800
 8008078:	0003d090 	.word	0x0003d090
 800807c:	0007a120 	.word	0x0007a120
 8008080:	000f4240 	.word	0x000f4240
 8008084:	001e8480 	.word	0x001e8480
 8008088:	0028b0aa 	.word	0x0028b0aa
 800808c:	0030d400 	.word	0x0030d400
 8008090:	003d0900 	.word	0x003d0900
 8008094:	00516154 	.word	0x00516154
 8008098:	007a1200 	.word	0x007a1200
 800809c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080a0:	f7fc ffd0 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 80080a4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d044      	beq.n	8008138 <UART_SetConfig+0x1008>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d03e      	beq.n	8008134 <UART_SetConfig+0x1004>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d038      	beq.n	8008130 <UART_SetConfig+0x1000>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d032      	beq.n	800812c <UART_SetConfig+0xffc>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d02c      	beq.n	8008128 <UART_SetConfig+0xff8>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b05      	cmp	r3, #5
 80080d4:	d026      	beq.n	8008124 <UART_SetConfig+0xff4>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	2b06      	cmp	r3, #6
 80080dc:	d020      	beq.n	8008120 <UART_SetConfig+0xff0>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	2b07      	cmp	r3, #7
 80080e4:	d01a      	beq.n	800811c <UART_SetConfig+0xfec>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d014      	beq.n	8008118 <UART_SetConfig+0xfe8>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	2b09      	cmp	r3, #9
 80080f4:	d00e      	beq.n	8008114 <UART_SetConfig+0xfe4>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b0a      	cmp	r3, #10
 80080fc:	d008      	beq.n	8008110 <UART_SetConfig+0xfe0>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b0b      	cmp	r3, #11
 8008104:	d102      	bne.n	800810c <UART_SetConfig+0xfdc>
 8008106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800810a:	e016      	b.n	800813a <UART_SetConfig+0x100a>
 800810c:	2301      	movs	r3, #1
 800810e:	e014      	b.n	800813a <UART_SetConfig+0x100a>
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	e012      	b.n	800813a <UART_SetConfig+0x100a>
 8008114:	2340      	movs	r3, #64	; 0x40
 8008116:	e010      	b.n	800813a <UART_SetConfig+0x100a>
 8008118:	2320      	movs	r3, #32
 800811a:	e00e      	b.n	800813a <UART_SetConfig+0x100a>
 800811c:	2310      	movs	r3, #16
 800811e:	e00c      	b.n	800813a <UART_SetConfig+0x100a>
 8008120:	230c      	movs	r3, #12
 8008122:	e00a      	b.n	800813a <UART_SetConfig+0x100a>
 8008124:	230a      	movs	r3, #10
 8008126:	e008      	b.n	800813a <UART_SetConfig+0x100a>
 8008128:	2308      	movs	r3, #8
 800812a:	e006      	b.n	800813a <UART_SetConfig+0x100a>
 800812c:	2306      	movs	r3, #6
 800812e:	e004      	b.n	800813a <UART_SetConfig+0x100a>
 8008130:	2304      	movs	r3, #4
 8008132:	e002      	b.n	800813a <UART_SetConfig+0x100a>
 8008134:	2302      	movs	r3, #2
 8008136:	e000      	b.n	800813a <UART_SetConfig+0x100a>
 8008138:	2301      	movs	r3, #1
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	085b      	lsrs	r3, r3, #1
 8008146:	441a      	add	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008150:	b29b      	uxth	r3, r3
 8008152:	61fb      	str	r3, [r7, #28]
        break;
 8008154:	e16d      	b.n	8008432 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008156:	f7fc ff8b 	bl	8005070 <HAL_RCC_GetPCLK2Freq>
 800815a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	d044      	beq.n	80081ee <UART_SetConfig+0x10be>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	2b01      	cmp	r3, #1
 800816a:	d03e      	beq.n	80081ea <UART_SetConfig+0x10ba>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	2b02      	cmp	r3, #2
 8008172:	d038      	beq.n	80081e6 <UART_SetConfig+0x10b6>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b03      	cmp	r3, #3
 800817a:	d032      	beq.n	80081e2 <UART_SetConfig+0x10b2>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	2b04      	cmp	r3, #4
 8008182:	d02c      	beq.n	80081de <UART_SetConfig+0x10ae>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	2b05      	cmp	r3, #5
 800818a:	d026      	beq.n	80081da <UART_SetConfig+0x10aa>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	2b06      	cmp	r3, #6
 8008192:	d020      	beq.n	80081d6 <UART_SetConfig+0x10a6>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	2b07      	cmp	r3, #7
 800819a:	d01a      	beq.n	80081d2 <UART_SetConfig+0x10a2>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d014      	beq.n	80081ce <UART_SetConfig+0x109e>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	2b09      	cmp	r3, #9
 80081aa:	d00e      	beq.n	80081ca <UART_SetConfig+0x109a>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b0a      	cmp	r3, #10
 80081b2:	d008      	beq.n	80081c6 <UART_SetConfig+0x1096>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	2b0b      	cmp	r3, #11
 80081ba:	d102      	bne.n	80081c2 <UART_SetConfig+0x1092>
 80081bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081c0:	e016      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e014      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081c6:	2380      	movs	r3, #128	; 0x80
 80081c8:	e012      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081ca:	2340      	movs	r3, #64	; 0x40
 80081cc:	e010      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081ce:	2320      	movs	r3, #32
 80081d0:	e00e      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081d2:	2310      	movs	r3, #16
 80081d4:	e00c      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081d6:	230c      	movs	r3, #12
 80081d8:	e00a      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081da:	230a      	movs	r3, #10
 80081dc:	e008      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081de:	2308      	movs	r3, #8
 80081e0:	e006      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081e2:	2306      	movs	r3, #6
 80081e4:	e004      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081e6:	2304      	movs	r3, #4
 80081e8:	e002      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e000      	b.n	80081f0 <UART_SetConfig+0x10c0>
 80081ee:	2301      	movs	r3, #1
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	085b      	lsrs	r3, r3, #1
 80081fc:	441a      	add	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	fbb2 f3f3 	udiv	r3, r2, r3
 8008206:	b29b      	uxth	r3, r3
 8008208:	61fb      	str	r3, [r7, #28]
        break;
 800820a:	e112      	b.n	8008432 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d044      	beq.n	800829e <UART_SetConfig+0x116e>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	2b01      	cmp	r3, #1
 800821a:	d03e      	beq.n	800829a <UART_SetConfig+0x116a>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	2b02      	cmp	r3, #2
 8008222:	d038      	beq.n	8008296 <UART_SetConfig+0x1166>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	2b03      	cmp	r3, #3
 800822a:	d032      	beq.n	8008292 <UART_SetConfig+0x1162>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	2b04      	cmp	r3, #4
 8008232:	d02c      	beq.n	800828e <UART_SetConfig+0x115e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	2b05      	cmp	r3, #5
 800823a:	d026      	beq.n	800828a <UART_SetConfig+0x115a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	2b06      	cmp	r3, #6
 8008242:	d020      	beq.n	8008286 <UART_SetConfig+0x1156>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b07      	cmp	r3, #7
 800824a:	d01a      	beq.n	8008282 <UART_SetConfig+0x1152>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	2b08      	cmp	r3, #8
 8008252:	d014      	beq.n	800827e <UART_SetConfig+0x114e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	2b09      	cmp	r3, #9
 800825a:	d00e      	beq.n	800827a <UART_SetConfig+0x114a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b0a      	cmp	r3, #10
 8008262:	d008      	beq.n	8008276 <UART_SetConfig+0x1146>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b0b      	cmp	r3, #11
 800826a:	d102      	bne.n	8008272 <UART_SetConfig+0x1142>
 800826c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008270:	e016      	b.n	80082a0 <UART_SetConfig+0x1170>
 8008272:	4b81      	ldr	r3, [pc, #516]	; (8008478 <UART_SetConfig+0x1348>)
 8008274:	e014      	b.n	80082a0 <UART_SetConfig+0x1170>
 8008276:	4b81      	ldr	r3, [pc, #516]	; (800847c <UART_SetConfig+0x134c>)
 8008278:	e012      	b.n	80082a0 <UART_SetConfig+0x1170>
 800827a:	4b81      	ldr	r3, [pc, #516]	; (8008480 <UART_SetConfig+0x1350>)
 800827c:	e010      	b.n	80082a0 <UART_SetConfig+0x1170>
 800827e:	4b81      	ldr	r3, [pc, #516]	; (8008484 <UART_SetConfig+0x1354>)
 8008280:	e00e      	b.n	80082a0 <UART_SetConfig+0x1170>
 8008282:	4b81      	ldr	r3, [pc, #516]	; (8008488 <UART_SetConfig+0x1358>)
 8008284:	e00c      	b.n	80082a0 <UART_SetConfig+0x1170>
 8008286:	4b81      	ldr	r3, [pc, #516]	; (800848c <UART_SetConfig+0x135c>)
 8008288:	e00a      	b.n	80082a0 <UART_SetConfig+0x1170>
 800828a:	4b81      	ldr	r3, [pc, #516]	; (8008490 <UART_SetConfig+0x1360>)
 800828c:	e008      	b.n	80082a0 <UART_SetConfig+0x1170>
 800828e:	4b81      	ldr	r3, [pc, #516]	; (8008494 <UART_SetConfig+0x1364>)
 8008290:	e006      	b.n	80082a0 <UART_SetConfig+0x1170>
 8008292:	4b81      	ldr	r3, [pc, #516]	; (8008498 <UART_SetConfig+0x1368>)
 8008294:	e004      	b.n	80082a0 <UART_SetConfig+0x1170>
 8008296:	4b81      	ldr	r3, [pc, #516]	; (800849c <UART_SetConfig+0x136c>)
 8008298:	e002      	b.n	80082a0 <UART_SetConfig+0x1170>
 800829a:	4b81      	ldr	r3, [pc, #516]	; (80084a0 <UART_SetConfig+0x1370>)
 800829c:	e000      	b.n	80082a0 <UART_SetConfig+0x1170>
 800829e:	4b76      	ldr	r3, [pc, #472]	; (8008478 <UART_SetConfig+0x1348>)
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6852      	ldr	r2, [r2, #4]
 80082a4:	0852      	lsrs	r2, r2, #1
 80082a6:	441a      	add	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	61fb      	str	r3, [r7, #28]
        break;
 80082b4:	e0bd      	b.n	8008432 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082b6:	f7fc fe57 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 80082ba:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d044      	beq.n	800834e <UART_SetConfig+0x121e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d03e      	beq.n	800834a <UART_SetConfig+0x121a>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d038      	beq.n	8008346 <UART_SetConfig+0x1216>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d032      	beq.n	8008342 <UART_SetConfig+0x1212>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d02c      	beq.n	800833e <UART_SetConfig+0x120e>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b05      	cmp	r3, #5
 80082ea:	d026      	beq.n	800833a <UART_SetConfig+0x120a>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b06      	cmp	r3, #6
 80082f2:	d020      	beq.n	8008336 <UART_SetConfig+0x1206>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	2b07      	cmp	r3, #7
 80082fa:	d01a      	beq.n	8008332 <UART_SetConfig+0x1202>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	2b08      	cmp	r3, #8
 8008302:	d014      	beq.n	800832e <UART_SetConfig+0x11fe>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2b09      	cmp	r3, #9
 800830a:	d00e      	beq.n	800832a <UART_SetConfig+0x11fa>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	2b0a      	cmp	r3, #10
 8008312:	d008      	beq.n	8008326 <UART_SetConfig+0x11f6>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b0b      	cmp	r3, #11
 800831a:	d102      	bne.n	8008322 <UART_SetConfig+0x11f2>
 800831c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008320:	e016      	b.n	8008350 <UART_SetConfig+0x1220>
 8008322:	2301      	movs	r3, #1
 8008324:	e014      	b.n	8008350 <UART_SetConfig+0x1220>
 8008326:	2380      	movs	r3, #128	; 0x80
 8008328:	e012      	b.n	8008350 <UART_SetConfig+0x1220>
 800832a:	2340      	movs	r3, #64	; 0x40
 800832c:	e010      	b.n	8008350 <UART_SetConfig+0x1220>
 800832e:	2320      	movs	r3, #32
 8008330:	e00e      	b.n	8008350 <UART_SetConfig+0x1220>
 8008332:	2310      	movs	r3, #16
 8008334:	e00c      	b.n	8008350 <UART_SetConfig+0x1220>
 8008336:	230c      	movs	r3, #12
 8008338:	e00a      	b.n	8008350 <UART_SetConfig+0x1220>
 800833a:	230a      	movs	r3, #10
 800833c:	e008      	b.n	8008350 <UART_SetConfig+0x1220>
 800833e:	2308      	movs	r3, #8
 8008340:	e006      	b.n	8008350 <UART_SetConfig+0x1220>
 8008342:	2306      	movs	r3, #6
 8008344:	e004      	b.n	8008350 <UART_SetConfig+0x1220>
 8008346:	2304      	movs	r3, #4
 8008348:	e002      	b.n	8008350 <UART_SetConfig+0x1220>
 800834a:	2302      	movs	r3, #2
 800834c:	e000      	b.n	8008350 <UART_SetConfig+0x1220>
 800834e:	2301      	movs	r3, #1
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	fbb2 f2f3 	udiv	r2, r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	085b      	lsrs	r3, r3, #1
 800835c:	441a      	add	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	fbb2 f3f3 	udiv	r3, r2, r3
 8008366:	b29b      	uxth	r3, r3
 8008368:	61fb      	str	r3, [r7, #28]
        break;
 800836a:	e062      	b.n	8008432 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	d04e      	beq.n	8008412 <UART_SetConfig+0x12e2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	2b01      	cmp	r3, #1
 800837a:	d047      	beq.n	800840c <UART_SetConfig+0x12dc>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	2b02      	cmp	r3, #2
 8008382:	d040      	beq.n	8008406 <UART_SetConfig+0x12d6>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	2b03      	cmp	r3, #3
 800838a:	d039      	beq.n	8008400 <UART_SetConfig+0x12d0>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	2b04      	cmp	r3, #4
 8008392:	d032      	beq.n	80083fa <UART_SetConfig+0x12ca>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	2b05      	cmp	r3, #5
 800839a:	d02b      	beq.n	80083f4 <UART_SetConfig+0x12c4>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	2b06      	cmp	r3, #6
 80083a2:	d024      	beq.n	80083ee <UART_SetConfig+0x12be>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	2b07      	cmp	r3, #7
 80083aa:	d01d      	beq.n	80083e8 <UART_SetConfig+0x12b8>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d016      	beq.n	80083e2 <UART_SetConfig+0x12b2>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	2b09      	cmp	r3, #9
 80083ba:	d00f      	beq.n	80083dc <UART_SetConfig+0x12ac>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2b0a      	cmp	r3, #10
 80083c2:	d008      	beq.n	80083d6 <UART_SetConfig+0x12a6>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	2b0b      	cmp	r3, #11
 80083ca:	d101      	bne.n	80083d0 <UART_SetConfig+0x12a0>
 80083cc:	2380      	movs	r3, #128	; 0x80
 80083ce:	e022      	b.n	8008416 <UART_SetConfig+0x12e6>
 80083d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083d4:	e01f      	b.n	8008416 <UART_SetConfig+0x12e6>
 80083d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083da:	e01c      	b.n	8008416 <UART_SetConfig+0x12e6>
 80083dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083e0:	e019      	b.n	8008416 <UART_SetConfig+0x12e6>
 80083e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e6:	e016      	b.n	8008416 <UART_SetConfig+0x12e6>
 80083e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083ec:	e013      	b.n	8008416 <UART_SetConfig+0x12e6>
 80083ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80083f2:	e010      	b.n	8008416 <UART_SetConfig+0x12e6>
 80083f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80083f8:	e00d      	b.n	8008416 <UART_SetConfig+0x12e6>
 80083fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083fe:	e00a      	b.n	8008416 <UART_SetConfig+0x12e6>
 8008400:	f241 5355 	movw	r3, #5461	; 0x1555
 8008404:	e007      	b.n	8008416 <UART_SetConfig+0x12e6>
 8008406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800840a:	e004      	b.n	8008416 <UART_SetConfig+0x12e6>
 800840c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008410:	e001      	b.n	8008416 <UART_SetConfig+0x12e6>
 8008412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6852      	ldr	r2, [r2, #4]
 800841a:	0852      	lsrs	r2, r2, #1
 800841c:	441a      	add	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	fbb2 f3f3 	udiv	r3, r2, r3
 8008426:	b29b      	uxth	r3, r3
 8008428:	61fb      	str	r3, [r7, #28]
        break;
 800842a:	e002      	b.n	8008432 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	76fb      	strb	r3, [r7, #27]
        break;
 8008430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	2b0f      	cmp	r3, #15
 8008436:	d908      	bls.n	800844a <UART_SetConfig+0x131a>
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800843e:	d204      	bcs.n	800844a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	60da      	str	r2, [r3, #12]
 8008448:	e001      	b.n	800844e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800846a:	7efb      	ldrb	r3, [r7, #27]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3728      	adds	r7, #40	; 0x28
 8008470:	46bd      	mov	sp, r7
 8008472:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008476:	bf00      	nop
 8008478:	00f42400 	.word	0x00f42400
 800847c:	0001e848 	.word	0x0001e848
 8008480:	0003d090 	.word	0x0003d090
 8008484:	0007a120 	.word	0x0007a120
 8008488:	000f4240 	.word	0x000f4240
 800848c:	00145855 	.word	0x00145855
 8008490:	00186a00 	.word	0x00186a00
 8008494:	001e8480 	.word	0x001e8480
 8008498:	0028b0aa 	.word	0x0028b0aa
 800849c:	003d0900 	.word	0x003d0900
 80084a0:	007a1200 	.word	0x007a1200

080084a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00a      	beq.n	8008512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	f003 0310 	and.w	r3, r3, #16
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01a      	beq.n	80085ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800859e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085a2:	d10a      	bne.n	80085ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	605a      	str	r2, [r3, #4]
  }
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80085f8:	f7f9 f9aa 	bl	8001950 <HAL_GetTick>
 80085fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b08      	cmp	r3, #8
 800860a:	d10e      	bne.n	800862a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800860c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f82c 	bl	8008678 <UART_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e022      	b.n	8008670 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0304 	and.w	r3, r3, #4
 8008634:	2b04      	cmp	r3, #4
 8008636:	d10e      	bne.n	8008656 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f816 	bl	8008678 <UART_WaitOnFlagUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e00c      	b.n	8008670 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2220      	movs	r2, #32
 800865a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	4613      	mov	r3, r2
 8008686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008688:	e02c      	b.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008690:	d028      	beq.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008692:	f7f9 f95d 	bl	8001950 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d302      	bcc.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d11d      	bne.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086b6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0201 	bic.w	r2, r2, #1
 80086c6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e00f      	b.n	8008704 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69da      	ldr	r2, [r3, #28]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	4013      	ands	r3, r2
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	bf0c      	ite	eq
 80086f4:	2301      	moveq	r3, #1
 80086f6:	2300      	movne	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d0c3      	beq.n	800868a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008722:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	6812      	ldr	r2, [r2, #0]
 800872e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008732:	f023 0301 	bic.w	r3, r3, #1
 8008736:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2220      	movs	r2, #32
 800873c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f7fe fcd3 	bl	800711c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008776:	bf00      	nop
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008794:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7fe fcaf 	bl	8007108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b085      	sub	sp, #20
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <HAL_UARTEx_DisableFifoMode+0x16>
 8008800:	2302      	movs	r3, #2
 8008802:	e027      	b.n	8008854 <HAL_UARTEx_DisableFifoMode+0x66>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2224      	movs	r2, #36	; 0x24
 8008810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0201 	bic.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008832:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008874:	2302      	movs	r3, #2
 8008876:	e02d      	b.n	80088d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2224      	movs	r2, #36	; 0x24
 8008884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0201 	bic.w	r2, r2, #1
 800889e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f84f 	bl	8008958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e02d      	b.n	8008950 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2224      	movs	r2, #36	; 0x24
 8008900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0201 	bic.w	r2, r2, #1
 800891a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f811 	bl	8008958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b089      	sub	sp, #36	; 0x24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008960:	4a2f      	ldr	r2, [pc, #188]	; (8008a20 <UARTEx_SetNbDataToProcess+0xc8>)
 8008962:	f107 0314 	add.w	r3, r7, #20
 8008966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800896a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800896e:	4a2d      	ldr	r2, [pc, #180]	; (8008a24 <UARTEx_SetNbDataToProcess+0xcc>)
 8008970:	f107 030c 	add.w	r3, r7, #12
 8008974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008978:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008980:	2b00      	cmp	r3, #0
 8008982:	d108      	bne.n	8008996 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008994:	e03d      	b.n	8008a12 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008996:	2308      	movs	r3, #8
 8008998:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800899a:	2308      	movs	r3, #8
 800899c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	0e5b      	lsrs	r3, r3, #25
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	0f5b      	lsrs	r3, r3, #29
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80089be:	7fbb      	ldrb	r3, [r7, #30]
 80089c0:	7f3a      	ldrb	r2, [r7, #28]
 80089c2:	f107 0120 	add.w	r1, r7, #32
 80089c6:	440a      	add	r2, r1
 80089c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80089cc:	fb02 f303 	mul.w	r3, r2, r3
 80089d0:	7f3a      	ldrb	r2, [r7, #28]
 80089d2:	f107 0120 	add.w	r1, r7, #32
 80089d6:	440a      	add	r2, r1
 80089d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80089dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80089e8:	7ffb      	ldrb	r3, [r7, #31]
 80089ea:	7f7a      	ldrb	r2, [r7, #29]
 80089ec:	f107 0120 	add.w	r1, r7, #32
 80089f0:	440a      	add	r2, r1
 80089f2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
 80089fa:	7f7a      	ldrb	r2, [r7, #29]
 80089fc:	f107 0120 	add.w	r1, r7, #32
 8008a00:	440a      	add	r2, r1
 8008a02:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a12:	bf00      	nop
 8008a14:	3724      	adds	r7, #36	; 0x24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	08008a98 	.word	0x08008a98
 8008a24:	08008aa0 	.word	0x08008aa0

08008a28 <__libc_init_array>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4e0d      	ldr	r6, [pc, #52]	; (8008a60 <__libc_init_array+0x38>)
 8008a2c:	4c0d      	ldr	r4, [pc, #52]	; (8008a64 <__libc_init_array+0x3c>)
 8008a2e:	1ba4      	subs	r4, r4, r6
 8008a30:	10a4      	asrs	r4, r4, #2
 8008a32:	2500      	movs	r5, #0
 8008a34:	42a5      	cmp	r5, r4
 8008a36:	d109      	bne.n	8008a4c <__libc_init_array+0x24>
 8008a38:	4e0b      	ldr	r6, [pc, #44]	; (8008a68 <__libc_init_array+0x40>)
 8008a3a:	4c0c      	ldr	r4, [pc, #48]	; (8008a6c <__libc_init_array+0x44>)
 8008a3c:	f000 f820 	bl	8008a80 <_init>
 8008a40:	1ba4      	subs	r4, r4, r6
 8008a42:	10a4      	asrs	r4, r4, #2
 8008a44:	2500      	movs	r5, #0
 8008a46:	42a5      	cmp	r5, r4
 8008a48:	d105      	bne.n	8008a56 <__libc_init_array+0x2e>
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a50:	4798      	blx	r3
 8008a52:	3501      	adds	r5, #1
 8008a54:	e7ee      	b.n	8008a34 <__libc_init_array+0xc>
 8008a56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a5a:	4798      	blx	r3
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	e7f2      	b.n	8008a46 <__libc_init_array+0x1e>
 8008a60:	08008ac8 	.word	0x08008ac8
 8008a64:	08008ac8 	.word	0x08008ac8
 8008a68:	08008ac8 	.word	0x08008ac8
 8008a6c:	08008acc 	.word	0x08008acc

08008a70 <memset>:
 8008a70:	4402      	add	r2, r0
 8008a72:	4603      	mov	r3, r0
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d100      	bne.n	8008a7a <memset+0xa>
 8008a78:	4770      	bx	lr
 8008a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a7e:	e7f9      	b.n	8008a74 <memset+0x4>

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
